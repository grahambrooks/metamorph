// $ANTLR 3.4 CodeR.CSharp.Parser/src/antlr/cs.g 2012-08-25 17:31:05

    package CodeR.CSharp;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class csParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CATCH", "CLASS_DECL", "COMMENT", "Character_literal", "DECIMAL_DIGIT", "DEFINE", "DEFINE_TOKEN", "DOC_LINE_COMMENT", "DOT", "Decimal_digits", "Decimal_integer_literal", "ELIF", "ELSE_TOKEN", "ENDIF", "ENDIF_TOKEN", "ENUM", "EscapeSequence", "Exponent_part", "FALSE", "GT", "GooBall", "GooBallIdentifier", "HEX_DIGIT", "HEX_DIGITS", "Hex_number", "IDENTIFIER", "IF", "IF_TOKEN", "INTEGER_TYPE_SUFFIX", "IdentifierPart", "IdentifierStart", "LINE_COMMENT", "MINUS", "NULL", "NUMBER", "PP_AND_EXPRESSION", "PP_CONDITIONAL", "PP_EQUALITY_EXPRESSION", "PP_EXPRESSION", "PP_OR_EXPRESSION", "PP_PRIMARY_EXPRESSION", "PP_UNARY_EXPRESSION", "PREPROCESSOR_DIRECTIVE", "PTR", "Pragma", "RPAREN", "Real_literal", "Real_type_suffix", "SEMI", "STRINGLITERAL", "Sign", "TRUE", "TS", "UNDEF", "UNDEF_TOKEN", "USING", "VARIABLE_DECL", "Verbatim_string_literal", "Verbatim_string_literal_character", "WS", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'--'", "'-='", "'/'", "'/='", "':'", "'::'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>='", "'?'", "'??'", "'['", "']'", "'^'", "'^='", "'__arglist'", "'abstract'", "'add'", "'alias'", "'as'", "'ascending'", "'assembly'", "'base'", "'bool'", "'break'", "'by'", "'byte'", "'case'", "'char'", "'checked'", "'class'", "'const'", "'continue'", "'decimal'", "'default'", "'delegate'", "'descending'", "'do'", "'double'", "'dynamic'", "'else'", "'equals'", "'event'", "'explicit'", "'extern'", "'field'", "'finally'", "'fixed'", "'float'", "'for'", "'foreach'", "'from'", "'get'", "'goto'", "'group'", "'implicit'", "'in'", "'int'", "'interface'", "'internal'", "'into'", "'is'", "'join'", "'let'", "'lock'", "'long'", "'method'", "'module'", "'namespace'", "'new'", "'object'", "'on'", "'operator'", "'orderby'", "'out'", "'override'", "'param'", "'params'", "'partial'", "'pragma'", "'private'", "'property'", "'protected'", "'public'", "'readonly'", "'ref'", "'remove'", "'return'", "'sbyte'", "'sealed'", "'select'", "'set'", "'short'", "'sizeof'", "'stackalloc'", "'static'", "'string'", "'struct'", "'switch'", "'this'", "'throw'", "'try'", "'type'", "'typeof'", "'uint'", "'ulong'", "'unchecked'", "'unsafe'", "'ushort'", "'var'", "'virtual'", "'void'", "'volatile'", "'where'", "'while'", "'yield'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
    };

    public static final int EOF=-1;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__70=70;
    public static final int T__71=71;
    public static final int T__72=72;
    public static final int T__73=73;
    public static final int T__74=74;
    public static final int T__75=75;
    public static final int T__76=76;
    public static final int T__77=77;
    public static final int T__78=78;
    public static final int T__79=79;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__84=84;
    public static final int T__85=85;
    public static final int T__86=86;
    public static final int T__87=87;
    public static final int T__88=88;
    public static final int T__89=89;
    public static final int T__90=90;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__95=95;
    public static final int T__96=96;
    public static final int T__97=97;
    public static final int T__98=98;
    public static final int T__99=99;
    public static final int T__100=100;
    public static final int T__101=101;
    public static final int T__102=102;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__110=110;
    public static final int T__111=111;
    public static final int T__112=112;
    public static final int T__113=113;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__120=120;
    public static final int T__121=121;
    public static final int T__122=122;
    public static final int T__123=123;
    public static final int T__124=124;
    public static final int T__125=125;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__145=145;
    public static final int T__146=146;
    public static final int T__147=147;
    public static final int T__148=148;
    public static final int T__149=149;
    public static final int T__150=150;
    public static final int T__151=151;
    public static final int T__152=152;
    public static final int T__153=153;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int T__194=194;
    public static final int T__195=195;
    public static final int T__196=196;
    public static final int T__197=197;
    public static final int T__198=198;
    public static final int T__199=199;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int T__202=202;
    public static final int T__203=203;
    public static final int T__204=204;
    public static final int CATCH=4;
    public static final int CLASS_DECL=5;
    public static final int COMMENT=6;
    public static final int Character_literal=7;
    public static final int DECIMAL_DIGIT=8;
    public static final int DEFINE=9;
    public static final int DEFINE_TOKEN=10;
    public static final int DOC_LINE_COMMENT=11;
    public static final int DOT=12;
    public static final int Decimal_digits=13;
    public static final int Decimal_integer_literal=14;
    public static final int ELIF=15;
    public static final int ELSE_TOKEN=16;
    public static final int ENDIF=17;
    public static final int ENDIF_TOKEN=18;
    public static final int ENUM=19;
    public static final int EscapeSequence=20;
    public static final int Exponent_part=21;
    public static final int FALSE=22;
    public static final int GT=23;
    public static final int GooBall=24;
    public static final int GooBallIdentifier=25;
    public static final int HEX_DIGIT=26;
    public static final int HEX_DIGITS=27;
    public static final int Hex_number=28;
    public static final int IDENTIFIER=29;
    public static final int IF=30;
    public static final int IF_TOKEN=31;
    public static final int INTEGER_TYPE_SUFFIX=32;
    public static final int IdentifierPart=33;
    public static final int IdentifierStart=34;
    public static final int LINE_COMMENT=35;
    public static final int MINUS=36;
    public static final int NULL=37;
    public static final int NUMBER=38;
    public static final int PP_AND_EXPRESSION=39;
    public static final int PP_CONDITIONAL=40;
    public static final int PP_EQUALITY_EXPRESSION=41;
    public static final int PP_EXPRESSION=42;
    public static final int PP_OR_EXPRESSION=43;
    public static final int PP_PRIMARY_EXPRESSION=44;
    public static final int PP_UNARY_EXPRESSION=45;
    public static final int PREPROCESSOR_DIRECTIVE=46;
    public static final int PTR=47;
    public static final int Pragma=48;
    public static final int RPAREN=49;
    public static final int Real_literal=50;
    public static final int Real_type_suffix=51;
    public static final int SEMI=52;
    public static final int STRINGLITERAL=53;
    public static final int Sign=54;
    public static final int TRUE=55;
    public static final int TS=56;
    public static final int UNDEF=57;
    public static final int UNDEF_TOKEN=58;
    public static final int USING=59;
    public static final int VARIABLE_DECL=60;
    public static final int Verbatim_string_literal=61;
    public static final int Verbatim_string_literal_character=62;
    public static final int WS=63;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public csParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public csParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
        this.state.ruleMemo = new HashMap[356+1];
         

    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return csParser.tokenNames; }
    public String getGrammarFileName() { return "CodeR.CSharp.Parser/src/antlr/cs.g"; }


    	protected boolean is_class_modifier()
    	{
    		return false;
    	}


    public static class compilation_unit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compilation_unit"
    // CodeR.CSharp.Parser/src/antlr/cs.g:44:1: compilation_unit : namespace_body[true] ;
    public final csParser.compilation_unit_return compilation_unit() throws RecognitionException {
        csParser.compilation_unit_return retval = new csParser.compilation_unit_return();
        retval.start = input.LT(1);

        int compilation_unit_StartIndex = input.index();

        Object root_0 = null;

        csParser.namespace_body_return namespace_body1 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:45:2: ( namespace_body[true] )
            // CodeR.CSharp.Parser/src/antlr/cs.g:45:4: namespace_body[true]
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_namespace_body_in_compilation_unit94);
            namespace_body1=namespace_body(true);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_body1.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 1, compilation_unit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "compilation_unit"


    public static class namespace_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "namespace_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:48:1: namespace_declaration : 'namespace' qualified_identifier namespace_block ( ';' )? ;
    public final csParser.namespace_declaration_return namespace_declaration() throws RecognitionException {
        csParser.namespace_declaration_return retval = new csParser.namespace_declaration_return();
        retval.start = input.LT(1);

        int namespace_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal2=null;
        Token char_literal5=null;
        csParser.qualified_identifier_return qualified_identifier3 =null;

        csParser.namespace_block_return namespace_block4 =null;


        Object string_literal2_tree=null;
        Object char_literal5_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:49:2: ( 'namespace' qualified_identifier namespace_block ( ';' )? )
            // CodeR.CSharp.Parser/src/antlr/cs.g:49:4: 'namespace' qualified_identifier namespace_block ( ';' )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal2=(Token)match(input,151,FOLLOW_151_in_namespace_declaration106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal2_tree = 
            (Object)adaptor.create(string_literal2)
            ;
            adaptor.addChild(root_0, string_literal2_tree);
            }

            pushFollow(FOLLOW_qualified_identifier_in_namespace_declaration110);
            qualified_identifier3=qualified_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualified_identifier3.getTree());

            pushFollow(FOLLOW_namespace_block_in_namespace_declaration114);
            namespace_block4=namespace_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_block4.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:49:59: ( ';' )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==SEMI) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:49:59: ';'
                    {
                    char_literal5=(Token)match(input,SEMI,FOLLOW_SEMI_in_namespace_declaration118); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal5_tree = 
                    (Object)adaptor.create(char_literal5)
                    ;
                    adaptor.addChild(root_0, char_literal5_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 2, namespace_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "namespace_declaration"


    public static class namespace_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "namespace_block"
    // CodeR.CSharp.Parser/src/antlr/cs.g:52:1: namespace_block : '{' namespace_body[false] '}' ;
    public final csParser.namespace_block_return namespace_block() throws RecognitionException {
        csParser.namespace_block_return retval = new csParser.namespace_block_return();
        retval.start = input.LT(1);

        int namespace_block_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal6=null;
        Token char_literal8=null;
        csParser.namespace_body_return namespace_body7 =null;


        Object char_literal6_tree=null;
        Object char_literal8_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:53:2: ( '{' namespace_body[false] '}' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:53:4: '{' namespace_body[false] '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal6=(Token)match(input,199,FOLLOW_199_in_namespace_block130); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal6_tree = 
            (Object)adaptor.create(char_literal6)
            ;
            adaptor.addChild(root_0, char_literal6_tree);
            }

            pushFollow(FOLLOW_namespace_body_in_namespace_block134);
            namespace_body7=namespace_body(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_body7.getTree());

            char_literal8=(Token)match(input,203,FOLLOW_203_in_namespace_block139); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal8_tree = 
            (Object)adaptor.create(char_literal8)
            ;
            adaptor.addChild(root_0, char_literal8_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 3, namespace_block_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "namespace_block"


    public static class namespace_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "namespace_body"
    // CodeR.CSharp.Parser/src/antlr/cs.g:56:1: namespace_body[boolean bGlobal] : ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )? ;
    public final csParser.namespace_body_return namespace_body(boolean bGlobal) throws RecognitionException {
        csParser.namespace_body_return retval = new csParser.namespace_body_return();
        retval.start = input.LT(1);

        int namespace_body_StartIndex = input.index();

        Object root_0 = null;

        csParser.extern_alias_directives_return extern_alias_directives9 =null;

        csParser.using_directives_return using_directives10 =null;

        csParser.global_attributes_return global_attributes11 =null;

        csParser.namespace_member_declarations_return namespace_member_declarations12 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:57:2: ( ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )? )
            // CodeR.CSharp.Parser/src/antlr/cs.g:57:4: ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )?
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:57:4: ( extern_alias_directives )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==127) ) {
                int LA2_1 = input.LA(2);

                if ( (LA2_1==101) ) {
                    alt2=1;
                }
            }
            switch (alt2) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:57:4: extern_alias_directives
                    {
                    pushFollow(FOLLOW_extern_alias_directives_in_namespace_body151);
                    extern_alias_directives9=extern_alias_directives();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extern_alias_directives9.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:57:31: ( using_directives )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==USING) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:57:31: using_directives
                    {
                    pushFollow(FOLLOW_using_directives_in_namespace_body156);
                    using_directives10=using_directives();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, using_directives10.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:57:51: ( global_attributes )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==94) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==104||LA4_1==150) ) {
                    int LA4_3 = input.LA(3);

                    if ( (LA4_3==82) ) {
                        alt4=1;
                    }
                }
            }
            switch (alt4) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:57:51: global_attributes
                    {
                    pushFollow(FOLLOW_global_attributes_in_namespace_body161);
                    global_attributes11=global_attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, global_attributes11.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:57:72: ( namespace_member_declarations )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==ENUM||LA5_0==94||LA5_0==99||LA5_0==113||LA5_0==118||LA5_0==127||(LA5_0 >= 141 && LA5_0 <= 142)||(LA5_0 >= 151 && LA5_0 <= 152)||LA5_0==158||LA5_0==161||LA5_0==163||(LA5_0 >= 165 && LA5_0 <= 167)||LA5_0==172||LA5_0==178||LA5_0==180||LA5_0==190||LA5_0==193||LA5_0==195) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:57:72: namespace_member_declarations
                    {
                    pushFollow(FOLLOW_namespace_member_declarations_in_namespace_body166);
                    namespace_member_declarations12=namespace_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_member_declarations12.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 4, namespace_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "namespace_body"


    public static class extern_alias_directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_alias_directives"
    // CodeR.CSharp.Parser/src/antlr/cs.g:60:1: extern_alias_directives : ( extern_alias_directive )+ ;
    public final csParser.extern_alias_directives_return extern_alias_directives() throws RecognitionException {
        csParser.extern_alias_directives_return retval = new csParser.extern_alias_directives_return();
        retval.start = input.LT(1);

        int extern_alias_directives_StartIndex = input.index();

        Object root_0 = null;

        csParser.extern_alias_directive_return extern_alias_directive13 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:61:2: ( ( extern_alias_directive )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:61:4: ( extern_alias_directive )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:61:4: ( extern_alias_directive )+
            int cnt6=0;
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==127) ) {
                    int LA6_2 = input.LA(2);

                    if ( (LA6_2==101) ) {
                        alt6=1;
                    }


                }


                switch (alt6) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:61:4: extern_alias_directive
            	    {
            	    pushFollow(FOLLOW_extern_alias_directive_in_extern_alias_directives178);
            	    extern_alias_directive13=extern_alias_directive();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, extern_alias_directive13.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt6 >= 1 ) break loop6;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(6, input);
                        throw eee;
                }
                cnt6++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 5, extern_alias_directives_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "extern_alias_directives"


    public static class extern_alias_directive_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_alias_directive"
    // CodeR.CSharp.Parser/src/antlr/cs.g:64:1: extern_alias_directive : 'extern' 'alias' identifier ';' ;
    public final csParser.extern_alias_directive_return extern_alias_directive() throws RecognitionException {
        csParser.extern_alias_directive_return retval = new csParser.extern_alias_directive_return();
        retval.start = input.LT(1);

        int extern_alias_directive_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal14=null;
        Token string_literal15=null;
        Token char_literal17=null;
        csParser.identifier_return identifier16 =null;


        Object string_literal14_tree=null;
        Object string_literal15_tree=null;
        Object char_literal17_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:65:2: ( 'extern' 'alias' identifier ';' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:65:4: 'extern' 'alias' identifier ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal14=(Token)match(input,127,FOLLOW_127_in_extern_alias_directive190); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal14_tree = 
            (Object)adaptor.create(string_literal14)
            ;
            adaptor.addChild(root_0, string_literal14_tree);
            }

            string_literal15=(Token)match(input,101,FOLLOW_101_in_extern_alias_directive194); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal15_tree = 
            (Object)adaptor.create(string_literal15)
            ;
            adaptor.addChild(root_0, string_literal15_tree);
            }

            pushFollow(FOLLOW_identifier_in_extern_alias_directive198);
            identifier16=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier16.getTree());

            char_literal17=(Token)match(input,SEMI,FOLLOW_SEMI_in_extern_alias_directive201); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal17_tree = 
            (Object)adaptor.create(char_literal17)
            ;
            adaptor.addChild(root_0, char_literal17_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 6, extern_alias_directive_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "extern_alias_directive"


    public static class using_directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "using_directives"
    // CodeR.CSharp.Parser/src/antlr/cs.g:68:1: using_directives : ( using_directive )+ ;
    public final csParser.using_directives_return using_directives() throws RecognitionException {
        csParser.using_directives_return retval = new csParser.using_directives_return();
        retval.start = input.LT(1);

        int using_directives_StartIndex = input.index();

        Object root_0 = null;

        csParser.using_directive_return using_directive18 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:69:2: ( ( using_directive )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:69:4: ( using_directive )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:69:4: ( using_directive )+
            int cnt7=0;
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==USING) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:69:4: using_directive
            	    {
            	    pushFollow(FOLLOW_using_directive_in_using_directives212);
            	    using_directive18=using_directive();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, using_directive18.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt7 >= 1 ) break loop7;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(7, input);
                        throw eee;
                }
                cnt7++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 7, using_directives_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "using_directives"


    public static class using_directive_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "using_directive"
    // CodeR.CSharp.Parser/src/antlr/cs.g:72:1: using_directive : ( using_alias_directive | using_namespace_directive ) ;
    public final csParser.using_directive_return using_directive() throws RecognitionException {
        csParser.using_directive_return retval = new csParser.using_directive_return();
        retval.start = input.LT(1);

        int using_directive_StartIndex = input.index();

        Object root_0 = null;

        csParser.using_alias_directive_return using_alias_directive19 =null;

        csParser.using_namespace_directive_return using_namespace_directive20 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:73:2: ( ( using_alias_directive | using_namespace_directive ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:73:4: ( using_alias_directive | using_namespace_directive )
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:73:4: ( using_alias_directive | using_namespace_directive )
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==USING) ) {
                int LA8_1 = input.LA(2);

                if ( (LA8_1==IDENTIFIER||LA8_1==98||(LA8_1 >= 100 && LA8_1 <= 101)||(LA8_1 >= 103 && LA8_1 <= 104)||LA8_1==108||LA8_1==119||LA8_1==122||LA8_1==124||LA8_1==128||LA8_1==134||LA8_1==137||LA8_1==143||(LA8_1 >= 145 && LA8_1 <= 146)||(LA8_1 >= 149 && LA8_1 <= 150)||LA8_1==154||LA8_1==156||LA8_1==159||LA8_1==162||LA8_1==164||LA8_1==169||(LA8_1 >= 173 && LA8_1 <= 174)||LA8_1==185||LA8_1==192||LA8_1==196||LA8_1==198) ) {
                    int LA8_2 = input.LA(3);

                    if ( (LA8_2==88) ) {
                        alt8=1;
                    }
                    else if ( (LA8_2==DOT||LA8_2==SEMI||(LA8_2 >= 83 && LA8_2 <= 84)) ) {
                        alt8=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 8, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }
            switch (alt8) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:74:4: using_alias_directive
                    {
                    pushFollow(FOLLOW_using_alias_directive_in_using_directive229);
                    using_alias_directive19=using_alias_directive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, using_alias_directive19.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:75:5: using_namespace_directive
                    {
                    pushFollow(FOLLOW_using_namespace_directive_in_using_directive235);
                    using_namespace_directive20=using_namespace_directive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, using_namespace_directive20.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 8, using_directive_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "using_directive"


    public static class using_alias_directive_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "using_alias_directive"
    // CodeR.CSharp.Parser/src/antlr/cs.g:79:1: using_alias_directive : 'using' identifier '=' namespace_or_type_name ';' ;
    public final csParser.using_alias_directive_return using_alias_directive() throws RecognitionException {
        csParser.using_alias_directive_return retval = new csParser.using_alias_directive_return();
        retval.start = input.LT(1);

        int using_alias_directive_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal21=null;
        Token char_literal23=null;
        Token char_literal25=null;
        csParser.identifier_return identifier22 =null;

        csParser.namespace_or_type_name_return namespace_or_type_name24 =null;


        Object string_literal21_tree=null;
        Object char_literal23_tree=null;
        Object char_literal25_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:80:2: ( 'using' identifier '=' namespace_or_type_name ';' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:80:4: 'using' identifier '=' namespace_or_type_name ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal21=(Token)match(input,USING,FOLLOW_USING_in_using_alias_directive250); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal21_tree = 
            (Object)adaptor.create(string_literal21)
            ;
            adaptor.addChild(root_0, string_literal21_tree);
            }

            pushFollow(FOLLOW_identifier_in_using_alias_directive254);
            identifier22=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier22.getTree());

            char_literal23=(Token)match(input,88,FOLLOW_88_in_using_alias_directive258); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal23_tree = 
            (Object)adaptor.create(char_literal23)
            ;
            adaptor.addChild(root_0, char_literal23_tree);
            }

            pushFollow(FOLLOW_namespace_or_type_name_in_using_alias_directive262);
            namespace_or_type_name24=namespace_or_type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_or_type_name24.getTree());

            char_literal25=(Token)match(input,SEMI,FOLLOW_SEMI_in_using_alias_directive266); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal25_tree = 
            (Object)adaptor.create(char_literal25)
            ;
            adaptor.addChild(root_0, char_literal25_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 9, using_alias_directive_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "using_alias_directive"


    public static class using_namespace_directive_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "using_namespace_directive"
    // CodeR.CSharp.Parser/src/antlr/cs.g:83:1: using_namespace_directive : 'using' namespace_name ';' ;
    public final csParser.using_namespace_directive_return using_namespace_directive() throws RecognitionException {
        csParser.using_namespace_directive_return retval = new csParser.using_namespace_directive_return();
        retval.start = input.LT(1);

        int using_namespace_directive_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal26=null;
        Token char_literal28=null;
        csParser.namespace_name_return namespace_name27 =null;


        Object string_literal26_tree=null;
        Object char_literal28_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:84:2: ( 'using' namespace_name ';' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:84:4: 'using' namespace_name ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal26=(Token)match(input,USING,FOLLOW_USING_in_using_namespace_directive277); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal26_tree = 
            (Object)adaptor.create(string_literal26)
            ;
            adaptor.addChild(root_0, string_literal26_tree);
            }

            pushFollow(FOLLOW_namespace_name_in_using_namespace_directive281);
            namespace_name27=namespace_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_name27.getTree());

            char_literal28=(Token)match(input,SEMI,FOLLOW_SEMI_in_using_namespace_directive285); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal28_tree = 
            (Object)adaptor.create(char_literal28)
            ;
            adaptor.addChild(root_0, char_literal28_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 10, using_namespace_directive_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "using_namespace_directive"


    public static class namespace_member_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "namespace_member_declarations"
    // CodeR.CSharp.Parser/src/antlr/cs.g:87:1: namespace_member_declarations : ( namespace_member_declaration )+ ;
    public final csParser.namespace_member_declarations_return namespace_member_declarations() throws RecognitionException {
        csParser.namespace_member_declarations_return retval = new csParser.namespace_member_declarations_return();
        retval.start = input.LT(1);

        int namespace_member_declarations_StartIndex = input.index();

        Object root_0 = null;

        csParser.namespace_member_declaration_return namespace_member_declaration29 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:88:2: ( ( namespace_member_declaration )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:88:4: ( namespace_member_declaration )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:88:4: ( namespace_member_declaration )+
            int cnt9=0;
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( (LA9_0==ENUM||LA9_0==94||LA9_0==99||LA9_0==113||LA9_0==118||LA9_0==127||(LA9_0 >= 141 && LA9_0 <= 142)||(LA9_0 >= 151 && LA9_0 <= 152)||LA9_0==158||LA9_0==161||LA9_0==163||(LA9_0 >= 165 && LA9_0 <= 167)||LA9_0==172||LA9_0==178||LA9_0==180||LA9_0==190||LA9_0==193||LA9_0==195) ) {
                    alt9=1;
                }


                switch (alt9) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:88:4: namespace_member_declaration
            	    {
            	    pushFollow(FOLLOW_namespace_member_declaration_in_namespace_member_declarations296);
            	    namespace_member_declaration29=namespace_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_member_declaration29.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt9 >= 1 ) break loop9;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(9, input);
                        throw eee;
                }
                cnt9++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 11, namespace_member_declarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "namespace_member_declarations"


    public static class namespace_member_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "namespace_member_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:91:1: namespace_member_declaration : ( namespace_declaration | ( attributes )? ( modifiers )? type_declaration );
    public final csParser.namespace_member_declaration_return namespace_member_declaration() throws RecognitionException {
        csParser.namespace_member_declaration_return retval = new csParser.namespace_member_declaration_return();
        retval.start = input.LT(1);

        int namespace_member_declaration_StartIndex = input.index();

        Object root_0 = null;

        csParser.namespace_declaration_return namespace_declaration30 =null;

        csParser.attributes_return attributes31 =null;

        csParser.modifiers_return modifiers32 =null;

        csParser.type_declaration_return type_declaration33 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:92:2: ( namespace_declaration | ( attributes )? ( modifiers )? type_declaration )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==151) ) {
                alt12=1;
            }
            else if ( (LA12_0==ENUM||LA12_0==94||LA12_0==99||LA12_0==113||LA12_0==118||LA12_0==127||(LA12_0 >= 141 && LA12_0 <= 142)||LA12_0==152||LA12_0==158||LA12_0==161||LA12_0==163||(LA12_0 >= 165 && LA12_0 <= 167)||LA12_0==172||LA12_0==178||LA12_0==180||LA12_0==190||LA12_0==193||LA12_0==195) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;

            }
            switch (alt12) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:92:4: namespace_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_namespace_declaration_in_namespace_member_declaration308);
                    namespace_declaration30=namespace_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_declaration30.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:93:4: ( attributes )? ( modifiers )? type_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    // CodeR.CSharp.Parser/src/antlr/cs.g:93:4: ( attributes )?
                    int alt10=2;
                    int LA10_0 = input.LA(1);

                    if ( (LA10_0==94) ) {
                        alt10=1;
                    }
                    switch (alt10) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:93:4: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_namespace_member_declaration313);
                            attributes31=attributes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes31.getTree());

                            }
                            break;

                    }


                    // CodeR.CSharp.Parser/src/antlr/cs.g:93:18: ( modifiers )?
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==99||LA11_0==127||LA11_0==142||LA11_0==152||LA11_0==158||LA11_0==163||(LA11_0 >= 165 && LA11_0 <= 167)||LA11_0==172||LA11_0==178||LA11_0==190||LA11_0==193||LA11_0==195) ) {
                        alt11=1;
                    }
                    switch (alt11) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:93:18: modifiers
                            {
                            pushFollow(FOLLOW_modifiers_in_namespace_member_declaration318);
                            modifiers32=modifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers32.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_declaration_in_namespace_member_declaration323);
                    type_declaration33=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration33.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 12, namespace_member_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "namespace_member_declaration"


    public static class type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:96:1: type_declaration : ( ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration ) | class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration );
    public final csParser.type_declaration_return type_declaration() throws RecognitionException {
        csParser.type_declaration_return retval = new csParser.type_declaration_return();
        retval.start = input.LT(1);

        int type_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal34=null;
        csParser.class_declaration_return class_declaration35 =null;

        csParser.struct_declaration_return struct_declaration36 =null;

        csParser.interface_declaration_return interface_declaration37 =null;

        csParser.class_declaration_return class_declaration38 =null;

        csParser.struct_declaration_return struct_declaration39 =null;

        csParser.interface_declaration_return interface_declaration40 =null;

        csParser.enum_declaration_return enum_declaration41 =null;

        csParser.delegate_declaration_return delegate_declaration42 =null;


        Object string_literal34_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:97:2: ( ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration ) | class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration )
            int alt14=6;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==161) && (synpred1_cs())) {
                alt14=1;
            }
            else if ( (LA14_0==113) ) {
                alt14=2;
            }
            else if ( (LA14_0==180) ) {
                alt14=3;
            }
            else if ( (LA14_0==141) ) {
                alt14=4;
            }
            else if ( (LA14_0==ENUM) ) {
                alt14=5;
            }
            else if ( (LA14_0==118) ) {
                alt14=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }
            switch (alt14) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:97:4: ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration )
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal34=(Token)match(input,161,FOLLOW_161_in_type_declaration340); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal34_tree = 
                    (Object)adaptor.create(string_literal34)
                    ;
                    adaptor.addChild(root_0, string_literal34_tree);
                    }

                    // CodeR.CSharp.Parser/src/antlr/cs.g:97:29: ( class_declaration | struct_declaration | interface_declaration )
                    int alt13=3;
                    switch ( input.LA(1) ) {
                    case 113:
                        {
                        alt13=1;
                        }
                        break;
                    case 180:
                        {
                        alt13=2;
                        }
                        break;
                    case 141:
                        {
                        alt13=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 13, 0, input);

                        throw nvae;

                    }

                    switch (alt13) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:98:7: class_declaration
                            {
                            pushFollow(FOLLOW_class_declaration_in_type_declaration350);
                            class_declaration35=class_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, class_declaration35.getTree());

                            }
                            break;
                        case 2 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:99:9: struct_declaration
                            {
                            pushFollow(FOLLOW_struct_declaration_in_type_declaration360);
                            struct_declaration36=struct_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declaration36.getTree());

                            }
                            break;
                        case 3 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:100:9: interface_declaration
                            {
                            pushFollow(FOLLOW_interface_declaration_in_type_declaration370);
                            interface_declaration37=interface_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration37.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:102:4: class_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_class_declaration_in_type_declaration383);
                    class_declaration38=class_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, class_declaration38.getTree());

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:103:4: struct_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_declaration_in_type_declaration388);
                    struct_declaration39=struct_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declaration39.getTree());

                    }
                    break;
                case 4 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:104:4: interface_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_in_type_declaration393);
                    interface_declaration40=interface_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration40.getTree());

                    }
                    break;
                case 5 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:105:4: enum_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_enum_declaration_in_type_declaration398);
                    enum_declaration41=enum_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_declaration41.getTree());

                    }
                    break;
                case 6 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:106:4: delegate_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_delegate_declaration_in_type_declaration403);
                    delegate_declaration42=delegate_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, delegate_declaration42.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 13, type_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_declaration"


    public static class qualified_identifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qualified_identifier"
    // CodeR.CSharp.Parser/src/antlr/cs.g:110:1: qualified_identifier : identifier ( '.' identifier )* ;
    public final csParser.qualified_identifier_return qualified_identifier() throws RecognitionException {
        csParser.qualified_identifier_return retval = new csParser.qualified_identifier_return();
        retval.start = input.LT(1);

        int qualified_identifier_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal44=null;
        csParser.identifier_return identifier43 =null;

        csParser.identifier_return identifier45 =null;


        Object char_literal44_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:111:2: ( identifier ( '.' identifier )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:111:4: identifier ( '.' identifier )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_qualified_identifier415);
            identifier43=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier43.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:111:15: ( '.' identifier )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==DOT) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:111:16: '.' identifier
            	    {
            	    char_literal44=(Token)match(input,DOT,FOLLOW_DOT_in_qualified_identifier418); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal44_tree = 
            	    (Object)adaptor.create(char_literal44)
            	    ;
            	    adaptor.addChild(root_0, char_literal44_tree);
            	    }

            	    pushFollow(FOLLOW_identifier_in_qualified_identifier420);
            	    identifier45=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier45.getTree());

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 14, qualified_identifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "qualified_identifier"


    public static class namespace_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "namespace_name"
    // CodeR.CSharp.Parser/src/antlr/cs.g:114:1: namespace_name : namespace_or_type_name ;
    public final csParser.namespace_name_return namespace_name() throws RecognitionException {
        csParser.namespace_name_return retval = new csParser.namespace_name_return();
        retval.start = input.LT(1);

        int namespace_name_StartIndex = input.index();

        Object root_0 = null;

        csParser.namespace_or_type_name_return namespace_or_type_name46 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:115:2: ( namespace_or_type_name )
            // CodeR.CSharp.Parser/src/antlr/cs.g:115:4: namespace_or_type_name
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_namespace_or_type_name_in_namespace_name433);
            namespace_or_type_name46=namespace_or_type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_or_type_name46.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 15, namespace_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "namespace_name"


    public static class modifiers_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "modifiers"
    // CodeR.CSharp.Parser/src/antlr/cs.g:118:1: modifiers : ( modifier )+ ;
    public final csParser.modifiers_return modifiers() throws RecognitionException {
        csParser.modifiers_return retval = new csParser.modifiers_return();
        retval.start = input.LT(1);

        int modifiers_StartIndex = input.index();

        Object root_0 = null;

        csParser.modifier_return modifier47 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:119:2: ( ( modifier )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:119:4: ( modifier )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:119:4: ( modifier )+
            int cnt16=0;
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==99||LA16_0==127||LA16_0==142||LA16_0==152||LA16_0==158||LA16_0==163||(LA16_0 >= 165 && LA16_0 <= 167)||LA16_0==172||LA16_0==178||LA16_0==190||LA16_0==193||LA16_0==195) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:119:4: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_modifiers444);
            	    modifier47=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier47.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt16 >= 1 ) break loop16;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(16, input);
                        throw eee;
                }
                cnt16++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 16, modifiers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "modifiers"


    public static class modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "modifier"
    // CodeR.CSharp.Parser/src/antlr/cs.g:122:1: modifier : ( 'new' | 'public' | 'protected' | 'private' | 'internal' | 'unsafe' | 'abstract' | 'sealed' | 'static' | 'readonly' | 'volatile' | 'extern' | 'virtual' | 'override' );
    public final csParser.modifier_return modifier() throws RecognitionException {
        csParser.modifier_return retval = new csParser.modifier_return();
        retval.start = input.LT(1);

        int modifier_StartIndex = input.index();

        Object root_0 = null;

        Token set48=null;

        Object set48_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:123:2: ( 'new' | 'public' | 'protected' | 'private' | 'internal' | 'unsafe' | 'abstract' | 'sealed' | 'static' | 'readonly' | 'volatile' | 'extern' | 'virtual' | 'override' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:
            {
            root_0 = (Object)adaptor.nil();


            set48=(Token)input.LT(1);

            if ( input.LA(1)==99||input.LA(1)==127||input.LA(1)==142||input.LA(1)==152||input.LA(1)==158||input.LA(1)==163||(input.LA(1) >= 165 && input.LA(1) <= 167)||input.LA(1)==172||input.LA(1)==178||input.LA(1)==190||input.LA(1)==193||input.LA(1)==195 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set48)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 17, modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "modifier"


    public static class class_member_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_member_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:139:1: class_member_declaration : ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration ) ;
    public final csParser.class_member_declaration_return class_member_declaration() throws RecognitionException {
        csParser.class_member_declaration_return retval = new csParser.class_member_declaration_return();
        retval.start = input.LT(1);

        int class_member_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal50=null;
        Token char_literal53=null;
        Token string_literal55=null;
        Token string_literal61=null;
        Token char_literal67=null;
        csParser.modifiers_return m =null;

        csParser.attributes_return attributes49 =null;

        csParser.type_return type51 =null;

        csParser.constant_declarators_return constant_declarators52 =null;

        csParser.event_declaration_return event_declaration54 =null;

        csParser.method_declaration_return method_declaration56 =null;

        csParser.interface_declaration_return interface_declaration57 =null;

        csParser.class_declaration_return class_declaration58 =null;

        csParser.struct_declaration_return struct_declaration59 =null;

        csParser.interface_declaration_return interface_declaration60 =null;

        csParser.method_declaration_return method_declaration62 =null;

        csParser.type_return type63 =null;

        csParser.method_declaration_return method_declaration64 =null;

        csParser.property_declaration_return property_declaration65 =null;

        csParser.type_name_return type_name66 =null;

        csParser.indexer_declaration_return indexer_declaration68 =null;

        csParser.indexer_declaration_return indexer_declaration69 =null;

        csParser.field_declaration_return field_declaration70 =null;

        csParser.operator_declaration_return operator_declaration71 =null;

        csParser.class_declaration_return class_declaration72 =null;

        csParser.struct_declaration_return struct_declaration73 =null;

        csParser.enum_declaration_return enum_declaration74 =null;

        csParser.delegate_declaration_return delegate_declaration75 =null;

        csParser.conversion_operator_declaration_return conversion_operator_declaration76 =null;

        csParser.constructor_declaration_return constructor_declaration77 =null;

        csParser.destructor_declaration_return destructor_declaration78 =null;


        Object string_literal50_tree=null;
        Object char_literal53_tree=null;
        Object string_literal55_tree=null;
        Object string_literal61_tree=null;
        Object char_literal67_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:140:2: ( ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:140:4: ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration )
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:140:4: ( attributes )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==94) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:140:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_class_member_declaration532);
                    attributes49=attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes49.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:140:17: (m= modifiers )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==99||LA18_0==127||LA18_0==142||LA18_0==152||LA18_0==158||LA18_0==163||(LA18_0 >= 165 && LA18_0 <= 167)||LA18_0==172||LA18_0==178||LA18_0==190||LA18_0==193||LA18_0==195) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:140:17: m= modifiers
                    {
                    pushFollow(FOLLOW_modifiers_in_class_member_declaration537);
                    m=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, m.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:141:3: ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration )
            int alt21=13;
            switch ( input.LA(1) ) {
            case 114:
                {
                alt21=1;
                }
                break;
            case 125:
                {
                alt21=2;
                }
                break;
            case 161:
                {
                alt21=3;
                }
                break;
            case 141:
                {
                alt21=4;
                }
                break;
            case 194:
                {
                int LA21_5 = input.LA(2);

                if ( (LA21_5==Character_literal||LA21_5==FALSE||(LA21_5 >= Hex_number && LA21_5 <= IDENTIFIER)||(LA21_5 >= NULL && LA21_5 <= NUMBER)||LA21_5==Real_literal||LA21_5==STRINGLITERAL||LA21_5==TRUE||LA21_5==Verbatim_string_literal||LA21_5==98||(LA21_5 >= 100 && LA21_5 <= 101)||(LA21_5 >= 103 && LA21_5 <= 104)||LA21_5==106||(LA21_5 >= 108 && LA21_5 <= 109)||LA21_5==111||LA21_5==116||LA21_5==119||(LA21_5 >= 121 && LA21_5 <= 122)||LA21_5==124||LA21_5==128||LA21_5==131||LA21_5==134||LA21_5==137||LA21_5==140||LA21_5==143||(LA21_5 >= 145 && LA21_5 <= 146)||(LA21_5 >= 148 && LA21_5 <= 150)||(LA21_5 >= 153 && LA21_5 <= 154)||LA21_5==156||LA21_5==159||LA21_5==162||LA21_5==164||LA21_5==169||LA21_5==171||(LA21_5 >= 173 && LA21_5 <= 175)||LA21_5==179||LA21_5==185||(LA21_5 >= 187 && LA21_5 <= 188)||(LA21_5 >= 191 && LA21_5 <= 192)||LA21_5==196||LA21_5==198) ) {
                    alt21=5;
                }
                else if ( (LA21_5==72) ) {
                    alt21=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 21, 5, input);

                    throw nvae;

                }
                }
                break;
            case 106:
            case 109:
            case 111:
            case 116:
            case 121:
            case 131:
            case 140:
            case 148:
            case 153:
            case 171:
            case 175:
            case 179:
            case 187:
            case 188:
            case 191:
                {
                alt21=6;
                }
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 134:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
                {
                int LA21_7 = input.LA(2);

                if ( (LA21_7==Character_literal||LA21_7==DOT||LA21_7==FALSE||(LA21_7 >= Hex_number && LA21_7 <= IDENTIFIER)||(LA21_7 >= NULL && LA21_7 <= NUMBER)||LA21_7==Real_literal||LA21_7==STRINGLITERAL||LA21_7==TRUE||LA21_7==Verbatim_string_literal||LA21_7==72||(LA21_7 >= 83 && LA21_7 <= 84)||LA21_7==92||LA21_7==94||LA21_7==98||(LA21_7 >= 100 && LA21_7 <= 101)||(LA21_7 >= 103 && LA21_7 <= 104)||LA21_7==106||(LA21_7 >= 108 && LA21_7 <= 109)||LA21_7==111||LA21_7==116||LA21_7==119||(LA21_7 >= 121 && LA21_7 <= 122)||LA21_7==124||LA21_7==128||LA21_7==131||LA21_7==134||LA21_7==137||LA21_7==140||LA21_7==143||(LA21_7 >= 145 && LA21_7 <= 146)||(LA21_7 >= 148 && LA21_7 <= 150)||(LA21_7 >= 153 && LA21_7 <= 156)||LA21_7==159||LA21_7==162||LA21_7==164||LA21_7==169||LA21_7==171||(LA21_7 >= 173 && LA21_7 <= 175)||LA21_7==179||LA21_7==182||LA21_7==185||(LA21_7 >= 187 && LA21_7 <= 188)||(LA21_7 >= 191 && LA21_7 <= 192)||LA21_7==196||LA21_7==198) ) {
                    alt21=6;
                }
                else if ( (LA21_7==71) ) {
                    alt21=12;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 21, 7, input);

                    throw nvae;

                }
                }
                break;
            case 113:
                {
                alt21=7;
                }
                break;
            case 180:
                {
                alt21=8;
                }
                break;
            case ENUM:
                {
                alt21=9;
                }
                break;
            case 118:
                {
                alt21=10;
                }
                break;
            case 126:
            case 138:
                {
                alt21=11;
                }
                break;
            case 204:
                {
                alt21=13;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;

            }

            switch (alt21) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:142:4: 'const' type constant_declarators ';'
                    {
                    string_literal50=(Token)match(input,114,FOLLOW_114_in_class_member_declaration547); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal50_tree = 
                    (Object)adaptor.create(string_literal50)
                    ;
                    adaptor.addChild(root_0, string_literal50_tree);
                    }

                    pushFollow(FOLLOW_type_in_class_member_declaration551);
                    type51=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type51.getTree());

                    pushFollow(FOLLOW_constant_declarators_in_class_member_declaration555);
                    constant_declarators52=constant_declarators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_declarators52.getTree());

                    char_literal53=(Token)match(input,SEMI,FOLLOW_SEMI_in_class_member_declaration559); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal53_tree = 
                    (Object)adaptor.create(char_literal53)
                    ;
                    adaptor.addChild(root_0, char_literal53_tree);
                    }

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:143:5: event_declaration
                    {
                    pushFollow(FOLLOW_event_declaration_in_class_member_declaration565);
                    event_declaration54=event_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, event_declaration54.getTree());

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:144:5: 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration )
                    {
                    string_literal55=(Token)match(input,161,FOLLOW_161_in_class_member_declaration573); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal55_tree = 
                    (Object)adaptor.create(string_literal55)
                    ;
                    adaptor.addChild(root_0, string_literal55_tree);
                    }

                    // CodeR.CSharp.Parser/src/antlr/cs.g:145:4: ( method_declaration | interface_declaration | class_declaration | struct_declaration )
                    int alt19=4;
                    switch ( input.LA(1) ) {
                    case Character_literal:
                    case FALSE:
                    case Hex_number:
                    case IDENTIFIER:
                    case NULL:
                    case NUMBER:
                    case Real_literal:
                    case STRINGLITERAL:
                    case TRUE:
                    case Verbatim_string_literal:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 106:
                    case 108:
                    case 109:
                    case 111:
                    case 116:
                    case 119:
                    case 121:
                    case 122:
                    case 124:
                    case 128:
                    case 131:
                    case 134:
                    case 137:
                    case 140:
                    case 143:
                    case 145:
                    case 146:
                    case 148:
                    case 149:
                    case 150:
                    case 153:
                    case 154:
                    case 156:
                    case 159:
                    case 162:
                    case 164:
                    case 169:
                    case 171:
                    case 173:
                    case 174:
                    case 175:
                    case 179:
                    case 185:
                    case 187:
                    case 188:
                    case 191:
                    case 192:
                    case 196:
                    case 198:
                        {
                        alt19=1;
                        }
                        break;
                    case 141:
                        {
                        alt19=2;
                        }
                        break;
                    case 113:
                        {
                        alt19=3;
                        }
                        break;
                    case 180:
                        {
                        alt19=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 19, 0, input);

                        throw nvae;

                    }

                    switch (alt19) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:146:5: method_declaration
                            {
                            pushFollow(FOLLOW_method_declaration_in_class_member_declaration584);
                            method_declaration56=method_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration56.getTree());

                            }
                            break;
                        case 2 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:147:6: interface_declaration
                            {
                            pushFollow(FOLLOW_interface_declaration_in_class_member_declaration592);
                            interface_declaration57=interface_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration57.getTree());

                            }
                            break;
                        case 3 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:148:6: class_declaration
                            {
                            pushFollow(FOLLOW_class_declaration_in_class_member_declaration600);
                            class_declaration58=class_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, class_declaration58.getTree());

                            }
                            break;
                        case 4 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:149:6: struct_declaration
                            {
                            pushFollow(FOLLOW_struct_declaration_in_class_member_declaration607);
                            struct_declaration59=struct_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declaration59.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:151:5: interface_declaration
                    {
                    pushFollow(FOLLOW_interface_declaration_in_class_member_declaration618);
                    interface_declaration60=interface_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration60.getTree());

                    }
                    break;
                case 5 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:152:5: 'void' method_declaration
                    {
                    string_literal61=(Token)match(input,194,FOLLOW_194_in_class_member_declaration625); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal61_tree = 
                    (Object)adaptor.create(string_literal61)
                    ;
                    adaptor.addChild(root_0, string_literal61_tree);
                    }

                    pushFollow(FOLLOW_method_declaration_in_class_member_declaration629);
                    method_declaration62=method_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration62.getTree());

                    }
                    break;
                case 6 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:153:5: type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
                    {
                    pushFollow(FOLLOW_type_in_class_member_declaration635);
                    type63=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type63.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:154:5: ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
                    int alt20=6;
                    switch ( input.LA(1) ) {
                    case 106:
                    case 109:
                    case 111:
                    case 116:
                    case 121:
                    case 131:
                    case 140:
                    case 148:
                    case 153:
                    case 171:
                    case 175:
                    case 179:
                    case 187:
                    case 188:
                    case 191:
                        {
                        int LA20_1 = input.LA(2);

                        if ( (synpred2_cs()) ) {
                            alt20=1;
                        }
                        else if ( (synpred3_cs()) ) {
                            alt20=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 20, 1, input);

                            throw nvae;

                        }
                        }
                        break;
                    case IDENTIFIER:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 108:
                    case 119:
                    case 122:
                    case 124:
                    case 128:
                    case 134:
                    case 137:
                    case 143:
                    case 145:
                    case 146:
                    case 149:
                    case 150:
                    case 154:
                    case 156:
                    case 159:
                    case 162:
                    case 164:
                    case 169:
                    case 173:
                    case 174:
                    case 185:
                    case 192:
                    case 196:
                    case 198:
                        {
                        int LA20_2 = input.LA(2);

                        if ( (synpred2_cs()) ) {
                            alt20=1;
                        }
                        else if ( (synpred3_cs()) ) {
                            alt20=2;
                        }
                        else if ( (synpred4_cs()) ) {
                            alt20=3;
                        }
                        else if ( (true) ) {
                            alt20=5;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 20, 2, input);

                            throw nvae;

                        }
                        }
                        break;
                    case Character_literal:
                    case FALSE:
                    case Hex_number:
                    case NULL:
                    case NUMBER:
                    case Real_literal:
                    case STRINGLITERAL:
                    case TRUE:
                    case Verbatim_string_literal:
                        {
                        int LA20_3 = input.LA(2);

                        if ( (synpred2_cs()) ) {
                            alt20=1;
                        }
                        else if ( (synpred3_cs()) ) {
                            alt20=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 20, 3, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 182:
                        {
                        alt20=4;
                        }
                        break;
                    case 155:
                        {
                        alt20=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 20, 0, input);

                        throw nvae;

                    }

                    switch (alt20) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:155:6: ( member_name '(' )=> method_declaration
                            {
                            pushFollow(FOLLOW_method_declaration_in_class_member_declaration658);
                            method_declaration64=method_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration64.getTree());

                            }
                            break;
                        case 2 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:156:11: ( member_name '{' )=> property_declaration
                            {
                            pushFollow(FOLLOW_property_declaration_in_class_member_declaration680);
                            property_declaration65=property_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, property_declaration65.getTree());

                            }
                            break;
                        case 3 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:157:7: ( member_name '.' 'this' )=> type_name '.' indexer_declaration
                            {
                            pushFollow(FOLLOW_type_name_in_class_member_declaration702);
                            type_name66=type_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name66.getTree());

                            char_literal67=(Token)match(input,DOT,FOLLOW_DOT_in_class_member_declaration704); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal67_tree = 
                            (Object)adaptor.create(char_literal67)
                            ;
                            adaptor.addChild(root_0, char_literal67_tree);
                            }

                            pushFollow(FOLLOW_indexer_declaration_in_class_member_declaration706);
                            indexer_declaration68=indexer_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, indexer_declaration68.getTree());

                            }
                            break;
                        case 4 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:158:10: indexer_declaration
                            {
                            pushFollow(FOLLOW_indexer_declaration_in_class_member_declaration717);
                            indexer_declaration69=indexer_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, indexer_declaration69.getTree());

                            }
                            break;
                        case 5 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:159:7: field_declaration
                            {
                            pushFollow(FOLLOW_field_declaration_in_class_member_declaration726);
                            field_declaration70=field_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration70.getTree());

                            }
                            break;
                        case 6 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:160:7: operator_declaration
                            {
                            pushFollow(FOLLOW_operator_declaration_in_class_member_declaration740);
                            operator_declaration71=operator_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_declaration71.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:164:5: class_declaration
                    {
                    pushFollow(FOLLOW_class_declaration_in_class_member_declaration755);
                    class_declaration72=class_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, class_declaration72.getTree());

                    }
                    break;
                case 8 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:165:5: struct_declaration
                    {
                    pushFollow(FOLLOW_struct_declaration_in_class_member_declaration763);
                    struct_declaration73=struct_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declaration73.getTree());

                    }
                    break;
                case 9 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:166:5: enum_declaration
                    {
                    pushFollow(FOLLOW_enum_declaration_in_class_member_declaration770);
                    enum_declaration74=enum_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_declaration74.getTree());

                    }
                    break;
                case 10 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:167:5: delegate_declaration
                    {
                    pushFollow(FOLLOW_delegate_declaration_in_class_member_declaration778);
                    delegate_declaration75=delegate_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, delegate_declaration75.getTree());

                    }
                    break;
                case 11 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:168:5: conversion_operator_declaration
                    {
                    pushFollow(FOLLOW_conversion_operator_declaration_in_class_member_declaration785);
                    conversion_operator_declaration76=conversion_operator_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conversion_operator_declaration76.getTree());

                    }
                    break;
                case 12 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:169:5: constructor_declaration
                    {
                    pushFollow(FOLLOW_constructor_declaration_in_class_member_declaration791);
                    constructor_declaration77=constructor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_declaration77.getTree());

                    }
                    break;
                case 13 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:170:5: destructor_declaration
                    {
                    pushFollow(FOLLOW_destructor_declaration_in_class_member_declaration798);
                    destructor_declaration78=destructor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, destructor_declaration78.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 18, class_member_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "class_member_declaration"


    public static class primary_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "primary_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:174:1: primary_expression : ( ( 'this' brackets )=> 'this' brackets ( primary_expression_part )* | ( 'base' brackets )=> 'this' brackets ( primary_expression_part )* | primary_expression_start ( primary_expression_part )* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression );
    public final csParser.primary_expression_return primary_expression() throws RecognitionException {
        csParser.primary_expression_return retval = new csParser.primary_expression_return();
        retval.start = input.LT(1);

        int primary_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal79=null;
        Token string_literal82=null;
        Token string_literal87=null;
        csParser.brackets_return brackets80 =null;

        csParser.primary_expression_part_return primary_expression_part81 =null;

        csParser.brackets_return brackets83 =null;

        csParser.primary_expression_part_return primary_expression_part84 =null;

        csParser.primary_expression_start_return primary_expression_start85 =null;

        csParser.primary_expression_part_return primary_expression_part86 =null;

        csParser.object_creation_expression_return object_creation_expression88 =null;

        csParser.primary_expression_part_return primary_expression_part89 =null;

        csParser.delegate_creation_expression_return delegate_creation_expression90 =null;

        csParser.object_creation_expression_return object_creation_expression91 =null;

        csParser.anonymous_object_creation_expression_return anonymous_object_creation_expression92 =null;

        csParser.sizeof_expression_return sizeof_expression93 =null;

        csParser.checked_expression_return checked_expression94 =null;

        csParser.unchecked_expression_return unchecked_expression95 =null;

        csParser.default_value_expression_return default_value_expression96 =null;

        csParser.anonymous_method_expression_return anonymous_method_expression97 =null;


        Object string_literal79_tree=null;
        Object string_literal82_tree=null;
        Object string_literal87_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:175:2: ( ( 'this' brackets )=> 'this' brackets ( primary_expression_part )* | ( 'base' brackets )=> 'this' brackets ( primary_expression_part )* | primary_expression_start ( primary_expression_part )* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression )
            int alt27=9;
            switch ( input.LA(1) ) {
            case 182:
                {
                int LA27_1 = input.LA(2);

                if ( (synpred5_cs()) ) {
                    alt27=1;
                }
                else if ( (synpred6_cs()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 27, 1, input);

                    throw nvae;

                }
                }
                break;
            case Character_literal:
            case FALSE:
            case Hex_number:
            case IDENTIFIER:
            case NULL:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            case 71:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 109:
            case 111:
            case 116:
            case 119:
            case 121:
            case 122:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 153:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 179:
            case 185:
            case 186:
            case 187:
            case 188:
            case 191:
            case 192:
            case 196:
            case 198:
                {
                alt27=3;
                }
                break;
            case 152:
                {
                alt27=4;
                }
                break;
            case 176:
                {
                alt27=5;
                }
                break;
            case 112:
                {
                alt27=6;
                }
                break;
            case 189:
                {
                alt27=7;
                }
                break;
            case 117:
                {
                alt27=8;
                }
                break;
            case 118:
                {
                alt27=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;

            }

            switch (alt27) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:175:4: ( 'this' brackets )=> 'this' brackets ( primary_expression_part )*
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal79=(Token)match(input,182,FOLLOW_182_in_primary_expression822); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal79_tree = 
                    (Object)adaptor.create(string_literal79)
                    ;
                    adaptor.addChild(root_0, string_literal79_tree);
                    }

                    pushFollow(FOLLOW_brackets_in_primary_expression826);
                    brackets80=brackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets80.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:175:45: ( primary_expression_part )*
                    loop22:
                    do {
                        int alt22=2;
                        int LA22_0 = input.LA(1);

                        if ( (LA22_0==DOT||LA22_0==PTR||LA22_0==71||LA22_0==94) ) {
                            alt22=1;
                        }


                        switch (alt22) {
                    	case 1 :
                    	    // CodeR.CSharp.Parser/src/antlr/cs.g:175:45: primary_expression_part
                    	    {
                    	    pushFollow(FOLLOW_primary_expression_part_in_primary_expression830);
                    	    primary_expression_part81=primary_expression_part();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_expression_part81.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop22;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:176:4: ( 'base' brackets )=> 'this' brackets ( primary_expression_part )*
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal82=(Token)match(input,182,FOLLOW_182_in_primary_expression844); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal82_tree = 
                    (Object)adaptor.create(string_literal82)
                    ;
                    adaptor.addChild(root_0, string_literal82_tree);
                    }

                    pushFollow(FOLLOW_brackets_in_primary_expression848);
                    brackets83=brackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets83.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:176:45: ( primary_expression_part )*
                    loop23:
                    do {
                        int alt23=2;
                        int LA23_0 = input.LA(1);

                        if ( (LA23_0==DOT||LA23_0==PTR||LA23_0==71||LA23_0==94) ) {
                            alt23=1;
                        }


                        switch (alt23) {
                    	case 1 :
                    	    // CodeR.CSharp.Parser/src/antlr/cs.g:176:45: primary_expression_part
                    	    {
                    	    pushFollow(FOLLOW_primary_expression_part_in_primary_expression852);
                    	    primary_expression_part84=primary_expression_part();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_expression_part84.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop23;
                        }
                    } while (true);


                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:177:4: primary_expression_start ( primary_expression_part )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_primary_expression_start_in_primary_expression858);
                    primary_expression_start85=primary_expression_start();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_expression_start85.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:177:29: ( primary_expression_part )*
                    loop24:
                    do {
                        int alt24=2;
                        int LA24_0 = input.LA(1);

                        if ( (LA24_0==DOT||LA24_0==PTR||LA24_0==71||LA24_0==94) ) {
                            alt24=1;
                        }


                        switch (alt24) {
                    	case 1 :
                    	    // CodeR.CSharp.Parser/src/antlr/cs.g:177:29: primary_expression_part
                    	    {
                    	    pushFollow(FOLLOW_primary_expression_part_in_primary_expression860);
                    	    primary_expression_part86=primary_expression_part();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_expression_part86.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop24;
                        }
                    } while (true);


                    }
                    break;
                case 4 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:178:4: 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression )
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal87=(Token)match(input,152,FOLLOW_152_in_primary_expression866); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal87_tree = 
                    (Object)adaptor.create(string_literal87)
                    ;
                    adaptor.addChild(root_0, string_literal87_tree);
                    }

                    // CodeR.CSharp.Parser/src/antlr/cs.g:179:4: ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression )
                    int alt26=4;
                    switch ( input.LA(1) ) {
                    case 106:
                    case 109:
                    case 111:
                    case 116:
                    case 121:
                    case 131:
                    case 140:
                    case 148:
                    case 153:
                    case 171:
                    case 175:
                    case 179:
                    case 187:
                    case 188:
                    case 191:
                        {
                        int LA26_1 = input.LA(2);

                        if ( (synpred7_cs()) ) {
                            alt26=1;
                        }
                        else if ( (true) ) {
                            alt26=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 26, 1, input);

                            throw nvae;

                        }
                        }
                        break;
                    case IDENTIFIER:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 108:
                    case 119:
                    case 122:
                    case 124:
                    case 128:
                    case 134:
                    case 137:
                    case 143:
                    case 145:
                    case 146:
                    case 149:
                    case 150:
                    case 154:
                    case 156:
                    case 159:
                    case 162:
                    case 164:
                    case 169:
                    case 173:
                    case 174:
                    case 185:
                    case 192:
                    case 196:
                    case 198:
                        {
                        int LA26_2 = input.LA(2);

                        if ( (synpred7_cs()) ) {
                            alt26=1;
                        }
                        else if ( (synpred8_cs()) ) {
                            alt26=2;
                        }
                        else if ( (true) ) {
                            alt26=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 26, 2, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 194:
                        {
                        int LA26_3 = input.LA(2);

                        if ( (synpred7_cs()) ) {
                            alt26=1;
                        }
                        else if ( (true) ) {
                            alt26=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 26, 3, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 199:
                        {
                        alt26=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 26, 0, input);

                        throw nvae;

                    }

                    switch (alt26) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:180:5: ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+
                            {
                            pushFollow(FOLLOW_object_creation_expression_in_primary_expression893);
                            object_creation_expression88=object_creation_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, object_creation_expression88.getTree());

                            // CodeR.CSharp.Parser/src/antlr/cs.g:180:83: ( primary_expression_part )+
                            int cnt25=0;
                            loop25:
                            do {
                                int alt25=2;
                                int LA25_0 = input.LA(1);

                                if ( (LA25_0==DOT||LA25_0==PTR||LA25_0==71||LA25_0==94) ) {
                                    alt25=1;
                                }


                                switch (alt25) {
                            	case 1 :
                            	    // CodeR.CSharp.Parser/src/antlr/cs.g:180:83: primary_expression_part
                            	    {
                            	    pushFollow(FOLLOW_primary_expression_part_in_primary_expression897);
                            	    primary_expression_part89=primary_expression_part();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_expression_part89.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt25 >= 1 ) break loop25;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(25, input);
                                        throw eee;
                                }
                                cnt25++;
                            } while (true);


                            }
                            break;
                        case 2 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:183:6: ( delegate_creation_expression )=> delegate_creation_expression
                            {
                            pushFollow(FOLLOW_delegate_creation_expression_in_primary_expression922);
                            delegate_creation_expression90=delegate_creation_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, delegate_creation_expression90.getTree());

                            }
                            break;
                        case 3 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:184:6: object_creation_expression
                            {
                            pushFollow(FOLLOW_object_creation_expression_in_primary_expression929);
                            object_creation_expression91=object_creation_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, object_creation_expression91.getTree());

                            }
                            break;
                        case 4 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:185:6: anonymous_object_creation_expression
                            {
                            pushFollow(FOLLOW_anonymous_object_creation_expression_in_primary_expression936);
                            anonymous_object_creation_expression92=anonymous_object_creation_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_object_creation_expression92.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:187:4: sizeof_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_sizeof_expression_in_primary_expression953);
                    sizeof_expression93=sizeof_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sizeof_expression93.getTree());

                    }
                    break;
                case 6 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:188:4: checked_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_checked_expression_in_primary_expression964);
                    checked_expression94=checked_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, checked_expression94.getTree());

                    }
                    break;
                case 7 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:189:4: unchecked_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_unchecked_expression_in_primary_expression983);
                    unchecked_expression95=unchecked_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unchecked_expression95.getTree());

                    }
                    break;
                case 8 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:190:4: default_value_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_value_expression_in_primary_expression1000);
                    default_value_expression96=default_value_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, default_value_expression96.getTree());

                    }
                    break;
                case 9 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:191:4: anonymous_method_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_anonymous_method_expression_in_primary_expression1013);
                    anonymous_method_expression97=anonymous_method_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_method_expression97.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 19, primary_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "primary_expression"


    public static class primary_expression_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "primary_expression_start"
    // CodeR.CSharp.Parser/src/antlr/cs.g:194:1: primary_expression_start : ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | 'this' | 'base' | paren_expression | typeof_expression | literal );
    public final csParser.primary_expression_start_return primary_expression_start() throws RecognitionException {
        csParser.primary_expression_start_return retval = new csParser.primary_expression_start_return();
        retval.start = input.LT(1);

        int primary_expression_start_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal102=null;
        Token string_literal104=null;
        Token string_literal105=null;
        csParser.predefined_type_return predefined_type98 =null;

        csParser.identifier_return identifier99 =null;

        csParser.generic_argument_list_return generic_argument_list100 =null;

        csParser.identifier_return identifier101 =null;

        csParser.identifier_return identifier103 =null;

        csParser.paren_expression_return paren_expression106 =null;

        csParser.typeof_expression_return typeof_expression107 =null;

        csParser.literal_return literal108 =null;


        Object string_literal102_tree=null;
        Object string_literal104_tree=null;
        Object string_literal105_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:195:2: ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | 'this' | 'base' | paren_expression | typeof_expression | literal )
            int alt29=8;
            switch ( input.LA(1) ) {
            case 106:
            case 109:
            case 111:
            case 116:
            case 121:
            case 131:
            case 140:
            case 148:
            case 153:
            case 171:
            case 175:
            case 179:
            case 187:
            case 188:
            case 191:
                {
                alt29=1;
                }
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 134:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
                {
                int LA29_2 = input.LA(2);

                if ( (synpred9_cs()) ) {
                    alt29=2;
                }
                else if ( (true) ) {
                    alt29=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 29, 2, input);

                    throw nvae;

                }
                }
                break;
            case 182:
                {
                alt29=4;
                }
                break;
            case 105:
                {
                alt29=5;
                }
                break;
            case 71:
                {
                alt29=6;
                }
                break;
            case 186:
                {
                alt29=7;
                }
                break;
            case Character_literal:
            case FALSE:
            case Hex_number:
            case NULL:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
                {
                alt29=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;

            }

            switch (alt29) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:195:4: predefined_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_predefined_type_in_primary_expression_start1027);
                    predefined_type98=predefined_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, predefined_type98.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:196:4: ( identifier '<' )=> identifier generic_argument_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_primary_expression_start1055);
                    identifier99=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier99.getTree());

                    pushFollow(FOLLOW_generic_argument_list_in_primary_expression_start1059);
                    generic_argument_list100=generic_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_argument_list100.getTree());

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:197:4: identifier ( '::' identifier )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_primary_expression_start1064);
                    identifier101=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier101.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:197:15: ( '::' identifier )?
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==83) ) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:197:16: '::' identifier
                            {
                            string_literal102=(Token)match(input,83,FOLLOW_83_in_primary_expression_start1067); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal102_tree = 
                            (Object)adaptor.create(string_literal102)
                            ;
                            adaptor.addChild(root_0, string_literal102_tree);
                            }

                            pushFollow(FOLLOW_identifier_in_primary_expression_start1071);
                            identifier103=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier103.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:198:4: 'this'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal104=(Token)match(input,182,FOLLOW_182_in_primary_expression_start1078); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal104_tree = 
                    (Object)adaptor.create(string_literal104)
                    ;
                    adaptor.addChild(root_0, string_literal104_tree);
                    }

                    }
                    break;
                case 5 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:199:4: 'base'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal105=(Token)match(input,105,FOLLOW_105_in_primary_expression_start1084); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal105_tree = 
                    (Object)adaptor.create(string_literal105)
                    ;
                    adaptor.addChild(root_0, string_literal105_tree);
                    }

                    }
                    break;
                case 6 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:200:4: paren_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_paren_expression_in_primary_expression_start1089);
                    paren_expression106=paren_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_expression106.getTree());

                    }
                    break;
                case 7 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:201:4: typeof_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typeof_expression_in_primary_expression_start1094);
                    typeof_expression107=typeof_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeof_expression107.getTree());

                    }
                    break;
                case 8 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:202:4: literal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_literal_in_primary_expression_start1112);
                    literal108=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal108.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 20, primary_expression_start_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "primary_expression_start"


    public static class primary_expression_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "primary_expression_part"
    // CodeR.CSharp.Parser/src/antlr/cs.g:205:1: primary_expression_part : ( access_identifier | brackets_or_arguments );
    public final csParser.primary_expression_part_return primary_expression_part() throws RecognitionException {
        csParser.primary_expression_part_return retval = new csParser.primary_expression_part_return();
        retval.start = input.LT(1);

        int primary_expression_part_StartIndex = input.index();

        Object root_0 = null;

        csParser.access_identifier_return access_identifier109 =null;

        csParser.brackets_or_arguments_return brackets_or_arguments110 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:206:2: ( access_identifier | brackets_or_arguments )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==DOT||LA30_0==PTR) ) {
                alt30=1;
            }
            else if ( (LA30_0==71||LA30_0==94) ) {
                alt30=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;

            }
            switch (alt30) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:206:4: access_identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_access_identifier_in_primary_expression_part1123);
                    access_identifier109=access_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_identifier109.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:207:4: brackets_or_arguments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_brackets_or_arguments_in_primary_expression_part1128);
                    brackets_or_arguments110=brackets_or_arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets_or_arguments110.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 21, primary_expression_part_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "primary_expression_part"


    public static class access_identifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access_identifier"
    // CodeR.CSharp.Parser/src/antlr/cs.g:210:1: access_identifier : access_operator type_or_generic ;
    public final csParser.access_identifier_return access_identifier() throws RecognitionException {
        csParser.access_identifier_return retval = new csParser.access_identifier_return();
        retval.start = input.LT(1);

        int access_identifier_StartIndex = input.index();

        Object root_0 = null;

        csParser.access_operator_return access_operator111 =null;

        csParser.type_or_generic_return type_or_generic112 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:211:2: ( access_operator type_or_generic )
            // CodeR.CSharp.Parser/src/antlr/cs.g:211:4: access_operator type_or_generic
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_access_operator_in_access_identifier1139);
            access_operator111=access_operator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, access_operator111.getTree());

            pushFollow(FOLLOW_type_or_generic_in_access_identifier1143);
            type_or_generic112=type_or_generic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_or_generic112.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 22, access_identifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "access_identifier"


    public static class access_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access_operator"
    // CodeR.CSharp.Parser/src/antlr/cs.g:214:1: access_operator : ( '.' | '->' );
    public final csParser.access_operator_return access_operator() throws RecognitionException {
        csParser.access_operator_return retval = new csParser.access_operator_return();
        retval.start = input.LT(1);

        int access_operator_StartIndex = input.index();

        Object root_0 = null;

        Token set113=null;

        Object set113_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:215:2: ( '.' | '->' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:
            {
            root_0 = (Object)adaptor.nil();


            set113=(Token)input.LT(1);

            if ( input.LA(1)==DOT||input.LA(1)==PTR ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set113)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 23, access_operator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "access_operator"


    public static class brackets_or_arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "brackets_or_arguments"
    // CodeR.CSharp.Parser/src/antlr/cs.g:219:1: brackets_or_arguments : ( brackets | arguments );
    public final csParser.brackets_or_arguments_return brackets_or_arguments() throws RecognitionException {
        csParser.brackets_or_arguments_return retval = new csParser.brackets_or_arguments_return();
        retval.start = input.LT(1);

        int brackets_or_arguments_StartIndex = input.index();

        Object root_0 = null;

        csParser.brackets_return brackets114 =null;

        csParser.arguments_return arguments115 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:220:2: ( brackets | arguments )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==94) ) {
                alt31=1;
            }
            else if ( (LA31_0==71) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;

            }
            switch (alt31) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:220:4: brackets
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_brackets_in_brackets_or_arguments1171);
                    brackets114=brackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets114.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:221:4: arguments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_arguments_in_brackets_or_arguments1176);
                    arguments115=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments115.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 24, brackets_or_arguments_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "brackets_or_arguments"


    public static class brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "brackets"
    // CodeR.CSharp.Parser/src/antlr/cs.g:224:1: brackets : '[' ( expression_list )? ']' ;
    public final csParser.brackets_return brackets() throws RecognitionException {
        csParser.brackets_return retval = new csParser.brackets_return();
        retval.start = input.LT(1);

        int brackets_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal116=null;
        Token char_literal118=null;
        csParser.expression_list_return expression_list117 =null;


        Object char_literal116_tree=null;
        Object char_literal118_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:225:2: ( '[' ( expression_list )? ']' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:225:4: '[' ( expression_list )? ']'
            {
            root_0 = (Object)adaptor.nil();


            char_literal116=(Token)match(input,94,FOLLOW_94_in_brackets1187); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal116_tree = 
            (Object)adaptor.create(char_literal116)
            ;
            adaptor.addChild(root_0, char_literal116_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:225:10: ( expression_list )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==Character_literal||LA32_0==FALSE||(LA32_0 >= Hex_number && LA32_0 <= IDENTIFIER)||(LA32_0 >= MINUS && LA32_0 <= NUMBER)||LA32_0==Real_literal||LA32_0==STRINGLITERAL||LA32_0==TRUE||LA32_0==Verbatim_string_literal||LA32_0==64||LA32_0==69||(LA32_0 >= 71 && LA32_0 <= 72)||(LA32_0 >= 74 && LA32_0 <= 75)||LA32_0==78||LA32_0==98||(LA32_0 >= 100 && LA32_0 <= 101)||(LA32_0 >= 103 && LA32_0 <= 106)||(LA32_0 >= 108 && LA32_0 <= 109)||(LA32_0 >= 111 && LA32_0 <= 112)||(LA32_0 >= 116 && LA32_0 <= 119)||(LA32_0 >= 121 && LA32_0 <= 122)||LA32_0==124||LA32_0==128||LA32_0==131||LA32_0==134||LA32_0==137||LA32_0==140||LA32_0==143||(LA32_0 >= 145 && LA32_0 <= 146)||(LA32_0 >= 148 && LA32_0 <= 150)||(LA32_0 >= 152 && LA32_0 <= 154)||LA32_0==156||LA32_0==159||LA32_0==162||LA32_0==164||LA32_0==169||LA32_0==171||(LA32_0 >= 173 && LA32_0 <= 176)||LA32_0==179||LA32_0==182||(LA32_0 >= 185 && LA32_0 <= 189)||(LA32_0 >= 191 && LA32_0 <= 192)||LA32_0==196||LA32_0==198||LA32_0==204) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:225:10: expression_list
                    {
                    pushFollow(FOLLOW_expression_list_in_brackets1191);
                    expression_list117=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list117.getTree());

                    }
                    break;

            }


            char_literal118=(Token)match(input,95,FOLLOW_95_in_brackets1196); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal118_tree = 
            (Object)adaptor.create(char_literal118)
            ;
            adaptor.addChild(root_0, char_literal118_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 25, brackets_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "brackets"


    public static class paren_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "paren_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:228:1: paren_expression : '(' expression ')' ;
    public final csParser.paren_expression_return paren_expression() throws RecognitionException {
        csParser.paren_expression_return retval = new csParser.paren_expression_return();
        retval.start = input.LT(1);

        int paren_expression_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal119=null;
        Token char_literal121=null;
        csParser.expression_return expression120 =null;


        Object char_literal119_tree=null;
        Object char_literal121_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:229:2: ( '(' expression ')' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:229:4: '(' expression ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal119=(Token)match(input,71,FOLLOW_71_in_paren_expression1207); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal119_tree = 
            (Object)adaptor.create(char_literal119)
            ;
            adaptor.addChild(root_0, char_literal119_tree);
            }

            pushFollow(FOLLOW_expression_in_paren_expression1211);
            expression120=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression120.getTree());

            char_literal121=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_paren_expression1215); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal121_tree = 
            (Object)adaptor.create(char_literal121)
            ;
            adaptor.addChild(root_0, char_literal121_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 26, paren_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "paren_expression"


    public static class arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arguments"
    // CodeR.CSharp.Parser/src/antlr/cs.g:232:1: arguments : '(' ( argument_list )? ')' ;
    public final csParser.arguments_return arguments() throws RecognitionException {
        csParser.arguments_return retval = new csParser.arguments_return();
        retval.start = input.LT(1);

        int arguments_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal122=null;
        Token char_literal124=null;
        csParser.argument_list_return argument_list123 =null;


        Object char_literal122_tree=null;
        Object char_literal124_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:233:2: ( '(' ( argument_list )? ')' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:233:4: '(' ( argument_list )? ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal122=(Token)match(input,71,FOLLOW_71_in_arguments1226); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal122_tree = 
            (Object)adaptor.create(char_literal122)
            ;
            adaptor.addChild(root_0, char_literal122_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:233:10: ( argument_list )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==Character_literal||LA33_0==FALSE||(LA33_0 >= Hex_number && LA33_0 <= IDENTIFIER)||(LA33_0 >= MINUS && LA33_0 <= NUMBER)||LA33_0==Real_literal||LA33_0==STRINGLITERAL||LA33_0==TRUE||LA33_0==Verbatim_string_literal||LA33_0==64||LA33_0==69||(LA33_0 >= 71 && LA33_0 <= 72)||(LA33_0 >= 74 && LA33_0 <= 75)||LA33_0==78||LA33_0==98||(LA33_0 >= 100 && LA33_0 <= 101)||(LA33_0 >= 103 && LA33_0 <= 106)||(LA33_0 >= 108 && LA33_0 <= 109)||(LA33_0 >= 111 && LA33_0 <= 112)||(LA33_0 >= 116 && LA33_0 <= 119)||(LA33_0 >= 121 && LA33_0 <= 122)||LA33_0==124||LA33_0==128||LA33_0==131||LA33_0==134||LA33_0==137||LA33_0==140||LA33_0==143||(LA33_0 >= 145 && LA33_0 <= 146)||(LA33_0 >= 148 && LA33_0 <= 150)||(LA33_0 >= 152 && LA33_0 <= 154)||(LA33_0 >= 156 && LA33_0 <= 157)||LA33_0==159||LA33_0==162||LA33_0==164||(LA33_0 >= 168 && LA33_0 <= 169)||LA33_0==171||(LA33_0 >= 173 && LA33_0 <= 176)||LA33_0==179||LA33_0==182||(LA33_0 >= 185 && LA33_0 <= 189)||(LA33_0 >= 191 && LA33_0 <= 192)||LA33_0==196||LA33_0==198||LA33_0==204) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:233:10: argument_list
                    {
                    pushFollow(FOLLOW_argument_list_in_arguments1230);
                    argument_list123=argument_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_list123.getTree());

                    }
                    break;

            }


            char_literal124=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_arguments1235); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal124_tree = 
            (Object)adaptor.create(char_literal124)
            ;
            adaptor.addChild(root_0, char_literal124_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 27, arguments_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arguments"


    public static class argument_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "argument_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:236:1: argument_list : argument ( ',' argument )* -> ( argument )+ ;
    public final csParser.argument_list_return argument_list() throws RecognitionException {
        csParser.argument_list_return retval = new csParser.argument_list_return();
        retval.start = input.LT(1);

        int argument_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal126=null;
        csParser.argument_return argument125 =null;

        csParser.argument_return argument127 =null;


        Object char_literal126_tree=null;
        RewriteRuleTokenStream stream_77=new RewriteRuleTokenStream(adaptor,"token 77");
        RewriteRuleSubtreeStream stream_argument=new RewriteRuleSubtreeStream(adaptor,"rule argument");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:237:2: ( argument ( ',' argument )* -> ( argument )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:237:4: argument ( ',' argument )*
            {
            pushFollow(FOLLOW_argument_in_argument_list1246);
            argument125=argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_argument.add(argument125.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:237:13: ( ',' argument )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==77) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:237:14: ',' argument
            	    {
            	    char_literal126=(Token)match(input,77,FOLLOW_77_in_argument_list1249); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_77.add(char_literal126);


            	    pushFollow(FOLLOW_argument_in_argument_list1251);
            	    argument127=argument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_argument.add(argument127.getTree());

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            // AST REWRITE
            // elements: argument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 237:29: -> ( argument )+
            {
                if ( !(stream_argument.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_argument.hasNext() ) {
                    adaptor.addChild(root_0, stream_argument.nextTree());

                }
                stream_argument.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 28, argument_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "argument_list"


    public static class argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "argument"
    // CodeR.CSharp.Parser/src/antlr/cs.g:240:1: argument : ( argument_name argument_value | argument_value );
    public final csParser.argument_return argument() throws RecognitionException {
        csParser.argument_return retval = new csParser.argument_return();
        retval.start = input.LT(1);

        int argument_StartIndex = input.index();

        Object root_0 = null;

        csParser.argument_name_return argument_name128 =null;

        csParser.argument_value_return argument_value129 =null;

        csParser.argument_value_return argument_value130 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:241:2: ( argument_name argument_value | argument_value )
            int alt35=2;
            switch ( input.LA(1) ) {
            case 134:
                {
                int LA35_1 = input.LA(2);

                if ( (LA35_1==82) ) {
                    alt35=1;
                }
                else if ( (LA35_1==DOT||LA35_1==GT||LA35_1==IDENTIFIER||LA35_1==MINUS||LA35_1==PTR||LA35_1==RPAREN||(LA35_1 >= 65 && LA35_1 <= 81)||(LA35_1 >= 83 && LA35_1 <= 94)||(LA35_1 >= 96 && LA35_1 <= 98)||(LA35_1 >= 100 && LA35_1 <= 104)||LA35_1==106||(LA35_1 >= 108 && LA35_1 <= 109)||LA35_1==111||LA35_1==116||LA35_1==119||(LA35_1 >= 121 && LA35_1 <= 122)||LA35_1==124||LA35_1==128||LA35_1==131||LA35_1==134||LA35_1==137||LA35_1==140||(LA35_1 >= 143 && LA35_1 <= 146)||(LA35_1 >= 148 && LA35_1 <= 150)||(LA35_1 >= 153 && LA35_1 <= 154)||LA35_1==156||LA35_1==159||LA35_1==162||LA35_1==164||LA35_1==169||LA35_1==171||(LA35_1 >= 173 && LA35_1 <= 175)||LA35_1==179||LA35_1==185||(LA35_1 >= 187 && LA35_1 <= 188)||(LA35_1 >= 191 && LA35_1 <= 192)||LA35_1==194||LA35_1==196||LA35_1==198||(LA35_1 >= 200 && LA35_1 <= 202)) ) {
                    alt35=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 1, input);

                    throw nvae;

                }
                }
                break;
            case Character_literal:
            case FALSE:
            case Hex_number:
            case MINUS:
            case NULL:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            case 64:
            case 69:
            case 71:
            case 72:
            case 74:
            case 75:
            case 78:
            case 105:
            case 106:
            case 109:
            case 111:
            case 112:
            case 116:
            case 117:
            case 118:
            case 121:
            case 131:
            case 140:
            case 148:
            case 152:
            case 153:
            case 157:
            case 168:
            case 171:
            case 175:
            case 176:
            case 179:
            case 182:
            case 186:
            case 187:
            case 188:
            case 189:
            case 191:
            case 204:
                {
                alt35=2;
                }
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
                {
                int LA35_3 = input.LA(2);

                if ( (LA35_3==82) ) {
                    alt35=1;
                }
                else if ( (LA35_3==DOT||LA35_3==GT||LA35_3==MINUS||LA35_3==PTR||LA35_3==RPAREN||(LA35_3 >= 65 && LA35_3 <= 81)||(LA35_3 >= 83 && LA35_3 <= 94)||(LA35_3 >= 96 && LA35_3 <= 97)||LA35_3==102||LA35_3==144||(LA35_3 >= 200 && LA35_3 <= 202)) ) {
                    alt35=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;

            }

            switch (alt35) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:241:4: argument_name argument_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_argument_name_in_argument1269);
                    argument_name128=argument_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_name128.getTree());

                    pushFollow(FOLLOW_argument_value_in_argument1271);
                    argument_value129=argument_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_value129.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:242:4: argument_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_argument_value_in_argument1276);
                    argument_value130=argument_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_value130.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 29, argument_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "argument"


    public static class argument_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "argument_name"
    // CodeR.CSharp.Parser/src/antlr/cs.g:245:1: argument_name : identifier ':' ;
    public final csParser.argument_name_return argument_name() throws RecognitionException {
        csParser.argument_name_return retval = new csParser.argument_name_return();
        retval.start = input.LT(1);

        int argument_name_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal132=null;
        csParser.identifier_return identifier131 =null;


        Object char_literal132_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:246:2: ( identifier ':' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:246:4: identifier ':'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_argument_name1287);
            identifier131=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier131.getTree());

            char_literal132=(Token)match(input,82,FOLLOW_82_in_argument_name1289); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal132_tree = 
            (Object)adaptor.create(char_literal132)
            ;
            adaptor.addChild(root_0, char_literal132_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 30, argument_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "argument_name"


    public static class argument_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "argument_value"
    // CodeR.CSharp.Parser/src/antlr/cs.g:249:1: argument_value : ( expression | ref_variable_reference | 'out' variable_reference );
    public final csParser.argument_value_return argument_value() throws RecognitionException {
        csParser.argument_value_return retval = new csParser.argument_value_return();
        retval.start = input.LT(1);

        int argument_value_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal135=null;
        csParser.expression_return expression133 =null;

        csParser.ref_variable_reference_return ref_variable_reference134 =null;

        csParser.variable_reference_return variable_reference136 =null;


        Object string_literal135_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:250:2: ( expression | ref_variable_reference | 'out' variable_reference )
            int alt36=3;
            switch ( input.LA(1) ) {
            case Character_literal:
            case FALSE:
            case Hex_number:
            case IDENTIFIER:
            case MINUS:
            case NULL:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            case 64:
            case 69:
            case 71:
            case 72:
            case 74:
            case 75:
            case 78:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 109:
            case 111:
            case 112:
            case 116:
            case 117:
            case 118:
            case 119:
            case 121:
            case 122:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 152:
            case 153:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 176:
            case 179:
            case 182:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 191:
            case 192:
            case 196:
            case 198:
            case 204:
                {
                alt36=1;
                }
                break;
            case 168:
                {
                alt36=2;
                }
                break;
            case 157:
                {
                alt36=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;

            }

            switch (alt36) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:250:4: expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expression_in_argument_value1300);
                    expression133=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression133.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:251:4: ref_variable_reference
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_ref_variable_reference_in_argument_value1305);
                    ref_variable_reference134=ref_variable_reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ref_variable_reference134.getTree());

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:252:4: 'out' variable_reference
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal135=(Token)match(input,157,FOLLOW_157_in_argument_value1311); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal135_tree = 
                    (Object)adaptor.create(string_literal135)
                    ;
                    adaptor.addChild(root_0, string_literal135_tree);
                    }

                    pushFollow(FOLLOW_variable_reference_in_argument_value1315);
                    variable_reference136=variable_reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_reference136.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 31, argument_value_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "argument_value"


    public static class ref_variable_reference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ref_variable_reference"
    // CodeR.CSharp.Parser/src/antlr/cs.g:255:1: ref_variable_reference : 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference ) ;
    public final csParser.ref_variable_reference_return ref_variable_reference() throws RecognitionException {
        csParser.ref_variable_reference_return retval = new csParser.ref_variable_reference_return();
        retval.start = input.LT(1);

        int ref_variable_reference_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal137=null;
        Token char_literal138=null;
        Token char_literal140=null;
        csParser.type_return type139 =null;

        csParser.ref_variable_reference_return ref_variable_reference141 =null;

        csParser.variable_reference_return variable_reference142 =null;

        csParser.variable_reference_return variable_reference143 =null;


        Object string_literal137_tree=null;
        Object char_literal138_tree=null;
        Object char_literal140_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:256:2: ( 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:256:4: 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )
            {
            root_0 = (Object)adaptor.nil();


            string_literal137=(Token)match(input,168,FOLLOW_168_in_ref_variable_reference1326); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal137_tree = 
            (Object)adaptor.create(string_literal137)
            ;
            adaptor.addChild(root_0, string_literal137_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:257:3: ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==71) ) {
                int LA38_1 = input.LA(2);

                if ( (synpred10_cs()) ) {
                    alt38=1;
                }
                else if ( (true) ) {
                    alt38=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA38_0==Character_literal||LA38_0==FALSE||(LA38_0 >= Hex_number && LA38_0 <= IDENTIFIER)||(LA38_0 >= MINUS && LA38_0 <= NUMBER)||LA38_0==Real_literal||LA38_0==STRINGLITERAL||LA38_0==TRUE||LA38_0==Verbatim_string_literal||LA38_0==64||LA38_0==69||LA38_0==72||(LA38_0 >= 74 && LA38_0 <= 75)||LA38_0==78||LA38_0==98||(LA38_0 >= 100 && LA38_0 <= 101)||(LA38_0 >= 103 && LA38_0 <= 106)||(LA38_0 >= 108 && LA38_0 <= 109)||(LA38_0 >= 111 && LA38_0 <= 112)||(LA38_0 >= 116 && LA38_0 <= 119)||(LA38_0 >= 121 && LA38_0 <= 122)||LA38_0==124||LA38_0==128||LA38_0==131||LA38_0==134||LA38_0==137||LA38_0==140||LA38_0==143||(LA38_0 >= 145 && LA38_0 <= 146)||(LA38_0 >= 148 && LA38_0 <= 150)||(LA38_0 >= 152 && LA38_0 <= 154)||LA38_0==156||LA38_0==159||LA38_0==162||LA38_0==164||LA38_0==169||LA38_0==171||(LA38_0 >= 173 && LA38_0 <= 176)||LA38_0==179||LA38_0==182||(LA38_0 >= 185 && LA38_0 <= 189)||(LA38_0 >= 191 && LA38_0 <= 192)||LA38_0==196||LA38_0==198||LA38_0==204) ) {
                alt38=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;

            }
            switch (alt38) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:258:4: ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference )
                    {
                    char_literal138=(Token)match(input,71,FOLLOW_71_in_ref_variable_reference1352); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal138_tree = 
                    (Object)adaptor.create(char_literal138)
                    ;
                    adaptor.addChild(root_0, char_literal138_tree);
                    }

                    pushFollow(FOLLOW_type_in_ref_variable_reference1356);
                    type139=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type139.getTree());

                    char_literal140=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_ref_variable_reference1360); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal140_tree = 
                    (Object)adaptor.create(char_literal140)
                    ;
                    adaptor.addChild(root_0, char_literal140_tree);
                    }

                    // CodeR.CSharp.Parser/src/antlr/cs.g:258:47: ( ref_variable_reference | variable_reference )
                    int alt37=2;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==168) ) {
                        alt37=1;
                    }
                    else if ( (LA37_0==Character_literal||LA37_0==FALSE||(LA37_0 >= Hex_number && LA37_0 <= IDENTIFIER)||(LA37_0 >= MINUS && LA37_0 <= NUMBER)||LA37_0==Real_literal||LA37_0==STRINGLITERAL||LA37_0==TRUE||LA37_0==Verbatim_string_literal||LA37_0==64||LA37_0==69||(LA37_0 >= 71 && LA37_0 <= 72)||(LA37_0 >= 74 && LA37_0 <= 75)||LA37_0==78||LA37_0==98||(LA37_0 >= 100 && LA37_0 <= 101)||(LA37_0 >= 103 && LA37_0 <= 106)||(LA37_0 >= 108 && LA37_0 <= 109)||(LA37_0 >= 111 && LA37_0 <= 112)||(LA37_0 >= 116 && LA37_0 <= 119)||(LA37_0 >= 121 && LA37_0 <= 122)||LA37_0==124||LA37_0==128||LA37_0==131||LA37_0==134||LA37_0==137||LA37_0==140||LA37_0==143||(LA37_0 >= 145 && LA37_0 <= 146)||(LA37_0 >= 148 && LA37_0 <= 150)||(LA37_0 >= 152 && LA37_0 <= 154)||LA37_0==156||LA37_0==159||LA37_0==162||LA37_0==164||LA37_0==169||LA37_0==171||(LA37_0 >= 173 && LA37_0 <= 176)||LA37_0==179||LA37_0==182||(LA37_0 >= 185 && LA37_0 <= 189)||(LA37_0 >= 191 && LA37_0 <= 192)||LA37_0==196||LA37_0==198||LA37_0==204) ) {
                        alt37=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 37, 0, input);

                        throw nvae;

                    }
                    switch (alt37) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:258:48: ref_variable_reference
                            {
                            pushFollow(FOLLOW_ref_variable_reference_in_ref_variable_reference1365);
                            ref_variable_reference141=ref_variable_reference();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ref_variable_reference141.getTree());

                            }
                            break;
                        case 2 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:258:73: variable_reference
                            {
                            pushFollow(FOLLOW_variable_reference_in_ref_variable_reference1369);
                            variable_reference142=variable_reference();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_reference142.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:260:5: variable_reference
                    {
                    pushFollow(FOLLOW_variable_reference_in_ref_variable_reference1405);
                    variable_reference143=variable_reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_reference143.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 32, ref_variable_reference_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "ref_variable_reference"


    public static class variable_reference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_reference"
    // CodeR.CSharp.Parser/src/antlr/cs.g:265:1: variable_reference : expression ;
    public final csParser.variable_reference_return variable_reference() throws RecognitionException {
        csParser.variable_reference_return retval = new csParser.variable_reference_return();
        retval.start = input.LT(1);

        int variable_reference_StartIndex = input.index();

        Object root_0 = null;

        csParser.expression_return expression144 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:266:2: ( expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:266:4: expression
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expression_in_variable_reference1422);
            expression144=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression144.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 33, variable_reference_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable_reference"


    public static class rank_specifiers_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_specifiers"
    // CodeR.CSharp.Parser/src/antlr/cs.g:268:1: rank_specifiers : ( rank_specifier )+ ;
    public final csParser.rank_specifiers_return rank_specifiers() throws RecognitionException {
        csParser.rank_specifiers_return retval = new csParser.rank_specifiers_return();
        retval.start = input.LT(1);

        int rank_specifiers_StartIndex = input.index();

        Object root_0 = null;

        csParser.rank_specifier_return rank_specifier145 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:269:2: ( ( rank_specifier )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:269:4: ( rank_specifier )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:269:4: ( rank_specifier )+
            int cnt39=0;
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==94) ) {
                    int LA39_2 = input.LA(2);

                    if ( (LA39_2==77||LA39_2==95) ) {
                        alt39=1;
                    }


                }


                switch (alt39) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:269:4: rank_specifier
            	    {
            	    pushFollow(FOLLOW_rank_specifier_in_rank_specifiers1432);
            	    rank_specifier145=rank_specifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_specifier145.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt39 >= 1 ) break loop39;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(39, input);
                        throw eee;
                }
                cnt39++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 34, rank_specifiers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "rank_specifiers"


    public static class rank_specifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_specifier"
    // CodeR.CSharp.Parser/src/antlr/cs.g:272:1: rank_specifier : '[' ( dim_separators )? ']' ;
    public final csParser.rank_specifier_return rank_specifier() throws RecognitionException {
        csParser.rank_specifier_return retval = new csParser.rank_specifier_return();
        retval.start = input.LT(1);

        int rank_specifier_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal146=null;
        Token char_literal148=null;
        csParser.dim_separators_return dim_separators147 =null;


        Object char_literal146_tree=null;
        Object char_literal148_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:273:2: ( '[' ( dim_separators )? ']' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:273:4: '[' ( dim_separators )? ']'
            {
            root_0 = (Object)adaptor.nil();


            char_literal146=(Token)match(input,94,FOLLOW_94_in_rank_specifier1444); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal146_tree = 
            (Object)adaptor.create(char_literal146)
            ;
            adaptor.addChild(root_0, char_literal146_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:273:10: ( dim_separators )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==77) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:273:10: dim_separators
                    {
                    pushFollow(FOLLOW_dim_separators_in_rank_specifier1448);
                    dim_separators147=dim_separators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dim_separators147.getTree());

                    }
                    break;

            }


            char_literal148=(Token)match(input,95,FOLLOW_95_in_rank_specifier1453); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal148_tree = 
            (Object)adaptor.create(char_literal148)
            ;
            adaptor.addChild(root_0, char_literal148_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 35, rank_specifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "rank_specifier"


    public static class dim_separators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dim_separators"
    // CodeR.CSharp.Parser/src/antlr/cs.g:276:1: dim_separators : ( ',' )+ ;
    public final csParser.dim_separators_return dim_separators() throws RecognitionException {
        csParser.dim_separators_return retval = new csParser.dim_separators_return();
        retval.start = input.LT(1);

        int dim_separators_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal149=null;

        Object char_literal149_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:277:2: ( ( ',' )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:277:4: ( ',' )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:277:4: ( ',' )+
            int cnt41=0;
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);

                if ( (LA41_0==77) ) {
                    alt41=1;
                }


                switch (alt41) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:277:4: ','
            	    {
            	    char_literal149=(Token)match(input,77,FOLLOW_77_in_dim_separators1464); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal149_tree = 
            	    (Object)adaptor.create(char_literal149)
            	    ;
            	    adaptor.addChild(root_0, char_literal149_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt41 >= 1 ) break loop41;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(41, input);
                        throw eee;
                }
                cnt41++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 36, dim_separators_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "dim_separators"


    public static class delegate_creation_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "delegate_creation_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:280:1: delegate_creation_expression : type_name '(' type_name ')' ;
    public final csParser.delegate_creation_expression_return delegate_creation_expression() throws RecognitionException {
        csParser.delegate_creation_expression_return retval = new csParser.delegate_creation_expression_return();
        retval.start = input.LT(1);

        int delegate_creation_expression_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal151=null;
        Token char_literal153=null;
        csParser.type_name_return type_name150 =null;

        csParser.type_name_return type_name152 =null;


        Object char_literal151_tree=null;
        Object char_literal153_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:281:2: ( type_name '(' type_name ')' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:281:4: type_name '(' type_name ')'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_name_in_delegate_creation_expression1476);
            type_name150=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name150.getTree());

            char_literal151=(Token)match(input,71,FOLLOW_71_in_delegate_creation_expression1480); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal151_tree = 
            (Object)adaptor.create(char_literal151)
            ;
            adaptor.addChild(root_0, char_literal151_tree);
            }

            pushFollow(FOLLOW_type_name_in_delegate_creation_expression1484);
            type_name152=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name152.getTree());

            char_literal153=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_delegate_creation_expression1488); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal153_tree = 
            (Object)adaptor.create(char_literal153)
            ;
            adaptor.addChild(root_0, char_literal153_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 37, delegate_creation_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "delegate_creation_expression"


    public static class anonymous_object_creation_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "anonymous_object_creation_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:284:1: anonymous_object_creation_expression : anonymous_object_initializer ;
    public final csParser.anonymous_object_creation_expression_return anonymous_object_creation_expression() throws RecognitionException {
        csParser.anonymous_object_creation_expression_return retval = new csParser.anonymous_object_creation_expression_return();
        retval.start = input.LT(1);

        int anonymous_object_creation_expression_StartIndex = input.index();

        Object root_0 = null;

        csParser.anonymous_object_initializer_return anonymous_object_initializer154 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:285:2: ( anonymous_object_initializer )
            // CodeR.CSharp.Parser/src/antlr/cs.g:285:4: anonymous_object_initializer
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression1499);
            anonymous_object_initializer154=anonymous_object_initializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_object_initializer154.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 38, anonymous_object_creation_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "anonymous_object_creation_expression"


    public static class anonymous_object_initializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "anonymous_object_initializer"
    // CodeR.CSharp.Parser/src/antlr/cs.g:288:1: anonymous_object_initializer : '{' ( member_declarator_list )? ( ',' )? '}' ;
    public final csParser.anonymous_object_initializer_return anonymous_object_initializer() throws RecognitionException {
        csParser.anonymous_object_initializer_return retval = new csParser.anonymous_object_initializer_return();
        retval.start = input.LT(1);

        int anonymous_object_initializer_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal155=null;
        Token char_literal157=null;
        Token char_literal158=null;
        csParser.member_declarator_list_return member_declarator_list156 =null;


        Object char_literal155_tree=null;
        Object char_literal157_tree=null;
        Object char_literal158_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:289:2: ( '{' ( member_declarator_list )? ( ',' )? '}' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:289:4: '{' ( member_declarator_list )? ( ',' )? '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal155=(Token)match(input,199,FOLLOW_199_in_anonymous_object_initializer1510); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal155_tree = 
            (Object)adaptor.create(char_literal155)
            ;
            adaptor.addChild(root_0, char_literal155_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:289:10: ( member_declarator_list )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==IDENTIFIER||LA42_0==98||(LA42_0 >= 100 && LA42_0 <= 101)||(LA42_0 >= 103 && LA42_0 <= 104)||LA42_0==108||LA42_0==119||LA42_0==122||LA42_0==124||LA42_0==128||LA42_0==134||LA42_0==137||LA42_0==143||(LA42_0 >= 145 && LA42_0 <= 146)||(LA42_0 >= 149 && LA42_0 <= 150)||LA42_0==154||LA42_0==156||LA42_0==159||LA42_0==162||LA42_0==164||LA42_0==169||(LA42_0 >= 173 && LA42_0 <= 174)||LA42_0==185||LA42_0==192||LA42_0==196||LA42_0==198) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:289:10: member_declarator_list
                    {
                    pushFollow(FOLLOW_member_declarator_list_in_anonymous_object_initializer1514);
                    member_declarator_list156=member_declarator_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, member_declarator_list156.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:289:36: ( ',' )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==77) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:289:36: ','
                    {
                    char_literal157=(Token)match(input,77,FOLLOW_77_in_anonymous_object_initializer1519); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal157_tree = 
                    (Object)adaptor.create(char_literal157)
                    ;
                    adaptor.addChild(root_0, char_literal157_tree);
                    }

                    }
                    break;

            }


            char_literal158=(Token)match(input,203,FOLLOW_203_in_anonymous_object_initializer1524); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal158_tree = 
            (Object)adaptor.create(char_literal158)
            ;
            adaptor.addChild(root_0, char_literal158_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 39, anonymous_object_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "anonymous_object_initializer"


    public static class member_declarator_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "member_declarator_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:292:1: member_declarator_list : member_declarator ( ',' member_declarator )* ;
    public final csParser.member_declarator_list_return member_declarator_list() throws RecognitionException {
        csParser.member_declarator_list_return retval = new csParser.member_declarator_list_return();
        retval.start = input.LT(1);

        int member_declarator_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal160=null;
        csParser.member_declarator_return member_declarator159 =null;

        csParser.member_declarator_return member_declarator161 =null;


        Object char_literal160_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:293:2: ( member_declarator ( ',' member_declarator )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:293:4: member_declarator ( ',' member_declarator )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_member_declarator_in_member_declarator_list1535);
            member_declarator159=member_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, member_declarator159.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:293:23: ( ',' member_declarator )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==77) ) {
                    int LA44_1 = input.LA(2);

                    if ( (LA44_1==IDENTIFIER||LA44_1==98||(LA44_1 >= 100 && LA44_1 <= 101)||(LA44_1 >= 103 && LA44_1 <= 104)||LA44_1==108||LA44_1==119||LA44_1==122||LA44_1==124||LA44_1==128||LA44_1==134||LA44_1==137||LA44_1==143||(LA44_1 >= 145 && LA44_1 <= 146)||(LA44_1 >= 149 && LA44_1 <= 150)||LA44_1==154||LA44_1==156||LA44_1==159||LA44_1==162||LA44_1==164||LA44_1==169||(LA44_1 >= 173 && LA44_1 <= 174)||LA44_1==185||LA44_1==192||LA44_1==196||LA44_1==198) ) {
                        alt44=1;
                    }


                }


                switch (alt44) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:293:24: ',' member_declarator
            	    {
            	    char_literal160=(Token)match(input,77,FOLLOW_77_in_member_declarator_list1539); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal160_tree = 
            	    (Object)adaptor.create(char_literal160)
            	    ;
            	    adaptor.addChild(root_0, char_literal160_tree);
            	    }

            	    pushFollow(FOLLOW_member_declarator_in_member_declarator_list1541);
            	    member_declarator161=member_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, member_declarator161.getTree());

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 40, member_declarator_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "member_declarator_list"


    public static class member_declarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "member_declarator"
    // CodeR.CSharp.Parser/src/antlr/cs.g:296:1: member_declarator : identifier ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression ) ;
    public final csParser.member_declarator_return member_declarator() throws RecognitionException {
        csParser.member_declarator_return retval = new csParser.member_declarator_return();
        retval.start = input.LT(1);

        int member_declarator_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal164=null;
        Token char_literal166=null;
        csParser.identifier_return identifier162 =null;

        csParser.generic_argument_list_return generic_argument_list163 =null;

        csParser.primary_or_array_creation_expression_return primary_or_array_creation_expression165 =null;

        csParser.expression_return expression167 =null;


        Object char_literal164_tree=null;
        Object char_literal166_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:297:2: ( identifier ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:297:4: identifier ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_member_declarator1554);
            identifier162=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier162.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:298:4: ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression )
            int alt45=3;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt45=1;
                }
                break;
            case DOT:
                {
                alt45=2;
                }
                break;
            case 88:
                {
                alt45=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }

            switch (alt45) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:299:5: generic_argument_list
                    {
                    pushFollow(FOLLOW_generic_argument_list_in_member_declarator1565);
                    generic_argument_list163=generic_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_argument_list163.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:300:6: ( '.' primary_or_array_creation_expression )
                    {
                    // CodeR.CSharp.Parser/src/antlr/cs.g:300:6: ( '.' primary_or_array_creation_expression )
                    // CodeR.CSharp.Parser/src/antlr/cs.g:300:7: '.' primary_or_array_creation_expression
                    {
                    char_literal164=(Token)match(input,DOT,FOLLOW_DOT_in_member_declarator1573); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal164_tree = 
                    (Object)adaptor.create(char_literal164)
                    ;
                    adaptor.addChild(root_0, char_literal164_tree);
                    }

                    pushFollow(FOLLOW_primary_or_array_creation_expression_in_member_declarator1577);
                    primary_or_array_creation_expression165=primary_or_array_creation_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_or_array_creation_expression165.getTree());

                    }


                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:301:6: '=' expression
                    {
                    char_literal166=(Token)match(input,88,FOLLOW_88_in_member_declarator1585); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal166_tree = 
                    (Object)adaptor.create(char_literal166)
                    ;
                    adaptor.addChild(root_0, char_literal166_tree);
                    }

                    pushFollow(FOLLOW_expression_in_member_declarator1589);
                    expression167=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression167.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 41, member_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "member_declarator"


    public static class primary_or_array_creation_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "primary_or_array_creation_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:305:1: primary_or_array_creation_expression : ( ( array_creation_expression )=> array_creation_expression | primary_expression );
    public final csParser.primary_or_array_creation_expression_return primary_or_array_creation_expression() throws RecognitionException {
        csParser.primary_or_array_creation_expression_return retval = new csParser.primary_or_array_creation_expression_return();
        retval.start = input.LT(1);

        int primary_or_array_creation_expression_StartIndex = input.index();

        Object root_0 = null;

        csParser.array_creation_expression_return array_creation_expression168 =null;

        csParser.primary_expression_return primary_expression169 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:306:2: ( ( array_creation_expression )=> array_creation_expression | primary_expression )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==152) ) {
                int LA46_1 = input.LA(2);

                if ( (synpred11_cs()) ) {
                    alt46=1;
                }
                else if ( (true) ) {
                    alt46=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA46_0==Character_literal||LA46_0==FALSE||(LA46_0 >= Hex_number && LA46_0 <= IDENTIFIER)||(LA46_0 >= NULL && LA46_0 <= NUMBER)||LA46_0==Real_literal||LA46_0==STRINGLITERAL||LA46_0==TRUE||LA46_0==Verbatim_string_literal||LA46_0==71||LA46_0==98||(LA46_0 >= 100 && LA46_0 <= 101)||(LA46_0 >= 103 && LA46_0 <= 106)||(LA46_0 >= 108 && LA46_0 <= 109)||(LA46_0 >= 111 && LA46_0 <= 112)||(LA46_0 >= 116 && LA46_0 <= 119)||(LA46_0 >= 121 && LA46_0 <= 122)||LA46_0==124||LA46_0==128||LA46_0==131||LA46_0==134||LA46_0==137||LA46_0==140||LA46_0==143||(LA46_0 >= 145 && LA46_0 <= 146)||(LA46_0 >= 148 && LA46_0 <= 150)||(LA46_0 >= 153 && LA46_0 <= 154)||LA46_0==156||LA46_0==159||LA46_0==162||LA46_0==164||LA46_0==169||LA46_0==171||(LA46_0 >= 173 && LA46_0 <= 176)||LA46_0==179||LA46_0==182||(LA46_0 >= 185 && LA46_0 <= 189)||(LA46_0 >= 191 && LA46_0 <= 192)||LA46_0==196||LA46_0==198) ) {
                alt46=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }
            switch (alt46) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:306:4: ( array_creation_expression )=> array_creation_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_array_creation_expression_in_primary_or_array_creation_expression1611);
                    array_creation_expression168=array_creation_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, array_creation_expression168.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:307:4: primary_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_primary_expression_in_primary_or_array_creation_expression1616);
                    primary_expression169=primary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_expression169.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 42, primary_or_array_creation_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "primary_or_array_creation_expression"


    public static class array_creation_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_creation_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:311:1: array_creation_expression : 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) ) ;
    public final csParser.array_creation_expression_return array_creation_expression() throws RecognitionException {
        csParser.array_creation_expression_return retval = new csParser.array_creation_expression_return();
        retval.start = input.LT(1);

        int array_creation_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal170=null;
        Token char_literal172=null;
        Token char_literal174=null;
        csParser.type_return type171 =null;

        csParser.expression_list_return expression_list173 =null;

        csParser.rank_specifiers_return rank_specifiers175 =null;

        csParser.array_initializer_return array_initializer176 =null;

        csParser.arguments_return arguments177 =null;

        csParser.invocation_part_return invocation_part178 =null;

        csParser.invocation_part_return invocation_part179 =null;

        csParser.arguments_return arguments180 =null;

        csParser.array_initializer_return array_initializer181 =null;

        csParser.rank_specifier_return rank_specifier182 =null;

        csParser.array_initializer_return array_initializer183 =null;


        Object string_literal170_tree=null;
        Object char_literal172_tree=null;
        Object char_literal174_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:312:2: ( 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:312:4: 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) )
            {
            root_0 = (Object)adaptor.nil();


            string_literal170=(Token)match(input,152,FOLLOW_152_in_array_creation_expression1629); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal170_tree = 
            (Object)adaptor.create(string_literal170)
            ;
            adaptor.addChild(root_0, string_literal170_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:313:3: ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) )
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==IDENTIFIER||LA52_0==98||(LA52_0 >= 100 && LA52_0 <= 101)||(LA52_0 >= 103 && LA52_0 <= 104)||LA52_0==106||(LA52_0 >= 108 && LA52_0 <= 109)||LA52_0==111||LA52_0==116||LA52_0==119||(LA52_0 >= 121 && LA52_0 <= 122)||LA52_0==124||LA52_0==128||LA52_0==131||LA52_0==134||LA52_0==137||LA52_0==140||LA52_0==143||(LA52_0 >= 145 && LA52_0 <= 146)||(LA52_0 >= 148 && LA52_0 <= 150)||(LA52_0 >= 153 && LA52_0 <= 154)||LA52_0==156||LA52_0==159||LA52_0==162||LA52_0==164||LA52_0==169||LA52_0==171||(LA52_0 >= 173 && LA52_0 <= 175)||LA52_0==179||LA52_0==185||(LA52_0 >= 187 && LA52_0 <= 188)||(LA52_0 >= 191 && LA52_0 <= 192)||LA52_0==194||LA52_0==196||LA52_0==198) ) {
                alt52=1;
            }
            else if ( (LA52_0==94) ) {
                alt52=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;

            }
            switch (alt52) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:314:4: type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer )
                    {
                    pushFollow(FOLLOW_type_in_array_creation_expression1641);
                    type171=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type171.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:315:5: ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer )
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==94) ) {
                        alt51=1;
                    }
                    else if ( (LA51_0==199) ) {
                        alt51=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 51, 0, input);

                        throw nvae;

                    }
                    switch (alt51) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:316:6: '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
                            {
                            char_literal172=(Token)match(input,94,FOLLOW_94_in_array_creation_expression1654); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal172_tree = 
                            (Object)adaptor.create(char_literal172)
                            ;
                            adaptor.addChild(root_0, char_literal172_tree);
                            }

                            pushFollow(FOLLOW_expression_list_in_array_creation_expression1658);
                            expression_list173=expression_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list173.getTree());

                            char_literal174=(Token)match(input,95,FOLLOW_95_in_array_creation_expression1662); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal174_tree = 
                            (Object)adaptor.create(char_literal174)
                            ;
                            adaptor.addChild(root_0, char_literal174_tree);
                            }

                            // CodeR.CSharp.Parser/src/antlr/cs.g:317:7: ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
                            int alt50=2;
                            alt50 = dfa50.predict(input);
                            switch (alt50) {
                                case 1 :
                                    // CodeR.CSharp.Parser/src/antlr/cs.g:318:8: ( rank_specifiers )? ( array_initializer )?
                                    {
                                    // CodeR.CSharp.Parser/src/antlr/cs.g:318:8: ( rank_specifiers )?
                                    int alt47=2;
                                    int LA47_0 = input.LA(1);

                                    if ( (LA47_0==94) ) {
                                        alt47=1;
                                    }
                                    switch (alt47) {
                                        case 1 :
                                            // CodeR.CSharp.Parser/src/antlr/cs.g:318:8: rank_specifiers
                                            {
                                            pushFollow(FOLLOW_rank_specifiers_in_array_creation_expression1679);
                                            rank_specifiers175=rank_specifiers();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_specifiers175.getTree());

                                            }
                                            break;

                                    }


                                    // CodeR.CSharp.Parser/src/antlr/cs.g:318:27: ( array_initializer )?
                                    int alt48=2;
                                    int LA48_0 = input.LA(1);

                                    if ( (LA48_0==199) ) {
                                        alt48=1;
                                    }
                                    switch (alt48) {
                                        case 1 :
                                            // CodeR.CSharp.Parser/src/antlr/cs.g:318:27: array_initializer
                                            {
                                            pushFollow(FOLLOW_array_initializer_in_array_creation_expression1684);
                                            array_initializer176=array_initializer();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) adaptor.addChild(root_0, array_initializer176.getTree());

                                            }
                                            break;

                                    }


                                    }
                                    break;
                                case 2 :
                                    // CodeR.CSharp.Parser/src/antlr/cs.g:320:9: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments
                                    {
                                    // CodeR.CSharp.Parser/src/antlr/cs.g:320:9: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )*
                                    loop49:
                                    do {
                                        int alt49=3;
                                        int LA49_0 = input.LA(1);

                                        if ( (LA49_0==71) ) {
                                            int LA49_1 = input.LA(2);

                                            if ( (synpred12_cs()) ) {
                                                alt49=1;
                                            }


                                        }
                                        else if ( (LA49_0==DOT||LA49_0==PTR||LA49_0==94) ) {
                                            alt49=2;
                                        }


                                        switch (alt49) {
                                    	case 1 :
                                    	    // CodeR.CSharp.Parser/src/antlr/cs.g:321:9: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
                                    	    {
                                    	    // CodeR.CSharp.Parser/src/antlr/cs.g:321:9: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
                                    	    // CodeR.CSharp.Parser/src/antlr/cs.g:321:10: ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part
                                    	    {
                                    	    pushFollow(FOLLOW_arguments_in_array_creation_expression1731);
                                    	    arguments177=arguments();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments177.getTree());

                                    	    pushFollow(FOLLOW_invocation_part_in_array_creation_expression1735);
                                    	    invocation_part178=invocation_part();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, invocation_part178.getTree());

                                    	    }


                                    	    }
                                    	    break;
                                    	case 2 :
                                    	    // CodeR.CSharp.Parser/src/antlr/cs.g:322:12: invocation_part
                                    	    {
                                    	    pushFollow(FOLLOW_invocation_part_in_array_creation_expression1749);
                                    	    invocation_part179=invocation_part();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, invocation_part179.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop49;
                                        }
                                    } while (true);


                                    pushFollow(FOLLOW_arguments_in_array_creation_expression1763);
                                    arguments180=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments180.getTree());

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:325:8: array_initializer
                            {
                            pushFollow(FOLLOW_array_initializer_in_array_creation_expression1787);
                            array_initializer181=array_initializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, array_initializer181.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:327:5: rank_specifier ( array_initializer )
                    {
                    pushFollow(FOLLOW_rank_specifier_in_array_creation_expression1801);
                    rank_specifier182=rank_specifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_specifier182.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:328:5: ( array_initializer )
                    // CodeR.CSharp.Parser/src/antlr/cs.g:329:6: array_initializer
                    {
                    pushFollow(FOLLOW_array_initializer_in_array_creation_expression1817);
                    array_initializer183=array_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, array_initializer183.getTree());

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 43, array_creation_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "array_creation_expression"


    public static class array_initializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_initializer"
    // CodeR.CSharp.Parser/src/antlr/cs.g:334:1: array_initializer : '{' ( variable_initializer_list )? ( ',' )? '}' ;
    public final csParser.array_initializer_return array_initializer() throws RecognitionException {
        csParser.array_initializer_return retval = new csParser.array_initializer_return();
        retval.start = input.LT(1);

        int array_initializer_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal184=null;
        Token char_literal186=null;
        Token char_literal187=null;
        csParser.variable_initializer_list_return variable_initializer_list185 =null;


        Object char_literal184_tree=null;
        Object char_literal186_tree=null;
        Object char_literal187_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:335:2: ( '{' ( variable_initializer_list )? ( ',' )? '}' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:335:4: '{' ( variable_initializer_list )? ( ',' )? '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal184=(Token)match(input,199,FOLLOW_199_in_array_initializer1843); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal184_tree = 
            (Object)adaptor.create(char_literal184)
            ;
            adaptor.addChild(root_0, char_literal184_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:335:10: ( variable_initializer_list )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==Character_literal||LA53_0==FALSE||(LA53_0 >= Hex_number && LA53_0 <= IDENTIFIER)||(LA53_0 >= MINUS && LA53_0 <= NUMBER)||LA53_0==Real_literal||LA53_0==STRINGLITERAL||LA53_0==TRUE||LA53_0==Verbatim_string_literal||LA53_0==64||LA53_0==69||(LA53_0 >= 71 && LA53_0 <= 72)||(LA53_0 >= 74 && LA53_0 <= 75)||LA53_0==78||LA53_0==98||(LA53_0 >= 100 && LA53_0 <= 101)||(LA53_0 >= 103 && LA53_0 <= 106)||(LA53_0 >= 108 && LA53_0 <= 109)||(LA53_0 >= 111 && LA53_0 <= 112)||(LA53_0 >= 116 && LA53_0 <= 119)||(LA53_0 >= 121 && LA53_0 <= 122)||LA53_0==124||LA53_0==128||LA53_0==131||LA53_0==134||LA53_0==137||LA53_0==140||LA53_0==143||(LA53_0 >= 145 && LA53_0 <= 146)||(LA53_0 >= 148 && LA53_0 <= 150)||(LA53_0 >= 152 && LA53_0 <= 154)||LA53_0==156||LA53_0==159||LA53_0==162||LA53_0==164||LA53_0==169||LA53_0==171||(LA53_0 >= 173 && LA53_0 <= 176)||LA53_0==179||LA53_0==182||(LA53_0 >= 185 && LA53_0 <= 189)||(LA53_0 >= 191 && LA53_0 <= 192)||LA53_0==196||(LA53_0 >= 198 && LA53_0 <= 199)||LA53_0==204) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:335:10: variable_initializer_list
                    {
                    pushFollow(FOLLOW_variable_initializer_list_in_array_initializer1847);
                    variable_initializer_list185=variable_initializer_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_initializer_list185.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:335:39: ( ',' )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==77) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:335:39: ','
                    {
                    char_literal186=(Token)match(input,77,FOLLOW_77_in_array_initializer1852); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal186_tree = 
                    (Object)adaptor.create(char_literal186)
                    ;
                    adaptor.addChild(root_0, char_literal186_tree);
                    }

                    }
                    break;

            }


            char_literal187=(Token)match(input,203,FOLLOW_203_in_array_initializer1857); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal187_tree = 
            (Object)adaptor.create(char_literal187)
            ;
            adaptor.addChild(root_0, char_literal187_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 44, array_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "array_initializer"


    public static class variable_initializer_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_initializer_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:338:1: variable_initializer_list : variable_initializer ( ',' variable_initializer )* ;
    public final csParser.variable_initializer_list_return variable_initializer_list() throws RecognitionException {
        csParser.variable_initializer_list_return retval = new csParser.variable_initializer_list_return();
        retval.start = input.LT(1);

        int variable_initializer_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal189=null;
        csParser.variable_initializer_return variable_initializer188 =null;

        csParser.variable_initializer_return variable_initializer190 =null;


        Object char_literal189_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:339:2: ( variable_initializer ( ',' variable_initializer )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:339:4: variable_initializer ( ',' variable_initializer )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_variable_initializer_in_variable_initializer_list1868);
            variable_initializer188=variable_initializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_initializer188.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:339:25: ( ',' variable_initializer )*
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==77) ) {
                    int LA55_1 = input.LA(2);

                    if ( (LA55_1==Character_literal||LA55_1==FALSE||(LA55_1 >= Hex_number && LA55_1 <= IDENTIFIER)||(LA55_1 >= MINUS && LA55_1 <= NUMBER)||LA55_1==Real_literal||LA55_1==STRINGLITERAL||LA55_1==TRUE||LA55_1==Verbatim_string_literal||LA55_1==64||LA55_1==69||(LA55_1 >= 71 && LA55_1 <= 72)||(LA55_1 >= 74 && LA55_1 <= 75)||LA55_1==78||LA55_1==98||(LA55_1 >= 100 && LA55_1 <= 101)||(LA55_1 >= 103 && LA55_1 <= 106)||(LA55_1 >= 108 && LA55_1 <= 109)||(LA55_1 >= 111 && LA55_1 <= 112)||(LA55_1 >= 116 && LA55_1 <= 119)||(LA55_1 >= 121 && LA55_1 <= 122)||LA55_1==124||LA55_1==128||LA55_1==131||LA55_1==134||LA55_1==137||LA55_1==140||LA55_1==143||(LA55_1 >= 145 && LA55_1 <= 146)||(LA55_1 >= 148 && LA55_1 <= 150)||(LA55_1 >= 152 && LA55_1 <= 154)||LA55_1==156||LA55_1==159||LA55_1==162||LA55_1==164||LA55_1==169||LA55_1==171||(LA55_1 >= 173 && LA55_1 <= 176)||LA55_1==179||LA55_1==182||(LA55_1 >= 185 && LA55_1 <= 189)||(LA55_1 >= 191 && LA55_1 <= 192)||LA55_1==196||(LA55_1 >= 198 && LA55_1 <= 199)||LA55_1==204) ) {
                        alt55=1;
                    }


                }


                switch (alt55) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:339:26: ',' variable_initializer
            	    {
            	    char_literal189=(Token)match(input,77,FOLLOW_77_in_variable_initializer_list1871); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal189_tree = 
            	    (Object)adaptor.create(char_literal189)
            	    ;
            	    adaptor.addChild(root_0, char_literal189_tree);
            	    }

            	    pushFollow(FOLLOW_variable_initializer_in_variable_initializer_list1873);
            	    variable_initializer190=variable_initializer();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_initializer190.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 45, variable_initializer_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable_initializer_list"


    public static class variable_initializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_initializer"
    // CodeR.CSharp.Parser/src/antlr/cs.g:342:1: variable_initializer : ( expression | array_initializer );
    public final csParser.variable_initializer_return variable_initializer() throws RecognitionException {
        csParser.variable_initializer_return retval = new csParser.variable_initializer_return();
        retval.start = input.LT(1);

        int variable_initializer_StartIndex = input.index();

        Object root_0 = null;

        csParser.expression_return expression191 =null;

        csParser.array_initializer_return array_initializer192 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:343:2: ( expression | array_initializer )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==Character_literal||LA56_0==FALSE||(LA56_0 >= Hex_number && LA56_0 <= IDENTIFIER)||(LA56_0 >= MINUS && LA56_0 <= NUMBER)||LA56_0==Real_literal||LA56_0==STRINGLITERAL||LA56_0==TRUE||LA56_0==Verbatim_string_literal||LA56_0==64||LA56_0==69||(LA56_0 >= 71 && LA56_0 <= 72)||(LA56_0 >= 74 && LA56_0 <= 75)||LA56_0==78||LA56_0==98||(LA56_0 >= 100 && LA56_0 <= 101)||(LA56_0 >= 103 && LA56_0 <= 106)||(LA56_0 >= 108 && LA56_0 <= 109)||(LA56_0 >= 111 && LA56_0 <= 112)||(LA56_0 >= 116 && LA56_0 <= 119)||(LA56_0 >= 121 && LA56_0 <= 122)||LA56_0==124||LA56_0==128||LA56_0==131||LA56_0==134||LA56_0==137||LA56_0==140||LA56_0==143||(LA56_0 >= 145 && LA56_0 <= 146)||(LA56_0 >= 148 && LA56_0 <= 150)||(LA56_0 >= 152 && LA56_0 <= 154)||LA56_0==156||LA56_0==159||LA56_0==162||LA56_0==164||LA56_0==169||LA56_0==171||(LA56_0 >= 173 && LA56_0 <= 176)||LA56_0==179||LA56_0==182||(LA56_0 >= 185 && LA56_0 <= 189)||(LA56_0 >= 191 && LA56_0 <= 192)||LA56_0==196||LA56_0==198||LA56_0==204) ) {
                alt56=1;
            }
            else if ( (LA56_0==199) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;

            }
            switch (alt56) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:343:4: expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expression_in_variable_initializer1886);
                    expression191=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression191.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:343:17: array_initializer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_array_initializer_in_variable_initializer1890);
                    array_initializer192=array_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, array_initializer192.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 46, variable_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable_initializer"


    public static class sizeof_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sizeof_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:346:1: sizeof_expression : 'sizeof' '(' unmanaged_type ')' ;
    public final csParser.sizeof_expression_return sizeof_expression() throws RecognitionException {
        csParser.sizeof_expression_return retval = new csParser.sizeof_expression_return();
        retval.start = input.LT(1);

        int sizeof_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal193=null;
        Token char_literal194=null;
        Token char_literal196=null;
        csParser.unmanaged_type_return unmanaged_type195 =null;


        Object string_literal193_tree=null;
        Object char_literal194_tree=null;
        Object char_literal196_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:347:2: ( 'sizeof' '(' unmanaged_type ')' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:347:4: 'sizeof' '(' unmanaged_type ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal193=(Token)match(input,176,FOLLOW_176_in_sizeof_expression1901); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal193_tree = 
            (Object)adaptor.create(string_literal193)
            ;
            adaptor.addChild(root_0, string_literal193_tree);
            }

            char_literal194=(Token)match(input,71,FOLLOW_71_in_sizeof_expression1905); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal194_tree = 
            (Object)adaptor.create(char_literal194)
            ;
            adaptor.addChild(root_0, char_literal194_tree);
            }

            pushFollow(FOLLOW_unmanaged_type_in_sizeof_expression1909);
            unmanaged_type195=unmanaged_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unmanaged_type195.getTree());

            char_literal196=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_sizeof_expression1913); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal196_tree = 
            (Object)adaptor.create(char_literal196)
            ;
            adaptor.addChild(root_0, char_literal196_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 47, sizeof_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "sizeof_expression"


    public static class checked_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "checked_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:350:1: checked_expression : 'checked' '(' expression ')' ;
    public final csParser.checked_expression_return checked_expression() throws RecognitionException {
        csParser.checked_expression_return retval = new csParser.checked_expression_return();
        retval.start = input.LT(1);

        int checked_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal197=null;
        Token char_literal198=null;
        Token char_literal200=null;
        csParser.expression_return expression199 =null;


        Object string_literal197_tree=null;
        Object char_literal198_tree=null;
        Object char_literal200_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:351:2: ( 'checked' '(' expression ')' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:351:4: 'checked' '(' expression ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal197=(Token)match(input,112,FOLLOW_112_in_checked_expression1924); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal197_tree = 
            (Object)adaptor.create(string_literal197)
            ;
            adaptor.addChild(root_0, string_literal197_tree);
            }

            char_literal198=(Token)match(input,71,FOLLOW_71_in_checked_expression1928); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal198_tree = 
            (Object)adaptor.create(char_literal198)
            ;
            adaptor.addChild(root_0, char_literal198_tree);
            }

            pushFollow(FOLLOW_expression_in_checked_expression1932);
            expression199=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression199.getTree());

            char_literal200=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_checked_expression1936); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal200_tree = 
            (Object)adaptor.create(char_literal200)
            ;
            adaptor.addChild(root_0, char_literal200_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 48, checked_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "checked_expression"


    public static class unchecked_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unchecked_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:354:1: unchecked_expression : 'unchecked' '(' expression ')' ;
    public final csParser.unchecked_expression_return unchecked_expression() throws RecognitionException {
        csParser.unchecked_expression_return retval = new csParser.unchecked_expression_return();
        retval.start = input.LT(1);

        int unchecked_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal201=null;
        Token char_literal202=null;
        Token char_literal204=null;
        csParser.expression_return expression203 =null;


        Object string_literal201_tree=null;
        Object char_literal202_tree=null;
        Object char_literal204_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:355:2: ( 'unchecked' '(' expression ')' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:355:4: 'unchecked' '(' expression ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal201=(Token)match(input,189,FOLLOW_189_in_unchecked_expression1947); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal201_tree = 
            (Object)adaptor.create(string_literal201)
            ;
            adaptor.addChild(root_0, string_literal201_tree);
            }

            char_literal202=(Token)match(input,71,FOLLOW_71_in_unchecked_expression1951); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal202_tree = 
            (Object)adaptor.create(char_literal202)
            ;
            adaptor.addChild(root_0, char_literal202_tree);
            }

            pushFollow(FOLLOW_expression_in_unchecked_expression1955);
            expression203=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression203.getTree());

            char_literal204=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unchecked_expression1959); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal204_tree = 
            (Object)adaptor.create(char_literal204)
            ;
            adaptor.addChild(root_0, char_literal204_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 49, unchecked_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unchecked_expression"


    public static class default_value_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_value_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:358:1: default_value_expression : 'default' '(' type ')' ;
    public final csParser.default_value_expression_return default_value_expression() throws RecognitionException {
        csParser.default_value_expression_return retval = new csParser.default_value_expression_return();
        retval.start = input.LT(1);

        int default_value_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal205=null;
        Token char_literal206=null;
        Token char_literal208=null;
        csParser.type_return type207 =null;


        Object string_literal205_tree=null;
        Object char_literal206_tree=null;
        Object char_literal208_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:359:2: ( 'default' '(' type ')' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:359:4: 'default' '(' type ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal205=(Token)match(input,117,FOLLOW_117_in_default_value_expression1970); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal205_tree = 
            (Object)adaptor.create(string_literal205)
            ;
            adaptor.addChild(root_0, string_literal205_tree);
            }

            char_literal206=(Token)match(input,71,FOLLOW_71_in_default_value_expression1974); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal206_tree = 
            (Object)adaptor.create(char_literal206)
            ;
            adaptor.addChild(root_0, char_literal206_tree);
            }

            pushFollow(FOLLOW_type_in_default_value_expression1978);
            type207=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type207.getTree());

            char_literal208=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_default_value_expression1982); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal208_tree = 
            (Object)adaptor.create(char_literal208)
            ;
            adaptor.addChild(root_0, char_literal208_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 50, default_value_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "default_value_expression"


    public static class anonymous_method_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "anonymous_method_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:362:1: anonymous_method_expression : 'delegate' ( explicit_anonymous_function_signature )? block ;
    public final csParser.anonymous_method_expression_return anonymous_method_expression() throws RecognitionException {
        csParser.anonymous_method_expression_return retval = new csParser.anonymous_method_expression_return();
        retval.start = input.LT(1);

        int anonymous_method_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal209=null;
        csParser.explicit_anonymous_function_signature_return explicit_anonymous_function_signature210 =null;

        csParser.block_return block211 =null;


        Object string_literal209_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:363:2: ( 'delegate' ( explicit_anonymous_function_signature )? block )
            // CodeR.CSharp.Parser/src/antlr/cs.g:363:4: 'delegate' ( explicit_anonymous_function_signature )? block
            {
            root_0 = (Object)adaptor.nil();


            string_literal209=(Token)match(input,118,FOLLOW_118_in_anonymous_method_expression1993); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal209_tree = 
            (Object)adaptor.create(string_literal209)
            ;
            adaptor.addChild(root_0, string_literal209_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:363:17: ( explicit_anonymous_function_signature )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==71) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:363:17: explicit_anonymous_function_signature
                    {
                    pushFollow(FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression1997);
                    explicit_anonymous_function_signature210=explicit_anonymous_function_signature();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_anonymous_function_signature210.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_block_in_anonymous_method_expression2002);
            block211=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block211.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 51, anonymous_method_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "anonymous_method_expression"


    public static class explicit_anonymous_function_signature_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_anonymous_function_signature"
    // CodeR.CSharp.Parser/src/antlr/cs.g:366:1: explicit_anonymous_function_signature : '(' ( explicit_anonymous_function_parameter_list )? ')' ;
    public final csParser.explicit_anonymous_function_signature_return explicit_anonymous_function_signature() throws RecognitionException {
        csParser.explicit_anonymous_function_signature_return retval = new csParser.explicit_anonymous_function_signature_return();
        retval.start = input.LT(1);

        int explicit_anonymous_function_signature_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal212=null;
        Token char_literal214=null;
        csParser.explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list213 =null;


        Object char_literal212_tree=null;
        Object char_literal214_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:367:2: ( '(' ( explicit_anonymous_function_parameter_list )? ')' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:367:4: '(' ( explicit_anonymous_function_parameter_list )? ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal212=(Token)match(input,71,FOLLOW_71_in_explicit_anonymous_function_signature2013); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal212_tree = 
            (Object)adaptor.create(char_literal212)
            ;
            adaptor.addChild(root_0, char_literal212_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:367:10: ( explicit_anonymous_function_parameter_list )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==IDENTIFIER||LA58_0==98||(LA58_0 >= 100 && LA58_0 <= 101)||(LA58_0 >= 103 && LA58_0 <= 104)||LA58_0==106||(LA58_0 >= 108 && LA58_0 <= 109)||LA58_0==111||LA58_0==116||LA58_0==119||(LA58_0 >= 121 && LA58_0 <= 122)||LA58_0==124||LA58_0==128||LA58_0==131||LA58_0==134||LA58_0==137||LA58_0==140||LA58_0==143||(LA58_0 >= 145 && LA58_0 <= 146)||(LA58_0 >= 148 && LA58_0 <= 150)||(LA58_0 >= 153 && LA58_0 <= 154)||(LA58_0 >= 156 && LA58_0 <= 157)||LA58_0==159||LA58_0==162||LA58_0==164||(LA58_0 >= 168 && LA58_0 <= 169)||LA58_0==171||(LA58_0 >= 173 && LA58_0 <= 175)||LA58_0==179||LA58_0==185||(LA58_0 >= 187 && LA58_0 <= 188)||(LA58_0 >= 191 && LA58_0 <= 192)||LA58_0==194||LA58_0==196||LA58_0==198) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:367:10: explicit_anonymous_function_parameter_list
                    {
                    pushFollow(FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature2017);
                    explicit_anonymous_function_parameter_list213=explicit_anonymous_function_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_anonymous_function_parameter_list213.getTree());

                    }
                    break;

            }


            char_literal214=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_explicit_anonymous_function_signature2022); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal214_tree = 
            (Object)adaptor.create(char_literal214)
            ;
            adaptor.addChild(root_0, char_literal214_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 52, explicit_anonymous_function_signature_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_signature"


    public static class explicit_anonymous_function_parameter_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_anonymous_function_parameter_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:370:1: explicit_anonymous_function_parameter_list : explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )* ;
    public final csParser.explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list() throws RecognitionException {
        csParser.explicit_anonymous_function_parameter_list_return retval = new csParser.explicit_anonymous_function_parameter_list_return();
        retval.start = input.LT(1);

        int explicit_anonymous_function_parameter_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal216=null;
        csParser.explicit_anonymous_function_parameter_return explicit_anonymous_function_parameter215 =null;

        csParser.explicit_anonymous_function_parameter_return explicit_anonymous_function_parameter217 =null;


        Object char_literal216_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:371:2: ( explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:371:4: explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2033);
            explicit_anonymous_function_parameter215=explicit_anonymous_function_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_anonymous_function_parameter215.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:371:44: ( ',' explicit_anonymous_function_parameter )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==77) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:371:45: ',' explicit_anonymous_function_parameter
            	    {
            	    char_literal216=(Token)match(input,77,FOLLOW_77_in_explicit_anonymous_function_parameter_list2038); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal216_tree = 
            	    (Object)adaptor.create(char_literal216)
            	    ;
            	    adaptor.addChild(root_0, char_literal216_tree);
            	    }

            	    pushFollow(FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2042);
            	    explicit_anonymous_function_parameter217=explicit_anonymous_function_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_anonymous_function_parameter217.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 53, explicit_anonymous_function_parameter_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_parameter_list"


    public static class explicit_anonymous_function_parameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_anonymous_function_parameter"
    // CodeR.CSharp.Parser/src/antlr/cs.g:374:1: explicit_anonymous_function_parameter : ( anonymous_function_parameter_modifier )? type identifier ;
    public final csParser.explicit_anonymous_function_parameter_return explicit_anonymous_function_parameter() throws RecognitionException {
        csParser.explicit_anonymous_function_parameter_return retval = new csParser.explicit_anonymous_function_parameter_return();
        retval.start = input.LT(1);

        int explicit_anonymous_function_parameter_StartIndex = input.index();

        Object root_0 = null;

        csParser.anonymous_function_parameter_modifier_return anonymous_function_parameter_modifier218 =null;

        csParser.type_return type219 =null;

        csParser.identifier_return identifier220 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:375:2: ( ( anonymous_function_parameter_modifier )? type identifier )
            // CodeR.CSharp.Parser/src/antlr/cs.g:375:4: ( anonymous_function_parameter_modifier )? type identifier
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:375:4: ( anonymous_function_parameter_modifier )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==157||LA60_0==168) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:375:4: anonymous_function_parameter_modifier
                    {
                    pushFollow(FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter2055);
                    anonymous_function_parameter_modifier218=anonymous_function_parameter_modifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_function_parameter_modifier218.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_type_in_explicit_anonymous_function_parameter2060);
            type219=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type219.getTree());

            pushFollow(FOLLOW_identifier_in_explicit_anonymous_function_parameter2064);
            identifier220=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier220.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 54, explicit_anonymous_function_parameter_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_parameter"


    public static class anonymous_function_parameter_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "anonymous_function_parameter_modifier"
    // CodeR.CSharp.Parser/src/antlr/cs.g:378:1: anonymous_function_parameter_modifier : ( 'ref' | 'out' );
    public final csParser.anonymous_function_parameter_modifier_return anonymous_function_parameter_modifier() throws RecognitionException {
        csParser.anonymous_function_parameter_modifier_return retval = new csParser.anonymous_function_parameter_modifier_return();
        retval.start = input.LT(1);

        int anonymous_function_parameter_modifier_StartIndex = input.index();

        Object root_0 = null;

        Token set221=null;

        Object set221_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:379:2: ( 'ref' | 'out' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:
            {
            root_0 = (Object)adaptor.nil();


            set221=(Token)input.LT(1);

            if ( input.LA(1)==157||input.LA(1)==168 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set221)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 55, anonymous_function_parameter_modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "anonymous_function_parameter_modifier"


    public static class object_creation_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_creation_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:384:1: object_creation_expression : type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) ;
    public final csParser.object_creation_expression_return object_creation_expression() throws RecognitionException {
        csParser.object_creation_expression_return retval = new csParser.object_creation_expression_return();
        retval.start = input.LT(1);

        int object_creation_expression_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal223=null;
        Token char_literal225=null;
        csParser.type_return type222 =null;

        csParser.argument_list_return argument_list224 =null;

        csParser.object_or_collection_initializer_return object_or_collection_initializer226 =null;

        csParser.object_or_collection_initializer_return object_or_collection_initializer227 =null;


        Object char_literal223_tree=null;
        Object char_literal225_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:384:27: ( type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:386:2: type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_in_object_creation_expression2094);
            type222=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type222.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:387:3: ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==71) ) {
                alt63=1;
            }
            else if ( (LA63_0==199) ) {
                alt63=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;

            }
            switch (alt63) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:388:4: '(' ( argument_list )? ')' ( object_or_collection_initializer )?
                    {
                    char_literal223=(Token)match(input,71,FOLLOW_71_in_object_creation_expression2106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal223_tree = 
                    (Object)adaptor.create(char_literal223)
                    ;
                    adaptor.addChild(root_0, char_literal223_tree);
                    }

                    // CodeR.CSharp.Parser/src/antlr/cs.g:388:10: ( argument_list )?
                    int alt61=2;
                    int LA61_0 = input.LA(1);

                    if ( (LA61_0==Character_literal||LA61_0==FALSE||(LA61_0 >= Hex_number && LA61_0 <= IDENTIFIER)||(LA61_0 >= MINUS && LA61_0 <= NUMBER)||LA61_0==Real_literal||LA61_0==STRINGLITERAL||LA61_0==TRUE||LA61_0==Verbatim_string_literal||LA61_0==64||LA61_0==69||(LA61_0 >= 71 && LA61_0 <= 72)||(LA61_0 >= 74 && LA61_0 <= 75)||LA61_0==78||LA61_0==98||(LA61_0 >= 100 && LA61_0 <= 101)||(LA61_0 >= 103 && LA61_0 <= 106)||(LA61_0 >= 108 && LA61_0 <= 109)||(LA61_0 >= 111 && LA61_0 <= 112)||(LA61_0 >= 116 && LA61_0 <= 119)||(LA61_0 >= 121 && LA61_0 <= 122)||LA61_0==124||LA61_0==128||LA61_0==131||LA61_0==134||LA61_0==137||LA61_0==140||LA61_0==143||(LA61_0 >= 145 && LA61_0 <= 146)||(LA61_0 >= 148 && LA61_0 <= 150)||(LA61_0 >= 152 && LA61_0 <= 154)||(LA61_0 >= 156 && LA61_0 <= 157)||LA61_0==159||LA61_0==162||LA61_0==164||(LA61_0 >= 168 && LA61_0 <= 169)||LA61_0==171||(LA61_0 >= 173 && LA61_0 <= 176)||LA61_0==179||LA61_0==182||(LA61_0 >= 185 && LA61_0 <= 189)||(LA61_0 >= 191 && LA61_0 <= 192)||LA61_0==196||LA61_0==198||LA61_0==204) ) {
                        alt61=1;
                    }
                    switch (alt61) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:388:10: argument_list
                            {
                            pushFollow(FOLLOW_argument_list_in_object_creation_expression2110);
                            argument_list224=argument_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_list224.getTree());

                            }
                            break;

                    }


                    char_literal225=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_object_creation_expression2115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal225_tree = 
                    (Object)adaptor.create(char_literal225)
                    ;
                    adaptor.addChild(root_0, char_literal225_tree);
                    }

                    // CodeR.CSharp.Parser/src/antlr/cs.g:388:33: ( object_or_collection_initializer )?
                    int alt62=2;
                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==199) ) {
                        alt62=1;
                    }
                    switch (alt62) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:388:33: object_or_collection_initializer
                            {
                            pushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression2119);
                            object_or_collection_initializer226=object_or_collection_initializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, object_or_collection_initializer226.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:389:5: object_or_collection_initializer
                    {
                    pushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression2128);
                    object_or_collection_initializer227=object_or_collection_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_or_collection_initializer227.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 56, object_creation_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "object_creation_expression"


    public static class object_or_collection_initializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_or_collection_initializer"
    // CodeR.CSharp.Parser/src/antlr/cs.g:393:1: object_or_collection_initializer : '{' ( object_initializer | collection_initializer ) ;
    public final csParser.object_or_collection_initializer_return object_or_collection_initializer() throws RecognitionException {
        csParser.object_or_collection_initializer_return retval = new csParser.object_or_collection_initializer_return();
        retval.start = input.LT(1);

        int object_or_collection_initializer_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal228=null;
        csParser.object_initializer_return object_initializer229 =null;

        csParser.collection_initializer_return collection_initializer230 =null;


        Object char_literal228_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:394:2: ( '{' ( object_initializer | collection_initializer ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:394:4: '{' ( object_initializer | collection_initializer )
            {
            root_0 = (Object)adaptor.nil();


            char_literal228=(Token)match(input,199,FOLLOW_199_in_object_or_collection_initializer2144); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal228_tree = 
            (Object)adaptor.create(char_literal228)
            ;
            adaptor.addChild(root_0, char_literal228_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:394:9: ( object_initializer | collection_initializer )
            int alt64=2;
            switch ( input.LA(1) ) {
            case 134:
                {
                int LA64_1 = input.LA(2);

                if ( (LA64_1==88) ) {
                    alt64=1;
                }
                else if ( (LA64_1==DOT||LA64_1==GT||LA64_1==IDENTIFIER||LA64_1==MINUS||LA64_1==PTR||(LA64_1 >= 65 && LA64_1 <= 66)||(LA64_1 >= 68 && LA64_1 <= 69)||(LA64_1 >= 71 && LA64_1 <= 72)||(LA64_1 >= 74 && LA64_1 <= 75)||(LA64_1 >= 77 && LA64_1 <= 78)||LA64_1==80||(LA64_1 >= 83 && LA64_1 <= 85)||LA64_1==87||(LA64_1 >= 89 && LA64_1 <= 94)||LA64_1==96||LA64_1==98||(LA64_1 >= 100 && LA64_1 <= 104)||LA64_1==106||(LA64_1 >= 108 && LA64_1 <= 109)||LA64_1==111||LA64_1==116||LA64_1==119||(LA64_1 >= 121 && LA64_1 <= 122)||LA64_1==124||LA64_1==128||LA64_1==131||LA64_1==134||LA64_1==137||LA64_1==140||(LA64_1 >= 143 && LA64_1 <= 146)||(LA64_1 >= 148 && LA64_1 <= 150)||(LA64_1 >= 153 && LA64_1 <= 154)||LA64_1==156||LA64_1==159||LA64_1==162||LA64_1==164||LA64_1==169||LA64_1==171||(LA64_1 >= 173 && LA64_1 <= 175)||LA64_1==179||LA64_1==185||(LA64_1 >= 187 && LA64_1 <= 188)||(LA64_1 >= 191 && LA64_1 <= 192)||LA64_1==194||LA64_1==196||LA64_1==198||LA64_1==200||(LA64_1 >= 202 && LA64_1 <= 203)) ) {
                    alt64=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 64, 1, input);

                    throw nvae;

                }
                }
                break;
            case 77:
            case 203:
                {
                alt64=1;
                }
                break;
            case Character_literal:
            case FALSE:
            case Hex_number:
            case MINUS:
            case NULL:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            case 64:
            case 69:
            case 71:
            case 72:
            case 74:
            case 75:
            case 78:
            case 105:
            case 106:
            case 109:
            case 111:
            case 112:
            case 116:
            case 117:
            case 118:
            case 121:
            case 131:
            case 140:
            case 148:
            case 152:
            case 153:
            case 171:
            case 175:
            case 176:
            case 179:
            case 182:
            case 186:
            case 187:
            case 188:
            case 189:
            case 191:
            case 199:
            case 204:
                {
                alt64=2;
                }
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
                {
                int LA64_4 = input.LA(2);

                if ( (LA64_4==88) ) {
                    alt64=1;
                }
                else if ( (LA64_4==DOT||LA64_4==GT||LA64_4==MINUS||LA64_4==PTR||(LA64_4 >= 65 && LA64_4 <= 66)||(LA64_4 >= 68 && LA64_4 <= 69)||(LA64_4 >= 71 && LA64_4 <= 72)||(LA64_4 >= 74 && LA64_4 <= 75)||(LA64_4 >= 77 && LA64_4 <= 78)||LA64_4==80||(LA64_4 >= 83 && LA64_4 <= 85)||LA64_4==87||(LA64_4 >= 89 && LA64_4 <= 94)||LA64_4==96||LA64_4==102||LA64_4==144||LA64_4==200||(LA64_4 >= 202 && LA64_4 <= 203)) ) {
                    alt64=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 64, 4, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;

            }

            switch (alt64) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:394:10: object_initializer
                    {
                    pushFollow(FOLLOW_object_initializer_in_object_or_collection_initializer2148);
                    object_initializer229=object_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_initializer229.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:395:4: collection_initializer
                    {
                    pushFollow(FOLLOW_collection_initializer_in_object_or_collection_initializer2154);
                    collection_initializer230=collection_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, collection_initializer230.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 57, object_or_collection_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "object_or_collection_initializer"


    public static class collection_initializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "collection_initializer"
    // CodeR.CSharp.Parser/src/antlr/cs.g:399:1: collection_initializer : element_initializer_list ( ',' )? '}' ;
    public final csParser.collection_initializer_return collection_initializer() throws RecognitionException {
        csParser.collection_initializer_return retval = new csParser.collection_initializer_return();
        retval.start = input.LT(1);

        int collection_initializer_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal232=null;
        Token char_literal233=null;
        csParser.element_initializer_list_return element_initializer_list231 =null;


        Object char_literal232_tree=null;
        Object char_literal233_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:400:2: ( element_initializer_list ( ',' )? '}' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:400:4: element_initializer_list ( ',' )? '}'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_element_initializer_list_in_collection_initializer2168);
            element_initializer_list231=element_initializer_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_initializer_list231.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:400:31: ( ',' )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==77) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:400:31: ','
                    {
                    char_literal232=(Token)match(input,77,FOLLOW_77_in_collection_initializer2172); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal232_tree = 
                    (Object)adaptor.create(char_literal232)
                    ;
                    adaptor.addChild(root_0, char_literal232_tree);
                    }

                    }
                    break;

            }


            char_literal233=(Token)match(input,203,FOLLOW_203_in_collection_initializer2177); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal233_tree = 
            (Object)adaptor.create(char_literal233)
            ;
            adaptor.addChild(root_0, char_literal233_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 58, collection_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "collection_initializer"


    public static class element_initializer_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_initializer_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:403:1: element_initializer_list : element_initializer ( ',' element_initializer )* ;
    public final csParser.element_initializer_list_return element_initializer_list() throws RecognitionException {
        csParser.element_initializer_list_return retval = new csParser.element_initializer_list_return();
        retval.start = input.LT(1);

        int element_initializer_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal235=null;
        csParser.element_initializer_return element_initializer234 =null;

        csParser.element_initializer_return element_initializer236 =null;


        Object char_literal235_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:404:2: ( element_initializer ( ',' element_initializer )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:404:4: element_initializer ( ',' element_initializer )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_element_initializer_in_element_initializer_list2188);
            element_initializer234=element_initializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_initializer234.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:404:25: ( ',' element_initializer )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==77) ) {
                    int LA66_1 = input.LA(2);

                    if ( (LA66_1==Character_literal||LA66_1==FALSE||(LA66_1 >= Hex_number && LA66_1 <= IDENTIFIER)||(LA66_1 >= MINUS && LA66_1 <= NUMBER)||LA66_1==Real_literal||LA66_1==STRINGLITERAL||LA66_1==TRUE||LA66_1==Verbatim_string_literal||LA66_1==64||LA66_1==69||(LA66_1 >= 71 && LA66_1 <= 72)||(LA66_1 >= 74 && LA66_1 <= 75)||LA66_1==78||LA66_1==98||(LA66_1 >= 100 && LA66_1 <= 101)||(LA66_1 >= 103 && LA66_1 <= 106)||(LA66_1 >= 108 && LA66_1 <= 109)||(LA66_1 >= 111 && LA66_1 <= 112)||(LA66_1 >= 116 && LA66_1 <= 119)||(LA66_1 >= 121 && LA66_1 <= 122)||LA66_1==124||LA66_1==128||LA66_1==131||LA66_1==134||LA66_1==137||LA66_1==140||LA66_1==143||(LA66_1 >= 145 && LA66_1 <= 146)||(LA66_1 >= 148 && LA66_1 <= 150)||(LA66_1 >= 152 && LA66_1 <= 154)||LA66_1==156||LA66_1==159||LA66_1==162||LA66_1==164||LA66_1==169||LA66_1==171||(LA66_1 >= 173 && LA66_1 <= 176)||LA66_1==179||LA66_1==182||(LA66_1 >= 185 && LA66_1 <= 189)||(LA66_1 >= 191 && LA66_1 <= 192)||LA66_1==196||(LA66_1 >= 198 && LA66_1 <= 199)||LA66_1==204) ) {
                        alt66=1;
                    }


                }


                switch (alt66) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:404:26: ',' element_initializer
            	    {
            	    char_literal235=(Token)match(input,77,FOLLOW_77_in_element_initializer_list2192); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal235_tree = 
            	    (Object)adaptor.create(char_literal235)
            	    ;
            	    adaptor.addChild(root_0, char_literal235_tree);
            	    }

            	    pushFollow(FOLLOW_element_initializer_in_element_initializer_list2194);
            	    element_initializer236=element_initializer();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_initializer236.getTree());

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 59, element_initializer_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "element_initializer_list"


    public static class element_initializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_initializer"
    // CodeR.CSharp.Parser/src/antlr/cs.g:407:1: element_initializer : ( non_assignment_expression | '{' expression_list '}' );
    public final csParser.element_initializer_return element_initializer() throws RecognitionException {
        csParser.element_initializer_return retval = new csParser.element_initializer_return();
        retval.start = input.LT(1);

        int element_initializer_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal238=null;
        Token char_literal240=null;
        csParser.non_assignment_expression_return non_assignment_expression237 =null;

        csParser.expression_list_return expression_list239 =null;


        Object char_literal238_tree=null;
        Object char_literal240_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:408:2: ( non_assignment_expression | '{' expression_list '}' )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==Character_literal||LA67_0==FALSE||(LA67_0 >= Hex_number && LA67_0 <= IDENTIFIER)||(LA67_0 >= MINUS && LA67_0 <= NUMBER)||LA67_0==Real_literal||LA67_0==STRINGLITERAL||LA67_0==TRUE||LA67_0==Verbatim_string_literal||LA67_0==64||LA67_0==69||(LA67_0 >= 71 && LA67_0 <= 72)||(LA67_0 >= 74 && LA67_0 <= 75)||LA67_0==78||LA67_0==98||(LA67_0 >= 100 && LA67_0 <= 101)||(LA67_0 >= 103 && LA67_0 <= 106)||(LA67_0 >= 108 && LA67_0 <= 109)||(LA67_0 >= 111 && LA67_0 <= 112)||(LA67_0 >= 116 && LA67_0 <= 119)||(LA67_0 >= 121 && LA67_0 <= 122)||LA67_0==124||LA67_0==128||LA67_0==131||LA67_0==134||LA67_0==137||LA67_0==140||LA67_0==143||(LA67_0 >= 145 && LA67_0 <= 146)||(LA67_0 >= 148 && LA67_0 <= 150)||(LA67_0 >= 152 && LA67_0 <= 154)||LA67_0==156||LA67_0==159||LA67_0==162||LA67_0==164||LA67_0==169||LA67_0==171||(LA67_0 >= 173 && LA67_0 <= 176)||LA67_0==179||LA67_0==182||(LA67_0 >= 185 && LA67_0 <= 189)||(LA67_0 >= 191 && LA67_0 <= 192)||LA67_0==196||LA67_0==198||LA67_0==204) ) {
                alt67=1;
            }
            else if ( (LA67_0==199) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;

            }
            switch (alt67) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:408:4: non_assignment_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_non_assignment_expression_in_element_initializer2207);
                    non_assignment_expression237=non_assignment_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, non_assignment_expression237.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:409:4: '{' expression_list '}'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal238=(Token)match(input,199,FOLLOW_199_in_element_initializer2213); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal238_tree = 
                    (Object)adaptor.create(char_literal238)
                    ;
                    adaptor.addChild(root_0, char_literal238_tree);
                    }

                    pushFollow(FOLLOW_expression_list_in_element_initializer2217);
                    expression_list239=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list239.getTree());

                    char_literal240=(Token)match(input,203,FOLLOW_203_in_element_initializer2221); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal240_tree = 
                    (Object)adaptor.create(char_literal240)
                    ;
                    adaptor.addChild(root_0, char_literal240_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 60, element_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "element_initializer"


    public static class object_initializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_initializer"
    // CodeR.CSharp.Parser/src/antlr/cs.g:418:1: object_initializer : ( member_initializer_list )? ( ',' )? '}' ;
    public final csParser.object_initializer_return object_initializer() throws RecognitionException {
        csParser.object_initializer_return retval = new csParser.object_initializer_return();
        retval.start = input.LT(1);

        int object_initializer_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal242=null;
        Token char_literal243=null;
        csParser.member_initializer_list_return member_initializer_list241 =null;


        Object char_literal242_tree=null;
        Object char_literal243_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:419:2: ( ( member_initializer_list )? ( ',' )? '}' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:419:4: ( member_initializer_list )? ( ',' )? '}'
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:419:4: ( member_initializer_list )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==IDENTIFIER||LA68_0==98||(LA68_0 >= 100 && LA68_0 <= 101)||(LA68_0 >= 103 && LA68_0 <= 104)||LA68_0==108||LA68_0==119||LA68_0==122||LA68_0==124||LA68_0==128||LA68_0==134||LA68_0==137||LA68_0==143||(LA68_0 >= 145 && LA68_0 <= 146)||(LA68_0 >= 149 && LA68_0 <= 150)||LA68_0==154||LA68_0==156||LA68_0==159||LA68_0==162||LA68_0==164||LA68_0==169||(LA68_0 >= 173 && LA68_0 <= 174)||LA68_0==185||LA68_0==192||LA68_0==196||LA68_0==198) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:419:4: member_initializer_list
                    {
                    pushFollow(FOLLOW_member_initializer_list_in_object_initializer2238);
                    member_initializer_list241=member_initializer_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, member_initializer_list241.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:419:31: ( ',' )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==77) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:419:31: ','
                    {
                    char_literal242=(Token)match(input,77,FOLLOW_77_in_object_initializer2243); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal242_tree = 
                    (Object)adaptor.create(char_literal242)
                    ;
                    adaptor.addChild(root_0, char_literal242_tree);
                    }

                    }
                    break;

            }


            char_literal243=(Token)match(input,203,FOLLOW_203_in_object_initializer2248); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal243_tree = 
            (Object)adaptor.create(char_literal243)
            ;
            adaptor.addChild(root_0, char_literal243_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 61, object_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "object_initializer"


    public static class member_initializer_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "member_initializer_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:422:1: member_initializer_list : member_initializer ( ',' member_initializer ) ;
    public final csParser.member_initializer_list_return member_initializer_list() throws RecognitionException {
        csParser.member_initializer_list_return retval = new csParser.member_initializer_list_return();
        retval.start = input.LT(1);

        int member_initializer_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal245=null;
        csParser.member_initializer_return member_initializer244 =null;

        csParser.member_initializer_return member_initializer246 =null;


        Object char_literal245_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:423:2: ( member_initializer ( ',' member_initializer ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:423:4: member_initializer ( ',' member_initializer )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_member_initializer_in_member_initializer_list2259);
            member_initializer244=member_initializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, member_initializer244.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:423:24: ( ',' member_initializer )
            // CodeR.CSharp.Parser/src/antlr/cs.g:423:25: ',' member_initializer
            {
            char_literal245=(Token)match(input,77,FOLLOW_77_in_member_initializer_list2263); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal245_tree = 
            (Object)adaptor.create(char_literal245)
            ;
            adaptor.addChild(root_0, char_literal245_tree);
            }

            pushFollow(FOLLOW_member_initializer_in_member_initializer_list2265);
            member_initializer246=member_initializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, member_initializer246.getTree());

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 62, member_initializer_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "member_initializer_list"


    public static class member_initializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "member_initializer"
    // CodeR.CSharp.Parser/src/antlr/cs.g:426:1: member_initializer : identifier '=' initializer_value ;
    public final csParser.member_initializer_return member_initializer() throws RecognitionException {
        csParser.member_initializer_return retval = new csParser.member_initializer_return();
        retval.start = input.LT(1);

        int member_initializer_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal248=null;
        csParser.identifier_return identifier247 =null;

        csParser.initializer_value_return initializer_value249 =null;


        Object char_literal248_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:427:2: ( identifier '=' initializer_value )
            // CodeR.CSharp.Parser/src/antlr/cs.g:427:4: identifier '=' initializer_value
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_member_initializer2278);
            identifier247=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier247.getTree());

            char_literal248=(Token)match(input,88,FOLLOW_88_in_member_initializer2282); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal248_tree = 
            (Object)adaptor.create(char_literal248)
            ;
            adaptor.addChild(root_0, char_literal248_tree);
            }

            pushFollow(FOLLOW_initializer_value_in_member_initializer2286);
            initializer_value249=initializer_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, initializer_value249.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 63, member_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "member_initializer"


    public static class initializer_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "initializer_value"
    // CodeR.CSharp.Parser/src/antlr/cs.g:430:1: initializer_value : ( expression | object_or_collection_initializer );
    public final csParser.initializer_value_return initializer_value() throws RecognitionException {
        csParser.initializer_value_return retval = new csParser.initializer_value_return();
        retval.start = input.LT(1);

        int initializer_value_StartIndex = input.index();

        Object root_0 = null;

        csParser.expression_return expression250 =null;

        csParser.object_or_collection_initializer_return object_or_collection_initializer251 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:431:2: ( expression | object_or_collection_initializer )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==Character_literal||LA70_0==FALSE||(LA70_0 >= Hex_number && LA70_0 <= IDENTIFIER)||(LA70_0 >= MINUS && LA70_0 <= NUMBER)||LA70_0==Real_literal||LA70_0==STRINGLITERAL||LA70_0==TRUE||LA70_0==Verbatim_string_literal||LA70_0==64||LA70_0==69||(LA70_0 >= 71 && LA70_0 <= 72)||(LA70_0 >= 74 && LA70_0 <= 75)||LA70_0==78||LA70_0==98||(LA70_0 >= 100 && LA70_0 <= 101)||(LA70_0 >= 103 && LA70_0 <= 106)||(LA70_0 >= 108 && LA70_0 <= 109)||(LA70_0 >= 111 && LA70_0 <= 112)||(LA70_0 >= 116 && LA70_0 <= 119)||(LA70_0 >= 121 && LA70_0 <= 122)||LA70_0==124||LA70_0==128||LA70_0==131||LA70_0==134||LA70_0==137||LA70_0==140||LA70_0==143||(LA70_0 >= 145 && LA70_0 <= 146)||(LA70_0 >= 148 && LA70_0 <= 150)||(LA70_0 >= 152 && LA70_0 <= 154)||LA70_0==156||LA70_0==159||LA70_0==162||LA70_0==164||LA70_0==169||LA70_0==171||(LA70_0 >= 173 && LA70_0 <= 176)||LA70_0==179||LA70_0==182||(LA70_0 >= 185 && LA70_0 <= 189)||(LA70_0 >= 191 && LA70_0 <= 192)||LA70_0==196||LA70_0==198||LA70_0==204) ) {
                alt70=1;
            }
            else if ( (LA70_0==199) ) {
                alt70=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;

            }
            switch (alt70) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:431:4: expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expression_in_initializer_value2297);
                    expression250=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression250.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:432:4: object_or_collection_initializer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_or_collection_initializer_in_initializer_value2303);
                    object_or_collection_initializer251=object_or_collection_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_or_collection_initializer251.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 64, initializer_value_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "initializer_value"


    public static class typeof_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:437:1: typeof_expression : 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')' ;
    public final csParser.typeof_expression_return typeof_expression() throws RecognitionException {
        csParser.typeof_expression_return retval = new csParser.typeof_expression_return();
        retval.start = input.LT(1);

        int typeof_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal252=null;
        Token char_literal253=null;
        Token string_literal256=null;
        Token char_literal257=null;
        csParser.unbound_type_name_return unbound_type_name254 =null;

        csParser.type_return type255 =null;


        Object string_literal252_tree=null;
        Object char_literal253_tree=null;
        Object string_literal256_tree=null;
        Object char_literal257_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:437:18: ( 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:438:2: 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal252=(Token)match(input,186,FOLLOW_186_in_typeof_expression2316); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal252_tree = 
            (Object)adaptor.create(string_literal252)
            ;
            adaptor.addChild(root_0, string_literal252_tree);
            }

            char_literal253=(Token)match(input,71,FOLLOW_71_in_typeof_expression2320); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal253_tree = 
            (Object)adaptor.create(char_literal253)
            ;
            adaptor.addChild(root_0, char_literal253_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:438:19: ( ( unbound_type_name )=> unbound_type_name | type | 'void' )
            int alt71=3;
            alt71 = dfa71.predict(input);
            switch (alt71) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:438:20: ( unbound_type_name )=> unbound_type_name
                    {
                    pushFollow(FOLLOW_unbound_type_name_in_typeof_expression2331);
                    unbound_type_name254=unbound_type_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unbound_type_name254.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:439:10: type
                    {
                    pushFollow(FOLLOW_type_in_typeof_expression2342);
                    type255=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type255.getTree());

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:440:10: 'void'
                    {
                    string_literal256=(Token)match(input,194,FOLLOW_194_in_typeof_expression2354); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal256_tree = 
                    (Object)adaptor.create(string_literal256)
                    ;
                    adaptor.addChild(root_0, string_literal256_tree);
                    }

                    }
                    break;

            }


            char_literal257=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_typeof_expression2359); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal257_tree = 
            (Object)adaptor.create(char_literal257)
            ;
            adaptor.addChild(root_0, char_literal257_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 65, typeof_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "typeof_expression"


    public static class unbound_type_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unbound_type_name"
    // CodeR.CSharp.Parser/src/antlr/cs.g:445:1: unbound_type_name : unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier ;
    public final csParser.unbound_type_name_return unbound_type_name() throws RecognitionException {
        csParser.unbound_type_name_return retval = new csParser.unbound_type_name_return();
        retval.start = input.LT(1);

        int unbound_type_name_StartIndex = input.index();

        Object root_0 = null;

        csParser.unbound_type_name_start_return unbound_type_name_start258 =null;

        csParser.generic_dimension_specifier_return generic_dimension_specifier259 =null;

        csParser.unbound_type_name_part_return unbound_type_name_part260 =null;

        csParser.unbound_type_name_part_return unbound_type_name_part261 =null;

        csParser.generic_dimension_specifier_return generic_dimension_specifier262 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:445:18: ( unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier )
            // CodeR.CSharp.Parser/src/antlr/cs.g:447:2: unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_unbound_type_name_start_in_unbound_type_name2374);
            unbound_type_name_start258=unbound_type_name_start();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unbound_type_name_start258.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:448:3: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*
            loop72:
            do {
                int alt72=3;
                alt72 = dfa72.predict(input);
                switch (alt72) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:448:4: ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part )
            	    {
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:448:4: ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part )
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:448:5: ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part
            	    {
            	    pushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name2393);
            	    generic_dimension_specifier259=generic_dimension_specifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_dimension_specifier259.getTree());

            	    pushFollow(FOLLOW_unbound_type_name_part_in_unbound_type_name2397);
            	    unbound_type_name_part260=unbound_type_name_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unbound_type_name_part260.getTree());

            	    }


            	    }
            	    break;
            	case 2 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:449:5: unbound_type_name_part
            	    {
            	    pushFollow(FOLLOW_unbound_type_name_part_in_unbound_type_name2404);
            	    unbound_type_name_part261=unbound_type_name_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unbound_type_name_part261.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            pushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name2414);
            generic_dimension_specifier262=generic_dimension_specifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_dimension_specifier262.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 66, unbound_type_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unbound_type_name"


    public static class unbound_type_name_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unbound_type_name_start"
    // CodeR.CSharp.Parser/src/antlr/cs.g:453:1: unbound_type_name_start : identifier ( '::' identifier )? ;
    public final csParser.unbound_type_name_start_return unbound_type_name_start() throws RecognitionException {
        csParser.unbound_type_name_start_return retval = new csParser.unbound_type_name_start_return();
        retval.start = input.LT(1);

        int unbound_type_name_start_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal264=null;
        csParser.identifier_return identifier263 =null;

        csParser.identifier_return identifier265 =null;


        Object string_literal264_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:453:24: ( identifier ( '::' identifier )? )
            // CodeR.CSharp.Parser/src/antlr/cs.g:454:2: identifier ( '::' identifier )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_unbound_type_name_start2424);
            identifier263=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier263.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:454:13: ( '::' identifier )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==83) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:454:14: '::' identifier
                    {
                    string_literal264=(Token)match(input,83,FOLLOW_83_in_unbound_type_name_start2427); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal264_tree = 
                    (Object)adaptor.create(string_literal264)
                    ;
                    adaptor.addChild(root_0, string_literal264_tree);
                    }

                    pushFollow(FOLLOW_identifier_in_unbound_type_name_start2429);
                    identifier265=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier265.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 67, unbound_type_name_start_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unbound_type_name_start"


    public static class unbound_type_name_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unbound_type_name_part"
    // CodeR.CSharp.Parser/src/antlr/cs.g:455:1: unbound_type_name_part : '.' identifier ;
    public final csParser.unbound_type_name_part_return unbound_type_name_part() throws RecognitionException {
        csParser.unbound_type_name_part_return retval = new csParser.unbound_type_name_part_return();
        retval.start = input.LT(1);

        int unbound_type_name_part_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal266=null;
        csParser.identifier_return identifier267 =null;


        Object char_literal266_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:455:23: ( '.' identifier )
            // CodeR.CSharp.Parser/src/antlr/cs.g:456:2: '.' identifier
            {
            root_0 = (Object)adaptor.nil();


            char_literal266=(Token)match(input,DOT,FOLLOW_DOT_in_unbound_type_name_part2438); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal266_tree = 
            (Object)adaptor.create(char_literal266)
            ;
            adaptor.addChild(root_0, char_literal266_tree);
            }

            pushFollow(FOLLOW_identifier_in_unbound_type_name_part2442);
            identifier267=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier267.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 68, unbound_type_name_part_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unbound_type_name_part"


    public static class generic_dimension_specifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic_dimension_specifier"
    // CodeR.CSharp.Parser/src/antlr/cs.g:457:1: generic_dimension_specifier : '<' ( commas )? '>' ;
    public final csParser.generic_dimension_specifier_return generic_dimension_specifier() throws RecognitionException {
        csParser.generic_dimension_specifier_return retval = new csParser.generic_dimension_specifier_return();
        retval.start = input.LT(1);

        int generic_dimension_specifier_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal268=null;
        Token char_literal270=null;
        csParser.commas_return commas269 =null;


        Object char_literal268_tree=null;
        Object char_literal270_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:457:28: ( '<' ( commas )? '>' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:458:2: '<' ( commas )? '>'
            {
            root_0 = (Object)adaptor.nil();


            char_literal268=(Token)match(input,84,FOLLOW_84_in_generic_dimension_specifier2450); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal268_tree = 
            (Object)adaptor.create(char_literal268)
            ;
            adaptor.addChild(root_0, char_literal268_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:458:8: ( commas )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==77) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:458:8: commas
                    {
                    pushFollow(FOLLOW_commas_in_generic_dimension_specifier2454);
                    commas269=commas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commas269.getTree());

                    }
                    break;

            }


            char_literal270=(Token)match(input,GT,FOLLOW_GT_in_generic_dimension_specifier2459); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal270_tree = 
            (Object)adaptor.create(char_literal270)
            ;
            adaptor.addChild(root_0, char_literal270_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 69, generic_dimension_specifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "generic_dimension_specifier"


    public static class commas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "commas"
    // CodeR.CSharp.Parser/src/antlr/cs.g:459:1: commas : ( ',' )+ ;
    public final csParser.commas_return commas() throws RecognitionException {
        csParser.commas_return retval = new csParser.commas_return();
        retval.start = input.LT(1);

        int commas_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal271=null;

        Object char_literal271_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:459:7: ( ( ',' )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:460:2: ( ',' )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:460:2: ( ',' )+
            int cnt75=0;
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==77) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:460:2: ','
            	    {
            	    char_literal271=(Token)match(input,77,FOLLOW_77_in_commas2468); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal271_tree = 
            	    (Object)adaptor.create(char_literal271)
            	    ;
            	    adaptor.addChild(root_0, char_literal271_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt75 >= 1 ) break loop75;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(75, input);
                        throw eee;
                }
                cnt75++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 70, commas_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "commas"


    public static class type_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_name"
    // CodeR.CSharp.Parser/src/antlr/cs.g:466:1: type_name : namespace_or_type_name ;
    public final csParser.type_name_return type_name() throws RecognitionException {
        csParser.type_name_return retval = new csParser.type_name_return();
        retval.start = input.LT(1);

        int type_name_StartIndex = input.index();

        Object root_0 = null;

        csParser.namespace_or_type_name_return namespace_or_type_name272 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:466:10: ( namespace_or_type_name )
            // CodeR.CSharp.Parser/src/antlr/cs.g:467:2: namespace_or_type_name
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_namespace_or_type_name_in_type_name2484);
            namespace_or_type_name272=namespace_or_type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_or_type_name272.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 71, type_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_name"


    public static class namespace_or_type_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "namespace_or_type_name"
    // CodeR.CSharp.Parser/src/antlr/cs.g:468:1: namespace_or_type_name : type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )* ;
    public final csParser.namespace_or_type_name_return namespace_or_type_name() throws RecognitionException {
        csParser.namespace_or_type_name_return retval = new csParser.namespace_or_type_name_return();
        retval.start = input.LT(1);

        int namespace_or_type_name_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal274=null;
        Token char_literal276=null;
        csParser.type_or_generic_return type_or_generic273 =null;

        csParser.type_or_generic_return type_or_generic275 =null;

        csParser.type_or_generic_return type_or_generic277 =null;


        Object string_literal274_tree=null;
        Object char_literal276_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:468:23: ( type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:469:3: type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_or_generic_in_namespace_or_type_name2493);
            type_or_generic273=type_or_generic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_or_generic273.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:469:21: ( '::' type_or_generic )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==83) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:469:22: '::' type_or_generic
                    {
                    string_literal274=(Token)match(input,83,FOLLOW_83_in_namespace_or_type_name2498); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal274_tree = 
                    (Object)adaptor.create(string_literal274)
                    ;
                    adaptor.addChild(root_0, string_literal274_tree);
                    }

                    pushFollow(FOLLOW_type_or_generic_in_namespace_or_type_name2500);
                    type_or_generic275=type_or_generic();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_or_generic275.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:469:45: ( '.' type_or_generic )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==DOT) ) {
                    int LA77_2 = input.LA(2);

                    if ( (LA77_2==IDENTIFIER||LA77_2==98||(LA77_2 >= 100 && LA77_2 <= 101)||(LA77_2 >= 103 && LA77_2 <= 104)||LA77_2==108||LA77_2==119||LA77_2==122||LA77_2==124||LA77_2==128||LA77_2==134||LA77_2==137||LA77_2==143||(LA77_2 >= 145 && LA77_2 <= 146)||(LA77_2 >= 149 && LA77_2 <= 150)||LA77_2==154||LA77_2==156||LA77_2==159||LA77_2==162||LA77_2==164||LA77_2==169||(LA77_2 >= 173 && LA77_2 <= 174)||LA77_2==185||LA77_2==192||LA77_2==196||LA77_2==198) ) {
                        alt77=1;
                    }


                }


                switch (alt77) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:469:46: '.' type_or_generic
            	    {
            	    char_literal276=(Token)match(input,DOT,FOLLOW_DOT_in_namespace_or_type_name2505); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal276_tree = 
            	    (Object)adaptor.create(char_literal276)
            	    ;
            	    adaptor.addChild(root_0, char_literal276_tree);
            	    }

            	    pushFollow(FOLLOW_type_or_generic_in_namespace_or_type_name2509);
            	    type_or_generic277=type_or_generic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_or_generic277.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 72, namespace_or_type_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "namespace_or_type_name"


    public static class type_or_generic_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_or_generic"
    // CodeR.CSharp.Parser/src/antlr/cs.g:470:1: type_or_generic : ( ( identifier '<' )=> identifier generic_argument_list | identifier );
    public final csParser.type_or_generic_return type_or_generic() throws RecognitionException {
        csParser.type_or_generic_return retval = new csParser.type_or_generic_return();
        retval.start = input.LT(1);

        int type_or_generic_StartIndex = input.index();

        Object root_0 = null;

        csParser.identifier_return identifier278 =null;

        csParser.generic_argument_list_return generic_argument_list279 =null;

        csParser.identifier_return identifier280 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:470:16: ( ( identifier '<' )=> identifier generic_argument_list | identifier )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==IDENTIFIER||LA78_0==98||(LA78_0 >= 100 && LA78_0 <= 101)||(LA78_0 >= 103 && LA78_0 <= 104)||LA78_0==108||LA78_0==119||LA78_0==122||LA78_0==124||LA78_0==128||LA78_0==134||LA78_0==137||LA78_0==143||(LA78_0 >= 145 && LA78_0 <= 146)||(LA78_0 >= 149 && LA78_0 <= 150)||LA78_0==154||LA78_0==156||LA78_0==159||LA78_0==162||LA78_0==164||LA78_0==169||(LA78_0 >= 173 && LA78_0 <= 174)||LA78_0==185||LA78_0==192||LA78_0==196||LA78_0==198) ) {
                int LA78_1 = input.LA(2);

                if ( (synpred15_cs()) ) {
                    alt78=1;
                }
                else if ( (true) ) {
                    alt78=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 78, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;

            }
            switch (alt78) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:471:2: ( identifier '<' )=> identifier generic_argument_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_type_or_generic2529);
                    identifier278=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier278.getTree());

                    pushFollow(FOLLOW_generic_argument_list_in_type_or_generic2533);
                    generic_argument_list279=generic_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_argument_list279.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:472:4: identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_type_or_generic2538);
                    identifier280=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier280.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 73, type_or_generic_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_or_generic"


    public static class qid_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qid"
    // CodeR.CSharp.Parser/src/antlr/cs.g:474:1: qid : qid_start ( qid_part )* ;
    public final csParser.qid_return qid() throws RecognitionException {
        csParser.qid_return retval = new csParser.qid_return();
        retval.start = input.LT(1);

        int qid_StartIndex = input.index();

        Object root_0 = null;

        csParser.qid_start_return qid_start281 =null;

        csParser.qid_part_return qid_part282 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:474:4: ( qid_start ( qid_part )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:475:2: qid_start ( qid_part )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_qid_start_in_qid2549);
            qid_start281=qid_start();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qid_start281.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:475:14: ( qid_part )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==DOT) ) {
                    int LA79_2 = input.LA(2);

                    if ( (LA79_2==IDENTIFIER||LA79_2==98||(LA79_2 >= 100 && LA79_2 <= 101)||(LA79_2 >= 103 && LA79_2 <= 104)||LA79_2==108||LA79_2==119||LA79_2==122||LA79_2==124||LA79_2==128||LA79_2==134||LA79_2==137||LA79_2==143||(LA79_2 >= 145 && LA79_2 <= 146)||(LA79_2 >= 149 && LA79_2 <= 150)||LA79_2==154||LA79_2==156||LA79_2==159||LA79_2==162||LA79_2==164||LA79_2==169||(LA79_2 >= 173 && LA79_2 <= 174)||LA79_2==185||LA79_2==192||LA79_2==196||LA79_2==198) ) {
                        alt79=1;
                    }


                }
                else if ( (LA79_0==PTR) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:475:14: qid_part
            	    {
            	    pushFollow(FOLLOW_qid_part_in_qid2553);
            	    qid_part282=qid_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qid_part282.getTree());

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 74, qid_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "qid"


    public static class qid_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qid_start"
    // CodeR.CSharp.Parser/src/antlr/cs.g:477:1: qid_start : ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | literal );
    public final csParser.qid_start_return qid_start() throws RecognitionException {
        csParser.qid_start_return retval = new csParser.qid_start_return();
        retval.start = input.LT(1);

        int qid_start_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal287=null;
        csParser.predefined_type_return predefined_type283 =null;

        csParser.identifier_return identifier284 =null;

        csParser.generic_argument_list_return generic_argument_list285 =null;

        csParser.identifier_return identifier286 =null;

        csParser.identifier_return identifier288 =null;

        csParser.literal_return literal289 =null;


        Object string_literal287_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:477:10: ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | literal )
            int alt81=4;
            switch ( input.LA(1) ) {
            case 106:
            case 109:
            case 111:
            case 116:
            case 121:
            case 131:
            case 140:
            case 148:
            case 153:
            case 171:
            case 175:
            case 179:
            case 187:
            case 188:
            case 191:
                {
                alt81=1;
                }
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 134:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
                {
                int LA81_2 = input.LA(2);

                if ( (LA81_2==84) && (synpred16_cs())) {
                    alt81=2;
                }
                else if ( (LA81_2==DOT||LA81_2==PTR||LA81_2==71||LA81_2==83||LA81_2==199) ) {
                    alt81=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 2, input);

                    throw nvae;

                }
                }
                break;
            case Character_literal:
            case FALSE:
            case Hex_number:
            case NULL:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
                {
                alt81=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;

            }

            switch (alt81) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:478:2: predefined_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_predefined_type_in_qid_start2563);
                    predefined_type283=predefined_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, predefined_type283.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:479:4: ( identifier '<' )=> identifier generic_argument_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_qid_start2579);
                    identifier284=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier284.getTree());

                    pushFollow(FOLLOW_generic_argument_list_in_qid_start2583);
                    generic_argument_list285=generic_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_argument_list285.getTree());

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:482:4: identifier ( '::' identifier )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_qid_start2590);
                    identifier286=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier286.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:482:17: ( '::' identifier )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==83) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:482:18: '::' identifier
                            {
                            string_literal287=(Token)match(input,83,FOLLOW_83_in_qid_start2595); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal287_tree = 
                            (Object)adaptor.create(string_literal287)
                            ;
                            adaptor.addChild(root_0, string_literal287_tree);
                            }

                            pushFollow(FOLLOW_identifier_in_qid_start2599);
                            identifier288=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier288.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:483:4: literal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_literal_in_qid_start2606);
                    literal289=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal289.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 75, qid_start_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "qid_start"


    public static class qid_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qid_part"
    // CodeR.CSharp.Parser/src/antlr/cs.g:487:1: qid_part : access_identifier ;
    public final csParser.qid_part_return qid_part() throws RecognitionException {
        csParser.qid_part_return retval = new csParser.qid_part_return();
        retval.start = input.LT(1);

        int qid_part_StartIndex = input.index();

        Object root_0 = null;

        csParser.access_identifier_return access_identifier290 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:487:9: ( access_identifier )
            // CodeR.CSharp.Parser/src/antlr/cs.g:488:2: access_identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_access_identifier_in_qid_part2620);
            access_identifier290=access_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, access_identifier290.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 76, qid_part_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "qid_part"


    public static class generic_argument_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic_argument_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:490:1: generic_argument_list : '<' type_arguments '>' ;
    public final csParser.generic_argument_list_return generic_argument_list() throws RecognitionException {
        csParser.generic_argument_list_return retval = new csParser.generic_argument_list_return();
        retval.start = input.LT(1);

        int generic_argument_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal291=null;
        Token char_literal293=null;
        csParser.type_arguments_return type_arguments292 =null;


        Object char_literal291_tree=null;
        Object char_literal293_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:490:22: ( '<' type_arguments '>' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:491:2: '<' type_arguments '>'
            {
            root_0 = (Object)adaptor.nil();


            char_literal291=(Token)match(input,84,FOLLOW_84_in_generic_argument_list2630); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal291_tree = 
            (Object)adaptor.create(char_literal291)
            ;
            adaptor.addChild(root_0, char_literal291_tree);
            }

            pushFollow(FOLLOW_type_arguments_in_generic_argument_list2634);
            type_arguments292=type_arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_arguments292.getTree());

            char_literal293=(Token)match(input,GT,FOLLOW_GT_in_generic_argument_list2638); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal293_tree = 
            (Object)adaptor.create(char_literal293)
            ;
            adaptor.addChild(root_0, char_literal293_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 77, generic_argument_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "generic_argument_list"


    public static class type_arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_arguments"
    // CodeR.CSharp.Parser/src/antlr/cs.g:492:1: type_arguments : type ( ',' type )* ;
    public final csParser.type_arguments_return type_arguments() throws RecognitionException {
        csParser.type_arguments_return retval = new csParser.type_arguments_return();
        retval.start = input.LT(1);

        int type_arguments_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal295=null;
        csParser.type_return type294 =null;

        csParser.type_return type296 =null;


        Object char_literal295_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:492:15: ( type ( ',' type )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:493:2: type ( ',' type )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_in_type_arguments2647);
            type294=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type294.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:493:7: ( ',' type )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==77) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:493:8: ',' type
            	    {
            	    char_literal295=(Token)match(input,77,FOLLOW_77_in_type_arguments2650); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal295_tree = 
            	    (Object)adaptor.create(char_literal295)
            	    ;
            	    adaptor.addChild(root_0, char_literal295_tree);
            	    }

            	    pushFollow(FOLLOW_type_in_type_arguments2652);
            	    type296=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type296.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 78, type_arguments_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_arguments"


    public static class type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type"
    // CodeR.CSharp.Parser/src/antlr/cs.g:495:1: type : ( ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )* | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' ) | ( predefined_type | type_name ) | 'void' ( '*' )+ );
    public final csParser.type_return type() throws RecognitionException {
        csParser.type_return retval = new csParser.type_return();
        retval.start = input.LT(1);

        int type_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal300=null;
        Token char_literal303=null;
        Token char_literal304=null;
        Token string_literal307=null;
        Token char_literal308=null;
        csParser.predefined_type_return predefined_type297 =null;

        csParser.type_name_return type_name298 =null;

        csParser.rank_specifiers_return rank_specifiers299 =null;

        csParser.predefined_type_return predefined_type301 =null;

        csParser.type_name_return type_name302 =null;

        csParser.predefined_type_return predefined_type305 =null;

        csParser.type_name_return type_name306 =null;


        Object char_literal300_tree=null;
        Object char_literal303_tree=null;
        Object char_literal304_tree=null;
        Object string_literal307_tree=null;
        Object char_literal308_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:495:5: ( ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )* | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' ) | ( predefined_type | type_name ) | 'void' ( '*' )+ )
            int alt90=4;
            switch ( input.LA(1) ) {
            case 106:
            case 109:
            case 111:
            case 116:
            case 121:
            case 131:
            case 140:
            case 148:
            case 153:
            case 171:
            case 175:
            case 179:
            case 187:
            case 188:
            case 191:
                {
                int LA90_1 = input.LA(2);

                if ( (synpred17_cs()) ) {
                    alt90=1;
                }
                else if ( (synpred18_cs()) ) {
                    alt90=2;
                }
                else if ( (true) ) {
                    alt90=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 90, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 134:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
                {
                int LA90_2 = input.LA(2);

                if ( (synpred17_cs()) ) {
                    alt90=1;
                }
                else if ( (synpred18_cs()) ) {
                    alt90=2;
                }
                else if ( (true) ) {
                    alt90=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 90, 2, input);

                    throw nvae;

                }
                }
                break;
            case 194:
                {
                alt90=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;

            }

            switch (alt90) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:496:4: ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )*
                    {
                    root_0 = (Object)adaptor.nil();


                    // CodeR.CSharp.Parser/src/antlr/cs.g:496:56: ( predefined_type | type_name )
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==106||LA83_0==109||LA83_0==111||LA83_0==116||LA83_0==121||LA83_0==131||LA83_0==140||LA83_0==148||LA83_0==153||LA83_0==171||LA83_0==175||LA83_0==179||(LA83_0 >= 187 && LA83_0 <= 188)||LA83_0==191) ) {
                        alt83=1;
                    }
                    else if ( (LA83_0==IDENTIFIER||LA83_0==98||(LA83_0 >= 100 && LA83_0 <= 101)||(LA83_0 >= 103 && LA83_0 <= 104)||LA83_0==108||LA83_0==119||LA83_0==122||LA83_0==124||LA83_0==128||LA83_0==134||LA83_0==137||LA83_0==143||(LA83_0 >= 145 && LA83_0 <= 146)||(LA83_0 >= 149 && LA83_0 <= 150)||LA83_0==154||LA83_0==156||LA83_0==159||LA83_0==162||LA83_0==164||LA83_0==169||(LA83_0 >= 173 && LA83_0 <= 174)||LA83_0==185||LA83_0==192||LA83_0==196||LA83_0==198) ) {
                        alt83=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 83, 0, input);

                        throw nvae;

                    }
                    switch (alt83) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:496:57: predefined_type
                            {
                            pushFollow(FOLLOW_predefined_type_in_type2681);
                            predefined_type297=predefined_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, predefined_type297.getTree());

                            }
                            break;
                        case 2 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:496:75: type_name
                            {
                            pushFollow(FOLLOW_type_name_in_type2685);
                            type_name298=type_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name298.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_rank_specifiers_in_type2690);
                    rank_specifiers299=rank_specifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_specifiers299.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:496:106: ( '*' )*
                    loop84:
                    do {
                        int alt84=2;
                        int LA84_0 = input.LA(1);

                        if ( (LA84_0==72) ) {
                            alt84=1;
                        }


                        switch (alt84) {
                    	case 1 :
                    	    // CodeR.CSharp.Parser/src/antlr/cs.g:496:106: '*'
                    	    {
                    	    char_literal300=(Token)match(input,72,FOLLOW_72_in_type2694); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal300_tree = 
                    	    (Object)adaptor.create(char_literal300)
                    	    ;
                    	    adaptor.addChild(root_0, char_literal300_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop84;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:497:4: ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' )
                    {
                    root_0 = (Object)adaptor.nil();


                    // CodeR.CSharp.Parser/src/antlr/cs.g:497:53: ( predefined_type | type_name )
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==106||LA85_0==109||LA85_0==111||LA85_0==116||LA85_0==121||LA85_0==131||LA85_0==140||LA85_0==148||LA85_0==153||LA85_0==171||LA85_0==175||LA85_0==179||(LA85_0 >= 187 && LA85_0 <= 188)||LA85_0==191) ) {
                        alt85=1;
                    }
                    else if ( (LA85_0==IDENTIFIER||LA85_0==98||(LA85_0 >= 100 && LA85_0 <= 101)||(LA85_0 >= 103 && LA85_0 <= 104)||LA85_0==108||LA85_0==119||LA85_0==122||LA85_0==124||LA85_0==128||LA85_0==134||LA85_0==137||LA85_0==143||(LA85_0 >= 145 && LA85_0 <= 146)||(LA85_0 >= 149 && LA85_0 <= 150)||LA85_0==154||LA85_0==156||LA85_0==159||LA85_0==162||LA85_0==164||LA85_0==169||(LA85_0 >= 173 && LA85_0 <= 174)||LA85_0==185||LA85_0==192||LA85_0==196||LA85_0==198) ) {
                        alt85=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 85, 0, input);

                        throw nvae;

                    }
                    switch (alt85) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:497:54: predefined_type
                            {
                            pushFollow(FOLLOW_predefined_type_in_type2723);
                            predefined_type301=predefined_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, predefined_type301.getTree());

                            }
                            break;
                        case 2 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:497:72: type_name
                            {
                            pushFollow(FOLLOW_type_name_in_type2727);
                            type_name302=type_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name302.getTree());

                            }
                            break;

                    }


                    // CodeR.CSharp.Parser/src/antlr/cs.g:497:85: ( ( '*' )+ | '?' )
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==72) ) {
                        alt87=1;
                    }
                    else if ( (LA87_0==92) ) {
                        alt87=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 87, 0, input);

                        throw nvae;

                    }
                    switch (alt87) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:497:86: ( '*' )+
                            {
                            // CodeR.CSharp.Parser/src/antlr/cs.g:497:86: ( '*' )+
                            int cnt86=0;
                            loop86:
                            do {
                                int alt86=2;
                                int LA86_0 = input.LA(1);

                                if ( (LA86_0==72) ) {
                                    alt86=1;
                                }


                                switch (alt86) {
                            	case 1 :
                            	    // CodeR.CSharp.Parser/src/antlr/cs.g:497:86: '*'
                            	    {
                            	    char_literal303=(Token)match(input,72,FOLLOW_72_in_type2733); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal303_tree = 
                            	    (Object)adaptor.create(char_literal303)
                            	    ;
                            	    adaptor.addChild(root_0, char_literal303_tree);
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt86 >= 1 ) break loop86;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(86, input);
                                        throw eee;
                                }
                                cnt86++;
                            } while (true);


                            }
                            break;
                        case 2 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:497:93: '?'
                            {
                            char_literal304=(Token)match(input,92,FOLLOW_92_in_type2738); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal304_tree = 
                            (Object)adaptor.create(char_literal304)
                            ;
                            adaptor.addChild(root_0, char_literal304_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:498:4: ( predefined_type | type_name )
                    {
                    root_0 = (Object)adaptor.nil();


                    // CodeR.CSharp.Parser/src/antlr/cs.g:498:4: ( predefined_type | type_name )
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==106||LA88_0==109||LA88_0==111||LA88_0==116||LA88_0==121||LA88_0==131||LA88_0==140||LA88_0==148||LA88_0==153||LA88_0==171||LA88_0==175||LA88_0==179||(LA88_0 >= 187 && LA88_0 <= 188)||LA88_0==191) ) {
                        alt88=1;
                    }
                    else if ( (LA88_0==IDENTIFIER||LA88_0==98||(LA88_0 >= 100 && LA88_0 <= 101)||(LA88_0 >= 103 && LA88_0 <= 104)||LA88_0==108||LA88_0==119||LA88_0==122||LA88_0==124||LA88_0==128||LA88_0==134||LA88_0==137||LA88_0==143||(LA88_0 >= 145 && LA88_0 <= 146)||(LA88_0 >= 149 && LA88_0 <= 150)||LA88_0==154||LA88_0==156||LA88_0==159||LA88_0==162||LA88_0==164||LA88_0==169||(LA88_0 >= 173 && LA88_0 <= 174)||LA88_0==185||LA88_0==192||LA88_0==196||LA88_0==198) ) {
                        alt88=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 88, 0, input);

                        throw nvae;

                    }
                    switch (alt88) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:498:5: predefined_type
                            {
                            pushFollow(FOLLOW_predefined_type_in_type2745);
                            predefined_type305=predefined_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, predefined_type305.getTree());

                            }
                            break;
                        case 2 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:498:23: type_name
                            {
                            pushFollow(FOLLOW_type_name_in_type2749);
                            type_name306=type_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name306.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:499:4: 'void' ( '*' )+
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal307=(Token)match(input,194,FOLLOW_194_in_type2755); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal307_tree = 
                    (Object)adaptor.create(string_literal307)
                    ;
                    adaptor.addChild(root_0, string_literal307_tree);
                    }

                    // CodeR.CSharp.Parser/src/antlr/cs.g:499:11: ( '*' )+
                    int cnt89=0;
                    loop89:
                    do {
                        int alt89=2;
                        int LA89_0 = input.LA(1);

                        if ( (LA89_0==72) ) {
                            alt89=1;
                        }


                        switch (alt89) {
                    	case 1 :
                    	    // CodeR.CSharp.Parser/src/antlr/cs.g:499:11: '*'
                    	    {
                    	    char_literal308=(Token)match(input,72,FOLLOW_72_in_type2757); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal308_tree = 
                    	    (Object)adaptor.create(char_literal308)
                    	    ;
                    	    adaptor.addChild(root_0, char_literal308_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt89 >= 1 ) break loop89;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(89, input);
                                throw eee;
                        }
                        cnt89++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 79, type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type"


    public static class non_nullable_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "non_nullable_type"
    // CodeR.CSharp.Parser/src/antlr/cs.g:501:1: non_nullable_type : ( ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? ) | 'void' ( '*' )+ );
    public final csParser.non_nullable_type_return non_nullable_type() throws RecognitionException {
        csParser.non_nullable_type_return retval = new csParser.non_nullable_type_return();
        retval.start = input.LT(1);

        int non_nullable_type_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal312=null;
        Token char_literal313=null;
        Token string_literal314=null;
        Token char_literal315=null;
        csParser.predefined_type_return predefined_type309 =null;

        csParser.type_name_return type_name310 =null;

        csParser.rank_specifiers_return rank_specifiers311 =null;


        Object char_literal312_tree=null;
        Object char_literal313_tree=null;
        Object string_literal314_tree=null;
        Object char_literal315_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:501:18: ( ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? ) | 'void' ( '*' )+ )
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==IDENTIFIER||LA97_0==98||(LA97_0 >= 100 && LA97_0 <= 101)||(LA97_0 >= 103 && LA97_0 <= 104)||LA97_0==106||(LA97_0 >= 108 && LA97_0 <= 109)||LA97_0==111||LA97_0==116||LA97_0==119||(LA97_0 >= 121 && LA97_0 <= 122)||LA97_0==124||LA97_0==128||LA97_0==131||LA97_0==134||LA97_0==137||LA97_0==140||LA97_0==143||(LA97_0 >= 145 && LA97_0 <= 146)||(LA97_0 >= 148 && LA97_0 <= 150)||(LA97_0 >= 153 && LA97_0 <= 154)||LA97_0==156||LA97_0==159||LA97_0==162||LA97_0==164||LA97_0==169||LA97_0==171||(LA97_0 >= 173 && LA97_0 <= 175)||LA97_0==179||LA97_0==185||(LA97_0 >= 187 && LA97_0 <= 188)||(LA97_0 >= 191 && LA97_0 <= 192)||LA97_0==196||LA97_0==198) ) {
                alt97=1;
            }
            else if ( (LA97_0==194) ) {
                alt97=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;

            }
            switch (alt97) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:502:2: ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? )
                    {
                    root_0 = (Object)adaptor.nil();


                    // CodeR.CSharp.Parser/src/antlr/cs.g:502:2: ( predefined_type | type_name )
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==106||LA91_0==109||LA91_0==111||LA91_0==116||LA91_0==121||LA91_0==131||LA91_0==140||LA91_0==148||LA91_0==153||LA91_0==171||LA91_0==175||LA91_0==179||(LA91_0 >= 187 && LA91_0 <= 188)||LA91_0==191) ) {
                        alt91=1;
                    }
                    else if ( (LA91_0==IDENTIFIER||LA91_0==98||(LA91_0 >= 100 && LA91_0 <= 101)||(LA91_0 >= 103 && LA91_0 <= 104)||LA91_0==108||LA91_0==119||LA91_0==122||LA91_0==124||LA91_0==128||LA91_0==134||LA91_0==137||LA91_0==143||(LA91_0 >= 145 && LA91_0 <= 146)||(LA91_0 >= 149 && LA91_0 <= 150)||LA91_0==154||LA91_0==156||LA91_0==159||LA91_0==162||LA91_0==164||LA91_0==169||(LA91_0 >= 173 && LA91_0 <= 174)||LA91_0==185||LA91_0==192||LA91_0==196||LA91_0==198) ) {
                        alt91=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 91, 0, input);

                        throw nvae;

                    }
                    switch (alt91) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:502:3: predefined_type
                            {
                            pushFollow(FOLLOW_predefined_type_in_non_nullable_type2768);
                            predefined_type309=predefined_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, predefined_type309.getTree());

                            }
                            break;
                        case 2 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:502:21: type_name
                            {
                            pushFollow(FOLLOW_type_name_in_non_nullable_type2772);
                            type_name310=type_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name310.getTree());

                            }
                            break;

                    }


                    // CodeR.CSharp.Parser/src/antlr/cs.g:503:3: ( rank_specifiers ( '*' )* | ( ( '*' )+ )? )
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==94) ) {
                        alt95=1;
                    }
                    else if ( (LA95_0==EOF||LA95_0==GT||LA95_0==IDENTIFIER||LA95_0==RPAREN||LA95_0==SEMI||LA95_0==65||(LA95_0 >= 68 && LA95_0 <= 69)||LA95_0==72||LA95_0==77||LA95_0==82||LA95_0==84||LA95_0==87||LA95_0==89||(LA95_0 >= 91 && LA95_0 <= 93)||(LA95_0 >= 95 && LA95_0 <= 96)||LA95_0==98||(LA95_0 >= 100 && LA95_0 <= 104)||LA95_0==108||LA95_0==119||LA95_0==122||LA95_0==124||LA95_0==128||LA95_0==134||LA95_0==137||(LA95_0 >= 143 && LA95_0 <= 146)||(LA95_0 >= 149 && LA95_0 <= 150)||LA95_0==154||LA95_0==156||LA95_0==159||LA95_0==162||LA95_0==164||LA95_0==169||(LA95_0 >= 173 && LA95_0 <= 174)||LA95_0==185||LA95_0==192||LA95_0==196||LA95_0==198||LA95_0==200||(LA95_0 >= 202 && LA95_0 <= 203)) ) {
                        alt95=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 95, 0, input);

                        throw nvae;

                    }
                    switch (alt95) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:503:7: rank_specifiers ( '*' )*
                            {
                            pushFollow(FOLLOW_rank_specifiers_in_non_nullable_type2781);
                            rank_specifiers311=rank_specifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_specifiers311.getTree());

                            // CodeR.CSharp.Parser/src/antlr/cs.g:503:25: ( '*' )*
                            loop92:
                            do {
                                int alt92=2;
                                int LA92_0 = input.LA(1);

                                if ( (LA92_0==72) ) {
                                    alt92=1;
                                }


                                switch (alt92) {
                            	case 1 :
                            	    // CodeR.CSharp.Parser/src/antlr/cs.g:503:25: '*'
                            	    {
                            	    char_literal312=(Token)match(input,72,FOLLOW_72_in_non_nullable_type2785); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal312_tree = 
                            	    (Object)adaptor.create(char_literal312)
                            	    ;
                            	    adaptor.addChild(root_0, char_literal312_tree);
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop92;
                                }
                            } while (true);


                            }
                            break;
                        case 2 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:504:6: ( ( '*' )+ )?
                            {
                            // CodeR.CSharp.Parser/src/antlr/cs.g:504:6: ( ( '*' )+ )?
                            int alt94=2;
                            int LA94_0 = input.LA(1);

                            if ( (LA94_0==72) ) {
                                alt94=1;
                            }
                            switch (alt94) {
                                case 1 :
                                    // CodeR.CSharp.Parser/src/antlr/cs.g:504:7: ( '*' )+
                                    {
                                    // CodeR.CSharp.Parser/src/antlr/cs.g:504:7: ( '*' )+
                                    int cnt93=0;
                                    loop93:
                                    do {
                                        int alt93=2;
                                        int LA93_0 = input.LA(1);

                                        if ( (LA93_0==72) ) {
                                            alt93=1;
                                        }


                                        switch (alt93) {
                                    	case 1 :
                                    	    // CodeR.CSharp.Parser/src/antlr/cs.g:504:7: '*'
                                    	    {
                                    	    char_literal313=(Token)match(input,72,FOLLOW_72_in_non_nullable_type2794); if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) {
                                    	    char_literal313_tree = 
                                    	    (Object)adaptor.create(char_literal313)
                                    	    ;
                                    	    adaptor.addChild(root_0, char_literal313_tree);
                                    	    }

                                    	    }
                                    	    break;

                                    	default :
                                    	    if ( cnt93 >= 1 ) break loop93;
                                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                                EarlyExitException eee =
                                                    new EarlyExitException(93, input);
                                                throw eee;
                                        }
                                        cnt93++;
                                    } while (true);


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:506:4: 'void' ( '*' )+
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal314=(Token)match(input,194,FOLLOW_194_in_non_nullable_type2806); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal314_tree = 
                    (Object)adaptor.create(string_literal314)
                    ;
                    adaptor.addChild(root_0, string_literal314_tree);
                    }

                    // CodeR.CSharp.Parser/src/antlr/cs.g:506:13: ( '*' )+
                    int cnt96=0;
                    loop96:
                    do {
                        int alt96=2;
                        int LA96_0 = input.LA(1);

                        if ( (LA96_0==72) ) {
                            alt96=1;
                        }


                        switch (alt96) {
                    	case 1 :
                    	    // CodeR.CSharp.Parser/src/antlr/cs.g:506:13: '*'
                    	    {
                    	    char_literal315=(Token)match(input,72,FOLLOW_72_in_non_nullable_type2810); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal315_tree = 
                    	    (Object)adaptor.create(char_literal315)
                    	    ;
                    	    adaptor.addChild(root_0, char_literal315_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt96 >= 1 ) break loop96;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(96, input);
                                throw eee;
                        }
                        cnt96++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 80, non_nullable_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "non_nullable_type"


    public static class non_array_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "non_array_type"
    // CodeR.CSharp.Parser/src/antlr/cs.g:508:1: non_array_type : type ;
    public final csParser.non_array_type_return non_array_type() throws RecognitionException {
        csParser.non_array_type_return retval = new csParser.non_array_type_return();
        retval.start = input.LT(1);

        int non_array_type_StartIndex = input.index();

        Object root_0 = null;

        csParser.type_return type316 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:508:15: ( type )
            // CodeR.CSharp.Parser/src/antlr/cs.g:509:2: type
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_in_non_array_type2821);
            type316=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type316.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 81, non_array_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "non_array_type"


    public static class array_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_type"
    // CodeR.CSharp.Parser/src/antlr/cs.g:510:1: array_type : type ;
    public final csParser.array_type_return array_type() throws RecognitionException {
        csParser.array_type_return retval = new csParser.array_type_return();
        retval.start = input.LT(1);

        int array_type_StartIndex = input.index();

        Object root_0 = null;

        csParser.type_return type317 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:510:11: ( type )
            // CodeR.CSharp.Parser/src/antlr/cs.g:511:2: type
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_in_array_type2828);
            type317=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type317.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 82, array_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "array_type"


    public static class unmanaged_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unmanaged_type"
    // CodeR.CSharp.Parser/src/antlr/cs.g:512:1: unmanaged_type : type ;
    public final csParser.unmanaged_type_return unmanaged_type() throws RecognitionException {
        csParser.unmanaged_type_return retval = new csParser.unmanaged_type_return();
        retval.start = input.LT(1);

        int unmanaged_type_StartIndex = input.index();

        Object root_0 = null;

        csParser.type_return type318 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:512:15: ( type )
            // CodeR.CSharp.Parser/src/antlr/cs.g:513:2: type
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_in_unmanaged_type2835);
            type318=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type318.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 83, unmanaged_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unmanaged_type"


    public static class class_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_type"
    // CodeR.CSharp.Parser/src/antlr/cs.g:514:1: class_type : type ;
    public final csParser.class_type_return class_type() throws RecognitionException {
        csParser.class_type_return retval = new csParser.class_type_return();
        retval.start = input.LT(1);

        int class_type_StartIndex = input.index();

        Object root_0 = null;

        csParser.type_return type319 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:514:11: ( type )
            // CodeR.CSharp.Parser/src/antlr/cs.g:515:2: type
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_in_class_type2842);
            type319=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type319.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 84, class_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "class_type"


    public static class pointer_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pointer_type"
    // CodeR.CSharp.Parser/src/antlr/cs.g:516:1: pointer_type : type ;
    public final csParser.pointer_type_return pointer_type() throws RecognitionException {
        csParser.pointer_type_return retval = new csParser.pointer_type_return();
        retval.start = input.LT(1);

        int pointer_type_StartIndex = input.index();

        Object root_0 = null;

        csParser.type_return type320 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:516:13: ( type )
            // CodeR.CSharp.Parser/src/antlr/cs.g:517:2: type
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_in_pointer_type2849);
            type320=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type320.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 85, pointer_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "pointer_type"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // CodeR.CSharp.Parser/src/antlr/cs.g:523:1: block : ( ';' | '{' ( statement_list )? '}' );
    public final csParser.block_return block() throws RecognitionException {
        csParser.block_return retval = new csParser.block_return();
        retval.start = input.LT(1);

        int block_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal321=null;
        Token char_literal322=null;
        Token char_literal324=null;
        csParser.statement_list_return statement_list323 =null;


        Object char_literal321_tree=null;
        Object char_literal322_tree=null;
        Object char_literal324_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:523:6: ( ';' | '{' ( statement_list )? '}' )
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==SEMI) ) {
                alt99=1;
            }
            else if ( (LA99_0==199) ) {
                alt99=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;

            }
            switch (alt99) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:524:2: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal321=(Token)match(input,SEMI,FOLLOW_SEMI_in_block2861); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal321_tree = 
                    (Object)adaptor.create(char_literal321)
                    ;
                    adaptor.addChild(root_0, char_literal321_tree);
                    }

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:525:4: '{' ( statement_list )? '}'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal322=(Token)match(input,199,FOLLOW_199_in_block2866); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal322_tree = 
                    (Object)adaptor.create(char_literal322)
                    ;
                    adaptor.addChild(root_0, char_literal322_tree);
                    }

                    // CodeR.CSharp.Parser/src/antlr/cs.g:525:10: ( statement_list )?
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==Character_literal||LA98_0==FALSE||(LA98_0 >= Hex_number && LA98_0 <= IF)||(LA98_0 >= MINUS && LA98_0 <= NUMBER)||LA98_0==Real_literal||(LA98_0 >= SEMI && LA98_0 <= STRINGLITERAL)||LA98_0==TRUE||LA98_0==USING||LA98_0==Verbatim_string_literal||LA98_0==64||LA98_0==69||(LA98_0 >= 71 && LA98_0 <= 72)||(LA98_0 >= 74 && LA98_0 <= 75)||LA98_0==78||LA98_0==98||(LA98_0 >= 100 && LA98_0 <= 101)||(LA98_0 >= 103 && LA98_0 <= 109)||(LA98_0 >= 111 && LA98_0 <= 112)||(LA98_0 >= 114 && LA98_0 <= 122)||LA98_0==124||LA98_0==128||(LA98_0 >= 130 && LA98_0 <= 134)||(LA98_0 >= 136 && LA98_0 <= 137)||LA98_0==140||LA98_0==143||(LA98_0 >= 145 && LA98_0 <= 150)||(LA98_0 >= 152 && LA98_0 <= 154)||LA98_0==156||LA98_0==159||LA98_0==162||LA98_0==164||(LA98_0 >= 169 && LA98_0 <= 171)||(LA98_0 >= 173 && LA98_0 <= 176)||LA98_0==179||(LA98_0 >= 181 && LA98_0 <= 192)||LA98_0==194||(LA98_0 >= 196 && LA98_0 <= 199)||LA98_0==204) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:525:10: statement_list
                            {
                            pushFollow(FOLLOW_statement_list_in_block2870);
                            statement_list323=statement_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_list323.getTree());

                            }
                            break;

                    }


                    char_literal324=(Token)match(input,203,FOLLOW_203_in_block2875); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal324_tree = 
                    (Object)adaptor.create(char_literal324)
                    ;
                    adaptor.addChild(root_0, char_literal324_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 86, block_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "block"


    public static class statement_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:526:1: statement_list : ( statement )+ ;
    public final csParser.statement_list_return statement_list() throws RecognitionException {
        csParser.statement_list_return retval = new csParser.statement_list_return();
        retval.start = input.LT(1);

        int statement_list_StartIndex = input.index();

        Object root_0 = null;

        csParser.statement_return statement325 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:526:15: ( ( statement )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:527:2: ( statement )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:527:2: ( statement )+
            int cnt100=0;
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);

                if ( (LA100_0==117) ) {
                    int LA100_2 = input.LA(2);

                    if ( (LA100_2==71) ) {
                        alt100=1;
                    }


                }
                else if ( (LA100_0==Character_literal||LA100_0==FALSE||(LA100_0 >= Hex_number && LA100_0 <= IF)||(LA100_0 >= MINUS && LA100_0 <= NUMBER)||LA100_0==Real_literal||(LA100_0 >= SEMI && LA100_0 <= STRINGLITERAL)||LA100_0==TRUE||LA100_0==USING||LA100_0==Verbatim_string_literal||LA100_0==64||LA100_0==69||(LA100_0 >= 71 && LA100_0 <= 72)||(LA100_0 >= 74 && LA100_0 <= 75)||LA100_0==78||LA100_0==98||(LA100_0 >= 100 && LA100_0 <= 101)||(LA100_0 >= 103 && LA100_0 <= 109)||(LA100_0 >= 111 && LA100_0 <= 112)||(LA100_0 >= 114 && LA100_0 <= 116)||(LA100_0 >= 118 && LA100_0 <= 122)||LA100_0==124||LA100_0==128||(LA100_0 >= 130 && LA100_0 <= 134)||(LA100_0 >= 136 && LA100_0 <= 137)||LA100_0==140||LA100_0==143||(LA100_0 >= 145 && LA100_0 <= 150)||(LA100_0 >= 152 && LA100_0 <= 154)||LA100_0==156||LA100_0==159||LA100_0==162||LA100_0==164||(LA100_0 >= 169 && LA100_0 <= 171)||(LA100_0 >= 173 && LA100_0 <= 176)||LA100_0==179||(LA100_0 >= 181 && LA100_0 <= 192)||LA100_0==194||(LA100_0 >= 196 && LA100_0 <= 199)||LA100_0==204) ) {
                    alt100=1;
                }


                switch (alt100) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:527:2: statement
            	    {
            	    pushFollow(FOLLOW_statement_in_statement_list2882);
            	    statement325=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement325.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt100 >= 1 ) break loop100;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(100, input);
                        throw eee;
                }
                cnt100++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 87, statement_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "statement_list"


    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:532:1: expression : ( ( unary_expression assignment_operator )=> assignment | non_assignment_expression );
    public final csParser.expression_return expression() throws RecognitionException {
        csParser.expression_return retval = new csParser.expression_return();
        retval.start = input.LT(1);

        int expression_StartIndex = input.index();

        Object root_0 = null;

        csParser.assignment_return assignment326 =null;

        csParser.non_assignment_expression_return non_assignment_expression327 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:532:11: ( ( unary_expression assignment_operator )=> assignment | non_assignment_expression )
            int alt101=2;
            switch ( input.LA(1) ) {
            case 71:
                {
                int LA101_1 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 1, input);

                    throw nvae;

                }
                }
                break;
            case 152:
                {
                int LA101_2 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 2, input);

                    throw nvae;

                }
                }
                break;
            case 182:
                {
                int LA101_3 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 3, input);

                    throw nvae;

                }
                }
                break;
            case 106:
            case 109:
            case 111:
            case 116:
            case 121:
            case 131:
            case 140:
            case 148:
            case 153:
            case 171:
            case 175:
            case 179:
            case 187:
            case 188:
            case 191:
                {
                int LA101_4 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 4, input);

                    throw nvae;

                }
                }
                break;
            case 134:
                {
                int LA101_5 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 5, input);

                    throw nvae;

                }
                }
                break;
            case 105:
                {
                int LA101_6 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 6, input);

                    throw nvae;

                }
                }
                break;
            case 186:
                {
                int LA101_7 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 7, input);

                    throw nvae;

                }
                }
                break;
            case Character_literal:
            case FALSE:
            case Hex_number:
            case NULL:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
                {
                int LA101_8 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 8, input);

                    throw nvae;

                }
                }
                break;
            case 176:
                {
                int LA101_9 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 9, input);

                    throw nvae;

                }
                }
                break;
            case 112:
                {
                int LA101_10 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 10, input);

                    throw nvae;

                }
                }
                break;
            case 189:
                {
                int LA101_11 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 11, input);

                    throw nvae;

                }
                }
                break;
            case 117:
                {
                int LA101_12 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 12, input);

                    throw nvae;

                }
                }
                break;
            case 118:
                {
                int LA101_13 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 13, input);

                    throw nvae;

                }
                }
                break;
            case 74:
                {
                int LA101_14 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 14, input);

                    throw nvae;

                }
                }
                break;
            case MINUS:
                {
                int LA101_15 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 15, input);

                    throw nvae;

                }
                }
                break;
            case 64:
                {
                int LA101_16 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 16, input);

                    throw nvae;

                }
                }
                break;
            case 204:
                {
                int LA101_17 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 17, input);

                    throw nvae;

                }
                }
                break;
            case 75:
                {
                int LA101_18 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 18, input);

                    throw nvae;

                }
                }
                break;
            case 78:
                {
                int LA101_19 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 19, input);

                    throw nvae;

                }
                }
                break;
            case 72:
                {
                int LA101_20 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 20, input);

                    throw nvae;

                }
                }
                break;
            case 69:
                {
                int LA101_21 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 21, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
                {
                int LA101_22 = input.LA(2);

                if ( (synpred19_cs()) ) {
                    alt101=1;
                }
                else if ( (true) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 22, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;

            }

            switch (alt101) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:533:2: ( unary_expression assignment_operator )=> assignment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_assignment_in_expression2907);
                    assignment326=assignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment326.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:534:4: non_assignment_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_non_assignment_expression_in_expression2912);
                    non_assignment_expression327=non_assignment_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, non_assignment_expression327.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 88, expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class expression_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:536:1: expression_list : expression ( ',' expression )* -> ( expression )+ ;
    public final csParser.expression_list_return expression_list() throws RecognitionException {
        csParser.expression_list_return retval = new csParser.expression_list_return();
        retval.start = input.LT(1);

        int expression_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal329=null;
        csParser.expression_return expression328 =null;

        csParser.expression_return expression330 =null;


        Object char_literal329_tree=null;
        RewriteRuleTokenStream stream_77=new RewriteRuleTokenStream(adaptor,"token 77");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:537:2: ( expression ( ',' expression )* -> ( expression )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:537:4: expression ( ',' expression )*
            {
            pushFollow(FOLLOW_expression_in_expression_list2922);
            expression328=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression328.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:537:16: ( ',' expression )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==77) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:537:17: ',' expression
            	    {
            	    char_literal329=(Token)match(input,77,FOLLOW_77_in_expression_list2926); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_77.add(char_literal329);


            	    pushFollow(FOLLOW_expression_in_expression_list2930);
            	    expression330=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression330.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 537:36: -> ( expression )+
            {
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_0, stream_expression.nextTree());

                }
                stream_expression.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 89, expression_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expression_list"


    public static class assignment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assignment"
    // CodeR.CSharp.Parser/src/antlr/cs.g:540:1: assignment : unary_expression assignment_operator expression ;
    public final csParser.assignment_return assignment() throws RecognitionException {
        csParser.assignment_return retval = new csParser.assignment_return();
        retval.start = input.LT(1);

        int assignment_StartIndex = input.index();

        Object root_0 = null;

        csParser.unary_expression_return unary_expression331 =null;

        csParser.assignment_operator_return assignment_operator332 =null;

        csParser.expression_return expression333 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:540:11: ( unary_expression assignment_operator expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:541:2: unary_expression assignment_operator expression
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_unary_expression_in_assignment2947);
            unary_expression331=unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression331.getTree());

            pushFollow(FOLLOW_assignment_operator_in_assignment2951);
            assignment_operator332=assignment_operator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment_operator332.getTree());

            pushFollow(FOLLOW_expression_in_assignment2955);
            expression333=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression333.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 90, assignment_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "assignment"


    public static class unary_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unary_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:542:1: unary_expression : ( ( cast_expression )=> cast_expression | primary_or_array_creation_expression ( '++' )? ( '--' )? | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | pre_increment_expression | pre_decrement_expression | pointer_indirection_expression | addressof_expression );
    public final csParser.unary_expression_return unary_expression() throws RecognitionException {
        csParser.unary_expression_return retval = new csParser.unary_expression_return();
        retval.start = input.LT(1);

        int unary_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal336=null;
        Token string_literal337=null;
        Token char_literal338=null;
        Token char_literal340=null;
        Token char_literal342=null;
        Token char_literal344=null;
        csParser.cast_expression_return cast_expression334 =null;

        csParser.primary_or_array_creation_expression_return primary_or_array_creation_expression335 =null;

        csParser.unary_expression_return unary_expression339 =null;

        csParser.unary_expression_return unary_expression341 =null;

        csParser.unary_expression_return unary_expression343 =null;

        csParser.unary_expression_return unary_expression345 =null;

        csParser.pre_increment_expression_return pre_increment_expression346 =null;

        csParser.pre_decrement_expression_return pre_decrement_expression347 =null;

        csParser.pointer_indirection_expression_return pointer_indirection_expression348 =null;

        csParser.addressof_expression_return addressof_expression349 =null;


        Object string_literal336_tree=null;
        Object string_literal337_tree=null;
        Object char_literal338_tree=null;
        Object char_literal340_tree=null;
        Object char_literal342_tree=null;
        Object char_literal344_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:542:17: ( ( cast_expression )=> cast_expression | primary_or_array_creation_expression ( '++' )? ( '--' )? | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | pre_increment_expression | pre_decrement_expression | pointer_indirection_expression | addressof_expression )
            int alt105=10;
            switch ( input.LA(1) ) {
            case 71:
                {
                int LA105_1 = input.LA(2);

                if ( (synpred20_cs()) ) {
                    alt105=1;
                }
                else if ( (true) ) {
                    alt105=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 105, 1, input);

                    throw nvae;

                }
                }
                break;
            case Character_literal:
            case FALSE:
            case Hex_number:
            case IDENTIFIER:
            case NULL:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 109:
            case 111:
            case 112:
            case 116:
            case 117:
            case 118:
            case 119:
            case 121:
            case 122:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 152:
            case 153:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 176:
            case 179:
            case 182:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 191:
            case 192:
            case 196:
            case 198:
                {
                alt105=2;
                }
                break;
            case 74:
                {
                alt105=3;
                }
                break;
            case MINUS:
                {
                alt105=4;
                }
                break;
            case 64:
                {
                alt105=5;
                }
                break;
            case 204:
                {
                alt105=6;
                }
                break;
            case 75:
                {
                alt105=7;
                }
                break;
            case 78:
                {
                alt105=8;
                }
                break;
            case 72:
                {
                alt105=9;
                }
                break;
            case 69:
                {
                alt105=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;

            }

            switch (alt105) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:544:2: ( cast_expression )=> cast_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_expression_in_unary_expression2972);
                    cast_expression334=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression334.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:545:4: primary_or_array_creation_expression ( '++' )? ( '--' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_primary_or_array_creation_expression_in_unary_expression2977);
                    primary_or_array_creation_expression335=primary_or_array_creation_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_or_array_creation_expression335.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:545:43: ( '++' )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==75) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:545:43: '++'
                            {
                            string_literal336=(Token)match(input,75,FOLLOW_75_in_unary_expression2981); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal336_tree = 
                            (Object)adaptor.create(string_literal336)
                            ;
                            adaptor.addChild(root_0, string_literal336_tree);
                            }

                            }
                            break;

                    }


                    // CodeR.CSharp.Parser/src/antlr/cs.g:545:51: ( '--' )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==78) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:545:51: '--'
                            {
                            string_literal337=(Token)match(input,78,FOLLOW_78_in_unary_expression2986); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal337_tree = 
                            (Object)adaptor.create(string_literal337)
                            ;
                            adaptor.addChild(root_0, string_literal337_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:546:4: '+' unary_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal338=(Token)match(input,74,FOLLOW_74_in_unary_expression2992); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal338_tree = 
                    (Object)adaptor.create(char_literal338)
                    ;
                    adaptor.addChild(root_0, char_literal338_tree);
                    }

                    pushFollow(FOLLOW_unary_expression_in_unary_expression2996);
                    unary_expression339=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression339.getTree());

                    }
                    break;
                case 4 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:547:4: '-' unary_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal340=(Token)match(input,MINUS,FOLLOW_MINUS_in_unary_expression3002); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal340_tree = 
                    (Object)adaptor.create(char_literal340)
                    ;
                    adaptor.addChild(root_0, char_literal340_tree);
                    }

                    pushFollow(FOLLOW_unary_expression_in_unary_expression3006);
                    unary_expression341=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression341.getTree());

                    }
                    break;
                case 5 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:548:4: '!' unary_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal342=(Token)match(input,64,FOLLOW_64_in_unary_expression3012); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal342_tree = 
                    (Object)adaptor.create(char_literal342)
                    ;
                    adaptor.addChild(root_0, char_literal342_tree);
                    }

                    pushFollow(FOLLOW_unary_expression_in_unary_expression3016);
                    unary_expression343=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression343.getTree());

                    }
                    break;
                case 6 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:549:4: '~' unary_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal344=(Token)match(input,204,FOLLOW_204_in_unary_expression3022); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal344_tree = 
                    (Object)adaptor.create(char_literal344)
                    ;
                    adaptor.addChild(root_0, char_literal344_tree);
                    }

                    pushFollow(FOLLOW_unary_expression_in_unary_expression3026);
                    unary_expression345=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression345.getTree());

                    }
                    break;
                case 7 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:550:4: pre_increment_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_pre_increment_expression_in_unary_expression3032);
                    pre_increment_expression346=pre_increment_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pre_increment_expression346.getTree());

                    }
                    break;
                case 8 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:551:4: pre_decrement_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_pre_decrement_expression_in_unary_expression3038);
                    pre_decrement_expression347=pre_decrement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pre_decrement_expression347.getTree());

                    }
                    break;
                case 9 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:552:4: pointer_indirection_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_pointer_indirection_expression_in_unary_expression3044);
                    pointer_indirection_expression348=pointer_indirection_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pointer_indirection_expression348.getTree());

                    }
                    break;
                case 10 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:553:4: addressof_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_addressof_expression_in_unary_expression3049);
                    addressof_expression349=addressof_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, addressof_expression349.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 91, unary_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unary_expression"


    public static class cast_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:555:1: cast_expression : '(' type ')' unary_expression ;
    public final csParser.cast_expression_return cast_expression() throws RecognitionException {
        csParser.cast_expression_return retval = new csParser.cast_expression_return();
        retval.start = input.LT(1);

        int cast_expression_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal350=null;
        Token char_literal352=null;
        csParser.type_return type351 =null;

        csParser.unary_expression_return unary_expression353 =null;


        Object char_literal350_tree=null;
        Object char_literal352_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:555:16: ( '(' type ')' unary_expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:556:2: '(' type ')' unary_expression
            {
            root_0 = (Object)adaptor.nil();


            char_literal350=(Token)match(input,71,FOLLOW_71_in_cast_expression3059); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal350_tree = 
            (Object)adaptor.create(char_literal350)
            ;
            adaptor.addChild(root_0, char_literal350_tree);
            }

            pushFollow(FOLLOW_type_in_cast_expression3063);
            type351=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type351.getTree());

            char_literal352=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cast_expression3067); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal352_tree = 
            (Object)adaptor.create(char_literal352)
            ;
            adaptor.addChild(root_0, char_literal352_tree);
            }

            pushFollow(FOLLOW_unary_expression_in_cast_expression3071);
            unary_expression353=unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression353.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 92, cast_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cast_expression"


    public static class assignment_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assignment_operator"
    // CodeR.CSharp.Parser/src/antlr/cs.g:557:1: assignment_operator : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>' '>=' );
    public final csParser.assignment_operator_return assignment_operator() throws RecognitionException {
        csParser.assignment_operator_return retval = new csParser.assignment_operator_return();
        retval.start = input.LT(1);

        int assignment_operator_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal354=null;
        Token string_literal355=null;
        Token string_literal356=null;
        Token string_literal357=null;
        Token string_literal358=null;
        Token string_literal359=null;
        Token string_literal360=null;
        Token string_literal361=null;
        Token string_literal362=null;
        Token string_literal363=null;
        Token char_literal364=null;
        Token string_literal365=null;

        Object char_literal354_tree=null;
        Object string_literal355_tree=null;
        Object string_literal356_tree=null;
        Object string_literal357_tree=null;
        Object string_literal358_tree=null;
        Object string_literal359_tree=null;
        Object string_literal360_tree=null;
        Object string_literal361_tree=null;
        Object string_literal362_tree=null;
        Object string_literal363_tree=null;
        Object char_literal364_tree=null;
        Object string_literal365_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:557:20: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>' '>=' )
            int alt106=11;
            switch ( input.LA(1) ) {
            case 88:
                {
                alt106=1;
                }
                break;
            case 76:
                {
                alt106=2;
                }
                break;
            case 79:
                {
                alt106=3;
                }
                break;
            case 73:
                {
                alt106=4;
                }
                break;
            case 81:
                {
                alt106=5;
                }
                break;
            case 67:
                {
                alt106=6;
                }
                break;
            case 70:
                {
                alt106=7;
                }
                break;
            case 201:
                {
                alt106=8;
                }
                break;
            case 97:
                {
                alt106=9;
                }
                break;
            case 86:
                {
                alt106=10;
                }
                break;
            case GT:
                {
                alt106=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;

            }

            switch (alt106) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:558:2: '='
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal354=(Token)match(input,88,FOLLOW_88_in_assignment_operator3079); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal354_tree = 
                    (Object)adaptor.create(char_literal354)
                    ;
                    adaptor.addChild(root_0, char_literal354_tree);
                    }

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:558:8: '+='
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal355=(Token)match(input,76,FOLLOW_76_in_assignment_operator3083); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal355_tree = 
                    (Object)adaptor.create(string_literal355)
                    ;
                    adaptor.addChild(root_0, string_literal355_tree);
                    }

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:558:15: '-='
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal356=(Token)match(input,79,FOLLOW_79_in_assignment_operator3087); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal356_tree = 
                    (Object)adaptor.create(string_literal356)
                    ;
                    adaptor.addChild(root_0, string_literal356_tree);
                    }

                    }
                    break;
                case 4 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:558:22: '*='
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal357=(Token)match(input,73,FOLLOW_73_in_assignment_operator3091); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal357_tree = 
                    (Object)adaptor.create(string_literal357)
                    ;
                    adaptor.addChild(root_0, string_literal357_tree);
                    }

                    }
                    break;
                case 5 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:558:29: '/='
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal358=(Token)match(input,81,FOLLOW_81_in_assignment_operator3095); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal358_tree = 
                    (Object)adaptor.create(string_literal358)
                    ;
                    adaptor.addChild(root_0, string_literal358_tree);
                    }

                    }
                    break;
                case 6 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:558:36: '%='
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal359=(Token)match(input,67,FOLLOW_67_in_assignment_operator3099); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal359_tree = 
                    (Object)adaptor.create(string_literal359)
                    ;
                    adaptor.addChild(root_0, string_literal359_tree);
                    }

                    }
                    break;
                case 7 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:558:43: '&='
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal360=(Token)match(input,70,FOLLOW_70_in_assignment_operator3103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal360_tree = 
                    (Object)adaptor.create(string_literal360)
                    ;
                    adaptor.addChild(root_0, string_literal360_tree);
                    }

                    }
                    break;
                case 8 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:558:50: '|='
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal361=(Token)match(input,201,FOLLOW_201_in_assignment_operator3107); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal361_tree = 
                    (Object)adaptor.create(string_literal361)
                    ;
                    adaptor.addChild(root_0, string_literal361_tree);
                    }

                    }
                    break;
                case 9 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:558:57: '^='
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal362=(Token)match(input,97,FOLLOW_97_in_assignment_operator3111); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal362_tree = 
                    (Object)adaptor.create(string_literal362)
                    ;
                    adaptor.addChild(root_0, string_literal362_tree);
                    }

                    }
                    break;
                case 10 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:558:64: '<<='
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal363=(Token)match(input,86,FOLLOW_86_in_assignment_operator3115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal363_tree = 
                    (Object)adaptor.create(string_literal363)
                    ;
                    adaptor.addChild(root_0, string_literal363_tree);
                    }

                    }
                    break;
                case 11 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:558:72: '>' '>='
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal364=(Token)match(input,GT,FOLLOW_GT_in_assignment_operator3119); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal364_tree = 
                    (Object)adaptor.create(char_literal364)
                    ;
                    adaptor.addChild(root_0, char_literal364_tree);
                    }

                    string_literal365=(Token)match(input,91,FOLLOW_91_in_assignment_operator3121); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal365_tree = 
                    (Object)adaptor.create(string_literal365)
                    ;
                    adaptor.addChild(root_0, string_literal365_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 93, assignment_operator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "assignment_operator"


    public static class pre_increment_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pre_increment_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:559:1: pre_increment_expression : '++' unary_expression ;
    public final csParser.pre_increment_expression_return pre_increment_expression() throws RecognitionException {
        csParser.pre_increment_expression_return retval = new csParser.pre_increment_expression_return();
        retval.start = input.LT(1);

        int pre_increment_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal366=null;
        csParser.unary_expression_return unary_expression367 =null;


        Object string_literal366_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:559:25: ( '++' unary_expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:560:2: '++' unary_expression
            {
            root_0 = (Object)adaptor.nil();


            string_literal366=(Token)match(input,75,FOLLOW_75_in_pre_increment_expression3130); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal366_tree = 
            (Object)adaptor.create(string_literal366)
            ;
            adaptor.addChild(root_0, string_literal366_tree);
            }

            pushFollow(FOLLOW_unary_expression_in_pre_increment_expression3134);
            unary_expression367=unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression367.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 94, pre_increment_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "pre_increment_expression"


    public static class pre_decrement_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pre_decrement_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:561:1: pre_decrement_expression : '--' unary_expression ;
    public final csParser.pre_decrement_expression_return pre_decrement_expression() throws RecognitionException {
        csParser.pre_decrement_expression_return retval = new csParser.pre_decrement_expression_return();
        retval.start = input.LT(1);

        int pre_decrement_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal368=null;
        csParser.unary_expression_return unary_expression369 =null;


        Object string_literal368_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:561:25: ( '--' unary_expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:562:2: '--' unary_expression
            {
            root_0 = (Object)adaptor.nil();


            string_literal368=(Token)match(input,78,FOLLOW_78_in_pre_decrement_expression3143); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal368_tree = 
            (Object)adaptor.create(string_literal368)
            ;
            adaptor.addChild(root_0, string_literal368_tree);
            }

            pushFollow(FOLLOW_unary_expression_in_pre_decrement_expression3147);
            unary_expression369=unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression369.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 95, pre_decrement_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "pre_decrement_expression"


    public static class pointer_indirection_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pointer_indirection_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:563:1: pointer_indirection_expression : '*' unary_expression ;
    public final csParser.pointer_indirection_expression_return pointer_indirection_expression() throws RecognitionException {
        csParser.pointer_indirection_expression_return retval = new csParser.pointer_indirection_expression_return();
        retval.start = input.LT(1);

        int pointer_indirection_expression_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal370=null;
        csParser.unary_expression_return unary_expression371 =null;


        Object char_literal370_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:563:31: ( '*' unary_expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:564:2: '*' unary_expression
            {
            root_0 = (Object)adaptor.nil();


            char_literal370=(Token)match(input,72,FOLLOW_72_in_pointer_indirection_expression3155); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal370_tree = 
            (Object)adaptor.create(char_literal370)
            ;
            adaptor.addChild(root_0, char_literal370_tree);
            }

            pushFollow(FOLLOW_unary_expression_in_pointer_indirection_expression3159);
            unary_expression371=unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression371.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 96, pointer_indirection_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "pointer_indirection_expression"


    public static class addressof_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "addressof_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:565:1: addressof_expression : '&' unary_expression ;
    public final csParser.addressof_expression_return addressof_expression() throws RecognitionException {
        csParser.addressof_expression_return retval = new csParser.addressof_expression_return();
        retval.start = input.LT(1);

        int addressof_expression_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal372=null;
        csParser.unary_expression_return unary_expression373 =null;


        Object char_literal372_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:565:21: ( '&' unary_expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:566:2: '&' unary_expression
            {
            root_0 = (Object)adaptor.nil();


            char_literal372=(Token)match(input,69,FOLLOW_69_in_addressof_expression3167); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal372_tree = 
            (Object)adaptor.create(char_literal372)
            ;
            adaptor.addChild(root_0, char_literal372_tree);
            }

            pushFollow(FOLLOW_unary_expression_in_addressof_expression3171);
            unary_expression373=unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression373.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 97, addressof_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "addressof_expression"


    public static class non_assignment_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "non_assignment_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:568:1: non_assignment_expression : ( ( anonymous_function_signature '=>' )=> lambda_expression | ( query_expression )=> query_expression | conditional_expression );
    public final csParser.non_assignment_expression_return non_assignment_expression() throws RecognitionException {
        csParser.non_assignment_expression_return retval = new csParser.non_assignment_expression_return();
        retval.start = input.LT(1);

        int non_assignment_expression_StartIndex = input.index();

        Object root_0 = null;

        csParser.lambda_expression_return lambda_expression374 =null;

        csParser.query_expression_return query_expression375 =null;

        csParser.conditional_expression_return conditional_expression376 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:568:26: ( ( anonymous_function_signature '=>' )=> lambda_expression | ( query_expression )=> query_expression | conditional_expression )
            int alt107=3;
            switch ( input.LA(1) ) {
            case 71:
                {
                int LA107_1 = input.LA(2);

                if ( (synpred21_cs()) ) {
                    alt107=1;
                }
                else if ( (true) ) {
                    alt107=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 107, 1, input);

                    throw nvae;

                }
                }
                break;
            case 134:
                {
                int LA107_2 = input.LA(2);

                if ( (synpred21_cs()) ) {
                    alt107=1;
                }
                else if ( (synpred22_cs()) ) {
                    alt107=2;
                }
                else if ( (true) ) {
                    alt107=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 107, 2, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
                {
                int LA107_3 = input.LA(2);

                if ( (synpred21_cs()) ) {
                    alt107=1;
                }
                else if ( (true) ) {
                    alt107=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 107, 3, input);

                    throw nvae;

                }
                }
                break;
            case Character_literal:
            case FALSE:
            case Hex_number:
            case MINUS:
            case NULL:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            case 64:
            case 69:
            case 72:
            case 74:
            case 75:
            case 78:
            case 105:
            case 106:
            case 109:
            case 111:
            case 112:
            case 116:
            case 117:
            case 118:
            case 121:
            case 131:
            case 140:
            case 148:
            case 152:
            case 153:
            case 171:
            case 175:
            case 176:
            case 179:
            case 182:
            case 186:
            case 187:
            case 188:
            case 189:
            case 191:
            case 204:
                {
                alt107=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;

            }

            switch (alt107) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:570:2: ( anonymous_function_signature '=>' )=> lambda_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_lambda_expression_in_non_assignment_expression3192);
                    lambda_expression374=lambda_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expression374.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:571:4: ( query_expression )=> query_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_query_expression_in_non_assignment_expression3203);
                    query_expression375=query_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query_expression375.getTree());

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:572:4: conditional_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_conditional_expression_in_non_assignment_expression3209);
                    conditional_expression376=conditional_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditional_expression376.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 98, non_assignment_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "non_assignment_expression"


    public static class multiplicative_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multiplicative_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:579:1: multiplicative_expression : unary_expression ( ( '*' | '/' | '%' ) unary_expression )* ;
    public final csParser.multiplicative_expression_return multiplicative_expression() throws RecognitionException {
        csParser.multiplicative_expression_return retval = new csParser.multiplicative_expression_return();
        retval.start = input.LT(1);

        int multiplicative_expression_StartIndex = input.index();

        Object root_0 = null;

        Token set378=null;
        csParser.unary_expression_return unary_expression377 =null;

        csParser.unary_expression_return unary_expression379 =null;


        Object set378_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:579:26: ( unary_expression ( ( '*' | '/' | '%' ) unary_expression )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:580:2: unary_expression ( ( '*' | '/' | '%' ) unary_expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_unary_expression_in_multiplicative_expression3223);
            unary_expression377=unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression377.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:580:19: ( ( '*' | '/' | '%' ) unary_expression )*
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);

                if ( (LA108_0==66||LA108_0==72||LA108_0==80) ) {
                    alt108=1;
                }


                switch (alt108) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:580:22: ( '*' | '/' | '%' ) unary_expression
            	    {
            	    set378=(Token)input.LT(1);

            	    if ( input.LA(1)==66||input.LA(1)==72||input.LA(1)==80 ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set378)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_unary_expression_in_multiplicative_expression3238);
            	    unary_expression379=unary_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression379.getTree());

            	    }
            	    break;

            	default :
            	    break loop108;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 99, multiplicative_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "multiplicative_expression"


    public static class additive_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "additive_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:581:1: additive_expression : multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )* ;
    public final csParser.additive_expression_return additive_expression() throws RecognitionException {
        csParser.additive_expression_return retval = new csParser.additive_expression_return();
        retval.start = input.LT(1);

        int additive_expression_StartIndex = input.index();

        Object root_0 = null;

        Token set381=null;
        csParser.multiplicative_expression_return multiplicative_expression380 =null;

        csParser.multiplicative_expression_return multiplicative_expression382 =null;


        Object set381_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:581:20: ( multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:582:2: multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_multiplicative_expression_in_additive_expression3248);
            multiplicative_expression380=multiplicative_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicative_expression380.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:582:28: ( ( '+' | '-' ) multiplicative_expression )*
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( (LA109_0==MINUS||LA109_0==74) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:582:29: ( '+' | '-' ) multiplicative_expression
            	    {
            	    set381=(Token)input.LT(1);

            	    if ( input.LA(1)==MINUS||input.LA(1)==74 ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set381)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_multiplicative_expression_in_additive_expression3259);
            	    multiplicative_expression382=multiplicative_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicative_expression382.getTree());

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 100, additive_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "additive_expression"


    public static class shift_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "shift_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:584:1: shift_expression : additive_expression ( ( '<<' | '>' '>' ) additive_expression )* ;
    public final csParser.shift_expression_return shift_expression() throws RecognitionException {
        csParser.shift_expression_return retval = new csParser.shift_expression_return();
        retval.start = input.LT(1);

        int shift_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal384=null;
        Token char_literal385=null;
        Token char_literal386=null;
        csParser.additive_expression_return additive_expression383 =null;

        csParser.additive_expression_return additive_expression387 =null;


        Object string_literal384_tree=null;
        Object char_literal385_tree=null;
        Object char_literal386_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:584:17: ( additive_expression ( ( '<<' | '>' '>' ) additive_expression )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:585:2: additive_expression ( ( '<<' | '>' '>' ) additive_expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_additive_expression_in_shift_expression3270);
            additive_expression383=additive_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additive_expression383.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:585:22: ( ( '<<' | '>' '>' ) additive_expression )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==GT) ) {
                    int LA111_1 = input.LA(2);

                    if ( (LA111_1==GT) ) {
                        alt111=1;
                    }


                }
                else if ( (LA111_0==85) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:585:23: ( '<<' | '>' '>' ) additive_expression
            	    {
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:585:23: ( '<<' | '>' '>' )
            	    int alt110=2;
            	    int LA110_0 = input.LA(1);

            	    if ( (LA110_0==85) ) {
            	        alt110=1;
            	    }
            	    else if ( (LA110_0==GT) ) {
            	        alt110=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 110, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt110) {
            	        case 1 :
            	            // CodeR.CSharp.Parser/src/antlr/cs.g:585:24: '<<'
            	            {
            	            string_literal384=(Token)match(input,85,FOLLOW_85_in_shift_expression3274); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal384_tree = 
            	            (Object)adaptor.create(string_literal384)
            	            ;
            	            adaptor.addChild(root_0, string_literal384_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // CodeR.CSharp.Parser/src/antlr/cs.g:585:29: '>' '>'
            	            {
            	            char_literal385=(Token)match(input,GT,FOLLOW_GT_in_shift_expression3276); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal385_tree = 
            	            (Object)adaptor.create(char_literal385)
            	            ;
            	            adaptor.addChild(root_0, char_literal385_tree);
            	            }

            	            char_literal386=(Token)match(input,GT,FOLLOW_GT_in_shift_expression3278); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal386_tree = 
            	            (Object)adaptor.create(char_literal386)
            	            ;
            	            adaptor.addChild(root_0, char_literal386_tree);
            	            }

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_additive_expression_in_shift_expression3281);
            	    additive_expression387=additive_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, additive_expression387.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 101, shift_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "shift_expression"


    public static class relational_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "relational_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:586:1: relational_expression : shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )* ;
    public final csParser.relational_expression_return relational_expression() throws RecognitionException {
        csParser.relational_expression_return retval = new csParser.relational_expression_return();
        retval.start = input.LT(1);

        int relational_expression_StartIndex = input.index();

        Object root_0 = null;

        Token set389=null;
        Token set391=null;
        csParser.shift_expression_return shift_expression388 =null;

        csParser.shift_expression_return shift_expression390 =null;

        csParser.non_nullable_type_return non_nullable_type392 =null;


        Object set389_tree=null;
        Object set391_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:586:22: ( shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:587:2: shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_shift_expression_in_relational_expression3291);
            shift_expression388=shift_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, shift_expression388.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:588:3: ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )*
            loop112:
            do {
                int alt112=3;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==GT||LA112_0==84||LA112_0==87||LA112_0==91) ) {
                    alt112=1;
                }
                else if ( (LA112_0==102||LA112_0==144) ) {
                    alt112=2;
                }


                switch (alt112) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:588:5: ( ( '<' | '>' | '>=' | '<=' ) shift_expression )
            	    {
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:588:5: ( ( '<' | '>' | '>=' | '<=' ) shift_expression )
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:588:6: ( '<' | '>' | '>=' | '<=' ) shift_expression
            	    {
            	    set389=(Token)input.LT(1);

            	    if ( input.LA(1)==GT||input.LA(1)==84||input.LA(1)==87||input.LA(1)==91 ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set389)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_shift_expression_in_relational_expression3308);
            	    shift_expression390=shift_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shift_expression390.getTree());

            	    }


            	    }
            	    break;
            	case 2 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:589:6: ( ( 'is' | 'as' ) non_nullable_type )
            	    {
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:589:6: ( ( 'is' | 'as' ) non_nullable_type )
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:589:7: ( 'is' | 'as' ) non_nullable_type
            	    {
            	    set391=(Token)input.LT(1);

            	    if ( input.LA(1)==102||input.LA(1)==144 ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set391)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_non_nullable_type_in_relational_expression3325);
            	    non_nullable_type392=non_nullable_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, non_nullable_type392.getTree());

            	    }


            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 102, relational_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "relational_expression"


    public static class equality_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "equality_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:591:1: equality_expression : relational_expression ( ( '==' | '!=' ) relational_expression )* ;
    public final csParser.equality_expression_return equality_expression() throws RecognitionException {
        csParser.equality_expression_return retval = new csParser.equality_expression_return();
        retval.start = input.LT(1);

        int equality_expression_StartIndex = input.index();

        Object root_0 = null;

        Token set394=null;
        csParser.relational_expression_return relational_expression393 =null;

        csParser.relational_expression_return relational_expression395 =null;


        Object set394_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:591:20: ( relational_expression ( ( '==' | '!=' ) relational_expression )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:592:2: relational_expression ( ( '==' | '!=' ) relational_expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_relational_expression_in_equality_expression3339);
            relational_expression393=relational_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_expression393.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:593:5: ( ( '==' | '!=' ) relational_expression )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==65||LA113_0==89) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:593:6: ( '==' | '!=' ) relational_expression
            	    {
            	    set394=(Token)input.LT(1);

            	    if ( input.LA(1)==65||input.LA(1)==89 ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set394)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_relational_expression_in_equality_expression3354);
            	    relational_expression395=relational_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_expression395.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 103, equality_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "equality_expression"


    public static class and_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "and_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:594:1: and_expression : equality_expression ( '&' equality_expression )* ;
    public final csParser.and_expression_return and_expression() throws RecognitionException {
        csParser.and_expression_return retval = new csParser.and_expression_return();
        retval.start = input.LT(1);

        int and_expression_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal397=null;
        csParser.equality_expression_return equality_expression396 =null;

        csParser.equality_expression_return equality_expression398 =null;


        Object char_literal397_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:594:15: ( equality_expression ( '&' equality_expression )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:595:2: equality_expression ( '&' equality_expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_equality_expression_in_and_expression3364);
            equality_expression396=equality_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, equality_expression396.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:595:22: ( '&' equality_expression )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==69) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:595:23: '&' equality_expression
            	    {
            	    char_literal397=(Token)match(input,69,FOLLOW_69_in_and_expression3367); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal397_tree = 
            	    (Object)adaptor.create(char_literal397)
            	    ;
            	    adaptor.addChild(root_0, char_literal397_tree);
            	    }

            	    pushFollow(FOLLOW_equality_expression_in_and_expression3371);
            	    equality_expression398=equality_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, equality_expression398.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 104, and_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "and_expression"


    public static class exclusive_or_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exclusive_or_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:596:1: exclusive_or_expression : and_expression ( '^' and_expression )* ;
    public final csParser.exclusive_or_expression_return exclusive_or_expression() throws RecognitionException {
        csParser.exclusive_or_expression_return retval = new csParser.exclusive_or_expression_return();
        retval.start = input.LT(1);

        int exclusive_or_expression_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal400=null;
        csParser.and_expression_return and_expression399 =null;

        csParser.and_expression_return and_expression401 =null;


        Object char_literal400_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:596:24: ( and_expression ( '^' and_expression )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:597:2: and_expression ( '^' and_expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_and_expression_in_exclusive_or_expression3381);
            and_expression399=and_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, and_expression399.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:597:17: ( '^' and_expression )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==96) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:597:18: '^' and_expression
            	    {
            	    char_literal400=(Token)match(input,96,FOLLOW_96_in_exclusive_or_expression3384); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal400_tree = 
            	    (Object)adaptor.create(char_literal400)
            	    ;
            	    adaptor.addChild(root_0, char_literal400_tree);
            	    }

            	    pushFollow(FOLLOW_and_expression_in_exclusive_or_expression3388);
            	    and_expression401=and_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, and_expression401.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 105, exclusive_or_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exclusive_or_expression"


    public static class inclusive_or_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inclusive_or_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:598:1: inclusive_or_expression : exclusive_or_expression ( '|' exclusive_or_expression )* ;
    public final csParser.inclusive_or_expression_return inclusive_or_expression() throws RecognitionException {
        csParser.inclusive_or_expression_return retval = new csParser.inclusive_or_expression_return();
        retval.start = input.LT(1);

        int inclusive_or_expression_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal403=null;
        csParser.exclusive_or_expression_return exclusive_or_expression402 =null;

        csParser.exclusive_or_expression_return exclusive_or_expression404 =null;


        Object char_literal403_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:598:24: ( exclusive_or_expression ( '|' exclusive_or_expression )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:599:2: exclusive_or_expression ( '|' exclusive_or_expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression3398);
            exclusive_or_expression402=exclusive_or_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusive_or_expression402.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:599:28: ( '|' exclusive_or_expression )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==200) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:599:29: '|' exclusive_or_expression
            	    {
            	    char_literal403=(Token)match(input,200,FOLLOW_200_in_inclusive_or_expression3403); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal403_tree = 
            	    (Object)adaptor.create(char_literal403)
            	    ;
            	    adaptor.addChild(root_0, char_literal403_tree);
            	    }

            	    pushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression3407);
            	    exclusive_or_expression404=exclusive_or_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusive_or_expression404.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 106, inclusive_or_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "inclusive_or_expression"


    public static class conditional_and_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "conditional_and_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:600:1: conditional_and_expression : inclusive_or_expression ( '&&' inclusive_or_expression )* ;
    public final csParser.conditional_and_expression_return conditional_and_expression() throws RecognitionException {
        csParser.conditional_and_expression_return retval = new csParser.conditional_and_expression_return();
        retval.start = input.LT(1);

        int conditional_and_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal406=null;
        csParser.inclusive_or_expression_return inclusive_or_expression405 =null;

        csParser.inclusive_or_expression_return inclusive_or_expression407 =null;


        Object string_literal406_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:600:27: ( inclusive_or_expression ( '&&' inclusive_or_expression )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:601:2: inclusive_or_expression ( '&&' inclusive_or_expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_inclusive_or_expression_in_conditional_and_expression3417);
            inclusive_or_expression405=inclusive_or_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusive_or_expression405.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:601:28: ( '&&' inclusive_or_expression )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==68) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:601:29: '&&' inclusive_or_expression
            	    {
            	    string_literal406=(Token)match(input,68,FOLLOW_68_in_conditional_and_expression3422); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal406_tree = 
            	    (Object)adaptor.create(string_literal406)
            	    ;
            	    adaptor.addChild(root_0, string_literal406_tree);
            	    }

            	    pushFollow(FOLLOW_inclusive_or_expression_in_conditional_and_expression3426);
            	    inclusive_or_expression407=inclusive_or_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusive_or_expression407.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 107, conditional_and_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "conditional_and_expression"


    public static class conditional_or_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "conditional_or_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:602:1: conditional_or_expression : conditional_and_expression ( '||' conditional_and_expression )* ;
    public final csParser.conditional_or_expression_return conditional_or_expression() throws RecognitionException {
        csParser.conditional_or_expression_return retval = new csParser.conditional_or_expression_return();
        retval.start = input.LT(1);

        int conditional_or_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal409=null;
        csParser.conditional_and_expression_return conditional_and_expression408 =null;

        csParser.conditional_and_expression_return conditional_and_expression410 =null;


        Object string_literal409_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:602:26: ( conditional_and_expression ( '||' conditional_and_expression )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:603:2: conditional_and_expression ( '||' conditional_and_expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_conditional_and_expression_in_conditional_or_expression3436);
            conditional_and_expression408=conditional_and_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditional_and_expression408.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:603:30: ( '||' conditional_and_expression )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==202) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:603:31: '||' conditional_and_expression
            	    {
            	    string_literal409=(Token)match(input,202,FOLLOW_202_in_conditional_or_expression3440); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal409_tree = 
            	    (Object)adaptor.create(string_literal409)
            	    ;
            	    adaptor.addChild(root_0, string_literal409_tree);
            	    }

            	    pushFollow(FOLLOW_conditional_and_expression_in_conditional_or_expression3444);
            	    conditional_and_expression410=conditional_and_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditional_and_expression410.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 108, conditional_or_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "conditional_or_expression"


    public static class null_coalescing_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_coalescing_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:605:1: null_coalescing_expression : conditional_or_expression ( '??' conditional_or_expression )* ;
    public final csParser.null_coalescing_expression_return null_coalescing_expression() throws RecognitionException {
        csParser.null_coalescing_expression_return retval = new csParser.null_coalescing_expression_return();
        retval.start = input.LT(1);

        int null_coalescing_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal412=null;
        csParser.conditional_or_expression_return conditional_or_expression411 =null;

        csParser.conditional_or_expression_return conditional_or_expression413 =null;


        Object string_literal412_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:605:27: ( conditional_or_expression ( '??' conditional_or_expression )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:606:2: conditional_or_expression ( '??' conditional_or_expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_conditional_or_expression_in_null_coalescing_expression3455);
            conditional_or_expression411=conditional_or_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditional_or_expression411.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:606:30: ( '??' conditional_or_expression )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==93) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:606:31: '??' conditional_or_expression
            	    {
            	    string_literal412=(Token)match(input,93,FOLLOW_93_in_null_coalescing_expression3460); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal412_tree = 
            	    (Object)adaptor.create(string_literal412)
            	    ;
            	    adaptor.addChild(root_0, string_literal412_tree);
            	    }

            	    pushFollow(FOLLOW_conditional_or_expression_in_null_coalescing_expression3464);
            	    conditional_or_expression413=conditional_or_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditional_or_expression413.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 109, null_coalescing_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "null_coalescing_expression"


    public static class conditional_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "conditional_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:607:1: conditional_expression : null_coalescing_expression ( '?' expression ':' expression )? ;
    public final csParser.conditional_expression_return conditional_expression() throws RecognitionException {
        csParser.conditional_expression_return retval = new csParser.conditional_expression_return();
        retval.start = input.LT(1);

        int conditional_expression_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal415=null;
        Token char_literal417=null;
        csParser.null_coalescing_expression_return null_coalescing_expression414 =null;

        csParser.expression_return expression416 =null;

        csParser.expression_return expression418 =null;


        Object char_literal415_tree=null;
        Object char_literal417_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:607:23: ( null_coalescing_expression ( '?' expression ':' expression )? )
            // CodeR.CSharp.Parser/src/antlr/cs.g:608:2: null_coalescing_expression ( '?' expression ':' expression )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_null_coalescing_expression_in_conditional_expression3474);
            null_coalescing_expression414=null_coalescing_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_coalescing_expression414.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:608:31: ( '?' expression ':' expression )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==92) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:608:32: '?' expression ':' expression
                    {
                    char_literal415=(Token)match(input,92,FOLLOW_92_in_conditional_expression3479); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal415_tree = 
                    (Object)adaptor.create(char_literal415)
                    ;
                    adaptor.addChild(root_0, char_literal415_tree);
                    }

                    pushFollow(FOLLOW_expression_in_conditional_expression3483);
                    expression416=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression416.getTree());

                    char_literal417=(Token)match(input,82,FOLLOW_82_in_conditional_expression3487); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal417_tree = 
                    (Object)adaptor.create(char_literal417)
                    ;
                    adaptor.addChild(root_0, char_literal417_tree);
                    }

                    pushFollow(FOLLOW_expression_in_conditional_expression3491);
                    expression418=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression418.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 110, conditional_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "conditional_expression"


    public static class lambda_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lambda_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:613:1: lambda_expression : anonymous_function_signature '=>' anonymous_function_body ;
    public final csParser.lambda_expression_return lambda_expression() throws RecognitionException {
        csParser.lambda_expression_return retval = new csParser.lambda_expression_return();
        retval.start = input.LT(1);

        int lambda_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal420=null;
        csParser.anonymous_function_signature_return anonymous_function_signature419 =null;

        csParser.anonymous_function_body_return anonymous_function_body421 =null;


        Object string_literal420_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:613:18: ( anonymous_function_signature '=>' anonymous_function_body )
            // CodeR.CSharp.Parser/src/antlr/cs.g:614:2: anonymous_function_signature '=>' anonymous_function_body
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_anonymous_function_signature_in_lambda_expression3511);
            anonymous_function_signature419=anonymous_function_signature();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_function_signature419.getTree());

            string_literal420=(Token)match(input,90,FOLLOW_90_in_lambda_expression3515); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal420_tree = 
            (Object)adaptor.create(string_literal420)
            ;
            adaptor.addChild(root_0, string_literal420_tree);
            }

            pushFollow(FOLLOW_anonymous_function_body_in_lambda_expression3519);
            anonymous_function_body421=anonymous_function_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_function_body421.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 111, lambda_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "lambda_expression"


    public static class anonymous_function_signature_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "anonymous_function_signature"
    // CodeR.CSharp.Parser/src/antlr/cs.g:615:1: anonymous_function_signature : ( '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')' | implicit_anonymous_function_parameter_list );
    public final csParser.anonymous_function_signature_return anonymous_function_signature() throws RecognitionException {
        csParser.anonymous_function_signature_return retval = new csParser.anonymous_function_signature_return();
        retval.start = input.LT(1);

        int anonymous_function_signature_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal422=null;
        Token char_literal425=null;
        csParser.explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list423 =null;

        csParser.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list424 =null;

        csParser.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list426 =null;


        Object char_literal422_tree=null;
        Object char_literal425_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:615:29: ( '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')' | implicit_anonymous_function_parameter_list )
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==71) ) {
                alt122=1;
            }
            else if ( (LA122_0==IDENTIFIER||LA122_0==98||(LA122_0 >= 100 && LA122_0 <= 101)||(LA122_0 >= 103 && LA122_0 <= 104)||LA122_0==108||LA122_0==119||LA122_0==122||LA122_0==124||LA122_0==128||LA122_0==134||LA122_0==137||LA122_0==143||(LA122_0 >= 145 && LA122_0 <= 146)||(LA122_0 >= 149 && LA122_0 <= 150)||LA122_0==154||LA122_0==156||LA122_0==159||LA122_0==162||LA122_0==164||LA122_0==169||(LA122_0 >= 173 && LA122_0 <= 174)||LA122_0==185||LA122_0==192||LA122_0==196||LA122_0==198) ) {
                alt122=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;

            }
            switch (alt122) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:616:2: '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal422=(Token)match(input,71,FOLLOW_71_in_anonymous_function_signature3526); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal422_tree = 
                    (Object)adaptor.create(char_literal422)
                    ;
                    adaptor.addChild(root_0, char_literal422_tree);
                    }

                    // CodeR.CSharp.Parser/src/antlr/cs.g:616:6: ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )?
                    int alt121=3;
                    int LA121_0 = input.LA(1);

                    if ( (LA121_0==106||LA121_0==109||LA121_0==111||LA121_0==116||LA121_0==121||LA121_0==131||LA121_0==140||LA121_0==148||LA121_0==153||LA121_0==157||LA121_0==168||LA121_0==171||LA121_0==175||LA121_0==179||(LA121_0 >= 187 && LA121_0 <= 188)||LA121_0==191||LA121_0==194) ) {
                        alt121=1;
                    }
                    else if ( (LA121_0==IDENTIFIER||LA121_0==98||(LA121_0 >= 100 && LA121_0 <= 101)||(LA121_0 >= 103 && LA121_0 <= 104)||LA121_0==108||LA121_0==119||LA121_0==122||LA121_0==124||LA121_0==128||LA121_0==134||LA121_0==137||LA121_0==143||(LA121_0 >= 145 && LA121_0 <= 146)||(LA121_0 >= 149 && LA121_0 <= 150)||LA121_0==154||LA121_0==156||LA121_0==159||LA121_0==162||LA121_0==164||LA121_0==169||(LA121_0 >= 173 && LA121_0 <= 174)||LA121_0==185||LA121_0==192||LA121_0==196||LA121_0==198) ) {
                        int LA121_2 = input.LA(2);

                        if ( (LA121_2==DOT||LA121_2==IDENTIFIER||LA121_2==72||(LA121_2 >= 83 && LA121_2 <= 84)||LA121_2==92||LA121_2==94||LA121_2==98||(LA121_2 >= 100 && LA121_2 <= 101)||(LA121_2 >= 103 && LA121_2 <= 104)||LA121_2==108||LA121_2==119||LA121_2==122||LA121_2==124||LA121_2==128||LA121_2==134||LA121_2==137||LA121_2==143||(LA121_2 >= 145 && LA121_2 <= 146)||(LA121_2 >= 149 && LA121_2 <= 150)||LA121_2==154||LA121_2==156||LA121_2==159||LA121_2==162||LA121_2==164||LA121_2==169||(LA121_2 >= 173 && LA121_2 <= 174)||LA121_2==185||LA121_2==192||LA121_2==196||LA121_2==198) ) {
                            alt121=1;
                        }
                        else if ( (LA121_2==RPAREN||LA121_2==77) ) {
                            alt121=2;
                        }
                    }
                    switch (alt121) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:616:7: explicit_anonymous_function_parameter_list
                            {
                            pushFollow(FOLLOW_explicit_anonymous_function_parameter_list_in_anonymous_function_signature3529);
                            explicit_anonymous_function_parameter_list423=explicit_anonymous_function_parameter_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_anonymous_function_parameter_list423.getTree());

                            }
                            break;
                        case 2 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:617:5: implicit_anonymous_function_parameter_list
                            {
                            pushFollow(FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature3535);
                            implicit_anonymous_function_parameter_list424=implicit_anonymous_function_parameter_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_anonymous_function_parameter_list424.getTree());

                            }
                            break;

                    }


                    char_literal425=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_anonymous_function_signature3539); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal425_tree = 
                    (Object)adaptor.create(char_literal425)
                    ;
                    adaptor.addChild(root_0, char_literal425_tree);
                    }

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:618:4: implicit_anonymous_function_parameter_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature3544);
                    implicit_anonymous_function_parameter_list426=implicit_anonymous_function_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_anonymous_function_parameter_list426.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 112, anonymous_function_signature_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "anonymous_function_signature"


    public static class implicit_anonymous_function_parameter_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implicit_anonymous_function_parameter_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:620:1: implicit_anonymous_function_parameter_list : implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )* ;
    public final csParser.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list() throws RecognitionException {
        csParser.implicit_anonymous_function_parameter_list_return retval = new csParser.implicit_anonymous_function_parameter_list_return();
        retval.start = input.LT(1);

        int implicit_anonymous_function_parameter_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal428=null;
        csParser.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter427 =null;

        csParser.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter429 =null;


        Object char_literal428_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:620:43: ( implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:621:2: implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3553);
            implicit_anonymous_function_parameter427=implicit_anonymous_function_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_anonymous_function_parameter427.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:621:42: ( ',' implicit_anonymous_function_parameter )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==77) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:621:43: ',' implicit_anonymous_function_parameter
            	    {
            	    char_literal428=(Token)match(input,77,FOLLOW_77_in_implicit_anonymous_function_parameter_list3558); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal428_tree = 
            	    (Object)adaptor.create(char_literal428)
            	    ;
            	    adaptor.addChild(root_0, char_literal428_tree);
            	    }

            	    pushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3562);
            	    implicit_anonymous_function_parameter429=implicit_anonymous_function_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_anonymous_function_parameter429.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 113, implicit_anonymous_function_parameter_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "implicit_anonymous_function_parameter_list"


    public static class implicit_anonymous_function_parameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implicit_anonymous_function_parameter"
    // CodeR.CSharp.Parser/src/antlr/cs.g:622:1: implicit_anonymous_function_parameter : identifier ;
    public final csParser.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter() throws RecognitionException {
        csParser.implicit_anonymous_function_parameter_return retval = new csParser.implicit_anonymous_function_parameter_return();
        retval.start = input.LT(1);

        int implicit_anonymous_function_parameter_StartIndex = input.index();

        Object root_0 = null;

        csParser.identifier_return identifier430 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:622:38: ( identifier )
            // CodeR.CSharp.Parser/src/antlr/cs.g:623:2: identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_implicit_anonymous_function_parameter3572);
            identifier430=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier430.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 114, implicit_anonymous_function_parameter_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "implicit_anonymous_function_parameter"


    public static class anonymous_function_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "anonymous_function_body"
    // CodeR.CSharp.Parser/src/antlr/cs.g:624:1: anonymous_function_body : ( expression | block );
    public final csParser.anonymous_function_body_return anonymous_function_body() throws RecognitionException {
        csParser.anonymous_function_body_return retval = new csParser.anonymous_function_body_return();
        retval.start = input.LT(1);

        int anonymous_function_body_StartIndex = input.index();

        Object root_0 = null;

        csParser.expression_return expression431 =null;

        csParser.block_return block432 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:624:24: ( expression | block )
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==Character_literal||LA124_0==FALSE||(LA124_0 >= Hex_number && LA124_0 <= IDENTIFIER)||(LA124_0 >= MINUS && LA124_0 <= NUMBER)||LA124_0==Real_literal||LA124_0==STRINGLITERAL||LA124_0==TRUE||LA124_0==Verbatim_string_literal||LA124_0==64||LA124_0==69||(LA124_0 >= 71 && LA124_0 <= 72)||(LA124_0 >= 74 && LA124_0 <= 75)||LA124_0==78||LA124_0==98||(LA124_0 >= 100 && LA124_0 <= 101)||(LA124_0 >= 103 && LA124_0 <= 106)||(LA124_0 >= 108 && LA124_0 <= 109)||(LA124_0 >= 111 && LA124_0 <= 112)||(LA124_0 >= 116 && LA124_0 <= 119)||(LA124_0 >= 121 && LA124_0 <= 122)||LA124_0==124||LA124_0==128||LA124_0==131||LA124_0==134||LA124_0==137||LA124_0==140||LA124_0==143||(LA124_0 >= 145 && LA124_0 <= 146)||(LA124_0 >= 148 && LA124_0 <= 150)||(LA124_0 >= 152 && LA124_0 <= 154)||LA124_0==156||LA124_0==159||LA124_0==162||LA124_0==164||LA124_0==169||LA124_0==171||(LA124_0 >= 173 && LA124_0 <= 176)||LA124_0==179||LA124_0==182||(LA124_0 >= 185 && LA124_0 <= 189)||(LA124_0 >= 191 && LA124_0 <= 192)||LA124_0==196||LA124_0==198||LA124_0==204) ) {
                alt124=1;
            }
            else if ( (LA124_0==SEMI||LA124_0==199) ) {
                alt124=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;

            }
            switch (alt124) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:625:2: expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expression_in_anonymous_function_body3579);
                    expression431=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression431.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:626:4: block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_in_anonymous_function_body3584);
                    block432=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block432.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 115, anonymous_function_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "anonymous_function_body"


    public static class query_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:631:1: query_expression : from_clause query_body ;
    public final csParser.query_expression_return query_expression() throws RecognitionException {
        csParser.query_expression_return retval = new csParser.query_expression_return();
        retval.start = input.LT(1);

        int query_expression_StartIndex = input.index();

        Object root_0 = null;

        csParser.from_clause_return from_clause433 =null;

        csParser.query_body_return query_body434 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:631:17: ( from_clause query_body )
            // CodeR.CSharp.Parser/src/antlr/cs.g:632:2: from_clause query_body
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_from_clause_in_query_expression3596);
            from_clause433=from_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, from_clause433.getTree());

            pushFollow(FOLLOW_query_body_in_query_expression3600);
            query_body434=query_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, query_body434.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 116, query_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "query_expression"


    public static class query_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query_body"
    // CodeR.CSharp.Parser/src/antlr/cs.g:633:1: query_body : ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )? ;
    public final csParser.query_body_return query_body() throws RecognitionException {
        csParser.query_body_return retval = new csParser.query_body_return();
        retval.start = input.LT(1);

        int query_body_StartIndex = input.index();

        Object root_0 = null;

        csParser.query_body_clauses_return query_body_clauses435 =null;

        csParser.select_or_group_clause_return select_or_group_clause436 =null;

        csParser.query_continuation_return query_continuation437 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:633:11: ( ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )? )
            // CodeR.CSharp.Parser/src/antlr/cs.g:635:2: ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )?
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:635:2: ( query_body_clauses )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==134||(LA125_0 >= 145 && LA125_0 <= 146)||LA125_0==156||LA125_0==196) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:635:2: query_body_clauses
                    {
                    pushFollow(FOLLOW_query_body_clauses_in_query_body3610);
                    query_body_clauses435=query_body_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query_body_clauses435.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_select_or_group_clause_in_query_body3615);
            select_or_group_clause436=select_or_group_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_or_group_clause436.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:635:49: ( ( 'into' )=> query_continuation )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==143) ) {
                int LA126_1 = input.LA(2);

                if ( (synpred23_cs()) ) {
                    alt126=1;
                }
            }
            switch (alt126) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:635:50: ( 'into' )=> query_continuation
                    {
                    pushFollow(FOLLOW_query_continuation_in_query_body3626);
                    query_continuation437=query_continuation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query_continuation437.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 117, query_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "query_body"


    public static class query_continuation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query_continuation"
    // CodeR.CSharp.Parser/src/antlr/cs.g:636:1: query_continuation : 'into' identifier query_body ;
    public final csParser.query_continuation_return query_continuation() throws RecognitionException {
        csParser.query_continuation_return retval = new csParser.query_continuation_return();
        retval.start = input.LT(1);

        int query_continuation_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal438=null;
        csParser.identifier_return identifier439 =null;

        csParser.query_body_return query_body440 =null;


        Object string_literal438_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:636:19: ( 'into' identifier query_body )
            // CodeR.CSharp.Parser/src/antlr/cs.g:637:2: 'into' identifier query_body
            {
            root_0 = (Object)adaptor.nil();


            string_literal438=(Token)match(input,143,FOLLOW_143_in_query_continuation3636); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal438_tree = 
            (Object)adaptor.create(string_literal438)
            ;
            adaptor.addChild(root_0, string_literal438_tree);
            }

            pushFollow(FOLLOW_identifier_in_query_continuation3640);
            identifier439=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier439.getTree());

            pushFollow(FOLLOW_query_body_in_query_continuation3644);
            query_body440=query_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, query_body440.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 118, query_continuation_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "query_continuation"


    public static class query_body_clauses_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query_body_clauses"
    // CodeR.CSharp.Parser/src/antlr/cs.g:638:1: query_body_clauses : ( query_body_clause )+ ;
    public final csParser.query_body_clauses_return query_body_clauses() throws RecognitionException {
        csParser.query_body_clauses_return retval = new csParser.query_body_clauses_return();
        retval.start = input.LT(1);

        int query_body_clauses_StartIndex = input.index();

        Object root_0 = null;

        csParser.query_body_clause_return query_body_clause441 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:638:19: ( ( query_body_clause )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:639:2: ( query_body_clause )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:639:2: ( query_body_clause )+
            int cnt127=0;
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==134||(LA127_0 >= 145 && LA127_0 <= 146)||LA127_0==156||LA127_0==196) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:639:2: query_body_clause
            	    {
            	    pushFollow(FOLLOW_query_body_clause_in_query_body_clauses3651);
            	    query_body_clause441=query_body_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, query_body_clause441.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt127 >= 1 ) break loop127;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(127, input);
                        throw eee;
                }
                cnt127++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 119, query_body_clauses_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "query_body_clauses"


    public static class query_body_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query_body_clause"
    // CodeR.CSharp.Parser/src/antlr/cs.g:640:1: query_body_clause : ( from_clause | let_clause | where_clause | join_clause | orderby_clause );
    public final csParser.query_body_clause_return query_body_clause() throws RecognitionException {
        csParser.query_body_clause_return retval = new csParser.query_body_clause_return();
        retval.start = input.LT(1);

        int query_body_clause_StartIndex = input.index();

        Object root_0 = null;

        csParser.from_clause_return from_clause442 =null;

        csParser.let_clause_return let_clause443 =null;

        csParser.where_clause_return where_clause444 =null;

        csParser.join_clause_return join_clause445 =null;

        csParser.orderby_clause_return orderby_clause446 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:640:18: ( from_clause | let_clause | where_clause | join_clause | orderby_clause )
            int alt128=5;
            switch ( input.LA(1) ) {
            case 134:
                {
                alt128=1;
                }
                break;
            case 146:
                {
                alt128=2;
                }
                break;
            case 196:
                {
                alt128=3;
                }
                break;
            case 145:
                {
                alt128=4;
                }
                break;
            case 156:
                {
                alt128=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;

            }

            switch (alt128) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:641:2: from_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_from_clause_in_query_body_clause3660);
                    from_clause442=from_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, from_clause442.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:642:4: let_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_let_clause_in_query_body_clause3665);
                    let_clause443=let_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, let_clause443.getTree());

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:643:4: where_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_where_clause_in_query_body_clause3670);
                    where_clause444=where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause444.getTree());

                    }
                    break;
                case 4 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:644:4: join_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_join_clause_in_query_body_clause3675);
                    join_clause445=join_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_clause445.getTree());

                    }
                    break;
                case 5 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:645:4: orderby_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_orderby_clause_in_query_body_clause3680);
                    orderby_clause446=orderby_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderby_clause446.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 120, query_body_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "query_body_clause"


    public static class from_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "from_clause"
    // CodeR.CSharp.Parser/src/antlr/cs.g:646:1: from_clause : 'from' ( type )? identifier 'in' expression ;
    public final csParser.from_clause_return from_clause() throws RecognitionException {
        csParser.from_clause_return retval = new csParser.from_clause_return();
        retval.start = input.LT(1);

        int from_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal447=null;
        Token string_literal450=null;
        csParser.type_return type448 =null;

        csParser.identifier_return identifier449 =null;

        csParser.expression_return expression451 =null;


        Object string_literal447_tree=null;
        Object string_literal450_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:646:12: ( 'from' ( type )? identifier 'in' expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:647:2: 'from' ( type )? identifier 'in' expression
            {
            root_0 = (Object)adaptor.nil();


            string_literal447=(Token)match(input,134,FOLLOW_134_in_from_clause3687); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal447_tree = 
            (Object)adaptor.create(string_literal447)
            ;
            adaptor.addChild(root_0, string_literal447_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:647:11: ( type )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==106||LA129_0==109||LA129_0==111||LA129_0==116||LA129_0==121||LA129_0==131||LA129_0==140||LA129_0==148||LA129_0==153||LA129_0==171||LA129_0==175||LA129_0==179||(LA129_0 >= 187 && LA129_0 <= 188)||LA129_0==191||LA129_0==194) ) {
                alt129=1;
            }
            else if ( (LA129_0==IDENTIFIER||LA129_0==98||(LA129_0 >= 100 && LA129_0 <= 101)||(LA129_0 >= 103 && LA129_0 <= 104)||LA129_0==108||LA129_0==119||LA129_0==122||LA129_0==124||LA129_0==128||LA129_0==134||LA129_0==137||LA129_0==143||(LA129_0 >= 145 && LA129_0 <= 146)||(LA129_0 >= 149 && LA129_0 <= 150)||LA129_0==154||LA129_0==156||LA129_0==159||LA129_0==162||LA129_0==164||LA129_0==169||(LA129_0 >= 173 && LA129_0 <= 174)||LA129_0==185||LA129_0==192||LA129_0==196||LA129_0==198) ) {
                int LA129_2 = input.LA(2);

                if ( (LA129_2==DOT||LA129_2==IDENTIFIER||LA129_2==72||(LA129_2 >= 83 && LA129_2 <= 84)||LA129_2==92||LA129_2==94||LA129_2==98||(LA129_2 >= 100 && LA129_2 <= 101)||(LA129_2 >= 103 && LA129_2 <= 104)||LA129_2==108||LA129_2==119||LA129_2==122||LA129_2==124||LA129_2==128||LA129_2==134||LA129_2==137||LA129_2==143||(LA129_2 >= 145 && LA129_2 <= 146)||(LA129_2 >= 149 && LA129_2 <= 150)||LA129_2==154||LA129_2==156||LA129_2==159||LA129_2==162||LA129_2==164||LA129_2==169||(LA129_2 >= 173 && LA129_2 <= 174)||LA129_2==185||LA129_2==192||LA129_2==196||LA129_2==198) ) {
                    alt129=1;
                }
            }
            switch (alt129) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:647:11: type
                    {
                    pushFollow(FOLLOW_type_in_from_clause3691);
                    type448=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type448.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_identifier_in_from_clause3696);
            identifier449=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier449.getTree());

            string_literal450=(Token)match(input,139,FOLLOW_139_in_from_clause3700); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal450_tree = 
            (Object)adaptor.create(string_literal450)
            ;
            adaptor.addChild(root_0, string_literal450_tree);
            }

            pushFollow(FOLLOW_expression_in_from_clause3704);
            expression451=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression451.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 121, from_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "from_clause"


    public static class join_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_clause"
    // CodeR.CSharp.Parser/src/antlr/cs.g:648:1: join_clause : 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? ;
    public final csParser.join_clause_return join_clause() throws RecognitionException {
        csParser.join_clause_return retval = new csParser.join_clause_return();
        retval.start = input.LT(1);

        int join_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal452=null;
        Token string_literal455=null;
        Token string_literal457=null;
        Token string_literal459=null;
        Token string_literal461=null;
        csParser.type_return type453 =null;

        csParser.identifier_return identifier454 =null;

        csParser.expression_return expression456 =null;

        csParser.expression_return expression458 =null;

        csParser.expression_return expression460 =null;

        csParser.identifier_return identifier462 =null;


        Object string_literal452_tree=null;
        Object string_literal455_tree=null;
        Object string_literal457_tree=null;
        Object string_literal459_tree=null;
        Object string_literal461_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:648:12: ( 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? )
            // CodeR.CSharp.Parser/src/antlr/cs.g:649:2: 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal452=(Token)match(input,145,FOLLOW_145_in_join_clause3712); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal452_tree = 
            (Object)adaptor.create(string_literal452)
            ;
            adaptor.addChild(root_0, string_literal452_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:649:11: ( type )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==106||LA130_0==109||LA130_0==111||LA130_0==116||LA130_0==121||LA130_0==131||LA130_0==140||LA130_0==148||LA130_0==153||LA130_0==171||LA130_0==175||LA130_0==179||(LA130_0 >= 187 && LA130_0 <= 188)||LA130_0==191||LA130_0==194) ) {
                alt130=1;
            }
            else if ( (LA130_0==IDENTIFIER||LA130_0==98||(LA130_0 >= 100 && LA130_0 <= 101)||(LA130_0 >= 103 && LA130_0 <= 104)||LA130_0==108||LA130_0==119||LA130_0==122||LA130_0==124||LA130_0==128||LA130_0==134||LA130_0==137||LA130_0==143||(LA130_0 >= 145 && LA130_0 <= 146)||(LA130_0 >= 149 && LA130_0 <= 150)||LA130_0==154||LA130_0==156||LA130_0==159||LA130_0==162||LA130_0==164||LA130_0==169||(LA130_0 >= 173 && LA130_0 <= 174)||LA130_0==185||LA130_0==192||LA130_0==196||LA130_0==198) ) {
                int LA130_2 = input.LA(2);

                if ( (LA130_2==DOT||LA130_2==IDENTIFIER||LA130_2==72||(LA130_2 >= 83 && LA130_2 <= 84)||LA130_2==92||LA130_2==94||LA130_2==98||(LA130_2 >= 100 && LA130_2 <= 101)||(LA130_2 >= 103 && LA130_2 <= 104)||LA130_2==108||LA130_2==119||LA130_2==122||LA130_2==124||LA130_2==128||LA130_2==134||LA130_2==137||LA130_2==143||(LA130_2 >= 145 && LA130_2 <= 146)||(LA130_2 >= 149 && LA130_2 <= 150)||LA130_2==154||LA130_2==156||LA130_2==159||LA130_2==162||LA130_2==164||LA130_2==169||(LA130_2 >= 173 && LA130_2 <= 174)||LA130_2==185||LA130_2==192||LA130_2==196||LA130_2==198) ) {
                    alt130=1;
                }
            }
            switch (alt130) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:649:11: type
                    {
                    pushFollow(FOLLOW_type_in_join_clause3716);
                    type453=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type453.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_identifier_in_join_clause3721);
            identifier454=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier454.getTree());

            string_literal455=(Token)match(input,139,FOLLOW_139_in_join_clause3725); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal455_tree = 
            (Object)adaptor.create(string_literal455)
            ;
            adaptor.addChild(root_0, string_literal455_tree);
            }

            pushFollow(FOLLOW_expression_in_join_clause3729);
            expression456=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression456.getTree());

            string_literal457=(Token)match(input,154,FOLLOW_154_in_join_clause3733); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal457_tree = 
            (Object)adaptor.create(string_literal457)
            ;
            adaptor.addChild(root_0, string_literal457_tree);
            }

            pushFollow(FOLLOW_expression_in_join_clause3737);
            expression458=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression458.getTree());

            string_literal459=(Token)match(input,124,FOLLOW_124_in_join_clause3741); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal459_tree = 
            (Object)adaptor.create(string_literal459)
            ;
            adaptor.addChild(root_0, string_literal459_tree);
            }

            pushFollow(FOLLOW_expression_in_join_clause3745);
            expression460=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression460.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:649:94: ( 'into' identifier )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==143) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:649:95: 'into' identifier
                    {
                    string_literal461=(Token)match(input,143,FOLLOW_143_in_join_clause3748); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal461_tree = 
                    (Object)adaptor.create(string_literal461)
                    ;
                    adaptor.addChild(root_0, string_literal461_tree);
                    }

                    pushFollow(FOLLOW_identifier_in_join_clause3750);
                    identifier462=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier462.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 122, join_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "join_clause"


    public static class let_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "let_clause"
    // CodeR.CSharp.Parser/src/antlr/cs.g:650:1: let_clause : 'let' identifier '=' expression ;
    public final csParser.let_clause_return let_clause() throws RecognitionException {
        csParser.let_clause_return retval = new csParser.let_clause_return();
        retval.start = input.LT(1);

        int let_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal463=null;
        Token char_literal465=null;
        csParser.identifier_return identifier464 =null;

        csParser.expression_return expression466 =null;


        Object string_literal463_tree=null;
        Object char_literal465_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:650:11: ( 'let' identifier '=' expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:651:2: 'let' identifier '=' expression
            {
            root_0 = (Object)adaptor.nil();


            string_literal463=(Token)match(input,146,FOLLOW_146_in_let_clause3760); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal463_tree = 
            (Object)adaptor.create(string_literal463)
            ;
            adaptor.addChild(root_0, string_literal463_tree);
            }

            pushFollow(FOLLOW_identifier_in_let_clause3764);
            identifier464=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier464.getTree());

            char_literal465=(Token)match(input,88,FOLLOW_88_in_let_clause3768); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal465_tree = 
            (Object)adaptor.create(char_literal465)
            ;
            adaptor.addChild(root_0, char_literal465_tree);
            }

            pushFollow(FOLLOW_expression_in_let_clause3772);
            expression466=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression466.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 123, let_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "let_clause"


    public static class orderby_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "orderby_clause"
    // CodeR.CSharp.Parser/src/antlr/cs.g:652:1: orderby_clause : 'orderby' ordering_list ;
    public final csParser.orderby_clause_return orderby_clause() throws RecognitionException {
        csParser.orderby_clause_return retval = new csParser.orderby_clause_return();
        retval.start = input.LT(1);

        int orderby_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal467=null;
        csParser.ordering_list_return ordering_list468 =null;


        Object string_literal467_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:652:15: ( 'orderby' ordering_list )
            // CodeR.CSharp.Parser/src/antlr/cs.g:653:2: 'orderby' ordering_list
            {
            root_0 = (Object)adaptor.nil();


            string_literal467=(Token)match(input,156,FOLLOW_156_in_orderby_clause3779); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal467_tree = 
            (Object)adaptor.create(string_literal467)
            ;
            adaptor.addChild(root_0, string_literal467_tree);
            }

            pushFollow(FOLLOW_ordering_list_in_orderby_clause3783);
            ordering_list468=ordering_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ordering_list468.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 124, orderby_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "orderby_clause"


    public static class ordering_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ordering_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:654:1: ordering_list : ordering ( ',' ordering )* ;
    public final csParser.ordering_list_return ordering_list() throws RecognitionException {
        csParser.ordering_list_return retval = new csParser.ordering_list_return();
        retval.start = input.LT(1);

        int ordering_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal470=null;
        csParser.ordering_return ordering469 =null;

        csParser.ordering_return ordering471 =null;


        Object char_literal470_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:654:14: ( ordering ( ',' ordering )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:655:2: ordering ( ',' ordering )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_ordering_in_ordering_list3791);
            ordering469=ordering();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ordering469.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:655:13: ( ',' ordering )*
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==77) ) {
                    alt132=1;
                }


                switch (alt132) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:655:14: ',' ordering
            	    {
            	    char_literal470=(Token)match(input,77,FOLLOW_77_in_ordering_list3796); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal470_tree = 
            	    (Object)adaptor.create(char_literal470)
            	    ;
            	    adaptor.addChild(root_0, char_literal470_tree);
            	    }

            	    pushFollow(FOLLOW_ordering_in_ordering_list3800);
            	    ordering471=ordering();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ordering471.getTree());

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 125, ordering_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "ordering_list"


    public static class ordering_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ordering"
    // CodeR.CSharp.Parser/src/antlr/cs.g:656:1: ordering : expression ordering_direction ;
    public final csParser.ordering_return ordering() throws RecognitionException {
        csParser.ordering_return retval = new csParser.ordering_return();
        retval.start = input.LT(1);

        int ordering_StartIndex = input.index();

        Object root_0 = null;

        csParser.expression_return expression472 =null;

        csParser.ordering_direction_return ordering_direction473 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:656:9: ( expression ordering_direction )
            // CodeR.CSharp.Parser/src/antlr/cs.g:657:2: expression ordering_direction
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expression_in_ordering3810);
            expression472=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression472.getTree());

            pushFollow(FOLLOW_ordering_direction_in_ordering3815);
            ordering_direction473=ordering_direction();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ordering_direction473.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 126, ordering_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "ordering"


    public static class ordering_direction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ordering_direction"
    // CodeR.CSharp.Parser/src/antlr/cs.g:659:1: ordering_direction : ( 'ascending' | 'descending' );
    public final csParser.ordering_direction_return ordering_direction() throws RecognitionException {
        csParser.ordering_direction_return retval = new csParser.ordering_direction_return();
        retval.start = input.LT(1);

        int ordering_direction_StartIndex = input.index();

        Object root_0 = null;

        Token set474=null;

        Object set474_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:659:19: ( 'ascending' | 'descending' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:
            {
            root_0 = (Object)adaptor.nil();


            set474=(Token)input.LT(1);

            if ( input.LA(1)==103||input.LA(1)==119 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set474)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 127, ordering_direction_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "ordering_direction"


    public static class select_or_group_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "select_or_group_clause"
    // CodeR.CSharp.Parser/src/antlr/cs.g:662:1: select_or_group_clause : ( select_clause | group_clause );
    public final csParser.select_or_group_clause_return select_or_group_clause() throws RecognitionException {
        csParser.select_or_group_clause_return retval = new csParser.select_or_group_clause_return();
        retval.start = input.LT(1);

        int select_or_group_clause_StartIndex = input.index();

        Object root_0 = null;

        csParser.select_clause_return select_clause475 =null;

        csParser.group_clause_return group_clause476 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:662:23: ( select_clause | group_clause )
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==173) ) {
                alt133=1;
            }
            else if ( (LA133_0==137) ) {
                alt133=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;

            }
            switch (alt133) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:663:2: select_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_select_clause_in_select_or_group_clause3837);
                    select_clause475=select_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_clause475.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:664:4: group_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_group_clause_in_select_or_group_clause3842);
                    group_clause476=group_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, group_clause476.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 128, select_or_group_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "select_or_group_clause"


    public static class select_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "select_clause"
    // CodeR.CSharp.Parser/src/antlr/cs.g:665:1: select_clause : 'select' expression ;
    public final csParser.select_clause_return select_clause() throws RecognitionException {
        csParser.select_clause_return retval = new csParser.select_clause_return();
        retval.start = input.LT(1);

        int select_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal477=null;
        csParser.expression_return expression478 =null;


        Object string_literal477_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:665:14: ( 'select' expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:666:2: 'select' expression
            {
            root_0 = (Object)adaptor.nil();


            string_literal477=(Token)match(input,173,FOLLOW_173_in_select_clause3850); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal477_tree = 
            (Object)adaptor.create(string_literal477)
            ;
            adaptor.addChild(root_0, string_literal477_tree);
            }

            pushFollow(FOLLOW_expression_in_select_clause3854);
            expression478=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression478.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 129, select_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "select_clause"


    public static class group_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_clause"
    // CodeR.CSharp.Parser/src/antlr/cs.g:667:1: group_clause : 'group' expression 'by' expression ;
    public final csParser.group_clause_return group_clause() throws RecognitionException {
        csParser.group_clause_return retval = new csParser.group_clause_return();
        retval.start = input.LT(1);

        int group_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal479=null;
        Token string_literal481=null;
        csParser.expression_return expression480 =null;

        csParser.expression_return expression482 =null;


        Object string_literal479_tree=null;
        Object string_literal481_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:667:13: ( 'group' expression 'by' expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:668:2: 'group' expression 'by' expression
            {
            root_0 = (Object)adaptor.nil();


            string_literal479=(Token)match(input,137,FOLLOW_137_in_group_clause3862); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal479_tree = 
            (Object)adaptor.create(string_literal479)
            ;
            adaptor.addChild(root_0, string_literal479_tree);
            }

            pushFollow(FOLLOW_expression_in_group_clause3866);
            expression480=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression480.getTree());

            string_literal481=(Token)match(input,108,FOLLOW_108_in_group_clause3870); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal481_tree = 
            (Object)adaptor.create(string_literal481)
            ;
            adaptor.addChild(root_0, string_literal481_tree);
            }

            pushFollow(FOLLOW_expression_in_group_clause3874);
            expression482=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression482.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 130, group_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "group_clause"


    public static class where_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "where_clause"
    // CodeR.CSharp.Parser/src/antlr/cs.g:669:1: where_clause : 'where' boolean_expression ;
    public final csParser.where_clause_return where_clause() throws RecognitionException {
        csParser.where_clause_return retval = new csParser.where_clause_return();
        retval.start = input.LT(1);

        int where_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal483=null;
        csParser.boolean_expression_return boolean_expression484 =null;


        Object string_literal483_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:669:13: ( 'where' boolean_expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:670:2: 'where' boolean_expression
            {
            root_0 = (Object)adaptor.nil();


            string_literal483=(Token)match(input,196,FOLLOW_196_in_where_clause3882); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal483_tree = 
            (Object)adaptor.create(string_literal483)
            ;
            adaptor.addChild(root_0, string_literal483_tree);
            }

            pushFollow(FOLLOW_boolean_expression_in_where_clause3886);
            boolean_expression484=boolean_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, boolean_expression484.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 131, where_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "where_clause"


    public static class boolean_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "boolean_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:671:1: boolean_expression : expression ;
    public final csParser.boolean_expression_return boolean_expression() throws RecognitionException {
        csParser.boolean_expression_return retval = new csParser.boolean_expression_return();
        retval.start = input.LT(1);

        int boolean_expression_StartIndex = input.index();

        Object root_0 = null;

        csParser.expression_return expression485 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:671:19: ( expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:672:2: expression
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expression_in_boolean_expression3894);
            expression485=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression485.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 132, boolean_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "boolean_expression"


    public static class global_attributes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "global_attributes"
    // CodeR.CSharp.Parser/src/antlr/cs.g:677:1: global_attributes : ( global_attribute )+ ;
    public final csParser.global_attributes_return global_attributes() throws RecognitionException {
        csParser.global_attributes_return retval = new csParser.global_attributes_return();
        retval.start = input.LT(1);

        int global_attributes_StartIndex = input.index();

        Object root_0 = null;

        csParser.global_attribute_return global_attribute486 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:677:18: ( ( global_attribute )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:678:2: ( global_attribute )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:678:2: ( global_attribute )+
            int cnt134=0;
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);

                if ( (LA134_0==94) ) {
                    int LA134_2 = input.LA(2);

                    if ( (LA134_2==104||LA134_2==150) ) {
                        int LA134_3 = input.LA(3);

                        if ( (LA134_3==82) ) {
                            alt134=1;
                        }


                    }


                }


                switch (alt134) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:678:2: global_attribute
            	    {
            	    pushFollow(FOLLOW_global_attribute_in_global_attributes3906);
            	    global_attribute486=global_attribute();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, global_attribute486.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt134 >= 1 ) break loop134;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(134, input);
                        throw eee;
                }
                cnt134++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 133, global_attributes_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "global_attributes"


    public static class global_attribute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "global_attribute"
    // CodeR.CSharp.Parser/src/antlr/cs.g:679:1: global_attribute : '[' global_attribute_target_specifier attribute_list ( ',' )? ']' ;
    public final csParser.global_attribute_return global_attribute() throws RecognitionException {
        csParser.global_attribute_return retval = new csParser.global_attribute_return();
        retval.start = input.LT(1);

        int global_attribute_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal487=null;
        Token char_literal490=null;
        Token char_literal491=null;
        csParser.global_attribute_target_specifier_return global_attribute_target_specifier488 =null;

        csParser.attribute_list_return attribute_list489 =null;


        Object char_literal487_tree=null;
        Object char_literal490_tree=null;
        Object char_literal491_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:679:17: ( '[' global_attribute_target_specifier attribute_list ( ',' )? ']' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:680:2: '[' global_attribute_target_specifier attribute_list ( ',' )? ']'
            {
            root_0 = (Object)adaptor.nil();


            char_literal487=(Token)match(input,94,FOLLOW_94_in_global_attribute3916); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal487_tree = 
            (Object)adaptor.create(char_literal487)
            ;
            adaptor.addChild(root_0, char_literal487_tree);
            }

            pushFollow(FOLLOW_global_attribute_target_specifier_in_global_attribute3920);
            global_attribute_target_specifier488=global_attribute_target_specifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, global_attribute_target_specifier488.getTree());

            pushFollow(FOLLOW_attribute_list_in_global_attribute3924);
            attribute_list489=attribute_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_list489.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:680:61: ( ',' )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==77) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:680:61: ','
                    {
                    char_literal490=(Token)match(input,77,FOLLOW_77_in_global_attribute3928); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal490_tree = 
                    (Object)adaptor.create(char_literal490)
                    ;
                    adaptor.addChild(root_0, char_literal490_tree);
                    }

                    }
                    break;

            }


            char_literal491=(Token)match(input,95,FOLLOW_95_in_global_attribute3933); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal491_tree = 
            (Object)adaptor.create(char_literal491)
            ;
            adaptor.addChild(root_0, char_literal491_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 134, global_attribute_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "global_attribute"


    public static class global_attribute_target_specifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "global_attribute_target_specifier"
    // CodeR.CSharp.Parser/src/antlr/cs.g:681:1: global_attribute_target_specifier : global_attribute_target ':' ;
    public final csParser.global_attribute_target_specifier_return global_attribute_target_specifier() throws RecognitionException {
        csParser.global_attribute_target_specifier_return retval = new csParser.global_attribute_target_specifier_return();
        retval.start = input.LT(1);

        int global_attribute_target_specifier_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal493=null;
        csParser.global_attribute_target_return global_attribute_target492 =null;


        Object char_literal493_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:681:34: ( global_attribute_target ':' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:682:2: global_attribute_target ':'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_global_attribute_target_in_global_attribute_target_specifier3942);
            global_attribute_target492=global_attribute_target();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, global_attribute_target492.getTree());

            char_literal493=(Token)match(input,82,FOLLOW_82_in_global_attribute_target_specifier3946); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal493_tree = 
            (Object)adaptor.create(char_literal493)
            ;
            adaptor.addChild(root_0, char_literal493_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 135, global_attribute_target_specifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "global_attribute_target_specifier"


    public static class global_attribute_target_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "global_attribute_target"
    // CodeR.CSharp.Parser/src/antlr/cs.g:683:1: global_attribute_target : ( 'assembly' | 'module' );
    public final csParser.global_attribute_target_return global_attribute_target() throws RecognitionException {
        csParser.global_attribute_target_return retval = new csParser.global_attribute_target_return();
        retval.start = input.LT(1);

        int global_attribute_target_StartIndex = input.index();

        Object root_0 = null;

        Token set494=null;

        Object set494_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:683:24: ( 'assembly' | 'module' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:
            {
            root_0 = (Object)adaptor.nil();


            set494=(Token)input.LT(1);

            if ( input.LA(1)==104||input.LA(1)==150 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set494)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 136, global_attribute_target_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "global_attribute_target"


    public static class attributes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attributes"
    // CodeR.CSharp.Parser/src/antlr/cs.g:685:1: attributes : attribute_sections ;
    public final csParser.attributes_return attributes() throws RecognitionException {
        csParser.attributes_return retval = new csParser.attributes_return();
        retval.start = input.LT(1);

        int attributes_StartIndex = input.index();

        Object root_0 = null;

        csParser.attribute_sections_return attribute_sections495 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:685:11: ( attribute_sections )
            // CodeR.CSharp.Parser/src/antlr/cs.g:686:2: attribute_sections
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_attribute_sections_in_attributes3968);
            attribute_sections495=attribute_sections();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_sections495.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 137, attributes_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attributes"


    public static class attribute_sections_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attribute_sections"
    // CodeR.CSharp.Parser/src/antlr/cs.g:687:1: attribute_sections : ( attribute_section )+ ;
    public final csParser.attribute_sections_return attribute_sections() throws RecognitionException {
        csParser.attribute_sections_return retval = new csParser.attribute_sections_return();
        retval.start = input.LT(1);

        int attribute_sections_StartIndex = input.index();

        Object root_0 = null;

        csParser.attribute_section_return attribute_section496 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:687:19: ( ( attribute_section )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:688:2: ( attribute_section )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:688:2: ( attribute_section )+
            int cnt136=0;
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==94) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:688:2: attribute_section
            	    {
            	    pushFollow(FOLLOW_attribute_section_in_attribute_sections3977);
            	    attribute_section496=attribute_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_section496.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt136 >= 1 ) break loop136;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(136, input);
                        throw eee;
                }
                cnt136++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 138, attribute_sections_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attribute_sections"


    public static class attribute_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attribute_section"
    // CodeR.CSharp.Parser/src/antlr/cs.g:689:1: attribute_section : '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' ;
    public final csParser.attribute_section_return attribute_section() throws RecognitionException {
        csParser.attribute_section_return retval = new csParser.attribute_section_return();
        retval.start = input.LT(1);

        int attribute_section_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal497=null;
        Token char_literal500=null;
        Token char_literal501=null;
        csParser.attribute_target_specifier_return attribute_target_specifier498 =null;

        csParser.attribute_list_return attribute_list499 =null;


        Object char_literal497_tree=null;
        Object char_literal500_tree=null;
        Object char_literal501_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:689:18: ( '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:690:2: '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']'
            {
            root_0 = (Object)adaptor.nil();


            char_literal497=(Token)match(input,94,FOLLOW_94_in_attribute_section3987); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal497_tree = 
            (Object)adaptor.create(char_literal497)
            ;
            adaptor.addChild(root_0, char_literal497_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:690:8: ( attribute_target_specifier )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==128||LA137_0==149||LA137_0==159||LA137_0==164||LA137_0==185) ) {
                int LA137_1 = input.LA(2);

                if ( (LA137_1==82) ) {
                    alt137=1;
                }
            }
            else if ( (LA137_0==125||LA137_0==170) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:690:8: attribute_target_specifier
                    {
                    pushFollow(FOLLOW_attribute_target_specifier_in_attribute_section3991);
                    attribute_target_specifier498=attribute_target_specifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_target_specifier498.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_attribute_list_in_attribute_section3996);
            attribute_list499=attribute_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_list499.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:690:55: ( ',' )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==77) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:690:55: ','
                    {
                    char_literal500=(Token)match(input,77,FOLLOW_77_in_attribute_section4000); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal500_tree = 
                    (Object)adaptor.create(char_literal500)
                    ;
                    adaptor.addChild(root_0, char_literal500_tree);
                    }

                    }
                    break;

            }


            char_literal501=(Token)match(input,95,FOLLOW_95_in_attribute_section4005); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal501_tree = 
            (Object)adaptor.create(char_literal501)
            ;
            adaptor.addChild(root_0, char_literal501_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 139, attribute_section_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attribute_section"


    public static class attribute_target_specifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attribute_target_specifier"
    // CodeR.CSharp.Parser/src/antlr/cs.g:691:1: attribute_target_specifier : attribute_target ':' ;
    public final csParser.attribute_target_specifier_return attribute_target_specifier() throws RecognitionException {
        csParser.attribute_target_specifier_return retval = new csParser.attribute_target_specifier_return();
        retval.start = input.LT(1);

        int attribute_target_specifier_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal503=null;
        csParser.attribute_target_return attribute_target502 =null;


        Object char_literal503_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:691:27: ( attribute_target ':' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:692:2: attribute_target ':'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_attribute_target_in_attribute_target_specifier4014);
            attribute_target502=attribute_target();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_target502.getTree());

            char_literal503=(Token)match(input,82,FOLLOW_82_in_attribute_target_specifier4018); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal503_tree = 
            (Object)adaptor.create(char_literal503)
            ;
            adaptor.addChild(root_0, char_literal503_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 140, attribute_target_specifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attribute_target_specifier"


    public static class attribute_target_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attribute_target"
    // CodeR.CSharp.Parser/src/antlr/cs.g:693:1: attribute_target : ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' );
    public final csParser.attribute_target_return attribute_target() throws RecognitionException {
        csParser.attribute_target_return retval = new csParser.attribute_target_return();
        retval.start = input.LT(1);

        int attribute_target_StartIndex = input.index();

        Object root_0 = null;

        Token set504=null;

        Object set504_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:693:17: ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:
            {
            root_0 = (Object)adaptor.nil();


            set504=(Token)input.LT(1);

            if ( input.LA(1)==125||input.LA(1)==128||input.LA(1)==149||input.LA(1)==159||input.LA(1)==164||input.LA(1)==170||input.LA(1)==185 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set504)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 141, attribute_target_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attribute_target"


    public static class attribute_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attribute_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:695:1: attribute_list : attribute ( ',' attribute )* ;
    public final csParser.attribute_list_return attribute_list() throws RecognitionException {
        csParser.attribute_list_return retval = new csParser.attribute_list_return();
        retval.start = input.LT(1);

        int attribute_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal506=null;
        csParser.attribute_return attribute505 =null;

        csParser.attribute_return attribute507 =null;


        Object char_literal506_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:695:15: ( attribute ( ',' attribute )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:696:2: attribute ( ',' attribute )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_attribute_in_attribute_list4060);
            attribute505=attribute();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute505.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:696:12: ( ',' attribute )*
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==77) ) {
                    int LA139_1 = input.LA(2);

                    if ( (LA139_1==IDENTIFIER||LA139_1==98||(LA139_1 >= 100 && LA139_1 <= 101)||(LA139_1 >= 103 && LA139_1 <= 104)||LA139_1==108||LA139_1==119||LA139_1==122||LA139_1==124||LA139_1==128||LA139_1==134||LA139_1==137||LA139_1==143||(LA139_1 >= 145 && LA139_1 <= 146)||(LA139_1 >= 149 && LA139_1 <= 150)||LA139_1==154||LA139_1==156||LA139_1==159||LA139_1==162||LA139_1==164||LA139_1==169||(LA139_1 >= 173 && LA139_1 <= 174)||LA139_1==185||LA139_1==192||LA139_1==196||LA139_1==198) ) {
                        alt139=1;
                    }


                }


                switch (alt139) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:696:13: ',' attribute
            	    {
            	    char_literal506=(Token)match(input,77,FOLLOW_77_in_attribute_list4063); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal506_tree = 
            	    (Object)adaptor.create(char_literal506)
            	    ;
            	    adaptor.addChild(root_0, char_literal506_tree);
            	    }

            	    pushFollow(FOLLOW_attribute_in_attribute_list4065);
            	    attribute507=attribute();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute507.getTree());

            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 142, attribute_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attribute_list"


    public static class attribute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attribute"
    // CodeR.CSharp.Parser/src/antlr/cs.g:697:1: attribute : type_name ( attribute_arguments )? ;
    public final csParser.attribute_return attribute() throws RecognitionException {
        csParser.attribute_return retval = new csParser.attribute_return();
        retval.start = input.LT(1);

        int attribute_StartIndex = input.index();

        Object root_0 = null;

        csParser.type_name_return type_name508 =null;

        csParser.attribute_arguments_return attribute_arguments509 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:697:10: ( type_name ( attribute_arguments )? )
            // CodeR.CSharp.Parser/src/antlr/cs.g:698:2: type_name ( attribute_arguments )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_name_in_attribute4077);
            type_name508=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name508.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:698:14: ( attribute_arguments )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==71) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:698:14: attribute_arguments
                    {
                    pushFollow(FOLLOW_attribute_arguments_in_attribute4081);
                    attribute_arguments509=attribute_arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_arguments509.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 143, attribute_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attribute"


    public static class attribute_arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attribute_arguments"
    // CodeR.CSharp.Parser/src/antlr/cs.g:700:1: attribute_arguments : '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' ) ;
    public final csParser.attribute_arguments_return attribute_arguments() throws RecognitionException {
        csParser.attribute_arguments_return retval = new csParser.attribute_arguments_return();
        retval.start = input.LT(1);

        int attribute_arguments_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal510=null;
        Token char_literal511=null;
        Token char_literal514=null;
        Token char_literal516=null;
        csParser.positional_argument_return positional_argument512 =null;

        csParser.named_argument_return named_argument513 =null;

        csParser.positional_argument_return positional_argument515 =null;


        Object char_literal510_tree=null;
        Object char_literal511_tree=null;
        Object char_literal514_tree=null;
        Object char_literal516_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:700:20: ( '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:701:2: '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' )
            {
            root_0 = (Object)adaptor.nil();


            char_literal510=(Token)match(input,71,FOLLOW_71_in_attribute_arguments4092); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal510_tree = 
            (Object)adaptor.create(char_literal510)
            ;
            adaptor.addChild(root_0, char_literal510_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:701:8: ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' )
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==RPAREN) ) {
                alt142=1;
            }
            else if ( (LA142_0==Character_literal||LA142_0==FALSE||(LA142_0 >= Hex_number && LA142_0 <= IDENTIFIER)||(LA142_0 >= MINUS && LA142_0 <= NUMBER)||LA142_0==Real_literal||LA142_0==STRINGLITERAL||LA142_0==TRUE||LA142_0==Verbatim_string_literal||LA142_0==64||LA142_0==69||(LA142_0 >= 71 && LA142_0 <= 72)||(LA142_0 >= 74 && LA142_0 <= 75)||LA142_0==78||LA142_0==98||(LA142_0 >= 100 && LA142_0 <= 101)||(LA142_0 >= 103 && LA142_0 <= 106)||(LA142_0 >= 108 && LA142_0 <= 109)||(LA142_0 >= 111 && LA142_0 <= 112)||(LA142_0 >= 116 && LA142_0 <= 119)||(LA142_0 >= 121 && LA142_0 <= 122)||LA142_0==124||LA142_0==128||LA142_0==131||LA142_0==134||LA142_0==137||LA142_0==140||LA142_0==143||(LA142_0 >= 145 && LA142_0 <= 146)||(LA142_0 >= 148 && LA142_0 <= 150)||(LA142_0 >= 152 && LA142_0 <= 154)||LA142_0==156||LA142_0==159||LA142_0==162||LA142_0==164||LA142_0==169||LA142_0==171||(LA142_0 >= 173 && LA142_0 <= 176)||LA142_0==179||LA142_0==182||(LA142_0 >= 185 && LA142_0 <= 189)||(LA142_0 >= 191 && LA142_0 <= 192)||LA142_0==196||LA142_0==198||LA142_0==204) ) {
                alt142=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;

            }
            switch (alt142) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:701:9: ')'
                    {
                    char_literal511=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_attribute_arguments4097); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal511_tree = 
                    (Object)adaptor.create(char_literal511)
                    ;
                    adaptor.addChild(root_0, char_literal511_tree);
                    }

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:702:8: ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')'
                    {
                    // CodeR.CSharp.Parser/src/antlr/cs.g:702:8: ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* )
                    // CodeR.CSharp.Parser/src/antlr/cs.g:702:9: positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )*
                    {
                    pushFollow(FOLLOW_positional_argument_in_attribute_arguments4117);
                    positional_argument512=positional_argument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, positional_argument512.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:702:31: ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )*
                    loop141:
                    do {
                        int alt141=3;
                        int LA141_0 = input.LA(1);

                        if ( (LA141_0==IDENTIFIER||LA141_0==98||(LA141_0 >= 100 && LA141_0 <= 101)||(LA141_0 >= 103 && LA141_0 <= 104)||LA141_0==108||LA141_0==119||LA141_0==122||LA141_0==124||LA141_0==128||LA141_0==134||LA141_0==137||LA141_0==143||(LA141_0 >= 145 && LA141_0 <= 146)||(LA141_0 >= 149 && LA141_0 <= 150)||LA141_0==154||LA141_0==156||LA141_0==159||LA141_0==162||LA141_0==164||LA141_0==169||(LA141_0 >= 173 && LA141_0 <= 174)||LA141_0==185||LA141_0==192||LA141_0==196||LA141_0==198) && (synpred24_cs())) {
                            alt141=1;
                        }
                        else if ( (LA141_0==77) ) {
                            alt141=2;
                        }


                        switch (alt141) {
                    	case 1 :
                    	    // CodeR.CSharp.Parser/src/antlr/cs.g:702:32: ( ',' identifier '=' )=> named_argument
                    	    {
                    	    pushFollow(FOLLOW_named_argument_in_attribute_arguments4136);
                    	    named_argument513=named_argument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, named_argument513.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // CodeR.CSharp.Parser/src/antlr/cs.g:703:15: ',' positional_argument
                    	    {
                    	    char_literal514=(Token)match(input,77,FOLLOW_77_in_attribute_arguments4152); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal514_tree = 
                    	    (Object)adaptor.create(char_literal514)
                    	    ;
                    	    adaptor.addChild(root_0, char_literal514_tree);
                    	    }

                    	    pushFollow(FOLLOW_positional_argument_in_attribute_arguments4154);
                    	    positional_argument515=positional_argument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, positional_argument515.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop141;
                        }
                    } while (true);


                    }


                    char_literal516=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_attribute_arguments4165); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal516_tree = 
                    (Object)adaptor.create(char_literal516)
                    ;
                    adaptor.addChild(root_0, char_literal516_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 144, attribute_arguments_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attribute_arguments"


    public static class positional_argument_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "positional_argument_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:706:1: positional_argument_list : positional_argument ( ',' positional_argument )* ;
    public final csParser.positional_argument_list_return positional_argument_list() throws RecognitionException {
        csParser.positional_argument_list_return retval = new csParser.positional_argument_list_return();
        retval.start = input.LT(1);

        int positional_argument_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal518=null;
        csParser.positional_argument_return positional_argument517 =null;

        csParser.positional_argument_return positional_argument519 =null;


        Object char_literal518_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:706:25: ( positional_argument ( ',' positional_argument )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:707:2: positional_argument ( ',' positional_argument )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_positional_argument_in_positional_argument_list4179);
            positional_argument517=positional_argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, positional_argument517.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:707:22: ( ',' positional_argument )*
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==77) ) {
                    alt143=1;
                }


                switch (alt143) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:707:23: ',' positional_argument
            	    {
            	    char_literal518=(Token)match(input,77,FOLLOW_77_in_positional_argument_list4182); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal518_tree = 
            	    (Object)adaptor.create(char_literal518)
            	    ;
            	    adaptor.addChild(root_0, char_literal518_tree);
            	    }

            	    pushFollow(FOLLOW_positional_argument_in_positional_argument_list4184);
            	    positional_argument519=positional_argument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, positional_argument519.getTree());

            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 145, positional_argument_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "positional_argument_list"


    public static class positional_argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "positional_argument"
    // CodeR.CSharp.Parser/src/antlr/cs.g:708:1: positional_argument : attribute_argument_expression ;
    public final csParser.positional_argument_return positional_argument() throws RecognitionException {
        csParser.positional_argument_return retval = new csParser.positional_argument_return();
        retval.start = input.LT(1);

        int positional_argument_StartIndex = input.index();

        Object root_0 = null;

        csParser.attribute_argument_expression_return attribute_argument_expression520 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:708:20: ( attribute_argument_expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:709:2: attribute_argument_expression
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_attribute_argument_expression_in_positional_argument4195);
            attribute_argument_expression520=attribute_argument_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_argument_expression520.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 146, positional_argument_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "positional_argument"


    public static class named_argument_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "named_argument_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:710:1: named_argument_list : named_argument ( ',' named_argument )* ;
    public final csParser.named_argument_list_return named_argument_list() throws RecognitionException {
        csParser.named_argument_list_return retval = new csParser.named_argument_list_return();
        retval.start = input.LT(1);

        int named_argument_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal522=null;
        csParser.named_argument_return named_argument521 =null;

        csParser.named_argument_return named_argument523 =null;


        Object char_literal522_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:710:20: ( named_argument ( ',' named_argument )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:711:2: named_argument ( ',' named_argument )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_named_argument_in_named_argument_list4204);
            named_argument521=named_argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, named_argument521.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:711:17: ( ',' named_argument )*
            loop144:
            do {
                int alt144=2;
                int LA144_0 = input.LA(1);

                if ( (LA144_0==77) ) {
                    alt144=1;
                }


                switch (alt144) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:711:18: ',' named_argument
            	    {
            	    char_literal522=(Token)match(input,77,FOLLOW_77_in_named_argument_list4207); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal522_tree = 
            	    (Object)adaptor.create(char_literal522)
            	    ;
            	    adaptor.addChild(root_0, char_literal522_tree);
            	    }

            	    pushFollow(FOLLOW_named_argument_in_named_argument_list4209);
            	    named_argument523=named_argument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, named_argument523.getTree());

            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 147, named_argument_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "named_argument_list"


    public static class named_argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "named_argument"
    // CodeR.CSharp.Parser/src/antlr/cs.g:712:1: named_argument : identifier '=' attribute_argument_expression ;
    public final csParser.named_argument_return named_argument() throws RecognitionException {
        csParser.named_argument_return retval = new csParser.named_argument_return();
        retval.start = input.LT(1);

        int named_argument_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal525=null;
        csParser.identifier_return identifier524 =null;

        csParser.attribute_argument_expression_return attribute_argument_expression526 =null;


        Object char_literal525_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:712:15: ( identifier '=' attribute_argument_expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:713:2: identifier '=' attribute_argument_expression
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_named_argument4220);
            identifier524=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier524.getTree());

            char_literal525=(Token)match(input,88,FOLLOW_88_in_named_argument4224); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal525_tree = 
            (Object)adaptor.create(char_literal525)
            ;
            adaptor.addChild(root_0, char_literal525_tree);
            }

            pushFollow(FOLLOW_attribute_argument_expression_in_named_argument4228);
            attribute_argument_expression526=attribute_argument_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_argument_expression526.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 148, named_argument_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "named_argument"


    public static class attribute_argument_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attribute_argument_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:714:1: attribute_argument_expression : expression ;
    public final csParser.attribute_argument_expression_return attribute_argument_expression() throws RecognitionException {
        csParser.attribute_argument_expression_return retval = new csParser.attribute_argument_expression_return();
        retval.start = input.LT(1);

        int attribute_argument_expression_StartIndex = input.index();

        Object root_0 = null;

        csParser.expression_return expression527 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:714:30: ( expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:715:2: expression
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expression_in_attribute_argument_expression4237);
            expression527=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression527.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 149, attribute_argument_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attribute_argument_expression"


    public static class class_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:721:1: class_declaration : 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? -> ^( CLASS_DECL type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? ) ;
    public final csParser.class_declaration_return class_declaration() throws RecognitionException {
        csParser.class_declaration_return retval = new csParser.class_declaration_return();
        retval.start = input.LT(1);

        int class_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal528=null;
        Token char_literal533=null;
        csParser.type_or_generic_return type_or_generic529 =null;

        csParser.class_base_return class_base530 =null;

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses531 =null;

        csParser.class_body_return class_body532 =null;


        Object string_literal528_tree=null;
        Object char_literal533_tree=null;
        RewriteRuleTokenStream stream_113=new RewriteRuleTokenStream(adaptor,"token 113");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_class_body=new RewriteRuleSubtreeStream(adaptor,"rule class_body");
        RewriteRuleSubtreeStream stream_type_or_generic=new RewriteRuleSubtreeStream(adaptor,"rule type_or_generic");
        RewriteRuleSubtreeStream stream_type_parameter_constraints_clauses=new RewriteRuleSubtreeStream(adaptor,"rule type_parameter_constraints_clauses");
        RewriteRuleSubtreeStream stream_class_base=new RewriteRuleSubtreeStream(adaptor,"rule class_base");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:722:2: ( 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? -> ^( CLASS_DECL type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:722:4: 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )?
            {
            string_literal528=(Token)match(input,113,FOLLOW_113_in_class_declaration4251); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_113.add(string_literal528);


            pushFollow(FOLLOW_type_or_generic_in_class_declaration4254);
            type_or_generic529=type_or_generic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_or_generic.add(type_or_generic529.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:722:31: ( class_base )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==82) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:722:31: class_base
                    {
                    pushFollow(FOLLOW_class_base_in_class_declaration4258);
                    class_base530=class_base();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_class_base.add(class_base530.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:722:45: ( type_parameter_constraints_clauses )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==196) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:722:45: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_class_declaration4263);
                    type_parameter_constraints_clauses531=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_parameter_constraints_clauses.add(type_parameter_constraints_clauses531.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_class_body_in_class_declaration4268);
            class_body532=class_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_class_body.add(class_body532.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:722:96: ( ';' )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==SEMI) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:722:96: ';'
                    {
                    char_literal533=(Token)match(input,SEMI,FOLLOW_SEMI_in_class_declaration4272); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal533);


                    }
                    break;

            }


            // AST REWRITE
            // elements: SEMI, class_base, class_body, type_parameter_constraints_clauses, type_or_generic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 722:101: -> ^( CLASS_DECL type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? )
            {
                // CodeR.CSharp.Parser/src/antlr/cs.g:722:104: ^( CLASS_DECL type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASS_DECL, "CLASS_DECL")
                , root_1);

                adaptor.addChild(root_1, stream_type_or_generic.nextTree());

                // CodeR.CSharp.Parser/src/antlr/cs.g:722:135: ( class_base )?
                if ( stream_class_base.hasNext() ) {
                    adaptor.addChild(root_1, stream_class_base.nextTree());

                }
                stream_class_base.reset();

                // CodeR.CSharp.Parser/src/antlr/cs.g:722:149: ( type_parameter_constraints_clauses )?
                if ( stream_type_parameter_constraints_clauses.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_parameter_constraints_clauses.nextTree());

                }
                stream_type_parameter_constraints_clauses.reset();

                adaptor.addChild(root_1, stream_class_body.nextTree());

                // CodeR.CSharp.Parser/src/antlr/cs.g:722:200: ( ';' )?
                if ( stream_SEMI.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_SEMI.nextNode()
                    );

                }
                stream_SEMI.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 150, class_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "class_declaration"


    public static class class_base_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_base"
    // CodeR.CSharp.Parser/src/antlr/cs.g:724:1: class_base : ':' interface_type_list ;
    public final csParser.class_base_return class_base() throws RecognitionException {
        csParser.class_base_return retval = new csParser.class_base_return();
        retval.start = input.LT(1);

        int class_base_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal534=null;
        csParser.interface_type_list_return interface_type_list535 =null;


        Object char_literal534_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:724:11: ( ':' interface_type_list )
            // CodeR.CSharp.Parser/src/antlr/cs.g:727:2: ':' interface_type_list
            {
            root_0 = (Object)adaptor.nil();


            char_literal534=(Token)match(input,82,FOLLOW_82_in_class_base4313); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal534_tree = 
            (Object)adaptor.create(char_literal534)
            ;
            adaptor.addChild(root_0, char_literal534_tree);
            }

            pushFollow(FOLLOW_interface_type_list_in_class_base4317);
            interface_type_list535=interface_type_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_type_list535.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 151, class_base_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "class_base"


    public static class interface_type_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_type_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:729:1: interface_type_list : type ( ',' type )* ;
    public final csParser.interface_type_list_return interface_type_list() throws RecognitionException {
        csParser.interface_type_list_return retval = new csParser.interface_type_list_return();
        retval.start = input.LT(1);

        int interface_type_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal537=null;
        csParser.type_return type536 =null;

        csParser.type_return type538 =null;


        Object char_literal537_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:729:20: ( type ( ',' type )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:730:2: type ( ',' type )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_in_interface_type_list4327);
            type536=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type536.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:730:7: ( ',' type )*
            loop148:
            do {
                int alt148=2;
                int LA148_0 = input.LA(1);

                if ( (LA148_0==77) ) {
                    alt148=1;
                }


                switch (alt148) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:730:8: ',' type
            	    {
            	    char_literal537=(Token)match(input,77,FOLLOW_77_in_interface_type_list4330); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal537_tree = 
            	    (Object)adaptor.create(char_literal537)
            	    ;
            	    adaptor.addChild(root_0, char_literal537_tree);
            	    }

            	    pushFollow(FOLLOW_type_in_interface_type_list4334);
            	    type538=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type538.getTree());

            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 152, interface_type_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_type_list"


    public static class class_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_body"
    // CodeR.CSharp.Parser/src/antlr/cs.g:732:1: class_body : '{' ( class_member_declarations )? '}' ;
    public final csParser.class_body_return class_body() throws RecognitionException {
        csParser.class_body_return retval = new csParser.class_body_return();
        retval.start = input.LT(1);

        int class_body_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal539=null;
        Token char_literal541=null;
        csParser.class_member_declarations_return class_member_declarations540 =null;


        Object char_literal539_tree=null;
        Object char_literal541_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:732:11: ( '{' ( class_member_declarations )? '}' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:733:2: '{' ( class_member_declarations )? '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal539=(Token)match(input,199,FOLLOW_199_in_class_body4345); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal539_tree = 
            (Object)adaptor.create(char_literal539)
            ;
            adaptor.addChild(root_0, char_literal539_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:733:8: ( class_member_declarations )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==ENUM||LA149_0==IDENTIFIER||LA149_0==94||(LA149_0 >= 98 && LA149_0 <= 101)||(LA149_0 >= 103 && LA149_0 <= 104)||LA149_0==106||(LA149_0 >= 108 && LA149_0 <= 109)||LA149_0==111||(LA149_0 >= 113 && LA149_0 <= 114)||LA149_0==116||(LA149_0 >= 118 && LA149_0 <= 119)||(LA149_0 >= 121 && LA149_0 <= 122)||(LA149_0 >= 124 && LA149_0 <= 128)||LA149_0==131||LA149_0==134||(LA149_0 >= 137 && LA149_0 <= 138)||(LA149_0 >= 140 && LA149_0 <= 143)||(LA149_0 >= 145 && LA149_0 <= 146)||(LA149_0 >= 148 && LA149_0 <= 150)||(LA149_0 >= 152 && LA149_0 <= 154)||LA149_0==156||(LA149_0 >= 158 && LA149_0 <= 159)||(LA149_0 >= 161 && LA149_0 <= 167)||LA149_0==169||(LA149_0 >= 171 && LA149_0 <= 175)||(LA149_0 >= 178 && LA149_0 <= 180)||LA149_0==185||(LA149_0 >= 187 && LA149_0 <= 188)||(LA149_0 >= 190 && LA149_0 <= 196)||LA149_0==198||LA149_0==204) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:733:8: class_member_declarations
                    {
                    pushFollow(FOLLOW_class_member_declarations_in_class_body4349);
                    class_member_declarations540=class_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, class_member_declarations540.getTree());

                    }
                    break;

            }


            char_literal541=(Token)match(input,203,FOLLOW_203_in_class_body4354); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal541_tree = 
            (Object)adaptor.create(char_literal541)
            ;
            adaptor.addChild(root_0, char_literal541_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 153, class_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "class_body"


    public static class class_member_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_member_declarations"
    // CodeR.CSharp.Parser/src/antlr/cs.g:734:1: class_member_declarations : ( class_member_declaration )+ ;
    public final csParser.class_member_declarations_return class_member_declarations() throws RecognitionException {
        csParser.class_member_declarations_return retval = new csParser.class_member_declarations_return();
        retval.start = input.LT(1);

        int class_member_declarations_StartIndex = input.index();

        Object root_0 = null;

        csParser.class_member_declaration_return class_member_declaration542 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:734:26: ( ( class_member_declaration )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:735:2: ( class_member_declaration )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:735:2: ( class_member_declaration )+
            int cnt150=0;
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==ENUM||LA150_0==IDENTIFIER||LA150_0==94||(LA150_0 >= 98 && LA150_0 <= 101)||(LA150_0 >= 103 && LA150_0 <= 104)||LA150_0==106||(LA150_0 >= 108 && LA150_0 <= 109)||LA150_0==111||(LA150_0 >= 113 && LA150_0 <= 114)||LA150_0==116||(LA150_0 >= 118 && LA150_0 <= 119)||(LA150_0 >= 121 && LA150_0 <= 122)||(LA150_0 >= 124 && LA150_0 <= 128)||LA150_0==131||LA150_0==134||(LA150_0 >= 137 && LA150_0 <= 138)||(LA150_0 >= 140 && LA150_0 <= 143)||(LA150_0 >= 145 && LA150_0 <= 146)||(LA150_0 >= 148 && LA150_0 <= 150)||(LA150_0 >= 152 && LA150_0 <= 154)||LA150_0==156||(LA150_0 >= 158 && LA150_0 <= 159)||(LA150_0 >= 161 && LA150_0 <= 167)||LA150_0==169||(LA150_0 >= 171 && LA150_0 <= 175)||(LA150_0 >= 178 && LA150_0 <= 180)||LA150_0==185||(LA150_0 >= 187 && LA150_0 <= 188)||(LA150_0 >= 190 && LA150_0 <= 196)||LA150_0==198||LA150_0==204) ) {
                    alt150=1;
                }


                switch (alt150) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:735:2: class_member_declaration
            	    {
            	    pushFollow(FOLLOW_class_member_declaration_in_class_member_declarations4362);
            	    class_member_declaration542=class_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, class_member_declaration542.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt150 >= 1 ) break loop150;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(150, input);
                        throw eee;
                }
                cnt150++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 154, class_member_declarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "class_member_declarations"


    public static class constant_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constant_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:738:1: constant_declaration : 'const' type constant_declarators ';' ;
    public final csParser.constant_declaration_return constant_declaration() throws RecognitionException {
        csParser.constant_declaration_return retval = new csParser.constant_declaration_return();
        retval.start = input.LT(1);

        int constant_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal543=null;
        Token char_literal546=null;
        csParser.type_return type544 =null;

        csParser.constant_declarators_return constant_declarators545 =null;


        Object string_literal543_tree=null;
        Object char_literal546_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:738:21: ( 'const' type constant_declarators ';' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:739:2: 'const' type constant_declarators ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal543=(Token)match(input,114,FOLLOW_114_in_constant_declaration4373); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal543_tree = 
            (Object)adaptor.create(string_literal543)
            ;
            adaptor.addChild(root_0, string_literal543_tree);
            }

            pushFollow(FOLLOW_type_in_constant_declaration4377);
            type544=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type544.getTree());

            pushFollow(FOLLOW_constant_declarators_in_constant_declaration4381);
            constant_declarators545=constant_declarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_declarators545.getTree());

            char_literal546=(Token)match(input,SEMI,FOLLOW_SEMI_in_constant_declaration4385); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal546_tree = 
            (Object)adaptor.create(char_literal546)
            ;
            adaptor.addChild(root_0, char_literal546_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 155, constant_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constant_declaration"


    public static class constant_declarators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constant_declarators"
    // CodeR.CSharp.Parser/src/antlr/cs.g:740:1: constant_declarators : constant_declarator ( ',' constant_declarator )* ;
    public final csParser.constant_declarators_return constant_declarators() throws RecognitionException {
        csParser.constant_declarators_return retval = new csParser.constant_declarators_return();
        retval.start = input.LT(1);

        int constant_declarators_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal548=null;
        csParser.constant_declarator_return constant_declarator547 =null;

        csParser.constant_declarator_return constant_declarator549 =null;


        Object char_literal548_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:740:21: ( constant_declarator ( ',' constant_declarator )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:741:2: constant_declarator ( ',' constant_declarator )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_constant_declarator_in_constant_declarators4393);
            constant_declarator547=constant_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_declarator547.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:741:22: ( ',' constant_declarator )*
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);

                if ( (LA151_0==77) ) {
                    alt151=1;
                }


                switch (alt151) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:741:23: ',' constant_declarator
            	    {
            	    char_literal548=(Token)match(input,77,FOLLOW_77_in_constant_declarators4396); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal548_tree = 
            	    (Object)adaptor.create(char_literal548)
            	    ;
            	    adaptor.addChild(root_0, char_literal548_tree);
            	    }

            	    pushFollow(FOLLOW_constant_declarator_in_constant_declarators4398);
            	    constant_declarator549=constant_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_declarator549.getTree());

            	    }
            	    break;

            	default :
            	    break loop151;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 156, constant_declarators_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constant_declarators"


    public static class constant_declarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constant_declarator"
    // CodeR.CSharp.Parser/src/antlr/cs.g:742:1: constant_declarator : identifier ( '=' constant_expression )? ;
    public final csParser.constant_declarator_return constant_declarator() throws RecognitionException {
        csParser.constant_declarator_return retval = new csParser.constant_declarator_return();
        retval.start = input.LT(1);

        int constant_declarator_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal551=null;
        csParser.identifier_return identifier550 =null;

        csParser.constant_expression_return constant_expression552 =null;


        Object char_literal551_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:742:20: ( identifier ( '=' constant_expression )? )
            // CodeR.CSharp.Parser/src/antlr/cs.g:743:2: identifier ( '=' constant_expression )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_constant_declarator4408);
            identifier550=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier550.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:743:15: ( '=' constant_expression )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==88) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:743:16: '=' constant_expression
                    {
                    char_literal551=(Token)match(input,88,FOLLOW_88_in_constant_declarator4413); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal551_tree = 
                    (Object)adaptor.create(char_literal551)
                    ;
                    adaptor.addChild(root_0, char_literal551_tree);
                    }

                    pushFollow(FOLLOW_constant_expression_in_constant_declarator4417);
                    constant_expression552=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_expression552.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 157, constant_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constant_declarator"


    public static class constant_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constant_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:744:1: constant_expression : expression ;
    public final csParser.constant_expression_return constant_expression() throws RecognitionException {
        csParser.constant_expression_return retval = new csParser.constant_expression_return();
        retval.start = input.LT(1);

        int constant_expression_StartIndex = input.index();

        Object root_0 = null;

        csParser.expression_return expression553 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:744:20: ( expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:745:2: expression
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expression_in_constant_expression4427);
            expression553=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression553.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 158, constant_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constant_expression"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:748:1: field_declaration : variable_declarators ';' ;
    public final csParser.field_declaration_return field_declaration() throws RecognitionException {
        csParser.field_declaration_return retval = new csParser.field_declaration_return();
        retval.start = input.LT(1);

        int field_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal555=null;
        csParser.variable_declarators_return variable_declarators554 =null;


        Object char_literal555_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:748:18: ( variable_declarators ';' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:749:2: variable_declarators ';'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_variable_declarators_in_field_declaration4436);
            variable_declarators554=variable_declarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declarators554.getTree());

            char_literal555=(Token)match(input,SEMI,FOLLOW_SEMI_in_field_declaration4440); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal555_tree = 
            (Object)adaptor.create(char_literal555)
            ;
            adaptor.addChild(root_0, char_literal555_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 159, field_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class variable_declarators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_declarators"
    // CodeR.CSharp.Parser/src/antlr/cs.g:750:1: variable_declarators : variable_declarator ( ',' variable_declarator )* ;
    public final csParser.variable_declarators_return variable_declarators() throws RecognitionException {
        csParser.variable_declarators_return retval = new csParser.variable_declarators_return();
        retval.start = input.LT(1);

        int variable_declarators_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal557=null;
        csParser.variable_declarator_return variable_declarator556 =null;

        csParser.variable_declarator_return variable_declarator558 =null;


        Object char_literal557_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:750:21: ( variable_declarator ( ',' variable_declarator )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:751:2: variable_declarator ( ',' variable_declarator )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_variable_declarator_in_variable_declarators4448);
            variable_declarator556=variable_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declarator556.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:751:22: ( ',' variable_declarator )*
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);

                if ( (LA153_0==77) ) {
                    alt153=1;
                }


                switch (alt153) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:751:23: ',' variable_declarator
            	    {
            	    char_literal557=(Token)match(input,77,FOLLOW_77_in_variable_declarators4451); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal557_tree = 
            	    (Object)adaptor.create(char_literal557)
            	    ;
            	    adaptor.addChild(root_0, char_literal557_tree);
            	    }

            	    pushFollow(FOLLOW_variable_declarator_in_variable_declarators4455);
            	    variable_declarator558=variable_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declarator558.getTree());

            	    }
            	    break;

            	default :
            	    break loop153;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 160, variable_declarators_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable_declarators"


    public static class variable_declarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_declarator"
    // CodeR.CSharp.Parser/src/antlr/cs.g:752:1: variable_declarator : type_name ( '=' variable_initializer )? ;
    public final csParser.variable_declarator_return variable_declarator() throws RecognitionException {
        csParser.variable_declarator_return retval = new csParser.variable_declarator_return();
        retval.start = input.LT(1);

        int variable_declarator_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal560=null;
        csParser.type_name_return type_name559 =null;

        csParser.variable_initializer_return variable_initializer561 =null;


        Object char_literal560_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:752:20: ( type_name ( '=' variable_initializer )? )
            // CodeR.CSharp.Parser/src/antlr/cs.g:753:2: type_name ( '=' variable_initializer )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_name_in_variable_declarator4465);
            type_name559=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name559.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:753:12: ( '=' variable_initializer )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==88) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:753:13: '=' variable_initializer
                    {
                    char_literal560=(Token)match(input,88,FOLLOW_88_in_variable_declarator4468); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal560_tree = 
                    (Object)adaptor.create(char_literal560)
                    ;
                    adaptor.addChild(root_0, char_literal560_tree);
                    }

                    pushFollow(FOLLOW_variable_initializer_in_variable_declarator4472);
                    variable_initializer561=variable_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_initializer561.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 161, variable_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable_declarator"


    public static class method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:756:1: method_declaration : method_header method_body ;
    public final csParser.method_declaration_return method_declaration() throws RecognitionException {
        csParser.method_declaration_return retval = new csParser.method_declaration_return();
        retval.start = input.LT(1);

        int method_declaration_StartIndex = input.index();

        Object root_0 = null;

        csParser.method_header_return method_header562 =null;

        csParser.method_body_return method_body563 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:756:19: ( method_header method_body )
            // CodeR.CSharp.Parser/src/antlr/cs.g:757:2: method_header method_body
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_in_method_declaration4486);
            method_header562=method_header();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_header562.getTree());

            pushFollow(FOLLOW_method_body_in_method_declaration4490);
            method_body563=method_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_body563.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 162, method_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "method_declaration"


    public static class method_header_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header"
    // CodeR.CSharp.Parser/src/antlr/cs.g:758:1: method_header : member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ;
    public final csParser.method_header_return method_header() throws RecognitionException {
        csParser.method_header_return retval = new csParser.method_header_return();
        retval.start = input.LT(1);

        int method_header_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal565=null;
        Token char_literal567=null;
        csParser.member_name_return member_name564 =null;

        csParser.formal_parameter_list_return formal_parameter_list566 =null;

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses568 =null;


        Object char_literal565_tree=null;
        Object char_literal567_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:758:14: ( member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? )
            // CodeR.CSharp.Parser/src/antlr/cs.g:759:2: member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_member_name_in_method_header4498);
            member_name564=member_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, member_name564.getTree());

            char_literal565=(Token)match(input,71,FOLLOW_71_in_method_header4501); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal565_tree = 
            (Object)adaptor.create(char_literal565)
            ;
            adaptor.addChild(root_0, char_literal565_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:759:21: ( formal_parameter_list )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==IDENTIFIER||LA155_0==94||LA155_0==98||(LA155_0 >= 100 && LA155_0 <= 101)||(LA155_0 >= 103 && LA155_0 <= 104)||LA155_0==106||(LA155_0 >= 108 && LA155_0 <= 109)||LA155_0==111||LA155_0==116||LA155_0==119||(LA155_0 >= 121 && LA155_0 <= 122)||LA155_0==124||LA155_0==128||LA155_0==131||LA155_0==134||LA155_0==137||LA155_0==140||LA155_0==143||(LA155_0 >= 145 && LA155_0 <= 146)||(LA155_0 >= 148 && LA155_0 <= 150)||(LA155_0 >= 153 && LA155_0 <= 154)||(LA155_0 >= 156 && LA155_0 <= 157)||(LA155_0 >= 159 && LA155_0 <= 160)||LA155_0==162||LA155_0==164||(LA155_0 >= 168 && LA155_0 <= 169)||LA155_0==171||(LA155_0 >= 173 && LA155_0 <= 175)||LA155_0==179||LA155_0==182||LA155_0==185||(LA155_0 >= 187 && LA155_0 <= 188)||(LA155_0 >= 191 && LA155_0 <= 192)||LA155_0==194||LA155_0==196||LA155_0==198) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:759:21: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_method_header4505);
                    formal_parameter_list566=formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_parameter_list566.getTree());

                    }
                    break;

            }


            char_literal567=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_method_header4510); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal567_tree = 
            (Object)adaptor.create(char_literal567)
            ;
            adaptor.addChild(root_0, char_literal567_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:759:52: ( type_parameter_constraints_clauses )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==196) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:759:52: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_method_header4514);
                    type_parameter_constraints_clauses568=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraints_clauses568.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 163, method_header_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "method_header"


    public static class method_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_body"
    // CodeR.CSharp.Parser/src/antlr/cs.g:760:1: method_body : block ;
    public final csParser.method_body_return method_body() throws RecognitionException {
        csParser.method_body_return retval = new csParser.method_body_return();
        retval.start = input.LT(1);

        int method_body_StartIndex = input.index();

        Object root_0 = null;

        csParser.block_return block569 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:760:12: ( block )
            // CodeR.CSharp.Parser/src/antlr/cs.g:761:2: block
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_in_method_body4523);
            block569=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block569.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 164, method_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "method_body"


    public static class member_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "member_name"
    // CodeR.CSharp.Parser/src/antlr/cs.g:762:1: member_name : qid ;
    public final csParser.member_name_return member_name() throws RecognitionException {
        csParser.member_name_return retval = new csParser.member_name_return();
        retval.start = input.LT(1);

        int member_name_StartIndex = input.index();

        Object root_0 = null;

        csParser.qid_return qid570 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:762:12: ( qid )
            // CodeR.CSharp.Parser/src/antlr/cs.g:763:2: qid
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_qid_in_member_name4531);
            qid570=qid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qid570.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 165, member_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "member_name"


    public static class property_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:766:1: property_declaration : member_name '{' accessor_declarations '}' ;
    public final csParser.property_declaration_return property_declaration() throws RecognitionException {
        csParser.property_declaration_return retval = new csParser.property_declaration_return();
        retval.start = input.LT(1);

        int property_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal572=null;
        Token char_literal574=null;
        csParser.member_name_return member_name571 =null;

        csParser.accessor_declarations_return accessor_declarations573 =null;


        Object char_literal572_tree=null;
        Object char_literal574_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:766:21: ( member_name '{' accessor_declarations '}' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:767:2: member_name '{' accessor_declarations '}'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_member_name_in_property_declaration4543);
            member_name571=member_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, member_name571.getTree());

            char_literal572=(Token)match(input,199,FOLLOW_199_in_property_declaration4547); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal572_tree = 
            (Object)adaptor.create(char_literal572)
            ;
            adaptor.addChild(root_0, char_literal572_tree);
            }

            pushFollow(FOLLOW_accessor_declarations_in_property_declaration4551);
            accessor_declarations573=accessor_declarations();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_declarations573.getTree());

            char_literal574=(Token)match(input,203,FOLLOW_203_in_property_declaration4555); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal574_tree = 
            (Object)adaptor.create(char_literal574)
            ;
            adaptor.addChild(root_0, char_literal574_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 166, property_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "property_declaration"


    public static class accessor_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "accessor_declarations"
    // CodeR.CSharp.Parser/src/antlr/cs.g:768:1: accessor_declarations : ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? ) ;
    public final csParser.accessor_declarations_return accessor_declarations() throws RecognitionException {
        csParser.accessor_declarations_return retval = new csParser.accessor_declarations_return();
        retval.start = input.LT(1);

        int accessor_declarations_StartIndex = input.index();

        Object root_0 = null;

        csParser.attributes_return attributes575 =null;

        csParser.get_accessor_declaration_return get_accessor_declaration576 =null;

        csParser.attributes_return attributes577 =null;

        csParser.set_accessor_declaration_return set_accessor_declaration578 =null;

        csParser.set_accessor_declaration_return set_accessor_declaration579 =null;

        csParser.attributes_return attributes580 =null;

        csParser.get_accessor_declaration_return get_accessor_declaration581 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:768:22: ( ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:769:2: ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? )
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:769:2: ( attributes )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==94) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:769:2: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_accessor_declarations4563);
                    attributes575=attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes575.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:770:3: ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? )
            int alt162=2;
            switch ( input.LA(1) ) {
            case 142:
            case 163:
            case 165:
            case 166:
                {
                int LA162_1 = input.LA(2);

                if ( (LA162_1==135) ) {
                    alt162=1;
                }
                else if ( (LA162_1==174) ) {
                    alt162=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 162, 1, input);

                    throw nvae;

                }
                }
                break;
            case 135:
                {
                alt162=1;
                }
                break;
            case 174:
                {
                alt162=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;

            }

            switch (alt162) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:770:4: get_accessor_declaration ( attributes )? ( set_accessor_declaration )?
                    {
                    pushFollow(FOLLOW_get_accessor_declaration_in_accessor_declarations4569);
                    get_accessor_declaration576=get_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, get_accessor_declaration576.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:770:31: ( attributes )?
                    int alt158=2;
                    int LA158_0 = input.LA(1);

                    if ( (LA158_0==94) ) {
                        alt158=1;
                    }
                    switch (alt158) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:770:31: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_accessor_declarations4573);
                            attributes577=attributes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes577.getTree());

                            }
                            break;

                    }


                    // CodeR.CSharp.Parser/src/antlr/cs.g:770:45: ( set_accessor_declaration )?
                    int alt159=2;
                    int LA159_0 = input.LA(1);

                    if ( (LA159_0==142||LA159_0==163||(LA159_0 >= 165 && LA159_0 <= 166)||LA159_0==174) ) {
                        alt159=1;
                    }
                    switch (alt159) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:770:45: set_accessor_declaration
                            {
                            pushFollow(FOLLOW_set_accessor_declaration_in_accessor_declarations4578);
                            set_accessor_declaration578=set_accessor_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, set_accessor_declaration578.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:771:5: set_accessor_declaration ( attributes )? ( get_accessor_declaration )?
                    {
                    pushFollow(FOLLOW_set_accessor_declaration_in_accessor_declarations4585);
                    set_accessor_declaration579=set_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, set_accessor_declaration579.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:771:32: ( attributes )?
                    int alt160=2;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==94) ) {
                        alt160=1;
                    }
                    switch (alt160) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:771:32: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_accessor_declarations4589);
                            attributes580=attributes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes580.getTree());

                            }
                            break;

                    }


                    // CodeR.CSharp.Parser/src/antlr/cs.g:771:46: ( get_accessor_declaration )?
                    int alt161=2;
                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==135||LA161_0==142||LA161_0==163||(LA161_0 >= 165 && LA161_0 <= 166)) ) {
                        alt161=1;
                    }
                    switch (alt161) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:771:46: get_accessor_declaration
                            {
                            pushFollow(FOLLOW_get_accessor_declaration_in_accessor_declarations4594);
                            get_accessor_declaration581=get_accessor_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, get_accessor_declaration581.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 167, accessor_declarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "accessor_declarations"


    public static class get_accessor_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "get_accessor_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:772:1: get_accessor_declaration : ( accessor_modifier )? 'get' accessor_body ;
    public final csParser.get_accessor_declaration_return get_accessor_declaration() throws RecognitionException {
        csParser.get_accessor_declaration_return retval = new csParser.get_accessor_declaration_return();
        retval.start = input.LT(1);

        int get_accessor_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal583=null;
        csParser.accessor_modifier_return accessor_modifier582 =null;

        csParser.accessor_body_return accessor_body584 =null;


        Object string_literal583_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:772:25: ( ( accessor_modifier )? 'get' accessor_body )
            // CodeR.CSharp.Parser/src/antlr/cs.g:773:2: ( accessor_modifier )? 'get' accessor_body
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:773:2: ( accessor_modifier )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==142||LA163_0==163||(LA163_0 >= 165 && LA163_0 <= 166)) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:773:2: accessor_modifier
                    {
                    pushFollow(FOLLOW_accessor_modifier_in_get_accessor_declaration4604);
                    accessor_modifier582=accessor_modifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_modifier582.getTree());

                    }
                    break;

            }


            string_literal583=(Token)match(input,135,FOLLOW_135_in_get_accessor_declaration4609); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal583_tree = 
            (Object)adaptor.create(string_literal583)
            ;
            adaptor.addChild(root_0, string_literal583_tree);
            }

            pushFollow(FOLLOW_accessor_body_in_get_accessor_declaration4613);
            accessor_body584=accessor_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_body584.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 168, get_accessor_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "get_accessor_declaration"


    public static class set_accessor_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "set_accessor_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:774:1: set_accessor_declaration : ( accessor_modifier )? 'set' accessor_body ;
    public final csParser.set_accessor_declaration_return set_accessor_declaration() throws RecognitionException {
        csParser.set_accessor_declaration_return retval = new csParser.set_accessor_declaration_return();
        retval.start = input.LT(1);

        int set_accessor_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal586=null;
        csParser.accessor_modifier_return accessor_modifier585 =null;

        csParser.accessor_body_return accessor_body587 =null;


        Object string_literal586_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:774:25: ( ( accessor_modifier )? 'set' accessor_body )
            // CodeR.CSharp.Parser/src/antlr/cs.g:775:2: ( accessor_modifier )? 'set' accessor_body
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:775:2: ( accessor_modifier )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==142||LA164_0==163||(LA164_0 >= 165 && LA164_0 <= 166)) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:775:2: accessor_modifier
                    {
                    pushFollow(FOLLOW_accessor_modifier_in_set_accessor_declaration4621);
                    accessor_modifier585=accessor_modifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_modifier585.getTree());

                    }
                    break;

            }


            string_literal586=(Token)match(input,174,FOLLOW_174_in_set_accessor_declaration4626); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal586_tree = 
            (Object)adaptor.create(string_literal586)
            ;
            adaptor.addChild(root_0, string_literal586_tree);
            }

            pushFollow(FOLLOW_accessor_body_in_set_accessor_declaration4630);
            accessor_body587=accessor_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_body587.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 169, set_accessor_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "set_accessor_declaration"


    public static class accessor_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "accessor_modifier"
    // CodeR.CSharp.Parser/src/antlr/cs.g:776:1: accessor_modifier : ( 'public' | 'protected' | 'private' | 'internal' );
    public final csParser.accessor_modifier_return accessor_modifier() throws RecognitionException {
        csParser.accessor_modifier_return retval = new csParser.accessor_modifier_return();
        retval.start = input.LT(1);

        int accessor_modifier_StartIndex = input.index();

        Object root_0 = null;

        Token set588=null;

        Object set588_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:776:18: ( 'public' | 'protected' | 'private' | 'internal' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:
            {
            root_0 = (Object)adaptor.nil();


            set588=(Token)input.LT(1);

            if ( input.LA(1)==142||input.LA(1)==163||(input.LA(1) >= 165 && input.LA(1) <= 166) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set588)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 170, accessor_modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "accessor_modifier"


    public static class accessor_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "accessor_body"
    // CodeR.CSharp.Parser/src/antlr/cs.g:778:1: accessor_body : block ;
    public final csParser.accessor_body_return accessor_body() throws RecognitionException {
        csParser.accessor_body_return retval = new csParser.accessor_body_return();
        retval.start = input.LT(1);

        int accessor_body_StartIndex = input.index();

        Object root_0 = null;

        csParser.block_return block589 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:778:14: ( block )
            // CodeR.CSharp.Parser/src/antlr/cs.g:779:2: block
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_in_accessor_body4658);
            block589=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block589.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 171, accessor_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "accessor_body"


    public static class event_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "event_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:782:1: event_declaration : 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' ) ;
    public final csParser.event_declaration_return event_declaration() throws RecognitionException {
        csParser.event_declaration_return retval = new csParser.event_declaration_return();
        retval.start = input.LT(1);

        int event_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal590=null;
        Token char_literal593=null;
        Token char_literal595=null;
        Token char_literal597=null;
        csParser.type_return type591 =null;

        csParser.member_name_return member_name592 =null;

        csParser.event_accessor_declarations_return event_accessor_declarations594 =null;

        csParser.variable_declarators_return variable_declarators596 =null;


        Object string_literal590_tree=null;
        Object char_literal593_tree=null;
        Object char_literal595_tree=null;
        Object char_literal597_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:782:18: ( 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:783:2: 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' )
            {
            root_0 = (Object)adaptor.nil();


            string_literal590=(Token)match(input,125,FOLLOW_125_in_event_declaration4668); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal590_tree = 
            (Object)adaptor.create(string_literal590)
            ;
            adaptor.addChild(root_0, string_literal590_tree);
            }

            pushFollow(FOLLOW_type_in_event_declaration4672);
            type591=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type591.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:784:3: ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==106||LA165_0==109||LA165_0==111||LA165_0==116||LA165_0==121||LA165_0==131||LA165_0==140||LA165_0==148||LA165_0==153||LA165_0==171||LA165_0==175||LA165_0==179||(LA165_0 >= 187 && LA165_0 <= 188)||LA165_0==191) && (synpred25_cs())) {
                alt165=1;
            }
            else if ( (LA165_0==IDENTIFIER||LA165_0==98||(LA165_0 >= 100 && LA165_0 <= 101)||(LA165_0 >= 103 && LA165_0 <= 104)||LA165_0==108||LA165_0==119||LA165_0==122||LA165_0==124||LA165_0==128||LA165_0==134||LA165_0==137||LA165_0==143||(LA165_0 >= 145 && LA165_0 <= 146)||(LA165_0 >= 149 && LA165_0 <= 150)||LA165_0==154||LA165_0==156||LA165_0==159||LA165_0==162||LA165_0==164||LA165_0==169||(LA165_0 >= 173 && LA165_0 <= 174)||LA165_0==185||LA165_0==192||LA165_0==196||LA165_0==198) ) {
                int LA165_2 = input.LA(2);

                if ( (synpred25_cs()) ) {
                    alt165=1;
                }
                else if ( (true) ) {
                    alt165=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 165, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA165_0==Character_literal||LA165_0==FALSE||LA165_0==Hex_number||(LA165_0 >= NULL && LA165_0 <= NUMBER)||LA165_0==Real_literal||LA165_0==STRINGLITERAL||LA165_0==TRUE||LA165_0==Verbatim_string_literal) && (synpred25_cs())) {
                alt165=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;

            }
            switch (alt165) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:784:4: ( member_name '{' )=> member_name '{' event_accessor_declarations '}'
                    {
                    pushFollow(FOLLOW_member_name_in_event_declaration4687);
                    member_name592=member_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, member_name592.getTree());

                    char_literal593=(Token)match(input,199,FOLLOW_199_in_event_declaration4691); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal593_tree = 
                    (Object)adaptor.create(char_literal593)
                    ;
                    adaptor.addChild(root_0, char_literal593_tree);
                    }

                    pushFollow(FOLLOW_event_accessor_declarations_in_event_declaration4695);
                    event_accessor_declarations594=event_accessor_declarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, event_accessor_declarations594.getTree());

                    char_literal595=(Token)match(input,203,FOLLOW_203_in_event_declaration4699); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal595_tree = 
                    (Object)adaptor.create(char_literal595)
                    ;
                    adaptor.addChild(root_0, char_literal595_tree);
                    }

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:785:5: variable_declarators ';'
                    {
                    pushFollow(FOLLOW_variable_declarators_in_event_declaration4705);
                    variable_declarators596=variable_declarators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declarators596.getTree());

                    char_literal597=(Token)match(input,SEMI,FOLLOW_SEMI_in_event_declaration4709); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal597_tree = 
                    (Object)adaptor.create(char_literal597)
                    ;
                    adaptor.addChild(root_0, char_literal597_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 172, event_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "event_declaration"


    public static class event_modifiers_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "event_modifiers"
    // CodeR.CSharp.Parser/src/antlr/cs.g:787:1: event_modifiers : ( modifier )+ ;
    public final csParser.event_modifiers_return event_modifiers() throws RecognitionException {
        csParser.event_modifiers_return retval = new csParser.event_modifiers_return();
        retval.start = input.LT(1);

        int event_modifiers_StartIndex = input.index();

        Object root_0 = null;

        csParser.modifier_return modifier598 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:787:16: ( ( modifier )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:788:2: ( modifier )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:788:2: ( modifier )+
            int cnt166=0;
            loop166:
            do {
                int alt166=2;
                int LA166_0 = input.LA(1);

                if ( (LA166_0==99||LA166_0==127||LA166_0==142||LA166_0==152||LA166_0==158||LA166_0==163||(LA166_0 >= 165 && LA166_0 <= 167)||LA166_0==172||LA166_0==178||LA166_0==190||LA166_0==193||LA166_0==195) ) {
                    alt166=1;
                }


                switch (alt166) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:788:2: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_event_modifiers4721);
            	    modifier598=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier598.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt166 >= 1 ) break loop166;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(166, input);
                        throw eee;
                }
                cnt166++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 173, event_modifiers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "event_modifiers"


    public static class event_accessor_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "event_accessor_declarations"
    // CodeR.CSharp.Parser/src/antlr/cs.g:789:1: event_accessor_declarations : ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) ) ;
    public final csParser.event_accessor_declarations_return event_accessor_declarations() throws RecognitionException {
        csParser.event_accessor_declarations_return retval = new csParser.event_accessor_declarations_return();
        retval.start = input.LT(1);

        int event_accessor_declarations_StartIndex = input.index();

        Object root_0 = null;

        csParser.attributes_return attributes599 =null;

        csParser.add_accessor_declaration_return add_accessor_declaration600 =null;

        csParser.attributes_return attributes601 =null;

        csParser.remove_accessor_declaration_return remove_accessor_declaration602 =null;

        csParser.remove_accessor_declaration_return remove_accessor_declaration603 =null;

        csParser.attributes_return attributes604 =null;

        csParser.add_accessor_declaration_return add_accessor_declaration605 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:789:28: ( ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:790:2: ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) )
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:790:2: ( attributes )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==94) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:790:2: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_event_accessor_declarations4730);
                    attributes599=attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes599.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:790:16: ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) )
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==100) ) {
                alt170=1;
            }
            else if ( (LA170_0==169) ) {
                alt170=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;

            }
            switch (alt170) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:790:17: ( add_accessor_declaration ( attributes )? remove_accessor_declaration )
                    {
                    // CodeR.CSharp.Parser/src/antlr/cs.g:790:17: ( add_accessor_declaration ( attributes )? remove_accessor_declaration )
                    // CodeR.CSharp.Parser/src/antlr/cs.g:790:18: add_accessor_declaration ( attributes )? remove_accessor_declaration
                    {
                    pushFollow(FOLLOW_add_accessor_declaration_in_event_accessor_declarations4737);
                    add_accessor_declaration600=add_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, add_accessor_declaration600.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:790:45: ( attributes )?
                    int alt168=2;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==94) ) {
                        alt168=1;
                    }
                    switch (alt168) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:790:45: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_event_accessor_declarations4741);
                            attributes601=attributes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes601.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_remove_accessor_declaration_in_event_accessor_declarations4746);
                    remove_accessor_declaration602=remove_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, remove_accessor_declaration602.getTree());

                    }


                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:791:18: ( remove_accessor_declaration ( attributes )? add_accessor_declaration )
                    {
                    // CodeR.CSharp.Parser/src/antlr/cs.g:791:18: ( remove_accessor_declaration ( attributes )? add_accessor_declaration )
                    // CodeR.CSharp.Parser/src/antlr/cs.g:791:19: remove_accessor_declaration ( attributes )? add_accessor_declaration
                    {
                    pushFollow(FOLLOW_remove_accessor_declaration_in_event_accessor_declarations4767);
                    remove_accessor_declaration603=remove_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, remove_accessor_declaration603.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:791:49: ( attributes )?
                    int alt169=2;
                    int LA169_0 = input.LA(1);

                    if ( (LA169_0==94) ) {
                        alt169=1;
                    }
                    switch (alt169) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:791:49: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_event_accessor_declarations4771);
                            attributes604=attributes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes604.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_add_accessor_declaration_in_event_accessor_declarations4776);
                    add_accessor_declaration605=add_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, add_accessor_declaration605.getTree());

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 174, event_accessor_declarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "event_accessor_declarations"


    public static class add_accessor_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "add_accessor_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:792:1: add_accessor_declaration : 'add' block ;
    public final csParser.add_accessor_declaration_return add_accessor_declaration() throws RecognitionException {
        csParser.add_accessor_declaration_return retval = new csParser.add_accessor_declaration_return();
        retval.start = input.LT(1);

        int add_accessor_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal606=null;
        csParser.block_return block607 =null;


        Object string_literal606_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:792:25: ( 'add' block )
            // CodeR.CSharp.Parser/src/antlr/cs.g:793:2: 'add' block
            {
            root_0 = (Object)adaptor.nil();


            string_literal606=(Token)match(input,100,FOLLOW_100_in_add_accessor_declaration4786); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal606_tree = 
            (Object)adaptor.create(string_literal606)
            ;
            adaptor.addChild(root_0, string_literal606_tree);
            }

            pushFollow(FOLLOW_block_in_add_accessor_declaration4790);
            block607=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block607.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 175, add_accessor_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "add_accessor_declaration"


    public static class remove_accessor_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "remove_accessor_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:794:1: remove_accessor_declaration : 'remove' block ;
    public final csParser.remove_accessor_declaration_return remove_accessor_declaration() throws RecognitionException {
        csParser.remove_accessor_declaration_return retval = new csParser.remove_accessor_declaration_return();
        retval.start = input.LT(1);

        int remove_accessor_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal608=null;
        csParser.block_return block609 =null;


        Object string_literal608_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:794:28: ( 'remove' block )
            // CodeR.CSharp.Parser/src/antlr/cs.g:795:2: 'remove' block
            {
            root_0 = (Object)adaptor.nil();


            string_literal608=(Token)match(input,169,FOLLOW_169_in_remove_accessor_declaration4798); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal608_tree = 
            (Object)adaptor.create(string_literal608)
            ;
            adaptor.addChild(root_0, string_literal608_tree);
            }

            pushFollow(FOLLOW_block_in_remove_accessor_declaration4802);
            block609=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block609.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 176, remove_accessor_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "remove_accessor_declaration"


    public static class enum_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:800:1: enum_declaration : 'enum' identifier ( enum_base )? enum_body ( ';' )? ;
    public final csParser.enum_declaration_return enum_declaration() throws RecognitionException {
        csParser.enum_declaration_return retval = new csParser.enum_declaration_return();
        retval.start = input.LT(1);

        int enum_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal610=null;
        Token char_literal614=null;
        csParser.identifier_return identifier611 =null;

        csParser.enum_base_return enum_base612 =null;

        csParser.enum_body_return enum_body613 =null;


        Object string_literal610_tree=null;
        Object char_literal614_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:800:17: ( 'enum' identifier ( enum_base )? enum_body ( ';' )? )
            // CodeR.CSharp.Parser/src/antlr/cs.g:801:2: 'enum' identifier ( enum_base )? enum_body ( ';' )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal610=(Token)match(input,ENUM,FOLLOW_ENUM_in_enum_declaration4814); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal610_tree = 
            (Object)adaptor.create(string_literal610)
            ;
            adaptor.addChild(root_0, string_literal610_tree);
            }

            pushFollow(FOLLOW_identifier_in_enum_declaration4818);
            identifier611=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier611.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:801:24: ( enum_base )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==82) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:801:24: enum_base
                    {
                    pushFollow(FOLLOW_enum_base_in_enum_declaration4822);
                    enum_base612=enum_base();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_base612.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_enum_body_in_enum_declaration4827);
            enum_body613=enum_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_body613.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:801:49: ( ';' )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==SEMI) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:801:49: ';'
                    {
                    char_literal614=(Token)match(input,SEMI,FOLLOW_SEMI_in_enum_declaration4831); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal614_tree = 
                    (Object)adaptor.create(char_literal614)
                    ;
                    adaptor.addChild(root_0, char_literal614_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 177, enum_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enum_declaration"


    public static class enum_base_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_base"
    // CodeR.CSharp.Parser/src/antlr/cs.g:802:1: enum_base : ':' integral_type ;
    public final csParser.enum_base_return enum_base() throws RecognitionException {
        csParser.enum_base_return retval = new csParser.enum_base_return();
        retval.start = input.LT(1);

        int enum_base_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal615=null;
        csParser.integral_type_return integral_type616 =null;


        Object char_literal615_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:802:10: ( ':' integral_type )
            // CodeR.CSharp.Parser/src/antlr/cs.g:803:2: ':' integral_type
            {
            root_0 = (Object)adaptor.nil();


            char_literal615=(Token)match(input,82,FOLLOW_82_in_enum_base4840); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal615_tree = 
            (Object)adaptor.create(char_literal615)
            ;
            adaptor.addChild(root_0, char_literal615_tree);
            }

            pushFollow(FOLLOW_integral_type_in_enum_base4844);
            integral_type616=integral_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integral_type616.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 178, enum_base_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enum_base"


    public static class enum_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_body"
    // CodeR.CSharp.Parser/src/antlr/cs.g:804:1: enum_body : '{' ( enum_member_declarations ( ',' )? )? '}' ;
    public final csParser.enum_body_return enum_body() throws RecognitionException {
        csParser.enum_body_return retval = new csParser.enum_body_return();
        retval.start = input.LT(1);

        int enum_body_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal617=null;
        Token char_literal619=null;
        Token char_literal620=null;
        csParser.enum_member_declarations_return enum_member_declarations618 =null;


        Object char_literal617_tree=null;
        Object char_literal619_tree=null;
        Object char_literal620_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:804:10: ( '{' ( enum_member_declarations ( ',' )? )? '}' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:805:2: '{' ( enum_member_declarations ( ',' )? )? '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal617=(Token)match(input,199,FOLLOW_199_in_enum_body4852); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal617_tree = 
            (Object)adaptor.create(char_literal617)
            ;
            adaptor.addChild(root_0, char_literal617_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:805:6: ( enum_member_declarations ( ',' )? )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==IDENTIFIER||LA174_0==94||LA174_0==98||(LA174_0 >= 100 && LA174_0 <= 101)||(LA174_0 >= 103 && LA174_0 <= 104)||LA174_0==108||LA174_0==119||LA174_0==122||LA174_0==124||LA174_0==128||LA174_0==134||LA174_0==137||LA174_0==143||(LA174_0 >= 145 && LA174_0 <= 146)||(LA174_0 >= 149 && LA174_0 <= 150)||LA174_0==154||LA174_0==156||LA174_0==159||LA174_0==162||LA174_0==164||LA174_0==169||(LA174_0 >= 173 && LA174_0 <= 174)||LA174_0==185||LA174_0==192||LA174_0==196||LA174_0==198) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:805:7: enum_member_declarations ( ',' )?
                    {
                    pushFollow(FOLLOW_enum_member_declarations_in_enum_body4855);
                    enum_member_declarations618=enum_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_member_declarations618.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:805:32: ( ',' )?
                    int alt173=2;
                    int LA173_0 = input.LA(1);

                    if ( (LA173_0==77) ) {
                        alt173=1;
                    }
                    switch (alt173) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:805:32: ','
                            {
                            char_literal619=(Token)match(input,77,FOLLOW_77_in_enum_body4857); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal619_tree = 
                            (Object)adaptor.create(char_literal619)
                            ;
                            adaptor.addChild(root_0, char_literal619_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }


            char_literal620=(Token)match(input,203,FOLLOW_203_in_enum_body4864); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal620_tree = 
            (Object)adaptor.create(char_literal620)
            ;
            adaptor.addChild(root_0, char_literal620_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 179, enum_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enum_body"


    public static class enum_member_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_member_declarations"
    // CodeR.CSharp.Parser/src/antlr/cs.g:806:1: enum_member_declarations : enum_member_declaration ( ',' enum_member_declaration )* ;
    public final csParser.enum_member_declarations_return enum_member_declarations() throws RecognitionException {
        csParser.enum_member_declarations_return retval = new csParser.enum_member_declarations_return();
        retval.start = input.LT(1);

        int enum_member_declarations_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal622=null;
        csParser.enum_member_declaration_return enum_member_declaration621 =null;

        csParser.enum_member_declaration_return enum_member_declaration623 =null;


        Object char_literal622_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:806:25: ( enum_member_declaration ( ',' enum_member_declaration )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:807:2: enum_member_declaration ( ',' enum_member_declaration )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_enum_member_declaration_in_enum_member_declarations4872);
            enum_member_declaration621=enum_member_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_member_declaration621.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:807:26: ( ',' enum_member_declaration )*
            loop175:
            do {
                int alt175=2;
                int LA175_0 = input.LA(1);

                if ( (LA175_0==77) ) {
                    int LA175_1 = input.LA(2);

                    if ( (LA175_1==IDENTIFIER||LA175_1==94||LA175_1==98||(LA175_1 >= 100 && LA175_1 <= 101)||(LA175_1 >= 103 && LA175_1 <= 104)||LA175_1==108||LA175_1==119||LA175_1==122||LA175_1==124||LA175_1==128||LA175_1==134||LA175_1==137||LA175_1==143||(LA175_1 >= 145 && LA175_1 <= 146)||(LA175_1 >= 149 && LA175_1 <= 150)||LA175_1==154||LA175_1==156||LA175_1==159||LA175_1==162||LA175_1==164||LA175_1==169||(LA175_1 >= 173 && LA175_1 <= 174)||LA175_1==185||LA175_1==192||LA175_1==196||LA175_1==198) ) {
                        alt175=1;
                    }


                }


                switch (alt175) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:807:27: ',' enum_member_declaration
            	    {
            	    char_literal622=(Token)match(input,77,FOLLOW_77_in_enum_member_declarations4875); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal622_tree = 
            	    (Object)adaptor.create(char_literal622)
            	    ;
            	    adaptor.addChild(root_0, char_literal622_tree);
            	    }

            	    pushFollow(FOLLOW_enum_member_declaration_in_enum_member_declarations4877);
            	    enum_member_declaration623=enum_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_member_declaration623.getTree());

            	    }
            	    break;

            	default :
            	    break loop175;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 180, enum_member_declarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enum_member_declarations"


    public static class enum_member_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_member_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:808:1: enum_member_declaration : ( attributes )? identifier ( '=' expression )? ;
    public final csParser.enum_member_declaration_return enum_member_declaration() throws RecognitionException {
        csParser.enum_member_declaration_return retval = new csParser.enum_member_declaration_return();
        retval.start = input.LT(1);

        int enum_member_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal626=null;
        csParser.attributes_return attributes624 =null;

        csParser.identifier_return identifier625 =null;

        csParser.expression_return expression627 =null;


        Object char_literal626_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:808:24: ( ( attributes )? identifier ( '=' expression )? )
            // CodeR.CSharp.Parser/src/antlr/cs.g:809:2: ( attributes )? identifier ( '=' expression )?
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:809:2: ( attributes )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==94) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:809:2: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_enum_member_declaration4887);
                    attributes624=attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes624.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_identifier_in_enum_member_declaration4892);
            identifier625=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier625.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:809:29: ( '=' expression )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==88) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:809:30: '=' expression
                    {
                    char_literal626=(Token)match(input,88,FOLLOW_88_in_enum_member_declaration4897); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal626_tree = 
                    (Object)adaptor.create(char_literal626)
                    ;
                    adaptor.addChild(root_0, char_literal626_tree);
                    }

                    pushFollow(FOLLOW_expression_in_enum_member_declaration4901);
                    expression627=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression627.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 181, enum_member_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enum_member_declaration"


    public static class integral_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "integral_type"
    // CodeR.CSharp.Parser/src/antlr/cs.g:814:1: integral_type : ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' );
    public final csParser.integral_type_return integral_type() throws RecognitionException {
        csParser.integral_type_return retval = new csParser.integral_type_return();
        retval.start = input.LT(1);

        int integral_type_StartIndex = input.index();

        Object root_0 = null;

        Token set628=null;

        Object set628_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:814:14: ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:
            {
            root_0 = (Object)adaptor.nil();


            set628=(Token)input.LT(1);

            if ( input.LA(1)==109||input.LA(1)==111||input.LA(1)==140||input.LA(1)==148||input.LA(1)==171||input.LA(1)==175||(input.LA(1) >= 187 && input.LA(1) <= 188)||input.LA(1)==191 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set628)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 182, integral_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "integral_type"


    public static class delegate_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "delegate_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:818:1: delegate_declaration : 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' ;
    public final csParser.delegate_declaration_return delegate_declaration() throws RecognitionException {
        csParser.delegate_declaration_return retval = new csParser.delegate_declaration_return();
        retval.start = input.LT(1);

        int delegate_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal629=null;
        Token char_literal633=null;
        Token char_literal635=null;
        Token char_literal637=null;
        csParser.return_type_return return_type630 =null;

        csParser.identifier_return identifier631 =null;

        csParser.variant_generic_parameter_list_return variant_generic_parameter_list632 =null;

        csParser.formal_parameter_list_return formal_parameter_list634 =null;

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses636 =null;


        Object string_literal629_tree=null;
        Object char_literal633_tree=null;
        Object char_literal635_tree=null;
        Object char_literal637_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:818:21: ( 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:819:2: 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal629=(Token)match(input,118,FOLLOW_118_in_delegate_declaration4958); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal629_tree = 
            (Object)adaptor.create(string_literal629)
            ;
            adaptor.addChild(root_0, string_literal629_tree);
            }

            pushFollow(FOLLOW_return_type_in_delegate_declaration4962);
            return_type630=return_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, return_type630.getTree());

            pushFollow(FOLLOW_identifier_in_delegate_declaration4966);
            identifier631=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier631.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:819:41: ( variant_generic_parameter_list )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==84) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:819:41: variant_generic_parameter_list
                    {
                    pushFollow(FOLLOW_variant_generic_parameter_list_in_delegate_declaration4969);
                    variant_generic_parameter_list632=variant_generic_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variant_generic_parameter_list632.getTree());

                    }
                    break;

            }


            char_literal633=(Token)match(input,71,FOLLOW_71_in_delegate_declaration4977); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal633_tree = 
            (Object)adaptor.create(char_literal633)
            ;
            adaptor.addChild(root_0, char_literal633_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:820:9: ( formal_parameter_list )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==IDENTIFIER||LA179_0==94||LA179_0==98||(LA179_0 >= 100 && LA179_0 <= 101)||(LA179_0 >= 103 && LA179_0 <= 104)||LA179_0==106||(LA179_0 >= 108 && LA179_0 <= 109)||LA179_0==111||LA179_0==116||LA179_0==119||(LA179_0 >= 121 && LA179_0 <= 122)||LA179_0==124||LA179_0==128||LA179_0==131||LA179_0==134||LA179_0==137||LA179_0==140||LA179_0==143||(LA179_0 >= 145 && LA179_0 <= 146)||(LA179_0 >= 148 && LA179_0 <= 150)||(LA179_0 >= 153 && LA179_0 <= 154)||(LA179_0 >= 156 && LA179_0 <= 157)||(LA179_0 >= 159 && LA179_0 <= 160)||LA179_0==162||LA179_0==164||(LA179_0 >= 168 && LA179_0 <= 169)||LA179_0==171||(LA179_0 >= 173 && LA179_0 <= 175)||LA179_0==179||LA179_0==182||LA179_0==185||(LA179_0 >= 187 && LA179_0 <= 188)||(LA179_0 >= 191 && LA179_0 <= 192)||LA179_0==194||LA179_0==196||LA179_0==198) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:820:9: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_delegate_declaration4981);
                    formal_parameter_list634=formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_parameter_list634.getTree());

                    }
                    break;

            }


            char_literal635=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_delegate_declaration4986); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal635_tree = 
            (Object)adaptor.create(char_literal635)
            ;
            adaptor.addChild(root_0, char_literal635_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:820:40: ( type_parameter_constraints_clauses )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==196) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:820:40: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration4990);
                    type_parameter_constraints_clauses636=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraints_clauses636.getTree());

                    }
                    break;

            }


            char_literal637=(Token)match(input,SEMI,FOLLOW_SEMI_in_delegate_declaration4995); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal637_tree = 
            (Object)adaptor.create(char_literal637)
            ;
            adaptor.addChild(root_0, char_literal637_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 183, delegate_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "delegate_declaration"


    public static class delegate_modifiers_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "delegate_modifiers"
    // CodeR.CSharp.Parser/src/antlr/cs.g:821:1: delegate_modifiers : ( modifier )+ ;
    public final csParser.delegate_modifiers_return delegate_modifiers() throws RecognitionException {
        csParser.delegate_modifiers_return retval = new csParser.delegate_modifiers_return();
        retval.start = input.LT(1);

        int delegate_modifiers_StartIndex = input.index();

        Object root_0 = null;

        csParser.modifier_return modifier638 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:821:19: ( ( modifier )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:822:2: ( modifier )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:822:2: ( modifier )+
            int cnt181=0;
            loop181:
            do {
                int alt181=2;
                int LA181_0 = input.LA(1);

                if ( (LA181_0==99||LA181_0==127||LA181_0==142||LA181_0==152||LA181_0==158||LA181_0==163||(LA181_0 >= 165 && LA181_0 <= 167)||LA181_0==172||LA181_0==178||LA181_0==190||LA181_0==193||LA181_0==195) ) {
                    alt181=1;
                }


                switch (alt181) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:822:2: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_delegate_modifiers5003);
            	    modifier638=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier638.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt181 >= 1 ) break loop181;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(181, input);
                        throw eee;
                }
                cnt181++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 184, delegate_modifiers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "delegate_modifiers"


    public static class variant_generic_parameter_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variant_generic_parameter_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:824:1: variant_generic_parameter_list : '<' variant_type_parameters '>' ;
    public final csParser.variant_generic_parameter_list_return variant_generic_parameter_list() throws RecognitionException {
        csParser.variant_generic_parameter_list_return retval = new csParser.variant_generic_parameter_list_return();
        retval.start = input.LT(1);

        int variant_generic_parameter_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal639=null;
        Token char_literal641=null;
        csParser.variant_type_parameters_return variant_type_parameters640 =null;


        Object char_literal639_tree=null;
        Object char_literal641_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:824:31: ( '<' variant_type_parameters '>' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:825:2: '<' variant_type_parameters '>'
            {
            root_0 = (Object)adaptor.nil();


            char_literal639=(Token)match(input,84,FOLLOW_84_in_variant_generic_parameter_list5013); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal639_tree = 
            (Object)adaptor.create(char_literal639)
            ;
            adaptor.addChild(root_0, char_literal639_tree);
            }

            pushFollow(FOLLOW_variant_type_parameters_in_variant_generic_parameter_list5017);
            variant_type_parameters640=variant_type_parameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variant_type_parameters640.getTree());

            char_literal641=(Token)match(input,GT,FOLLOW_GT_in_variant_generic_parameter_list5021); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal641_tree = 
            (Object)adaptor.create(char_literal641)
            ;
            adaptor.addChild(root_0, char_literal641_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 185, variant_generic_parameter_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variant_generic_parameter_list"


    public static class variant_type_parameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variant_type_parameters"
    // CodeR.CSharp.Parser/src/antlr/cs.g:826:1: variant_type_parameters : variant_type_variable_name ( ',' variant_type_variable_name )* ;
    public final csParser.variant_type_parameters_return variant_type_parameters() throws RecognitionException {
        csParser.variant_type_parameters_return retval = new csParser.variant_type_parameters_return();
        retval.start = input.LT(1);

        int variant_type_parameters_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal643=null;
        csParser.variant_type_variable_name_return variant_type_variable_name642 =null;

        csParser.variant_type_variable_name_return variant_type_variable_name644 =null;


        Object char_literal643_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:826:24: ( variant_type_variable_name ( ',' variant_type_variable_name )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:827:2: variant_type_variable_name ( ',' variant_type_variable_name )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_variant_type_variable_name_in_variant_type_parameters5029);
            variant_type_variable_name642=variant_type_variable_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variant_type_variable_name642.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:827:29: ( ',' variant_type_variable_name )*
            loop182:
            do {
                int alt182=2;
                int LA182_0 = input.LA(1);

                if ( (LA182_0==77) ) {
                    alt182=1;
                }


                switch (alt182) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:827:30: ',' variant_type_variable_name
            	    {
            	    char_literal643=(Token)match(input,77,FOLLOW_77_in_variant_type_parameters5032); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal643_tree = 
            	    (Object)adaptor.create(char_literal643)
            	    ;
            	    adaptor.addChild(root_0, char_literal643_tree);
            	    }

            	    pushFollow(FOLLOW_variant_type_variable_name_in_variant_type_parameters5034);
            	    variant_type_variable_name644=variant_type_variable_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variant_type_variable_name644.getTree());

            	    }
            	    break;

            	default :
            	    break loop182;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 186, variant_type_parameters_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variant_type_parameters"


    public static class variant_type_variable_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variant_type_variable_name"
    // CodeR.CSharp.Parser/src/antlr/cs.g:828:1: variant_type_variable_name : ( attributes )? ( variance_annotation )? type_variable_name ;
    public final csParser.variant_type_variable_name_return variant_type_variable_name() throws RecognitionException {
        csParser.variant_type_variable_name_return retval = new csParser.variant_type_variable_name_return();
        retval.start = input.LT(1);

        int variant_type_variable_name_StartIndex = input.index();

        Object root_0 = null;

        csParser.attributes_return attributes645 =null;

        csParser.variance_annotation_return variance_annotation646 =null;

        csParser.type_variable_name_return type_variable_name647 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:828:27: ( ( attributes )? ( variance_annotation )? type_variable_name )
            // CodeR.CSharp.Parser/src/antlr/cs.g:829:2: ( attributes )? ( variance_annotation )? type_variable_name
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:829:2: ( attributes )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==94) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:829:2: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_variant_type_variable_name5044);
                    attributes645=attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes645.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:829:16: ( variance_annotation )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==139||LA184_0==157) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:829:16: variance_annotation
                    {
                    pushFollow(FOLLOW_variance_annotation_in_variant_type_variable_name5049);
                    variance_annotation646=variance_annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variance_annotation646.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_type_variable_name_in_variant_type_variable_name5054);
            type_variable_name647=type_variable_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_variable_name647.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 187, variant_type_variable_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variant_type_variable_name"


    public static class variance_annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variance_annotation"
    // CodeR.CSharp.Parser/src/antlr/cs.g:830:1: variance_annotation : ( 'in' | 'out' );
    public final csParser.variance_annotation_return variance_annotation() throws RecognitionException {
        csParser.variance_annotation_return retval = new csParser.variance_annotation_return();
        retval.start = input.LT(1);

        int variance_annotation_StartIndex = input.index();

        Object root_0 = null;

        Token set648=null;

        Object set648_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:830:20: ( 'in' | 'out' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:
            {
            root_0 = (Object)adaptor.nil();


            set648=(Token)input.LT(1);

            if ( input.LA(1)==139||input.LA(1)==157 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set648)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 188, variance_annotation_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variance_annotation"


    public static class type_parameter_constraints_clauses_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_parameter_constraints_clauses"
    // CodeR.CSharp.Parser/src/antlr/cs.g:833:1: type_parameter_constraints_clauses : type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )* ;
    public final csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses() throws RecognitionException {
        csParser.type_parameter_constraints_clauses_return retval = new csParser.type_parameter_constraints_clauses_return();
        retval.start = input.LT(1);

        int type_parameter_constraints_clauses_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal650=null;
        csParser.type_parameter_constraints_clause_return type_parameter_constraints_clause649 =null;

        csParser.type_parameter_constraints_clause_return type_parameter_constraints_clause651 =null;


        Object char_literal650_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:833:35: ( type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:834:2: type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses5075);
            type_parameter_constraints_clause649=type_parameter_constraints_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraints_clause649.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:834:38: ( ',' type_parameter_constraints_clause )*
            loop185:
            do {
                int alt185=2;
                int LA185_0 = input.LA(1);

                if ( (LA185_0==77) ) {
                    alt185=1;
                }


                switch (alt185) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:834:39: ',' type_parameter_constraints_clause
            	    {
            	    char_literal650=(Token)match(input,77,FOLLOW_77_in_type_parameter_constraints_clauses5080); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal650_tree = 
            	    (Object)adaptor.create(char_literal650)
            	    ;
            	    adaptor.addChild(root_0, char_literal650_tree);
            	    }

            	    pushFollow(FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses5084);
            	    type_parameter_constraints_clause651=type_parameter_constraints_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraints_clause651.getTree());

            	    }
            	    break;

            	default :
            	    break loop185;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 189, type_parameter_constraints_clauses_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraints_clauses"


    public static class type_parameter_constraints_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_parameter_constraints_clause"
    // CodeR.CSharp.Parser/src/antlr/cs.g:835:1: type_parameter_constraints_clause : 'where' type_variable_name ':' type_parameter_constraint_list ;
    public final csParser.type_parameter_constraints_clause_return type_parameter_constraints_clause() throws RecognitionException {
        csParser.type_parameter_constraints_clause_return retval = new csParser.type_parameter_constraints_clause_return();
        retval.start = input.LT(1);

        int type_parameter_constraints_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal652=null;
        Token char_literal654=null;
        csParser.type_variable_name_return type_variable_name653 =null;

        csParser.type_parameter_constraint_list_return type_parameter_constraint_list655 =null;


        Object string_literal652_tree=null;
        Object char_literal654_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:835:34: ( 'where' type_variable_name ':' type_parameter_constraint_list )
            // CodeR.CSharp.Parser/src/antlr/cs.g:836:2: 'where' type_variable_name ':' type_parameter_constraint_list
            {
            root_0 = (Object)adaptor.nil();


            string_literal652=(Token)match(input,196,FOLLOW_196_in_type_parameter_constraints_clause5094); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal652_tree = 
            (Object)adaptor.create(string_literal652)
            ;
            adaptor.addChild(root_0, string_literal652_tree);
            }

            pushFollow(FOLLOW_type_variable_name_in_type_parameter_constraints_clause5098);
            type_variable_name653=type_variable_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_variable_name653.getTree());

            char_literal654=(Token)match(input,82,FOLLOW_82_in_type_parameter_constraints_clause5102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal654_tree = 
            (Object)adaptor.create(char_literal654)
            ;
            adaptor.addChild(root_0, char_literal654_tree);
            }

            pushFollow(FOLLOW_type_parameter_constraint_list_in_type_parameter_constraints_clause5106);
            type_parameter_constraint_list655=type_parameter_constraint_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraint_list655.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 190, type_parameter_constraints_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraints_clause"


    public static class type_parameter_constraint_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_parameter_constraint_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:838:1: type_parameter_constraint_list : ( ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )? | secondary_constraint_list ( ',' constructor_constraint )? | constructor_constraint );
    public final csParser.type_parameter_constraint_list_return type_parameter_constraint_list() throws RecognitionException {
        csParser.type_parameter_constraint_list_return retval = new csParser.type_parameter_constraint_list_return();
        retval.start = input.LT(1);

        int type_parameter_constraint_list_StartIndex = input.index();

        Object root_0 = null;

        Token set656=null;
        Token char_literal657=null;
        Token char_literal659=null;
        Token char_literal662=null;
        csParser.secondary_constraint_list_return secondary_constraint_list658 =null;

        csParser.constructor_constraint_return constructor_constraint660 =null;

        csParser.secondary_constraint_list_return secondary_constraint_list661 =null;

        csParser.constructor_constraint_return constructor_constraint663 =null;

        csParser.constructor_constraint_return constructor_constraint664 =null;


        Object set656_tree=null;
        Object char_literal657_tree=null;
        Object char_literal659_tree=null;
        Object char_literal662_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:838:31: ( ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )? | secondary_constraint_list ( ',' constructor_constraint )? | constructor_constraint )
            int alt189=3;
            switch ( input.LA(1) ) {
            case 113:
            case 180:
                {
                alt189=1;
                }
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 134:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
                {
                alt189=2;
                }
                break;
            case 152:
                {
                alt189=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;

            }

            switch (alt189) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:839:5: ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )?
                    {
                    root_0 = (Object)adaptor.nil();


                    set656=(Token)input.LT(1);

                    if ( input.LA(1)==113||input.LA(1)==180 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set656)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // CodeR.CSharp.Parser/src/antlr/cs.g:839:28: ( ',' secondary_constraint_list )?
                    int alt186=2;
                    int LA186_0 = input.LA(1);

                    if ( (LA186_0==77) ) {
                        int LA186_1 = input.LA(2);

                        if ( (LA186_1==196) ) {
                            int LA186_3 = input.LA(3);

                            if ( (LA186_3==DOT||LA186_3==SEMI||LA186_3==77||(LA186_3 >= 83 && LA186_3 <= 84)||LA186_3==199) ) {
                                alt186=1;
                            }
                        }
                        else if ( (LA186_1==IDENTIFIER||LA186_1==98||(LA186_1 >= 100 && LA186_1 <= 101)||(LA186_1 >= 103 && LA186_1 <= 104)||LA186_1==108||LA186_1==119||LA186_1==122||LA186_1==124||LA186_1==128||LA186_1==134||LA186_1==137||LA186_1==143||(LA186_1 >= 145 && LA186_1 <= 146)||(LA186_1 >= 149 && LA186_1 <= 150)||LA186_1==154||LA186_1==156||LA186_1==159||LA186_1==162||LA186_1==164||LA186_1==169||(LA186_1 >= 173 && LA186_1 <= 174)||LA186_1==185||LA186_1==192||LA186_1==198) ) {
                            alt186=1;
                        }
                    }
                    switch (alt186) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:839:29: ',' secondary_constraint_list
                            {
                            char_literal657=(Token)match(input,77,FOLLOW_77_in_type_parameter_constraint_list5180); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal657_tree = 
                            (Object)adaptor.create(char_literal657)
                            ;
                            adaptor.addChild(root_0, char_literal657_tree);
                            }

                            pushFollow(FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list5184);
                            secondary_constraint_list658=secondary_constraint_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, secondary_constraint_list658.getTree());

                            }
                            break;

                    }


                    // CodeR.CSharp.Parser/src/antlr/cs.g:839:65: ( ',' constructor_constraint )?
                    int alt187=2;
                    int LA187_0 = input.LA(1);

                    if ( (LA187_0==77) ) {
                        int LA187_1 = input.LA(2);

                        if ( (LA187_1==152) ) {
                            alt187=1;
                        }
                    }
                    switch (alt187) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:839:66: ',' constructor_constraint
                            {
                            char_literal659=(Token)match(input,77,FOLLOW_77_in_type_parameter_constraint_list5191); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal659_tree = 
                            (Object)adaptor.create(char_literal659)
                            ;
                            adaptor.addChild(root_0, char_literal659_tree);
                            }

                            pushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraint_list5195);
                            constructor_constraint660=constructor_constraint();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_constraint660.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:840:4: secondary_constraint_list ( ',' constructor_constraint )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list5202);
                    secondary_constraint_list661=secondary_constraint_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, secondary_constraint_list661.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:840:32: ( ',' constructor_constraint )?
                    int alt188=2;
                    int LA188_0 = input.LA(1);

                    if ( (LA188_0==77) ) {
                        int LA188_1 = input.LA(2);

                        if ( (LA188_1==152) ) {
                            alt188=1;
                        }
                    }
                    switch (alt188) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:840:33: ',' constructor_constraint
                            {
                            char_literal662=(Token)match(input,77,FOLLOW_77_in_type_parameter_constraint_list5207); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal662_tree = 
                            (Object)adaptor.create(char_literal662)
                            ;
                            adaptor.addChild(root_0, char_literal662_tree);
                            }

                            pushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraint_list5211);
                            constructor_constraint663=constructor_constraint();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_constraint663.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:841:4: constructor_constraint
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraint_list5218);
                    constructor_constraint664=constructor_constraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_constraint664.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 191, type_parameter_constraint_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraint_list"


    public static class secondary_constraint_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "secondary_constraint_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:846:1: secondary_constraint_list : secondary_constraint ( ',' secondary_constraint )* ;
    public final csParser.secondary_constraint_list_return secondary_constraint_list() throws RecognitionException {
        csParser.secondary_constraint_list_return retval = new csParser.secondary_constraint_list_return();
        retval.start = input.LT(1);

        int secondary_constraint_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal666=null;
        csParser.secondary_constraint_return secondary_constraint665 =null;

        csParser.secondary_constraint_return secondary_constraint667 =null;


        Object char_literal666_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:846:26: ( secondary_constraint ( ',' secondary_constraint )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:847:2: secondary_constraint ( ',' secondary_constraint )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_secondary_constraint_in_secondary_constraint_list5230);
            secondary_constraint665=secondary_constraint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, secondary_constraint665.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:847:23: ( ',' secondary_constraint )*
            loop190:
            do {
                int alt190=2;
                int LA190_0 = input.LA(1);

                if ( (LA190_0==77) ) {
                    int LA190_1 = input.LA(2);

                    if ( (LA190_1==196) ) {
                        int LA190_3 = input.LA(3);

                        if ( (LA190_3==DOT||LA190_3==SEMI||LA190_3==77||(LA190_3 >= 83 && LA190_3 <= 84)||LA190_3==199) ) {
                            alt190=1;
                        }


                    }
                    else if ( (LA190_1==IDENTIFIER||LA190_1==98||(LA190_1 >= 100 && LA190_1 <= 101)||(LA190_1 >= 103 && LA190_1 <= 104)||LA190_1==108||LA190_1==119||LA190_1==122||LA190_1==124||LA190_1==128||LA190_1==134||LA190_1==137||LA190_1==143||(LA190_1 >= 145 && LA190_1 <= 146)||(LA190_1 >= 149 && LA190_1 <= 150)||LA190_1==154||LA190_1==156||LA190_1==159||LA190_1==162||LA190_1==164||LA190_1==169||(LA190_1 >= 173 && LA190_1 <= 174)||LA190_1==185||LA190_1==192||LA190_1==198) ) {
                        alt190=1;
                    }


                }


                switch (alt190) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:847:24: ',' secondary_constraint
            	    {
            	    char_literal666=(Token)match(input,77,FOLLOW_77_in_secondary_constraint_list5233); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal666_tree = 
            	    (Object)adaptor.create(char_literal666)
            	    ;
            	    adaptor.addChild(root_0, char_literal666_tree);
            	    }

            	    pushFollow(FOLLOW_secondary_constraint_in_secondary_constraint_list5235);
            	    secondary_constraint667=secondary_constraint();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, secondary_constraint667.getTree());

            	    }
            	    break;

            	default :
            	    break loop190;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 192, secondary_constraint_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "secondary_constraint_list"


    public static class secondary_constraint_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "secondary_constraint"
    // CodeR.CSharp.Parser/src/antlr/cs.g:848:1: secondary_constraint : type_name ;
    public final csParser.secondary_constraint_return secondary_constraint() throws RecognitionException {
        csParser.secondary_constraint_return retval = new csParser.secondary_constraint_return();
        retval.start = input.LT(1);

        int secondary_constraint_StartIndex = input.index();

        Object root_0 = null;

        csParser.type_name_return type_name668 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:848:21: ( type_name )
            // CodeR.CSharp.Parser/src/antlr/cs.g:849:2: type_name
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_name_in_secondary_constraint5245);
            type_name668=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name668.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 193, secondary_constraint_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "secondary_constraint"


    public static class type_variable_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_variable_name"
    // CodeR.CSharp.Parser/src/antlr/cs.g:850:1: type_variable_name : identifier ;
    public final csParser.type_variable_name_return type_variable_name() throws RecognitionException {
        csParser.type_variable_name_return retval = new csParser.type_variable_name_return();
        retval.start = input.LT(1);

        int type_variable_name_StartIndex = input.index();

        Object root_0 = null;

        csParser.identifier_return identifier669 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:850:19: ( identifier )
            // CodeR.CSharp.Parser/src/antlr/cs.g:851:2: identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_type_variable_name5255);
            identifier669=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier669.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 194, type_variable_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_variable_name"


    public static class constructor_constraint_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constructor_constraint"
    // CodeR.CSharp.Parser/src/antlr/cs.g:852:1: constructor_constraint : 'new' '(' ')' ;
    public final csParser.constructor_constraint_return constructor_constraint() throws RecognitionException {
        csParser.constructor_constraint_return retval = new csParser.constructor_constraint_return();
        retval.start = input.LT(1);

        int constructor_constraint_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal670=null;
        Token char_literal671=null;
        Token char_literal672=null;

        Object string_literal670_tree=null;
        Object char_literal671_tree=null;
        Object char_literal672_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:852:23: ( 'new' '(' ')' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:853:2: 'new' '(' ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal670=(Token)match(input,152,FOLLOW_152_in_constructor_constraint5263); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal670_tree = 
            (Object)adaptor.create(string_literal670)
            ;
            adaptor.addChild(root_0, string_literal670_tree);
            }

            char_literal671=(Token)match(input,71,FOLLOW_71_in_constructor_constraint5267); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal671_tree = 
            (Object)adaptor.create(char_literal671)
            ;
            adaptor.addChild(root_0, char_literal671_tree);
            }

            char_literal672=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constructor_constraint5271); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal672_tree = 
            (Object)adaptor.create(char_literal672)
            ;
            adaptor.addChild(root_0, char_literal672_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 195, constructor_constraint_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constructor_constraint"


    public static class return_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_type"
    // CodeR.CSharp.Parser/src/antlr/cs.g:854:1: return_type : ( type | 'void' );
    public final csParser.return_type_return return_type() throws RecognitionException {
        csParser.return_type_return retval = new csParser.return_type_return();
        retval.start = input.LT(1);

        int return_type_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal674=null;
        csParser.type_return type673 =null;


        Object string_literal674_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:854:12: ( type | 'void' )
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==IDENTIFIER||LA191_0==98||(LA191_0 >= 100 && LA191_0 <= 101)||(LA191_0 >= 103 && LA191_0 <= 104)||LA191_0==106||(LA191_0 >= 108 && LA191_0 <= 109)||LA191_0==111||LA191_0==116||LA191_0==119||(LA191_0 >= 121 && LA191_0 <= 122)||LA191_0==124||LA191_0==128||LA191_0==131||LA191_0==134||LA191_0==137||LA191_0==140||LA191_0==143||(LA191_0 >= 145 && LA191_0 <= 146)||(LA191_0 >= 148 && LA191_0 <= 150)||(LA191_0 >= 153 && LA191_0 <= 154)||LA191_0==156||LA191_0==159||LA191_0==162||LA191_0==164||LA191_0==169||LA191_0==171||(LA191_0 >= 173 && LA191_0 <= 175)||LA191_0==179||LA191_0==185||(LA191_0 >= 187 && LA191_0 <= 188)||(LA191_0 >= 191 && LA191_0 <= 192)||LA191_0==196||LA191_0==198) ) {
                alt191=1;
            }
            else if ( (LA191_0==194) ) {
                int LA191_2 = input.LA(2);

                if ( (LA191_2==72) ) {
                    alt191=1;
                }
                else if ( (LA191_2==IDENTIFIER||LA191_2==98||(LA191_2 >= 100 && LA191_2 <= 101)||(LA191_2 >= 103 && LA191_2 <= 104)||LA191_2==108||LA191_2==119||LA191_2==122||LA191_2==124||LA191_2==128||LA191_2==134||LA191_2==137||LA191_2==143||(LA191_2 >= 145 && LA191_2 <= 146)||(LA191_2 >= 149 && LA191_2 <= 150)||LA191_2==154||LA191_2==156||LA191_2==159||LA191_2==162||LA191_2==164||LA191_2==169||(LA191_2 >= 173 && LA191_2 <= 174)||LA191_2==185||LA191_2==192||LA191_2==196||LA191_2==198) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;

            }
            switch (alt191) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:855:2: type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_in_return_type5279);
                    type673=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type673.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:856:5: 'void'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal674=(Token)match(input,194,FOLLOW_194_in_return_type5285); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal674_tree = 
                    (Object)adaptor.create(string_literal674)
                    ;
                    adaptor.addChild(root_0, string_literal674_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 196, return_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "return_type"


    public static class formal_parameter_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "formal_parameter_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:857:1: formal_parameter_list : formal_parameter ( ',' formal_parameter )* ;
    public final csParser.formal_parameter_list_return formal_parameter_list() throws RecognitionException {
        csParser.formal_parameter_list_return retval = new csParser.formal_parameter_list_return();
        retval.start = input.LT(1);

        int formal_parameter_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal676=null;
        csParser.formal_parameter_return formal_parameter675 =null;

        csParser.formal_parameter_return formal_parameter677 =null;


        Object char_literal676_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:857:22: ( formal_parameter ( ',' formal_parameter )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:858:2: formal_parameter ( ',' formal_parameter )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_formal_parameter_in_formal_parameter_list5292);
            formal_parameter675=formal_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_parameter675.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:858:19: ( ',' formal_parameter )*
            loop192:
            do {
                int alt192=2;
                int LA192_0 = input.LA(1);

                if ( (LA192_0==77) ) {
                    alt192=1;
                }


                switch (alt192) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:858:20: ',' formal_parameter
            	    {
            	    char_literal676=(Token)match(input,77,FOLLOW_77_in_formal_parameter_list5295); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal676_tree = 
            	    (Object)adaptor.create(char_literal676)
            	    ;
            	    adaptor.addChild(root_0, char_literal676_tree);
            	    }

            	    pushFollow(FOLLOW_formal_parameter_in_formal_parameter_list5297);
            	    formal_parameter677=formal_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_parameter677.getTree());

            	    }
            	    break;

            	default :
            	    break loop192;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 197, formal_parameter_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "formal_parameter_list"


    public static class formal_parameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "formal_parameter"
    // CodeR.CSharp.Parser/src/antlr/cs.g:859:1: formal_parameter : ( ( attributes )? ( fixed_parameter | parameter_array ) | '__arglist' );
    public final csParser.formal_parameter_return formal_parameter() throws RecognitionException {
        csParser.formal_parameter_return retval = new csParser.formal_parameter_return();
        retval.start = input.LT(1);

        int formal_parameter_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal681=null;
        csParser.attributes_return attributes678 =null;

        csParser.fixed_parameter_return fixed_parameter679 =null;

        csParser.parameter_array_return parameter_array680 =null;


        Object string_literal681_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:859:17: ( ( attributes )? ( fixed_parameter | parameter_array ) | '__arglist' )
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==IDENTIFIER||LA195_0==94||(LA195_0 >= 100 && LA195_0 <= 101)||(LA195_0 >= 103 && LA195_0 <= 104)||LA195_0==106||(LA195_0 >= 108 && LA195_0 <= 109)||LA195_0==111||LA195_0==116||LA195_0==119||(LA195_0 >= 121 && LA195_0 <= 122)||LA195_0==124||LA195_0==128||LA195_0==131||LA195_0==134||LA195_0==137||LA195_0==140||LA195_0==143||(LA195_0 >= 145 && LA195_0 <= 146)||(LA195_0 >= 148 && LA195_0 <= 150)||(LA195_0 >= 153 && LA195_0 <= 154)||(LA195_0 >= 156 && LA195_0 <= 157)||(LA195_0 >= 159 && LA195_0 <= 160)||LA195_0==162||LA195_0==164||(LA195_0 >= 168 && LA195_0 <= 169)||LA195_0==171||(LA195_0 >= 173 && LA195_0 <= 175)||LA195_0==179||LA195_0==182||LA195_0==185||(LA195_0 >= 187 && LA195_0 <= 188)||(LA195_0 >= 191 && LA195_0 <= 192)||LA195_0==194||LA195_0==196||LA195_0==198) ) {
                alt195=1;
            }
            else if ( (LA195_0==98) ) {
                int LA195_2 = input.LA(2);

                if ( (LA195_2==DOT||LA195_2==IDENTIFIER||LA195_2==72||(LA195_2 >= 83 && LA195_2 <= 84)||LA195_2==92||LA195_2==94||LA195_2==98||(LA195_2 >= 100 && LA195_2 <= 101)||(LA195_2 >= 103 && LA195_2 <= 104)||LA195_2==108||LA195_2==119||LA195_2==122||LA195_2==124||LA195_2==128||LA195_2==134||LA195_2==137||LA195_2==143||(LA195_2 >= 145 && LA195_2 <= 146)||(LA195_2 >= 149 && LA195_2 <= 150)||LA195_2==154||LA195_2==156||LA195_2==159||LA195_2==162||LA195_2==164||LA195_2==169||(LA195_2 >= 173 && LA195_2 <= 174)||LA195_2==185||LA195_2==192||LA195_2==196||LA195_2==198) ) {
                    alt195=1;
                }
                else if ( (LA195_2==RPAREN||LA195_2==77||LA195_2==95) ) {
                    alt195=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 195, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;

            }
            switch (alt195) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:860:2: ( attributes )? ( fixed_parameter | parameter_array )
                    {
                    root_0 = (Object)adaptor.nil();


                    // CodeR.CSharp.Parser/src/antlr/cs.g:860:2: ( attributes )?
                    int alt193=2;
                    int LA193_0 = input.LA(1);

                    if ( (LA193_0==94) ) {
                        alt193=1;
                    }
                    switch (alt193) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:860:2: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_formal_parameter5307);
                            attributes678=attributes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes678.getTree());

                            }
                            break;

                    }


                    // CodeR.CSharp.Parser/src/antlr/cs.g:860:16: ( fixed_parameter | parameter_array )
                    int alt194=2;
                    int LA194_0 = input.LA(1);

                    if ( (LA194_0==IDENTIFIER||LA194_0==98||(LA194_0 >= 100 && LA194_0 <= 101)||(LA194_0 >= 103 && LA194_0 <= 104)||LA194_0==106||(LA194_0 >= 108 && LA194_0 <= 109)||LA194_0==111||LA194_0==116||LA194_0==119||(LA194_0 >= 121 && LA194_0 <= 122)||LA194_0==124||LA194_0==128||LA194_0==131||LA194_0==134||LA194_0==137||LA194_0==140||LA194_0==143||(LA194_0 >= 145 && LA194_0 <= 146)||(LA194_0 >= 148 && LA194_0 <= 150)||(LA194_0 >= 153 && LA194_0 <= 154)||(LA194_0 >= 156 && LA194_0 <= 157)||LA194_0==159||LA194_0==162||LA194_0==164||(LA194_0 >= 168 && LA194_0 <= 169)||LA194_0==171||(LA194_0 >= 173 && LA194_0 <= 175)||LA194_0==179||LA194_0==182||LA194_0==185||(LA194_0 >= 187 && LA194_0 <= 188)||(LA194_0 >= 191 && LA194_0 <= 192)||LA194_0==194||LA194_0==196||LA194_0==198) ) {
                        alt194=1;
                    }
                    else if ( (LA194_0==160) ) {
                        alt194=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 194, 0, input);

                        throw nvae;

                    }
                    switch (alt194) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:860:17: fixed_parameter
                            {
                            pushFollow(FOLLOW_fixed_parameter_in_formal_parameter5313);
                            fixed_parameter679=fixed_parameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_parameter679.getTree());

                            }
                            break;
                        case 2 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:860:35: parameter_array
                            {
                            pushFollow(FOLLOW_parameter_array_in_formal_parameter5317);
                            parameter_array680=parameter_array();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_array680.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:861:4: '__arglist'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal681=(Token)match(input,98,FOLLOW_98_in_formal_parameter5324); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal681_tree = 
                    (Object)adaptor.create(string_literal681)
                    ;
                    adaptor.addChild(root_0, string_literal681_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 198, formal_parameter_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "formal_parameter"


    public static class fixed_parameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fixed_parameters"
    // CodeR.CSharp.Parser/src/antlr/cs.g:862:1: fixed_parameters : fixed_parameter ( ',' fixed_parameter )* ;
    public final csParser.fixed_parameters_return fixed_parameters() throws RecognitionException {
        csParser.fixed_parameters_return retval = new csParser.fixed_parameters_return();
        retval.start = input.LT(1);

        int fixed_parameters_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal683=null;
        csParser.fixed_parameter_return fixed_parameter682 =null;

        csParser.fixed_parameter_return fixed_parameter684 =null;


        Object char_literal683_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:862:17: ( fixed_parameter ( ',' fixed_parameter )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:863:2: fixed_parameter ( ',' fixed_parameter )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_fixed_parameter_in_fixed_parameters5332);
            fixed_parameter682=fixed_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_parameter682.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:863:20: ( ',' fixed_parameter )*
            loop196:
            do {
                int alt196=2;
                int LA196_0 = input.LA(1);

                if ( (LA196_0==77) ) {
                    alt196=1;
                }


                switch (alt196) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:863:21: ',' fixed_parameter
            	    {
            	    char_literal683=(Token)match(input,77,FOLLOW_77_in_fixed_parameters5337); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal683_tree = 
            	    (Object)adaptor.create(char_literal683)
            	    ;
            	    adaptor.addChild(root_0, char_literal683_tree);
            	    }

            	    pushFollow(FOLLOW_fixed_parameter_in_fixed_parameters5341);
            	    fixed_parameter684=fixed_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_parameter684.getTree());

            	    }
            	    break;

            	default :
            	    break loop196;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 199, fixed_parameters_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fixed_parameters"


    public static class fixed_parameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fixed_parameter"
    // CodeR.CSharp.Parser/src/antlr/cs.g:865:1: fixed_parameter : ( parameter_modifier )? type identifier ( default_argument )? ;
    public final csParser.fixed_parameter_return fixed_parameter() throws RecognitionException {
        csParser.fixed_parameter_return retval = new csParser.fixed_parameter_return();
        retval.start = input.LT(1);

        int fixed_parameter_StartIndex = input.index();

        Object root_0 = null;

        csParser.parameter_modifier_return parameter_modifier685 =null;

        csParser.type_return type686 =null;

        csParser.identifier_return identifier687 =null;

        csParser.default_argument_return default_argument688 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:865:16: ( ( parameter_modifier )? type identifier ( default_argument )? )
            // CodeR.CSharp.Parser/src/antlr/cs.g:866:2: ( parameter_modifier )? type identifier ( default_argument )?
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:866:2: ( parameter_modifier )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==157||LA197_0==168||LA197_0==182) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:866:2: parameter_modifier
                    {
                    pushFollow(FOLLOW_parameter_modifier_in_fixed_parameter5352);
                    parameter_modifier685=parameter_modifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_modifier685.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_type_in_fixed_parameter5357);
            type686=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type686.getTree());

            pushFollow(FOLLOW_identifier_in_fixed_parameter5361);
            identifier687=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier687.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:866:44: ( default_argument )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==88) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:866:44: default_argument
                    {
                    pushFollow(FOLLOW_default_argument_in_fixed_parameter5365);
                    default_argument688=default_argument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, default_argument688.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 200, fixed_parameter_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fixed_parameter"


    public static class default_argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_argument"
    // CodeR.CSharp.Parser/src/antlr/cs.g:868:1: default_argument : '=' expression ;
    public final csParser.default_argument_return default_argument() throws RecognitionException {
        csParser.default_argument_return retval = new csParser.default_argument_return();
        retval.start = input.LT(1);

        int default_argument_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal689=null;
        csParser.expression_return expression690 =null;


        Object char_literal689_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:868:17: ( '=' expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:869:2: '=' expression
            {
            root_0 = (Object)adaptor.nil();


            char_literal689=(Token)match(input,88,FOLLOW_88_in_default_argument5375); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal689_tree = 
            (Object)adaptor.create(char_literal689)
            ;
            adaptor.addChild(root_0, char_literal689_tree);
            }

            pushFollow(FOLLOW_expression_in_default_argument5377);
            expression690=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression690.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 201, default_argument_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "default_argument"


    public static class parameter_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameter_modifier"
    // CodeR.CSharp.Parser/src/antlr/cs.g:870:1: parameter_modifier : ( 'ref' | 'out' | 'this' );
    public final csParser.parameter_modifier_return parameter_modifier() throws RecognitionException {
        csParser.parameter_modifier_return retval = new csParser.parameter_modifier_return();
        retval.start = input.LT(1);

        int parameter_modifier_StartIndex = input.index();

        Object root_0 = null;

        Token set691=null;

        Object set691_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:870:19: ( 'ref' | 'out' | 'this' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:
            {
            root_0 = (Object)adaptor.nil();


            set691=(Token)input.LT(1);

            if ( input.LA(1)==157||input.LA(1)==168||input.LA(1)==182 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set691)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 202, parameter_modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "parameter_modifier"


    public static class parameter_array_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameter_array"
    // CodeR.CSharp.Parser/src/antlr/cs.g:872:1: parameter_array : 'params' type identifier ;
    public final csParser.parameter_array_return parameter_array() throws RecognitionException {
        csParser.parameter_array_return retval = new csParser.parameter_array_return();
        retval.start = input.LT(1);

        int parameter_array_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal692=null;
        csParser.type_return type693 =null;

        csParser.identifier_return identifier694 =null;


        Object string_literal692_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:872:16: ( 'params' type identifier )
            // CodeR.CSharp.Parser/src/antlr/cs.g:873:2: 'params' type identifier
            {
            root_0 = (Object)adaptor.nil();


            string_literal692=(Token)match(input,160,FOLLOW_160_in_parameter_array5400); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal692_tree = 
            (Object)adaptor.create(string_literal692)
            ;
            adaptor.addChild(root_0, string_literal692_tree);
            }

            pushFollow(FOLLOW_type_in_parameter_array5404);
            type693=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type693.getTree());

            pushFollow(FOLLOW_identifier_in_parameter_array5408);
            identifier694=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier694.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 203, parameter_array_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "parameter_array"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:876:1: interface_declaration : 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? ;
    public final csParser.interface_declaration_return interface_declaration() throws RecognitionException {
        csParser.interface_declaration_return retval = new csParser.interface_declaration_return();
        retval.start = input.LT(1);

        int interface_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal695=null;
        Token char_literal701=null;
        csParser.identifier_return identifier696 =null;

        csParser.variant_generic_parameter_list_return variant_generic_parameter_list697 =null;

        csParser.interface_base_return interface_base698 =null;

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses699 =null;

        csParser.interface_body_return interface_body700 =null;


        Object string_literal695_tree=null;
        Object char_literal701_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:876:22: ( 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? )
            // CodeR.CSharp.Parser/src/antlr/cs.g:877:2: 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal695=(Token)match(input,141,FOLLOW_141_in_interface_declaration5418); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal695_tree = 
            (Object)adaptor.create(string_literal695)
            ;
            adaptor.addChild(root_0, string_literal695_tree);
            }

            pushFollow(FOLLOW_identifier_in_interface_declaration5422);
            identifier696=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier696.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:877:29: ( variant_generic_parameter_list )?
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==84) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:877:29: variant_generic_parameter_list
                    {
                    pushFollow(FOLLOW_variant_generic_parameter_list_in_interface_declaration5426);
                    variant_generic_parameter_list697=variant_generic_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variant_generic_parameter_list697.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:878:6: ( interface_base )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==82) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:878:6: interface_base
                    {
                    pushFollow(FOLLOW_interface_base_in_interface_declaration5435);
                    interface_base698=interface_base();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_base698.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:878:24: ( type_parameter_constraints_clauses )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==196) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:878:24: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_declaration5440);
                    type_parameter_constraints_clauses699=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraints_clauses699.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_interface_body_in_interface_declaration5445);
            interface_body700=interface_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_body700.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:878:79: ( ';' )?
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==SEMI) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:878:79: ';'
                    {
                    char_literal701=(Token)match(input,SEMI,FOLLOW_SEMI_in_interface_declaration5449); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal701_tree = 
                    (Object)adaptor.create(char_literal701)
                    ;
                    adaptor.addChild(root_0, char_literal701_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 204, interface_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class interface_modifiers_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_modifiers"
    // CodeR.CSharp.Parser/src/antlr/cs.g:879:1: interface_modifiers : ( modifier )+ ;
    public final csParser.interface_modifiers_return interface_modifiers() throws RecognitionException {
        csParser.interface_modifiers_return retval = new csParser.interface_modifiers_return();
        retval.start = input.LT(1);

        int interface_modifiers_StartIndex = input.index();

        Object root_0 = null;

        csParser.modifier_return modifier702 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:879:20: ( ( modifier )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:880:2: ( modifier )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:880:2: ( modifier )+
            int cnt203=0;
            loop203:
            do {
                int alt203=2;
                int LA203_0 = input.LA(1);

                if ( (LA203_0==99||LA203_0==127||LA203_0==142||LA203_0==152||LA203_0==158||LA203_0==163||(LA203_0 >= 165 && LA203_0 <= 167)||LA203_0==172||LA203_0==178||LA203_0==190||LA203_0==193||LA203_0==195) ) {
                    alt203=1;
                }


                switch (alt203) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:880:2: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_interface_modifiers5459);
            	    modifier702=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier702.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt203 >= 1 ) break loop203;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(203, input);
                        throw eee;
                }
                cnt203++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 205, interface_modifiers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_modifiers"


    public static class interface_base_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_base"
    // CodeR.CSharp.Parser/src/antlr/cs.g:881:1: interface_base : ':' interface_type_list ;
    public final csParser.interface_base_return interface_base() throws RecognitionException {
        csParser.interface_base_return retval = new csParser.interface_base_return();
        retval.start = input.LT(1);

        int interface_base_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal703=null;
        csParser.interface_type_list_return interface_type_list704 =null;


        Object char_literal703_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:881:15: ( ':' interface_type_list )
            // CodeR.CSharp.Parser/src/antlr/cs.g:882:5: ':' interface_type_list
            {
            root_0 = (Object)adaptor.nil();


            char_literal703=(Token)match(input,82,FOLLOW_82_in_interface_base5472); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal703_tree = 
            (Object)adaptor.create(char_literal703)
            ;
            adaptor.addChild(root_0, char_literal703_tree);
            }

            pushFollow(FOLLOW_interface_type_list_in_interface_base5474);
            interface_type_list704=interface_type_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_type_list704.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 206, interface_base_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_base"


    public static class interface_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_body"
    // CodeR.CSharp.Parser/src/antlr/cs.g:883:1: interface_body : '{' ( interface_member_declarations )? '}' ;
    public final csParser.interface_body_return interface_body() throws RecognitionException {
        csParser.interface_body_return retval = new csParser.interface_body_return();
        retval.start = input.LT(1);

        int interface_body_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal705=null;
        Token char_literal707=null;
        csParser.interface_member_declarations_return interface_member_declarations706 =null;


        Object char_literal705_tree=null;
        Object char_literal707_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:883:15: ( '{' ( interface_member_declarations )? '}' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:884:2: '{' ( interface_member_declarations )? '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal705=(Token)match(input,199,FOLLOW_199_in_interface_body5482); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal705_tree = 
            (Object)adaptor.create(char_literal705)
            ;
            adaptor.addChild(root_0, char_literal705_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:884:8: ( interface_member_declarations )?
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==IDENTIFIER||LA204_0==94||(LA204_0 >= 98 && LA204_0 <= 101)||(LA204_0 >= 103 && LA204_0 <= 104)||LA204_0==106||(LA204_0 >= 108 && LA204_0 <= 109)||LA204_0==111||LA204_0==116||LA204_0==119||(LA204_0 >= 121 && LA204_0 <= 122)||(LA204_0 >= 124 && LA204_0 <= 125)||(LA204_0 >= 127 && LA204_0 <= 128)||LA204_0==131||LA204_0==134||LA204_0==137||LA204_0==140||(LA204_0 >= 142 && LA204_0 <= 143)||(LA204_0 >= 145 && LA204_0 <= 146)||(LA204_0 >= 148 && LA204_0 <= 150)||(LA204_0 >= 152 && LA204_0 <= 154)||LA204_0==156||(LA204_0 >= 158 && LA204_0 <= 159)||(LA204_0 >= 162 && LA204_0 <= 167)||LA204_0==169||(LA204_0 >= 171 && LA204_0 <= 175)||(LA204_0 >= 178 && LA204_0 <= 179)||LA204_0==185||(LA204_0 >= 187 && LA204_0 <= 188)||(LA204_0 >= 190 && LA204_0 <= 196)||LA204_0==198) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:884:8: interface_member_declarations
                    {
                    pushFollow(FOLLOW_interface_member_declarations_in_interface_body5486);
                    interface_member_declarations706=interface_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_member_declarations706.getTree());

                    }
                    break;

            }


            char_literal707=(Token)match(input,203,FOLLOW_203_in_interface_body5491); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal707_tree = 
            (Object)adaptor.create(char_literal707)
            ;
            adaptor.addChild(root_0, char_literal707_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 207, interface_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_body"


    public static class interface_member_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_member_declarations"
    // CodeR.CSharp.Parser/src/antlr/cs.g:885:1: interface_member_declarations : ( interface_member_declaration )+ ;
    public final csParser.interface_member_declarations_return interface_member_declarations() throws RecognitionException {
        csParser.interface_member_declarations_return retval = new csParser.interface_member_declarations_return();
        retval.start = input.LT(1);

        int interface_member_declarations_StartIndex = input.index();

        Object root_0 = null;

        csParser.interface_member_declaration_return interface_member_declaration708 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:885:30: ( ( interface_member_declaration )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:886:2: ( interface_member_declaration )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:886:2: ( interface_member_declaration )+
            int cnt205=0;
            loop205:
            do {
                int alt205=2;
                int LA205_0 = input.LA(1);

                if ( (LA205_0==IDENTIFIER||LA205_0==94||(LA205_0 >= 98 && LA205_0 <= 101)||(LA205_0 >= 103 && LA205_0 <= 104)||LA205_0==106||(LA205_0 >= 108 && LA205_0 <= 109)||LA205_0==111||LA205_0==116||LA205_0==119||(LA205_0 >= 121 && LA205_0 <= 122)||(LA205_0 >= 124 && LA205_0 <= 125)||(LA205_0 >= 127 && LA205_0 <= 128)||LA205_0==131||LA205_0==134||LA205_0==137||LA205_0==140||(LA205_0 >= 142 && LA205_0 <= 143)||(LA205_0 >= 145 && LA205_0 <= 146)||(LA205_0 >= 148 && LA205_0 <= 150)||(LA205_0 >= 152 && LA205_0 <= 154)||LA205_0==156||(LA205_0 >= 158 && LA205_0 <= 159)||(LA205_0 >= 162 && LA205_0 <= 167)||LA205_0==169||(LA205_0 >= 171 && LA205_0 <= 175)||(LA205_0 >= 178 && LA205_0 <= 179)||LA205_0==185||(LA205_0 >= 187 && LA205_0 <= 188)||(LA205_0 >= 190 && LA205_0 <= 196)||LA205_0==198) ) {
                    alt205=1;
                }


                switch (alt205) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:886:2: interface_member_declaration
            	    {
            	    pushFollow(FOLLOW_interface_member_declaration_in_interface_member_declarations5499);
            	    interface_member_declaration708=interface_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_member_declaration708.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt205 >= 1 ) break loop205;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(205, input);
                        throw eee;
                }
                cnt205++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 208, interface_member_declarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_member_declarations"


    public static class interface_member_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_member_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:887:1: interface_member_declaration : ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) ) ;
    public final csParser.interface_member_declaration_return interface_member_declaration() throws RecognitionException {
        csParser.interface_member_declaration_return retval = new csParser.interface_member_declaration_return();
        retval.start = input.LT(1);

        int interface_member_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal711=null;
        csParser.attributes_return attributes709 =null;

        csParser.modifiers_return modifiers710 =null;

        csParser.interface_method_declaration_return interface_method_declaration712 =null;

        csParser.interface_event_declaration_return interface_event_declaration713 =null;

        csParser.type_return type714 =null;

        csParser.interface_method_declaration_return interface_method_declaration715 =null;

        csParser.interface_property_declaration_return interface_property_declaration716 =null;

        csParser.interface_indexer_declaration_return interface_indexer_declaration717 =null;


        Object string_literal711_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:887:29: ( ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:888:2: ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) )
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:888:2: ( attributes )?
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==94) ) {
                alt206=1;
            }
            switch (alt206) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:888:2: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_member_declaration5508);
                    attributes709=attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes709.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:888:17: ( modifiers )?
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==99||LA207_0==127||LA207_0==142||LA207_0==152||LA207_0==158||LA207_0==163||(LA207_0 >= 165 && LA207_0 <= 167)||LA207_0==172||LA207_0==178||LA207_0==190||LA207_0==193||LA207_0==195) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:888:17: modifiers
                    {
                    pushFollow(FOLLOW_modifiers_in_interface_member_declaration5514);
                    modifiers710=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers710.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:889:3: ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) )
            int alt209=3;
            switch ( input.LA(1) ) {
            case 194:
                {
                int LA209_1 = input.LA(2);

                if ( (LA209_1==IDENTIFIER||LA209_1==98||(LA209_1 >= 100 && LA209_1 <= 101)||(LA209_1 >= 103 && LA209_1 <= 104)||LA209_1==108||LA209_1==119||LA209_1==122||LA209_1==124||LA209_1==128||LA209_1==134||LA209_1==137||LA209_1==143||(LA209_1 >= 145 && LA209_1 <= 146)||(LA209_1 >= 149 && LA209_1 <= 150)||LA209_1==154||LA209_1==156||LA209_1==159||LA209_1==162||LA209_1==164||LA209_1==169||(LA209_1 >= 173 && LA209_1 <= 174)||LA209_1==185||LA209_1==192||LA209_1==196||LA209_1==198) ) {
                    alt209=1;
                }
                else if ( (LA209_1==72) ) {
                    alt209=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 209, 1, input);

                    throw nvae;

                }
                }
                break;
            case 125:
                {
                alt209=2;
                }
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 106:
            case 108:
            case 109:
            case 111:
            case 116:
            case 119:
            case 121:
            case 122:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 153:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 179:
            case 185:
            case 187:
            case 188:
            case 191:
            case 192:
            case 196:
            case 198:
                {
                alt209=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;

            }

            switch (alt209) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:889:4: 'void' interface_method_declaration
                    {
                    string_literal711=(Token)match(input,194,FOLLOW_194_in_interface_member_declaration5520); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal711_tree = 
                    (Object)adaptor.create(string_literal711)
                    ;
                    adaptor.addChild(root_0, string_literal711_tree);
                    }

                    pushFollow(FOLLOW_interface_method_declaration_in_interface_member_declaration5524);
                    interface_method_declaration712=interface_method_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_method_declaration712.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:890:5: interface_event_declaration
                    {
                    pushFollow(FOLLOW_interface_event_declaration_in_interface_member_declaration5530);
                    interface_event_declaration713=interface_event_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_event_declaration713.getTree());

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:891:5: type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration )
                    {
                    pushFollow(FOLLOW_type_in_interface_member_declaration5536);
                    type714=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type714.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:891:12: ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration )
                    int alt208=3;
                    int LA208_0 = input.LA(1);

                    if ( (LA208_0==IDENTIFIER||LA208_0==98||(LA208_0 >= 100 && LA208_0 <= 101)||(LA208_0 >= 103 && LA208_0 <= 104)||LA208_0==108||LA208_0==119||LA208_0==122||LA208_0==124||LA208_0==128||LA208_0==134||LA208_0==137||LA208_0==143||(LA208_0 >= 145 && LA208_0 <= 146)||(LA208_0 >= 149 && LA208_0 <= 150)||LA208_0==154||LA208_0==156||LA208_0==159||LA208_0==162||LA208_0==164||LA208_0==169||(LA208_0 >= 173 && LA208_0 <= 174)||LA208_0==185||LA208_0==192||LA208_0==196||LA208_0==198) ) {
                        int LA208_1 = input.LA(2);

                        if ( (LA208_1==84) && (synpred26_cs())) {
                            alt208=1;
                        }
                        else if ( (LA208_1==71) && (synpred26_cs())) {
                            alt208=1;
                        }
                        else if ( (LA208_1==199) && (synpred27_cs())) {
                            alt208=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 208, 1, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA208_0==182) ) {
                        alt208=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 208, 0, input);

                        throw nvae;

                    }
                    switch (alt208) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:891:14: ( member_name '(' )=> interface_method_declaration
                            {
                            pushFollow(FOLLOW_interface_method_declaration_in_interface_member_declaration5552);
                            interface_method_declaration715=interface_method_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_method_declaration715.getTree());

                            }
                            break;
                        case 2 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:892:14: ( member_name '{' )=> interface_property_declaration
                            {
                            pushFollow(FOLLOW_interface_property_declaration_in_interface_member_declaration5577);
                            interface_property_declaration716=interface_property_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_property_declaration716.getTree());

                            }
                            break;
                        case 3 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:893:8: interface_indexer_declaration
                            {
                            pushFollow(FOLLOW_interface_indexer_declaration_in_interface_member_declaration5587);
                            interface_indexer_declaration717=interface_indexer_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_indexer_declaration717.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 209, interface_member_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_member_declaration"


    public static class interface_property_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_property_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:896:1: interface_property_declaration : identifier '{' interface_accessor_declarations '}' ;
    public final csParser.interface_property_declaration_return interface_property_declaration() throws RecognitionException {
        csParser.interface_property_declaration_return retval = new csParser.interface_property_declaration_return();
        retval.start = input.LT(1);

        int interface_property_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal719=null;
        Token char_literal721=null;
        csParser.identifier_return identifier718 =null;

        csParser.interface_accessor_declarations_return interface_accessor_declarations720 =null;


        Object char_literal719_tree=null;
        Object char_literal721_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:896:31: ( identifier '{' interface_accessor_declarations '}' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:897:2: identifier '{' interface_accessor_declarations '}'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_interface_property_declaration5604);
            identifier718=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier718.getTree());

            char_literal719=(Token)match(input,199,FOLLOW_199_in_interface_property_declaration5608); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal719_tree = 
            (Object)adaptor.create(char_literal719)
            ;
            adaptor.addChild(root_0, char_literal719_tree);
            }

            pushFollow(FOLLOW_interface_accessor_declarations_in_interface_property_declaration5612);
            interface_accessor_declarations720=interface_accessor_declarations();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_accessor_declarations720.getTree());

            char_literal721=(Token)match(input,203,FOLLOW_203_in_interface_property_declaration5616); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal721_tree = 
            (Object)adaptor.create(char_literal721)
            ;
            adaptor.addChild(root_0, char_literal721_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 210, interface_property_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_property_declaration"


    public static class interface_method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_method_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:898:1: interface_method_declaration : identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' ;
    public final csParser.interface_method_declaration_return interface_method_declaration() throws RecognitionException {
        csParser.interface_method_declaration_return retval = new csParser.interface_method_declaration_return();
        retval.start = input.LT(1);

        int interface_method_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal724=null;
        Token char_literal726=null;
        Token char_literal728=null;
        csParser.identifier_return identifier722 =null;

        csParser.generic_argument_list_return generic_argument_list723 =null;

        csParser.formal_parameter_list_return formal_parameter_list725 =null;

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses727 =null;


        Object char_literal724_tree=null;
        Object char_literal726_tree=null;
        Object char_literal728_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:898:29: ( identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:899:2: identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_interface_method_declaration5624);
            identifier722=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier722.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:899:15: ( generic_argument_list )?
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==84) ) {
                alt210=1;
            }
            switch (alt210) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:899:15: generic_argument_list
                    {
                    pushFollow(FOLLOW_generic_argument_list_in_interface_method_declaration5628);
                    generic_argument_list723=generic_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_argument_list723.getTree());

                    }
                    break;

            }


            char_literal724=(Token)match(input,71,FOLLOW_71_in_interface_method_declaration5636); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal724_tree = 
            (Object)adaptor.create(char_literal724)
            ;
            adaptor.addChild(root_0, char_literal724_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:900:12: ( formal_parameter_list )?
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( (LA211_0==IDENTIFIER||LA211_0==94||LA211_0==98||(LA211_0 >= 100 && LA211_0 <= 101)||(LA211_0 >= 103 && LA211_0 <= 104)||LA211_0==106||(LA211_0 >= 108 && LA211_0 <= 109)||LA211_0==111||LA211_0==116||LA211_0==119||(LA211_0 >= 121 && LA211_0 <= 122)||LA211_0==124||LA211_0==128||LA211_0==131||LA211_0==134||LA211_0==137||LA211_0==140||LA211_0==143||(LA211_0 >= 145 && LA211_0 <= 146)||(LA211_0 >= 148 && LA211_0 <= 150)||(LA211_0 >= 153 && LA211_0 <= 154)||(LA211_0 >= 156 && LA211_0 <= 157)||(LA211_0 >= 159 && LA211_0 <= 160)||LA211_0==162||LA211_0==164||(LA211_0 >= 168 && LA211_0 <= 169)||LA211_0==171||(LA211_0 >= 173 && LA211_0 <= 175)||LA211_0==179||LA211_0==182||LA211_0==185||(LA211_0 >= 187 && LA211_0 <= 188)||(LA211_0 >= 191 && LA211_0 <= 192)||LA211_0==194||LA211_0==196||LA211_0==198) ) {
                alt211=1;
            }
            switch (alt211) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:900:12: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_interface_method_declaration5640);
                    formal_parameter_list725=formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_parameter_list725.getTree());

                    }
                    break;

            }


            char_literal726=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_interface_method_declaration5645); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal726_tree = 
            (Object)adaptor.create(char_literal726)
            ;
            adaptor.addChild(root_0, char_literal726_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:900:43: ( type_parameter_constraints_clauses )?
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==196) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:900:43: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration5649);
                    type_parameter_constraints_clauses727=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraints_clauses727.getTree());

                    }
                    break;

            }


            char_literal728=(Token)match(input,SEMI,FOLLOW_SEMI_in_interface_method_declaration5654); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal728_tree = 
            (Object)adaptor.create(char_literal728)
            ;
            adaptor.addChild(root_0, char_literal728_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 211, interface_method_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_method_declaration"


    public static class interface_event_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_event_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:901:1: interface_event_declaration : 'event' type identifier ';' ;
    public final csParser.interface_event_declaration_return interface_event_declaration() throws RecognitionException {
        csParser.interface_event_declaration_return retval = new csParser.interface_event_declaration_return();
        retval.start = input.LT(1);

        int interface_event_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal729=null;
        Token char_literal732=null;
        csParser.type_return type730 =null;

        csParser.identifier_return identifier731 =null;


        Object string_literal729_tree=null;
        Object char_literal732_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:901:28: ( 'event' type identifier ';' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:903:2: 'event' type identifier ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal729=(Token)match(input,125,FOLLOW_125_in_interface_event_declaration5665); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal729_tree = 
            (Object)adaptor.create(string_literal729)
            ;
            adaptor.addChild(root_0, string_literal729_tree);
            }

            pushFollow(FOLLOW_type_in_interface_event_declaration5669);
            type730=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type730.getTree());

            pushFollow(FOLLOW_identifier_in_interface_event_declaration5673);
            identifier731=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier731.getTree());

            char_literal732=(Token)match(input,SEMI,FOLLOW_SEMI_in_interface_event_declaration5677); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal732_tree = 
            (Object)adaptor.create(char_literal732)
            ;
            adaptor.addChild(root_0, char_literal732_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 212, interface_event_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_event_declaration"


    public static class interface_indexer_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_indexer_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:904:1: interface_indexer_declaration : 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}' ;
    public final csParser.interface_indexer_declaration_return interface_indexer_declaration() throws RecognitionException {
        csParser.interface_indexer_declaration_return retval = new csParser.interface_indexer_declaration_return();
        retval.start = input.LT(1);

        int interface_indexer_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal733=null;
        Token char_literal734=null;
        Token char_literal736=null;
        Token char_literal737=null;
        Token char_literal739=null;
        csParser.formal_parameter_list_return formal_parameter_list735 =null;

        csParser.interface_accessor_declarations_return interface_accessor_declarations738 =null;


        Object string_literal733_tree=null;
        Object char_literal734_tree=null;
        Object char_literal736_tree=null;
        Object char_literal737_tree=null;
        Object char_literal739_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:904:30: ( 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:906:2: 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}'
            {
            root_0 = (Object)adaptor.nil();


            string_literal733=(Token)match(input,182,FOLLOW_182_in_interface_indexer_declaration5689); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal733_tree = 
            (Object)adaptor.create(string_literal733)
            ;
            adaptor.addChild(root_0, string_literal733_tree);
            }

            char_literal734=(Token)match(input,94,FOLLOW_94_in_interface_indexer_declaration5693); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal734_tree = 
            (Object)adaptor.create(char_literal734)
            ;
            adaptor.addChild(root_0, char_literal734_tree);
            }

            pushFollow(FOLLOW_formal_parameter_list_in_interface_indexer_declaration5697);
            formal_parameter_list735=formal_parameter_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_parameter_list735.getTree());

            char_literal736=(Token)match(input,95,FOLLOW_95_in_interface_indexer_declaration5701); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal736_tree = 
            (Object)adaptor.create(char_literal736)
            ;
            adaptor.addChild(root_0, char_literal736_tree);
            }

            char_literal737=(Token)match(input,199,FOLLOW_199_in_interface_indexer_declaration5705); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal737_tree = 
            (Object)adaptor.create(char_literal737)
            ;
            adaptor.addChild(root_0, char_literal737_tree);
            }

            pushFollow(FOLLOW_interface_accessor_declarations_in_interface_indexer_declaration5709);
            interface_accessor_declarations738=interface_accessor_declarations();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_accessor_declarations738.getTree());

            char_literal739=(Token)match(input,203,FOLLOW_203_in_interface_indexer_declaration5713); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal739_tree = 
            (Object)adaptor.create(char_literal739)
            ;
            adaptor.addChild(root_0, char_literal739_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 213, interface_indexer_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_indexer_declaration"


    public static class interface_accessor_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_accessor_declarations"
    // CodeR.CSharp.Parser/src/antlr/cs.g:907:1: interface_accessor_declarations : ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? ) ;
    public final csParser.interface_accessor_declarations_return interface_accessor_declarations() throws RecognitionException {
        csParser.interface_accessor_declarations_return retval = new csParser.interface_accessor_declarations_return();
        retval.start = input.LT(1);

        int interface_accessor_declarations_StartIndex = input.index();

        Object root_0 = null;

        csParser.attributes_return attributes740 =null;

        csParser.interface_get_accessor_declaration_return interface_get_accessor_declaration741 =null;

        csParser.attributes_return attributes742 =null;

        csParser.interface_set_accessor_declaration_return interface_set_accessor_declaration743 =null;

        csParser.interface_set_accessor_declaration_return interface_set_accessor_declaration744 =null;

        csParser.attributes_return attributes745 =null;

        csParser.interface_get_accessor_declaration_return interface_get_accessor_declaration746 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:907:32: ( ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:908:2: ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? )
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:908:2: ( attributes )?
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==94) ) {
                alt213=1;
            }
            switch (alt213) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:908:2: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_accessor_declarations5721);
                    attributes740=attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes740.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:909:3: ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? )
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==135) ) {
                alt218=1;
            }
            else if ( (LA218_0==174) ) {
                alt218=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;

            }
            switch (alt218) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:909:4: interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )?
                    {
                    pushFollow(FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations5730);
                    interface_get_accessor_declaration741=interface_get_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_get_accessor_declaration741.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:909:41: ( attributes )?
                    int alt214=2;
                    int LA214_0 = input.LA(1);

                    if ( (LA214_0==94) ) {
                        alt214=1;
                    }
                    switch (alt214) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:909:41: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_interface_accessor_declarations5734);
                            attributes742=attributes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes742.getTree());

                            }
                            break;

                    }


                    // CodeR.CSharp.Parser/src/antlr/cs.g:909:55: ( interface_set_accessor_declaration )?
                    int alt215=2;
                    int LA215_0 = input.LA(1);

                    if ( (LA215_0==174) ) {
                        alt215=1;
                    }
                    switch (alt215) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:909:55: interface_set_accessor_declaration
                            {
                            pushFollow(FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations5739);
                            interface_set_accessor_declaration743=interface_set_accessor_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_set_accessor_declaration743.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:910:5: interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )?
                    {
                    pushFollow(FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations5746);
                    interface_set_accessor_declaration744=interface_set_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_set_accessor_declaration744.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:910:42: ( attributes )?
                    int alt216=2;
                    int LA216_0 = input.LA(1);

                    if ( (LA216_0==94) ) {
                        alt216=1;
                    }
                    switch (alt216) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:910:42: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_interface_accessor_declarations5750);
                            attributes745=attributes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes745.getTree());

                            }
                            break;

                    }


                    // CodeR.CSharp.Parser/src/antlr/cs.g:910:56: ( interface_get_accessor_declaration )?
                    int alt217=2;
                    int LA217_0 = input.LA(1);

                    if ( (LA217_0==135) ) {
                        alt217=1;
                    }
                    switch (alt217) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:910:56: interface_get_accessor_declaration
                            {
                            pushFollow(FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations5755);
                            interface_get_accessor_declaration746=interface_get_accessor_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_get_accessor_declaration746.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 214, interface_accessor_declarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_accessor_declarations"


    public static class interface_get_accessor_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_get_accessor_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:911:1: interface_get_accessor_declaration : 'get' ';' ;
    public final csParser.interface_get_accessor_declaration_return interface_get_accessor_declaration() throws RecognitionException {
        csParser.interface_get_accessor_declaration_return retval = new csParser.interface_get_accessor_declaration_return();
        retval.start = input.LT(1);

        int interface_get_accessor_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal747=null;
        Token char_literal748=null;

        Object string_literal747_tree=null;
        Object char_literal748_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:911:35: ( 'get' ';' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:912:2: 'get' ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal747=(Token)match(input,135,FOLLOW_135_in_interface_get_accessor_declaration5765); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal747_tree = 
            (Object)adaptor.create(string_literal747)
            ;
            adaptor.addChild(root_0, string_literal747_tree);
            }

            char_literal748=(Token)match(input,SEMI,FOLLOW_SEMI_in_interface_get_accessor_declaration5769); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal748_tree = 
            (Object)adaptor.create(char_literal748)
            ;
            adaptor.addChild(root_0, char_literal748_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 215, interface_get_accessor_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_get_accessor_declaration"


    public static class interface_set_accessor_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_set_accessor_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:913:1: interface_set_accessor_declaration : 'set' ';' ;
    public final csParser.interface_set_accessor_declaration_return interface_set_accessor_declaration() throws RecognitionException {
        csParser.interface_set_accessor_declaration_return retval = new csParser.interface_set_accessor_declaration_return();
        retval.start = input.LT(1);

        int interface_set_accessor_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal749=null;
        Token char_literal750=null;

        Object string_literal749_tree=null;
        Object char_literal750_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:913:35: ( 'set' ';' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:914:2: 'set' ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal749=(Token)match(input,174,FOLLOW_174_in_interface_set_accessor_declaration5779); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal749_tree = 
            (Object)adaptor.create(string_literal749)
            ;
            adaptor.addChild(root_0, string_literal749_tree);
            }

            char_literal750=(Token)match(input,SEMI,FOLLOW_SEMI_in_interface_set_accessor_declaration5783); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal750_tree = 
            (Object)adaptor.create(char_literal750)
            ;
            adaptor.addChild(root_0, char_literal750_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 216, interface_set_accessor_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_set_accessor_declaration"


    public static class method_modifiers_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifiers"
    // CodeR.CSharp.Parser/src/antlr/cs.g:915:1: method_modifiers : ( modifier )+ ;
    public final csParser.method_modifiers_return method_modifiers() throws RecognitionException {
        csParser.method_modifiers_return retval = new csParser.method_modifiers_return();
        retval.start = input.LT(1);

        int method_modifiers_StartIndex = input.index();

        Object root_0 = null;

        csParser.modifier_return modifier751 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:915:17: ( ( modifier )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:916:2: ( modifier )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:916:2: ( modifier )+
            int cnt219=0;
            loop219:
            do {
                int alt219=2;
                int LA219_0 = input.LA(1);

                if ( (LA219_0==99||LA219_0==127||LA219_0==142||LA219_0==152||LA219_0==158||LA219_0==163||(LA219_0 >= 165 && LA219_0 <= 167)||LA219_0==172||LA219_0==178||LA219_0==190||LA219_0==193||LA219_0==195) ) {
                    alt219=1;
                }


                switch (alt219) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:916:2: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_method_modifiers5793);
            	    modifier751=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier751.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt219 >= 1 ) break loop219;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(219, input);
                        throw eee;
                }
                cnt219++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 217, method_modifiers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "method_modifiers"


    public static class struct_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:919:1: struct_declaration : 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )? ;
    public final csParser.struct_declaration_return struct_declaration() throws RecognitionException {
        csParser.struct_declaration_return retval = new csParser.struct_declaration_return();
        retval.start = input.LT(1);

        int struct_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal752=null;
        Token char_literal757=null;
        csParser.type_or_generic_return type_or_generic753 =null;

        csParser.struct_interfaces_return struct_interfaces754 =null;

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses755 =null;

        csParser.struct_body_return struct_body756 =null;


        Object string_literal752_tree=null;
        Object char_literal757_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:919:19: ( 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )? )
            // CodeR.CSharp.Parser/src/antlr/cs.g:920:2: 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal752=(Token)match(input,180,FOLLOW_180_in_struct_declaration5805); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal752_tree = 
            (Object)adaptor.create(string_literal752)
            ;
            adaptor.addChild(root_0, string_literal752_tree);
            }

            pushFollow(FOLLOW_type_or_generic_in_struct_declaration5809);
            type_or_generic753=type_or_generic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_or_generic753.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:920:31: ( struct_interfaces )?
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==82) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:920:31: struct_interfaces
                    {
                    pushFollow(FOLLOW_struct_interfaces_in_struct_declaration5813);
                    struct_interfaces754=struct_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_interfaces754.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:920:52: ( type_parameter_constraints_clauses )?
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==196) ) {
                alt221=1;
            }
            switch (alt221) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:920:52: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_struct_declaration5818);
                    type_parameter_constraints_clauses755=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraints_clauses755.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_struct_body_in_struct_declaration5823);
            struct_body756=struct_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_body756.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:920:104: ( ';' )?
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==SEMI) ) {
                alt222=1;
            }
            switch (alt222) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:920:104: ';'
                    {
                    char_literal757=(Token)match(input,SEMI,FOLLOW_SEMI_in_struct_declaration5827); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal757_tree = 
                    (Object)adaptor.create(char_literal757)
                    ;
                    adaptor.addChild(root_0, char_literal757_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 218, struct_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "struct_declaration"


    public static class struct_modifiers_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_modifiers"
    // CodeR.CSharp.Parser/src/antlr/cs.g:921:1: struct_modifiers : ( struct_modifier )+ ;
    public final csParser.struct_modifiers_return struct_modifiers() throws RecognitionException {
        csParser.struct_modifiers_return retval = new csParser.struct_modifiers_return();
        retval.start = input.LT(1);

        int struct_modifiers_StartIndex = input.index();

        Object root_0 = null;

        csParser.struct_modifier_return struct_modifier758 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:921:17: ( ( struct_modifier )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:922:2: ( struct_modifier )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:922:2: ( struct_modifier )+
            int cnt223=0;
            loop223:
            do {
                int alt223=2;
                int LA223_0 = input.LA(1);

                if ( (LA223_0==142||LA223_0==152||LA223_0==163||(LA223_0 >= 165 && LA223_0 <= 166)||LA223_0==190) ) {
                    alt223=1;
                }


                switch (alt223) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:922:2: struct_modifier
            	    {
            	    pushFollow(FOLLOW_struct_modifier_in_struct_modifiers5836);
            	    struct_modifier758=struct_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_modifier758.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt223 >= 1 ) break loop223;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(223, input);
                        throw eee;
                }
                cnt223++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 219, struct_modifiers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "struct_modifiers"


    public static class struct_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_modifier"
    // CodeR.CSharp.Parser/src/antlr/cs.g:923:1: struct_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' );
    public final csParser.struct_modifier_return struct_modifier() throws RecognitionException {
        csParser.struct_modifier_return retval = new csParser.struct_modifier_return();
        retval.start = input.LT(1);

        int struct_modifier_StartIndex = input.index();

        Object root_0 = null;

        Token set759=null;

        Object set759_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:923:16: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:
            {
            root_0 = (Object)adaptor.nil();


            set759=(Token)input.LT(1);

            if ( input.LA(1)==142||input.LA(1)==152||input.LA(1)==163||(input.LA(1) >= 165 && input.LA(1) <= 166)||input.LA(1)==190 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set759)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 220, struct_modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "struct_modifier"


    public static class struct_interfaces_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_interfaces"
    // CodeR.CSharp.Parser/src/antlr/cs.g:925:1: struct_interfaces : ':' interface_type_list ;
    public final csParser.struct_interfaces_return struct_interfaces() throws RecognitionException {
        csParser.struct_interfaces_return retval = new csParser.struct_interfaces_return();
        retval.start = input.LT(1);

        int struct_interfaces_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal760=null;
        csParser.interface_type_list_return interface_type_list761 =null;


        Object char_literal760_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:925:18: ( ':' interface_type_list )
            // CodeR.CSharp.Parser/src/antlr/cs.g:926:2: ':' interface_type_list
            {
            root_0 = (Object)adaptor.nil();


            char_literal760=(Token)match(input,82,FOLLOW_82_in_struct_interfaces5873); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal760_tree = 
            (Object)adaptor.create(char_literal760)
            ;
            adaptor.addChild(root_0, char_literal760_tree);
            }

            pushFollow(FOLLOW_interface_type_list_in_struct_interfaces5877);
            interface_type_list761=interface_type_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_type_list761.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 221, struct_interfaces_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "struct_interfaces"


    public static class struct_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_body"
    // CodeR.CSharp.Parser/src/antlr/cs.g:927:1: struct_body : '{' ( struct_member_declarations )? '}' ;
    public final csParser.struct_body_return struct_body() throws RecognitionException {
        csParser.struct_body_return retval = new csParser.struct_body_return();
        retval.start = input.LT(1);

        int struct_body_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal762=null;
        Token char_literal764=null;
        csParser.struct_member_declarations_return struct_member_declarations763 =null;


        Object char_literal762_tree=null;
        Object char_literal764_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:927:12: ( '{' ( struct_member_declarations )? '}' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:928:2: '{' ( struct_member_declarations )? '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal762=(Token)match(input,199,FOLLOW_199_in_struct_body5884); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal762_tree = 
            (Object)adaptor.create(char_literal762)
            ;
            adaptor.addChild(root_0, char_literal762_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:928:8: ( struct_member_declarations )?
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( (LA224_0==ENUM||LA224_0==IDENTIFIER||LA224_0==94||(LA224_0 >= 98 && LA224_0 <= 101)||(LA224_0 >= 103 && LA224_0 <= 104)||LA224_0==106||(LA224_0 >= 108 && LA224_0 <= 109)||LA224_0==111||(LA224_0 >= 113 && LA224_0 <= 114)||LA224_0==116||(LA224_0 >= 118 && LA224_0 <= 119)||(LA224_0 >= 121 && LA224_0 <= 122)||(LA224_0 >= 124 && LA224_0 <= 128)||LA224_0==131||LA224_0==134||(LA224_0 >= 137 && LA224_0 <= 138)||(LA224_0 >= 140 && LA224_0 <= 143)||(LA224_0 >= 145 && LA224_0 <= 146)||(LA224_0 >= 148 && LA224_0 <= 150)||(LA224_0 >= 152 && LA224_0 <= 154)||LA224_0==156||(LA224_0 >= 158 && LA224_0 <= 159)||(LA224_0 >= 161 && LA224_0 <= 167)||LA224_0==169||(LA224_0 >= 171 && LA224_0 <= 175)||(LA224_0 >= 178 && LA224_0 <= 180)||LA224_0==185||(LA224_0 >= 187 && LA224_0 <= 188)||(LA224_0 >= 190 && LA224_0 <= 196)||LA224_0==198) ) {
                alt224=1;
            }
            switch (alt224) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:928:8: struct_member_declarations
                    {
                    pushFollow(FOLLOW_struct_member_declarations_in_struct_body5888);
                    struct_member_declarations763=struct_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_member_declarations763.getTree());

                    }
                    break;

            }


            char_literal764=(Token)match(input,203,FOLLOW_203_in_struct_body5893); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal764_tree = 
            (Object)adaptor.create(char_literal764)
            ;
            adaptor.addChild(root_0, char_literal764_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 222, struct_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "struct_body"


    public static class struct_member_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_member_declarations"
    // CodeR.CSharp.Parser/src/antlr/cs.g:929:1: struct_member_declarations : ( struct_member_declaration )+ ;
    public final csParser.struct_member_declarations_return struct_member_declarations() throws RecognitionException {
        csParser.struct_member_declarations_return retval = new csParser.struct_member_declarations_return();
        retval.start = input.LT(1);

        int struct_member_declarations_StartIndex = input.index();

        Object root_0 = null;

        csParser.struct_member_declaration_return struct_member_declaration765 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:929:27: ( ( struct_member_declaration )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:930:2: ( struct_member_declaration )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:930:2: ( struct_member_declaration )+
            int cnt225=0;
            loop225:
            do {
                int alt225=2;
                int LA225_0 = input.LA(1);

                if ( (LA225_0==ENUM||LA225_0==IDENTIFIER||LA225_0==94||(LA225_0 >= 98 && LA225_0 <= 101)||(LA225_0 >= 103 && LA225_0 <= 104)||LA225_0==106||(LA225_0 >= 108 && LA225_0 <= 109)||LA225_0==111||(LA225_0 >= 113 && LA225_0 <= 114)||LA225_0==116||(LA225_0 >= 118 && LA225_0 <= 119)||(LA225_0 >= 121 && LA225_0 <= 122)||(LA225_0 >= 124 && LA225_0 <= 128)||LA225_0==131||LA225_0==134||(LA225_0 >= 137 && LA225_0 <= 138)||(LA225_0 >= 140 && LA225_0 <= 143)||(LA225_0 >= 145 && LA225_0 <= 146)||(LA225_0 >= 148 && LA225_0 <= 150)||(LA225_0 >= 152 && LA225_0 <= 154)||LA225_0==156||(LA225_0 >= 158 && LA225_0 <= 159)||(LA225_0 >= 161 && LA225_0 <= 167)||LA225_0==169||(LA225_0 >= 171 && LA225_0 <= 175)||(LA225_0 >= 178 && LA225_0 <= 180)||LA225_0==185||(LA225_0 >= 187 && LA225_0 <= 188)||(LA225_0 >= 190 && LA225_0 <= 196)||LA225_0==198) ) {
                    alt225=1;
                }


                switch (alt225) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:930:2: struct_member_declaration
            	    {
            	    pushFollow(FOLLOW_struct_member_declaration_in_struct_member_declarations5900);
            	    struct_member_declaration765=struct_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_member_declaration765.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt225 >= 1 ) break loop225;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(225, input);
                        throw eee;
                }
                cnt225++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 223, struct_member_declarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "struct_member_declarations"


    public static class struct_member_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_member_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:932:1: struct_member_declaration : ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration ) ;
    public final csParser.struct_member_declaration_return struct_member_declaration() throws RecognitionException {
        csParser.struct_member_declaration_return retval = new csParser.struct_member_declaration_return();
        retval.start = input.LT(1);

        int struct_member_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal767=null;
        Token char_literal770=null;
        Token string_literal772=null;
        Token string_literal779=null;
        Token char_literal785=null;
        csParser.modifiers_return m =null;

        csParser.attributes_return attributes766 =null;

        csParser.type_return type768 =null;

        csParser.constant_declarators_return constant_declarators769 =null;

        csParser.event_declaration_return event_declaration771 =null;

        csParser.method_declaration_return method_declaration773 =null;

        csParser.interface_declaration_return interface_declaration774 =null;

        csParser.class_declaration_return class_declaration775 =null;

        csParser.struct_declaration_return struct_declaration776 =null;

        csParser.interface_declaration_return interface_declaration777 =null;

        csParser.class_declaration_return class_declaration778 =null;

        csParser.method_declaration_return method_declaration780 =null;

        csParser.type_return type781 =null;

        csParser.method_declaration_return method_declaration782 =null;

        csParser.property_declaration_return property_declaration783 =null;

        csParser.type_name_return type_name784 =null;

        csParser.indexer_declaration_return indexer_declaration786 =null;

        csParser.indexer_declaration_return indexer_declaration787 =null;

        csParser.field_declaration_return field_declaration788 =null;

        csParser.operator_declaration_return operator_declaration789 =null;

        csParser.struct_declaration_return struct_declaration790 =null;

        csParser.enum_declaration_return enum_declaration791 =null;

        csParser.delegate_declaration_return delegate_declaration792 =null;

        csParser.conversion_operator_declaration_return conversion_operator_declaration793 =null;

        csParser.constructor_declaration_return constructor_declaration794 =null;


        Object string_literal767_tree=null;
        Object char_literal770_tree=null;
        Object string_literal772_tree=null;
        Object string_literal779_tree=null;
        Object char_literal785_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:933:2: ( ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:933:4: ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration )
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:933:4: ( attributes )?
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==94) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:933:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_struct_member_declaration5911);
                    attributes766=attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes766.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:933:19: (m= modifiers )?
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==99||LA227_0==127||LA227_0==142||LA227_0==152||LA227_0==158||LA227_0==163||(LA227_0 >= 165 && LA227_0 <= 167)||LA227_0==172||LA227_0==178||LA227_0==190||LA227_0==193||LA227_0==195) ) {
                alt227=1;
            }
            switch (alt227) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:933:19: m= modifiers
                    {
                    pushFollow(FOLLOW_modifiers_in_struct_member_declaration5918);
                    m=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, m.getTree());

                    }
                    break;

            }


            // CodeR.CSharp.Parser/src/antlr/cs.g:934:3: ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration )
            int alt230=12;
            switch ( input.LA(1) ) {
            case 114:
                {
                alt230=1;
                }
                break;
            case 125:
                {
                alt230=2;
                }
                break;
            case 161:
                {
                alt230=3;
                }
                break;
            case 141:
                {
                alt230=4;
                }
                break;
            case 113:
                {
                alt230=5;
                }
                break;
            case 194:
                {
                int LA230_6 = input.LA(2);

                if ( (LA230_6==Character_literal||LA230_6==FALSE||(LA230_6 >= Hex_number && LA230_6 <= IDENTIFIER)||(LA230_6 >= NULL && LA230_6 <= NUMBER)||LA230_6==Real_literal||LA230_6==STRINGLITERAL||LA230_6==TRUE||LA230_6==Verbatim_string_literal||LA230_6==98||(LA230_6 >= 100 && LA230_6 <= 101)||(LA230_6 >= 103 && LA230_6 <= 104)||LA230_6==106||(LA230_6 >= 108 && LA230_6 <= 109)||LA230_6==111||LA230_6==116||LA230_6==119||(LA230_6 >= 121 && LA230_6 <= 122)||LA230_6==124||LA230_6==128||LA230_6==131||LA230_6==134||LA230_6==137||LA230_6==140||LA230_6==143||(LA230_6 >= 145 && LA230_6 <= 146)||(LA230_6 >= 148 && LA230_6 <= 150)||(LA230_6 >= 153 && LA230_6 <= 154)||LA230_6==156||LA230_6==159||LA230_6==162||LA230_6==164||LA230_6==169||LA230_6==171||(LA230_6 >= 173 && LA230_6 <= 175)||LA230_6==179||LA230_6==185||(LA230_6 >= 187 && LA230_6 <= 188)||(LA230_6 >= 191 && LA230_6 <= 192)||LA230_6==196||LA230_6==198) ) {
                    alt230=6;
                }
                else if ( (LA230_6==72) ) {
                    alt230=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 230, 6, input);

                    throw nvae;

                }
                }
                break;
            case 106:
            case 109:
            case 111:
            case 116:
            case 121:
            case 131:
            case 140:
            case 148:
            case 153:
            case 171:
            case 175:
            case 179:
            case 187:
            case 188:
            case 191:
                {
                alt230=7;
                }
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 134:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
                {
                int LA230_8 = input.LA(2);

                if ( (LA230_8==Character_literal||LA230_8==DOT||LA230_8==FALSE||(LA230_8 >= Hex_number && LA230_8 <= IDENTIFIER)||(LA230_8 >= NULL && LA230_8 <= NUMBER)||LA230_8==Real_literal||LA230_8==STRINGLITERAL||LA230_8==TRUE||LA230_8==Verbatim_string_literal||LA230_8==72||(LA230_8 >= 83 && LA230_8 <= 84)||LA230_8==92||LA230_8==94||LA230_8==98||(LA230_8 >= 100 && LA230_8 <= 101)||(LA230_8 >= 103 && LA230_8 <= 104)||LA230_8==106||(LA230_8 >= 108 && LA230_8 <= 109)||LA230_8==111||LA230_8==116||LA230_8==119||(LA230_8 >= 121 && LA230_8 <= 122)||LA230_8==124||LA230_8==128||LA230_8==131||LA230_8==134||LA230_8==137||LA230_8==140||LA230_8==143||(LA230_8 >= 145 && LA230_8 <= 146)||(LA230_8 >= 148 && LA230_8 <= 150)||(LA230_8 >= 153 && LA230_8 <= 156)||LA230_8==159||LA230_8==162||LA230_8==164||LA230_8==169||LA230_8==171||(LA230_8 >= 173 && LA230_8 <= 175)||LA230_8==179||LA230_8==182||LA230_8==185||(LA230_8 >= 187 && LA230_8 <= 188)||(LA230_8 >= 191 && LA230_8 <= 192)||LA230_8==196||LA230_8==198) ) {
                    alt230=7;
                }
                else if ( (LA230_8==71) ) {
                    alt230=12;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 230, 8, input);

                    throw nvae;

                }
                }
                break;
            case 180:
                {
                alt230=8;
                }
                break;
            case ENUM:
                {
                alt230=9;
                }
                break;
            case 118:
                {
                alt230=10;
                }
                break;
            case 126:
            case 138:
                {
                alt230=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);

                throw nvae;

            }

            switch (alt230) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:935:4: 'const' type constant_declarators ';'
                    {
                    string_literal767=(Token)match(input,114,FOLLOW_114_in_struct_member_declaration5928); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal767_tree = 
                    (Object)adaptor.create(string_literal767)
                    ;
                    adaptor.addChild(root_0, string_literal767_tree);
                    }

                    pushFollow(FOLLOW_type_in_struct_member_declaration5932);
                    type768=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type768.getTree());

                    pushFollow(FOLLOW_constant_declarators_in_struct_member_declaration5936);
                    constant_declarators769=constant_declarators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_declarators769.getTree());

                    char_literal770=(Token)match(input,SEMI,FOLLOW_SEMI_in_struct_member_declaration5940); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal770_tree = 
                    (Object)adaptor.create(char_literal770)
                    ;
                    adaptor.addChild(root_0, char_literal770_tree);
                    }

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:936:5: event_declaration
                    {
                    pushFollow(FOLLOW_event_declaration_in_struct_member_declaration5946);
                    event_declaration771=event_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, event_declaration771.getTree());

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:937:5: 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration )
                    {
                    string_literal772=(Token)match(input,161,FOLLOW_161_in_struct_member_declaration5954); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal772_tree = 
                    (Object)adaptor.create(string_literal772)
                    ;
                    adaptor.addChild(root_0, string_literal772_tree);
                    }

                    // CodeR.CSharp.Parser/src/antlr/cs.g:938:4: ( method_declaration | interface_declaration | class_declaration | struct_declaration )
                    int alt228=4;
                    switch ( input.LA(1) ) {
                    case Character_literal:
                    case FALSE:
                    case Hex_number:
                    case IDENTIFIER:
                    case NULL:
                    case NUMBER:
                    case Real_literal:
                    case STRINGLITERAL:
                    case TRUE:
                    case Verbatim_string_literal:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 106:
                    case 108:
                    case 109:
                    case 111:
                    case 116:
                    case 119:
                    case 121:
                    case 122:
                    case 124:
                    case 128:
                    case 131:
                    case 134:
                    case 137:
                    case 140:
                    case 143:
                    case 145:
                    case 146:
                    case 148:
                    case 149:
                    case 150:
                    case 153:
                    case 154:
                    case 156:
                    case 159:
                    case 162:
                    case 164:
                    case 169:
                    case 171:
                    case 173:
                    case 174:
                    case 175:
                    case 179:
                    case 185:
                    case 187:
                    case 188:
                    case 191:
                    case 192:
                    case 196:
                    case 198:
                        {
                        alt228=1;
                        }
                        break;
                    case 141:
                        {
                        alt228=2;
                        }
                        break;
                    case 113:
                        {
                        alt228=3;
                        }
                        break;
                    case 180:
                        {
                        alt228=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 228, 0, input);

                        throw nvae;

                    }

                    switch (alt228) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:939:5: method_declaration
                            {
                            pushFollow(FOLLOW_method_declaration_in_struct_member_declaration5965);
                            method_declaration773=method_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration773.getTree());

                            }
                            break;
                        case 2 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:940:6: interface_declaration
                            {
                            pushFollow(FOLLOW_interface_declaration_in_struct_member_declaration5973);
                            interface_declaration774=interface_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration774.getTree());

                            }
                            break;
                        case 3 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:941:6: class_declaration
                            {
                            pushFollow(FOLLOW_class_declaration_in_struct_member_declaration5981);
                            class_declaration775=class_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, class_declaration775.getTree());

                            }
                            break;
                        case 4 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:942:6: struct_declaration
                            {
                            pushFollow(FOLLOW_struct_declaration_in_struct_member_declaration5989);
                            struct_declaration776=struct_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declaration776.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:945:5: interface_declaration
                    {
                    pushFollow(FOLLOW_interface_declaration_in_struct_member_declaration6001);
                    interface_declaration777=interface_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration777.getTree());

                    }
                    break;
                case 5 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:946:5: class_declaration
                    {
                    pushFollow(FOLLOW_class_declaration_in_struct_member_declaration6008);
                    class_declaration778=class_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, class_declaration778.getTree());

                    }
                    break;
                case 6 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:947:5: 'void' method_declaration
                    {
                    string_literal779=(Token)match(input,194,FOLLOW_194_in_struct_member_declaration6016); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal779_tree = 
                    (Object)adaptor.create(string_literal779)
                    ;
                    adaptor.addChild(root_0, string_literal779_tree);
                    }

                    pushFollow(FOLLOW_method_declaration_in_struct_member_declaration6020);
                    method_declaration780=method_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration780.getTree());

                    }
                    break;
                case 7 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:948:5: type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
                    {
                    pushFollow(FOLLOW_type_in_struct_member_declaration6026);
                    type781=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type781.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:949:5: ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
                    int alt229=6;
                    switch ( input.LA(1) ) {
                    case 106:
                    case 109:
                    case 111:
                    case 116:
                    case 121:
                    case 131:
                    case 140:
                    case 148:
                    case 153:
                    case 171:
                    case 175:
                    case 179:
                    case 187:
                    case 188:
                    case 191:
                        {
                        int LA229_1 = input.LA(2);

                        if ( (synpred28_cs()) ) {
                            alt229=1;
                        }
                        else if ( (synpred29_cs()) ) {
                            alt229=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 229, 1, input);

                            throw nvae;

                        }
                        }
                        break;
                    case IDENTIFIER:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 108:
                    case 119:
                    case 122:
                    case 124:
                    case 128:
                    case 134:
                    case 137:
                    case 143:
                    case 145:
                    case 146:
                    case 149:
                    case 150:
                    case 154:
                    case 156:
                    case 159:
                    case 162:
                    case 164:
                    case 169:
                    case 173:
                    case 174:
                    case 185:
                    case 192:
                    case 196:
                    case 198:
                        {
                        int LA229_2 = input.LA(2);

                        if ( (synpred28_cs()) ) {
                            alt229=1;
                        }
                        else if ( (synpred29_cs()) ) {
                            alt229=2;
                        }
                        else if ( (synpred30_cs()) ) {
                            alt229=3;
                        }
                        else if ( (true) ) {
                            alt229=5;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 229, 2, input);

                            throw nvae;

                        }
                        }
                        break;
                    case Character_literal:
                    case FALSE:
                    case Hex_number:
                    case NULL:
                    case NUMBER:
                    case Real_literal:
                    case STRINGLITERAL:
                    case TRUE:
                    case Verbatim_string_literal:
                        {
                        int LA229_3 = input.LA(2);

                        if ( (synpred28_cs()) ) {
                            alt229=1;
                        }
                        else if ( (synpred29_cs()) ) {
                            alt229=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 229, 3, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 182:
                        {
                        alt229=4;
                        }
                        break;
                    case 155:
                        {
                        alt229=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 229, 0, input);

                        throw nvae;

                    }

                    switch (alt229) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:950:6: ( member_name '(' )=> method_declaration
                            {
                            pushFollow(FOLLOW_method_declaration_in_struct_member_declaration6049);
                            method_declaration782=method_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration782.getTree());

                            }
                            break;
                        case 2 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:951:7: ( member_name '{' )=> property_declaration
                            {
                            pushFollow(FOLLOW_property_declaration_in_struct_member_declaration6067);
                            property_declaration783=property_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, property_declaration783.getTree());

                            }
                            break;
                        case 3 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:952:10: ( member_name '.' 'this' )=> type_name '.' indexer_declaration
                            {
                            pushFollow(FOLLOW_type_name_in_struct_member_declaration6092);
                            type_name784=type_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name784.getTree());

                            char_literal785=(Token)match(input,DOT,FOLLOW_DOT_in_struct_member_declaration6094); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal785_tree = 
                            (Object)adaptor.create(char_literal785)
                            ;
                            adaptor.addChild(root_0, char_literal785_tree);
                            }

                            pushFollow(FOLLOW_indexer_declaration_in_struct_member_declaration6096);
                            indexer_declaration786=indexer_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, indexer_declaration786.getTree());

                            }
                            break;
                        case 4 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:953:10: indexer_declaration
                            {
                            pushFollow(FOLLOW_indexer_declaration_in_struct_member_declaration6107);
                            indexer_declaration787=indexer_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, indexer_declaration787.getTree());

                            }
                            break;
                        case 5 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:954:14: field_declaration
                            {
                            pushFollow(FOLLOW_field_declaration_in_struct_member_declaration6123);
                            field_declaration788=field_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration788.getTree());

                            }
                            break;
                        case 6 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:955:14: operator_declaration
                            {
                            pushFollow(FOLLOW_operator_declaration_in_struct_member_declaration6144);
                            operator_declaration789=operator_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_declaration789.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 8 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:959:5: struct_declaration
                    {
                    pushFollow(FOLLOW_struct_declaration_in_struct_member_declaration6166);
                    struct_declaration790=struct_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declaration790.getTree());

                    }
                    break;
                case 9 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:960:5: enum_declaration
                    {
                    pushFollow(FOLLOW_enum_declaration_in_struct_member_declaration6173);
                    enum_declaration791=enum_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_declaration791.getTree());

                    }
                    break;
                case 10 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:961:5: delegate_declaration
                    {
                    pushFollow(FOLLOW_delegate_declaration_in_struct_member_declaration6181);
                    delegate_declaration792=delegate_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, delegate_declaration792.getTree());

                    }
                    break;
                case 11 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:962:5: conversion_operator_declaration
                    {
                    pushFollow(FOLLOW_conversion_operator_declaration_in_struct_member_declaration6188);
                    conversion_operator_declaration793=conversion_operator_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conversion_operator_declaration793.getTree());

                    }
                    break;
                case 12 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:963:5: constructor_declaration
                    {
                    pushFollow(FOLLOW_constructor_declaration_in_struct_member_declaration6194);
                    constructor_declaration794=constructor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_declaration794.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 224, struct_member_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "struct_member_declaration"


    public static class indexer_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexer_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:968:1: indexer_declaration : indexer_declarator '{' accessor_declarations '}' ;
    public final csParser.indexer_declaration_return indexer_declaration() throws RecognitionException {
        csParser.indexer_declaration_return retval = new csParser.indexer_declaration_return();
        retval.start = input.LT(1);

        int indexer_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal796=null;
        Token char_literal798=null;
        csParser.indexer_declarator_return indexer_declarator795 =null;

        csParser.accessor_declarations_return accessor_declarations797 =null;


        Object char_literal796_tree=null;
        Object char_literal798_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:969:2: ( indexer_declarator '{' accessor_declarations '}' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:969:4: indexer_declarator '{' accessor_declarations '}'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_indexer_declarator_in_indexer_declaration6212);
            indexer_declarator795=indexer_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, indexer_declarator795.getTree());

            char_literal796=(Token)match(input,199,FOLLOW_199_in_indexer_declaration6216); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal796_tree = 
            (Object)adaptor.create(char_literal796)
            ;
            adaptor.addChild(root_0, char_literal796_tree);
            }

            pushFollow(FOLLOW_accessor_declarations_in_indexer_declaration6220);
            accessor_declarations797=accessor_declarations();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_declarations797.getTree());

            char_literal798=(Token)match(input,203,FOLLOW_203_in_indexer_declaration6224); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal798_tree = 
            (Object)adaptor.create(char_literal798)
            ;
            adaptor.addChild(root_0, char_literal798_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 225, indexer_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "indexer_declaration"


    public static class indexer_declarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexer_declarator"
    // CodeR.CSharp.Parser/src/antlr/cs.g:972:1: indexer_declarator : 'this' '[' formal_parameter_list ']' ;
    public final csParser.indexer_declarator_return indexer_declarator() throws RecognitionException {
        csParser.indexer_declarator_return retval = new csParser.indexer_declarator_return();
        retval.start = input.LT(1);

        int indexer_declarator_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal799=null;
        Token char_literal800=null;
        Token char_literal802=null;
        csParser.formal_parameter_list_return formal_parameter_list801 =null;


        Object string_literal799_tree=null;
        Object char_literal800_tree=null;
        Object char_literal802_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:973:2: ( 'this' '[' formal_parameter_list ']' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:974:3: 'this' '[' formal_parameter_list ']'
            {
            root_0 = (Object)adaptor.nil();


            string_literal799=(Token)match(input,182,FOLLOW_182_in_indexer_declarator6239); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal799_tree = 
            (Object)adaptor.create(string_literal799)
            ;
            adaptor.addChild(root_0, string_literal799_tree);
            }

            char_literal800=(Token)match(input,94,FOLLOW_94_in_indexer_declarator6243); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal800_tree = 
            (Object)adaptor.create(char_literal800)
            ;
            adaptor.addChild(root_0, char_literal800_tree);
            }

            pushFollow(FOLLOW_formal_parameter_list_in_indexer_declarator6247);
            formal_parameter_list801=formal_parameter_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_parameter_list801.getTree());

            char_literal802=(Token)match(input,95,FOLLOW_95_in_indexer_declarator6251); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal802_tree = 
            (Object)adaptor.create(char_literal802)
            ;
            adaptor.addChild(root_0, char_literal802_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 226, indexer_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "indexer_declarator"


    public static class operator_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:978:1: operator_declaration : operator_declarator operator_body ;
    public final csParser.operator_declaration_return operator_declaration() throws RecognitionException {
        csParser.operator_declaration_return retval = new csParser.operator_declaration_return();
        retval.start = input.LT(1);

        int operator_declaration_StartIndex = input.index();

        Object root_0 = null;

        csParser.operator_declarator_return operator_declarator803 =null;

        csParser.operator_body_return operator_body804 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:979:2: ( operator_declarator operator_body )
            // CodeR.CSharp.Parser/src/antlr/cs.g:979:4: operator_declarator operator_body
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_operator_declarator_in_operator_declaration6264);
            operator_declarator803=operator_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_declarator803.getTree());

            pushFollow(FOLLOW_operator_body_in_operator_declaration6266);
            operator_body804=operator_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_body804.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 227, operator_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "operator_declaration"


    public static class operator_declarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator_declarator"
    // CodeR.CSharp.Parser/src/antlr/cs.g:982:1: operator_declarator : 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator ) ;
    public final csParser.operator_declarator_return operator_declarator() throws RecognitionException {
        csParser.operator_declarator_return retval = new csParser.operator_declarator_return();
        retval.start = input.LT(1);

        int operator_declarator_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal805=null;
        Token set806=null;
        Token char_literal807=null;
        csParser.type_return type808 =null;

        csParser.identifier_return identifier809 =null;

        csParser.binary_operator_declarator_return binary_operator_declarator810 =null;

        csParser.unary_operator_declarator_return unary_operator_declarator811 =null;

        csParser.overloadable_unary_operator_return overloadable_unary_operator812 =null;

        csParser.unary_operator_declarator_return unary_operator_declarator813 =null;

        csParser.overloadable_binary_operator_return overloadable_binary_operator814 =null;

        csParser.binary_operator_declarator_return binary_operator_declarator815 =null;


        Object string_literal805_tree=null;
        Object set806_tree=null;
        Object char_literal807_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:983:2: ( 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:983:4: 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator )
            {
            root_0 = (Object)adaptor.nil();


            string_literal805=(Token)match(input,155,FOLLOW_155_in_operator_declarator6277); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal805_tree = 
            (Object)adaptor.create(string_literal805)
            ;
            adaptor.addChild(root_0, string_literal805_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:983:17: ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator )
            int alt232=3;
            switch ( input.LA(1) ) {
            case MINUS:
            case 74:
                {
                alt232=1;
                }
                break;
            case FALSE:
            case TRUE:
            case 64:
            case 75:
            case 78:
            case 204:
                {
                alt232=2;
                }
                break;
            case GT:
            case 65:
            case 66:
            case 69:
            case 72:
            case 80:
            case 84:
            case 85:
            case 87:
            case 89:
            case 91:
            case 96:
            case 200:
                {
                alt232=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);

                throw nvae;

            }

            switch (alt232) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:984:5: ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator )
                    {
                    set806=(Token)input.LT(1);

                    if ( input.LA(1)==MINUS||input.LA(1)==74 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set806)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    char_literal807=(Token)match(input,71,FOLLOW_71_in_operator_declarator6297); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal807_tree = 
                    (Object)adaptor.create(char_literal807)
                    ;
                    adaptor.addChild(root_0, char_literal807_tree);
                    }

                    pushFollow(FOLLOW_type_in_operator_declarator6301);
                    type808=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type808.getTree());

                    pushFollow(FOLLOW_identifier_in_operator_declarator6305);
                    identifier809=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier809.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:984:43: ( binary_operator_declarator | unary_operator_declarator )
                    int alt231=2;
                    int LA231_0 = input.LA(1);

                    if ( (LA231_0==77) ) {
                        alt231=1;
                    }
                    else if ( (LA231_0==RPAREN) ) {
                        alt231=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 231, 0, input);

                        throw nvae;

                    }
                    switch (alt231) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:984:44: binary_operator_declarator
                            {
                            pushFollow(FOLLOW_binary_operator_declarator_in_operator_declarator6308);
                            binary_operator_declarator810=binary_operator_declarator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, binary_operator_declarator810.getTree());

                            }
                            break;
                        case 2 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:984:73: unary_operator_declarator
                            {
                            pushFollow(FOLLOW_unary_operator_declarator_in_operator_declarator6312);
                            unary_operator_declarator811=unary_operator_declarator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_operator_declarator811.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:985:7: overloadable_unary_operator unary_operator_declarator
                    {
                    pushFollow(FOLLOW_overloadable_unary_operator_in_operator_declarator6321);
                    overloadable_unary_operator812=overloadable_unary_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, overloadable_unary_operator812.getTree());

                    pushFollow(FOLLOW_unary_operator_declarator_in_operator_declarator6325);
                    unary_operator_declarator813=unary_operator_declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_operator_declarator813.getTree());

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:986:7: overloadable_binary_operator binary_operator_declarator
                    {
                    pushFollow(FOLLOW_overloadable_binary_operator_in_operator_declarator6333);
                    overloadable_binary_operator814=overloadable_binary_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, overloadable_binary_operator814.getTree());

                    pushFollow(FOLLOW_binary_operator_declarator_in_operator_declarator6337);
                    binary_operator_declarator815=binary_operator_declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, binary_operator_declarator815.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 228, operator_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "operator_declarator"


    public static class unary_operator_declarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unary_operator_declarator"
    // CodeR.CSharp.Parser/src/antlr/cs.g:990:1: unary_operator_declarator : ')' ;
    public final csParser.unary_operator_declarator_return unary_operator_declarator() throws RecognitionException {
        csParser.unary_operator_declarator_return retval = new csParser.unary_operator_declarator_return();
        retval.start = input.LT(1);

        int unary_operator_declarator_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal816=null;

        Object char_literal816_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:991:2: ( ')' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:991:4: ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal816=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unary_operator_declarator6358); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal816_tree = 
            (Object)adaptor.create(char_literal816)
            ;
            adaptor.addChild(root_0, char_literal816_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 229, unary_operator_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unary_operator_declarator"


    public static class overloadable_unary_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "overloadable_unary_operator"
    // CodeR.CSharp.Parser/src/antlr/cs.g:994:1: overloadable_unary_operator : ( '!' | '~' | '++' | '--' | 'true' | 'false' );
    public final csParser.overloadable_unary_operator_return overloadable_unary_operator() throws RecognitionException {
        csParser.overloadable_unary_operator_return retval = new csParser.overloadable_unary_operator_return();
        retval.start = input.LT(1);

        int overloadable_unary_operator_StartIndex = input.index();

        Object root_0 = null;

        Token set817=null;

        Object set817_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:995:2: ( '!' | '~' | '++' | '--' | 'true' | 'false' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:
            {
            root_0 = (Object)adaptor.nil();


            set817=(Token)input.LT(1);

            if ( input.LA(1)==FALSE||input.LA(1)==TRUE||input.LA(1)==64||input.LA(1)==75||input.LA(1)==78||input.LA(1)==204 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set817)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 230, overloadable_unary_operator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "overloadable_unary_operator"


    public static class binary_operator_declarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "binary_operator_declarator"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1003:1: binary_operator_declarator : ',' type identifier ')' ;
    public final csParser.binary_operator_declarator_return binary_operator_declarator() throws RecognitionException {
        csParser.binary_operator_declarator_return retval = new csParser.binary_operator_declarator_return();
        retval.start = input.LT(1);

        int binary_operator_declarator_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal818=null;
        Token char_literal821=null;
        csParser.type_return type819 =null;

        csParser.identifier_return identifier820 =null;


        Object char_literal818_tree=null;
        Object char_literal821_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1004:2: ( ',' type identifier ')' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1004:4: ',' type identifier ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal818=(Token)match(input,77,FOLLOW_77_in_binary_operator_declarator6407); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal818_tree = 
            (Object)adaptor.create(char_literal818)
            ;
            adaptor.addChild(root_0, char_literal818_tree);
            }

            pushFollow(FOLLOW_type_in_binary_operator_declarator6411);
            type819=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type819.getTree());

            pushFollow(FOLLOW_identifier_in_binary_operator_declarator6415);
            identifier820=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier820.getTree());

            char_literal821=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_binary_operator_declarator6419); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal821_tree = 
            (Object)adaptor.create(char_literal821)
            ;
            adaptor.addChild(root_0, char_literal821_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 231, binary_operator_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "binary_operator_declarator"


    public static class overloadable_binary_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "overloadable_binary_operator"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1008:1: overloadable_binary_operator : ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' );
    public final csParser.overloadable_binary_operator_return overloadable_binary_operator() throws RecognitionException {
        csParser.overloadable_binary_operator_return retval = new csParser.overloadable_binary_operator_return();
        retval.start = input.LT(1);

        int overloadable_binary_operator_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal822=null;
        Token char_literal823=null;
        Token char_literal824=null;
        Token char_literal825=null;
        Token char_literal826=null;
        Token char_literal827=null;
        Token string_literal828=null;
        Token char_literal829=null;
        Token char_literal830=null;
        Token string_literal831=null;
        Token string_literal832=null;
        Token char_literal833=null;
        Token char_literal834=null;
        Token string_literal835=null;
        Token string_literal836=null;

        Object char_literal822_tree=null;
        Object char_literal823_tree=null;
        Object char_literal824_tree=null;
        Object char_literal825_tree=null;
        Object char_literal826_tree=null;
        Object char_literal827_tree=null;
        Object string_literal828_tree=null;
        Object char_literal829_tree=null;
        Object char_literal830_tree=null;
        Object string_literal831_tree=null;
        Object string_literal832_tree=null;
        Object char_literal833_tree=null;
        Object char_literal834_tree=null;
        Object string_literal835_tree=null;
        Object string_literal836_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1009:2: ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' )
            int alt233=14;
            switch ( input.LA(1) ) {
            case 72:
                {
                alt233=1;
                }
                break;
            case 80:
                {
                alt233=2;
                }
                break;
            case 66:
                {
                alt233=3;
                }
                break;
            case 69:
                {
                alt233=4;
                }
                break;
            case 200:
                {
                alt233=5;
                }
                break;
            case 96:
                {
                alt233=6;
                }
                break;
            case 85:
                {
                alt233=7;
                }
                break;
            case GT:
                {
                int LA233_8 = input.LA(2);

                if ( (LA233_8==GT) ) {
                    alt233=8;
                }
                else if ( (LA233_8==77) ) {
                    alt233=11;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 8, input);

                    throw nvae;

                }
                }
                break;
            case 89:
                {
                alt233=9;
                }
                break;
            case 65:
                {
                alt233=10;
                }
                break;
            case 84:
                {
                alt233=12;
                }
                break;
            case 91:
                {
                alt233=13;
                }
                break;
            case 87:
                {
                alt233=14;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);

                throw nvae;

            }

            switch (alt233) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1009:21: '*'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal822=(Token)match(input,72,FOLLOW_72_in_overloadable_binary_operator6433); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal822_tree = 
                    (Object)adaptor.create(char_literal822)
                    ;
                    adaptor.addChild(root_0, char_literal822_tree);
                    }

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1010:4: '/'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal823=(Token)match(input,80,FOLLOW_80_in_overloadable_binary_operator6438); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal823_tree = 
                    (Object)adaptor.create(char_literal823)
                    ;
                    adaptor.addChild(root_0, char_literal823_tree);
                    }

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1011:4: '%'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal824=(Token)match(input,66,FOLLOW_66_in_overloadable_binary_operator6443); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal824_tree = 
                    (Object)adaptor.create(char_literal824)
                    ;
                    adaptor.addChild(root_0, char_literal824_tree);
                    }

                    }
                    break;
                case 4 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1012:4: '&'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal825=(Token)match(input,69,FOLLOW_69_in_overloadable_binary_operator6448); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal825_tree = 
                    (Object)adaptor.create(char_literal825)
                    ;
                    adaptor.addChild(root_0, char_literal825_tree);
                    }

                    }
                    break;
                case 5 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1013:4: '|'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal826=(Token)match(input,200,FOLLOW_200_in_overloadable_binary_operator6453); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal826_tree = 
                    (Object)adaptor.create(char_literal826)
                    ;
                    adaptor.addChild(root_0, char_literal826_tree);
                    }

                    }
                    break;
                case 6 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1014:4: '^'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal827=(Token)match(input,96,FOLLOW_96_in_overloadable_binary_operator6458); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal827_tree = 
                    (Object)adaptor.create(char_literal827)
                    ;
                    adaptor.addChild(root_0, char_literal827_tree);
                    }

                    }
                    break;
                case 7 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1015:4: '<<'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal828=(Token)match(input,85,FOLLOW_85_in_overloadable_binary_operator6463); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal828_tree = 
                    (Object)adaptor.create(string_literal828)
                    ;
                    adaptor.addChild(root_0, string_literal828_tree);
                    }

                    }
                    break;
                case 8 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1016:4: '>' '>'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal829=(Token)match(input,GT,FOLLOW_GT_in_overloadable_binary_operator6468); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal829_tree = 
                    (Object)adaptor.create(char_literal829)
                    ;
                    adaptor.addChild(root_0, char_literal829_tree);
                    }

                    char_literal830=(Token)match(input,GT,FOLLOW_GT_in_overloadable_binary_operator6470); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal830_tree = 
                    (Object)adaptor.create(char_literal830)
                    ;
                    adaptor.addChild(root_0, char_literal830_tree);
                    }

                    }
                    break;
                case 9 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1017:4: '=='
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal831=(Token)match(input,89,FOLLOW_89_in_overloadable_binary_operator6475); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal831_tree = 
                    (Object)adaptor.create(string_literal831)
                    ;
                    adaptor.addChild(root_0, string_literal831_tree);
                    }

                    }
                    break;
                case 10 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1018:4: '!='
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal832=(Token)match(input,65,FOLLOW_65_in_overloadable_binary_operator6480); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal832_tree = 
                    (Object)adaptor.create(string_literal832)
                    ;
                    adaptor.addChild(root_0, string_literal832_tree);
                    }

                    }
                    break;
                case 11 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1019:4: '>'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal833=(Token)match(input,GT,FOLLOW_GT_in_overloadable_binary_operator6485); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal833_tree = 
                    (Object)adaptor.create(char_literal833)
                    ;
                    adaptor.addChild(root_0, char_literal833_tree);
                    }

                    }
                    break;
                case 12 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1020:4: '<'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal834=(Token)match(input,84,FOLLOW_84_in_overloadable_binary_operator6490); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal834_tree = 
                    (Object)adaptor.create(char_literal834)
                    ;
                    adaptor.addChild(root_0, char_literal834_tree);
                    }

                    }
                    break;
                case 13 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1021:4: '>='
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal835=(Token)match(input,91,FOLLOW_91_in_overloadable_binary_operator6495); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal835_tree = 
                    (Object)adaptor.create(string_literal835)
                    ;
                    adaptor.addChild(root_0, string_literal835_tree);
                    }

                    }
                    break;
                case 14 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1022:4: '<='
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal836=(Token)match(input,87,FOLLOW_87_in_overloadable_binary_operator6500); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal836_tree = 
                    (Object)adaptor.create(string_literal836)
                    ;
                    adaptor.addChild(root_0, string_literal836_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 232, overloadable_binary_operator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "overloadable_binary_operator"


    public static class conversion_operator_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "conversion_operator_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1025:1: conversion_operator_declaration : conversion_operator_declarator operator_body ;
    public final csParser.conversion_operator_declaration_return conversion_operator_declaration() throws RecognitionException {
        csParser.conversion_operator_declaration_return retval = new csParser.conversion_operator_declaration_return();
        retval.start = input.LT(1);

        int conversion_operator_declaration_StartIndex = input.index();

        Object root_0 = null;

        csParser.conversion_operator_declarator_return conversion_operator_declarator837 =null;

        csParser.operator_body_return operator_body838 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1026:2: ( conversion_operator_declarator operator_body )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1026:4: conversion_operator_declarator operator_body
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_conversion_operator_declarator_in_conversion_operator_declaration6512);
            conversion_operator_declarator837=conversion_operator_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conversion_operator_declarator837.getTree());

            pushFollow(FOLLOW_operator_body_in_conversion_operator_declaration6516);
            operator_body838=operator_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_body838.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 233, conversion_operator_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "conversion_operator_declaration"


    public static class conversion_operator_declarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "conversion_operator_declarator"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1029:1: conversion_operator_declarator : ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' ;
    public final csParser.conversion_operator_declarator_return conversion_operator_declarator() throws RecognitionException {
        csParser.conversion_operator_declarator_return retval = new csParser.conversion_operator_declarator_return();
        retval.start = input.LT(1);

        int conversion_operator_declarator_StartIndex = input.index();

        Object root_0 = null;

        Token set839=null;
        Token string_literal840=null;
        Token char_literal842=null;
        Token char_literal845=null;
        csParser.type_return type841 =null;

        csParser.type_return type843 =null;

        csParser.identifier_return identifier844 =null;


        Object set839_tree=null;
        Object string_literal840_tree=null;
        Object char_literal842_tree=null;
        Object char_literal845_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1030:2: ( ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1030:4: ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')'
            {
            root_0 = (Object)adaptor.nil();


            set839=(Token)input.LT(1);

            if ( input.LA(1)==126||input.LA(1)==138 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set839)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            string_literal840=(Token)match(input,155,FOLLOW_155_in_conversion_operator_declarator6536); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal840_tree = 
            (Object)adaptor.create(string_literal840)
            ;
            adaptor.addChild(root_0, string_literal840_tree);
            }

            pushFollow(FOLLOW_type_in_conversion_operator_declarator6540);
            type841=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type841.getTree());

            char_literal842=(Token)match(input,71,FOLLOW_71_in_conversion_operator_declarator6544); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal842_tree = 
            (Object)adaptor.create(char_literal842)
            ;
            adaptor.addChild(root_0, char_literal842_tree);
            }

            pushFollow(FOLLOW_type_in_conversion_operator_declarator6548);
            type843=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type843.getTree());

            pushFollow(FOLLOW_identifier_in_conversion_operator_declarator6552);
            identifier844=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier844.getTree());

            char_literal845=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_conversion_operator_declarator6556); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal845_tree = 
            (Object)adaptor.create(char_literal845)
            ;
            adaptor.addChild(root_0, char_literal845_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 234, conversion_operator_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "conversion_operator_declarator"


    public static class operator_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator_body"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1033:1: operator_body : block ;
    public final csParser.operator_body_return operator_body() throws RecognitionException {
        csParser.operator_body_return retval = new csParser.operator_body_return();
        retval.start = input.LT(1);

        int operator_body_StartIndex = input.index();

        Object root_0 = null;

        csParser.block_return block846 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1034:2: ( block )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1034:4: block
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_in_operator_body6567);
            block846=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block846.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 235, operator_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "operator_body"


    public static class constructor_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constructor_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1038:1: constructor_declaration : constructor_declarator constructor_body ;
    public final csParser.constructor_declaration_return constructor_declaration() throws RecognitionException {
        csParser.constructor_declaration_return retval = new csParser.constructor_declaration_return();
        retval.start = input.LT(1);

        int constructor_declaration_StartIndex = input.index();

        Object root_0 = null;

        csParser.constructor_declarator_return constructor_declarator847 =null;

        csParser.constructor_body_return constructor_body848 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1039:2: ( constructor_declarator constructor_body )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1039:4: constructor_declarator constructor_body
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_constructor_declarator_in_constructor_declaration6579);
            constructor_declarator847=constructor_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_declarator847.getTree());

            pushFollow(FOLLOW_constructor_body_in_constructor_declaration6583);
            constructor_body848=constructor_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_body848.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 236, constructor_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constructor_declaration"


    public static class constructor_declarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constructor_declarator"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1042:1: constructor_declarator : identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )? ;
    public final csParser.constructor_declarator_return constructor_declarator() throws RecognitionException {
        csParser.constructor_declarator_return retval = new csParser.constructor_declarator_return();
        retval.start = input.LT(1);

        int constructor_declarator_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal850=null;
        Token char_literal852=null;
        csParser.identifier_return identifier849 =null;

        csParser.formal_parameter_list_return formal_parameter_list851 =null;

        csParser.constructor_initializer_return constructor_initializer853 =null;


        Object char_literal850_tree=null;
        Object char_literal852_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1043:2: ( identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )? )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1043:4: identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_constructor_declarator6594);
            identifier849=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier849.getTree());

            char_literal850=(Token)match(input,71,FOLLOW_71_in_constructor_declarator6598); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal850_tree = 
            (Object)adaptor.create(char_literal850)
            ;
            adaptor.addChild(root_0, char_literal850_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1043:23: ( formal_parameter_list )?
            int alt234=2;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==IDENTIFIER||LA234_0==94||LA234_0==98||(LA234_0 >= 100 && LA234_0 <= 101)||(LA234_0 >= 103 && LA234_0 <= 104)||LA234_0==106||(LA234_0 >= 108 && LA234_0 <= 109)||LA234_0==111||LA234_0==116||LA234_0==119||(LA234_0 >= 121 && LA234_0 <= 122)||LA234_0==124||LA234_0==128||LA234_0==131||LA234_0==134||LA234_0==137||LA234_0==140||LA234_0==143||(LA234_0 >= 145 && LA234_0 <= 146)||(LA234_0 >= 148 && LA234_0 <= 150)||(LA234_0 >= 153 && LA234_0 <= 154)||(LA234_0 >= 156 && LA234_0 <= 157)||(LA234_0 >= 159 && LA234_0 <= 160)||LA234_0==162||LA234_0==164||(LA234_0 >= 168 && LA234_0 <= 169)||LA234_0==171||(LA234_0 >= 173 && LA234_0 <= 175)||LA234_0==179||LA234_0==182||LA234_0==185||(LA234_0 >= 187 && LA234_0 <= 188)||(LA234_0 >= 191 && LA234_0 <= 192)||LA234_0==194||LA234_0==196||LA234_0==198) ) {
                alt234=1;
            }
            switch (alt234) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1043:23: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_constructor_declarator6602);
                    formal_parameter_list851=formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_parameter_list851.getTree());

                    }
                    break;

            }


            char_literal852=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constructor_declarator6607); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal852_tree = 
            (Object)adaptor.create(char_literal852)
            ;
            adaptor.addChild(root_0, char_literal852_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1043:54: ( constructor_initializer )?
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==82) ) {
                alt235=1;
            }
            switch (alt235) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1043:54: constructor_initializer
                    {
                    pushFollow(FOLLOW_constructor_initializer_in_constructor_declarator6611);
                    constructor_initializer853=constructor_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_initializer853.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 237, constructor_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constructor_declarator"


    public static class constructor_initializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constructor_initializer"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1046:1: constructor_initializer : ':' ( 'base' | 'this' ) '(' ( argument_list )? ')' ;
    public final csParser.constructor_initializer_return constructor_initializer() throws RecognitionException {
        csParser.constructor_initializer_return retval = new csParser.constructor_initializer_return();
        retval.start = input.LT(1);

        int constructor_initializer_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal854=null;
        Token set855=null;
        Token char_literal856=null;
        Token char_literal858=null;
        csParser.argument_list_return argument_list857 =null;


        Object char_literal854_tree=null;
        Object set855_tree=null;
        Object char_literal856_tree=null;
        Object char_literal858_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1047:2: ( ':' ( 'base' | 'this' ) '(' ( argument_list )? ')' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1047:4: ':' ( 'base' | 'this' ) '(' ( argument_list )? ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal854=(Token)match(input,82,FOLLOW_82_in_constructor_initializer6623); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal854_tree = 
            (Object)adaptor.create(char_literal854)
            ;
            adaptor.addChild(root_0, char_literal854_tree);
            }

            set855=(Token)input.LT(1);

            if ( input.LA(1)==105||input.LA(1)==182 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set855)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            char_literal856=(Token)match(input,71,FOLLOW_71_in_constructor_initializer6637); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal856_tree = 
            (Object)adaptor.create(char_literal856)
            ;
            adaptor.addChild(root_0, char_literal856_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1047:36: ( argument_list )?
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==Character_literal||LA236_0==FALSE||(LA236_0 >= Hex_number && LA236_0 <= IDENTIFIER)||(LA236_0 >= MINUS && LA236_0 <= NUMBER)||LA236_0==Real_literal||LA236_0==STRINGLITERAL||LA236_0==TRUE||LA236_0==Verbatim_string_literal||LA236_0==64||LA236_0==69||(LA236_0 >= 71 && LA236_0 <= 72)||(LA236_0 >= 74 && LA236_0 <= 75)||LA236_0==78||LA236_0==98||(LA236_0 >= 100 && LA236_0 <= 101)||(LA236_0 >= 103 && LA236_0 <= 106)||(LA236_0 >= 108 && LA236_0 <= 109)||(LA236_0 >= 111 && LA236_0 <= 112)||(LA236_0 >= 116 && LA236_0 <= 119)||(LA236_0 >= 121 && LA236_0 <= 122)||LA236_0==124||LA236_0==128||LA236_0==131||LA236_0==134||LA236_0==137||LA236_0==140||LA236_0==143||(LA236_0 >= 145 && LA236_0 <= 146)||(LA236_0 >= 148 && LA236_0 <= 150)||(LA236_0 >= 152 && LA236_0 <= 154)||(LA236_0 >= 156 && LA236_0 <= 157)||LA236_0==159||LA236_0==162||LA236_0==164||(LA236_0 >= 168 && LA236_0 <= 169)||LA236_0==171||(LA236_0 >= 173 && LA236_0 <= 176)||LA236_0==179||LA236_0==182||(LA236_0 >= 185 && LA236_0 <= 189)||(LA236_0 >= 191 && LA236_0 <= 192)||LA236_0==196||LA236_0==198||LA236_0==204) ) {
                alt236=1;
            }
            switch (alt236) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1047:36: argument_list
                    {
                    pushFollow(FOLLOW_argument_list_in_constructor_initializer6641);
                    argument_list857=argument_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_list857.getTree());

                    }
                    break;

            }


            char_literal858=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constructor_initializer6646); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal858_tree = 
            (Object)adaptor.create(char_literal858)
            ;
            adaptor.addChild(root_0, char_literal858_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 238, constructor_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constructor_initializer"


    public static class constructor_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constructor_body"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1050:1: constructor_body : block ;
    public final csParser.constructor_body_return constructor_body() throws RecognitionException {
        csParser.constructor_body_return retval = new csParser.constructor_body_return();
        retval.start = input.LT(1);

        int constructor_body_StartIndex = input.index();

        Object root_0 = null;

        csParser.block_return block859 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1051:2: ( block )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1051:4: block
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_in_constructor_body6657);
            block859=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block859.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 239, constructor_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constructor_body"


    public static class destructor_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "destructor_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1061:1: destructor_declaration : '~' identifier '(' ')' destructor_body ;
    public final csParser.destructor_declaration_return destructor_declaration() throws RecognitionException {
        csParser.destructor_declaration_return retval = new csParser.destructor_declaration_return();
        retval.start = input.LT(1);

        int destructor_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal860=null;
        Token char_literal862=null;
        Token char_literal863=null;
        csParser.identifier_return identifier861 =null;

        csParser.destructor_body_return destructor_body864 =null;


        Object char_literal860_tree=null;
        Object char_literal862_tree=null;
        Object char_literal863_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1062:2: ( '~' identifier '(' ')' destructor_body )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1062:4: '~' identifier '(' ')' destructor_body
            {
            root_0 = (Object)adaptor.nil();


            char_literal860=(Token)match(input,204,FOLLOW_204_in_destructor_declaration6675); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal860_tree = 
            (Object)adaptor.create(char_literal860)
            ;
            adaptor.addChild(root_0, char_literal860_tree);
            }

            pushFollow(FOLLOW_identifier_in_destructor_declaration6678);
            identifier861=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier861.getTree());

            char_literal862=(Token)match(input,71,FOLLOW_71_in_destructor_declaration6682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal862_tree = 
            (Object)adaptor.create(char_literal862)
            ;
            adaptor.addChild(root_0, char_literal862_tree);
            }

            char_literal863=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_destructor_declaration6686); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal863_tree = 
            (Object)adaptor.create(char_literal863)
            ;
            adaptor.addChild(root_0, char_literal863_tree);
            }

            pushFollow(FOLLOW_destructor_body_in_destructor_declaration6691);
            destructor_body864=destructor_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, destructor_body864.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 240, destructor_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "destructor_declaration"


    public static class destructor_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "destructor_body"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1065:1: destructor_body : block ;
    public final csParser.destructor_body_return destructor_body() throws RecognitionException {
        csParser.destructor_body_return retval = new csParser.destructor_body_return();
        retval.start = input.LT(1);

        int destructor_body_StartIndex = input.index();

        Object root_0 = null;

        csParser.block_return block865 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1066:2: ( block )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1066:4: block
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_in_destructor_body6702);
            block865=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block865.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 241, destructor_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "destructor_body"


    public static class invocation_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "invocation_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1070:1: invocation_expression : invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ;
    public final csParser.invocation_expression_return invocation_expression() throws RecognitionException {
        csParser.invocation_expression_return retval = new csParser.invocation_expression_return();
        retval.start = input.LT(1);

        int invocation_expression_StartIndex = input.index();

        Object root_0 = null;

        csParser.invocation_start_return invocation_start866 =null;

        csParser.arguments_return arguments867 =null;

        csParser.invocation_part_return invocation_part868 =null;

        csParser.invocation_part_return invocation_part869 =null;

        csParser.arguments_return arguments870 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 242) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1071:2: ( invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1071:4: invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_invocation_start_in_invocation_expression6714);
            invocation_start866=invocation_start();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, invocation_start866.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:1072:3: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )*
            loop237:
            do {
                int alt237=3;
                int LA237_0 = input.LA(1);

                if ( (LA237_0==71) ) {
                    int LA237_1 = input.LA(2);

                    if ( (synpred31_cs()) ) {
                        alt237=1;
                    }


                }
                else if ( (LA237_0==DOT||LA237_0==PTR||LA237_0==94) ) {
                    alt237=2;
                }


                switch (alt237) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1073:4: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
            	    {
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1073:4: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1073:5: ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part
            	    {
            	    pushFollow(FOLLOW_arguments_in_invocation_expression6740);
            	    arguments867=arguments();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments867.getTree());

            	    pushFollow(FOLLOW_invocation_part_in_invocation_expression6744);
            	    invocation_part868=invocation_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, invocation_part868.getTree());

            	    }


            	    }
            	    break;
            	case 2 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1074:5: invocation_part
            	    {
            	    pushFollow(FOLLOW_invocation_part_in_invocation_expression6751);
            	    invocation_part869=invocation_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, invocation_part869.getTree());

            	    }
            	    break;

            	default :
            	    break loop237;
                }
            } while (true);


            pushFollow(FOLLOW_arguments_in_invocation_expression6760);
            arguments870=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments870.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 242, invocation_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "invocation_expression"


    public static class invocation_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "invocation_start"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1078:1: invocation_start : ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | 'this' | 'base' | identifier ( '::' identifier )? | typeof_expression );
    public final csParser.invocation_start_return invocation_start() throws RecognitionException {
        csParser.invocation_start_return retval = new csParser.invocation_start_return();
        retval.start = input.LT(1);

        int invocation_start_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal874=null;
        Token string_literal875=null;
        Token string_literal877=null;
        csParser.predefined_type_return predefined_type871 =null;

        csParser.identifier_return identifier872 =null;

        csParser.generic_argument_list_return generic_argument_list873 =null;

        csParser.identifier_return identifier876 =null;

        csParser.identifier_return identifier878 =null;

        csParser.typeof_expression_return typeof_expression879 =null;


        Object string_literal874_tree=null;
        Object string_literal875_tree=null;
        Object string_literal877_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 243) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1078:17: ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | 'this' | 'base' | identifier ( '::' identifier )? | typeof_expression )
            int alt239=6;
            switch ( input.LA(1) ) {
            case 106:
            case 109:
            case 111:
            case 116:
            case 121:
            case 131:
            case 140:
            case 148:
            case 153:
            case 171:
            case 175:
            case 179:
            case 187:
            case 188:
            case 191:
                {
                alt239=1;
                }
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 134:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
                {
                int LA239_2 = input.LA(2);

                if ( (LA239_2==84) && (synpred32_cs())) {
                    alt239=2;
                }
                else if ( (LA239_2==DOT||LA239_2==PTR||LA239_2==71||LA239_2==83||LA239_2==94) ) {
                    alt239=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 239, 2, input);

                    throw nvae;

                }
                }
                break;
            case 182:
                {
                alt239=3;
                }
                break;
            case 105:
                {
                alt239=4;
                }
                break;
            case 186:
                {
                alt239=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 239, 0, input);

                throw nvae;

            }

            switch (alt239) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1079:2: predefined_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_predefined_type_in_invocation_start6770);
                    predefined_type871=predefined_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, predefined_type871.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1080:4: ( identifier '<' )=> identifier generic_argument_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_invocation_start6787);
                    identifier872=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier872.getTree());

                    pushFollow(FOLLOW_generic_argument_list_in_invocation_start6791);
                    generic_argument_list873=generic_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_argument_list873.getTree());

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1081:4: 'this'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal874=(Token)match(input,182,FOLLOW_182_in_invocation_start6796); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal874_tree = 
                    (Object)adaptor.create(string_literal874)
                    ;
                    adaptor.addChild(root_0, string_literal874_tree);
                    }

                    }
                    break;
                case 4 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1082:4: 'base'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal875=(Token)match(input,105,FOLLOW_105_in_invocation_start6802); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal875_tree = 
                    (Object)adaptor.create(string_literal875)
                    ;
                    adaptor.addChild(root_0, string_literal875_tree);
                    }

                    }
                    break;
                case 5 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1083:4: identifier ( '::' identifier )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_invocation_start6807);
                    identifier876=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier876.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:1083:17: ( '::' identifier )?
                    int alt238=2;
                    int LA238_0 = input.LA(1);

                    if ( (LA238_0==83) ) {
                        alt238=1;
                    }
                    switch (alt238) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:1083:18: '::' identifier
                            {
                            string_literal877=(Token)match(input,83,FOLLOW_83_in_invocation_start6812); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal877_tree = 
                            (Object)adaptor.create(string_literal877)
                            ;
                            adaptor.addChild(root_0, string_literal877_tree);
                            }

                            pushFollow(FOLLOW_identifier_in_invocation_start6816);
                            identifier878=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier878.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1084:4: typeof_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typeof_expression_in_invocation_start6823);
                    typeof_expression879=typeof_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeof_expression879.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 243, invocation_start_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "invocation_start"


    public static class invocation_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "invocation_part"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1087:1: invocation_part : ( access_identifier | brackets );
    public final csParser.invocation_part_return invocation_part() throws RecognitionException {
        csParser.invocation_part_return retval = new csParser.invocation_part_return();
        retval.start = input.LT(1);

        int invocation_part_StartIndex = input.index();

        Object root_0 = null;

        csParser.access_identifier_return access_identifier880 =null;

        csParser.brackets_return brackets881 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 244) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1087:16: ( access_identifier | brackets )
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==DOT||LA240_0==PTR) ) {
                alt240=1;
            }
            else if ( (LA240_0==94) ) {
                alt240=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 240, 0, input);

                throw nvae;

            }
            switch (alt240) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1088:3: access_identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_access_identifier_in_invocation_part6847);
                    access_identifier880=access_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_identifier880.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1089:4: brackets
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_brackets_in_invocation_part6852);
                    brackets881=brackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets881.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 244, invocation_part_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "invocation_part"


    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1093:1: statement : ( ( declaration_statement )=> declaration_statement | ( identifier ':' )=> labeled_statement | embedded_statement );
    public final csParser.statement_return statement() throws RecognitionException {
        csParser.statement_return retval = new csParser.statement_return();
        retval.start = input.LT(1);

        int statement_StartIndex = input.index();

        Object root_0 = null;

        csParser.declaration_statement_return declaration_statement882 =null;

        csParser.labeled_statement_return labeled_statement883 =null;

        csParser.embedded_statement_return embedded_statement884 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 245) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1093:10: ( ( declaration_statement )=> declaration_statement | ( identifier ':' )=> labeled_statement | embedded_statement )
            int alt241=3;
            int LA241_0 = input.LA(1);

            if ( (LA241_0==192) ) {
                int LA241_1 = input.LA(2);

                if ( (synpred33_cs()) ) {
                    alt241=1;
                }
                else if ( (synpred34_cs()) ) {
                    alt241=2;
                }
                else if ( (true) ) {
                    alt241=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 241, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA241_0==122) ) {
                int LA241_2 = input.LA(2);

                if ( (synpred33_cs()) ) {
                    alt241=1;
                }
                else if ( (synpred34_cs()) ) {
                    alt241=2;
                }
                else if ( (true) ) {
                    alt241=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 241, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA241_0==106||LA241_0==109||LA241_0==111||LA241_0==116||LA241_0==121||LA241_0==131||LA241_0==140||LA241_0==148||LA241_0==153||LA241_0==171||LA241_0==175||LA241_0==179||(LA241_0 >= 187 && LA241_0 <= 188)||LA241_0==191) ) {
                int LA241_3 = input.LA(2);

                if ( (synpred33_cs()) ) {
                    alt241=1;
                }
                else if ( (true) ) {
                    alt241=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 241, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA241_0==198) ) {
                int LA241_4 = input.LA(2);

                if ( (synpred33_cs()) ) {
                    alt241=1;
                }
                else if ( (synpred34_cs()) ) {
                    alt241=2;
                }
                else if ( (true) ) {
                    alt241=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 241, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA241_0==194) && (synpred33_cs())) {
                alt241=1;
            }
            else if ( (LA241_0==114) && (synpred33_cs())) {
                alt241=1;
            }
            else if ( (LA241_0==Character_literal||LA241_0==FALSE||LA241_0==Hex_number||LA241_0==IF||(LA241_0 >= MINUS && LA241_0 <= NUMBER)||LA241_0==Real_literal||(LA241_0 >= SEMI && LA241_0 <= STRINGLITERAL)||LA241_0==TRUE||LA241_0==USING||LA241_0==Verbatim_string_literal||LA241_0==64||LA241_0==69||(LA241_0 >= 71 && LA241_0 <= 72)||(LA241_0 >= 74 && LA241_0 <= 75)||LA241_0==78||LA241_0==105||LA241_0==107||LA241_0==112||LA241_0==115||(LA241_0 >= 117 && LA241_0 <= 118)||LA241_0==120||LA241_0==130||(LA241_0 >= 132 && LA241_0 <= 133)||LA241_0==136||LA241_0==147||LA241_0==152||LA241_0==170||LA241_0==176||(LA241_0 >= 181 && LA241_0 <= 184)||LA241_0==186||(LA241_0 >= 189 && LA241_0 <= 190)||LA241_0==197||LA241_0==199||LA241_0==204) ) {
                alt241=3;
            }
            else if ( (LA241_0==134) ) {
                int LA241_25 = input.LA(2);

                if ( (synpred33_cs()) ) {
                    alt241=1;
                }
                else if ( (synpred34_cs()) ) {
                    alt241=2;
                }
                else if ( (true) ) {
                    alt241=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 241, 25, input);

                    throw nvae;

                }
            }
            else if ( (LA241_0==IDENTIFIER||LA241_0==98||(LA241_0 >= 100 && LA241_0 <= 101)||(LA241_0 >= 103 && LA241_0 <= 104)||LA241_0==108||LA241_0==119||LA241_0==124||LA241_0==128||LA241_0==137||LA241_0==143||(LA241_0 >= 145 && LA241_0 <= 146)||(LA241_0 >= 149 && LA241_0 <= 150)||LA241_0==154||LA241_0==156||LA241_0==159||LA241_0==162||LA241_0==164||LA241_0==169||(LA241_0 >= 173 && LA241_0 <= 174)||LA241_0==185||LA241_0==196) ) {
                int LA241_45 = input.LA(2);

                if ( (synpred33_cs()) ) {
                    alt241=1;
                }
                else if ( (synpred34_cs()) ) {
                    alt241=2;
                }
                else if ( (true) ) {
                    alt241=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 241, 45, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 241, 0, input);

                throw nvae;

            }
            switch (alt241) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1094:2: ( declaration_statement )=> declaration_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_declaration_statement_in_statement6869);
                    declaration_statement882=declaration_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, declaration_statement882.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1095:4: ( identifier ':' )=> labeled_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_labeled_statement_in_statement6884);
                    labeled_statement883=labeled_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, labeled_statement883.getTree());

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1096:4: embedded_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_embedded_statement_in_statement6889);
                    embedded_statement884=embedded_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement884.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 245, statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class embedded_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "embedded_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1098:1: embedded_statement : ( block | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement | expression_statement );
    public final csParser.embedded_statement_return embedded_statement() throws RecognitionException {
        csParser.embedded_statement_return retval = new csParser.embedded_statement_return();
        retval.start = input.LT(1);

        int embedded_statement_StartIndex = input.index();

        Object root_0 = null;

        csParser.block_return block885 =null;

        csParser.selection_statement_return selection_statement886 =null;

        csParser.iteration_statement_return iteration_statement887 =null;

        csParser.jump_statement_return jump_statement888 =null;

        csParser.try_statement_return try_statement889 =null;

        csParser.checked_statement_return checked_statement890 =null;

        csParser.unchecked_statement_return unchecked_statement891 =null;

        csParser.lock_statement_return lock_statement892 =null;

        csParser.using_statement_return using_statement893 =null;

        csParser.yield_statement_return yield_statement894 =null;

        csParser.unsafe_statement_return unsafe_statement895 =null;

        csParser.fixed_statement_return fixed_statement896 =null;

        csParser.expression_statement_return expression_statement897 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 246) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1098:19: ( block | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement | expression_statement )
            int alt242=13;
            switch ( input.LA(1) ) {
            case SEMI:
            case 199:
                {
                alt242=1;
                }
                break;
            case IF:
            case 181:
                {
                alt242=2;
                }
                break;
            case 120:
            case 132:
            case 133:
            case 197:
                {
                alt242=3;
                }
                break;
            case 107:
            case 115:
            case 136:
            case 170:
            case 183:
                {
                alt242=4;
                }
                break;
            case 184:
                {
                alt242=5;
                }
                break;
            case 112:
                {
                int LA242_6 = input.LA(2);

                if ( (LA242_6==71) ) {
                    alt242=13;
                }
                else if ( (LA242_6==SEMI||LA242_6==199) ) {
                    alt242=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 6, input);

                    throw nvae;

                }
                }
                break;
            case 189:
                {
                int LA242_7 = input.LA(2);

                if ( (LA242_7==71) ) {
                    alt242=13;
                }
                else if ( (LA242_7==SEMI||LA242_7==199) ) {
                    alt242=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 7, input);

                    throw nvae;

                }
                }
                break;
            case 147:
                {
                alt242=8;
                }
                break;
            case USING:
                {
                alt242=9;
                }
                break;
            case 198:
                {
                int LA242_10 = input.LA(2);

                if ( (LA242_10==107||LA242_10==170) ) {
                    alt242=10;
                }
                else if ( (LA242_10==DOT||LA242_10==GT||LA242_10==MINUS||LA242_10==PTR||LA242_10==SEMI||(LA242_10 >= 65 && LA242_10 <= 81)||(LA242_10 >= 83 && LA242_10 <= 94)||(LA242_10 >= 96 && LA242_10 <= 97)||LA242_10==102||LA242_10==144||(LA242_10 >= 200 && LA242_10 <= 202)) ) {
                    alt242=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 10, input);

                    throw nvae;

                }
                }
                break;
            case 190:
                {
                alt242=11;
                }
                break;
            case 130:
                {
                alt242=12;
                }
                break;
            case Character_literal:
            case FALSE:
            case Hex_number:
            case IDENTIFIER:
            case MINUS:
            case NULL:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            case 64:
            case 69:
            case 71:
            case 72:
            case 74:
            case 75:
            case 78:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 109:
            case 111:
            case 116:
            case 117:
            case 118:
            case 119:
            case 121:
            case 122:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 152:
            case 153:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 176:
            case 179:
            case 182:
            case 185:
            case 186:
            case 187:
            case 188:
            case 191:
            case 192:
            case 196:
            case 204:
                {
                alt242=13;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 242, 0, input);

                throw nvae;

            }

            switch (alt242) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1099:2: block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_in_embedded_statement6899);
                    block885=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block885.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1100:4: selection_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_selection_statement_in_embedded_statement6904);
                    selection_statement886=selection_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selection_statement886.getTree());

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1101:4: iteration_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_iteration_statement_in_embedded_statement6910);
                    iteration_statement887=iteration_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iteration_statement887.getTree());

                    }
                    break;
                case 4 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1102:4: jump_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_jump_statement_in_embedded_statement6916);
                    jump_statement888=jump_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jump_statement888.getTree());

                    }
                    break;
                case 5 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1103:4: try_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_statement_in_embedded_statement6923);
                    try_statement889=try_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_statement889.getTree());

                    }
                    break;
                case 6 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1104:4: checked_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_checked_statement_in_embedded_statement6928);
                    checked_statement890=checked_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, checked_statement890.getTree());

                    }
                    break;
                case 7 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1105:4: unchecked_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_unchecked_statement_in_embedded_statement6933);
                    unchecked_statement891=unchecked_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unchecked_statement891.getTree());

                    }
                    break;
                case 8 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1106:4: lock_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_lock_statement_in_embedded_statement6938);
                    lock_statement892=lock_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_statement892.getTree());

                    }
                    break;
                case 9 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1107:4: using_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_using_statement_in_embedded_statement6943);
                    using_statement893=using_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, using_statement893.getTree());

                    }
                    break;
                case 10 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1108:4: yield_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_yield_statement_in_embedded_statement6949);
                    yield_statement894=yield_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, yield_statement894.getTree());

                    }
                    break;
                case 11 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1109:4: unsafe_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_unsafe_statement_in_embedded_statement6955);
                    unsafe_statement895=unsafe_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unsafe_statement895.getTree());

                    }
                    break;
                case 12 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1110:4: fixed_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_fixed_statement_in_embedded_statement6960);
                    fixed_statement896=fixed_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_statement896.getTree());

                    }
                    break;
                case 13 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1111:4: expression_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expression_statement_in_embedded_statement6965);
                    expression_statement897=expression_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_statement897.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 246, embedded_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "embedded_statement"


    public static class fixed_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fixed_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1113:1: fixed_statement : 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement ;
    public final csParser.fixed_statement_return fixed_statement() throws RecognitionException {
        csParser.fixed_statement_return retval = new csParser.fixed_statement_return();
        retval.start = input.LT(1);

        int fixed_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal898=null;
        Token char_literal899=null;
        Token char_literal902=null;
        csParser.pointer_type_return pointer_type900 =null;

        csParser.fixed_pointer_declarators_return fixed_pointer_declarators901 =null;

        csParser.embedded_statement_return embedded_statement903 =null;


        Object string_literal898_tree=null;
        Object char_literal899_tree=null;
        Object char_literal902_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 247) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1113:16: ( 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1114:2: 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement
            {
            root_0 = (Object)adaptor.nil();


            string_literal898=(Token)match(input,130,FOLLOW_130_in_fixed_statement6975); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal898_tree = 
            (Object)adaptor.create(string_literal898)
            ;
            adaptor.addChild(root_0, string_literal898_tree);
            }

            char_literal899=(Token)match(input,71,FOLLOW_71_in_fixed_statement6979); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal899_tree = 
            (Object)adaptor.create(char_literal899)
            ;
            adaptor.addChild(root_0, char_literal899_tree);
            }

            pushFollow(FOLLOW_pointer_type_in_fixed_statement6983);
            pointer_type900=pointer_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pointer_type900.getTree());

            pushFollow(FOLLOW_fixed_pointer_declarators_in_fixed_statement6985);
            fixed_pointer_declarators901=fixed_pointer_declarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_pointer_declarators901.getTree());

            char_literal902=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_fixed_statement6989); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal902_tree = 
            (Object)adaptor.create(char_literal902)
            ;
            adaptor.addChild(root_0, char_literal902_tree);
            }

            pushFollow(FOLLOW_embedded_statement_in_fixed_statement6993);
            embedded_statement903=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement903.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 247, fixed_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fixed_statement"


    public static class fixed_pointer_declarators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fixed_pointer_declarators"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1115:1: fixed_pointer_declarators : fixed_pointer_declarator ( ',' fixed_pointer_declarator )* ;
    public final csParser.fixed_pointer_declarators_return fixed_pointer_declarators() throws RecognitionException {
        csParser.fixed_pointer_declarators_return retval = new csParser.fixed_pointer_declarators_return();
        retval.start = input.LT(1);

        int fixed_pointer_declarators_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal905=null;
        csParser.fixed_pointer_declarator_return fixed_pointer_declarator904 =null;

        csParser.fixed_pointer_declarator_return fixed_pointer_declarator906 =null;


        Object char_literal905_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 248) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1115:26: ( fixed_pointer_declarator ( ',' fixed_pointer_declarator )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1116:2: fixed_pointer_declarator ( ',' fixed_pointer_declarator )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators7001);
            fixed_pointer_declarator904=fixed_pointer_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_pointer_declarator904.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:1116:29: ( ',' fixed_pointer_declarator )*
            loop243:
            do {
                int alt243=2;
                int LA243_0 = input.LA(1);

                if ( (LA243_0==77) ) {
                    alt243=1;
                }


                switch (alt243) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1116:30: ',' fixed_pointer_declarator
            	    {
            	    char_literal905=(Token)match(input,77,FOLLOW_77_in_fixed_pointer_declarators7006); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal905_tree = 
            	    (Object)adaptor.create(char_literal905)
            	    ;
            	    adaptor.addChild(root_0, char_literal905_tree);
            	    }

            	    pushFollow(FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators7010);
            	    fixed_pointer_declarator906=fixed_pointer_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_pointer_declarator906.getTree());

            	    }
            	    break;

            	default :
            	    break loop243;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 248, fixed_pointer_declarators_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fixed_pointer_declarators"


    public static class fixed_pointer_declarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fixed_pointer_declarator"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1117:1: fixed_pointer_declarator : identifier '=' fixed_pointer_initializer ;
    public final csParser.fixed_pointer_declarator_return fixed_pointer_declarator() throws RecognitionException {
        csParser.fixed_pointer_declarator_return retval = new csParser.fixed_pointer_declarator_return();
        retval.start = input.LT(1);

        int fixed_pointer_declarator_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal908=null;
        csParser.identifier_return identifier907 =null;

        csParser.fixed_pointer_initializer_return fixed_pointer_initializer909 =null;


        Object char_literal908_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 249) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1117:25: ( identifier '=' fixed_pointer_initializer )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1118:2: identifier '=' fixed_pointer_initializer
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_fixed_pointer_declarator7020);
            identifier907=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier907.getTree());

            char_literal908=(Token)match(input,88,FOLLOW_88_in_fixed_pointer_declarator7024); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal908_tree = 
            (Object)adaptor.create(char_literal908)
            ;
            adaptor.addChild(root_0, char_literal908_tree);
            }

            pushFollow(FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator7028);
            fixed_pointer_initializer909=fixed_pointer_initializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_pointer_initializer909.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 249, fixed_pointer_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fixed_pointer_declarator"


    public static class fixed_pointer_initializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fixed_pointer_initializer"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1119:1: fixed_pointer_initializer : expression ;
    public final csParser.fixed_pointer_initializer_return fixed_pointer_initializer() throws RecognitionException {
        csParser.fixed_pointer_initializer_return retval = new csParser.fixed_pointer_initializer_return();
        retval.start = input.LT(1);

        int fixed_pointer_initializer_StartIndex = input.index();

        Object root_0 = null;

        csParser.expression_return expression910 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 250) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1119:26: ( expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1121:2: expression
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expression_in_fixed_pointer_initializer7038);
            expression910=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression910.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 250, fixed_pointer_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fixed_pointer_initializer"


    public static class unsafe_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unsafe_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1122:1: unsafe_statement : 'unsafe' block ;
    public final csParser.unsafe_statement_return unsafe_statement() throws RecognitionException {
        csParser.unsafe_statement_return retval = new csParser.unsafe_statement_return();
        retval.start = input.LT(1);

        int unsafe_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal911=null;
        csParser.block_return block912 =null;


        Object string_literal911_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 251) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1122:17: ( 'unsafe' block )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1123:2: 'unsafe' block
            {
            root_0 = (Object)adaptor.nil();


            string_literal911=(Token)match(input,190,FOLLOW_190_in_unsafe_statement7045); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal911_tree = 
            (Object)adaptor.create(string_literal911)
            ;
            adaptor.addChild(root_0, string_literal911_tree);
            }

            pushFollow(FOLLOW_block_in_unsafe_statement7049);
            block912=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block912.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 251, unsafe_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unsafe_statement"


    public static class labeled_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "labeled_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1124:1: labeled_statement : identifier ':' statement ;
    public final csParser.labeled_statement_return labeled_statement() throws RecognitionException {
        csParser.labeled_statement_return retval = new csParser.labeled_statement_return();
        retval.start = input.LT(1);

        int labeled_statement_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal914=null;
        csParser.identifier_return identifier913 =null;

        csParser.statement_return statement915 =null;


        Object char_literal914_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 252) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1124:18: ( identifier ':' statement )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1125:2: identifier ':' statement
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_labeled_statement7056);
            identifier913=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier913.getTree());

            char_literal914=(Token)match(input,82,FOLLOW_82_in_labeled_statement7060); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal914_tree = 
            (Object)adaptor.create(char_literal914)
            ;
            adaptor.addChild(root_0, char_literal914_tree);
            }

            pushFollow(FOLLOW_statement_in_labeled_statement7064);
            statement915=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement915.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 252, labeled_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "labeled_statement"


    public static class declaration_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "declaration_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1127:1: declaration_statement : ( local_variable_declaration | local_constant_declaration ) ';' ;
    public final csParser.declaration_statement_return declaration_statement() throws RecognitionException {
        csParser.declaration_statement_return retval = new csParser.declaration_statement_return();
        retval.start = input.LT(1);

        int declaration_statement_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal918=null;
        csParser.local_variable_declaration_return local_variable_declaration916 =null;

        csParser.local_constant_declaration_return local_constant_declaration917 =null;


        Object char_literal918_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 253) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1128:2: ( ( local_variable_declaration | local_constant_declaration ) ';' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1128:4: ( local_variable_declaration | local_constant_declaration ) ';'
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:1128:4: ( local_variable_declaration | local_constant_declaration )
            int alt244=2;
            int LA244_0 = input.LA(1);

            if ( (LA244_0==IDENTIFIER||LA244_0==98||(LA244_0 >= 100 && LA244_0 <= 101)||(LA244_0 >= 103 && LA244_0 <= 104)||LA244_0==106||(LA244_0 >= 108 && LA244_0 <= 109)||LA244_0==111||LA244_0==116||LA244_0==119||(LA244_0 >= 121 && LA244_0 <= 122)||LA244_0==124||LA244_0==128||LA244_0==131||LA244_0==134||LA244_0==137||LA244_0==140||LA244_0==143||(LA244_0 >= 145 && LA244_0 <= 146)||(LA244_0 >= 148 && LA244_0 <= 150)||(LA244_0 >= 153 && LA244_0 <= 154)||LA244_0==156||LA244_0==159||LA244_0==162||LA244_0==164||LA244_0==169||LA244_0==171||(LA244_0 >= 173 && LA244_0 <= 175)||LA244_0==179||LA244_0==185||(LA244_0 >= 187 && LA244_0 <= 188)||(LA244_0 >= 191 && LA244_0 <= 192)||LA244_0==194||LA244_0==196||LA244_0==198) ) {
                alt244=1;
            }
            else if ( (LA244_0==114) ) {
                alt244=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 244, 0, input);

                throw nvae;

            }
            switch (alt244) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1129:4: local_variable_declaration
                    {
                    pushFollow(FOLLOW_local_variable_declaration_in_declaration_statement7079);
                    local_variable_declaration916=local_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_declaration916.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1130:5: local_constant_declaration
                    {
                    pushFollow(FOLLOW_local_constant_declaration_in_declaration_statement7086);
                    local_constant_declaration917=local_constant_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, local_constant_declaration917.getTree());

                    }
                    break;

            }


            char_literal918=(Token)match(input,SEMI,FOLLOW_SEMI_in_declaration_statement7092); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal918_tree = 
            (Object)adaptor.create(char_literal918)
            ;
            adaptor.addChild(root_0, char_literal918_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 253, declaration_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "declaration_statement"


    public static class local_variable_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "local_variable_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1134:1: local_variable_declaration : local_variable_type local_variable_declarators -> ^( VARIABLE_DECL local_variable_type local_variable_declarators ) ;
    public final csParser.local_variable_declaration_return local_variable_declaration() throws RecognitionException {
        csParser.local_variable_declaration_return retval = new csParser.local_variable_declaration_return();
        retval.start = input.LT(1);

        int local_variable_declaration_StartIndex = input.index();

        Object root_0 = null;

        csParser.local_variable_type_return local_variable_type919 =null;

        csParser.local_variable_declarators_return local_variable_declarators920 =null;


        RewriteRuleSubtreeStream stream_local_variable_type=new RewriteRuleSubtreeStream(adaptor,"rule local_variable_type");
        RewriteRuleSubtreeStream stream_local_variable_declarators=new RewriteRuleSubtreeStream(adaptor,"rule local_variable_declarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 254) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1135:2: ( local_variable_type local_variable_declarators -> ^( VARIABLE_DECL local_variable_type local_variable_declarators ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1135:4: local_variable_type local_variable_declarators
            {
            pushFollow(FOLLOW_local_variable_type_in_local_variable_declaration7104);
            local_variable_type919=local_variable_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_local_variable_type.add(local_variable_type919.getTree());

            pushFollow(FOLLOW_local_variable_declarators_in_local_variable_declaration7108);
            local_variable_declarators920=local_variable_declarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_local_variable_declarators.add(local_variable_declarators920.getTree());

            // AST REWRITE
            // elements: local_variable_type, local_variable_declarators
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1135:53: -> ^( VARIABLE_DECL local_variable_type local_variable_declarators )
            {
                // CodeR.CSharp.Parser/src/antlr/cs.g:1135:56: ^( VARIABLE_DECL local_variable_type local_variable_declarators )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_DECL, "VARIABLE_DECL")
                , root_1);

                adaptor.addChild(root_1, stream_local_variable_type.nextTree());

                adaptor.addChild(root_1, stream_local_variable_declarators.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 254, local_variable_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "local_variable_declaration"


    public static class local_variable_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "local_variable_type"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1138:1: local_variable_type : ( ( 'var' )=> 'var' | ( 'dynamic' )=> 'dynamic' | type );
    public final csParser.local_variable_type_return local_variable_type() throws RecognitionException {
        csParser.local_variable_type_return retval = new csParser.local_variable_type_return();
        retval.start = input.LT(1);

        int local_variable_type_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal921=null;
        Token string_literal922=null;
        csParser.type_return type923 =null;


        Object string_literal921_tree=null;
        Object string_literal922_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 255) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1138:20: ( ( 'var' )=> 'var' | ( 'dynamic' )=> 'dynamic' | type )
            int alt245=3;
            switch ( input.LA(1) ) {
            case 192:
                {
                int LA245_1 = input.LA(2);

                if ( (synpred35_cs()) ) {
                    alt245=1;
                }
                else if ( (true) ) {
                    alt245=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 245, 1, input);

                    throw nvae;

                }
                }
                break;
            case 122:
                {
                int LA245_2 = input.LA(2);

                if ( (synpred36_cs()) ) {
                    alt245=2;
                }
                else if ( (true) ) {
                    alt245=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 245, 2, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 106:
            case 108:
            case 109:
            case 111:
            case 116:
            case 119:
            case 121:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 153:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 179:
            case 185:
            case 187:
            case 188:
            case 191:
            case 194:
            case 196:
            case 198:
                {
                alt245=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 245, 0, input);

                throw nvae;

            }

            switch (alt245) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1139:2: ( 'var' )=> 'var'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal921=(Token)match(input,192,FOLLOW_192_in_local_variable_type7136); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal921_tree = 
                    (Object)adaptor.create(string_literal921)
                    ;
                    adaptor.addChild(root_0, string_literal921_tree);
                    }

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1140:4: ( 'dynamic' )=> 'dynamic'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal922=(Token)match(input,122,FOLLOW_122_in_local_variable_type7147); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal922_tree = 
                    (Object)adaptor.create(string_literal922)
                    ;
                    adaptor.addChild(root_0, string_literal922_tree);
                    }

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1141:4: type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_in_local_variable_type7152);
                    type923=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type923.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 255, local_variable_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "local_variable_type"


    public static class local_variable_declarators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "local_variable_declarators"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1143:1: local_variable_declarators : local_variable_declarator ( ',' local_variable_declarator )* -> ( local_variable_declarator )+ ;
    public final csParser.local_variable_declarators_return local_variable_declarators() throws RecognitionException {
        csParser.local_variable_declarators_return retval = new csParser.local_variable_declarators_return();
        retval.start = input.LT(1);

        int local_variable_declarators_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal925=null;
        csParser.local_variable_declarator_return local_variable_declarator924 =null;

        csParser.local_variable_declarator_return local_variable_declarator926 =null;


        Object char_literal925_tree=null;
        RewriteRuleTokenStream stream_77=new RewriteRuleTokenStream(adaptor,"token 77");
        RewriteRuleSubtreeStream stream_local_variable_declarator=new RewriteRuleSubtreeStream(adaptor,"rule local_variable_declarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 256) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1144:2: ( local_variable_declarator ( ',' local_variable_declarator )* -> ( local_variable_declarator )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1144:4: local_variable_declarator ( ',' local_variable_declarator )*
            {
            pushFollow(FOLLOW_local_variable_declarator_in_local_variable_declarators7162);
            local_variable_declarator924=local_variable_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_local_variable_declarator.add(local_variable_declarator924.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:1144:30: ( ',' local_variable_declarator )*
            loop246:
            do {
                int alt246=2;
                int LA246_0 = input.LA(1);

                if ( (LA246_0==77) ) {
                    alt246=1;
                }


                switch (alt246) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1144:31: ',' local_variable_declarator
            	    {
            	    char_literal925=(Token)match(input,77,FOLLOW_77_in_local_variable_declarators7165); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_77.add(char_literal925);


            	    pushFollow(FOLLOW_local_variable_declarator_in_local_variable_declarators7167);
            	    local_variable_declarator926=local_variable_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_local_variable_declarator.add(local_variable_declarator926.getTree());

            	    }
            	    break;

            	default :
            	    break loop246;
                }
            } while (true);


            // AST REWRITE
            // elements: local_variable_declarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1144:63: -> ( local_variable_declarator )+
            {
                if ( !(stream_local_variable_declarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_local_variable_declarator.hasNext() ) {
                    adaptor.addChild(root_0, stream_local_variable_declarator.nextTree());

                }
                stream_local_variable_declarator.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 256, local_variable_declarators_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "local_variable_declarators"


    public static class local_variable_declarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "local_variable_declarator"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1147:1: local_variable_declarator : identifier ( '=' ^ local_variable_initializer )? ;
    public final csParser.local_variable_declarator_return local_variable_declarator() throws RecognitionException {
        csParser.local_variable_declarator_return retval = new csParser.local_variable_declarator_return();
        retval.start = input.LT(1);

        int local_variable_declarator_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal928=null;
        csParser.identifier_return identifier927 =null;

        csParser.local_variable_initializer_return local_variable_initializer929 =null;


        Object char_literal928_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 257) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1148:2: ( identifier ( '=' ^ local_variable_initializer )? )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1148:4: identifier ( '=' ^ local_variable_initializer )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_local_variable_declarator7186);
            identifier927=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier927.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:1148:15: ( '=' ^ local_variable_initializer )?
            int alt247=2;
            int LA247_0 = input.LA(1);

            if ( (LA247_0==88) ) {
                alt247=1;
            }
            switch (alt247) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1148:16: '=' ^ local_variable_initializer
                    {
                    char_literal928=(Token)match(input,88,FOLLOW_88_in_local_variable_declarator7189); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal928_tree = 
                    (Object)adaptor.create(char_literal928)
                    ;
                    root_0 = (Object)adaptor.becomeRoot(char_literal928_tree, root_0);
                    }

                    pushFollow(FOLLOW_local_variable_initializer_in_local_variable_declarator7192);
                    local_variable_initializer929=local_variable_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_initializer929.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 257, local_variable_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "local_variable_declarator"


    public static class local_variable_initializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "local_variable_initializer"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1151:1: local_variable_initializer : ( expression | array_initializer | stackalloc_initializer );
    public final csParser.local_variable_initializer_return local_variable_initializer() throws RecognitionException {
        csParser.local_variable_initializer_return retval = new csParser.local_variable_initializer_return();
        retval.start = input.LT(1);

        int local_variable_initializer_StartIndex = input.index();

        Object root_0 = null;

        csParser.expression_return expression930 =null;

        csParser.array_initializer_return array_initializer931 =null;

        csParser.stackalloc_initializer_return stackalloc_initializer932 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 258) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1152:2: ( expression | array_initializer | stackalloc_initializer )
            int alt248=3;
            switch ( input.LA(1) ) {
            case Character_literal:
            case FALSE:
            case Hex_number:
            case IDENTIFIER:
            case MINUS:
            case NULL:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            case 64:
            case 69:
            case 71:
            case 72:
            case 74:
            case 75:
            case 78:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 109:
            case 111:
            case 112:
            case 116:
            case 117:
            case 118:
            case 119:
            case 121:
            case 122:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 152:
            case 153:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 176:
            case 179:
            case 182:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 191:
            case 192:
            case 196:
            case 198:
            case 204:
                {
                alt248=1;
                }
                break;
            case 199:
                {
                alt248=2;
                }
                break;
            case 177:
                {
                alt248=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 248, 0, input);

                throw nvae;

            }

            switch (alt248) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1152:4: expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expression_in_local_variable_initializer7206);
                    expression930=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression930.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1153:4: array_initializer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_array_initializer_in_local_variable_initializer7211);
                    array_initializer931=array_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, array_initializer931.getTree());

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1154:4: stackalloc_initializer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_stackalloc_initializer_in_local_variable_initializer7217);
                    stackalloc_initializer932=stackalloc_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stackalloc_initializer932.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 258, local_variable_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "local_variable_initializer"


    public static class stackalloc_initializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stackalloc_initializer"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1157:1: stackalloc_initializer : 'stackalloc' unmanaged_type '[' expression ']' ;
    public final csParser.stackalloc_initializer_return stackalloc_initializer() throws RecognitionException {
        csParser.stackalloc_initializer_return retval = new csParser.stackalloc_initializer_return();
        retval.start = input.LT(1);

        int stackalloc_initializer_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal933=null;
        Token char_literal935=null;
        Token char_literal937=null;
        csParser.unmanaged_type_return unmanaged_type934 =null;

        csParser.expression_return expression936 =null;


        Object string_literal933_tree=null;
        Object char_literal935_tree=null;
        Object char_literal937_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 259) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1157:23: ( 'stackalloc' unmanaged_type '[' expression ']' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1158:2: 'stackalloc' unmanaged_type '[' expression ']'
            {
            root_0 = (Object)adaptor.nil();


            string_literal933=(Token)match(input,177,FOLLOW_177_in_stackalloc_initializer7227); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal933_tree = 
            (Object)adaptor.create(string_literal933)
            ;
            adaptor.addChild(root_0, string_literal933_tree);
            }

            pushFollow(FOLLOW_unmanaged_type_in_stackalloc_initializer7231);
            unmanaged_type934=unmanaged_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unmanaged_type934.getTree());

            char_literal935=(Token)match(input,94,FOLLOW_94_in_stackalloc_initializer7235); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal935_tree = 
            (Object)adaptor.create(char_literal935)
            ;
            adaptor.addChild(root_0, char_literal935_tree);
            }

            pushFollow(FOLLOW_expression_in_stackalloc_initializer7239);
            expression936=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression936.getTree());

            char_literal937=(Token)match(input,95,FOLLOW_95_in_stackalloc_initializer7243); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal937_tree = 
            (Object)adaptor.create(char_literal937)
            ;
            adaptor.addChild(root_0, char_literal937_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 259, stackalloc_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stackalloc_initializer"


    public static class local_constant_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "local_constant_declaration"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1159:1: local_constant_declaration : 'const' type constant_declarators ;
    public final csParser.local_constant_declaration_return local_constant_declaration() throws RecognitionException {
        csParser.local_constant_declaration_return retval = new csParser.local_constant_declaration_return();
        retval.start = input.LT(1);

        int local_constant_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal938=null;
        csParser.type_return type939 =null;

        csParser.constant_declarators_return constant_declarators940 =null;


        Object string_literal938_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 260) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1159:27: ( 'const' type constant_declarators )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1160:2: 'const' type constant_declarators
            {
            root_0 = (Object)adaptor.nil();


            string_literal938=(Token)match(input,114,FOLLOW_114_in_local_constant_declaration7251); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal938_tree = 
            (Object)adaptor.create(string_literal938)
            ;
            adaptor.addChild(root_0, string_literal938_tree);
            }

            pushFollow(FOLLOW_type_in_local_constant_declaration7255);
            type939=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type939.getTree());

            pushFollow(FOLLOW_constant_declarators_in_local_constant_declaration7259);
            constant_declarators940=constant_declarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_declarators940.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 260, local_constant_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "local_constant_declaration"


    public static class expression_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1161:1: expression_statement : expression ';' ;
    public final csParser.expression_statement_return expression_statement() throws RecognitionException {
        csParser.expression_statement_return retval = new csParser.expression_statement_return();
        retval.start = input.LT(1);

        int expression_statement_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal942=null;
        csParser.expression_return expression941 =null;


        Object char_literal942_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 261) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1161:21: ( expression ';' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1162:2: expression ';'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expression_in_expression_statement7267);
            expression941=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression941.getTree());

            char_literal942=(Token)match(input,SEMI,FOLLOW_SEMI_in_expression_statement7271); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal942_tree = 
            (Object)adaptor.create(char_literal942)
            ;
            adaptor.addChild(root_0, char_literal942_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 261, expression_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expression_statement"


    public static class statement_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement_expression"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1165:1: statement_expression : expression ;
    public final csParser.statement_expression_return statement_expression() throws RecognitionException {
        csParser.statement_expression_return retval = new csParser.statement_expression_return();
        retval.start = input.LT(1);

        int statement_expression_StartIndex = input.index();

        Object root_0 = null;

        csParser.expression_return expression943 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 262) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1165:21: ( expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1166:2: expression
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expression_in_statement_expression7281);
            expression943=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression943.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 262, statement_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "statement_expression"


    public static class selection_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selection_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1168:1: selection_statement : ( if_statement | switch_statement );
    public final csParser.selection_statement_return selection_statement() throws RecognitionException {
        csParser.selection_statement_return retval = new csParser.selection_statement_return();
        retval.start = input.LT(1);

        int selection_statement_StartIndex = input.index();

        Object root_0 = null;

        csParser.if_statement_return if_statement944 =null;

        csParser.switch_statement_return switch_statement945 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 263) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1168:20: ( if_statement | switch_statement )
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==IF) ) {
                alt249=1;
            }
            else if ( (LA249_0==181) ) {
                alt249=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 249, 0, input);

                throw nvae;

            }
            switch (alt249) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1169:2: if_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_statement_in_selection_statement7290);
                    if_statement944=if_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_statement944.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1170:4: switch_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_statement_in_selection_statement7295);
                    switch_statement945=switch_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_statement945.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 263, selection_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "selection_statement"


    public static class if_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1171:1: if_statement : 'if' '(' boolean_expression ')' embedded_statement ( ( 'else' )=> else_statement )? ;
    public final csParser.if_statement_return if_statement() throws RecognitionException {
        csParser.if_statement_return retval = new csParser.if_statement_return();
        retval.start = input.LT(1);

        int if_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal946=null;
        Token char_literal947=null;
        Token char_literal949=null;
        csParser.boolean_expression_return boolean_expression948 =null;

        csParser.embedded_statement_return embedded_statement950 =null;

        csParser.else_statement_return else_statement951 =null;


        Object string_literal946_tree=null;
        Object char_literal947_tree=null;
        Object char_literal949_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 264) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1171:13: ( 'if' '(' boolean_expression ')' embedded_statement ( ( 'else' )=> else_statement )? )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1173:2: 'if' '(' boolean_expression ')' embedded_statement ( ( 'else' )=> else_statement )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal946=(Token)match(input,IF,FOLLOW_IF_in_if_statement7305); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal946_tree = 
            (Object)adaptor.create(string_literal946)
            ;
            adaptor.addChild(root_0, string_literal946_tree);
            }

            char_literal947=(Token)match(input,71,FOLLOW_71_in_if_statement7309); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal947_tree = 
            (Object)adaptor.create(char_literal947)
            ;
            adaptor.addChild(root_0, char_literal947_tree);
            }

            pushFollow(FOLLOW_boolean_expression_in_if_statement7313);
            boolean_expression948=boolean_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, boolean_expression948.getTree());

            char_literal949=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_if_statement7317); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal949_tree = 
            (Object)adaptor.create(char_literal949)
            ;
            adaptor.addChild(root_0, char_literal949_tree);
            }

            pushFollow(FOLLOW_embedded_statement_in_if_statement7321);
            embedded_statement950=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement950.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:1173:61: ( ( 'else' )=> else_statement )?
            int alt250=2;
            int LA250_0 = input.LA(1);

            if ( (LA250_0==123) ) {
                int LA250_1 = input.LA(2);

                if ( (synpred37_cs()) ) {
                    alt250=1;
                }
            }
            switch (alt250) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1173:62: ( 'else' )=> else_statement
                    {
                    pushFollow(FOLLOW_else_statement_in_if_statement7330);
                    else_statement951=else_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_statement951.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 264, if_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "if_statement"


    public static class else_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1175:1: else_statement : 'else' embedded_statement ;
    public final csParser.else_statement_return else_statement() throws RecognitionException {
        csParser.else_statement_return retval = new csParser.else_statement_return();
        retval.start = input.LT(1);

        int else_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal952=null;
        csParser.embedded_statement_return embedded_statement953 =null;


        Object string_literal952_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 265) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1175:15: ( 'else' embedded_statement )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1176:2: 'else' embedded_statement
            {
            root_0 = (Object)adaptor.nil();


            string_literal952=(Token)match(input,123,FOLLOW_123_in_else_statement7341); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal952_tree = 
            (Object)adaptor.create(string_literal952)
            ;
            adaptor.addChild(root_0, string_literal952_tree);
            }

            pushFollow(FOLLOW_embedded_statement_in_else_statement7345);
            embedded_statement953=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement953.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 265, else_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "else_statement"


    public static class switch_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1177:1: switch_statement : 'switch' '(' expression ')' switch_block ;
    public final csParser.switch_statement_return switch_statement() throws RecognitionException {
        csParser.switch_statement_return retval = new csParser.switch_statement_return();
        retval.start = input.LT(1);

        int switch_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal954=null;
        Token char_literal955=null;
        Token char_literal957=null;
        csParser.expression_return expression956 =null;

        csParser.switch_block_return switch_block958 =null;


        Object string_literal954_tree=null;
        Object char_literal955_tree=null;
        Object char_literal957_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 266) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1177:17: ( 'switch' '(' expression ')' switch_block )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1178:2: 'switch' '(' expression ')' switch_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal954=(Token)match(input,181,FOLLOW_181_in_switch_statement7353); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal954_tree = 
            (Object)adaptor.create(string_literal954)
            ;
            adaptor.addChild(root_0, string_literal954_tree);
            }

            char_literal955=(Token)match(input,71,FOLLOW_71_in_switch_statement7357); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal955_tree = 
            (Object)adaptor.create(char_literal955)
            ;
            adaptor.addChild(root_0, char_literal955_tree);
            }

            pushFollow(FOLLOW_expression_in_switch_statement7361);
            expression956=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression956.getTree());

            char_literal957=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_switch_statement7365); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal957_tree = 
            (Object)adaptor.create(char_literal957)
            ;
            adaptor.addChild(root_0, char_literal957_tree);
            }

            pushFollow(FOLLOW_switch_block_in_switch_statement7369);
            switch_block958=switch_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_block958.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 266, switch_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "switch_statement"


    public static class switch_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_block"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1179:1: switch_block : '{' ( switch_sections )? '}' ;
    public final csParser.switch_block_return switch_block() throws RecognitionException {
        csParser.switch_block_return retval = new csParser.switch_block_return();
        retval.start = input.LT(1);

        int switch_block_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal959=null;
        Token char_literal961=null;
        csParser.switch_sections_return switch_sections960 =null;


        Object char_literal959_tree=null;
        Object char_literal961_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 267) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1179:13: ( '{' ( switch_sections )? '}' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1180:2: '{' ( switch_sections )? '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal959=(Token)match(input,199,FOLLOW_199_in_switch_block7377); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal959_tree = 
            (Object)adaptor.create(char_literal959)
            ;
            adaptor.addChild(root_0, char_literal959_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1180:8: ( switch_sections )?
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( (LA251_0==110||LA251_0==117) ) {
                alt251=1;
            }
            switch (alt251) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1180:8: switch_sections
                    {
                    pushFollow(FOLLOW_switch_sections_in_switch_block7381);
                    switch_sections960=switch_sections();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_sections960.getTree());

                    }
                    break;

            }


            char_literal961=(Token)match(input,203,FOLLOW_203_in_switch_block7386); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal961_tree = 
            (Object)adaptor.create(char_literal961)
            ;
            adaptor.addChild(root_0, char_literal961_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 267, switch_block_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "switch_block"


    public static class switch_sections_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_sections"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1181:1: switch_sections : ( switch_section )+ ;
    public final csParser.switch_sections_return switch_sections() throws RecognitionException {
        csParser.switch_sections_return retval = new csParser.switch_sections_return();
        retval.start = input.LT(1);

        int switch_sections_StartIndex = input.index();

        Object root_0 = null;

        csParser.switch_section_return switch_section962 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 268) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1181:16: ( ( switch_section )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1182:2: ( switch_section )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:1182:2: ( switch_section )+
            int cnt252=0;
            loop252:
            do {
                int alt252=2;
                int LA252_0 = input.LA(1);

                if ( (LA252_0==110||LA252_0==117) ) {
                    alt252=1;
                }


                switch (alt252) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1182:2: switch_section
            	    {
            	    pushFollow(FOLLOW_switch_section_in_switch_sections7394);
            	    switch_section962=switch_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_section962.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt252 >= 1 ) break loop252;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(252, input);
                        throw eee;
                }
                cnt252++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 268, switch_sections_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "switch_sections"


    public static class switch_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_section"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1183:1: switch_section : switch_labels statement_list ;
    public final csParser.switch_section_return switch_section() throws RecognitionException {
        csParser.switch_section_return retval = new csParser.switch_section_return();
        retval.start = input.LT(1);

        int switch_section_StartIndex = input.index();

        Object root_0 = null;

        csParser.switch_labels_return switch_labels963 =null;

        csParser.statement_list_return statement_list964 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 269) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1183:15: ( switch_labels statement_list )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1184:2: switch_labels statement_list
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_switch_labels_in_switch_section7403);
            switch_labels963=switch_labels();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_labels963.getTree());

            pushFollow(FOLLOW_statement_list_in_switch_section7407);
            statement_list964=statement_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_list964.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 269, switch_section_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "switch_section"


    public static class switch_labels_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_labels"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1185:1: switch_labels : ( switch_label )+ ;
    public final csParser.switch_labels_return switch_labels() throws RecognitionException {
        csParser.switch_labels_return retval = new csParser.switch_labels_return();
        retval.start = input.LT(1);

        int switch_labels_StartIndex = input.index();

        Object root_0 = null;

        csParser.switch_label_return switch_label965 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 270) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1185:14: ( ( switch_label )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1186:2: ( switch_label )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:1186:2: ( switch_label )+
            int cnt253=0;
            loop253:
            do {
                int alt253=2;
                int LA253_0 = input.LA(1);

                if ( (LA253_0==117) ) {
                    int LA253_2 = input.LA(2);

                    if ( (LA253_2==82) ) {
                        alt253=1;
                    }


                }
                else if ( (LA253_0==110) ) {
                    alt253=1;
                }


                switch (alt253) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1186:2: switch_label
            	    {
            	    pushFollow(FOLLOW_switch_label_in_switch_labels7415);
            	    switch_label965=switch_label();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_label965.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt253 >= 1 ) break loop253;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(253, input);
                        throw eee;
                }
                cnt253++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 270, switch_labels_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "switch_labels"


    public static class switch_label_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_label"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1187:1: switch_label : ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) );
    public final csParser.switch_label_return switch_label() throws RecognitionException {
        csParser.switch_label_return retval = new csParser.switch_label_return();
        retval.start = input.LT(1);

        int switch_label_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal966=null;
        Token char_literal968=null;
        Token string_literal969=null;
        Token char_literal970=null;
        csParser.constant_expression_return constant_expression967 =null;


        Object string_literal966_tree=null;
        Object char_literal968_tree=null;
        Object string_literal969_tree=null;
        Object char_literal970_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 271) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1187:13: ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) )
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( (LA254_0==110) ) {
                alt254=1;
            }
            else if ( (LA254_0==117) ) {
                alt254=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 254, 0, input);

                throw nvae;

            }
            switch (alt254) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1188:2: ( 'case' constant_expression ':' )
                    {
                    root_0 = (Object)adaptor.nil();


                    // CodeR.CSharp.Parser/src/antlr/cs.g:1188:2: ( 'case' constant_expression ':' )
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1188:3: 'case' constant_expression ':'
                    {
                    string_literal966=(Token)match(input,110,FOLLOW_110_in_switch_label7425); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal966_tree = 
                    (Object)adaptor.create(string_literal966)
                    ;
                    adaptor.addChild(root_0, string_literal966_tree);
                    }

                    pushFollow(FOLLOW_constant_expression_in_switch_label7429);
                    constant_expression967=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_expression967.getTree());

                    char_literal968=(Token)match(input,82,FOLLOW_82_in_switch_label7433); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal968_tree = 
                    (Object)adaptor.create(char_literal968)
                    ;
                    adaptor.addChild(root_0, char_literal968_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1189:4: ( 'default' ':' )
                    {
                    root_0 = (Object)adaptor.nil();


                    // CodeR.CSharp.Parser/src/antlr/cs.g:1189:4: ( 'default' ':' )
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1189:5: 'default' ':'
                    {
                    string_literal969=(Token)match(input,117,FOLLOW_117_in_switch_label7440); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal969_tree = 
                    (Object)adaptor.create(string_literal969)
                    ;
                    adaptor.addChild(root_0, string_literal969_tree);
                    }

                    char_literal970=(Token)match(input,82,FOLLOW_82_in_switch_label7444); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal970_tree = 
                    (Object)adaptor.create(char_literal970)
                    ;
                    adaptor.addChild(root_0, char_literal970_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 271, switch_label_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "switch_label"


    public static class iteration_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "iteration_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1190:1: iteration_statement : ( while_statement | do_statement | for_statement | foreach_statement );
    public final csParser.iteration_statement_return iteration_statement() throws RecognitionException {
        csParser.iteration_statement_return retval = new csParser.iteration_statement_return();
        retval.start = input.LT(1);

        int iteration_statement_StartIndex = input.index();

        Object root_0 = null;

        csParser.while_statement_return while_statement971 =null;

        csParser.do_statement_return do_statement972 =null;

        csParser.for_statement_return for_statement973 =null;

        csParser.foreach_statement_return foreach_statement974 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 272) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1190:20: ( while_statement | do_statement | for_statement | foreach_statement )
            int alt255=4;
            switch ( input.LA(1) ) {
            case 197:
                {
                alt255=1;
                }
                break;
            case 120:
                {
                alt255=2;
                }
                break;
            case 132:
                {
                alt255=3;
                }
                break;
            case 133:
                {
                alt255=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 255, 0, input);

                throw nvae;

            }

            switch (alt255) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1191:2: while_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_statement_in_iteration_statement7453);
                    while_statement971=while_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_statement971.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1192:4: do_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_statement_in_iteration_statement7458);
                    do_statement972=do_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_statement972.getTree());

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1193:4: for_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_statement_in_iteration_statement7463);
                    for_statement973=for_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_statement973.getTree());

                    }
                    break;
                case 4 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1194:4: foreach_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_foreach_statement_in_iteration_statement7468);
                    foreach_statement974=foreach_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_statement974.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 272, iteration_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "iteration_statement"


    public static class while_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1195:1: while_statement : 'while' '(' boolean_expression ')' embedded_statement ;
    public final csParser.while_statement_return while_statement() throws RecognitionException {
        csParser.while_statement_return retval = new csParser.while_statement_return();
        retval.start = input.LT(1);

        int while_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal975=null;
        Token char_literal976=null;
        Token char_literal978=null;
        csParser.boolean_expression_return boolean_expression977 =null;

        csParser.embedded_statement_return embedded_statement979 =null;


        Object string_literal975_tree=null;
        Object char_literal976_tree=null;
        Object char_literal978_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 273) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1195:16: ( 'while' '(' boolean_expression ')' embedded_statement )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1196:2: 'while' '(' boolean_expression ')' embedded_statement
            {
            root_0 = (Object)adaptor.nil();


            string_literal975=(Token)match(input,197,FOLLOW_197_in_while_statement7476); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal975_tree = 
            (Object)adaptor.create(string_literal975)
            ;
            adaptor.addChild(root_0, string_literal975_tree);
            }

            char_literal976=(Token)match(input,71,FOLLOW_71_in_while_statement7480); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal976_tree = 
            (Object)adaptor.create(char_literal976)
            ;
            adaptor.addChild(root_0, char_literal976_tree);
            }

            pushFollow(FOLLOW_boolean_expression_in_while_statement7484);
            boolean_expression977=boolean_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, boolean_expression977.getTree());

            char_literal978=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_while_statement7488); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal978_tree = 
            (Object)adaptor.create(char_literal978)
            ;
            adaptor.addChild(root_0, char_literal978_tree);
            }

            pushFollow(FOLLOW_embedded_statement_in_while_statement7492);
            embedded_statement979=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement979.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 273, while_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "while_statement"


    public static class do_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1197:1: do_statement : 'do' embedded_statement 'while' '(' boolean_expression ')' ';' ;
    public final csParser.do_statement_return do_statement() throws RecognitionException {
        csParser.do_statement_return retval = new csParser.do_statement_return();
        retval.start = input.LT(1);

        int do_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal980=null;
        Token string_literal982=null;
        Token char_literal983=null;
        Token char_literal985=null;
        Token char_literal986=null;
        csParser.embedded_statement_return embedded_statement981 =null;

        csParser.boolean_expression_return boolean_expression984 =null;


        Object string_literal980_tree=null;
        Object string_literal982_tree=null;
        Object char_literal983_tree=null;
        Object char_literal985_tree=null;
        Object char_literal986_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 274) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1197:13: ( 'do' embedded_statement 'while' '(' boolean_expression ')' ';' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1198:2: 'do' embedded_statement 'while' '(' boolean_expression ')' ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal980=(Token)match(input,120,FOLLOW_120_in_do_statement7500); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal980_tree = 
            (Object)adaptor.create(string_literal980)
            ;
            adaptor.addChild(root_0, string_literal980_tree);
            }

            pushFollow(FOLLOW_embedded_statement_in_do_statement7504);
            embedded_statement981=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement981.getTree());

            string_literal982=(Token)match(input,197,FOLLOW_197_in_do_statement7508); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal982_tree = 
            (Object)adaptor.create(string_literal982)
            ;
            adaptor.addChild(root_0, string_literal982_tree);
            }

            char_literal983=(Token)match(input,71,FOLLOW_71_in_do_statement7512); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal983_tree = 
            (Object)adaptor.create(char_literal983)
            ;
            adaptor.addChild(root_0, char_literal983_tree);
            }

            pushFollow(FOLLOW_boolean_expression_in_do_statement7516);
            boolean_expression984=boolean_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, boolean_expression984.getTree());

            char_literal985=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_do_statement7520); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal985_tree = 
            (Object)adaptor.create(char_literal985)
            ;
            adaptor.addChild(root_0, char_literal985_tree);
            }

            char_literal986=(Token)match(input,SEMI,FOLLOW_SEMI_in_do_statement7524); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal986_tree = 
            (Object)adaptor.create(char_literal986)
            ;
            adaptor.addChild(root_0, char_literal986_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 274, do_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "do_statement"


    public static class for_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1199:1: for_statement : 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement ;
    public final csParser.for_statement_return for_statement() throws RecognitionException {
        csParser.for_statement_return retval = new csParser.for_statement_return();
        retval.start = input.LT(1);

        int for_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal987=null;
        Token char_literal988=null;
        Token char_literal990=null;
        Token char_literal992=null;
        Token char_literal994=null;
        csParser.for_initializer_return for_initializer989 =null;

        csParser.for_condition_return for_condition991 =null;

        csParser.for_iterator_return for_iterator993 =null;

        csParser.embedded_statement_return embedded_statement995 =null;


        Object string_literal987_tree=null;
        Object char_literal988_tree=null;
        Object char_literal990_tree=null;
        Object char_literal992_tree=null;
        Object char_literal994_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 275) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1199:14: ( 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1200:2: 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement
            {
            root_0 = (Object)adaptor.nil();


            string_literal987=(Token)match(input,132,FOLLOW_132_in_for_statement7532); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal987_tree = 
            (Object)adaptor.create(string_literal987)
            ;
            adaptor.addChild(root_0, string_literal987_tree);
            }

            char_literal988=(Token)match(input,71,FOLLOW_71_in_for_statement7536); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal988_tree = 
            (Object)adaptor.create(char_literal988)
            ;
            adaptor.addChild(root_0, char_literal988_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1200:16: ( for_initializer )?
            int alt256=2;
            int LA256_0 = input.LA(1);

            if ( (LA256_0==Character_literal||LA256_0==FALSE||(LA256_0 >= Hex_number && LA256_0 <= IDENTIFIER)||(LA256_0 >= MINUS && LA256_0 <= NUMBER)||LA256_0==Real_literal||LA256_0==STRINGLITERAL||LA256_0==TRUE||LA256_0==Verbatim_string_literal||LA256_0==64||LA256_0==69||(LA256_0 >= 71 && LA256_0 <= 72)||(LA256_0 >= 74 && LA256_0 <= 75)||LA256_0==78||LA256_0==98||(LA256_0 >= 100 && LA256_0 <= 101)||(LA256_0 >= 103 && LA256_0 <= 106)||(LA256_0 >= 108 && LA256_0 <= 109)||(LA256_0 >= 111 && LA256_0 <= 112)||(LA256_0 >= 116 && LA256_0 <= 119)||(LA256_0 >= 121 && LA256_0 <= 122)||LA256_0==124||LA256_0==128||LA256_0==131||LA256_0==134||LA256_0==137||LA256_0==140||LA256_0==143||(LA256_0 >= 145 && LA256_0 <= 146)||(LA256_0 >= 148 && LA256_0 <= 150)||(LA256_0 >= 152 && LA256_0 <= 154)||LA256_0==156||LA256_0==159||LA256_0==162||LA256_0==164||LA256_0==169||LA256_0==171||(LA256_0 >= 173 && LA256_0 <= 176)||LA256_0==179||LA256_0==182||(LA256_0 >= 185 && LA256_0 <= 189)||(LA256_0 >= 191 && LA256_0 <= 192)||LA256_0==194||LA256_0==196||LA256_0==198||LA256_0==204) ) {
                alt256=1;
            }
            switch (alt256) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1200:16: for_initializer
                    {
                    pushFollow(FOLLOW_for_initializer_in_for_statement7540);
                    for_initializer989=for_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_initializer989.getTree());

                    }
                    break;

            }


            char_literal990=(Token)match(input,SEMI,FOLLOW_SEMI_in_for_statement7545); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal990_tree = 
            (Object)adaptor.create(char_literal990)
            ;
            adaptor.addChild(root_0, char_literal990_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1200:41: ( for_condition )?
            int alt257=2;
            int LA257_0 = input.LA(1);

            if ( (LA257_0==Character_literal||LA257_0==FALSE||(LA257_0 >= Hex_number && LA257_0 <= IDENTIFIER)||(LA257_0 >= MINUS && LA257_0 <= NUMBER)||LA257_0==Real_literal||LA257_0==STRINGLITERAL||LA257_0==TRUE||LA257_0==Verbatim_string_literal||LA257_0==64||LA257_0==69||(LA257_0 >= 71 && LA257_0 <= 72)||(LA257_0 >= 74 && LA257_0 <= 75)||LA257_0==78||LA257_0==98||(LA257_0 >= 100 && LA257_0 <= 101)||(LA257_0 >= 103 && LA257_0 <= 106)||(LA257_0 >= 108 && LA257_0 <= 109)||(LA257_0 >= 111 && LA257_0 <= 112)||(LA257_0 >= 116 && LA257_0 <= 119)||(LA257_0 >= 121 && LA257_0 <= 122)||LA257_0==124||LA257_0==128||LA257_0==131||LA257_0==134||LA257_0==137||LA257_0==140||LA257_0==143||(LA257_0 >= 145 && LA257_0 <= 146)||(LA257_0 >= 148 && LA257_0 <= 150)||(LA257_0 >= 152 && LA257_0 <= 154)||LA257_0==156||LA257_0==159||LA257_0==162||LA257_0==164||LA257_0==169||LA257_0==171||(LA257_0 >= 173 && LA257_0 <= 176)||LA257_0==179||LA257_0==182||(LA257_0 >= 185 && LA257_0 <= 189)||(LA257_0 >= 191 && LA257_0 <= 192)||LA257_0==196||LA257_0==198||LA257_0==204) ) {
                alt257=1;
            }
            switch (alt257) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1200:41: for_condition
                    {
                    pushFollow(FOLLOW_for_condition_in_for_statement7549);
                    for_condition991=for_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_condition991.getTree());

                    }
                    break;

            }


            char_literal992=(Token)match(input,SEMI,FOLLOW_SEMI_in_for_statement7554); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal992_tree = 
            (Object)adaptor.create(char_literal992)
            ;
            adaptor.addChild(root_0, char_literal992_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1200:64: ( for_iterator )?
            int alt258=2;
            int LA258_0 = input.LA(1);

            if ( (LA258_0==Character_literal||LA258_0==FALSE||(LA258_0 >= Hex_number && LA258_0 <= IDENTIFIER)||(LA258_0 >= MINUS && LA258_0 <= NUMBER)||LA258_0==Real_literal||LA258_0==STRINGLITERAL||LA258_0==TRUE||LA258_0==Verbatim_string_literal||LA258_0==64||LA258_0==69||(LA258_0 >= 71 && LA258_0 <= 72)||(LA258_0 >= 74 && LA258_0 <= 75)||LA258_0==78||LA258_0==98||(LA258_0 >= 100 && LA258_0 <= 101)||(LA258_0 >= 103 && LA258_0 <= 106)||(LA258_0 >= 108 && LA258_0 <= 109)||(LA258_0 >= 111 && LA258_0 <= 112)||(LA258_0 >= 116 && LA258_0 <= 119)||(LA258_0 >= 121 && LA258_0 <= 122)||LA258_0==124||LA258_0==128||LA258_0==131||LA258_0==134||LA258_0==137||LA258_0==140||LA258_0==143||(LA258_0 >= 145 && LA258_0 <= 146)||(LA258_0 >= 148 && LA258_0 <= 150)||(LA258_0 >= 152 && LA258_0 <= 154)||LA258_0==156||LA258_0==159||LA258_0==162||LA258_0==164||LA258_0==169||LA258_0==171||(LA258_0 >= 173 && LA258_0 <= 176)||LA258_0==179||LA258_0==182||(LA258_0 >= 185 && LA258_0 <= 189)||(LA258_0 >= 191 && LA258_0 <= 192)||LA258_0==196||LA258_0==198||LA258_0==204) ) {
                alt258=1;
            }
            switch (alt258) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1200:64: for_iterator
                    {
                    pushFollow(FOLLOW_for_iterator_in_for_statement7558);
                    for_iterator993=for_iterator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_iterator993.getTree());

                    }
                    break;

            }


            char_literal994=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_for_statement7563); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal994_tree = 
            (Object)adaptor.create(char_literal994)
            ;
            adaptor.addChild(root_0, char_literal994_tree);
            }

            pushFollow(FOLLOW_embedded_statement_in_for_statement7567);
            embedded_statement995=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement995.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 275, for_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "for_statement"


    public static class for_initializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_initializer"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1201:1: for_initializer : ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list );
    public final csParser.for_initializer_return for_initializer() throws RecognitionException {
        csParser.for_initializer_return retval = new csParser.for_initializer_return();
        retval.start = input.LT(1);

        int for_initializer_StartIndex = input.index();

        Object root_0 = null;

        csParser.local_variable_declaration_return local_variable_declaration996 =null;

        csParser.statement_expression_list_return statement_expression_list997 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 276) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1201:16: ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list )
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( (LA259_0==192) ) {
                int LA259_1 = input.LA(2);

                if ( (synpred38_cs()) ) {
                    alt259=1;
                }
                else if ( (true) ) {
                    alt259=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA259_0==122) ) {
                int LA259_2 = input.LA(2);

                if ( (synpred38_cs()) ) {
                    alt259=1;
                }
                else if ( (true) ) {
                    alt259=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA259_0==106||LA259_0==109||LA259_0==111||LA259_0==116||LA259_0==121||LA259_0==131||LA259_0==140||LA259_0==148||LA259_0==153||LA259_0==171||LA259_0==175||LA259_0==179||(LA259_0 >= 187 && LA259_0 <= 188)||LA259_0==191) ) {
                int LA259_3 = input.LA(2);

                if ( (synpred38_cs()) ) {
                    alt259=1;
                }
                else if ( (true) ) {
                    alt259=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA259_0==134) ) {
                int LA259_4 = input.LA(2);

                if ( (synpred38_cs()) ) {
                    alt259=1;
                }
                else if ( (true) ) {
                    alt259=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA259_0==194) && (synpred38_cs())) {
                alt259=1;
            }
            else if ( (LA259_0==Character_literal||LA259_0==FALSE||LA259_0==Hex_number||(LA259_0 >= MINUS && LA259_0 <= NUMBER)||LA259_0==Real_literal||LA259_0==STRINGLITERAL||LA259_0==TRUE||LA259_0==Verbatim_string_literal||LA259_0==64||LA259_0==69||(LA259_0 >= 71 && LA259_0 <= 72)||(LA259_0 >= 74 && LA259_0 <= 75)||LA259_0==78||LA259_0==105||LA259_0==112||(LA259_0 >= 117 && LA259_0 <= 118)||LA259_0==152||LA259_0==176||LA259_0==182||LA259_0==186||LA259_0==189||LA259_0==204) ) {
                alt259=2;
            }
            else if ( (LA259_0==IDENTIFIER||LA259_0==98||(LA259_0 >= 100 && LA259_0 <= 101)||(LA259_0 >= 103 && LA259_0 <= 104)||LA259_0==108||LA259_0==119||LA259_0==124||LA259_0==128||LA259_0==137||LA259_0==143||(LA259_0 >= 145 && LA259_0 <= 146)||(LA259_0 >= 149 && LA259_0 <= 150)||LA259_0==154||LA259_0==156||LA259_0==159||LA259_0==162||LA259_0==164||LA259_0==169||(LA259_0 >= 173 && LA259_0 <= 174)||LA259_0==185||LA259_0==196||LA259_0==198) ) {
                int LA259_25 = input.LA(2);

                if ( (synpred38_cs()) ) {
                    alt259=1;
                }
                else if ( (true) ) {
                    alt259=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 25, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 259, 0, input);

                throw nvae;

            }
            switch (alt259) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1202:2: ( local_variable_declaration )=> local_variable_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_local_variable_declaration_in_for_initializer7581);
                    local_variable_declaration996=local_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_declaration996.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1203:4: statement_expression_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_statement_expression_list_in_for_initializer7586);
                    statement_expression_list997=statement_expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_expression_list997.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 276, for_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "for_initializer"


    public static class for_condition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_condition"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1206:1: for_condition : boolean_expression ;
    public final csParser.for_condition_return for_condition() throws RecognitionException {
        csParser.for_condition_return retval = new csParser.for_condition_return();
        retval.start = input.LT(1);

        int for_condition_StartIndex = input.index();

        Object root_0 = null;

        csParser.boolean_expression_return boolean_expression998 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 277) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1207:2: ( boolean_expression )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1207:4: boolean_expression
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_boolean_expression_in_for_condition7598);
            boolean_expression998=boolean_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, boolean_expression998.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 277, for_condition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "for_condition"


    public static class for_iterator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_iterator"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1210:1: for_iterator : statement_expression_list ;
    public final csParser.for_iterator_return for_iterator() throws RecognitionException {
        csParser.for_iterator_return retval = new csParser.for_iterator_return();
        retval.start = input.LT(1);

        int for_iterator_StartIndex = input.index();

        Object root_0 = null;

        csParser.statement_expression_list_return statement_expression_list999 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 278) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1211:2: ( statement_expression_list )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1211:4: statement_expression_list
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_statement_expression_list_in_for_iterator7610);
            statement_expression_list999=statement_expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_expression_list999.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 278, for_iterator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "for_iterator"


    public static class statement_expression_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement_expression_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1214:1: statement_expression_list : statement_expression ( ',' statement_expression )* ;
    public final csParser.statement_expression_list_return statement_expression_list() throws RecognitionException {
        csParser.statement_expression_list_return retval = new csParser.statement_expression_list_return();
        retval.start = input.LT(1);

        int statement_expression_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal1001=null;
        csParser.statement_expression_return statement_expression1000 =null;

        csParser.statement_expression_return statement_expression1002 =null;


        Object char_literal1001_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 279) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1215:3: ( statement_expression ( ',' statement_expression )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1215:5: statement_expression ( ',' statement_expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_statement_expression_in_statement_expression_list7623);
            statement_expression1000=statement_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_expression1000.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:1215:26: ( ',' statement_expression )*
            loop260:
            do {
                int alt260=2;
                int LA260_0 = input.LA(1);

                if ( (LA260_0==77) ) {
                    alt260=1;
                }


                switch (alt260) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1215:27: ',' statement_expression
            	    {
            	    char_literal1001=(Token)match(input,77,FOLLOW_77_in_statement_expression_list7626); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1001_tree = 
            	    (Object)adaptor.create(char_literal1001)
            	    ;
            	    adaptor.addChild(root_0, char_literal1001_tree);
            	    }

            	    pushFollow(FOLLOW_statement_expression_in_statement_expression_list7628);
            	    statement_expression1002=statement_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_expression1002.getTree());

            	    }
            	    break;

            	default :
            	    break loop260;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 279, statement_expression_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "statement_expression_list"


    public static class foreach_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1218:1: foreach_statement : 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement ;
    public final csParser.foreach_statement_return foreach_statement() throws RecognitionException {
        csParser.foreach_statement_return retval = new csParser.foreach_statement_return();
        retval.start = input.LT(1);

        int foreach_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1003=null;
        Token char_literal1004=null;
        Token string_literal1007=null;
        Token char_literal1009=null;
        csParser.local_variable_type_return local_variable_type1005 =null;

        csParser.identifier_return identifier1006 =null;

        csParser.expression_return expression1008 =null;

        csParser.embedded_statement_return embedded_statement1010 =null;


        Object string_literal1003_tree=null;
        Object char_literal1004_tree=null;
        Object string_literal1007_tree=null;
        Object char_literal1009_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 280) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1219:2: ( 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1219:4: 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement
            {
            root_0 = (Object)adaptor.nil();


            string_literal1003=(Token)match(input,133,FOLLOW_133_in_foreach_statement7643); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1003_tree = 
            (Object)adaptor.create(string_literal1003)
            ;
            adaptor.addChild(root_0, string_literal1003_tree);
            }

            char_literal1004=(Token)match(input,71,FOLLOW_71_in_foreach_statement7647); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1004_tree = 
            (Object)adaptor.create(char_literal1004)
            ;
            adaptor.addChild(root_0, char_literal1004_tree);
            }

            pushFollow(FOLLOW_local_variable_type_in_foreach_statement7651);
            local_variable_type1005=local_variable_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_type1005.getTree());

            pushFollow(FOLLOW_identifier_in_foreach_statement7655);
            identifier1006=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier1006.getTree());

            string_literal1007=(Token)match(input,139,FOLLOW_139_in_foreach_statement7659); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1007_tree = 
            (Object)adaptor.create(string_literal1007)
            ;
            adaptor.addChild(root_0, string_literal1007_tree);
            }

            pushFollow(FOLLOW_expression_in_foreach_statement7663);
            expression1008=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1008.getTree());

            char_literal1009=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_foreach_statement7667); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1009_tree = 
            (Object)adaptor.create(char_literal1009)
            ;
            adaptor.addChild(root_0, char_literal1009_tree);
            }

            pushFollow(FOLLOW_embedded_statement_in_foreach_statement7671);
            embedded_statement1010=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement1010.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 280, foreach_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "foreach_statement"


    public static class jump_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "jump_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1222:1: jump_statement : ( break_statement | continue_statement | goto_statement | return_statement | throw_statement );
    public final csParser.jump_statement_return jump_statement() throws RecognitionException {
        csParser.jump_statement_return retval = new csParser.jump_statement_return();
        retval.start = input.LT(1);

        int jump_statement_StartIndex = input.index();

        Object root_0 = null;

        csParser.break_statement_return break_statement1011 =null;

        csParser.continue_statement_return continue_statement1012 =null;

        csParser.goto_statement_return goto_statement1013 =null;

        csParser.return_statement_return return_statement1014 =null;

        csParser.throw_statement_return throw_statement1015 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 281) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1223:2: ( break_statement | continue_statement | goto_statement | return_statement | throw_statement )
            int alt261=5;
            switch ( input.LA(1) ) {
            case 107:
                {
                alt261=1;
                }
                break;
            case 115:
                {
                alt261=2;
                }
                break;
            case 136:
                {
                alt261=3;
                }
                break;
            case 170:
                {
                alt261=4;
                }
                break;
            case 183:
                {
                alt261=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);

                throw nvae;

            }

            switch (alt261) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1223:4: break_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_statement_in_jump_statement7683);
                    break_statement1011=break_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_statement1011.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1224:4: continue_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_statement_in_jump_statement7688);
                    continue_statement1012=continue_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_statement1012.getTree());

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1225:4: goto_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_statement_in_jump_statement7693);
                    goto_statement1013=goto_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_statement1013.getTree());

                    }
                    break;
                case 4 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1226:4: return_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_statement_in_jump_statement7698);
                    return_statement1014=return_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_statement1014.getTree());

                    }
                    break;
                case 5 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1227:4: throw_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_statement_in_jump_statement7703);
                    throw_statement1015=throw_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throw_statement1015.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 281, jump_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "jump_statement"


    public static class break_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1230:1: break_statement : 'break' ';' ;
    public final csParser.break_statement_return break_statement() throws RecognitionException {
        csParser.break_statement_return retval = new csParser.break_statement_return();
        retval.start = input.LT(1);

        int break_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1016=null;
        Token char_literal1017=null;

        Object string_literal1016_tree=null;
        Object char_literal1017_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 282) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1231:2: ( 'break' ';' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1231:4: 'break' ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal1016=(Token)match(input,107,FOLLOW_107_in_break_statement7715); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1016_tree = 
            (Object)adaptor.create(string_literal1016)
            ;
            adaptor.addChild(root_0, string_literal1016_tree);
            }

            char_literal1017=(Token)match(input,SEMI,FOLLOW_SEMI_in_break_statement7719); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1017_tree = 
            (Object)adaptor.create(char_literal1017)
            ;
            adaptor.addChild(root_0, char_literal1017_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 282, break_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "break_statement"


    public static class continue_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "continue_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1234:1: continue_statement : 'continue' ';' ;
    public final csParser.continue_statement_return continue_statement() throws RecognitionException {
        csParser.continue_statement_return retval = new csParser.continue_statement_return();
        retval.start = input.LT(1);

        int continue_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1018=null;
        Token char_literal1019=null;

        Object string_literal1018_tree=null;
        Object char_literal1019_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 283) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1235:2: ( 'continue' ';' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1235:4: 'continue' ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal1018=(Token)match(input,115,FOLLOW_115_in_continue_statement7731); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1018_tree = 
            (Object)adaptor.create(string_literal1018)
            ;
            adaptor.addChild(root_0, string_literal1018_tree);
            }

            char_literal1019=(Token)match(input,SEMI,FOLLOW_SEMI_in_continue_statement7735); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1019_tree = 
            (Object)adaptor.create(char_literal1019)
            ;
            adaptor.addChild(root_0, char_literal1019_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 283, continue_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "continue_statement"


    public static class goto_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1238:1: goto_statement : 'goto' ( identifier | 'case' constant_expression | 'default' ) ';' ;
    public final csParser.goto_statement_return goto_statement() throws RecognitionException {
        csParser.goto_statement_return retval = new csParser.goto_statement_return();
        retval.start = input.LT(1);

        int goto_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1020=null;
        Token string_literal1022=null;
        Token string_literal1024=null;
        Token char_literal1025=null;
        csParser.identifier_return identifier1021 =null;

        csParser.constant_expression_return constant_expression1023 =null;


        Object string_literal1020_tree=null;
        Object string_literal1022_tree=null;
        Object string_literal1024_tree=null;
        Object char_literal1025_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 284) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1239:2: ( 'goto' ( identifier | 'case' constant_expression | 'default' ) ';' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1239:4: 'goto' ( identifier | 'case' constant_expression | 'default' ) ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal1020=(Token)match(input,136,FOLLOW_136_in_goto_statement7747); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1020_tree = 
            (Object)adaptor.create(string_literal1020)
            ;
            adaptor.addChild(root_0, string_literal1020_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1240:3: ( identifier | 'case' constant_expression | 'default' )
            int alt262=3;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 134:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
                {
                alt262=1;
                }
                break;
            case 110:
                {
                alt262=2;
                }
                break;
            case 117:
                {
                alt262=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 262, 0, input);

                throw nvae;

            }

            switch (alt262) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1241:4: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_goto_statement7756);
                    identifier1021=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier1021.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1242:5: 'case' constant_expression
                    {
                    string_literal1022=(Token)match(input,110,FOLLOW_110_in_goto_statement7762); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1022_tree = 
                    (Object)adaptor.create(string_literal1022)
                    ;
                    adaptor.addChild(root_0, string_literal1022_tree);
                    }

                    pushFollow(FOLLOW_constant_expression_in_goto_statement7766);
                    constant_expression1023=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_expression1023.getTree());

                    }
                    break;
                case 3 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1243:5: 'default'
                    {
                    string_literal1024=(Token)match(input,117,FOLLOW_117_in_goto_statement7772); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1024_tree = 
                    (Object)adaptor.create(string_literal1024)
                    ;
                    adaptor.addChild(root_0, string_literal1024_tree);
                    }

                    }
                    break;

            }


            char_literal1025=(Token)match(input,SEMI,FOLLOW_SEMI_in_goto_statement7781); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1025_tree = 
            (Object)adaptor.create(char_literal1025)
            ;
            adaptor.addChild(root_0, char_literal1025_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 284, goto_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "goto_statement"


    public static class return_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1247:1: return_statement : 'return' ( expression )? ';' ;
    public final csParser.return_statement_return return_statement() throws RecognitionException {
        csParser.return_statement_return retval = new csParser.return_statement_return();
        retval.start = input.LT(1);

        int return_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1026=null;
        Token char_literal1028=null;
        csParser.expression_return expression1027 =null;


        Object string_literal1026_tree=null;
        Object char_literal1028_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 285) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1248:2: ( 'return' ( expression )? ';' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1248:4: 'return' ( expression )? ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal1026=(Token)match(input,170,FOLLOW_170_in_return_statement7792); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1026_tree = 
            (Object)adaptor.create(string_literal1026)
            ;
            adaptor.addChild(root_0, string_literal1026_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1248:15: ( expression )?
            int alt263=2;
            int LA263_0 = input.LA(1);

            if ( (LA263_0==Character_literal||LA263_0==FALSE||(LA263_0 >= Hex_number && LA263_0 <= IDENTIFIER)||(LA263_0 >= MINUS && LA263_0 <= NUMBER)||LA263_0==Real_literal||LA263_0==STRINGLITERAL||LA263_0==TRUE||LA263_0==Verbatim_string_literal||LA263_0==64||LA263_0==69||(LA263_0 >= 71 && LA263_0 <= 72)||(LA263_0 >= 74 && LA263_0 <= 75)||LA263_0==78||LA263_0==98||(LA263_0 >= 100 && LA263_0 <= 101)||(LA263_0 >= 103 && LA263_0 <= 106)||(LA263_0 >= 108 && LA263_0 <= 109)||(LA263_0 >= 111 && LA263_0 <= 112)||(LA263_0 >= 116 && LA263_0 <= 119)||(LA263_0 >= 121 && LA263_0 <= 122)||LA263_0==124||LA263_0==128||LA263_0==131||LA263_0==134||LA263_0==137||LA263_0==140||LA263_0==143||(LA263_0 >= 145 && LA263_0 <= 146)||(LA263_0 >= 148 && LA263_0 <= 150)||(LA263_0 >= 152 && LA263_0 <= 154)||LA263_0==156||LA263_0==159||LA263_0==162||LA263_0==164||LA263_0==169||LA263_0==171||(LA263_0 >= 173 && LA263_0 <= 176)||LA263_0==179||LA263_0==182||(LA263_0 >= 185 && LA263_0 <= 189)||(LA263_0 >= 191 && LA263_0 <= 192)||LA263_0==196||LA263_0==198||LA263_0==204) ) {
                alt263=1;
            }
            switch (alt263) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1248:15: expression
                    {
                    pushFollow(FOLLOW_expression_in_return_statement7796);
                    expression1027=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1027.getTree());

                    }
                    break;

            }


            char_literal1028=(Token)match(input,SEMI,FOLLOW_SEMI_in_return_statement7801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1028_tree = 
            (Object)adaptor.create(char_literal1028)
            ;
            adaptor.addChild(root_0, char_literal1028_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 285, return_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "return_statement"


    public static class throw_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1251:1: throw_statement : 'throw' ( expression )? ';' ;
    public final csParser.throw_statement_return throw_statement() throws RecognitionException {
        csParser.throw_statement_return retval = new csParser.throw_statement_return();
        retval.start = input.LT(1);

        int throw_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1029=null;
        Token char_literal1031=null;
        csParser.expression_return expression1030 =null;


        Object string_literal1029_tree=null;
        Object char_literal1031_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 286) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1251:16: ( 'throw' ( expression )? ';' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1252:2: 'throw' ( expression )? ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal1029=(Token)match(input,183,FOLLOW_183_in_throw_statement7811); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1029_tree = 
            (Object)adaptor.create(string_literal1029)
            ;
            adaptor.addChild(root_0, string_literal1029_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1252:12: ( expression )?
            int alt264=2;
            int LA264_0 = input.LA(1);

            if ( (LA264_0==Character_literal||LA264_0==FALSE||(LA264_0 >= Hex_number && LA264_0 <= IDENTIFIER)||(LA264_0 >= MINUS && LA264_0 <= NUMBER)||LA264_0==Real_literal||LA264_0==STRINGLITERAL||LA264_0==TRUE||LA264_0==Verbatim_string_literal||LA264_0==64||LA264_0==69||(LA264_0 >= 71 && LA264_0 <= 72)||(LA264_0 >= 74 && LA264_0 <= 75)||LA264_0==78||LA264_0==98||(LA264_0 >= 100 && LA264_0 <= 101)||(LA264_0 >= 103 && LA264_0 <= 106)||(LA264_0 >= 108 && LA264_0 <= 109)||(LA264_0 >= 111 && LA264_0 <= 112)||(LA264_0 >= 116 && LA264_0 <= 119)||(LA264_0 >= 121 && LA264_0 <= 122)||LA264_0==124||LA264_0==128||LA264_0==131||LA264_0==134||LA264_0==137||LA264_0==140||LA264_0==143||(LA264_0 >= 145 && LA264_0 <= 146)||(LA264_0 >= 148 && LA264_0 <= 150)||(LA264_0 >= 152 && LA264_0 <= 154)||LA264_0==156||LA264_0==159||LA264_0==162||LA264_0==164||LA264_0==169||LA264_0==171||(LA264_0 >= 173 && LA264_0 <= 176)||LA264_0==179||LA264_0==182||(LA264_0 >= 185 && LA264_0 <= 189)||(LA264_0 >= 191 && LA264_0 <= 192)||LA264_0==196||LA264_0==198||LA264_0==204) ) {
                alt264=1;
            }
            switch (alt264) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1252:12: expression
                    {
                    pushFollow(FOLLOW_expression_in_throw_statement7815);
                    expression1030=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1030.getTree());

                    }
                    break;

            }


            char_literal1031=(Token)match(input,SEMI,FOLLOW_SEMI_in_throw_statement7820); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1031_tree = 
            (Object)adaptor.create(char_literal1031)
            ;
            adaptor.addChild(root_0, char_literal1031_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 286, throw_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "throw_statement"


    public static class try_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1255:1: try_statement : 'try' block ( catch_clauses ( finally_clause )? | finally_clause ) ;
    public final csParser.try_statement_return try_statement() throws RecognitionException {
        csParser.try_statement_return retval = new csParser.try_statement_return();
        retval.start = input.LT(1);

        int try_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1032=null;
        csParser.block_return block1033 =null;

        csParser.catch_clauses_return catch_clauses1034 =null;

        csParser.finally_clause_return finally_clause1035 =null;

        csParser.finally_clause_return finally_clause1036 =null;


        Object string_literal1032_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 287) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1256:2: ( 'try' block ( catch_clauses ( finally_clause )? | finally_clause ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1256:4: 'try' block ( catch_clauses ( finally_clause )? | finally_clause )
            {
            root_0 = (Object)adaptor.nil();


            string_literal1032=(Token)match(input,184,FOLLOW_184_in_try_statement7831); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1032_tree = 
            (Object)adaptor.create(string_literal1032)
            ;
            adaptor.addChild(root_0, string_literal1032_tree);
            }

            pushFollow(FOLLOW_block_in_try_statement7835);
            block1033=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block1033.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:1257:3: ( catch_clauses ( finally_clause )? | finally_clause )
            int alt266=2;
            int LA266_0 = input.LA(1);

            if ( (LA266_0==CATCH) ) {
                alt266=1;
            }
            else if ( (LA266_0==129) ) {
                alt266=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 266, 0, input);

                throw nvae;

            }
            switch (alt266) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1258:4: catch_clauses ( finally_clause )?
                    {
                    pushFollow(FOLLOW_catch_clauses_in_try_statement7844);
                    catch_clauses1034=catch_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, catch_clauses1034.getTree());

                    // CodeR.CSharp.Parser/src/antlr/cs.g:1258:20: ( finally_clause )?
                    int alt265=2;
                    int LA265_0 = input.LA(1);

                    if ( (LA265_0==129) ) {
                        alt265=1;
                    }
                    switch (alt265) {
                        case 1 :
                            // CodeR.CSharp.Parser/src/antlr/cs.g:1258:20: finally_clause
                            {
                            pushFollow(FOLLOW_finally_clause_in_try_statement7848);
                            finally_clause1035=finally_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, finally_clause1035.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1259:5: finally_clause
                    {
                    pushFollow(FOLLOW_finally_clause_in_try_statement7855);
                    finally_clause1036=finally_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, finally_clause1036.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 287, try_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "try_statement"


    public static class catch_clauses_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_clauses"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1264:1: catch_clauses : 'catch' ( specific_catch_clauses | general_catch_clause ) ;
    public final csParser.catch_clauses_return catch_clauses() throws RecognitionException {
        csParser.catch_clauses_return retval = new csParser.catch_clauses_return();
        retval.start = input.LT(1);

        int catch_clauses_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1037=null;
        csParser.specific_catch_clauses_return specific_catch_clauses1038 =null;

        csParser.general_catch_clause_return general_catch_clause1039 =null;


        Object string_literal1037_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 288) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1265:2: ( 'catch' ( specific_catch_clauses | general_catch_clause ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1265:4: 'catch' ( specific_catch_clauses | general_catch_clause )
            {
            root_0 = (Object)adaptor.nil();


            string_literal1037=(Token)match(input,CATCH,FOLLOW_CATCH_in_catch_clauses7871); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1037_tree = 
            (Object)adaptor.create(string_literal1037)
            ;
            adaptor.addChild(root_0, string_literal1037_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1265:14: ( specific_catch_clauses | general_catch_clause )
            int alt267=2;
            int LA267_0 = input.LA(1);

            if ( (LA267_0==71) ) {
                alt267=1;
            }
            else if ( (LA267_0==SEMI||LA267_0==199) ) {
                alt267=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 267, 0, input);

                throw nvae;

            }
            switch (alt267) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1265:15: specific_catch_clauses
                    {
                    pushFollow(FOLLOW_specific_catch_clauses_in_catch_clauses7876);
                    specific_catch_clauses1038=specific_catch_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, specific_catch_clauses1038.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1265:40: general_catch_clause
                    {
                    pushFollow(FOLLOW_general_catch_clause_in_catch_clauses7880);
                    general_catch_clause1039=general_catch_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, general_catch_clause1039.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 288, catch_clauses_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "catch_clauses"


    public static class specific_catch_clauses_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "specific_catch_clauses"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1268:1: specific_catch_clauses : specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )* ;
    public final csParser.specific_catch_clauses_return specific_catch_clauses() throws RecognitionException {
        csParser.specific_catch_clauses_return retval = new csParser.specific_catch_clauses_return();
        retval.start = input.LT(1);

        int specific_catch_clauses_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1041=null;
        csParser.specific_catch_clause_return specific_catch_clause1040 =null;

        csParser.specific_catch_clause_return specific_catch_clause1042 =null;

        csParser.general_catch_clause_return general_catch_clause1043 =null;


        Object string_literal1041_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 289) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1269:2: ( specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )* )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1269:4: specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_specific_catch_clause_in_specific_catch_clauses7893);
            specific_catch_clause1040=specific_catch_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, specific_catch_clause1040.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:1269:28: ( 'catch' ( specific_catch_clause | general_catch_clause ) )*
            loop269:
            do {
                int alt269=2;
                int LA269_0 = input.LA(1);

                if ( (LA269_0==CATCH) ) {
                    alt269=1;
                }


                switch (alt269) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1269:29: 'catch' ( specific_catch_clause | general_catch_clause )
            	    {
            	    string_literal1041=(Token)match(input,CATCH,FOLLOW_CATCH_in_specific_catch_clauses7898); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1041_tree = 
            	    (Object)adaptor.create(string_literal1041)
            	    ;
            	    adaptor.addChild(root_0, string_literal1041_tree);
            	    }

            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1269:39: ( specific_catch_clause | general_catch_clause )
            	    int alt268=2;
            	    int LA268_0 = input.LA(1);

            	    if ( (LA268_0==71) ) {
            	        alt268=1;
            	    }
            	    else if ( (LA268_0==SEMI||LA268_0==199) ) {
            	        alt268=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 268, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt268) {
            	        case 1 :
            	            // CodeR.CSharp.Parser/src/antlr/cs.g:1269:40: specific_catch_clause
            	            {
            	            pushFollow(FOLLOW_specific_catch_clause_in_specific_catch_clauses7903);
            	            specific_catch_clause1042=specific_catch_clause();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, specific_catch_clause1042.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // CodeR.CSharp.Parser/src/antlr/cs.g:1269:64: general_catch_clause
            	            {
            	            pushFollow(FOLLOW_general_catch_clause_in_specific_catch_clauses7907);
            	            general_catch_clause1043=general_catch_clause();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_catch_clause1043.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop269;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 289, specific_catch_clauses_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "specific_catch_clauses"


    public static class specific_catch_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "specific_catch_clause"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1272:1: specific_catch_clause : '(' class_type ( identifier )? ')' block ;
    public final csParser.specific_catch_clause_return specific_catch_clause() throws RecognitionException {
        csParser.specific_catch_clause_return retval = new csParser.specific_catch_clause_return();
        retval.start = input.LT(1);

        int specific_catch_clause_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal1044=null;
        Token char_literal1047=null;
        csParser.class_type_return class_type1045 =null;

        csParser.identifier_return identifier1046 =null;

        csParser.block_return block1048 =null;


        Object char_literal1044_tree=null;
        Object char_literal1047_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 290) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1273:2: ( '(' class_type ( identifier )? ')' block )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1273:4: '(' class_type ( identifier )? ')' block
            {
            root_0 = (Object)adaptor.nil();


            char_literal1044=(Token)match(input,71,FOLLOW_71_in_specific_catch_clause7922); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1044_tree = 
            (Object)adaptor.create(char_literal1044)
            ;
            adaptor.addChild(root_0, char_literal1044_tree);
            }

            pushFollow(FOLLOW_class_type_in_specific_catch_clause7926);
            class_type1045=class_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, class_type1045.getTree());

            // CodeR.CSharp.Parser/src/antlr/cs.g:1273:23: ( identifier )?
            int alt270=2;
            int LA270_0 = input.LA(1);

            if ( (LA270_0==IDENTIFIER||LA270_0==98||(LA270_0 >= 100 && LA270_0 <= 101)||(LA270_0 >= 103 && LA270_0 <= 104)||LA270_0==108||LA270_0==119||LA270_0==122||LA270_0==124||LA270_0==128||LA270_0==134||LA270_0==137||LA270_0==143||(LA270_0 >= 145 && LA270_0 <= 146)||(LA270_0 >= 149 && LA270_0 <= 150)||LA270_0==154||LA270_0==156||LA270_0==159||LA270_0==162||LA270_0==164||LA270_0==169||(LA270_0 >= 173 && LA270_0 <= 174)||LA270_0==185||LA270_0==192||LA270_0==196||LA270_0==198) ) {
                alt270=1;
            }
            switch (alt270) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1273:23: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_specific_catch_clause7930);
                    identifier1046=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier1046.getTree());

                    }
                    break;

            }


            char_literal1047=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_specific_catch_clause7935); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1047_tree = 
            (Object)adaptor.create(char_literal1047)
            ;
            adaptor.addChild(root_0, char_literal1047_tree);
            }

            pushFollow(FOLLOW_block_in_specific_catch_clause7939);
            block1048=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block1048.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 290, specific_catch_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "specific_catch_clause"


    public static class general_catch_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "general_catch_clause"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1276:1: general_catch_clause : block ;
    public final csParser.general_catch_clause_return general_catch_clause() throws RecognitionException {
        csParser.general_catch_clause_return retval = new csParser.general_catch_clause_return();
        retval.start = input.LT(1);

        int general_catch_clause_StartIndex = input.index();

        Object root_0 = null;

        csParser.block_return block1049 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 291) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1277:2: ( block )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1277:4: block
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_in_general_catch_clause7951);
            block1049=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block1049.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 291, general_catch_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "general_catch_clause"


    public static class finally_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "finally_clause"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1280:1: finally_clause : 'finally' block ;
    public final csParser.finally_clause_return finally_clause() throws RecognitionException {
        csParser.finally_clause_return retval = new csParser.finally_clause_return();
        retval.start = input.LT(1);

        int finally_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1050=null;
        csParser.block_return block1051 =null;


        Object string_literal1050_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 292) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1281:2: ( 'finally' block )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1281:4: 'finally' block
            {
            root_0 = (Object)adaptor.nil();


            string_literal1050=(Token)match(input,129,FOLLOW_129_in_finally_clause7963); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1050_tree = 
            (Object)adaptor.create(string_literal1050)
            ;
            adaptor.addChild(root_0, string_literal1050_tree);
            }

            pushFollow(FOLLOW_block_in_finally_clause7967);
            block1051=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block1051.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 292, finally_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "finally_clause"


    public static class checked_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "checked_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1283:1: checked_statement : 'checked' block ;
    public final csParser.checked_statement_return checked_statement() throws RecognitionException {
        csParser.checked_statement_return retval = new csParser.checked_statement_return();
        retval.start = input.LT(1);

        int checked_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1052=null;
        csParser.block_return block1053 =null;


        Object string_literal1052_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 293) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1284:2: ( 'checked' block )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1284:4: 'checked' block
            {
            root_0 = (Object)adaptor.nil();


            string_literal1052=(Token)match(input,112,FOLLOW_112_in_checked_statement7977); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1052_tree = 
            (Object)adaptor.create(string_literal1052)
            ;
            adaptor.addChild(root_0, string_literal1052_tree);
            }

            pushFollow(FOLLOW_block_in_checked_statement7981);
            block1053=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block1053.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 293, checked_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "checked_statement"


    public static class unchecked_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unchecked_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1287:1: unchecked_statement : 'unchecked' block ;
    public final csParser.unchecked_statement_return unchecked_statement() throws RecognitionException {
        csParser.unchecked_statement_return retval = new csParser.unchecked_statement_return();
        retval.start = input.LT(1);

        int unchecked_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1054=null;
        csParser.block_return block1055 =null;


        Object string_literal1054_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 294) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1288:2: ( 'unchecked' block )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1288:4: 'unchecked' block
            {
            root_0 = (Object)adaptor.nil();


            string_literal1054=(Token)match(input,189,FOLLOW_189_in_unchecked_statement7993); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1054_tree = 
            (Object)adaptor.create(string_literal1054)
            ;
            adaptor.addChild(root_0, string_literal1054_tree);
            }

            pushFollow(FOLLOW_block_in_unchecked_statement7997);
            block1055=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block1055.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 294, unchecked_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unchecked_statement"


    public static class lock_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lock_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1291:1: lock_statement : 'lock' '(' expression ')' embedded_statement ;
    public final csParser.lock_statement_return lock_statement() throws RecognitionException {
        csParser.lock_statement_return retval = new csParser.lock_statement_return();
        retval.start = input.LT(1);

        int lock_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1056=null;
        Token char_literal1057=null;
        Token char_literal1059=null;
        csParser.expression_return expression1058 =null;

        csParser.embedded_statement_return embedded_statement1060 =null;


        Object string_literal1056_tree=null;
        Object char_literal1057_tree=null;
        Object char_literal1059_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 295) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1292:2: ( 'lock' '(' expression ')' embedded_statement )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1292:4: 'lock' '(' expression ')' embedded_statement
            {
            root_0 = (Object)adaptor.nil();


            string_literal1056=(Token)match(input,147,FOLLOW_147_in_lock_statement8009); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1056_tree = 
            (Object)adaptor.create(string_literal1056)
            ;
            adaptor.addChild(root_0, string_literal1056_tree);
            }

            char_literal1057=(Token)match(input,71,FOLLOW_71_in_lock_statement8013); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1057_tree = 
            (Object)adaptor.create(char_literal1057)
            ;
            adaptor.addChild(root_0, char_literal1057_tree);
            }

            pushFollow(FOLLOW_expression_in_lock_statement8016);
            expression1058=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1058.getTree());

            char_literal1059=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lock_statement8020); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1059_tree = 
            (Object)adaptor.create(char_literal1059)
            ;
            adaptor.addChild(root_0, char_literal1059_tree);
            }

            pushFollow(FOLLOW_embedded_statement_in_lock_statement8024);
            embedded_statement1060=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement1060.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 295, lock_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "lock_statement"


    public static class using_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "using_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1295:1: using_statement : 'using' '(' resource_acquisition ')' embedded_statement ;
    public final csParser.using_statement_return using_statement() throws RecognitionException {
        csParser.using_statement_return retval = new csParser.using_statement_return();
        retval.start = input.LT(1);

        int using_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1061=null;
        Token char_literal1062=null;
        Token char_literal1064=null;
        csParser.resource_acquisition_return resource_acquisition1063 =null;

        csParser.embedded_statement_return embedded_statement1065 =null;


        Object string_literal1061_tree=null;
        Object char_literal1062_tree=null;
        Object char_literal1064_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 296) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1296:2: ( 'using' '(' resource_acquisition ')' embedded_statement )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1296:4: 'using' '(' resource_acquisition ')' embedded_statement
            {
            root_0 = (Object)adaptor.nil();


            string_literal1061=(Token)match(input,USING,FOLLOW_USING_in_using_statement8036); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1061_tree = 
            (Object)adaptor.create(string_literal1061)
            ;
            adaptor.addChild(root_0, string_literal1061_tree);
            }

            char_literal1062=(Token)match(input,71,FOLLOW_71_in_using_statement8040); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1062_tree = 
            (Object)adaptor.create(char_literal1062)
            ;
            adaptor.addChild(root_0, char_literal1062_tree);
            }

            pushFollow(FOLLOW_resource_acquisition_in_using_statement8045);
            resource_acquisition1063=resource_acquisition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, resource_acquisition1063.getTree());

            char_literal1064=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_using_statement8049); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1064_tree = 
            (Object)adaptor.create(char_literal1064)
            ;
            adaptor.addChild(root_0, char_literal1064_tree);
            }

            pushFollow(FOLLOW_embedded_statement_in_using_statement8054);
            embedded_statement1065=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement1065.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 296, using_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "using_statement"


    public static class resource_acquisition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "resource_acquisition"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1299:1: resource_acquisition : ( ( local_variable_declaration )=> local_variable_declaration | expression );
    public final csParser.resource_acquisition_return resource_acquisition() throws RecognitionException {
        csParser.resource_acquisition_return retval = new csParser.resource_acquisition_return();
        retval.start = input.LT(1);

        int resource_acquisition_StartIndex = input.index();

        Object root_0 = null;

        csParser.local_variable_declaration_return local_variable_declaration1066 =null;

        csParser.expression_return expression1067 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 297) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1300:2: ( ( local_variable_declaration )=> local_variable_declaration | expression )
            int alt271=2;
            int LA271_0 = input.LA(1);

            if ( (LA271_0==192) ) {
                int LA271_1 = input.LA(2);

                if ( (synpred39_cs()) ) {
                    alt271=1;
                }
                else if ( (true) ) {
                    alt271=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 271, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA271_0==122) ) {
                int LA271_2 = input.LA(2);

                if ( (synpred39_cs()) ) {
                    alt271=1;
                }
                else if ( (true) ) {
                    alt271=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 271, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA271_0==106||LA271_0==109||LA271_0==111||LA271_0==116||LA271_0==121||LA271_0==131||LA271_0==140||LA271_0==148||LA271_0==153||LA271_0==171||LA271_0==175||LA271_0==179||(LA271_0 >= 187 && LA271_0 <= 188)||LA271_0==191) ) {
                int LA271_3 = input.LA(2);

                if ( (synpred39_cs()) ) {
                    alt271=1;
                }
                else if ( (true) ) {
                    alt271=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 271, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA271_0==134) ) {
                int LA271_4 = input.LA(2);

                if ( (synpred39_cs()) ) {
                    alt271=1;
                }
                else if ( (true) ) {
                    alt271=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 271, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA271_0==194) && (synpred39_cs())) {
                alt271=1;
            }
            else if ( (LA271_0==Character_literal||LA271_0==FALSE||LA271_0==Hex_number||(LA271_0 >= MINUS && LA271_0 <= NUMBER)||LA271_0==Real_literal||LA271_0==STRINGLITERAL||LA271_0==TRUE||LA271_0==Verbatim_string_literal||LA271_0==64||LA271_0==69||(LA271_0 >= 71 && LA271_0 <= 72)||(LA271_0 >= 74 && LA271_0 <= 75)||LA271_0==78||LA271_0==105||LA271_0==112||(LA271_0 >= 117 && LA271_0 <= 118)||LA271_0==152||LA271_0==176||LA271_0==182||LA271_0==186||LA271_0==189||LA271_0==204) ) {
                alt271=2;
            }
            else if ( (LA271_0==IDENTIFIER||LA271_0==98||(LA271_0 >= 100 && LA271_0 <= 101)||(LA271_0 >= 103 && LA271_0 <= 104)||LA271_0==108||LA271_0==119||LA271_0==124||LA271_0==128||LA271_0==137||LA271_0==143||(LA271_0 >= 145 && LA271_0 <= 146)||(LA271_0 >= 149 && LA271_0 <= 150)||LA271_0==154||LA271_0==156||LA271_0==159||LA271_0==162||LA271_0==164||LA271_0==169||(LA271_0 >= 173 && LA271_0 <= 174)||LA271_0==185||LA271_0==196||LA271_0==198) ) {
                int LA271_25 = input.LA(2);

                if ( (synpred39_cs()) ) {
                    alt271=1;
                }
                else if ( (true) ) {
                    alt271=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 271, 25, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 0, input);

                throw nvae;

            }
            switch (alt271) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1300:4: ( local_variable_declaration )=> local_variable_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_local_variable_declaration_in_resource_acquisition8072);
                    local_variable_declaration1066=local_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_declaration1066.getTree());

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1301:4: expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expression_in_resource_acquisition8077);
                    expression1067=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1067.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 297, resource_acquisition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "resource_acquisition"


    public static class yield_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "yield_statement"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1304:1: yield_statement : 'yield' ( 'return' expression ';' | 'break' ';' ) ;
    public final csParser.yield_statement_return yield_statement() throws RecognitionException {
        csParser.yield_statement_return retval = new csParser.yield_statement_return();
        retval.start = input.LT(1);

        int yield_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1068=null;
        Token string_literal1069=null;
        Token char_literal1071=null;
        Token string_literal1072=null;
        Token char_literal1073=null;
        csParser.expression_return expression1070 =null;


        Object string_literal1068_tree=null;
        Object string_literal1069_tree=null;
        Object char_literal1071_tree=null;
        Object string_literal1072_tree=null;
        Object char_literal1073_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 298) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1305:2: ( 'yield' ( 'return' expression ';' | 'break' ';' ) )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1305:4: 'yield' ( 'return' expression ';' | 'break' ';' )
            {
            root_0 = (Object)adaptor.nil();


            string_literal1068=(Token)match(input,198,FOLLOW_198_in_yield_statement8088); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1068_tree = 
            (Object)adaptor.create(string_literal1068)
            ;
            adaptor.addChild(root_0, string_literal1068_tree);
            }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1306:3: ( 'return' expression ';' | 'break' ';' )
            int alt272=2;
            int LA272_0 = input.LA(1);

            if ( (LA272_0==170) ) {
                alt272=1;
            }
            else if ( (LA272_0==107) ) {
                alt272=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 272, 0, input);

                throw nvae;

            }
            switch (alt272) {
                case 1 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1307:4: 'return' expression ';'
                    {
                    string_literal1069=(Token)match(input,170,FOLLOW_170_in_yield_statement8097); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1069_tree = 
                    (Object)adaptor.create(string_literal1069)
                    ;
                    adaptor.addChild(root_0, string_literal1069_tree);
                    }

                    pushFollow(FOLLOW_expression_in_yield_statement8101);
                    expression1070=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1070.getTree());

                    char_literal1071=(Token)match(input,SEMI,FOLLOW_SEMI_in_yield_statement8105); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal1071_tree = 
                    (Object)adaptor.create(char_literal1071)
                    ;
                    adaptor.addChild(root_0, char_literal1071_tree);
                    }

                    }
                    break;
                case 2 :
                    // CodeR.CSharp.Parser/src/antlr/cs.g:1308:5: 'break' ';'
                    {
                    string_literal1072=(Token)match(input,107,FOLLOW_107_in_yield_statement8111); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1072_tree = 
                    (Object)adaptor.create(string_literal1072)
                    ;
                    adaptor.addChild(root_0, string_literal1072_tree);
                    }

                    char_literal1073=(Token)match(input,SEMI,FOLLOW_SEMI_in_yield_statement8115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal1073_tree = 
                    (Object)adaptor.create(char_literal1073)
                    ;
                    adaptor.addChild(root_0, char_literal1073_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 298, yield_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "yield_statement"


    public static class predefined_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "predefined_type"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1317:1: predefined_type : ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' );
    public final csParser.predefined_type_return predefined_type() throws RecognitionException {
        csParser.predefined_type_return retval = new csParser.predefined_type_return();
        retval.start = input.LT(1);

        int predefined_type_StartIndex = input.index();

        Object root_0 = null;

        Token set1074=null;

        Object set1074_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 299) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1318:2: ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:
            {
            root_0 = (Object)adaptor.nil();


            set1074=(Token)input.LT(1);

            if ( input.LA(1)==106||input.LA(1)==109||input.LA(1)==111||input.LA(1)==116||input.LA(1)==121||input.LA(1)==131||input.LA(1)==140||input.LA(1)==148||input.LA(1)==153||input.LA(1)==171||input.LA(1)==175||input.LA(1)==179||(input.LA(1) >= 187 && input.LA(1) <= 188)||input.LA(1)==191 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set1074)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 299, predefined_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "predefined_type"


    public static class identifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "identifier"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1335:1: identifier : ( IDENTIFIER | 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' );
    public final csParser.identifier_return identifier() throws RecognitionException {
        csParser.identifier_return retval = new csParser.identifier_return();
        retval.start = input.LT(1);

        int identifier_StartIndex = input.index();

        Object root_0 = null;

        Token set1075=null;

        Object set1075_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 300) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1336:2: ( IDENTIFIER | 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:
            {
            root_0 = (Object)adaptor.nil();


            set1075=(Token)input.LT(1);

            if ( input.LA(1)==IDENTIFIER||input.LA(1)==98||(input.LA(1) >= 100 && input.LA(1) <= 101)||(input.LA(1) >= 103 && input.LA(1) <= 104)||input.LA(1)==108||input.LA(1)==119||input.LA(1)==122||input.LA(1)==124||input.LA(1)==128||input.LA(1)==134||input.LA(1)==137||input.LA(1)==143||(input.LA(1) >= 145 && input.LA(1) <= 146)||(input.LA(1) >= 149 && input.LA(1) <= 150)||input.LA(1)==154||input.LA(1)==156||input.LA(1)==159||input.LA(1)==162||input.LA(1)==164||input.LA(1)==169||(input.LA(1) >= 173 && input.LA(1) <= 174)||input.LA(1)==185||input.LA(1)==192||input.LA(1)==196||input.LA(1)==198 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set1075)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 300, identifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "identifier"


    public static class keyword_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyword"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1368:1: keyword : ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' );
    public final csParser.keyword_return keyword() throws RecognitionException {
        csParser.keyword_return retval = new csParser.keyword_return();
        retval.start = input.LT(1);

        int keyword_StartIndex = input.index();

        Object root_0 = null;

        Token set1076=null;

        Object set1076_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 301) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1369:2: ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:
            {
            root_0 = (Object)adaptor.nil();


            set1076=(Token)input.LT(1);

            if ( input.LA(1)==CATCH||input.LA(1)==ENUM||input.LA(1)==FALSE||input.LA(1)==IF||input.LA(1)==NULL||input.LA(1)==TRUE||input.LA(1)==USING||input.LA(1)==99||input.LA(1)==102||(input.LA(1) >= 105 && input.LA(1) <= 107)||(input.LA(1) >= 109 && input.LA(1) <= 118)||(input.LA(1) >= 120 && input.LA(1) <= 121)||input.LA(1)==123||(input.LA(1) >= 125 && input.LA(1) <= 127)||(input.LA(1) >= 129 && input.LA(1) <= 133)||input.LA(1)==136||(input.LA(1) >= 138 && input.LA(1) <= 142)||input.LA(1)==144||(input.LA(1) >= 147 && input.LA(1) <= 148)||(input.LA(1) >= 151 && input.LA(1) <= 153)||input.LA(1)==155||(input.LA(1) >= 157 && input.LA(1) <= 158)||input.LA(1)==160||input.LA(1)==163||(input.LA(1) >= 165 && input.LA(1) <= 168)||(input.LA(1) >= 170 && input.LA(1) <= 172)||(input.LA(1) >= 175 && input.LA(1) <= 184)||(input.LA(1) >= 186 && input.LA(1) <= 191)||(input.LA(1) >= 193 && input.LA(1) <= 195) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set1076)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 301, keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyword"


    public static class also_keyword_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "also_keyword"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1447:1: also_keyword : ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'event' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' );
    public final csParser.also_keyword_return also_keyword() throws RecognitionException {
        csParser.also_keyword_return retval = new csParser.also_keyword_return();
        retval.start = input.LT(1);

        int also_keyword_StartIndex = input.index();

        Object root_0 = null;

        Token set1077=null;

        Object set1077_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 302) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1448:2: ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'event' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' )
            // CodeR.CSharp.Parser/src/antlr/cs.g:
            {
            root_0 = (Object)adaptor.nil();


            set1077=(Token)input.LT(1);

            if ( input.LA(1)==98||(input.LA(1) >= 100 && input.LA(1) <= 101)||(input.LA(1) >= 103 && input.LA(1) <= 104)||input.LA(1)==108||input.LA(1)==119||input.LA(1)==122||(input.LA(1) >= 124 && input.LA(1) <= 125)||input.LA(1)==128||input.LA(1)==134||input.LA(1)==137||input.LA(1)==143||(input.LA(1) >= 145 && input.LA(1) <= 146)||(input.LA(1) >= 149 && input.LA(1) <= 150)||input.LA(1)==154||input.LA(1)==156||input.LA(1)==159||input.LA(1)==162||input.LA(1)==164||input.LA(1)==169||(input.LA(1) >= 173 && input.LA(1) <= 174)||input.LA(1)==185||input.LA(1)==192||input.LA(1)==196||input.LA(1)==198 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set1077)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 302, also_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "also_keyword"


    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1480:1: literal : ( Real_literal | NUMBER | Hex_number | Character_literal | STRINGLITERAL | Verbatim_string_literal | TRUE | FALSE | NULL );
    public final csParser.literal_return literal() throws RecognitionException {
        csParser.literal_return retval = new csParser.literal_return();
        retval.start = input.LT(1);

        int literal_StartIndex = input.index();

        Object root_0 = null;

        Token set1078=null;

        Object set1078_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 303) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1480:8: ( Real_literal | NUMBER | Hex_number | Character_literal | STRINGLITERAL | Verbatim_string_literal | TRUE | FALSE | NULL )
            // CodeR.CSharp.Parser/src/antlr/cs.g:
            {
            root_0 = (Object)adaptor.nil();


            set1078=(Token)input.LT(1);

            if ( input.LA(1)==Character_literal||input.LA(1)==FALSE||input.LA(1)==Hex_number||(input.LA(1) >= NULL && input.LA(1) <= NUMBER)||input.LA(1)==Real_literal||input.LA(1)==STRINGLITERAL||input.LA(1)==TRUE||input.LA(1)==Verbatim_string_literal ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set1078)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 303, literal_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "literal"


    public static class assignment_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assignment_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1795:1: assignment_list : ( assignment ';' )+ ;
    public final csParser.assignment_list_return assignment_list() throws RecognitionException {
        csParser.assignment_list_return retval = new csParser.assignment_list_return();
        retval.start = input.LT(1);

        int assignment_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal1080=null;
        csParser.assignment_return assignment1079 =null;


        Object char_literal1080_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 304) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1795:16: ( ( assignment ';' )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1796:2: ( assignment ';' )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:1796:2: ( assignment ';' )+
            int cnt273=0;
            loop273:
            do {
                int alt273=2;
                int LA273_0 = input.LA(1);

                if ( (LA273_0==Character_literal||LA273_0==FALSE||(LA273_0 >= Hex_number && LA273_0 <= IDENTIFIER)||(LA273_0 >= MINUS && LA273_0 <= NUMBER)||LA273_0==Real_literal||LA273_0==STRINGLITERAL||LA273_0==TRUE||LA273_0==Verbatim_string_literal||LA273_0==64||LA273_0==69||(LA273_0 >= 71 && LA273_0 <= 72)||(LA273_0 >= 74 && LA273_0 <= 75)||LA273_0==78||LA273_0==98||(LA273_0 >= 100 && LA273_0 <= 101)||(LA273_0 >= 103 && LA273_0 <= 106)||(LA273_0 >= 108 && LA273_0 <= 109)||(LA273_0 >= 111 && LA273_0 <= 112)||(LA273_0 >= 116 && LA273_0 <= 119)||(LA273_0 >= 121 && LA273_0 <= 122)||LA273_0==124||LA273_0==128||LA273_0==131||LA273_0==134||LA273_0==137||LA273_0==140||LA273_0==143||(LA273_0 >= 145 && LA273_0 <= 146)||(LA273_0 >= 148 && LA273_0 <= 150)||(LA273_0 >= 152 && LA273_0 <= 154)||LA273_0==156||LA273_0==159||LA273_0==162||LA273_0==164||LA273_0==169||LA273_0==171||(LA273_0 >= 173 && LA273_0 <= 176)||LA273_0==179||LA273_0==182||(LA273_0 >= 185 && LA273_0 <= 189)||(LA273_0 >= 191 && LA273_0 <= 192)||LA273_0==196||LA273_0==198||LA273_0==204) ) {
                    alt273=1;
                }


                switch (alt273) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1796:3: assignment ';'
            	    {
            	    pushFollow(FOLLOW_assignment_in_assignment_list11054);
            	    assignment1079=assignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment1079.getTree());

            	    char_literal1080=(Token)match(input,SEMI,FOLLOW_SEMI_in_assignment_list11056); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1080_tree = 
            	    (Object)adaptor.create(char_literal1080)
            	    ;
            	    adaptor.addChild(root_0, char_literal1080_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt273 >= 1 ) break loop273;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(273, input);
                        throw eee;
                }
                cnt273++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 304, assignment_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "assignment_list"


    public static class field_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declarations"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1799:1: field_declarations : ( ( attributes )? ( modifiers )? type field_declaration )+ ;
    public final csParser.field_declarations_return field_declarations() throws RecognitionException {
        csParser.field_declarations_return retval = new csParser.field_declarations_return();
        retval.start = input.LT(1);

        int field_declarations_StartIndex = input.index();

        Object root_0 = null;

        csParser.attributes_return attributes1081 =null;

        csParser.modifiers_return modifiers1082 =null;

        csParser.type_return type1083 =null;

        csParser.field_declaration_return field_declaration1084 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 305) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1799:19: ( ( ( attributes )? ( modifiers )? type field_declaration )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1800:2: ( ( attributes )? ( modifiers )? type field_declaration )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:1800:2: ( ( attributes )? ( modifiers )? type field_declaration )+
            int cnt276=0;
            loop276:
            do {
                int alt276=2;
                int LA276_0 = input.LA(1);

                if ( (LA276_0==IDENTIFIER||LA276_0==94||(LA276_0 >= 98 && LA276_0 <= 101)||(LA276_0 >= 103 && LA276_0 <= 104)||LA276_0==106||(LA276_0 >= 108 && LA276_0 <= 109)||LA276_0==111||LA276_0==116||LA276_0==119||(LA276_0 >= 121 && LA276_0 <= 122)||LA276_0==124||(LA276_0 >= 127 && LA276_0 <= 128)||LA276_0==131||LA276_0==134||LA276_0==137||LA276_0==140||(LA276_0 >= 142 && LA276_0 <= 143)||(LA276_0 >= 145 && LA276_0 <= 146)||(LA276_0 >= 148 && LA276_0 <= 150)||(LA276_0 >= 152 && LA276_0 <= 154)||LA276_0==156||(LA276_0 >= 158 && LA276_0 <= 159)||(LA276_0 >= 162 && LA276_0 <= 167)||LA276_0==169||(LA276_0 >= 171 && LA276_0 <= 175)||(LA276_0 >= 178 && LA276_0 <= 179)||LA276_0==185||(LA276_0 >= 187 && LA276_0 <= 188)||(LA276_0 >= 190 && LA276_0 <= 196)||LA276_0==198) ) {
                    alt276=1;
                }


                switch (alt276) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1800:3: ( attributes )? ( modifiers )? type field_declaration
            	    {
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1800:3: ( attributes )?
            	    int alt274=2;
            	    int LA274_0 = input.LA(1);

            	    if ( (LA274_0==94) ) {
            	        alt274=1;
            	    }
            	    switch (alt274) {
            	        case 1 :
            	            // CodeR.CSharp.Parser/src/antlr/cs.g:1800:3: attributes
            	            {
            	            pushFollow(FOLLOW_attributes_in_field_declarations11070);
            	            attributes1081=attributes();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes1081.getTree());

            	            }
            	            break;

            	    }


            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1800:17: ( modifiers )?
            	    int alt275=2;
            	    int LA275_0 = input.LA(1);

            	    if ( (LA275_0==99||LA275_0==127||LA275_0==142||LA275_0==152||LA275_0==158||LA275_0==163||(LA275_0 >= 165 && LA275_0 <= 167)||LA275_0==172||LA275_0==178||LA275_0==190||LA275_0==193||LA275_0==195) ) {
            	        alt275=1;
            	    }
            	    switch (alt275) {
            	        case 1 :
            	            // CodeR.CSharp.Parser/src/antlr/cs.g:1800:17: modifiers
            	            {
            	            pushFollow(FOLLOW_modifiers_in_field_declarations11075);
            	            modifiers1082=modifiers();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers1082.getTree());

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_type_in_field_declarations11080);
            	    type1083=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type1083.getTree());

            	    pushFollow(FOLLOW_field_declaration_in_field_declarations11084);
            	    field_declaration1084=field_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration1084.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt276 >= 1 ) break loop276;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(276, input);
                        throw eee;
                }
                cnt276++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 305, field_declarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "field_declarations"


    public static class property_declaration_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property_declaration_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1803:1: property_declaration_list : ( ( attributes )? ( modifiers )? type property_declaration )+ ;
    public final csParser.property_declaration_list_return property_declaration_list() throws RecognitionException {
        csParser.property_declaration_list_return retval = new csParser.property_declaration_list_return();
        retval.start = input.LT(1);

        int property_declaration_list_StartIndex = input.index();

        Object root_0 = null;

        csParser.attributes_return attributes1085 =null;

        csParser.modifiers_return modifiers1086 =null;

        csParser.type_return type1087 =null;

        csParser.property_declaration_return property_declaration1088 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 306) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1803:26: ( ( ( attributes )? ( modifiers )? type property_declaration )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1804:2: ( ( attributes )? ( modifiers )? type property_declaration )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:1804:2: ( ( attributes )? ( modifiers )? type property_declaration )+
            int cnt279=0;
            loop279:
            do {
                int alt279=2;
                int LA279_0 = input.LA(1);

                if ( (LA279_0==IDENTIFIER||LA279_0==94||(LA279_0 >= 98 && LA279_0 <= 101)||(LA279_0 >= 103 && LA279_0 <= 104)||LA279_0==106||(LA279_0 >= 108 && LA279_0 <= 109)||LA279_0==111||LA279_0==116||LA279_0==119||(LA279_0 >= 121 && LA279_0 <= 122)||LA279_0==124||(LA279_0 >= 127 && LA279_0 <= 128)||LA279_0==131||LA279_0==134||LA279_0==137||LA279_0==140||(LA279_0 >= 142 && LA279_0 <= 143)||(LA279_0 >= 145 && LA279_0 <= 146)||(LA279_0 >= 148 && LA279_0 <= 150)||(LA279_0 >= 152 && LA279_0 <= 154)||LA279_0==156||(LA279_0 >= 158 && LA279_0 <= 159)||(LA279_0 >= 162 && LA279_0 <= 167)||LA279_0==169||(LA279_0 >= 171 && LA279_0 <= 175)||(LA279_0 >= 178 && LA279_0 <= 179)||LA279_0==185||(LA279_0 >= 187 && LA279_0 <= 188)||(LA279_0 >= 190 && LA279_0 <= 196)||LA279_0==198) ) {
                    alt279=1;
                }


                switch (alt279) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1804:3: ( attributes )? ( modifiers )? type property_declaration
            	    {
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1804:3: ( attributes )?
            	    int alt277=2;
            	    int LA277_0 = input.LA(1);

            	    if ( (LA277_0==94) ) {
            	        alt277=1;
            	    }
            	    switch (alt277) {
            	        case 1 :
            	            // CodeR.CSharp.Parser/src/antlr/cs.g:1804:3: attributes
            	            {
            	            pushFollow(FOLLOW_attributes_in_property_declaration_list11098);
            	            attributes1085=attributes();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes1085.getTree());

            	            }
            	            break;

            	    }


            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1804:17: ( modifiers )?
            	    int alt278=2;
            	    int LA278_0 = input.LA(1);

            	    if ( (LA278_0==99||LA278_0==127||LA278_0==142||LA278_0==152||LA278_0==158||LA278_0==163||(LA278_0 >= 165 && LA278_0 <= 167)||LA278_0==172||LA278_0==178||LA278_0==190||LA278_0==193||LA278_0==195) ) {
            	        alt278=1;
            	    }
            	    switch (alt278) {
            	        case 1 :
            	            // CodeR.CSharp.Parser/src/antlr/cs.g:1804:17: modifiers
            	            {
            	            pushFollow(FOLLOW_modifiers_in_property_declaration_list11103);
            	            modifiers1086=modifiers();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers1086.getTree());

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_type_in_property_declaration_list11108);
            	    type1087=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type1087.getTree());

            	    pushFollow(FOLLOW_property_declaration_in_property_declaration_list11112);
            	    property_declaration1088=property_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, property_declaration1088.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt279 >= 1 ) break loop279;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(279, input);
                        throw eee;
                }
                cnt279++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 306, property_declaration_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "property_declaration_list"


    public static class constant_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constant_declarations"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1807:1: constant_declarations : ( constant_declaration )+ ;
    public final csParser.constant_declarations_return constant_declarations() throws RecognitionException {
        csParser.constant_declarations_return retval = new csParser.constant_declarations_return();
        retval.start = input.LT(1);

        int constant_declarations_StartIndex = input.index();

        Object root_0 = null;

        csParser.constant_declaration_return constant_declaration1089 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 307) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1807:22: ( ( constant_declaration )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1808:2: ( constant_declaration )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:1808:2: ( constant_declaration )+
            int cnt280=0;
            loop280:
            do {
                int alt280=2;
                int LA280_0 = input.LA(1);

                if ( (LA280_0==114) ) {
                    alt280=1;
                }


                switch (alt280) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1808:2: constant_declaration
            	    {
            	    pushFollow(FOLLOW_constant_declaration_in_constant_declarations11125);
            	    constant_declaration1089=constant_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_declaration1089.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt280 >= 1 ) break loop280;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(280, input);
                        throw eee;
                }
                cnt280++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 307, constant_declarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constant_declarations"


    public static class literals_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literals"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1811:1: literals : ( literal )+ ;
    public final csParser.literals_return literals() throws RecognitionException {
        csParser.literals_return retval = new csParser.literals_return();
        retval.start = input.LT(1);

        int literals_StartIndex = input.index();

        Object root_0 = null;

        csParser.literal_return literal1090 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 308) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1811:9: ( ( literal )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1812:2: ( literal )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:1812:2: ( literal )+
            int cnt281=0;
            loop281:
            do {
                int alt281=2;
                int LA281_0 = input.LA(1);

                if ( (LA281_0==Character_literal||LA281_0==FALSE||LA281_0==Hex_number||(LA281_0 >= NULL && LA281_0 <= NUMBER)||LA281_0==Real_literal||LA281_0==STRINGLITERAL||LA281_0==TRUE||LA281_0==Verbatim_string_literal) ) {
                    alt281=1;
                }


                switch (alt281) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1812:2: literal
            	    {
            	    pushFollow(FOLLOW_literal_in_literals11137);
            	    literal1090=literal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal1090.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt281 >= 1 ) break loop281;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(281, input);
                        throw eee;
                }
                cnt281++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 308, literals_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "literals"


    public static class delegate_declaration_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "delegate_declaration_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1815:1: delegate_declaration_list : ( ( attributes )? ( modifiers )? delegate_declaration )+ ;
    public final csParser.delegate_declaration_list_return delegate_declaration_list() throws RecognitionException {
        csParser.delegate_declaration_list_return retval = new csParser.delegate_declaration_list_return();
        retval.start = input.LT(1);

        int delegate_declaration_list_StartIndex = input.index();

        Object root_0 = null;

        csParser.attributes_return attributes1091 =null;

        csParser.modifiers_return modifiers1092 =null;

        csParser.delegate_declaration_return delegate_declaration1093 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 309) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1815:26: ( ( ( attributes )? ( modifiers )? delegate_declaration )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1816:2: ( ( attributes )? ( modifiers )? delegate_declaration )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:1816:2: ( ( attributes )? ( modifiers )? delegate_declaration )+
            int cnt284=0;
            loop284:
            do {
                int alt284=2;
                int LA284_0 = input.LA(1);

                if ( (LA284_0==94||LA284_0==99||LA284_0==118||LA284_0==127||LA284_0==142||LA284_0==152||LA284_0==158||LA284_0==163||(LA284_0 >= 165 && LA284_0 <= 167)||LA284_0==172||LA284_0==178||LA284_0==190||LA284_0==193||LA284_0==195) ) {
                    alt284=1;
                }


                switch (alt284) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1816:3: ( attributes )? ( modifiers )? delegate_declaration
            	    {
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1816:3: ( attributes )?
            	    int alt282=2;
            	    int LA282_0 = input.LA(1);

            	    if ( (LA282_0==94) ) {
            	        alt282=1;
            	    }
            	    switch (alt282) {
            	        case 1 :
            	            // CodeR.CSharp.Parser/src/antlr/cs.g:1816:3: attributes
            	            {
            	            pushFollow(FOLLOW_attributes_in_delegate_declaration_list11150);
            	            attributes1091=attributes();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes1091.getTree());

            	            }
            	            break;

            	    }


            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1816:17: ( modifiers )?
            	    int alt283=2;
            	    int LA283_0 = input.LA(1);

            	    if ( (LA283_0==99||LA283_0==127||LA283_0==142||LA283_0==152||LA283_0==158||LA283_0==163||(LA283_0 >= 165 && LA283_0 <= 167)||LA283_0==172||LA283_0==178||LA283_0==190||LA283_0==193||LA283_0==195) ) {
            	        alt283=1;
            	    }
            	    switch (alt283) {
            	        case 1 :
            	            // CodeR.CSharp.Parser/src/antlr/cs.g:1816:17: modifiers
            	            {
            	            pushFollow(FOLLOW_modifiers_in_delegate_declaration_list11155);
            	            modifiers1092=modifiers();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers1092.getTree());

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_delegate_declaration_in_delegate_declaration_list11160);
            	    delegate_declaration1093=delegate_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, delegate_declaration1093.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt284 >= 1 ) break loop284;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(284, input);
                        throw eee;
                }
                cnt284++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 309, delegate_declaration_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "delegate_declaration_list"


    public static class local_variable_declaration_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "local_variable_declaration_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1819:1: local_variable_declaration_list : ( local_variable_declaration ';' )+ ;
    public final csParser.local_variable_declaration_list_return local_variable_declaration_list() throws RecognitionException {
        csParser.local_variable_declaration_list_return retval = new csParser.local_variable_declaration_list_return();
        retval.start = input.LT(1);

        int local_variable_declaration_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal1095=null;
        csParser.local_variable_declaration_return local_variable_declaration1094 =null;


        Object char_literal1095_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 310) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1819:32: ( ( local_variable_declaration ';' )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1820:2: ( local_variable_declaration ';' )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:1820:2: ( local_variable_declaration ';' )+
            int cnt285=0;
            loop285:
            do {
                int alt285=2;
                int LA285_0 = input.LA(1);

                if ( (LA285_0==IDENTIFIER||LA285_0==98||(LA285_0 >= 100 && LA285_0 <= 101)||(LA285_0 >= 103 && LA285_0 <= 104)||LA285_0==106||(LA285_0 >= 108 && LA285_0 <= 109)||LA285_0==111||LA285_0==116||LA285_0==119||(LA285_0 >= 121 && LA285_0 <= 122)||LA285_0==124||LA285_0==128||LA285_0==131||LA285_0==134||LA285_0==137||LA285_0==140||LA285_0==143||(LA285_0 >= 145 && LA285_0 <= 146)||(LA285_0 >= 148 && LA285_0 <= 150)||(LA285_0 >= 153 && LA285_0 <= 154)||LA285_0==156||LA285_0==159||LA285_0==162||LA285_0==164||LA285_0==169||LA285_0==171||(LA285_0 >= 173 && LA285_0 <= 175)||LA285_0==179||LA285_0==185||(LA285_0 >= 187 && LA285_0 <= 188)||(LA285_0 >= 191 && LA285_0 <= 192)||LA285_0==194||LA285_0==196||LA285_0==198) ) {
                    alt285=1;
                }


                switch (alt285) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1820:3: local_variable_declaration ';'
            	    {
            	    pushFollow(FOLLOW_local_variable_declaration_in_local_variable_declaration_list11174);
            	    local_variable_declaration1094=local_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_declaration1094.getTree());

            	    char_literal1095=(Token)match(input,SEMI,FOLLOW_SEMI_in_local_variable_declaration_list11176); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1095_tree = 
            	    (Object)adaptor.create(char_literal1095)
            	    ;
            	    adaptor.addChild(root_0, char_literal1095_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt285 >= 1 ) break loop285;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(285, input);
                        throw eee;
                }
                cnt285++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 310, local_variable_declaration_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "local_variable_declaration_list"


    public static class local_variable_initializer_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "local_variable_initializer_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1823:1: local_variable_initializer_list : ( local_variable_initializer ';' )+ ;
    public final csParser.local_variable_initializer_list_return local_variable_initializer_list() throws RecognitionException {
        csParser.local_variable_initializer_list_return retval = new csParser.local_variable_initializer_list_return();
        retval.start = input.LT(1);

        int local_variable_initializer_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal1097=null;
        csParser.local_variable_initializer_return local_variable_initializer1096 =null;


        Object char_literal1097_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 311) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1823:32: ( ( local_variable_initializer ';' )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1824:2: ( local_variable_initializer ';' )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:1824:2: ( local_variable_initializer ';' )+
            int cnt286=0;
            loop286:
            do {
                int alt286=2;
                int LA286_0 = input.LA(1);

                if ( (LA286_0==Character_literal||LA286_0==FALSE||(LA286_0 >= Hex_number && LA286_0 <= IDENTIFIER)||(LA286_0 >= MINUS && LA286_0 <= NUMBER)||LA286_0==Real_literal||LA286_0==STRINGLITERAL||LA286_0==TRUE||LA286_0==Verbatim_string_literal||LA286_0==64||LA286_0==69||(LA286_0 >= 71 && LA286_0 <= 72)||(LA286_0 >= 74 && LA286_0 <= 75)||LA286_0==78||LA286_0==98||(LA286_0 >= 100 && LA286_0 <= 101)||(LA286_0 >= 103 && LA286_0 <= 106)||(LA286_0 >= 108 && LA286_0 <= 109)||(LA286_0 >= 111 && LA286_0 <= 112)||(LA286_0 >= 116 && LA286_0 <= 119)||(LA286_0 >= 121 && LA286_0 <= 122)||LA286_0==124||LA286_0==128||LA286_0==131||LA286_0==134||LA286_0==137||LA286_0==140||LA286_0==143||(LA286_0 >= 145 && LA286_0 <= 146)||(LA286_0 >= 148 && LA286_0 <= 150)||(LA286_0 >= 152 && LA286_0 <= 154)||LA286_0==156||LA286_0==159||LA286_0==162||LA286_0==164||LA286_0==169||LA286_0==171||(LA286_0 >= 173 && LA286_0 <= 177)||LA286_0==179||LA286_0==182||(LA286_0 >= 185 && LA286_0 <= 189)||(LA286_0 >= 191 && LA286_0 <= 192)||LA286_0==196||(LA286_0 >= 198 && LA286_0 <= 199)||LA286_0==204) ) {
                    alt286=1;
                }


                switch (alt286) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1824:3: local_variable_initializer ';'
            	    {
            	    pushFollow(FOLLOW_local_variable_initializer_in_local_variable_initializer_list11190);
            	    local_variable_initializer1096=local_variable_initializer();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_initializer1096.getTree());

            	    char_literal1097=(Token)match(input,SEMI,FOLLOW_SEMI_in_local_variable_initializer_list11192); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1097_tree = 
            	    (Object)adaptor.create(char_literal1097)
            	    ;
            	    adaptor.addChild(root_0, char_literal1097_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt286 >= 1 ) break loop286;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(286, input);
                        throw eee;
                }
                cnt286++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 311, local_variable_initializer_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "local_variable_initializer_list"


    public static class expression_list_test_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression_list_test"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1827:1: expression_list_test : ( expression ';' )+ ;
    public final csParser.expression_list_test_return expression_list_test() throws RecognitionException {
        csParser.expression_list_test_return retval = new csParser.expression_list_test_return();
        retval.start = input.LT(1);

        int expression_list_test_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal1099=null;
        csParser.expression_return expression1098 =null;


        Object char_literal1099_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 312) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1827:21: ( ( expression ';' )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1828:2: ( expression ';' )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:1828:2: ( expression ';' )+
            int cnt287=0;
            loop287:
            do {
                int alt287=2;
                int LA287_0 = input.LA(1);

                if ( (LA287_0==Character_literal||LA287_0==FALSE||(LA287_0 >= Hex_number && LA287_0 <= IDENTIFIER)||(LA287_0 >= MINUS && LA287_0 <= NUMBER)||LA287_0==Real_literal||LA287_0==STRINGLITERAL||LA287_0==TRUE||LA287_0==Verbatim_string_literal||LA287_0==64||LA287_0==69||(LA287_0 >= 71 && LA287_0 <= 72)||(LA287_0 >= 74 && LA287_0 <= 75)||LA287_0==78||LA287_0==98||(LA287_0 >= 100 && LA287_0 <= 101)||(LA287_0 >= 103 && LA287_0 <= 106)||(LA287_0 >= 108 && LA287_0 <= 109)||(LA287_0 >= 111 && LA287_0 <= 112)||(LA287_0 >= 116 && LA287_0 <= 119)||(LA287_0 >= 121 && LA287_0 <= 122)||LA287_0==124||LA287_0==128||LA287_0==131||LA287_0==134||LA287_0==137||LA287_0==140||LA287_0==143||(LA287_0 >= 145 && LA287_0 <= 146)||(LA287_0 >= 148 && LA287_0 <= 150)||(LA287_0 >= 152 && LA287_0 <= 154)||LA287_0==156||LA287_0==159||LA287_0==162||LA287_0==164||LA287_0==169||LA287_0==171||(LA287_0 >= 173 && LA287_0 <= 176)||LA287_0==179||LA287_0==182||(LA287_0 >= 185 && LA287_0 <= 189)||(LA287_0 >= 191 && LA287_0 <= 192)||LA287_0==196||LA287_0==198||LA287_0==204) ) {
                    alt287=1;
                }


                switch (alt287) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1828:3: expression ';'
            	    {
            	    pushFollow(FOLLOW_expression_in_expression_list_test11207);
            	    expression1098=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1098.getTree());

            	    char_literal1099=(Token)match(input,SEMI,FOLLOW_SEMI_in_expression_list_test11209); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1099_tree = 
            	    (Object)adaptor.create(char_literal1099)
            	    ;
            	    adaptor.addChild(root_0, char_literal1099_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt287 >= 1 ) break loop287;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(287, input);
                        throw eee;
                }
                cnt287++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 312, expression_list_test_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expression_list_test"


    public static class unary_expression_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unary_expression_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1831:1: unary_expression_list : ( unary_expression ';' )+ ;
    public final csParser.unary_expression_list_return unary_expression_list() throws RecognitionException {
        csParser.unary_expression_list_return retval = new csParser.unary_expression_list_return();
        retval.start = input.LT(1);

        int unary_expression_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal1101=null;
        csParser.unary_expression_return unary_expression1100 =null;


        Object char_literal1101_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 313) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1831:22: ( ( unary_expression ';' )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1832:2: ( unary_expression ';' )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:1832:2: ( unary_expression ';' )+
            int cnt288=0;
            loop288:
            do {
                int alt288=2;
                int LA288_0 = input.LA(1);

                if ( (LA288_0==Character_literal||LA288_0==FALSE||(LA288_0 >= Hex_number && LA288_0 <= IDENTIFIER)||(LA288_0 >= MINUS && LA288_0 <= NUMBER)||LA288_0==Real_literal||LA288_0==STRINGLITERAL||LA288_0==TRUE||LA288_0==Verbatim_string_literal||LA288_0==64||LA288_0==69||(LA288_0 >= 71 && LA288_0 <= 72)||(LA288_0 >= 74 && LA288_0 <= 75)||LA288_0==78||LA288_0==98||(LA288_0 >= 100 && LA288_0 <= 101)||(LA288_0 >= 103 && LA288_0 <= 106)||(LA288_0 >= 108 && LA288_0 <= 109)||(LA288_0 >= 111 && LA288_0 <= 112)||(LA288_0 >= 116 && LA288_0 <= 119)||(LA288_0 >= 121 && LA288_0 <= 122)||LA288_0==124||LA288_0==128||LA288_0==131||LA288_0==134||LA288_0==137||LA288_0==140||LA288_0==143||(LA288_0 >= 145 && LA288_0 <= 146)||(LA288_0 >= 148 && LA288_0 <= 150)||(LA288_0 >= 152 && LA288_0 <= 154)||LA288_0==156||LA288_0==159||LA288_0==162||LA288_0==164||LA288_0==169||LA288_0==171||(LA288_0 >= 173 && LA288_0 <= 176)||LA288_0==179||LA288_0==182||(LA288_0 >= 185 && LA288_0 <= 189)||(LA288_0 >= 191 && LA288_0 <= 192)||LA288_0==196||LA288_0==198||LA288_0==204) ) {
                    alt288=1;
                }


                switch (alt288) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1832:3: unary_expression ';'
            	    {
            	    pushFollow(FOLLOW_unary_expression_in_unary_expression_list11223);
            	    unary_expression1100=unary_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression1100.getTree());

            	    char_literal1101=(Token)match(input,SEMI,FOLLOW_SEMI_in_unary_expression_list11225); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1101_tree = 
            	    (Object)adaptor.create(char_literal1101)
            	    ;
            	    adaptor.addChild(root_0, char_literal1101_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt288 >= 1 ) break loop288;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(288, input);
                        throw eee;
                }
                cnt288++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 313, unary_expression_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unary_expression_list"


    public static class invocation_expression_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "invocation_expression_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1835:1: invocation_expression_list : ( invocation_expression ';' )+ ;
    public final csParser.invocation_expression_list_return invocation_expression_list() throws RecognitionException {
        csParser.invocation_expression_list_return retval = new csParser.invocation_expression_list_return();
        retval.start = input.LT(1);

        int invocation_expression_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal1103=null;
        csParser.invocation_expression_return invocation_expression1102 =null;


        Object char_literal1103_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 314) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1835:27: ( ( invocation_expression ';' )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1836:2: ( invocation_expression ';' )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:1836:2: ( invocation_expression ';' )+
            int cnt289=0;
            loop289:
            do {
                int alt289=2;
                int LA289_0 = input.LA(1);

                if ( (LA289_0==IDENTIFIER||LA289_0==98||(LA289_0 >= 100 && LA289_0 <= 101)||(LA289_0 >= 103 && LA289_0 <= 106)||(LA289_0 >= 108 && LA289_0 <= 109)||LA289_0==111||LA289_0==116||LA289_0==119||(LA289_0 >= 121 && LA289_0 <= 122)||LA289_0==124||LA289_0==128||LA289_0==131||LA289_0==134||LA289_0==137||LA289_0==140||LA289_0==143||(LA289_0 >= 145 && LA289_0 <= 146)||(LA289_0 >= 148 && LA289_0 <= 150)||(LA289_0 >= 153 && LA289_0 <= 154)||LA289_0==156||LA289_0==159||LA289_0==162||LA289_0==164||LA289_0==169||LA289_0==171||(LA289_0 >= 173 && LA289_0 <= 175)||LA289_0==179||LA289_0==182||(LA289_0 >= 185 && LA289_0 <= 188)||(LA289_0 >= 191 && LA289_0 <= 192)||LA289_0==196||LA289_0==198) ) {
                    alt289=1;
                }


                switch (alt289) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1836:3: invocation_expression ';'
            	    {
            	    pushFollow(FOLLOW_invocation_expression_in_invocation_expression_list11239);
            	    invocation_expression1102=invocation_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, invocation_expression1102.getTree());

            	    char_literal1103=(Token)match(input,SEMI,FOLLOW_SEMI_in_invocation_expression_list11241); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1103_tree = 
            	    (Object)adaptor.create(char_literal1103)
            	    ;
            	    adaptor.addChild(root_0, char_literal1103_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt289 >= 1 ) break loop289;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(289, input);
                        throw eee;
                }
                cnt289++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 314, invocation_expression_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "invocation_expression_list"


    public static class primary_expression_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "primary_expression_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1839:1: primary_expression_list : ( primary_expression ';' )+ ;
    public final csParser.primary_expression_list_return primary_expression_list() throws RecognitionException {
        csParser.primary_expression_list_return retval = new csParser.primary_expression_list_return();
        retval.start = input.LT(1);

        int primary_expression_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal1105=null;
        csParser.primary_expression_return primary_expression1104 =null;


        Object char_literal1105_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 315) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1839:24: ( ( primary_expression ';' )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1840:2: ( primary_expression ';' )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:1840:2: ( primary_expression ';' )+
            int cnt290=0;
            loop290:
            do {
                int alt290=2;
                int LA290_0 = input.LA(1);

                if ( (LA290_0==Character_literal||LA290_0==FALSE||(LA290_0 >= Hex_number && LA290_0 <= IDENTIFIER)||(LA290_0 >= NULL && LA290_0 <= NUMBER)||LA290_0==Real_literal||LA290_0==STRINGLITERAL||LA290_0==TRUE||LA290_0==Verbatim_string_literal||LA290_0==71||LA290_0==98||(LA290_0 >= 100 && LA290_0 <= 101)||(LA290_0 >= 103 && LA290_0 <= 106)||(LA290_0 >= 108 && LA290_0 <= 109)||(LA290_0 >= 111 && LA290_0 <= 112)||(LA290_0 >= 116 && LA290_0 <= 119)||(LA290_0 >= 121 && LA290_0 <= 122)||LA290_0==124||LA290_0==128||LA290_0==131||LA290_0==134||LA290_0==137||LA290_0==140||LA290_0==143||(LA290_0 >= 145 && LA290_0 <= 146)||(LA290_0 >= 148 && LA290_0 <= 150)||(LA290_0 >= 152 && LA290_0 <= 154)||LA290_0==156||LA290_0==159||LA290_0==162||LA290_0==164||LA290_0==169||LA290_0==171||(LA290_0 >= 173 && LA290_0 <= 176)||LA290_0==179||LA290_0==182||(LA290_0 >= 185 && LA290_0 <= 189)||(LA290_0 >= 191 && LA290_0 <= 192)||LA290_0==196||LA290_0==198) ) {
                    alt290=1;
                }


                switch (alt290) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1840:3: primary_expression ';'
            	    {
            	    pushFollow(FOLLOW_primary_expression_in_primary_expression_list11255);
            	    primary_expression1104=primary_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_expression1104.getTree());

            	    char_literal1105=(Token)match(input,SEMI,FOLLOW_SEMI_in_primary_expression_list11257); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1105_tree = 
            	    (Object)adaptor.create(char_literal1105)
            	    ;
            	    adaptor.addChild(root_0, char_literal1105_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt290 >= 1 ) break loop290;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(290, input);
                        throw eee;
                }
                cnt290++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 315, primary_expression_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "primary_expression_list"


    public static class non_assignment_expression_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "non_assignment_expression_list"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1843:1: non_assignment_expression_list : ( non_assignment_expression ';' )+ ;
    public final csParser.non_assignment_expression_list_return non_assignment_expression_list() throws RecognitionException {
        csParser.non_assignment_expression_list_return retval = new csParser.non_assignment_expression_list_return();
        retval.start = input.LT(1);

        int non_assignment_expression_list_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal1107=null;
        csParser.non_assignment_expression_return non_assignment_expression1106 =null;


        Object char_literal1107_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 316) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1843:31: ( ( non_assignment_expression ';' )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1844:2: ( non_assignment_expression ';' )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:1844:2: ( non_assignment_expression ';' )+
            int cnt291=0;
            loop291:
            do {
                int alt291=2;
                int LA291_0 = input.LA(1);

                if ( (LA291_0==Character_literal||LA291_0==FALSE||(LA291_0 >= Hex_number && LA291_0 <= IDENTIFIER)||(LA291_0 >= MINUS && LA291_0 <= NUMBER)||LA291_0==Real_literal||LA291_0==STRINGLITERAL||LA291_0==TRUE||LA291_0==Verbatim_string_literal||LA291_0==64||LA291_0==69||(LA291_0 >= 71 && LA291_0 <= 72)||(LA291_0 >= 74 && LA291_0 <= 75)||LA291_0==78||LA291_0==98||(LA291_0 >= 100 && LA291_0 <= 101)||(LA291_0 >= 103 && LA291_0 <= 106)||(LA291_0 >= 108 && LA291_0 <= 109)||(LA291_0 >= 111 && LA291_0 <= 112)||(LA291_0 >= 116 && LA291_0 <= 119)||(LA291_0 >= 121 && LA291_0 <= 122)||LA291_0==124||LA291_0==128||LA291_0==131||LA291_0==134||LA291_0==137||LA291_0==140||LA291_0==143||(LA291_0 >= 145 && LA291_0 <= 146)||(LA291_0 >= 148 && LA291_0 <= 150)||(LA291_0 >= 152 && LA291_0 <= 154)||LA291_0==156||LA291_0==159||LA291_0==162||LA291_0==164||LA291_0==169||LA291_0==171||(LA291_0 >= 173 && LA291_0 <= 176)||LA291_0==179||LA291_0==182||(LA291_0 >= 185 && LA291_0 <= 189)||(LA291_0 >= 191 && LA291_0 <= 192)||LA291_0==196||LA291_0==198||LA291_0==204) ) {
                    alt291=1;
                }


                switch (alt291) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1844:3: non_assignment_expression ';'
            	    {
            	    pushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression_list11271);
            	    non_assignment_expression1106=non_assignment_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, non_assignment_expression1106.getTree());

            	    char_literal1107=(Token)match(input,SEMI,FOLLOW_SEMI_in_non_assignment_expression_list11273); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1107_tree = 
            	    (Object)adaptor.create(char_literal1107)
            	    ;
            	    adaptor.addChild(root_0, char_literal1107_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt291 >= 1 ) break loop291;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(291, input);
                        throw eee;
                }
                cnt291++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 316, non_assignment_expression_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "non_assignment_expression_list"


    public static class method_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declarations"
    // CodeR.CSharp.Parser/src/antlr/cs.g:1847:1: method_declarations : ( ( modifiers )? ( 'void' | type ) method_declaration )+ ;
    public final csParser.method_declarations_return method_declarations() throws RecognitionException {
        csParser.method_declarations_return retval = new csParser.method_declarations_return();
        retval.start = input.LT(1);

        int method_declarations_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1109=null;
        csParser.modifiers_return modifiers1108 =null;

        csParser.type_return type1110 =null;

        csParser.method_declaration_return method_declaration1111 =null;


        Object string_literal1109_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 317) ) { return retval; }

            // CodeR.CSharp.Parser/src/antlr/cs.g:1847:20: ( ( ( modifiers )? ( 'void' | type ) method_declaration )+ )
            // CodeR.CSharp.Parser/src/antlr/cs.g:1848:2: ( ( modifiers )? ( 'void' | type ) method_declaration )+
            {
            root_0 = (Object)adaptor.nil();


            // CodeR.CSharp.Parser/src/antlr/cs.g:1848:2: ( ( modifiers )? ( 'void' | type ) method_declaration )+
            int cnt294=0;
            loop294:
            do {
                int alt294=2;
                int LA294_0 = input.LA(1);

                if ( (LA294_0==IDENTIFIER||(LA294_0 >= 98 && LA294_0 <= 101)||(LA294_0 >= 103 && LA294_0 <= 104)||LA294_0==106||(LA294_0 >= 108 && LA294_0 <= 109)||LA294_0==111||LA294_0==116||LA294_0==119||(LA294_0 >= 121 && LA294_0 <= 122)||LA294_0==124||(LA294_0 >= 127 && LA294_0 <= 128)||LA294_0==131||LA294_0==134||LA294_0==137||LA294_0==140||(LA294_0 >= 142 && LA294_0 <= 143)||(LA294_0 >= 145 && LA294_0 <= 146)||(LA294_0 >= 148 && LA294_0 <= 150)||(LA294_0 >= 152 && LA294_0 <= 154)||LA294_0==156||(LA294_0 >= 158 && LA294_0 <= 159)||(LA294_0 >= 162 && LA294_0 <= 167)||LA294_0==169||(LA294_0 >= 171 && LA294_0 <= 175)||(LA294_0 >= 178 && LA294_0 <= 179)||LA294_0==185||(LA294_0 >= 187 && LA294_0 <= 188)||(LA294_0 >= 190 && LA294_0 <= 196)||LA294_0==198) ) {
                    alt294=1;
                }


                switch (alt294) {
            	case 1 :
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1848:3: ( modifiers )? ( 'void' | type ) method_declaration
            	    {
            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1848:3: ( modifiers )?
            	    int alt292=2;
            	    int LA292_0 = input.LA(1);

            	    if ( (LA292_0==99||LA292_0==127||LA292_0==142||LA292_0==152||LA292_0==158||LA292_0==163||(LA292_0 >= 165 && LA292_0 <= 167)||LA292_0==172||LA292_0==178||LA292_0==190||LA292_0==193||LA292_0==195) ) {
            	        alt292=1;
            	    }
            	    switch (alt292) {
            	        case 1 :
            	            // CodeR.CSharp.Parser/src/antlr/cs.g:1848:3: modifiers
            	            {
            	            pushFollow(FOLLOW_modifiers_in_method_declarations11287);
            	            modifiers1108=modifiers();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers1108.getTree());

            	            }
            	            break;

            	    }


            	    // CodeR.CSharp.Parser/src/antlr/cs.g:1848:14: ( 'void' | type )
            	    int alt293=2;
            	    int LA293_0 = input.LA(1);

            	    if ( (LA293_0==194) ) {
            	        int LA293_1 = input.LA(2);

            	        if ( (LA293_1==Character_literal||LA293_1==FALSE||(LA293_1 >= Hex_number && LA293_1 <= IDENTIFIER)||(LA293_1 >= NULL && LA293_1 <= NUMBER)||LA293_1==Real_literal||LA293_1==STRINGLITERAL||LA293_1==TRUE||LA293_1==Verbatim_string_literal||LA293_1==98||(LA293_1 >= 100 && LA293_1 <= 101)||(LA293_1 >= 103 && LA293_1 <= 104)||LA293_1==106||(LA293_1 >= 108 && LA293_1 <= 109)||LA293_1==111||LA293_1==116||LA293_1==119||(LA293_1 >= 121 && LA293_1 <= 122)||LA293_1==124||LA293_1==128||LA293_1==131||LA293_1==134||LA293_1==137||LA293_1==140||LA293_1==143||(LA293_1 >= 145 && LA293_1 <= 146)||(LA293_1 >= 148 && LA293_1 <= 150)||(LA293_1 >= 153 && LA293_1 <= 154)||LA293_1==156||LA293_1==159||LA293_1==162||LA293_1==164||LA293_1==169||LA293_1==171||(LA293_1 >= 173 && LA293_1 <= 175)||LA293_1==179||LA293_1==185||(LA293_1 >= 187 && LA293_1 <= 188)||(LA293_1 >= 191 && LA293_1 <= 192)||LA293_1==196||LA293_1==198) ) {
            	            alt293=1;
            	        }
            	        else if ( (LA293_1==72) ) {
            	            alt293=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 293, 1, input);

            	            throw nvae;

            	        }
            	    }
            	    else if ( (LA293_0==IDENTIFIER||LA293_0==98||(LA293_0 >= 100 && LA293_0 <= 101)||(LA293_0 >= 103 && LA293_0 <= 104)||LA293_0==106||(LA293_0 >= 108 && LA293_0 <= 109)||LA293_0==111||LA293_0==116||LA293_0==119||(LA293_0 >= 121 && LA293_0 <= 122)||LA293_0==124||LA293_0==128||LA293_0==131||LA293_0==134||LA293_0==137||LA293_0==140||LA293_0==143||(LA293_0 >= 145 && LA293_0 <= 146)||(LA293_0 >= 148 && LA293_0 <= 150)||(LA293_0 >= 153 && LA293_0 <= 154)||LA293_0==156||LA293_0==159||LA293_0==162||LA293_0==164||LA293_0==169||LA293_0==171||(LA293_0 >= 173 && LA293_0 <= 175)||LA293_0==179||LA293_0==185||(LA293_0 >= 187 && LA293_0 <= 188)||(LA293_0 >= 191 && LA293_0 <= 192)||LA293_0==196||LA293_0==198) ) {
            	        alt293=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 293, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt293) {
            	        case 1 :
            	            // CodeR.CSharp.Parser/src/antlr/cs.g:1848:15: 'void'
            	            {
            	            string_literal1109=(Token)match(input,194,FOLLOW_194_in_method_declarations11291); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal1109_tree = 
            	            (Object)adaptor.create(string_literal1109)
            	            ;
            	            adaptor.addChild(root_0, string_literal1109_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // CodeR.CSharp.Parser/src/antlr/cs.g:1848:24: type
            	            {
            	            pushFollow(FOLLOW_type_in_method_declarations11295);
            	            type1110=type();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, type1110.getTree());

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_method_declaration_in_method_declarations11298);
            	    method_declaration1111=method_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration1111.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt294 >= 1 ) break loop294;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(294, input);
                        throw eee;
                }
                cnt294++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 317, method_declarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "method_declarations"

    // $ANTLR start synpred1_cs
    public final void synpred1_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:97:4: ( 'partial' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:97:5: 'partial'
        {
        match(input,161,FOLLOW_161_in_synpred1_cs335); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_cs

    // $ANTLR start synpred2_cs
    public final void synpred2_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:155:6: ( member_name '(' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:155:7: member_name '('
        {
        pushFollow(FOLLOW_member_name_in_synpred2_cs649);
        member_name();

        state._fsp--;
        if (state.failed) return ;

        match(input,71,FOLLOW_71_in_synpred2_cs653); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_cs

    // $ANTLR start synpred3_cs
    public final void synpred3_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:156:11: ( member_name '{' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:156:12: member_name '{'
        {
        pushFollow(FOLLOW_member_name_in_synpred3_cs671);
        member_name();

        state._fsp--;
        if (state.failed) return ;

        match(input,199,FOLLOW_199_in_synpred3_cs675); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_cs

    // $ANTLR start synpred4_cs
    public final void synpred4_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:157:7: ( member_name '.' 'this' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:157:8: member_name '.' 'this'
        {
        pushFollow(FOLLOW_member_name_in_synpred4_cs689);
        member_name();

        state._fsp--;
        if (state.failed) return ;

        match(input,DOT,FOLLOW_DOT_in_synpred4_cs693); if (state.failed) return ;

        match(input,182,FOLLOW_182_in_synpred4_cs697); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_cs

    // $ANTLR start synpred5_cs
    public final void synpred5_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:175:4: ( 'this' brackets )
        // CodeR.CSharp.Parser/src/antlr/cs.g:175:5: 'this' brackets
        {
        match(input,182,FOLLOW_182_in_synpred5_cs815); if (state.failed) return ;

        pushFollow(FOLLOW_brackets_in_synpred5_cs817);
        brackets();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_cs

    // $ANTLR start synpred6_cs
    public final void synpred6_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:176:4: ( 'base' brackets )
        // CodeR.CSharp.Parser/src/antlr/cs.g:176:5: 'base' brackets
        {
        match(input,105,FOLLOW_105_in_synpred6_cs837); if (state.failed) return ;

        pushFollow(FOLLOW_brackets_in_synpred6_cs839);
        brackets();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred6_cs

    // $ANTLR start synpred7_cs
    public final void synpred7_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:180:5: ( object_creation_expression ( '.' | '->' | '[' ) )
        // CodeR.CSharp.Parser/src/antlr/cs.g:180:6: object_creation_expression ( '.' | '->' | '[' )
        {
        pushFollow(FOLLOW_object_creation_expression_in_synpred7_cs878);
        object_creation_expression();

        state._fsp--;
        if (state.failed) return ;

        if ( input.LA(1)==DOT||input.LA(1)==PTR||input.LA(1)==94 ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred7_cs

    // $ANTLR start synpred8_cs
    public final void synpred8_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:183:6: ( delegate_creation_expression )
        // CodeR.CSharp.Parser/src/antlr/cs.g:183:7: delegate_creation_expression
        {
        pushFollow(FOLLOW_delegate_creation_expression_in_synpred8_cs917);
        delegate_creation_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_cs

    // $ANTLR start synpred9_cs
    public final void synpred9_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:196:4: ( identifier '<' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:196:5: identifier '<'
        {
        pushFollow(FOLLOW_identifier_in_synpred9_cs1045);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        match(input,84,FOLLOW_84_in_synpred9_cs1050); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_cs

    // $ANTLR start synpred10_cs
    public final void synpred10_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:258:4: ( '(' type ')' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:258:5: '(' type ')'
        {
        match(input,71,FOLLOW_71_in_synpred10_cs1337); if (state.failed) return ;

        pushFollow(FOLLOW_type_in_synpred10_cs1341);
        type();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred10_cs1345); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_cs

    // $ANTLR start synpred11_cs
    public final void synpred11_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:306:4: ( array_creation_expression )
        // CodeR.CSharp.Parser/src/antlr/cs.g:306:5: array_creation_expression
        {
        pushFollow(FOLLOW_array_creation_expression_in_synpred11_cs1606);
        array_creation_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_cs

    // $ANTLR start synpred12_cs
    public final void synpred12_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:321:10: ( arguments ( '[' | '.' | '->' ) )
        // CodeR.CSharp.Parser/src/antlr/cs.g:321:11: arguments ( '[' | '.' | '->' )
        {
        pushFollow(FOLLOW_arguments_in_synpred12_cs1716);
        arguments();

        state._fsp--;
        if (state.failed) return ;

        if ( input.LA(1)==DOT||input.LA(1)==PTR||input.LA(1)==94 ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred12_cs

    // $ANTLR start synpred13_cs
    public final void synpred13_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:438:20: ( unbound_type_name )
        // CodeR.CSharp.Parser/src/antlr/cs.g:438:21: unbound_type_name
        {
        pushFollow(FOLLOW_unbound_type_name_in_synpred13_cs2326);
        unbound_type_name();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_cs

    // $ANTLR start synpred14_cs
    public final void synpred14_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:448:5: ( generic_dimension_specifier '.' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:448:6: generic_dimension_specifier '.'
        {
        pushFollow(FOLLOW_generic_dimension_specifier_in_synpred14_cs2384);
        generic_dimension_specifier();

        state._fsp--;
        if (state.failed) return ;

        match(input,DOT,FOLLOW_DOT_in_synpred14_cs2388); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_cs

    // $ANTLR start synpred15_cs
    public final void synpred15_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:471:2: ( identifier '<' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:471:3: identifier '<'
        {
        pushFollow(FOLLOW_identifier_in_synpred15_cs2520);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        match(input,84,FOLLOW_84_in_synpred15_cs2524); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_cs

    // $ANTLR start synpred16_cs
    public final void synpred16_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:479:4: ( identifier '<' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:479:5: identifier '<'
        {
        pushFollow(FOLLOW_identifier_in_synpred16_cs2569);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        match(input,84,FOLLOW_84_in_synpred16_cs2574); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_cs

    // $ANTLR start synpred17_cs
    public final void synpred17_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:496:4: ( ( predefined_type | type_name ) rank_specifiers )
        // CodeR.CSharp.Parser/src/antlr/cs.g:496:5: ( predefined_type | type_name ) rank_specifiers
        {
        // CodeR.CSharp.Parser/src/antlr/cs.g:496:5: ( predefined_type | type_name )
        int alt295=2;
        int LA295_0 = input.LA(1);

        if ( (LA295_0==106||LA295_0==109||LA295_0==111||LA295_0==116||LA295_0==121||LA295_0==131||LA295_0==140||LA295_0==148||LA295_0==153||LA295_0==171||LA295_0==175||LA295_0==179||(LA295_0 >= 187 && LA295_0 <= 188)||LA295_0==191) ) {
            alt295=1;
        }
        else if ( (LA295_0==IDENTIFIER||LA295_0==98||(LA295_0 >= 100 && LA295_0 <= 101)||(LA295_0 >= 103 && LA295_0 <= 104)||LA295_0==108||LA295_0==119||LA295_0==122||LA295_0==124||LA295_0==128||LA295_0==134||LA295_0==137||LA295_0==143||(LA295_0 >= 145 && LA295_0 <= 146)||(LA295_0 >= 149 && LA295_0 <= 150)||LA295_0==154||LA295_0==156||LA295_0==159||LA295_0==162||LA295_0==164||LA295_0==169||(LA295_0 >= 173 && LA295_0 <= 174)||LA295_0==185||LA295_0==192||LA295_0==196||LA295_0==198) ) {
            alt295=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 295, 0, input);

            throw nvae;

        }
        switch (alt295) {
            case 1 :
                // CodeR.CSharp.Parser/src/antlr/cs.g:496:6: predefined_type
                {
                pushFollow(FOLLOW_predefined_type_in_synpred17_cs2667);
                predefined_type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // CodeR.CSharp.Parser/src/antlr/cs.g:496:24: type_name
                {
                pushFollow(FOLLOW_type_name_in_synpred17_cs2671);
                type_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_rank_specifiers_in_synpred17_cs2675);
        rank_specifiers();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred17_cs

    // $ANTLR start synpred18_cs
    public final void synpred18_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:497:4: ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )
        // CodeR.CSharp.Parser/src/antlr/cs.g:497:5: ( predefined_type | type_name ) ( ( '*' )+ | '?' )
        {
        // CodeR.CSharp.Parser/src/antlr/cs.g:497:5: ( predefined_type | type_name )
        int alt296=2;
        int LA296_0 = input.LA(1);

        if ( (LA296_0==106||LA296_0==109||LA296_0==111||LA296_0==116||LA296_0==121||LA296_0==131||LA296_0==140||LA296_0==148||LA296_0==153||LA296_0==171||LA296_0==175||LA296_0==179||(LA296_0 >= 187 && LA296_0 <= 188)||LA296_0==191) ) {
            alt296=1;
        }
        else if ( (LA296_0==IDENTIFIER||LA296_0==98||(LA296_0 >= 100 && LA296_0 <= 101)||(LA296_0 >= 103 && LA296_0 <= 104)||LA296_0==108||LA296_0==119||LA296_0==122||LA296_0==124||LA296_0==128||LA296_0==134||LA296_0==137||LA296_0==143||(LA296_0 >= 145 && LA296_0 <= 146)||(LA296_0 >= 149 && LA296_0 <= 150)||LA296_0==154||LA296_0==156||LA296_0==159||LA296_0==162||LA296_0==164||LA296_0==169||(LA296_0 >= 173 && LA296_0 <= 174)||LA296_0==185||LA296_0==192||LA296_0==196||LA296_0==198) ) {
            alt296=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 296, 0, input);

            throw nvae;

        }
        switch (alt296) {
            case 1 :
                // CodeR.CSharp.Parser/src/antlr/cs.g:497:6: predefined_type
                {
                pushFollow(FOLLOW_predefined_type_in_synpred18_cs2702);
                predefined_type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // CodeR.CSharp.Parser/src/antlr/cs.g:497:24: type_name
                {
                pushFollow(FOLLOW_type_name_in_synpred18_cs2706);
                type_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        // CodeR.CSharp.Parser/src/antlr/cs.g:497:36: ( ( '*' )+ | '?' )
        int alt298=2;
        int LA298_0 = input.LA(1);

        if ( (LA298_0==72) ) {
            alt298=1;
        }
        else if ( (LA298_0==92) ) {
            alt298=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 298, 0, input);

            throw nvae;

        }
        switch (alt298) {
            case 1 :
                // CodeR.CSharp.Parser/src/antlr/cs.g:497:37: ( '*' )+
                {
                // CodeR.CSharp.Parser/src/antlr/cs.g:497:37: ( '*' )+
                int cnt297=0;
                loop297:
                do {
                    int alt297=2;
                    int LA297_0 = input.LA(1);

                    if ( (LA297_0==72) ) {
                        alt297=1;
                    }


                    switch (alt297) {
                	case 1 :
                	    // CodeR.CSharp.Parser/src/antlr/cs.g:497:37: '*'
                	    {
                	    match(input,72,FOLLOW_72_in_synpred18_cs2711); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt297 >= 1 ) break loop297;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(297, input);
                            throw eee;
                    }
                    cnt297++;
                } while (true);


                }
                break;
            case 2 :
                // CodeR.CSharp.Parser/src/antlr/cs.g:497:44: '?'
                {
                match(input,92,FOLLOW_92_in_synpred18_cs2716); if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred18_cs

    // $ANTLR start synpred19_cs
    public final void synpred19_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:533:2: ( unary_expression assignment_operator )
        // CodeR.CSharp.Parser/src/antlr/cs.g:533:3: unary_expression assignment_operator
        {
        pushFollow(FOLLOW_unary_expression_in_synpred19_cs2898);
        unary_expression();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_assignment_operator_in_synpred19_cs2902);
        assignment_operator();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred19_cs

    // $ANTLR start synpred20_cs
    public final void synpred20_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:544:2: ( cast_expression )
        // CodeR.CSharp.Parser/src/antlr/cs.g:544:3: cast_expression
        {
        pushFollow(FOLLOW_cast_expression_in_synpred20_cs2967);
        cast_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred20_cs

    // $ANTLR start synpred21_cs
    public final void synpred21_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:570:2: ( anonymous_function_signature '=>' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:570:3: anonymous_function_signature '=>'
        {
        pushFollow(FOLLOW_anonymous_function_signature_in_synpred21_cs3183);
        anonymous_function_signature();

        state._fsp--;
        if (state.failed) return ;

        match(input,90,FOLLOW_90_in_synpred21_cs3187); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred21_cs

    // $ANTLR start synpred22_cs
    public final void synpred22_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:571:4: ( query_expression )
        // CodeR.CSharp.Parser/src/antlr/cs.g:571:5: query_expression
        {
        pushFollow(FOLLOW_query_expression_in_synpred22_cs3198);
        query_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_cs

    // $ANTLR start synpred23_cs
    public final void synpred23_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:635:50: ( 'into' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:635:51: 'into'
        {
        match(input,143,FOLLOW_143_in_synpred23_cs3621); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred23_cs

    // $ANTLR start synpred24_cs
    public final void synpred24_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:702:32: ( ',' identifier '=' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:702:33: ',' identifier '='
        {
        match(input,77,FOLLOW_77_in_synpred24_cs4123); if (state.failed) return ;

        pushFollow(FOLLOW_identifier_in_synpred24_cs4127);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        match(input,88,FOLLOW_88_in_synpred24_cs4131); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred24_cs

    // $ANTLR start synpred25_cs
    public final void synpred25_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:784:4: ( member_name '{' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:784:5: member_name '{'
        {
        pushFollow(FOLLOW_member_name_in_synpred25_cs4678);
        member_name();

        state._fsp--;
        if (state.failed) return ;

        match(input,199,FOLLOW_199_in_synpred25_cs4682); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred25_cs

    // $ANTLR start synpred26_cs
    public final void synpred26_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:891:14: ( member_name '(' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:891:15: member_name '('
        {
        pushFollow(FOLLOW_member_name_in_synpred26_cs5543);
        member_name();

        state._fsp--;
        if (state.failed) return ;

        match(input,71,FOLLOW_71_in_synpred26_cs5547); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred26_cs

    // $ANTLR start synpred27_cs
    public final void synpred27_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:892:14: ( member_name '{' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:892:15: member_name '{'
        {
        pushFollow(FOLLOW_member_name_in_synpred27_cs5568);
        member_name();

        state._fsp--;
        if (state.failed) return ;

        match(input,199,FOLLOW_199_in_synpred27_cs5572); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred27_cs

    // $ANTLR start synpred28_cs
    public final void synpred28_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:950:6: ( member_name '(' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:950:7: member_name '('
        {
        pushFollow(FOLLOW_member_name_in_synpred28_cs6040);
        member_name();

        state._fsp--;
        if (state.failed) return ;

        match(input,71,FOLLOW_71_in_synpred28_cs6044); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred28_cs

    // $ANTLR start synpred29_cs
    public final void synpred29_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:951:7: ( member_name '{' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:951:8: member_name '{'
        {
        pushFollow(FOLLOW_member_name_in_synpred29_cs6058);
        member_name();

        state._fsp--;
        if (state.failed) return ;

        match(input,199,FOLLOW_199_in_synpred29_cs6062); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred29_cs

    // $ANTLR start synpred30_cs
    public final void synpred30_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:952:10: ( member_name '.' 'this' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:952:11: member_name '.' 'this'
        {
        pushFollow(FOLLOW_member_name_in_synpred30_cs6079);
        member_name();

        state._fsp--;
        if (state.failed) return ;

        match(input,DOT,FOLLOW_DOT_in_synpred30_cs6083); if (state.failed) return ;

        match(input,182,FOLLOW_182_in_synpred30_cs6087); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred30_cs

    // $ANTLR start synpred31_cs
    public final void synpred31_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:1073:5: ( arguments ( '[' | '.' | '->' ) )
        // CodeR.CSharp.Parser/src/antlr/cs.g:1073:6: arguments ( '[' | '.' | '->' )
        {
        pushFollow(FOLLOW_arguments_in_synpred31_cs6725);
        arguments();

        state._fsp--;
        if (state.failed) return ;

        if ( input.LA(1)==DOT||input.LA(1)==PTR||input.LA(1)==94 ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred31_cs

    // $ANTLR start synpred32_cs
    public final void synpred32_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:1080:4: ( identifier '<' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:1080:5: identifier '<'
        {
        pushFollow(FOLLOW_identifier_in_synpred32_cs6777);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        match(input,84,FOLLOW_84_in_synpred32_cs6782); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred32_cs

    // $ANTLR start synpred33_cs
    public final void synpred33_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:1094:2: ( declaration_statement )
        // CodeR.CSharp.Parser/src/antlr/cs.g:1094:3: declaration_statement
        {
        pushFollow(FOLLOW_declaration_statement_in_synpred33_cs6864);
        declaration_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred33_cs

    // $ANTLR start synpred34_cs
    public final void synpred34_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:1095:4: ( identifier ':' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:1095:5: identifier ':'
        {
        pushFollow(FOLLOW_identifier_in_synpred34_cs6875);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        match(input,82,FOLLOW_82_in_synpred34_cs6879); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred34_cs

    // $ANTLR start synpred35_cs
    public final void synpred35_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:1139:2: ( 'var' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:1139:3: 'var'
        {
        match(input,192,FOLLOW_192_in_synpred35_cs7131); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred35_cs

    // $ANTLR start synpred36_cs
    public final void synpred36_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:1140:4: ( 'dynamic' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:1140:5: 'dynamic'
        {
        match(input,122,FOLLOW_122_in_synpred36_cs7142); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred36_cs

    // $ANTLR start synpred37_cs
    public final void synpred37_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:1173:62: ( 'else' )
        // CodeR.CSharp.Parser/src/antlr/cs.g:1173:63: 'else'
        {
        match(input,123,FOLLOW_123_in_synpred37_cs7325); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred37_cs

    // $ANTLR start synpred38_cs
    public final void synpred38_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:1202:2: ( local_variable_declaration )
        // CodeR.CSharp.Parser/src/antlr/cs.g:1202:3: local_variable_declaration
        {
        pushFollow(FOLLOW_local_variable_declaration_in_synpred38_cs7576);
        local_variable_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred38_cs

    // $ANTLR start synpred39_cs
    public final void synpred39_cs_fragment() throws RecognitionException {
        // CodeR.CSharp.Parser/src/antlr/cs.g:1300:4: ( local_variable_declaration )
        // CodeR.CSharp.Parser/src/antlr/cs.g:1300:5: local_variable_declaration
        {
        pushFollow(FOLLOW_local_variable_declaration_in_synpred39_cs8067);
        local_variable_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred39_cs

    // Delegated rules

    public final boolean synpred24_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA50 dfa50 = new DFA50(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA72 dfa72 = new DFA72(this);
    static final String DFA50_eotS =
        "\5\uffff";
    static final String DFA50_eofS =
        "\1\2\3\uffff\1\2";
    static final String DFA50_minS =
        "\1\14\1\7\2\uffff\1\14";
    static final String DFA50_maxS =
        "\1\u00cb\1\u00cc\2\uffff\1\u00cb";
    static final String DFA50_acceptS =
        "\2\uffff\1\1\1\2\1\uffff";
    static final String DFA50_specialS =
        "\5\uffff}>";
    static final String[] DFA50_transitionS = {
            "\1\3\12\uffff\1\2\5\uffff\1\2\6\uffff\1\2\12\uffff\1\3\1\uffff"+
            "\1\2\2\uffff\1\2\14\uffff\6\2\1\3\13\2\1\uffff\6\2\1\uffff\3"+
            "\2\1\1\4\2\1\uffff\5\2\3\uffff\1\2\12\uffff\1\2\2\uffff\1\2"+
            "\1\uffff\1\2\3\uffff\1\2\5\uffff\1\2\2\uffff\1\2\5\uffff\4\2"+
            "\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2"+
            "\1\uffff\1\2\4\uffff\1\2\3\uffff\2\2\12\uffff\1\2\6\uffff\1"+
            "\2\3\uffff\1\2\1\uffff\6\2",
            "\1\3\16\uffff\1\3\5\uffff\2\3\6\uffff\3\3\13\uffff\1\3\2\uffff"+
            "\1\3\1\uffff\1\3\5\uffff\1\3\2\uffff\1\3\4\uffff\1\3\1\uffff"+
            "\2\3\1\uffff\2\3\1\uffff\1\2\1\3\20\uffff\1\4\2\uffff\1\3\1"+
            "\uffff\2\3\1\uffff\4\3\1\uffff\2\3\1\uffff\2\3\3\uffff\4\3\1"+
            "\uffff\2\3\1\uffff\1\3\3\uffff\1\3\2\uffff\1\3\2\uffff\1\3\2"+
            "\uffff\1\3\2\uffff\1\3\2\uffff\1\3\1\uffff\2\3\1\uffff\3\3\1"+
            "\uffff\3\3\1\uffff\1\3\2\uffff\1\3\2\uffff\1\3\1\uffff\1\3\4"+
            "\uffff\1\3\1\uffff\1\3\1\uffff\4\3\2\uffff\1\3\2\uffff\1\3\2"+
            "\uffff\5\3\1\uffff\2\3\3\uffff\1\3\1\uffff\1\3\5\uffff\1\3",
            "",
            "",
            "\1\3\12\uffff\1\2\5\uffff\1\2\6\uffff\1\2\12\uffff\1\3\1\uffff"+
            "\1\2\2\uffff\1\2\14\uffff\6\2\1\3\13\2\1\uffff\6\2\1\uffff\3"+
            "\2\1\1\4\2\1\uffff\5\2\3\uffff\1\2\12\uffff\1\2\2\uffff\1\2"+
            "\1\uffff\1\2\3\uffff\1\2\5\uffff\1\2\2\uffff\1\2\5\uffff\4\2"+
            "\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2"+
            "\1\uffff\1\2\4\uffff\1\2\3\uffff\2\2\12\uffff\1\2\6\uffff\1"+
            "\2\3\uffff\1\2\1\uffff\6\2"
    };

    static final short[] DFA50_eot = DFA.unpackEncodedString(DFA50_eotS);
    static final short[] DFA50_eof = DFA.unpackEncodedString(DFA50_eofS);
    static final char[] DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_minS);
    static final char[] DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_maxS);
    static final short[] DFA50_accept = DFA.unpackEncodedString(DFA50_acceptS);
    static final short[] DFA50_special = DFA.unpackEncodedString(DFA50_specialS);
    static final short[][] DFA50_transition;

    static {
        int numStates = DFA50_transitionS.length;
        DFA50_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA50_transition[i] = DFA.unpackEncodedString(DFA50_transitionS[i]);
        }
    }

    class DFA50 extends DFA {

        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = DFA50_eot;
            this.eof = DFA50_eof;
            this.min = DFA50_min;
            this.max = DFA50_max;
            this.accept = DFA50_accept;
            this.special = DFA50_special;
            this.transition = DFA50_transition;
        }
        public String getDescription() {
            return "317:7: ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )";
        }
    }
    static final String DFA71_eotS =
        "\16\uffff";
    static final String DFA71_eofS =
        "\16\uffff";
    static final String DFA71_minS =
        "\1\35\1\14\1\uffff\1\61\1\35\1\27\1\35\1\uffff\1\14\2\uffff\1\14"+
        "\2\27";
    static final String DFA71_maxS =
        "\1\u00c6\1\136\1\uffff\1\110\3\u00c6\1\uffff\1\136\2\uffff\1\136"+
        "\2\u00c6";
    static final String DFA71_acceptS =
        "\2\uffff\1\2\4\uffff\1\3\1\uffff\2\1\3\uffff";
    static final String DFA71_specialS =
        "\5\uffff\1\1\6\uffff\1\2\1\0}>";
    static final String[] DFA71_transitionS = {
            "\1\1\104\uffff\1\1\1\uffff\2\1\1\uffff\2\1\1\uffff\1\2\1\uffff"+
            "\1\1\1\2\1\uffff\1\2\4\uffff\1\2\2\uffff\1\1\1\uffff\1\2\1\1"+
            "\1\uffff\1\1\3\uffff\1\1\2\uffff\1\2\2\uffff\1\1\2\uffff\1\1"+
            "\2\uffff\1\2\2\uffff\1\1\1\uffff\2\1\1\uffff\1\2\2\1\2\uffff"+
            "\1\2\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\4\uffff"+
            "\1\1\1\uffff\1\2\1\uffff\2\1\1\2\3\uffff\1\2\5\uffff\1\1\1\uffff"+
            "\2\2\2\uffff\1\2\1\1\1\uffff\1\3\1\uffff\1\1\1\uffff\1\1",
            "\1\6\44\uffff\1\2\26\uffff\1\2\12\uffff\1\4\1\5\7\uffff\1\2"+
            "\1\uffff\1\2",
            "",
            "\1\7\26\uffff\1\2",
            "\1\10\104\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10"+
            "\12\uffff\1\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\5\uffff"+
            "\1\10\2\uffff\1\10\5\uffff\1\10\1\uffff\2\10\2\uffff\2\10\3"+
            "\uffff\1\10\1\uffff\1\10\2\uffff\1\10\2\uffff\1\10\1\uffff\1"+
            "\10\4\uffff\1\10\3\uffff\2\10\12\uffff\1\10\6\uffff\1\10\3\uffff"+
            "\1\10\1\uffff\1\10",
            "\1\12\5\uffff\1\2\57\uffff\1\11\24\uffff\1\2\1\uffff\2\2\1"+
            "\uffff\2\2\1\uffff\1\2\1\uffff\2\2\1\uffff\1\2\4\uffff\1\2\2"+
            "\uffff\1\2\1\uffff\2\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2"+
            "\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\2\2\1"+
            "\uffff\3\2\2\uffff\2\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\uffff\3\2\3\uffff\1\2\5"+
            "\uffff\1\2\1\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1"+
            "\uffff\1\2",
            "\1\13\104\uffff\1\13\1\uffff\2\13\1\uffff\2\13\3\uffff\1\13"+
            "\12\uffff\1\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\5\uffff"+
            "\1\13\2\uffff\1\13\5\uffff\1\13\1\uffff\2\13\2\uffff\2\13\3"+
            "\uffff\1\13\1\uffff\1\13\2\uffff\1\13\2\uffff\1\13\1\uffff\1"+
            "\13\4\uffff\1\13\3\uffff\2\13\12\uffff\1\13\6\uffff\1\13\3\uffff"+
            "\1\13\1\uffff\1\13",
            "",
            "\1\6\44\uffff\1\2\26\uffff\1\2\13\uffff\1\14\7\uffff\1\2\1"+
            "\uffff\1\2",
            "",
            "",
            "\1\6\44\uffff\1\2\26\uffff\1\2\13\uffff\1\15\7\uffff\1\2\1"+
            "\uffff\1\2",
            "\1\12\5\uffff\1\2\57\uffff\1\11\24\uffff\1\2\1\uffff\2\2\1"+
            "\uffff\2\2\1\uffff\1\2\1\uffff\2\2\1\uffff\1\2\4\uffff\1\2\2"+
            "\uffff\1\2\1\uffff\2\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2"+
            "\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\2\2\1"+
            "\uffff\3\2\2\uffff\2\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\uffff\3\2\3\uffff\1\2\5"+
            "\uffff\1\2\1\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1"+
            "\uffff\1\2",
            "\1\12\5\uffff\1\2\57\uffff\1\11\24\uffff\1\2\1\uffff\2\2\1"+
            "\uffff\2\2\1\uffff\1\2\1\uffff\2\2\1\uffff\1\2\4\uffff\1\2\2"+
            "\uffff\1\2\1\uffff\2\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2"+
            "\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\2\2\1"+
            "\uffff\3\2\2\uffff\2\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\uffff\3\2\3\uffff\1\2\5"+
            "\uffff\1\2\1\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1"+
            "\uffff\1\2"
    };

    static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_eotS);
    static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_eofS);
    static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_minS);
    static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_maxS);
    static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_acceptS);
    static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_specialS);
    static final short[][] DFA71_transition;

    static {
        int numStates = DFA71_transitionS.length;
        DFA71_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA71_transition[i] = DFA.unpackEncodedString(DFA71_transitionS[i]);
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;
        }
        public String getDescription() {
            return "438:19: ( ( unbound_type_name )=> unbound_type_name | type | 'void' )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA71_13 = input.LA(1);

                         
                        int index71_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA71_13==77) && (synpred13_cs())) {s = 9;}

                        else if ( (LA71_13==GT) && (synpred13_cs())) {s = 10;}

                        else if ( (LA71_13==IDENTIFIER||LA71_13==98||(LA71_13 >= 100 && LA71_13 <= 101)||(LA71_13 >= 103 && LA71_13 <= 104)||LA71_13==106||(LA71_13 >= 108 && LA71_13 <= 109)||LA71_13==111||LA71_13==116||LA71_13==119||(LA71_13 >= 121 && LA71_13 <= 122)||LA71_13==124||LA71_13==128||LA71_13==131||LA71_13==134||LA71_13==137||LA71_13==140||LA71_13==143||(LA71_13 >= 145 && LA71_13 <= 146)||(LA71_13 >= 148 && LA71_13 <= 150)||(LA71_13 >= 153 && LA71_13 <= 154)||LA71_13==156||LA71_13==159||LA71_13==162||LA71_13==164||LA71_13==169||LA71_13==171||(LA71_13 >= 173 && LA71_13 <= 175)||LA71_13==179||LA71_13==185||(LA71_13 >= 187 && LA71_13 <= 188)||(LA71_13 >= 191 && LA71_13 <= 192)||LA71_13==194||LA71_13==196||LA71_13==198) ) {s = 2;}

                         
                        input.seek(index71_13);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA71_5 = input.LA(1);

                         
                        int index71_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA71_5==77) && (synpred13_cs())) {s = 9;}

                        else if ( (LA71_5==GT) && (synpred13_cs())) {s = 10;}

                        else if ( (LA71_5==IDENTIFIER||LA71_5==98||(LA71_5 >= 100 && LA71_5 <= 101)||(LA71_5 >= 103 && LA71_5 <= 104)||LA71_5==106||(LA71_5 >= 108 && LA71_5 <= 109)||LA71_5==111||LA71_5==116||LA71_5==119||(LA71_5 >= 121 && LA71_5 <= 122)||LA71_5==124||LA71_5==128||LA71_5==131||LA71_5==134||LA71_5==137||LA71_5==140||LA71_5==143||(LA71_5 >= 145 && LA71_5 <= 146)||(LA71_5 >= 148 && LA71_5 <= 150)||(LA71_5 >= 153 && LA71_5 <= 154)||LA71_5==156||LA71_5==159||LA71_5==162||LA71_5==164||LA71_5==169||LA71_5==171||(LA71_5 >= 173 && LA71_5 <= 175)||LA71_5==179||LA71_5==185||(LA71_5 >= 187 && LA71_5 <= 188)||(LA71_5 >= 191 && LA71_5 <= 192)||LA71_5==194||LA71_5==196||LA71_5==198) ) {s = 2;}

                         
                        input.seek(index71_5);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA71_12 = input.LA(1);

                         
                        int index71_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA71_12==77) && (synpred13_cs())) {s = 9;}

                        else if ( (LA71_12==GT) && (synpred13_cs())) {s = 10;}

                        else if ( (LA71_12==IDENTIFIER||LA71_12==98||(LA71_12 >= 100 && LA71_12 <= 101)||(LA71_12 >= 103 && LA71_12 <= 104)||LA71_12==106||(LA71_12 >= 108 && LA71_12 <= 109)||LA71_12==111||LA71_12==116||LA71_12==119||(LA71_12 >= 121 && LA71_12 <= 122)||LA71_12==124||LA71_12==128||LA71_12==131||LA71_12==134||LA71_12==137||LA71_12==140||LA71_12==143||(LA71_12 >= 145 && LA71_12 <= 146)||(LA71_12 >= 148 && LA71_12 <= 150)||(LA71_12 >= 153 && LA71_12 <= 154)||LA71_12==156||LA71_12==159||LA71_12==162||LA71_12==164||LA71_12==169||LA71_12==171||(LA71_12 >= 173 && LA71_12 <= 175)||LA71_12==179||LA71_12==185||(LA71_12 >= 187 && LA71_12 <= 188)||(LA71_12 >= 191 && LA71_12 <= 192)||LA71_12==194||LA71_12==196||LA71_12==198) ) {s = 2;}

                         
                        input.seek(index71_12);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 71, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA72_eotS =
        "\7\uffff";
    static final String DFA72_eofS =
        "\4\uffff\1\5\2\uffff";
    static final String DFA72_minS =
        "\1\14\1\27\1\uffff\1\27\1\14\2\uffff";
    static final String DFA72_maxS =
        "\1\124\1\115\1\uffff\1\115\1\61\2\uffff";
    static final String DFA72_acceptS =
        "\2\uffff\1\2\2\uffff\1\3\1\1";
    static final String DFA72_specialS =
        "\4\uffff\1\0\2\uffff}>";
    static final String[] DFA72_transitionS = {
            "\1\2\107\uffff\1\1",
            "\1\4\65\uffff\1\3",
            "",
            "\1\4\65\uffff\1\3",
            "\1\6\44\uffff\1\5",
            "",
            ""
    };

    static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
    static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
    static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
    static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
    static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
    static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
    static final short[][] DFA72_transition;

    static {
        int numStates = DFA72_transitionS.length;
        DFA72_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
        }
    }

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;
        }
        public String getDescription() {
            return "()* loopback of 448:3: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA72_4 = input.LA(1);

                         
                        int index72_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA72_4==EOF||LA72_4==RPAREN) ) {s = 5;}

                        else if ( (LA72_4==DOT) && (synpred14_cs())) {s = 6;}

                         
                        input.seek(index72_4);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 72, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_namespace_body_in_compilation_unit94 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_namespace_declaration106 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_qualified_identifier_in_namespace_declaration110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_namespace_block_in_namespace_declaration114 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_SEMI_in_namespace_declaration118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_namespace_block130 = new BitSet(new long[]{0x0800000000080000L,0x8042000840000000L,0x401410EA41806000L,0x000000000000080AL});
    public static final BitSet FOLLOW_namespace_body_in_namespace_block134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_namespace_block139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_alias_directives_in_namespace_body151 = new BitSet(new long[]{0x0800000000080002L,0x8042000840000000L,0x401410EA41806000L,0x000000000000000AL});
    public static final BitSet FOLLOW_using_directives_in_namespace_body156 = new BitSet(new long[]{0x0000000000080002L,0x8042000840000000L,0x401410EA41806000L,0x000000000000000AL});
    public static final BitSet FOLLOW_global_attributes_in_namespace_body161 = new BitSet(new long[]{0x0000000000080002L,0x8042000840000000L,0x401410EA41806000L,0x000000000000000AL});
    public static final BitSet FOLLOW_namespace_member_declarations_in_namespace_body166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_alias_directive_in_extern_alias_directives178 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_extern_alias_directive190 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_101_in_extern_alias_directive194 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_extern_alias_directive198 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_extern_alias_directive201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_directive_in_using_directives212 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_using_alias_directive_in_using_directive229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_namespace_directive_in_using_directive235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_using_alias_directive250 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_using_alias_directive254 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_using_alias_directive258 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_namespace_or_type_name_in_using_alias_directive262 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_using_alias_directive266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_using_namespace_directive277 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_namespace_name_in_using_namespace_directive281 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_using_namespace_directive285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespace_member_declaration_in_namespace_member_declarations296 = new BitSet(new long[]{0x0000000000080002L,0x8042000840000000L,0x401410EA41806000L,0x000000000000000AL});
    public static final BitSet FOLLOW_namespace_declaration_in_namespace_member_declaration308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_namespace_member_declaration313 = new BitSet(new long[]{0x0000000000080000L,0x8042000800000000L,0x401410EA41006000L,0x000000000000000AL});
    public static final BitSet FOLLOW_modifiers_in_namespace_member_declaration318 = new BitSet(new long[]{0x0000000000080000L,0x0042000000000000L,0x0010000200002000L});
    public static final BitSet FOLLOW_type_declaration_in_namespace_member_declaration323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_type_declaration340 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0010000000002000L});
    public static final BitSet FOLLOW_class_declaration_in_type_declaration350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_declaration_in_type_declaration360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_type_declaration370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_declaration_in_type_declaration383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_declaration_in_type_declaration388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_type_declaration393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_declaration_in_type_declaration398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delegate_declaration_in_type_declaration403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_qualified_identifier415 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_DOT_in_qualified_identifier418 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_qualified_identifier420 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_namespace_or_type_name_in_namespace_name433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_modifiers444 = new BitSet(new long[]{0x0000000000000002L,0x8000000800000000L,0x400410E841004000L,0x000000000000000AL});
    public static final BitSet FOLLOW_attributes_in_class_member_declaration532 = new BitSet(new long[]{0x0000000020080000L,0xF6D6B5BC00000000L,0xDA1CFAFED776F649L,0x000000000000105FL});
    public static final BitSet FOLLOW_modifiers_in_class_member_declaration537 = new BitSet(new long[]{0x0000000020080000L,0x76D6B5B400000000L,0x9A18EA169676B649L,0x0000000000001055L});
    public static final BitSet FOLLOW_114_in_class_member_declaration547 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_class_member_declaration551 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_constant_declarators_in_class_member_declaration555 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_class_member_declaration559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_event_declaration_in_class_member_declaration565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_class_member_declaration573 = new BitSet(new long[]{0x20A4006030400080L,0x1692B5B400000000L,0x9A18EA149676B249L,0x0000000000000051L});
    public static final BitSet FOLLOW_method_declaration_in_class_member_declaration584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_class_member_declaration592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_declaration_in_class_member_declaration600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_declaration_in_class_member_declaration607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_class_member_declaration618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_class_member_declaration625 = new BitSet(new long[]{0x20A4006030400080L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000051L});
    public static final BitSet FOLLOW_method_declaration_in_class_member_declaration629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_class_member_declaration635 = new BitSet(new long[]{0x20A4006030400080L,0x1690B5B400000000L,0x9A48EA149E769249L,0x0000000000000051L});
    public static final BitSet FOLLOW_method_declaration_in_class_member_declaration658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_declaration_in_class_member_declaration680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_class_member_declaration702 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_DOT_in_class_member_declaration704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_indexer_declaration_in_class_member_declaration706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indexer_declaration_in_class_member_declaration717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_class_member_declaration726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_declaration_in_class_member_declaration740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_declaration_in_class_member_declaration755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_declaration_in_class_member_declaration763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_declaration_in_class_member_declaration770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delegate_declaration_in_class_member_declaration778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conversion_operator_declaration_in_class_member_declaration785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declaration_in_class_member_declaration791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_destructor_declaration_in_class_member_declaration798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_primary_expression822 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_brackets_in_primary_expression826 = new BitSet(new long[]{0x0000800000001002L,0x0000000040000080L});
    public static final BitSet FOLLOW_primary_expression_part_in_primary_expression830 = new BitSet(new long[]{0x0000800000001002L,0x0000000040000080L});
    public static final BitSet FOLLOW_182_in_primary_expression844 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_brackets_in_primary_expression848 = new BitSet(new long[]{0x0000800000001002L,0x0000000040000080L});
    public static final BitSet FOLLOW_primary_expression_part_in_primary_expression852 = new BitSet(new long[]{0x0000800000001002L,0x0000000040000080L});
    public static final BitSet FOLLOW_primary_expression_start_in_primary_expression858 = new BitSet(new long[]{0x0000800000001002L,0x0000000040000080L});
    public static final BitSet FOLLOW_primary_expression_part_in_primary_expression860 = new BitSet(new long[]{0x0000800000001002L,0x0000000040000080L});
    public static final BitSet FOLLOW_152_in_primary_expression866 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x00000000000000D5L});
    public static final BitSet FOLLOW_object_creation_expression_in_primary_expression893 = new BitSet(new long[]{0x0000800000001000L,0x0000000040000080L});
    public static final BitSet FOLLOW_primary_expression_part_in_primary_expression897 = new BitSet(new long[]{0x0000800000001002L,0x0000000040000080L});
    public static final BitSet FOLLOW_delegate_creation_expression_in_primary_expression922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_creation_expression_in_primary_expression929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_object_creation_expression_in_primary_expression936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sizeof_expression_in_primary_expression953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_checked_expression_in_primary_expression964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unchecked_expression_in_primary_expression983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_value_expression_in_primary_expression1000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_method_expression_in_primary_expression1013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_predefined_type_in_primary_expression_start1027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_primary_expression_start1055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_generic_argument_list_in_primary_expression_start1059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_primary_expression_start1064 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_primary_expression_start1067 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_primary_expression_start1071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_primary_expression_start1078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_primary_expression_start1084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_expression_in_primary_expression_start1089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_expression_in_primary_expression_start1094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary_expression_start1112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_access_identifier_in_primary_expression_part1123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_or_arguments_in_primary_expression_part1128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_access_operator_in_access_identifier1139 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_type_or_generic_in_access_identifier1143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_brackets_or_arguments1171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_brackets_or_arguments1176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_brackets1187 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B480004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_list_in_brackets1191 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_95_in_brackets1196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_paren_expression1207 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_paren_expression1211 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_paren_expression1215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_arguments1226 = new BitSet(new long[]{0x20A6007030400080L,0x16F1B7B400004DA1L,0xBE49EB14B7769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_argument_list_in_arguments1230 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_arguments1235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_in_argument_list1246 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_argument_list1249 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EB14B7769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_argument_in_argument_list1251 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_argument_name_in_argument1269 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EB14B7769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_argument_value_in_argument1271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_value_in_argument1276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_argument_name1287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_82_in_argument_name1289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_argument_value1300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ref_variable_reference_in_argument_value1305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_argument_value1311 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_variable_reference_in_argument_value1315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_ref_variable_reference1326 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_71_in_ref_variable_reference1352 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_ref_variable_reference1356 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_ref_variable_reference1360 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EB1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_ref_variable_reference_in_ref_variable_reference1365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_reference_in_ref_variable_reference1369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_reference_in_ref_variable_reference1405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variable_reference1422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_specifier_in_rank_specifiers1432 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_94_in_rank_specifier1444 = new BitSet(new long[]{0x0000000000000000L,0x0000000080002000L});
    public static final BitSet FOLLOW_dim_separators_in_rank_specifier1448 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_95_in_rank_specifier1453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_dim_separators1464 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_type_name_in_delegate_creation_expression1476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_delegate_creation_expression1480 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_type_name_in_delegate_creation_expression1484 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_delegate_creation_expression1488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression1499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_anonymous_object_initializer1510 = new BitSet(new long[]{0x0000000020000000L,0x148011B400002000L,0x0200621494668241L,0x0000000000000851L});
    public static final BitSet FOLLOW_member_declarator_list_in_anonymous_object_initializer1514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_77_in_anonymous_object_initializer1519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_anonymous_object_initializer1524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_declarator_in_member_declarator_list1535 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_member_declarator_list1539 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_member_declarator_in_member_declarator_list1541 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_identifier_in_member_declarator1554 = new BitSet(new long[]{0x0000000000001000L,0x0000000001100000L});
    public static final BitSet FOLLOW_generic_argument_list_in_member_declarator1565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_declarator1573 = new BitSet(new long[]{0x20A4006030400080L,0x16F1B7B400000080L,0xBE49EA1497769249L,0x0000000000000051L});
    public static final BitSet FOLLOW_primary_or_array_creation_expression_in_member_declarator1577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_member_declarator1585 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_member_declarator1589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_creation_expression_in_primary_or_array_creation_expression1611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_in_primary_or_array_creation_expression1616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_array_creation_expression1629 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B440000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_array_creation_expression1641 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_94_in_array_creation_expression1654 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_list_in_array_creation_expression1658 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_95_in_array_creation_expression1662 = new BitSet(new long[]{0x0000800000001002L,0x0000000040000080L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_rank_specifiers_in_array_creation_expression1679 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_array_initializer_in_array_creation_expression1684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_array_creation_expression1731 = new BitSet(new long[]{0x0000800000001000L,0x0000000040000000L});
    public static final BitSet FOLLOW_invocation_part_in_array_creation_expression1735 = new BitSet(new long[]{0x0000800000001000L,0x0000000040000080L});
    public static final BitSet FOLLOW_invocation_part_in_array_creation_expression1749 = new BitSet(new long[]{0x0000800000001000L,0x0000000040000080L});
    public static final BitSet FOLLOW_arguments_in_array_creation_expression1763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_initializer_in_array_creation_expression1787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_specifier_in_array_creation_expression1801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_array_initializer_in_array_creation_expression1817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_array_initializer1843 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400006DA1L,0xBE49EA1497769249L,0x00000000000018D1L});
    public static final BitSet FOLLOW_variable_initializer_list_in_array_initializer1847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_77_in_array_initializer1852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_array_initializer1857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_initializer_in_variable_initializer_list1868 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_variable_initializer_list1871 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x00000000000010D1L});
    public static final BitSet FOLLOW_variable_initializer_in_variable_initializer_list1873 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_expression_in_variable_initializer1886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_initializer_in_variable_initializer1890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_sizeof_expression1901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_sizeof_expression1905 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_unmanaged_type_in_sizeof_expression1909 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_sizeof_expression1913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_checked_expression1924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_checked_expression1928 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_checked_expression1932 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_checked_expression1936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_unchecked_expression1947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_unchecked_expression1951 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_unchecked_expression1955 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_unchecked_expression1959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_default_value_expression1970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_default_value_expression1974 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_default_value_expression1978 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_default_value_expression1982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_anonymous_method_expression1993 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression1997 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_block_in_anonymous_method_expression2002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_explicit_anonymous_function_signature2013 = new BitSet(new long[]{0x0002000020000000L,0x1690B5B400000000L,0x9A08EB14B6769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature2017 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_explicit_anonymous_function_signature2022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2033 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_explicit_anonymous_function_parameter_list2038 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EB14B6769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2042 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter2055 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_explicit_anonymous_function_parameter2060 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_explicit_anonymous_function_parameter2064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_object_creation_expression2094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_object_creation_expression2106 = new BitSet(new long[]{0x20A6007030400080L,0x16F1B7B400004DA1L,0xBE49EB14B7769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_argument_list_in_object_creation_expression2110 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_object_creation_expression2115 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression2119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression2128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_object_or_collection_initializer2144 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400006DA1L,0xBE49EA1497769249L,0x00000000000018D1L});
    public static final BitSet FOLLOW_object_initializer_in_object_or_collection_initializer2148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collection_initializer_in_object_or_collection_initializer2154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_initializer_list_in_collection_initializer2168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_77_in_collection_initializer2172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_collection_initializer2177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_initializer_in_element_initializer_list2188 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_element_initializer_list2192 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x00000000000010D1L});
    public static final BitSet FOLLOW_element_initializer_in_element_initializer_list2194 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_non_assignment_expression_in_element_initializer2207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_element_initializer2213 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_list_in_element_initializer2217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_element_initializer2221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_initializer_list_in_object_initializer2238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_77_in_object_initializer2243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_object_initializer2248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_initializer_in_member_initializer_list2259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_member_initializer_list2263 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_member_initializer_in_member_initializer_list2265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_member_initializer2278 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_member_initializer2282 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x00000000000010D1L});
    public static final BitSet FOLLOW_initializer_value_in_member_initializer2286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_initializer_value2297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_initializer_value2303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_typeof_expression2316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_typeof_expression2320 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_unbound_type_name_in_typeof_expression2331 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_type_in_typeof_expression2342 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_194_in_typeof_expression2354 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_typeof_expression2359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unbound_type_name_start_in_unbound_type_name2374 = new BitSet(new long[]{0x0000000000001000L,0x0000000000100000L});
    public static final BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name2393 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_unbound_type_name_part_in_unbound_type_name2397 = new BitSet(new long[]{0x0000000000001000L,0x0000000000100000L});
    public static final BitSet FOLLOW_unbound_type_name_part_in_unbound_type_name2404 = new BitSet(new long[]{0x0000000000001000L,0x0000000000100000L});
    public static final BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name2414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_unbound_type_name_start2424 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_unbound_type_name_start2427 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_unbound_type_name_start2429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_unbound_type_name_part2438 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_unbound_type_name_part2442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_generic_dimension_specifier2450 = new BitSet(new long[]{0x0000000000800000L,0x0000000000002000L});
    public static final BitSet FOLLOW_commas_in_generic_dimension_specifier2454 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GT_in_generic_dimension_specifier2459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_commas2468 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_namespace_or_type_name_in_type_name2484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_or_generic_in_namespace_or_type_name2493 = new BitSet(new long[]{0x0000000000001002L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_namespace_or_type_name2498 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_type_or_generic_in_namespace_or_type_name2500 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_DOT_in_namespace_or_type_name2505 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_type_or_generic_in_namespace_or_type_name2509 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_identifier_in_type_or_generic2529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_generic_argument_list_in_type_or_generic2533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_type_or_generic2538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qid_start_in_qid2549 = new BitSet(new long[]{0x0000800000001002L});
    public static final BitSet FOLLOW_qid_part_in_qid2553 = new BitSet(new long[]{0x0000800000001002L});
    public static final BitSet FOLLOW_predefined_type_in_qid_start2563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_qid_start2579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_generic_argument_list_in_qid_start2583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_qid_start2590 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_qid_start2595 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_qid_start2599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_qid_start2606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_access_identifier_in_qid_part2620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_generic_argument_list2630 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_arguments_in_generic_argument_list2634 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GT_in_generic_argument_list2638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_type_arguments2647 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_type_arguments2650 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_type_arguments2652 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_predefined_type_in_type2681 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_name_in_type2685 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_rank_specifiers_in_type2690 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_type2694 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_predefined_type_in_type2723 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000100L});
    public static final BitSet FOLLOW_type_name_in_type2727 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000100L});
    public static final BitSet FOLLOW_72_in_type2733 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_92_in_type2738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_predefined_type_in_type2745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_type2749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_type2755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_type2757 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_predefined_type_in_non_nullable_type2768 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000100L});
    public static final BitSet FOLLOW_type_name_in_non_nullable_type2772 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000100L});
    public static final BitSet FOLLOW_rank_specifiers_in_non_nullable_type2781 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_non_nullable_type2785 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_non_nullable_type2794 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_194_in_non_nullable_type2806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_non_nullable_type2810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_type_in_non_array_type2821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_array_type2828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_unmanaged_type2835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_class_type2842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_pointer_type2849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_block2861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_block2866 = new BitSet(new long[]{0x28B4007070400080L,0x17FDBFB400004DA1L,0xFFE9EE14977E937DL,0x00000000000018F5L});
    public static final BitSet FOLLOW_statement_list_in_block2870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_block2875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_statement_list2882 = new BitSet(new long[]{0x28B4007070400082L,0x17FDBFB400004DA1L,0xFFE9EE14977E937DL,0x00000000000010F5L});
    public static final BitSet FOLLOW_assignment_in_expression2907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_assignment_expression_in_expression2912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expression_list2922 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_expression_list2926 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_expression_list2930 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_unary_expression_in_assignment2947 = new BitSet(new long[]{0x0000000000800000L,0x0000000201429248L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_assignment_operator_in_assignment2951 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_assignment2955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_expression_in_unary_expression2972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_or_array_creation_expression_in_unary_expression2977 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004800L});
    public static final BitSet FOLLOW_75_in_unary_expression2981 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_unary_expression2986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_unary_expression2992 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression2996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unary_expression3002 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression3006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_unary_expression3012 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression3016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_204_in_unary_expression3022 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression3026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pre_increment_expression_in_unary_expression3032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pre_decrement_expression_in_unary_expression3038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pointer_indirection_expression_in_unary_expression3044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_addressof_expression_in_unary_expression3049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_cast_expression3059 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_cast_expression3063 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_cast_expression3067 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_unary_expression_in_cast_expression3071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_assignment_operator3079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_assignment_operator3083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_assignment_operator3087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_assignment_operator3091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_assignment_operator3095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_assignment_operator3099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_assignment_operator3103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_201_in_assignment_operator3107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_assignment_operator3111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_assignment_operator3115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_assignment_operator3119 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_91_in_assignment_operator3121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_pre_increment_expression3130 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_unary_expression_in_pre_increment_expression3134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_pre_decrement_expression3143 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_unary_expression_in_pre_decrement_expression3147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_pointer_indirection_expression3155 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_unary_expression_in_pointer_indirection_expression3159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_addressof_expression3167 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_unary_expression_in_addressof_expression3171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expression_in_non_assignment_expression3192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_expression_in_non_assignment_expression3203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditional_expression_in_non_assignment_expression3209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expression_in_multiplicative_expression3223 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010104L});
    public static final BitSet FOLLOW_set_in_multiplicative_expression3228 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_unary_expression_in_multiplicative_expression3238 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010104L});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression3248 = new BitSet(new long[]{0x0000001000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_set_in_additive_expression3251 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression3259 = new BitSet(new long[]{0x0000001000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_additive_expression_in_shift_expression3270 = new BitSet(new long[]{0x0000000000800002L,0x0000000000200000L});
    public static final BitSet FOLLOW_85_in_shift_expression3274 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_GT_in_shift_expression3276 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GT_in_shift_expression3278 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_additive_expression_in_shift_expression3281 = new BitSet(new long[]{0x0000000000800002L,0x0000000000200000L});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression3291 = new BitSet(new long[]{0x0000000000800002L,0x0000004008900000L,0x0000000000010000L});
    public static final BitSet FOLLOW_set_in_relational_expression3298 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression3308 = new BitSet(new long[]{0x0000000000800002L,0x0000004008900000L,0x0000000000010000L});
    public static final BitSet FOLLOW_set_in_relational_expression3317 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_non_nullable_type_in_relational_expression3325 = new BitSet(new long[]{0x0000000000800002L,0x0000004008900000L,0x0000000000010000L});
    public static final BitSet FOLLOW_relational_expression_in_equality_expression3339 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000002L});
    public static final BitSet FOLLOW_set_in_equality_expression3346 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_relational_expression_in_equality_expression3354 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000002L});
    public static final BitSet FOLLOW_equality_expression_in_and_expression3364 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_and_expression3367 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_equality_expression_in_and_expression3371 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_and_expression_in_exclusive_or_expression3381 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_96_in_exclusive_or_expression3384 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_and_expression_in_exclusive_or_expression3388 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression3398 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_200_in_inclusive_or_expression3403 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression3407 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_inclusive_or_expression_in_conditional_and_expression3417 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_conditional_and_expression3422 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_inclusive_or_expression_in_conditional_and_expression3426 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_conditional_and_expression_in_conditional_or_expression3436 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_202_in_conditional_or_expression3440 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_conditional_and_expression_in_conditional_or_expression3444 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_conditional_or_expression_in_null_coalescing_expression3455 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_93_in_null_coalescing_expression3460 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_conditional_or_expression_in_null_coalescing_expression3464 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_null_coalescing_expression_in_conditional_expression3474 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_conditional_expression3479 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_conditional_expression3483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_82_in_conditional_expression3487 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_conditional_expression3491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_function_signature_in_lambda_expression3511 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_lambda_expression3515 = new BitSet(new long[]{0x20B4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x00000000000010D1L});
    public static final BitSet FOLLOW_anonymous_function_body_in_lambda_expression3519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_anonymous_function_signature3526 = new BitSet(new long[]{0x0002000020000000L,0x1690B5B400000000L,0x9A08EB14B6769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_list_in_anonymous_function_signature3529 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature3535 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_anonymous_function_signature3539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature3544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3553 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_implicit_anonymous_function_parameter_list3558 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3562 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_identifier_in_implicit_anonymous_function_parameter3572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_anonymous_function_body3579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_anonymous_function_body3584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_from_clause_in_query_expression3596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200010060240L,0x0000000000000010L});
    public static final BitSet FOLLOW_query_body_in_query_expression3600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_body_clauses_in_query_body3610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000200L});
    public static final BitSet FOLLOW_select_or_group_clause_in_query_body3615 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_query_continuation_in_query_body3626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_query_continuation3636 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_query_continuation3640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200010060240L,0x0000000000000010L});
    public static final BitSet FOLLOW_query_body_in_query_continuation3644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_body_clause_in_query_body_clauses3651 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000010060040L,0x0000000000000010L});
    public static final BitSet FOLLOW_from_clause_in_query_body_clause3660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_let_clause_in_query_body_clause3665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_where_clause_in_query_body_clause3670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_clause_in_query_body_clause3675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderby_clause_in_query_body_clause3680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_from_clause3687 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_from_clause3691 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_from_clause3696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_from_clause3700 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_from_clause3704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_join_clause3712 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_join_clause3716 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_join_clause3721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_join_clause3725 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_join_clause3729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_154_in_join_clause3733 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_join_clause3737 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_join_clause3741 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_join_clause3745 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_143_in_join_clause3748 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_join_clause3750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_let_clause3760 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_let_clause3764 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_let_clause3768 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_let_clause3772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_orderby_clause3779 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_ordering_list_in_orderby_clause3783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ordering_in_ordering_list3791 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_ordering_list3796 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_ordering_in_ordering_list3800 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_expression_in_ordering3810 = new BitSet(new long[]{0x0000000000000000L,0x0080008000000000L});
    public static final BitSet FOLLOW_ordering_direction_in_ordering3815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_clause_in_select_or_group_clause3837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_clause_in_select_or_group_clause3842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_select_clause3850 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_select_clause3854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_group_clause3862 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_group_clause3866 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_108_in_group_clause3870 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_group_clause3874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_where_clause3882 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_boolean_expression_in_where_clause3886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_boolean_expression3894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_attribute_in_global_attributes3906 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_94_in_global_attribute3916 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_global_attribute_target_specifier_in_global_attribute3920 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_attribute_list_in_global_attribute3924 = new BitSet(new long[]{0x0000000000000000L,0x0000000080002000L});
    public static final BitSet FOLLOW_77_in_global_attribute3928 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_95_in_global_attribute3933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_attribute_target_in_global_attribute_target_specifier3942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_82_in_global_attribute_target_specifier3946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_sections_in_attributes3968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_section_in_attribute_sections3977 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_94_in_attribute_section3987 = new BitSet(new long[]{0x0000000020000000L,0x348011B400000000L,0x0200661494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_attribute_target_specifier_in_attribute_section3991 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_attribute_list_in_attribute_section3996 = new BitSet(new long[]{0x0000000000000000L,0x0000000080002000L});
    public static final BitSet FOLLOW_77_in_attribute_section4000 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_95_in_attribute_section4005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_target_in_attribute_target_specifier4014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_82_in_attribute_target_specifier4018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_in_attribute_list4060 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_attribute_list4063 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_attribute_in_attribute_list4065 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_type_name_in_attribute4077 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_attribute_arguments_in_attribute4081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_attribute_arguments4092 = new BitSet(new long[]{0x20A6007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_RPAREN_in_attribute_arguments4097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_positional_argument_in_attribute_arguments4117 = new BitSet(new long[]{0x0002000020000000L,0x148011B400002000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_named_argument_in_attribute_arguments4136 = new BitSet(new long[]{0x0002000020000000L,0x148011B400002000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_77_in_attribute_arguments4152 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_positional_argument_in_attribute_arguments4154 = new BitSet(new long[]{0x0002000020000000L,0x148011B400002000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_RPAREN_in_attribute_arguments4165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_positional_argument_in_positional_argument_list4179 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_positional_argument_list4182 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_positional_argument_in_positional_argument_list4184 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_attribute_argument_expression_in_positional_argument4195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_named_argument_in_named_argument_list4204 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_named_argument_list4207 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_named_argument_in_named_argument_list4209 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_identifier_in_named_argument4220 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_named_argument4224 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_attribute_argument_expression_in_named_argument4228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_attribute_argument_expression4237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_class_declaration4251 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_type_or_generic_in_class_declaration4254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_class_base_in_class_declaration4258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_class_declaration4263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_class_body_in_class_declaration4268 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_SEMI_in_class_declaration4272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_class_base4313 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_interface_type_list_in_class_base4317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interface_type_list4327 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_interface_type_list4330 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_interface_type_list4334 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_199_in_class_body4345 = new BitSet(new long[]{0x0000000020080000L,0xF6D6B5BC40000000L,0xDA1CFAFED776F649L,0x000000000000185FL});
    public static final BitSet FOLLOW_class_member_declarations_in_class_body4349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_class_body4354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_member_declaration_in_class_member_declarations4362 = new BitSet(new long[]{0x0000000020080002L,0xF6D6B5BC40000000L,0xDA1CFAFED776F649L,0x000000000000105FL});
    public static final BitSet FOLLOW_114_in_constant_declaration4373 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_constant_declaration4377 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_constant_declarators_in_constant_declaration4381 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_constant_declaration4385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_declarator_in_constant_declarators4393 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_constant_declarators4396 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_constant_declarator_in_constant_declarators4398 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_identifier_in_constant_declarator4408 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_constant_declarator4413 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_constant_expression_in_constant_declarator4417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_constant_expression4427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declarators_in_field_declaration4436 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_field_declaration4440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declarator_in_variable_declarators4448 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_variable_declarators4451 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_variable_declarator_in_variable_declarators4455 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_type_name_in_variable_declarator4465 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_variable_declarator4468 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x00000000000010D1L});
    public static final BitSet FOLLOW_variable_initializer_in_variable_declarator4472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_in_method_declaration4486 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_method_body_in_method_declaration4490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_method_header4498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_method_header4501 = new BitSet(new long[]{0x0002000020000000L,0x1690B5B440000000L,0x9A48EB15B6769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_formal_parameter_list_in_method_header4505 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_method_header4510 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_method_header4514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_method_body4523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qid_in_member_name4531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_property_declaration4543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_199_in_property_declaration4547 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000406800004080L});
    public static final BitSet FOLLOW_accessor_declarations_in_property_declaration4551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_property_declaration4555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_accessor_declarations4563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000406800004080L});
    public static final BitSet FOLLOW_get_accessor_declaration_in_accessor_declarations4569 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L,0x0000406800004000L});
    public static final BitSet FOLLOW_attributes_in_accessor_declarations4573 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000406800004000L});
    public static final BitSet FOLLOW_set_accessor_declaration_in_accessor_declarations4578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_accessor_declaration_in_accessor_declarations4585 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L,0x0000006800004080L});
    public static final BitSet FOLLOW_attributes_in_accessor_declarations4589 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000006800004080L});
    public static final BitSet FOLLOW_get_accessor_declaration_in_accessor_declarations4594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accessor_modifier_in_get_accessor_declaration4604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_get_accessor_declaration4609 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_accessor_body_in_get_accessor_declaration4613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accessor_modifier_in_set_accessor_declaration4621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_174_in_set_accessor_declaration4626 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_accessor_body_in_set_accessor_declaration4630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_accessor_body4658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_event_declaration4668 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_event_declaration4672 = new BitSet(new long[]{0x20A4006030400080L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000051L});
    public static final BitSet FOLLOW_member_name_in_event_declaration4687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_199_in_event_declaration4691 = new BitSet(new long[]{0x0000000000000000L,0x0000001040000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_event_accessor_declarations_in_event_declaration4695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_event_declaration4699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declarators_in_event_declaration4705 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_event_declaration4709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_event_modifiers4721 = new BitSet(new long[]{0x0000000000000002L,0x8000000800000000L,0x400410E841004000L,0x000000000000000AL});
    public static final BitSet FOLLOW_attributes_in_event_accessor_declarations4730 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_add_accessor_declaration_in_event_accessor_declarations4737 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_attributes_in_event_accessor_declarations4741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_remove_accessor_declaration_in_event_accessor_declarations4746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_remove_accessor_declaration_in_event_accessor_declarations4767 = new BitSet(new long[]{0x0000000000000000L,0x0000001040000000L});
    public static final BitSet FOLLOW_attributes_in_event_accessor_declarations4771 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_add_accessor_declaration_in_event_accessor_declarations4776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_add_accessor_declaration4786 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_block_in_add_accessor_declaration4790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_remove_accessor_declaration4798 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_block_in_remove_accessor_declaration4802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_in_enum_declaration4814 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_enum_declaration4818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_enum_base_in_enum_declaration4822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_enum_body_in_enum_declaration4827 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_SEMI_in_enum_declaration4831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_enum_base4840 = new BitSet(new long[]{0x0000000000000000L,0x0000A00000000000L,0x9800880000101000L});
    public static final BitSet FOLLOW_integral_type_in_enum_base4844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_enum_body4852 = new BitSet(new long[]{0x0000000020000000L,0x148011B440000000L,0x0200621494668241L,0x0000000000000851L});
    public static final BitSet FOLLOW_enum_member_declarations_in_enum_body4855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_77_in_enum_body4857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_enum_body4864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_member_declaration_in_enum_member_declarations4872 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_enum_member_declarations4875 = new BitSet(new long[]{0x0000000020000000L,0x148011B440000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_enum_member_declaration_in_enum_member_declarations4877 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_attributes_in_enum_member_declaration4887 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_enum_member_declaration4892 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_enum_member_declaration4897 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_enum_member_declaration4901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_delegate_declaration4958 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_return_type_in_delegate_declaration4962 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_delegate_declaration4966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100080L});
    public static final BitSet FOLLOW_variant_generic_parameter_list_in_delegate_declaration4969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_delegate_declaration4977 = new BitSet(new long[]{0x0002000020000000L,0x1690B5B440000000L,0x9A48EB15B6769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_formal_parameter_list_in_delegate_declaration4981 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_delegate_declaration4986 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration4990 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_delegate_declaration4995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_delegate_modifiers5003 = new BitSet(new long[]{0x0000000000000002L,0x8000000800000000L,0x400410E841004000L,0x000000000000000AL});
    public static final BitSet FOLLOW_84_in_variant_generic_parameter_list5013 = new BitSet(new long[]{0x0000000020000000L,0x148011B440000000L,0x02006214B4668A41L,0x0000000000000051L});
    public static final BitSet FOLLOW_variant_type_parameters_in_variant_generic_parameter_list5017 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GT_in_variant_generic_parameter_list5021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variant_type_variable_name_in_variant_type_parameters5029 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_variant_type_parameters5032 = new BitSet(new long[]{0x0000000020000000L,0x148011B440000000L,0x02006214B4668A41L,0x0000000000000051L});
    public static final BitSet FOLLOW_variant_type_variable_name_in_variant_type_parameters5034 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_attributes_in_variant_type_variable_name5044 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x02006214B4668A41L,0x0000000000000051L});
    public static final BitSet FOLLOW_variance_annotation_in_variant_type_variable_name5049 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_type_variable_name_in_variant_type_variable_name5054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses5075 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_type_parameter_constraints_clauses5080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses5084 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_196_in_type_parameter_constraints_clause5094 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_type_variable_name_in_type_parameter_constraints_clause5098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_82_in_type_parameter_constraints_clause5102 = new BitSet(new long[]{0x0000000020000000L,0x148211B400000000L,0x0210621495668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_type_parameter_constraint_list_in_type_parameter_constraints_clause5106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_type_parameter_constraint_list5169 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_type_parameter_constraint_list5180 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list5184 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_type_parameter_constraint_list5191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_constructor_constraint_in_type_parameter_constraint_list5195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list5202 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_type_parameter_constraint_list5207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_constructor_constraint_in_type_parameter_constraint_list5211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_constraint_in_type_parameter_constraint_list5218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondary_constraint_in_secondary_constraint_list5230 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_secondary_constraint_list5233 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_secondary_constraint_in_secondary_constraint_list5235 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_type_name_in_secondary_constraint5245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_type_variable_name5255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_constructor_constraint5263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_constructor_constraint5267 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_constructor_constraint5271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_return_type5279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_return_type5285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formal_parameter_in_formal_parameter_list5292 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_formal_parameter_list5295 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B440000000L,0x9A48EB15B6769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_formal_parameter_in_formal_parameter_list5297 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_attributes_in_formal_parameter5307 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A48EB15B6769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_fixed_parameter_in_formal_parameter5313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_array_in_formal_parameter5317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_formal_parameter5324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fixed_parameter_in_fixed_parameters5332 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_fixed_parameters5337 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A48EB14B6769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_fixed_parameter_in_fixed_parameters5341 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_parameter_modifier_in_fixed_parameter5352 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_fixed_parameter5357 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_fixed_parameter5361 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_default_argument_in_fixed_parameter5365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_default_argument5375 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_default_argument5377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_parameter_array5400 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_parameter_array5404 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_parameter_array5408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_interface_declaration5418 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_interface_declaration5422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000140000L,0x0000000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_variant_generic_parameter_list_in_interface_declaration5426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_interface_base_in_interface_declaration5435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_declaration5440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_interface_body_in_interface_declaration5445 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_SEMI_in_interface_declaration5449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_interface_modifiers5459 = new BitSet(new long[]{0x0000000000000002L,0x8000000800000000L,0x400410E841004000L,0x000000000000000AL});
    public static final BitSet FOLLOW_82_in_interface_base5472 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_interface_type_list_in_interface_base5474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_interface_body5482 = new BitSet(new long[]{0x0000000020000000L,0xB690B5BC40000000L,0xDA0CFAFCD776D249L,0x000000000000085FL});
    public static final BitSet FOLLOW_interface_member_declarations_in_interface_body5486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_interface_body5491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_member_declaration_in_interface_member_declarations5499 = new BitSet(new long[]{0x0000000020000002L,0xB690B5BC40000000L,0xDA0CFAFCD776D249L,0x000000000000005FL});
    public static final BitSet FOLLOW_attributes_in_interface_member_declaration5508 = new BitSet(new long[]{0x0000000020000000L,0xB690B5BC00000000L,0xDA0CFAFCD776D249L,0x000000000000005FL});
    public static final BitSet FOLLOW_modifiers_in_interface_member_declaration5514 = new BitSet(new long[]{0x0000000020000000L,0x3690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_194_in_interface_member_declaration5520 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_interface_method_declaration_in_interface_member_declaration5524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_event_declaration_in_interface_member_declaration5530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interface_member_declaration5536 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0240621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_interface_method_declaration_in_interface_member_declaration5552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_property_declaration_in_interface_member_declaration5577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_indexer_declaration_in_interface_member_declaration5587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_interface_property_declaration5604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_199_in_interface_property_declaration5608 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000400000000080L});
    public static final BitSet FOLLOW_interface_accessor_declarations_in_interface_property_declaration5612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_interface_property_declaration5616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_interface_method_declaration5624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100080L});
    public static final BitSet FOLLOW_generic_argument_list_in_interface_method_declaration5628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_interface_method_declaration5636 = new BitSet(new long[]{0x0002000020000000L,0x1690B5B440000000L,0x9A48EB15B6769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_method_declaration5640 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_interface_method_declaration5645 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration5649 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_interface_method_declaration5654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_interface_event_declaration5665 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_interface_event_declaration5669 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_interface_event_declaration5673 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_interface_event_declaration5677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_interface_indexer_declaration5689 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_94_in_interface_indexer_declaration5693 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B440000000L,0x9A48EB15B6769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_indexer_declaration5697 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_95_in_interface_indexer_declaration5701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_199_in_interface_indexer_declaration5705 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000400000000080L});
    public static final BitSet FOLLOW_interface_accessor_declarations_in_interface_indexer_declaration5709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_interface_indexer_declaration5713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_interface_accessor_declarations5721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000080L});
    public static final BitSet FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations5730 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_attributes_in_interface_accessor_declarations5734 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations5739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations5746 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_attributes_in_interface_accessor_declarations5750 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations5755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_interface_get_accessor_declaration5765 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_interface_get_accessor_declaration5769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_interface_set_accessor_declaration5779 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_interface_set_accessor_declaration5783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_method_modifiers5793 = new BitSet(new long[]{0x0000000000000002L,0x8000000800000000L,0x400410E841004000L,0x000000000000000AL});
    public static final BitSet FOLLOW_180_in_struct_declaration5805 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_type_or_generic_in_struct_declaration5809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_struct_interfaces_in_struct_declaration5813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_struct_declaration5818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_struct_body_in_struct_declaration5823 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_SEMI_in_struct_declaration5827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_modifier_in_struct_modifiers5836 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x4000006801004000L});
    public static final BitSet FOLLOW_82_in_struct_interfaces5873 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_interface_type_list_in_struct_interfaces5877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_struct_body5884 = new BitSet(new long[]{0x0000000020080000L,0xF6D6B5BC40000000L,0xDA1CFAFED776F649L,0x000000000000085FL});
    public static final BitSet FOLLOW_struct_member_declarations_in_struct_body5888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_struct_body5893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_member_declaration_in_struct_member_declarations5900 = new BitSet(new long[]{0x0000000020080002L,0xF6D6B5BC40000000L,0xDA1CFAFED776F649L,0x000000000000005FL});
    public static final BitSet FOLLOW_attributes_in_struct_member_declaration5911 = new BitSet(new long[]{0x0000000020080000L,0xF6D6B5BC00000000L,0xDA1CFAFED776F649L,0x000000000000005FL});
    public static final BitSet FOLLOW_modifiers_in_struct_member_declaration5918 = new BitSet(new long[]{0x0000000020080000L,0x76D6B5B400000000L,0x9A18EA169676B649L,0x0000000000000055L});
    public static final BitSet FOLLOW_114_in_struct_member_declaration5928 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_struct_member_declaration5932 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_constant_declarators_in_struct_member_declaration5936 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_struct_member_declaration5940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_event_declaration_in_struct_member_declaration5946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_struct_member_declaration5954 = new BitSet(new long[]{0x20A4006030400080L,0x1692B5B400000000L,0x9A18EA149676B249L,0x0000000000000051L});
    public static final BitSet FOLLOW_method_declaration_in_struct_member_declaration5965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_struct_member_declaration5973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_declaration_in_struct_member_declaration5981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_declaration_in_struct_member_declaration5989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_struct_member_declaration6001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_declaration_in_struct_member_declaration6008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_struct_member_declaration6016 = new BitSet(new long[]{0x20A4006030400080L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000051L});
    public static final BitSet FOLLOW_method_declaration_in_struct_member_declaration6020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_struct_member_declaration6026 = new BitSet(new long[]{0x20A4006030400080L,0x1690B5B400000000L,0x9A48EA149E769249L,0x0000000000000051L});
    public static final BitSet FOLLOW_method_declaration_in_struct_member_declaration6049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_declaration_in_struct_member_declaration6067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_struct_member_declaration6092 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_DOT_in_struct_member_declaration6094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_indexer_declaration_in_struct_member_declaration6096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indexer_declaration_in_struct_member_declaration6107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_struct_member_declaration6123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_declaration_in_struct_member_declaration6144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_declaration_in_struct_member_declaration6166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_declaration_in_struct_member_declaration6173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delegate_declaration_in_struct_member_declaration6181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conversion_operator_declaration_in_struct_member_declaration6188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declaration_in_struct_member_declaration6194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indexer_declarator_in_indexer_declaration6212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_199_in_indexer_declaration6216 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000406800004080L});
    public static final BitSet FOLLOW_accessor_declarations_in_indexer_declaration6220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_indexer_declaration6224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_indexer_declarator6239 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_94_in_indexer_declarator6243 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B440000000L,0x9A48EB15B6769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_formal_parameter_list_in_indexer_declarator6247 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_95_in_indexer_declarator6251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_declarator_in_operator_declaration6264 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_operator_body_in_operator_declaration6266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_operator_declarator6277 = new BitSet(new long[]{0x0080001000C00000L,0x000000010AB14D27L,0x0000000000000000L,0x0000000000001100L});
    public static final BitSet FOLLOW_set_in_operator_declarator6287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_operator_declarator6297 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_operator_declarator6301 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_operator_declarator6305 = new BitSet(new long[]{0x0002000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_binary_operator_declarator_in_operator_declarator6308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_operator_declarator_in_operator_declarator6312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_overloadable_unary_operator_in_operator_declarator6321 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_unary_operator_declarator_in_operator_declarator6325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_overloadable_binary_operator_in_operator_declarator6333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_binary_operator_declarator_in_operator_declarator6337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RPAREN_in_unary_operator_declarator6358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_binary_operator_declarator6407 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_binary_operator_declarator6411 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_binary_operator_declarator6415 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_binary_operator_declarator6419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_overloadable_binary_operator6433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_overloadable_binary_operator6438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_overloadable_binary_operator6443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_overloadable_binary_operator6448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_overloadable_binary_operator6453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_overloadable_binary_operator6458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_overloadable_binary_operator6463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_overloadable_binary_operator6468 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GT_in_overloadable_binary_operator6470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_overloadable_binary_operator6475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_overloadable_binary_operator6480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_overloadable_binary_operator6485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_overloadable_binary_operator6490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_overloadable_binary_operator6495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_overloadable_binary_operator6500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conversion_operator_declarator_in_conversion_operator_declaration6512 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_operator_body_in_conversion_operator_declaration6516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_conversion_operator_declarator6527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_conversion_operator_declarator6536 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_conversion_operator_declarator6540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_conversion_operator_declarator6544 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_conversion_operator_declarator6548 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_conversion_operator_declarator6552 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_conversion_operator_declarator6556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_operator_body6567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declarator_in_constructor_declaration6579 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_constructor_body_in_constructor_declaration6583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_constructor_declarator6594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_constructor_declarator6598 = new BitSet(new long[]{0x0002000020000000L,0x1690B5B440000000L,0x9A48EB15B6769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_formal_parameter_list_in_constructor_declarator6602 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_constructor_declarator6607 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_constructor_initializer_in_constructor_declarator6611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_constructor_initializer6623 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_set_in_constructor_initializer6627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_constructor_initializer6637 = new BitSet(new long[]{0x20A6007030400080L,0x16F1B7B400004DA1L,0xBE49EB14B7769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_argument_list_in_constructor_initializer6641 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_constructor_initializer6646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_constructor_body6657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_204_in_destructor_declaration6675 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_destructor_declaration6678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_destructor_declaration6682 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_destructor_declaration6686 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_destructor_body_in_destructor_declaration6691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_destructor_body6702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_invocation_start_in_invocation_expression6714 = new BitSet(new long[]{0x0000800000001000L,0x0000000040000080L});
    public static final BitSet FOLLOW_arguments_in_invocation_expression6740 = new BitSet(new long[]{0x0000800000001000L,0x0000000040000000L});
    public static final BitSet FOLLOW_invocation_part_in_invocation_expression6744 = new BitSet(new long[]{0x0000800000001000L,0x0000000040000080L});
    public static final BitSet FOLLOW_invocation_part_in_invocation_expression6751 = new BitSet(new long[]{0x0000800000001000L,0x0000000040000080L});
    public static final BitSet FOLLOW_arguments_in_invocation_expression6760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_predefined_type_in_invocation_start6770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_invocation_start6787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_generic_argument_list_in_invocation_start6791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_invocation_start6796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_invocation_start6802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_invocation_start6807 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_invocation_start6812 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_invocation_start6816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_expression_in_invocation_start6823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_access_identifier_in_invocation_part6847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_invocation_part6852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_statement_in_statement6869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_labeled_statement_in_statement6884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_embedded_statement_in_statement6889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_embedded_statement6899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selection_statement_in_embedded_statement6904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iteration_statement_in_embedded_statement6910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jump_statement_in_embedded_statement6916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_statement_in_embedded_statement6923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_checked_statement_in_embedded_statement6928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unchecked_statement_in_embedded_statement6933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_statement_in_embedded_statement6938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_statement_in_embedded_statement6943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yield_statement_in_embedded_statement6949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unsafe_statement_in_embedded_statement6955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fixed_statement_in_embedded_statement6960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_statement_in_embedded_statement6965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_fixed_statement6975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_fixed_statement6979 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_pointer_type_in_fixed_statement6983 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_fixed_pointer_declarators_in_fixed_statement6985 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_fixed_statement6989 = new BitSet(new long[]{0x28B4007070400080L,0x17F9BFB400004DA1L,0xFFE9EE14977E937DL,0x00000000000010F1L});
    public static final BitSet FOLLOW_embedded_statement_in_fixed_statement6993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators7001 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_fixed_pointer_declarators7006 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators7010 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_identifier_in_fixed_pointer_declarator7020 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_fixed_pointer_declarator7024 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator7028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_fixed_pointer_initializer7038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_unsafe_statement7045 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_block_in_unsafe_statement7049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_labeled_statement7056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_82_in_labeled_statement7060 = new BitSet(new long[]{0x28B4007070400080L,0x17FDBFB400004DA1L,0xFFE9EE14977E937DL,0x00000000000010F5L});
    public static final BitSet FOLLOW_statement_in_labeled_statement7064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declaration_in_declaration_statement7079 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_local_constant_declaration_in_declaration_statement7086 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_declaration_statement7092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_type_in_local_variable_declaration7104 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_local_variable_declarators_in_local_variable_declaration7108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_local_variable_type7136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_local_variable_type7147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_local_variable_type7152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declarator_in_local_variable_declarators7162 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_local_variable_declarators7165 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_local_variable_declarator_in_local_variable_declarators7167 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_identifier_in_local_variable_declarator7186 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_local_variable_declarator7189 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE4BEA1497769249L,0x00000000000010D1L});
    public static final BitSet FOLLOW_local_variable_initializer_in_local_variable_declarator7192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_local_variable_initializer7206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_initializer_in_local_variable_initializer7211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stackalloc_initializer_in_local_variable_initializer7217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_stackalloc_initializer7227 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_unmanaged_type_in_stackalloc_initializer7231 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_94_in_stackalloc_initializer7235 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_stackalloc_initializer7239 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_95_in_stackalloc_initializer7243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_local_constant_declaration7251 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_local_constant_declaration7255 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_constant_declarators_in_local_constant_declaration7259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expression_statement7267 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_expression_statement7271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_statement_expression7281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_statement_in_selection_statement7290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_statement_in_selection_statement7295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_if_statement7305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_if_statement7309 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_boolean_expression_in_if_statement7313 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_if_statement7317 = new BitSet(new long[]{0x28B4007070400080L,0x17F9BFB400004DA1L,0xFFE9EE14977E937DL,0x00000000000010F1L});
    public static final BitSet FOLLOW_embedded_statement_in_if_statement7321 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_else_statement_in_if_statement7330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_else_statement7341 = new BitSet(new long[]{0x28B4007070400080L,0x17F9BFB400004DA1L,0xFFE9EE14977E937DL,0x00000000000010F1L});
    public static final BitSet FOLLOW_embedded_statement_in_else_statement7345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_switch_statement7353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_switch_statement7357 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_switch_statement7361 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_switch_statement7365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_switch_block_in_switch_statement7369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_switch_block7377 = new BitSet(new long[]{0x0000000000000000L,0x0020400000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_switch_sections_in_switch_block7381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_switch_block7386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_section_in_switch_sections7394 = new BitSet(new long[]{0x0000000000000002L,0x0020400000000000L});
    public static final BitSet FOLLOW_switch_labels_in_switch_section7403 = new BitSet(new long[]{0x28B4007070400080L,0x17FDBFB400004DA1L,0xFFE9EE14977E937DL,0x00000000000010F5L});
    public static final BitSet FOLLOW_statement_list_in_switch_section7407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_label_in_switch_labels7415 = new BitSet(new long[]{0x0000000000000002L,0x0020400000000000L});
    public static final BitSet FOLLOW_110_in_switch_label7425 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_constant_expression_in_switch_label7429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_82_in_switch_label7433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_switch_label7440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_82_in_switch_label7444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_statement_in_iteration_statement7453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_statement_in_iteration_statement7458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_statement_in_iteration_statement7463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_statement_in_iteration_statement7468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_while_statement7476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_while_statement7480 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_boolean_expression_in_while_statement7484 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_while_statement7488 = new BitSet(new long[]{0x28B4007070400080L,0x17F9BFB400004DA1L,0xFFE9EE14977E937DL,0x00000000000010F1L});
    public static final BitSet FOLLOW_embedded_statement_in_while_statement7492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_do_statement7500 = new BitSet(new long[]{0x28B4007070400080L,0x17F9BFB400004DA1L,0xFFE9EE14977E937DL,0x00000000000010F1L});
    public static final BitSet FOLLOW_embedded_statement_in_do_statement7504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_do_statement7508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_do_statement7512 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_boolean_expression_in_do_statement7516 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_do_statement7520 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_do_statement7524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_for_statement7532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_for_statement7536 = new BitSet(new long[]{0x20B4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001055L});
    public static final BitSet FOLLOW_for_initializer_in_for_statement7540 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_for_statement7545 = new BitSet(new long[]{0x20B4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_for_condition_in_for_statement7549 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_for_statement7554 = new BitSet(new long[]{0x20A6007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_for_iterator_in_for_statement7558 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_for_statement7563 = new BitSet(new long[]{0x28B4007070400080L,0x17F9BFB400004DA1L,0xFFE9EE14977E937DL,0x00000000000010F1L});
    public static final BitSet FOLLOW_embedded_statement_in_for_statement7567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declaration_in_for_initializer7581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_expression_list_in_for_initializer7586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_expression_in_for_condition7598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_expression_list_in_for_iterator7610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_expression_in_statement_expression_list7623 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_statement_expression_list7626 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_statement_expression_in_statement_expression_list7628 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_133_in_foreach_statement7643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_foreach_statement7647 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_local_variable_type_in_foreach_statement7651 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_foreach_statement7655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_foreach_statement7659 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_foreach_statement7663 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_foreach_statement7667 = new BitSet(new long[]{0x28B4007070400080L,0x17F9BFB400004DA1L,0xFFE9EE14977E937DL,0x00000000000010F1L});
    public static final BitSet FOLLOW_embedded_statement_in_foreach_statement7671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_statement_in_jump_statement7683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_statement_in_jump_statement7688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_statement_in_jump_statement7693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_statement_in_jump_statement7698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_statement_in_jump_statement7703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_break_statement7715 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_break_statement7719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_continue_statement7731 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_continue_statement7735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_goto_statement7747 = new BitSet(new long[]{0x0000000020000000L,0x14A051B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_goto_statement7756 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_110_in_goto_statement7762 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_constant_expression_in_goto_statement7766 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_117_in_goto_statement7772 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_goto_statement7781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_return_statement7792 = new BitSet(new long[]{0x20B4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_return_statement7796 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_return_statement7801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_throw_statement7811 = new BitSet(new long[]{0x20B4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_throw_statement7815 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_throw_statement7820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_try_statement7831 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_block_in_try_statement7835 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_catch_clauses_in_try_statement7844 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_finally_clause_in_try_statement7848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_finally_clause_in_try_statement7855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CATCH_in_catch_clauses7871 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_specific_catch_clauses_in_catch_clauses7876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_catch_clause_in_catch_clauses7880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specific_catch_clause_in_specific_catch_clauses7893 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_CATCH_in_specific_catch_clauses7898 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_specific_catch_clause_in_specific_catch_clauses7903 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_general_catch_clause_in_specific_catch_clauses7907 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_71_in_specific_catch_clause7922 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_class_type_in_specific_catch_clause7926 = new BitSet(new long[]{0x0002000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_specific_catch_clause7930 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_specific_catch_clause7935 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_block_in_specific_catch_clause7939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_general_catch_clause7951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_finally_clause7963 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_block_in_finally_clause7967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_checked_statement7977 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_block_in_checked_statement7981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_unchecked_statement7993 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_block_in_unchecked_statement7997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_lock_statement8009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_lock_statement8013 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_lock_statement8016 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_lock_statement8020 = new BitSet(new long[]{0x28B4007070400080L,0x17F9BFB400004DA1L,0xFFE9EE14977E937DL,0x00000000000010F1L});
    public static final BitSet FOLLOW_embedded_statement_in_lock_statement8024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_using_statement8036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_using_statement8040 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001055L});
    public static final BitSet FOLLOW_resource_acquisition_in_using_statement8045 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_using_statement8049 = new BitSet(new long[]{0x28B4007070400080L,0x17F9BFB400004DA1L,0xFFE9EE14977E937DL,0x00000000000010F1L});
    public static final BitSet FOLLOW_embedded_statement_in_using_statement8054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declaration_in_resource_acquisition8072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_resource_acquisition8077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_yield_statement8088 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_170_in_yield_statement8097 = new BitSet(new long[]{0x20A4007030400080L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_expression_in_yield_statement8101 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_yield_statement8105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_yield_statement8111 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_yield_statement8115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_in_assignment_list11054 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_assignment_list11056 = new BitSet(new long[]{0x20A4007030400082L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_attributes_in_field_declarations11070 = new BitSet(new long[]{0x0000000020000000L,0x9690B5BC00000000L,0xDA0CFAFCD776D249L,0x000000000000005FL});
    public static final BitSet FOLLOW_modifiers_in_field_declarations11075 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_field_declarations11080 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_field_declaration_in_field_declarations11084 = new BitSet(new long[]{0x0000000020000002L,0x9690B5BC40000000L,0xDA0CFAFCD776D249L,0x000000000000005FL});
    public static final BitSet FOLLOW_attributes_in_property_declaration_list11098 = new BitSet(new long[]{0x0000000020000000L,0x9690B5BC00000000L,0xDA0CFAFCD776D249L,0x000000000000005FL});
    public static final BitSet FOLLOW_modifiers_in_property_declaration_list11103 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_property_declaration_list11108 = new BitSet(new long[]{0x20A4006030400080L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000051L});
    public static final BitSet FOLLOW_property_declaration_in_property_declaration_list11112 = new BitSet(new long[]{0x0000000020000002L,0x9690B5BC40000000L,0xDA0CFAFCD776D249L,0x000000000000005FL});
    public static final BitSet FOLLOW_constant_declaration_in_constant_declarations11125 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_literal_in_literals11137 = new BitSet(new long[]{0x20A4006010400082L});
    public static final BitSet FOLLOW_attributes_in_delegate_declaration_list11150 = new BitSet(new long[]{0x0000000000000000L,0x8040000800000000L,0x400410E841004000L,0x000000000000000AL});
    public static final BitSet FOLLOW_modifiers_in_delegate_declaration_list11155 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_delegate_declaration_in_delegate_declaration_list11160 = new BitSet(new long[]{0x0000000000000002L,0x8040000840000000L,0x400410E841004000L,0x000000000000000AL});
    public static final BitSet FOLLOW_local_variable_declaration_in_local_variable_declaration_list11174 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_local_variable_declaration_list11176 = new BitSet(new long[]{0x0000000020000002L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_local_variable_initializer_in_local_variable_initializer_list11190 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_local_variable_initializer_list11192 = new BitSet(new long[]{0x20A4007030400082L,0x16F1B7B400004DA1L,0xBE4BEA1497769249L,0x00000000000010D1L});
    public static final BitSet FOLLOW_expression_in_expression_list_test11207 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_expression_list_test11209 = new BitSet(new long[]{0x20A4007030400082L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression_list11223 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_unary_expression_list11225 = new BitSet(new long[]{0x20A4007030400082L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_invocation_expression_in_invocation_expression_list11239 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_invocation_expression_list11241 = new BitSet(new long[]{0x0000000020000002L,0x1690B7B400000000L,0x9E48EA1496769249L,0x0000000000000051L});
    public static final BitSet FOLLOW_primary_expression_in_primary_expression_list11255 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_primary_expression_list11257 = new BitSet(new long[]{0x20A4006030400082L,0x16F1B7B400000080L,0xBE49EA1497769249L,0x0000000000000051L});
    public static final BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression_list11271 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_in_non_assignment_expression_list11273 = new BitSet(new long[]{0x20A4007030400082L,0x16F1B7B400004DA1L,0xBE49EA1497769249L,0x0000000000001051L});
    public static final BitSet FOLLOW_modifiers_in_method_declarations11287 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_194_in_method_declarations11291 = new BitSet(new long[]{0x20A4006030400080L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000051L});
    public static final BitSet FOLLOW_type_in_method_declarations11295 = new BitSet(new long[]{0x20A4006030400080L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000051L});
    public static final BitSet FOLLOW_method_declaration_in_method_declarations11298 = new BitSet(new long[]{0x0000000020000002L,0x9690B5BC00000000L,0xDA0CFAFCD776D249L,0x000000000000005FL});
    public static final BitSet FOLLOW_161_in_synpred1_cs335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred2_cs649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_synpred2_cs653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred3_cs671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_199_in_synpred3_cs675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred4_cs689 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_DOT_in_synpred4_cs693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_182_in_synpred4_cs697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_synpred5_cs815 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_brackets_in_synpred5_cs817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_synpred6_cs837 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_brackets_in_synpred6_cs839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_creation_expression_in_synpred7_cs878 = new BitSet(new long[]{0x0000800000001000L,0x0000000040000000L});
    public static final BitSet FOLLOW_set_in_synpred7_cs882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delegate_creation_expression_in_synpred8_cs917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred9_cs1045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_synpred9_cs1050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_synpred10_cs1337 = new BitSet(new long[]{0x0000000020000000L,0x1690B5B400000000L,0x9A08EA1496769249L,0x0000000000000055L});
    public static final BitSet FOLLOW_type_in_synpred10_cs1341 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred10_cs1345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_creation_expression_in_synpred11_cs1606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_synpred12_cs1716 = new BitSet(new long[]{0x0000800000001000L,0x0000000040000000L});
    public static final BitSet FOLLOW_set_in_synpred12_cs1720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unbound_type_name_in_synpred13_cs2326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_generic_dimension_specifier_in_synpred14_cs2384 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_DOT_in_synpred14_cs2388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred15_cs2520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_synpred15_cs2524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred16_cs2569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_synpred16_cs2574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_predefined_type_in_synpred17_cs2667 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_name_in_synpred17_cs2671 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_rank_specifiers_in_synpred17_cs2675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_predefined_type_in_synpred18_cs2702 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000100L});
    public static final BitSet FOLLOW_type_name_in_synpred18_cs2706 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000100L});
    public static final BitSet FOLLOW_72_in_synpred18_cs2711 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_92_in_synpred18_cs2716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expression_in_synpred19_cs2898 = new BitSet(new long[]{0x0000000000800000L,0x0000000201429248L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_assignment_operator_in_synpred19_cs2902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_expression_in_synpred20_cs2967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_function_signature_in_synpred21_cs3183 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_synpred21_cs3187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_expression_in_synpred22_cs3198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_synpred23_cs3621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_synpred24_cs4123 = new BitSet(new long[]{0x0000000020000000L,0x148011B400000000L,0x0200621494668241L,0x0000000000000051L});
    public static final BitSet FOLLOW_identifier_in_synpred24_cs4127 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_synpred24_cs4131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred25_cs4678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_199_in_synpred25_cs4682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred26_cs5543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_synpred26_cs5547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred27_cs5568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_199_in_synpred27_cs5572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred28_cs6040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_synpred28_cs6044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred29_cs6058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_199_in_synpred29_cs6062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred30_cs6079 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_DOT_in_synpred30_cs6083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_182_in_synpred30_cs6087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_synpred31_cs6725 = new BitSet(new long[]{0x0000800000001000L,0x0000000040000000L});
    public static final BitSet FOLLOW_set_in_synpred31_cs6729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred32_cs6777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_synpred32_cs6782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_statement_in_synpred33_cs6864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred34_cs6875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_82_in_synpred34_cs6879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_synpred35_cs7131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_synpred36_cs7142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_synpred37_cs7325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declaration_in_synpred38_cs7576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declaration_in_synpred39_cs8067 = new BitSet(new long[]{0x0000000000000002L});

}