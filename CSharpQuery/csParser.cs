//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 .\\cs.g 2012-07-25 08:31:07

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class csParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "COMMENT", "Character_literal", "DECIMAL_DIGIT", "DEFINE", "DEFINE_TOKEN", "DOC_LINE_COMMENT", "DOT", "Decimal_digits", "Decimal_integer_literal", "ELIF", "ELSE_TOKEN", "ENDIF", "ENDIF_TOKEN", "ENUM", "EscapeSequence", "Exponent_part", "FALSE", "GT", "GooBall", "GooBallIdentifier", "HEX_DIGIT", "HEX_DIGITS", "Hex_number", "IDENTIFIER", "IF", "IF_TOKEN", "INTEGER_TYPE_SUFFIX", "IdentifierPart", "IdentifierStart", "LINE_COMMENT", "MINUS", "NULL", "NUMBER", "PP_AND_EXPRESSION", "PP_CONDITIONAL", "PP_EQUALITY_EXPRESSION", "PP_EXPRESSION", "PP_OR_EXPRESSION", "PP_PRIMARY_EXPRESSION", "PP_UNARY_EXPRESSION", "PREPROCESSOR_DIRECTIVE", "PTR", "Pragma", "RPAREN", "Real_literal", "Real_type_suffix", "SEMI", "STRINGLITERAL", "Sign", "TRUE", "TS", "UNDEF", "UNDEF_TOKEN", "USING", "Verbatim_string_literal", "Verbatim_string_literal_character", "WS", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'--'", "'-='", "'/'", "'/='", "':'", "'::'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>='", "'?'", "'??'", "'['", "']'", "'^'", "'^='", "'__arglist'", "'abstract'", "'add'", "'alias'", "'as'", "'ascending'", "'assembly'", "'base'", "'bool'", "'break'", "'by'", "'byte'", "'case'", "'catch'", "'char'", "'checked'", "'class'", "'const'", "'continue'", "'decimal'", "'default'", "'delegate'", "'descending'", "'do'", "'double'", "'dynamic'", "'else'", "'equals'", "'event'", "'explicit'", "'extern'", "'field'", "'finally'", "'fixed'", "'float'", "'for'", "'foreach'", "'from'", "'get'", "'goto'", "'group'", "'implicit'", "'in'", "'int'", "'interface'", "'internal'", "'into'", "'is'", "'join'", "'let'", "'lock'", "'long'", "'method'", "'module'", "'namespace'", "'new'", "'object'", "'on'", "'operator'", "'orderby'", "'out'", "'override'", "'param'", "'params'", "'partial'", "'pragma'", "'private'", "'property'", "'protected'", "'public'", "'readonly'", "'ref'", "'remove'", "'return'", "'sbyte'", "'sealed'", "'select'", "'set'", "'short'", "'sizeof'", "'stackalloc'", "'static'", "'string'", "'struct'", "'switch'", "'this'", "'throw'", "'try'", "'type'", "'typeof'", "'uint'", "'ulong'", "'unchecked'", "'unsafe'", "'ushort'", "'var'", "'virtual'", "'void'", "'volatile'", "'where'", "'while'", "'yield'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
	};
	public const int EOF=-1;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int T__183=183;
	public const int T__184=184;
	public const int T__185=185;
	public const int T__186=186;
	public const int T__187=187;
	public const int T__188=188;
	public const int T__189=189;
	public const int T__190=190;
	public const int T__191=191;
	public const int T__192=192;
	public const int T__193=193;
	public const int T__194=194;
	public const int T__195=195;
	public const int T__196=196;
	public const int T__197=197;
	public const int T__198=198;
	public const int T__199=199;
	public const int T__200=200;
	public const int T__201=201;
	public const int T__202=202;
	public const int COMMENT=4;
	public const int Character_literal=5;
	public const int DECIMAL_DIGIT=6;
	public const int DEFINE=7;
	public const int DEFINE_TOKEN=8;
	public const int DOC_LINE_COMMENT=9;
	public const int DOT=10;
	public const int Decimal_digits=11;
	public const int Decimal_integer_literal=12;
	public const int ELIF=13;
	public const int ELSE_TOKEN=14;
	public const int ENDIF=15;
	public const int ENDIF_TOKEN=16;
	public const int ENUM=17;
	public const int EscapeSequence=18;
	public const int Exponent_part=19;
	public const int FALSE=20;
	public const int GT=21;
	public const int GooBall=22;
	public const int GooBallIdentifier=23;
	public const int HEX_DIGIT=24;
	public const int HEX_DIGITS=25;
	public const int Hex_number=26;
	public const int IDENTIFIER=27;
	public const int IF=28;
	public const int IF_TOKEN=29;
	public const int INTEGER_TYPE_SUFFIX=30;
	public const int IdentifierPart=31;
	public const int IdentifierStart=32;
	public const int LINE_COMMENT=33;
	public const int MINUS=34;
	public const int NULL=35;
	public const int NUMBER=36;
	public const int PP_AND_EXPRESSION=37;
	public const int PP_CONDITIONAL=38;
	public const int PP_EQUALITY_EXPRESSION=39;
	public const int PP_EXPRESSION=40;
	public const int PP_OR_EXPRESSION=41;
	public const int PP_PRIMARY_EXPRESSION=42;
	public const int PP_UNARY_EXPRESSION=43;
	public const int PREPROCESSOR_DIRECTIVE=44;
	public const int PTR=45;
	public const int Pragma=46;
	public const int RPAREN=47;
	public const int Real_literal=48;
	public const int Real_type_suffix=49;
	public const int SEMI=50;
	public const int STRINGLITERAL=51;
	public const int Sign=52;
	public const int TRUE=53;
	public const int TS=54;
	public const int UNDEF=55;
	public const int UNDEF_TOKEN=56;
	public const int USING=57;
	public const int Verbatim_string_literal=58;
	public const int Verbatim_string_literal_character=59;
	public const int WS=60;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, true, 
				false, false, false, false, false, true, true, false, true, false, false, 
				false, false, false, false, false, false, true, false, false, false, 
				false, false, false, false, true, false, false, true, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, true, false, false, false, 
				false, false, false, false, false, false, false, false, true, false, 
				false, false, false, false, false, false, false, false, false, true, 
				false, false, false, true, false, true, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, true, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, true, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, true, false, false, 
				false, false, false, false, false, true, false, false, false, true, 
				false, false, false, true, false, false, false, false, true, false, 
				false, false, false, false, false, false, false, true, false, false, 
				false, false, false, false, false, false, false, false, false, true, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public csParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public csParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[356+1];


		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return csParser.tokenNames; } }
	public override string GrammarFileName { get { return ".\\cs.g"; } }


		protected bool is_class_modifier() 
		{
			return false;
		}


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_compilation_unit() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_compilation_unit() {}

	// $ANTLR start "compilation_unit"
	// .\\cs.g:33:8: public compilation_unit : namespace_body[true] ;
	[GrammarRule("compilation_unit")]
	public AstParserRuleReturnScope<object, IToken> compilation_unit()
	{
		EnterRule_compilation_unit();
		EnterRule("compilation_unit", 1);
		TraceIn("compilation_unit", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int compilation_unit_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> namespace_body1 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "compilation_unit");
		DebugLocation(33, 21);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// .\\cs.g:33:24: ( namespace_body[true] )
			DebugEnterAlt(1);
			// .\\cs.g:34:2: namespace_body[true]
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(34, 2);
			PushFollow(Follow._namespace_body_in_compilation_unit72);
			namespace_body1=namespace_body(true);
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_body1.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compilation_unit", 1);
			LeaveRule("compilation_unit", 1);
			LeaveRule_compilation_unit();
	        if (state.backtracking > 0) { Memoize(input, 1, compilation_unit_StartIndex); }

	    }
	 	DebugLocation(34, 21);
		} finally { DebugExitRule(GrammarFileName, "compilation_unit"); }
		return retval;

	}
	// $ANTLR end "compilation_unit"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_namespace_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_namespace_declaration() {}

	// $ANTLR start "namespace_declaration"
	// .\\cs.g:36:1: namespace_declaration : 'namespace' qualified_identifier namespace_block ( ';' )? ;
	[GrammarRule("namespace_declaration")]
	private AstParserRuleReturnScope<object, IToken> namespace_declaration()
	{
		EnterRule_namespace_declaration();
		EnterRule("namespace_declaration", 2);
		TraceIn("namespace_declaration", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int namespace_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal2 = default(IToken);
	    IToken char_literal5 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> qualified_identifier3 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> namespace_block4 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal2_tree = default(object);
	    object char_literal5_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "namespace_declaration");
		DebugLocation(36, 61);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// .\\cs.g:36:22: ( 'namespace' qualified_identifier namespace_block ( ';' )? )
			DebugEnterAlt(1);
			// .\\cs.g:37:2: 'namespace' qualified_identifier namespace_block ( ';' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(37, 2);
			string_literal2=(IToken)Match(input,149,Follow._149_in_namespace_declaration81); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal2_tree = (object)adaptor.Create(string_literal2);
			adaptor.AddChild(root_0, string_literal2_tree);
			}
			DebugLocation(37, 16);
			PushFollow(Follow._qualified_identifier_in_namespace_declaration85);
			qualified_identifier3=qualified_identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualified_identifier3.Tree);
			DebugLocation(37, 39);
			PushFollow(Follow._namespace_block_in_namespace_declaration89);
			namespace_block4=namespace_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_block4.Tree);
			DebugLocation(37, 57);
			// .\\cs.g:37:57: ( ';' )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==SEMI))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:37:57: ';'
				{
				DebugLocation(37, 57);
				char_literal5=(IToken)Match(input,SEMI,Follow._SEMI_in_namespace_declaration93); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal5_tree = (object)adaptor.Create(char_literal5);
				adaptor.AddChild(root_0, char_literal5_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_declaration", 2);
			LeaveRule("namespace_declaration", 2);
			LeaveRule_namespace_declaration();
	        if (state.backtracking > 0) { Memoize(input, 2, namespace_declaration_StartIndex); }

	    }
	 	DebugLocation(37, 61);
		} finally { DebugExitRule(GrammarFileName, "namespace_declaration"); }
		return retval;

	}
	// $ANTLR end "namespace_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_namespace_block() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_namespace_block() {}

	// $ANTLR start "namespace_block"
	// .\\cs.g:38:1: namespace_block : '{' namespace_body[false] '}' ;
	[GrammarRule("namespace_block")]
	private AstParserRuleReturnScope<object, IToken> namespace_block()
	{
		EnterRule_namespace_block();
		EnterRule("namespace_block", 3);
		TraceIn("namespace_block", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int namespace_block_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal6 = default(IToken);
	    IToken char_literal8 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> namespace_body7 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal6_tree = default(object);
	    object char_literal8_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "namespace_block");
		DebugLocation(38, 35);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// .\\cs.g:38:16: ( '{' namespace_body[false] '}' )
			DebugEnterAlt(1);
			// .\\cs.g:39:2: '{' namespace_body[false] '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(39, 2);
			char_literal6=(IToken)Match(input,197,Follow._197_in_namespace_block102); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal6_tree = (object)adaptor.Create(char_literal6);
			adaptor.AddChild(root_0, char_literal6_tree);
			}
			DebugLocation(39, 8);
			PushFollow(Follow._namespace_body_in_namespace_block106);
			namespace_body7=namespace_body(false);
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_body7.Tree);
			DebugLocation(39, 32);
			char_literal8=(IToken)Match(input,201,Follow._201_in_namespace_block111); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal8_tree = (object)adaptor.Create(char_literal8);
			adaptor.AddChild(root_0, char_literal8_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_block", 3);
			LeaveRule("namespace_block", 3);
			LeaveRule_namespace_block();
	        if (state.backtracking > 0) { Memoize(input, 3, namespace_block_StartIndex); }

	    }
	 	DebugLocation(39, 35);
		} finally { DebugExitRule(GrammarFileName, "namespace_block"); }
		return retval;

	}
	// $ANTLR end "namespace_block"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_namespace_body() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_namespace_body() {}

	// $ANTLR start "namespace_body"
	// .\\cs.g:40:1: namespace_body[bool bGlobal] : ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )? ;
	[GrammarRule("namespace_body")]
	private AstParserRuleReturnScope<object, IToken> namespace_body(bool bGlobal)
	{
		EnterRule_namespace_body();
		EnterRule("namespace_body", 4);
		TraceIn("namespace_body", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int namespace_body_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> extern_alias_directives9 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> using_directives10 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> global_attributes11 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> namespace_member_declarations12 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "namespace_body");
		DebugLocation(40, 100);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// .\\cs.g:40:29: ( ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )? )
			DebugEnterAlt(1);
			// .\\cs.g:41:2: ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(41, 2);
			// .\\cs.g:41:2: ( extern_alias_directives )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
			int LA2_0 = input.LA(1);

			if ((LA2_0==125))
			{
				int LA2_1 = input.LA(2);

				if ((LA2_1==98))
				{
					alt2 = 1;
				}
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:41:2: extern_alias_directives
				{
				DebugLocation(41, 2);
				PushFollow(Follow._extern_alias_directives_in_namespace_body120);
				extern_alias_directives9=extern_alias_directives();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, extern_alias_directives9.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(41, 29);
			// .\\cs.g:41:29: ( using_directives )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==USING))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:41:29: using_directives
				{
				DebugLocation(41, 29);
				PushFollow(Follow._using_directives_in_namespace_body125);
				using_directives10=using_directives();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, using_directives10.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(41, 49);
			// .\\cs.g:41:49: ( global_attributes )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, decisionCanBacktrack[4]);
			int LA4_0 = input.LA(1);

			if ((LA4_0==91))
			{
				int LA4_1 = input.LA(2);

				if ((LA4_1==101||LA4_1==148))
				{
					int LA4_3 = input.LA(3);

					if ((LA4_3==79))
					{
						alt4 = 1;
					}
				}
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:41:49: global_attributes
				{
				DebugLocation(41, 49);
				PushFollow(Follow._global_attributes_in_namespace_body130);
				global_attributes11=global_attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_attributes11.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(41, 70);
			// .\\cs.g:41:70: ( namespace_member_declarations )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, decisionCanBacktrack[5]);
			int LA5_0 = input.LA(1);

			if ((LA5_0==ENUM||LA5_0==91||LA5_0==96||LA5_0==111||LA5_0==116||LA5_0==125||(LA5_0>=139 && LA5_0<=140)||(LA5_0>=149 && LA5_0<=150)||LA5_0==156||LA5_0==159||LA5_0==161||(LA5_0>=163 && LA5_0<=165)||LA5_0==170||LA5_0==176||LA5_0==178||LA5_0==188||LA5_0==191||LA5_0==193))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:41:70: namespace_member_declarations
				{
				DebugLocation(41, 70);
				PushFollow(Follow._namespace_member_declarations_in_namespace_body135);
				namespace_member_declarations12=namespace_member_declarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_member_declarations12.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_body", 4);
			LeaveRule("namespace_body", 4);
			LeaveRule_namespace_body();
	        if (state.backtracking > 0) { Memoize(input, 4, namespace_body_StartIndex); }

	    }
	 	DebugLocation(41, 100);
		} finally { DebugExitRule(GrammarFileName, "namespace_body"); }
		return retval;

	}
	// $ANTLR end "namespace_body"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_extern_alias_directives() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_extern_alias_directives() {}

	// $ANTLR start "extern_alias_directives"
	// .\\cs.g:42:1: extern_alias_directives : ( extern_alias_directive )+ ;
	[GrammarRule("extern_alias_directives")]
	private AstParserRuleReturnScope<object, IToken> extern_alias_directives()
	{
		EnterRule_extern_alias_directives();
		EnterRule("extern_alias_directives", 5);
		TraceIn("extern_alias_directives", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int extern_alias_directives_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> extern_alias_directive13 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "extern_alias_directives");
		DebugLocation(42, 25);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// .\\cs.g:42:24: ( ( extern_alias_directive )+ )
			DebugEnterAlt(1);
			// .\\cs.g:43:2: ( extern_alias_directive )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(43, 2);
			// .\\cs.g:43:2: ( extern_alias_directive )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
				int LA6_0 = input.LA(1);

				if ((LA6_0==125))
				{
					int LA6_2 = input.LA(2);

					if ((LA6_2==98))
					{
						alt6 = 1;
					}


				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:43:2: extern_alias_directive
					{
					DebugLocation(43, 2);
					PushFollow(Follow._extern_alias_directive_in_extern_alias_directives144);
					extern_alias_directive13=extern_alias_directive();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, extern_alias_directive13.Tree);

					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("extern_alias_directives", 5);
			LeaveRule("extern_alias_directives", 5);
			LeaveRule_extern_alias_directives();
	        if (state.backtracking > 0) { Memoize(input, 5, extern_alias_directives_StartIndex); }

	    }
	 	DebugLocation(43, 25);
		} finally { DebugExitRule(GrammarFileName, "extern_alias_directives"); }
		return retval;

	}
	// $ANTLR end "extern_alias_directives"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_extern_alias_directive() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_extern_alias_directive() {}

	// $ANTLR start "extern_alias_directive"
	// .\\cs.g:44:1: extern_alias_directive : 'extern' 'alias' identifier ';' ;
	[GrammarRule("extern_alias_directive")]
	private AstParserRuleReturnScope<object, IToken> extern_alias_directive()
	{
		EnterRule_extern_alias_directive();
		EnterRule("extern_alias_directive", 6);
		TraceIn("extern_alias_directive", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int extern_alias_directive_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal14 = default(IToken);
	    IToken string_literal15 = default(IToken);
	    IToken char_literal17 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier16 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal14_tree = default(object);
	    object string_literal15_tree = default(object);
	    object char_literal17_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "extern_alias_directive");
		DebugLocation(44, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// .\\cs.g:44:23: ( 'extern' 'alias' identifier ';' )
			DebugEnterAlt(1);
			// .\\cs.g:45:2: 'extern' 'alias' identifier ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(45, 2);
			string_literal14=(IToken)Match(input,125,Follow._125_in_extern_alias_directive153); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal14_tree = (object)adaptor.Create(string_literal14);
			adaptor.AddChild(root_0, string_literal14_tree);
			}
			DebugLocation(45, 13);
			string_literal15=(IToken)Match(input,98,Follow._98_in_extern_alias_directive157); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal15_tree = (object)adaptor.Create(string_literal15);
			adaptor.AddChild(root_0, string_literal15_tree);
			}
			DebugLocation(45, 23);
			PushFollow(Follow._identifier_in_extern_alias_directive161);
			identifier16=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier16.Tree);
			DebugLocation(45, 35);
			char_literal17=(IToken)Match(input,SEMI,Follow._SEMI_in_extern_alias_directive164); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal17_tree = (object)adaptor.Create(char_literal17);
			adaptor.AddChild(root_0, char_literal17_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("extern_alias_directive", 6);
			LeaveRule("extern_alias_directive", 6);
			LeaveRule_extern_alias_directive();
	        if (state.backtracking > 0) { Memoize(input, 6, extern_alias_directive_StartIndex); }

	    }
	 	DebugLocation(45, 38);
		} finally { DebugExitRule(GrammarFileName, "extern_alias_directive"); }
		return retval;

	}
	// $ANTLR end "extern_alias_directive"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_using_directives() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_using_directives() {}

	// $ANTLR start "using_directives"
	// .\\cs.g:46:1: using_directives : ( using_directive )+ ;
	[GrammarRule("using_directives")]
	private AstParserRuleReturnScope<object, IToken> using_directives()
	{
		EnterRule_using_directives();
		EnterRule("using_directives", 7);
		TraceIn("using_directives", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int using_directives_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> using_directive18 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "using_directives");
		DebugLocation(46, 18);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// .\\cs.g:46:17: ( ( using_directive )+ )
			DebugEnterAlt(1);
			// .\\cs.g:47:2: ( using_directive )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(47, 2);
			// .\\cs.g:47:2: ( using_directive )+
			int cnt7=0;
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				int LA7_0 = input.LA(1);

				if ((LA7_0==USING))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:47:2: using_directive
					{
					DebugLocation(47, 2);
					PushFollow(Follow._using_directive_in_using_directives172);
					using_directive18=using_directive();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, using_directive18.Tree);

					}
					break;

				default:
					if (cnt7 >= 1)
						goto loop7;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee7 = new EarlyExitException( 7, input );
					DebugRecognitionException(eee7);
					throw eee7;
				}
				cnt7++;
			}
			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("using_directives", 7);
			LeaveRule("using_directives", 7);
			LeaveRule_using_directives();
	        if (state.backtracking > 0) { Memoize(input, 7, using_directives_StartIndex); }

	    }
	 	DebugLocation(47, 18);
		} finally { DebugExitRule(GrammarFileName, "using_directives"); }
		return retval;

	}
	// $ANTLR end "using_directives"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_using_directive() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_using_directive() {}

	// $ANTLR start "using_directive"
	// .\\cs.g:48:1: using_directive : ( using_alias_directive | using_namespace_directive ) ;
	[GrammarRule("using_directive")]
	private AstParserRuleReturnScope<object, IToken> using_directive()
	{
		EnterRule_using_directive();
		EnterRule("using_directive", 8);
		TraceIn("using_directive", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int using_directive_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> using_alias_directive19 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> using_namespace_directive20 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "using_directive");
		DebugLocation(48, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// .\\cs.g:48:16: ( ( using_alias_directive | using_namespace_directive ) )
			DebugEnterAlt(1);
			// .\\cs.g:49:2: ( using_alias_directive | using_namespace_directive )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(49, 2);
			// .\\cs.g:49:2: ( using_alias_directive | using_namespace_directive )
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			int LA8_0 = input.LA(1);

			if ((LA8_0==USING))
			{
				int LA8_1 = input.LA(2);

				if ((LA8_1==IDENTIFIER||LA8_1==95||(LA8_1>=97 && LA8_1<=98)||(LA8_1>=100 && LA8_1<=101)||LA8_1==105||LA8_1==117||LA8_1==120||LA8_1==122||LA8_1==126||LA8_1==132||LA8_1==135||LA8_1==141||(LA8_1>=143 && LA8_1<=144)||(LA8_1>=147 && LA8_1<=148)||LA8_1==152||LA8_1==154||LA8_1==157||LA8_1==160||LA8_1==162||LA8_1==167||(LA8_1>=171 && LA8_1<=172)||LA8_1==183||LA8_1==190||LA8_1==194||LA8_1==196))
				{
					int LA8_2 = input.LA(3);

					if ((LA8_2==85))
					{
						alt8 = 1;
					}
					else if ((LA8_2==DOT||LA8_2==SEMI||(LA8_2>=80 && LA8_2<=81)))
					{
						alt8 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 8, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:49:3: using_alias_directive
				{
				DebugLocation(49, 3);
				PushFollow(Follow._using_alias_directive_in_using_directive182);
				using_alias_directive19=using_alias_directive();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, using_alias_directive19.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:50:4: using_namespace_directive
				{
				DebugLocation(50, 4);
				PushFollow(Follow._using_namespace_directive_in_using_directive187);
				using_namespace_directive20=using_namespace_directive();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, using_namespace_directive20.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(8); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("using_directive", 8);
			LeaveRule("using_directive", 8);
			LeaveRule_using_directive();
	        if (state.backtracking > 0) { Memoize(input, 8, using_directive_StartIndex); }

	    }
	 	DebugLocation(50, 30);
		} finally { DebugExitRule(GrammarFileName, "using_directive"); }
		return retval;

	}
	// $ANTLR end "using_directive"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_using_alias_directive() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_using_alias_directive() {}

	// $ANTLR start "using_alias_directive"
	// .\\cs.g:51:1: using_alias_directive : 'using' identifier '=' namespace_or_type_name ';' ;
	[GrammarRule("using_alias_directive")]
	private AstParserRuleReturnScope<object, IToken> using_alias_directive()
	{
		EnterRule_using_alias_directive();
		EnterRule("using_alias_directive", 9);
		TraceIn("using_alias_directive", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int using_alias_directive_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal21 = default(IToken);
	    IToken char_literal23 = default(IToken);
	    IToken char_literal25 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier22 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> namespace_or_type_name24 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal21_tree = default(object);
	    object char_literal23_tree = default(object);
	    object char_literal25_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "using_alias_directive");
		DebugLocation(51, 59);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// .\\cs.g:51:22: ( 'using' identifier '=' namespace_or_type_name ';' )
			DebugEnterAlt(1);
			// .\\cs.g:52:2: 'using' identifier '=' namespace_or_type_name ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(52, 2);
			string_literal21=(IToken)Match(input,USING,Follow._USING_in_using_alias_directive196); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal21_tree = (object)adaptor.Create(string_literal21);
			adaptor.AddChild(root_0, string_literal21_tree);
			}
			DebugLocation(52, 12);
			PushFollow(Follow._identifier_in_using_alias_directive200);
			identifier22=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier22.Tree);
			DebugLocation(52, 25);
			char_literal23=(IToken)Match(input,85,Follow._85_in_using_alias_directive204); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal23_tree = (object)adaptor.Create(char_literal23);
			adaptor.AddChild(root_0, char_literal23_tree);
			}
			DebugLocation(52, 31);
			PushFollow(Follow._namespace_or_type_name_in_using_alias_directive208);
			namespace_or_type_name24=namespace_or_type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_or_type_name24.Tree);
			DebugLocation(52, 56);
			char_literal25=(IToken)Match(input,SEMI,Follow._SEMI_in_using_alias_directive212); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal25_tree = (object)adaptor.Create(char_literal25);
			adaptor.AddChild(root_0, char_literal25_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("using_alias_directive", 9);
			LeaveRule("using_alias_directive", 9);
			LeaveRule_using_alias_directive();
	        if (state.backtracking > 0) { Memoize(input, 9, using_alias_directive_StartIndex); }

	    }
	 	DebugLocation(52, 59);
		} finally { DebugExitRule(GrammarFileName, "using_alias_directive"); }
		return retval;

	}
	// $ANTLR end "using_alias_directive"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_using_namespace_directive() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_using_namespace_directive() {}

	// $ANTLR start "using_namespace_directive"
	// .\\cs.g:53:1: using_namespace_directive : 'using' namespace_name ';' ;
	[GrammarRule("using_namespace_directive")]
	private AstParserRuleReturnScope<object, IToken> using_namespace_directive()
	{
		EnterRule_using_namespace_directive();
		EnterRule("using_namespace_directive", 10);
		TraceIn("using_namespace_directive", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int using_namespace_directive_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal26 = default(IToken);
	    IToken char_literal28 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> namespace_name27 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal26_tree = default(object);
	    object char_literal28_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "using_namespace_directive");
		DebugLocation(53, 32);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// .\\cs.g:53:26: ( 'using' namespace_name ';' )
			DebugEnterAlt(1);
			// .\\cs.g:54:2: 'using' namespace_name ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(54, 2);
			string_literal26=(IToken)Match(input,USING,Follow._USING_in_using_namespace_directive220); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal26_tree = (object)adaptor.Create(string_literal26);
			adaptor.AddChild(root_0, string_literal26_tree);
			}
			DebugLocation(54, 12);
			PushFollow(Follow._namespace_name_in_using_namespace_directive224);
			namespace_name27=namespace_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_name27.Tree);
			DebugLocation(54, 29);
			char_literal28=(IToken)Match(input,SEMI,Follow._SEMI_in_using_namespace_directive228); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal28_tree = (object)adaptor.Create(char_literal28);
			adaptor.AddChild(root_0, char_literal28_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("using_namespace_directive", 10);
			LeaveRule("using_namespace_directive", 10);
			LeaveRule_using_namespace_directive();
	        if (state.backtracking > 0) { Memoize(input, 10, using_namespace_directive_StartIndex); }

	    }
	 	DebugLocation(54, 32);
		} finally { DebugExitRule(GrammarFileName, "using_namespace_directive"); }
		return retval;

	}
	// $ANTLR end "using_namespace_directive"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_namespace_member_declarations() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_namespace_member_declarations() {}

	// $ANTLR start "namespace_member_declarations"
	// .\\cs.g:55:1: namespace_member_declarations : ( namespace_member_declaration )+ ;
	[GrammarRule("namespace_member_declarations")]
	private AstParserRuleReturnScope<object, IToken> namespace_member_declarations()
	{
		EnterRule_namespace_member_declarations();
		EnterRule("namespace_member_declarations", 11);
		TraceIn("namespace_member_declarations", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int namespace_member_declarations_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> namespace_member_declaration29 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "namespace_member_declarations");
		DebugLocation(55, 31);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// .\\cs.g:55:30: ( ( namespace_member_declaration )+ )
			DebugEnterAlt(1);
			// .\\cs.g:56:2: ( namespace_member_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(56, 2);
			// .\\cs.g:56:2: ( namespace_member_declaration )+
			int cnt9=0;
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, decisionCanBacktrack[9]);
				int LA9_0 = input.LA(1);

				if ((LA9_0==ENUM||LA9_0==91||LA9_0==96||LA9_0==111||LA9_0==116||LA9_0==125||(LA9_0>=139 && LA9_0<=140)||(LA9_0>=149 && LA9_0<=150)||LA9_0==156||LA9_0==159||LA9_0==161||(LA9_0>=163 && LA9_0<=165)||LA9_0==170||LA9_0==176||LA9_0==178||LA9_0==188||LA9_0==191||LA9_0==193))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:56:2: namespace_member_declaration
					{
					DebugLocation(56, 2);
					PushFollow(Follow._namespace_member_declaration_in_namespace_member_declarations236);
					namespace_member_declaration29=namespace_member_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_member_declaration29.Tree);

					}
					break;

				default:
					if (cnt9 >= 1)
						goto loop9;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee9 = new EarlyExitException( 9, input );
					DebugRecognitionException(eee9);
					throw eee9;
				}
				cnt9++;
			}
			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_member_declarations", 11);
			LeaveRule("namespace_member_declarations", 11);
			LeaveRule_namespace_member_declarations();
	        if (state.backtracking > 0) { Memoize(input, 11, namespace_member_declarations_StartIndex); }

	    }
	 	DebugLocation(56, 31);
		} finally { DebugExitRule(GrammarFileName, "namespace_member_declarations"); }
		return retval;

	}
	// $ANTLR end "namespace_member_declarations"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_namespace_member_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_namespace_member_declaration() {}

	// $ANTLR start "namespace_member_declaration"
	// .\\cs.g:57:1: namespace_member_declaration : ( namespace_declaration | ( attributes )? ( modifiers )? type_declaration );
	[GrammarRule("namespace_member_declaration")]
	private AstParserRuleReturnScope<object, IToken> namespace_member_declaration()
	{
		EnterRule_namespace_member_declaration();
		EnterRule("namespace_member_declaration", 12);
		TraceIn("namespace_member_declaration", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int namespace_member_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> namespace_declaration30 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> attributes31 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> modifiers32 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_declaration33 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "namespace_member_declaration");
		DebugLocation(57, 47);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// .\\cs.g:57:29: ( namespace_declaration | ( attributes )? ( modifiers )? type_declaration )
			int alt12=2;
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_0 = input.LA(1);

			if ((LA12_0==149))
			{
				alt12 = 1;
			}
			else if ((LA12_0==ENUM||LA12_0==91||LA12_0==96||LA12_0==111||LA12_0==116||LA12_0==125||(LA12_0>=139 && LA12_0<=140)||LA12_0==150||LA12_0==156||LA12_0==159||LA12_0==161||(LA12_0>=163 && LA12_0<=165)||LA12_0==170||LA12_0==176||LA12_0==178||LA12_0==188||LA12_0==191||LA12_0==193))
			{
				alt12 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:58:2: namespace_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(58, 2);
				PushFollow(Follow._namespace_declaration_in_namespace_member_declaration245);
				namespace_declaration30=namespace_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_declaration30.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:59:4: ( attributes )? ( modifiers )? type_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(59, 4);
				// .\\cs.g:59:4: ( attributes )?
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, decisionCanBacktrack[10]);
				int LA10_0 = input.LA(1);

				if ((LA10_0==91))
				{
					alt10 = 1;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:59:4: attributes
					{
					DebugLocation(59, 4);
					PushFollow(Follow._attributes_in_namespace_member_declaration250);
					attributes31=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes31.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(10); }

				DebugLocation(59, 18);
				// .\\cs.g:59:18: ( modifiers )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, decisionCanBacktrack[11]);
				int LA11_0 = input.LA(1);

				if ((LA11_0==96||LA11_0==125||LA11_0==140||LA11_0==150||LA11_0==156||LA11_0==161||(LA11_0>=163 && LA11_0<=165)||LA11_0==170||LA11_0==176||LA11_0==188||LA11_0==191||LA11_0==193))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:59:18: modifiers
					{
					DebugLocation(59, 18);
					PushFollow(Follow._modifiers_in_namespace_member_declaration255);
					modifiers32=modifiers();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers32.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(59, 31);
				PushFollow(Follow._type_declaration_in_namespace_member_declaration260);
				type_declaration33=type_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_declaration33.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_member_declaration", 12);
			LeaveRule("namespace_member_declaration", 12);
			LeaveRule_namespace_member_declaration();
	        if (state.backtracking > 0) { Memoize(input, 12, namespace_member_declaration_StartIndex); }

	    }
	 	DebugLocation(59, 47);
		} finally { DebugExitRule(GrammarFileName, "namespace_member_declaration"); }
		return retval;

	}
	// $ANTLR end "namespace_member_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_type_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_type_declaration() {}

	// $ANTLR start "type_declaration"
	// .\\cs.g:60:1: type_declaration : ( ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration ) | class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration );
	[GrammarRule("type_declaration")]
	private AstParserRuleReturnScope<object, IToken> type_declaration()
	{
		EnterRule_type_declaration();
		EnterRule("type_declaration", 13);
		TraceIn("type_declaration", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int type_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal34 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> class_declaration35 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> struct_declaration36 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> interface_declaration37 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> class_declaration38 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> struct_declaration39 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> interface_declaration40 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> enum_declaration41 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> delegate_declaration42 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal34_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "type_declaration");
		DebugLocation(60, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// .\\cs.g:60:17: ( ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration ) | class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration )
			int alt14=6;
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			int LA14_0 = input.LA(1);

			if ((LA14_0==159) && (EvaluatePredicate(synpred1_cs_fragment)))
			{
				alt14 = 1;
			}
			else if ((LA14_0==111))
			{
				alt14 = 2;
			}
			else if ((LA14_0==178))
			{
				alt14 = 3;
			}
			else if ((LA14_0==139))
			{
				alt14 = 4;
			}
			else if ((LA14_0==ENUM))
			{
				alt14 = 5;
			}
			else if ((LA14_0==116))
			{
				alt14 = 6;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:61:2: ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(61, 17);
				string_literal34=(IToken)Match(input,159,Follow._159_in_type_declaration274); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal34_tree = (object)adaptor.Create(string_literal34);
				adaptor.AddChild(root_0, string_literal34_tree);
				}
				DebugLocation(61, 29);
				// .\\cs.g:61:29: ( class_declaration | struct_declaration | interface_declaration )
				int alt13=3;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, decisionCanBacktrack[13]);
				switch (input.LA(1))
				{
				case 111:
					{
					alt13 = 1;
					}
					break;
				case 178:
					{
					alt13 = 2;
					}
					break;
				case 139:
					{
					alt13 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:61:30: class_declaration
					{
					DebugLocation(61, 30);
					PushFollow(Follow._class_declaration_in_type_declaration279);
					class_declaration35=class_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, class_declaration35.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:62:11: struct_declaration
					{
					DebugLocation(62, 11);
					PushFollow(Follow._struct_declaration_in_type_declaration291);
					struct_declaration36=struct_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration36.Tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// .\\cs.g:63:11: interface_declaration
					{
					DebugLocation(63, 11);
					PushFollow(Follow._interface_declaration_in_type_declaration303);
					interface_declaration37=interface_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_declaration37.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(13); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:64:4: class_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(64, 4);
				PushFollow(Follow._class_declaration_in_type_declaration309);
				class_declaration38=class_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_declaration38.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:65:4: struct_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(65, 4);
				PushFollow(Follow._struct_declaration_in_type_declaration314);
				struct_declaration39=struct_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration39.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// .\\cs.g:66:4: interface_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(66, 4);
				PushFollow(Follow._interface_declaration_in_type_declaration319);
				interface_declaration40=interface_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_declaration40.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// .\\cs.g:67:4: enum_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(67, 4);
				PushFollow(Follow._enum_declaration_in_type_declaration324);
				enum_declaration41=enum_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_declaration41.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// .\\cs.g:68:4: delegate_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(68, 4);
				PushFollow(Follow._delegate_declaration_in_type_declaration329);
				delegate_declaration42=delegate_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, delegate_declaration42.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_declaration", 13);
			LeaveRule("type_declaration", 13);
			LeaveRule_type_declaration();
	        if (state.backtracking > 0) { Memoize(input, 13, type_declaration_StartIndex); }

	    }
	 	DebugLocation(68, 24);
		} finally { DebugExitRule(GrammarFileName, "type_declaration"); }
		return retval;

	}
	// $ANTLR end "type_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_qualified_identifier() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_qualified_identifier() {}

	// $ANTLR start "qualified_identifier"
	// .\\cs.g:70:1: qualified_identifier : identifier ( '.' identifier )* ;
	[GrammarRule("qualified_identifier")]
	private AstParserRuleReturnScope<object, IToken> qualified_identifier()
	{
		EnterRule_qualified_identifier();
		EnterRule("qualified_identifier", 14);
		TraceIn("qualified_identifier", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int qualified_identifier_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal44 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier43 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier45 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal44_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "qualified_identifier");
		DebugLocation(70, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// .\\cs.g:70:21: ( identifier ( '.' identifier )* )
			DebugEnterAlt(1);
			// .\\cs.g:71:2: identifier ( '.' identifier )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(71, 2);
			PushFollow(Follow._identifier_in_qualified_identifier338);
			identifier43=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier43.Tree);
			DebugLocation(71, 13);
			// .\\cs.g:71:13: ( '.' identifier )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, decisionCanBacktrack[15]);
				int LA15_0 = input.LA(1);

				if ((LA15_0==DOT))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:71:14: '.' identifier
					{
					DebugLocation(71, 14);
					char_literal44=(IToken)Match(input,DOT,Follow._DOT_in_qualified_identifier341); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal44_tree = (object)adaptor.Create(char_literal44);
					adaptor.AddChild(root_0, char_literal44_tree);
					}
					DebugLocation(71, 18);
					PushFollow(Follow._identifier_in_qualified_identifier343);
					identifier45=identifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, identifier45.Tree);

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualified_identifier", 14);
			LeaveRule("qualified_identifier", 14);
			LeaveRule_qualified_identifier();
	        if (state.backtracking > 0) { Memoize(input, 14, qualified_identifier_StartIndex); }

	    }
	 	DebugLocation(71, 30);
		} finally { DebugExitRule(GrammarFileName, "qualified_identifier"); }
		return retval;

	}
	// $ANTLR end "qualified_identifier"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_namespace_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_namespace_name() {}

	// $ANTLR start "namespace_name"
	// .\\cs.g:72:1: namespace_name : namespace_or_type_name ;
	[GrammarRule("namespace_name")]
	private AstParserRuleReturnScope<object, IToken> namespace_name()
	{
		EnterRule_namespace_name();
		EnterRule("namespace_name", 15);
		TraceIn("namespace_name", 15);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int namespace_name_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> namespace_or_type_name46 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "namespace_name");
		DebugLocation(72, 26);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// .\\cs.g:73:2: ( namespace_or_type_name )
			DebugEnterAlt(1);
			// .\\cs.g:73:4: namespace_or_type_name
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(73, 4);
			PushFollow(Follow._namespace_or_type_name_in_namespace_name354);
			namespace_or_type_name46=namespace_or_type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_or_type_name46.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_name", 15);
			LeaveRule("namespace_name", 15);
			LeaveRule_namespace_name();
	        if (state.backtracking > 0) { Memoize(input, 15, namespace_name_StartIndex); }

	    }
	 	DebugLocation(73, 26);
		} finally { DebugExitRule(GrammarFileName, "namespace_name"); }
		return retval;

	}
	// $ANTLR end "namespace_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_modifiers() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_modifiers() {}

	// $ANTLR start "modifiers"
	// .\\cs.g:75:1: modifiers : ( modifier )+ ;
	[GrammarRule("modifiers")]
	private AstParserRuleReturnScope<object, IToken> modifiers()
	{
		EnterRule_modifiers();
		EnterRule("modifiers", 16);
		TraceIn("modifiers", 16);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int modifiers_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> modifier47 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "modifiers");
		DebugLocation(75, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// .\\cs.g:75:10: ( ( modifier )+ )
			DebugEnterAlt(1);
			// .\\cs.g:76:2: ( modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(76, 2);
			// .\\cs.g:76:2: ( modifier )+
			int cnt16=0;
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, decisionCanBacktrack[16]);
				int LA16_0 = input.LA(1);

				if ((LA16_0==96||LA16_0==125||LA16_0==140||LA16_0==150||LA16_0==156||LA16_0==161||(LA16_0>=163 && LA16_0<=165)||LA16_0==170||LA16_0==176||LA16_0==188||LA16_0==191||LA16_0==193))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:76:2: modifier
					{
					DebugLocation(76, 2);
					PushFollow(Follow._modifier_in_modifiers363);
					modifier47=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifier47.Tree);

					}
					break;

				default:
					if (cnt16 >= 1)
						goto loop16;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee16 = new EarlyExitException( 16, input );
					DebugRecognitionException(eee16);
					throw eee16;
				}
				cnt16++;
			}
			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modifiers", 16);
			LeaveRule("modifiers", 16);
			LeaveRule_modifiers();
	        if (state.backtracking > 0) { Memoize(input, 16, modifiers_StartIndex); }

	    }
	 	DebugLocation(76, 11);
		} finally { DebugExitRule(GrammarFileName, "modifiers"); }
		return retval;

	}
	// $ANTLR end "modifiers"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_modifier() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_modifier() {}

	// $ANTLR start "modifier"
	// .\\cs.g:77:1: modifier : ( 'new' | 'public' | 'protected' | 'private' | 'internal' | 'unsafe' | 'abstract' | 'sealed' | 'static' | 'readonly' | 'volatile' | 'extern' | 'virtual' | 'override' );
	[GrammarRule("modifier")]
	private AstParserRuleReturnScope<object, IToken> modifier()
	{
		EnterRule_modifier();
		EnterRule("modifier", 17);
		TraceIn("modifier", 17);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int modifier_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set48 = default(IToken);

	    object set48_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "modifier");
		DebugLocation(77, 62);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// .\\cs.g:77:9: ( 'new' | 'public' | 'protected' | 'private' | 'internal' | 'unsafe' | 'abstract' | 'sealed' | 'static' | 'readonly' | 'volatile' | 'extern' | 'virtual' | 'override' )
			DebugEnterAlt(1);
			// .\\cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(77, 9);

			set48=(IToken)input.LT(1);
			if (input.LA(1)==96||input.LA(1)==125||input.LA(1)==140||input.LA(1)==150||input.LA(1)==156||input.LA(1)==161||(input.LA(1)>=163 && input.LA(1)<=165)||input.LA(1)==170||input.LA(1)==176||input.LA(1)==188||input.LA(1)==191||input.LA(1)==193)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set48));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modifier", 17);
			LeaveRule("modifier", 17);
			LeaveRule_modifier();
	        if (state.backtracking > 0) { Memoize(input, 17, modifier_StartIndex); }

	    }
	 	DebugLocation(79, 62);
		} finally { DebugExitRule(GrammarFileName, "modifier"); }
		return retval;

	}
	// $ANTLR end "modifier"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_class_member_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_class_member_declaration() {}

	// $ANTLR start "class_member_declaration"
	// .\\cs.g:81:1: class_member_declaration : ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration ) ;
	[GrammarRule("class_member_declaration")]
	private AstParserRuleReturnScope<object, IToken> class_member_declaration()
	{
		EnterRule_class_member_declaration();
		EnterRule("class_member_declaration", 18);
		TraceIn("class_member_declaration", 18);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int class_member_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal50 = default(IToken);
	    IToken char_literal53 = default(IToken);
	    IToken string_literal55 = default(IToken);
	    IToken string_literal61 = default(IToken);
	    IToken char_literal67 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> m = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> attributes49 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type51 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> constant_declarators52 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> event_declaration54 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> method_declaration56 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> interface_declaration57 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> class_declaration58 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> struct_declaration59 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> interface_declaration60 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> method_declaration62 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type63 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> method_declaration64 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> property_declaration65 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_name66 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> indexer_declaration68 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> indexer_declaration69 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> field_declaration70 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> operator_declaration71 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> class_declaration72 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> struct_declaration73 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> enum_declaration74 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> delegate_declaration75 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> conversion_operator_declaration76 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> constructor_declaration77 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> destructor_declaration78 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal50_tree = default(object);
	    object char_literal53_tree = default(object);
	    object string_literal55_tree = default(object);
	    object string_literal61_tree = default(object);
	    object char_literal67_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "class_member_declaration");
		DebugLocation(81, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// .\\cs.g:81:25: ( ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration ) )
			DebugEnterAlt(1);
			// .\\cs.g:82:2: ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(82, 2);
			// .\\cs.g:82:2: ( attributes )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, decisionCanBacktrack[17]);
			int LA17_0 = input.LA(1);

			if ((LA17_0==91))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:82:2: attributes
				{
				DebugLocation(82, 2);
				PushFollow(Follow._attributes_in_class_member_declaration435);
				attributes49=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(83, 3);
			// .\\cs.g:83:3: (m= modifiers )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, decisionCanBacktrack[18]);
			int LA18_0 = input.LA(1);

			if ((LA18_0==96||LA18_0==125||LA18_0==140||LA18_0==150||LA18_0==156||LA18_0==161||(LA18_0>=163 && LA18_0<=165)||LA18_0==170||LA18_0==176||LA18_0==188||LA18_0==191||LA18_0==193))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:83:3: m= modifiers
				{
				DebugLocation(83, 3);
				PushFollow(Follow._modifiers_in_class_member_declaration441);
				m=modifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, m.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(84, 2);
			// .\\cs.g:84:2: ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration )
			int alt21=13;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, decisionCanBacktrack[21]);
			switch (input.LA(1))
			{
			case 112:
				{
				alt21 = 1;
				}
				break;
			case 123:
				{
				alt21 = 2;
				}
				break;
			case 159:
				{
				alt21 = 3;
				}
				break;
			case 139:
				{
				alt21 = 4;
				}
				break;
			case 192:
				{
				int LA21_5 = input.LA(2);

				if ((LA21_5==Character_literal||LA21_5==FALSE||(LA21_5>=Hex_number && LA21_5<=IDENTIFIER)||(LA21_5>=NULL && LA21_5<=NUMBER)||LA21_5==Real_literal||LA21_5==STRINGLITERAL||LA21_5==TRUE||LA21_5==Verbatim_string_literal||LA21_5==95||(LA21_5>=97 && LA21_5<=98)||(LA21_5>=100 && LA21_5<=101)||LA21_5==103||(LA21_5>=105 && LA21_5<=106)||LA21_5==109||LA21_5==114||LA21_5==117||(LA21_5>=119 && LA21_5<=120)||LA21_5==122||LA21_5==126||LA21_5==129||LA21_5==132||LA21_5==135||LA21_5==138||LA21_5==141||(LA21_5>=143 && LA21_5<=144)||(LA21_5>=146 && LA21_5<=148)||(LA21_5>=151 && LA21_5<=152)||LA21_5==154||LA21_5==157||LA21_5==160||LA21_5==162||LA21_5==167||LA21_5==169||(LA21_5>=171 && LA21_5<=173)||LA21_5==177||LA21_5==183||(LA21_5>=185 && LA21_5<=186)||(LA21_5>=189 && LA21_5<=190)||LA21_5==194||LA21_5==196))
				{
					alt21 = 5;
				}
				else if ((LA21_5==69))
				{
					alt21 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				alt21 = 6;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA21_7 = input.LA(2);

				if ((LA21_7==Character_literal||LA21_7==DOT||LA21_7==FALSE||(LA21_7>=Hex_number && LA21_7<=IDENTIFIER)||(LA21_7>=NULL && LA21_7<=NUMBER)||LA21_7==Real_literal||LA21_7==STRINGLITERAL||LA21_7==TRUE||LA21_7==Verbatim_string_literal||LA21_7==69||(LA21_7>=80 && LA21_7<=81)||LA21_7==89||LA21_7==91||LA21_7==95||(LA21_7>=97 && LA21_7<=98)||(LA21_7>=100 && LA21_7<=101)||LA21_7==103||(LA21_7>=105 && LA21_7<=106)||LA21_7==109||LA21_7==114||LA21_7==117||(LA21_7>=119 && LA21_7<=120)||LA21_7==122||LA21_7==126||LA21_7==129||LA21_7==132||LA21_7==135||LA21_7==138||LA21_7==141||(LA21_7>=143 && LA21_7<=144)||(LA21_7>=146 && LA21_7<=148)||(LA21_7>=151 && LA21_7<=154)||LA21_7==157||LA21_7==160||LA21_7==162||LA21_7==167||LA21_7==169||(LA21_7>=171 && LA21_7<=173)||LA21_7==177||LA21_7==180||LA21_7==183||(LA21_7>=185 && LA21_7<=186)||(LA21_7>=189 && LA21_7<=190)||LA21_7==194||LA21_7==196))
				{
					alt21 = 6;
				}
				else if ((LA21_7==68))
				{
					alt21 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 111:
				{
				alt21 = 7;
				}
				break;
			case 178:
				{
				alt21 = 8;
				}
				break;
			case ENUM:
				{
				alt21 = 9;
				}
				break;
			case 116:
				{
				alt21 = 10;
				}
				break;
			case 124:
			case 136:
				{
				alt21 = 11;
				}
				break;
			case 202:
				{
				alt21 = 13;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:84:4: 'const' type constant_declarators ';'
				{
				DebugLocation(84, 4);
				string_literal50=(IToken)Match(input,112,Follow._112_in_class_member_declaration447); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal50_tree = (object)adaptor.Create(string_literal50);
				adaptor.AddChild(root_0, string_literal50_tree);
				}
				DebugLocation(84, 14);
				PushFollow(Follow._type_in_class_member_declaration451);
				type51=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type51.Tree);
				DebugLocation(84, 21);
				PushFollow(Follow._constant_declarators_in_class_member_declaration455);
				constant_declarators52=constant_declarators();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declarators52.Tree);
				DebugLocation(84, 44);
				char_literal53=(IToken)Match(input,SEMI,Follow._SEMI_in_class_member_declaration459); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal53_tree = (object)adaptor.Create(char_literal53);
				adaptor.AddChild(root_0, char_literal53_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:85:4: event_declaration
				{
				DebugLocation(85, 4);
				PushFollow(Follow._event_declaration_in_class_member_declaration464);
				event_declaration54=event_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, event_declaration54.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:86:4: 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration )
				{
				DebugLocation(86, 4);
				string_literal55=(IToken)Match(input,159,Follow._159_in_class_member_declaration471); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal55_tree = (object)adaptor.Create(string_literal55);
				adaptor.AddChild(root_0, string_literal55_tree);
				}
				DebugLocation(86, 14);
				// .\\cs.g:86:14: ( method_declaration | interface_declaration | class_declaration | struct_declaration )
				int alt19=4;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, decisionCanBacktrack[19]);
				switch (input.LA(1))
				{
				case Character_literal:
				case FALSE:
				case Hex_number:
				case IDENTIFIER:
				case NULL:
				case NUMBER:
				case Real_literal:
				case STRINGLITERAL:
				case TRUE:
				case Verbatim_string_literal:
				case 95:
				case 97:
				case 98:
				case 100:
				case 101:
				case 103:
				case 105:
				case 106:
				case 109:
				case 114:
				case 117:
				case 119:
				case 120:
				case 122:
				case 126:
				case 129:
				case 132:
				case 135:
				case 138:
				case 141:
				case 143:
				case 144:
				case 146:
				case 147:
				case 148:
				case 151:
				case 152:
				case 154:
				case 157:
				case 160:
				case 162:
				case 167:
				case 169:
				case 171:
				case 172:
				case 173:
				case 177:
				case 183:
				case 185:
				case 186:
				case 189:
				case 190:
				case 194:
				case 196:
					{
					alt19 = 1;
					}
					break;
				case 139:
					{
					alt19 = 2;
					}
					break;
				case 111:
					{
					alt19 = 3;
					}
					break;
				case 178:
					{
					alt19 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:86:15: method_declaration
					{
					DebugLocation(86, 15);
					PushFollow(Follow._method_declaration_in_class_member_declaration474);
					method_declaration56=method_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration56.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:87:9: interface_declaration
					{
					DebugLocation(87, 9);
					PushFollow(Follow._interface_declaration_in_class_member_declaration485);
					interface_declaration57=interface_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_declaration57.Tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// .\\cs.g:88:9: class_declaration
					{
					DebugLocation(88, 9);
					PushFollow(Follow._class_declaration_in_class_member_declaration496);
					class_declaration58=class_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, class_declaration58.Tree);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// .\\cs.g:89:9: struct_declaration
					{
					DebugLocation(89, 9);
					PushFollow(Follow._struct_declaration_in_class_member_declaration507);
					struct_declaration59=struct_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration59.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(19); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// .\\cs.g:90:4: interface_declaration
				{
				DebugLocation(90, 4);
				PushFollow(Follow._interface_declaration_in_class_member_declaration513);
				interface_declaration60=interface_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_declaration60.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// .\\cs.g:91:4: 'void' method_declaration
				{
				DebugLocation(91, 4);
				string_literal61=(IToken)Match(input,192,Follow._192_in_class_member_declaration519); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal61_tree = (object)adaptor.Create(string_literal61);
				adaptor.AddChild(root_0, string_literal61_tree);
				}
				DebugLocation(91, 13);
				PushFollow(Follow._method_declaration_in_class_member_declaration523);
				method_declaration62=method_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration62.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// .\\cs.g:92:4: type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
				{
				DebugLocation(92, 4);
				PushFollow(Follow._type_in_class_member_declaration528);
				type63=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type63.Tree);
				DebugLocation(92, 9);
				// .\\cs.g:92:9: ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
				int alt20=6;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, decisionCanBacktrack[20]);
				switch (input.LA(1))
				{
				case 103:
				case 106:
				case 109:
				case 114:
				case 119:
				case 129:
				case 138:
				case 146:
				case 151:
				case 169:
				case 173:
				case 177:
				case 185:
				case 186:
				case 189:
					{
					int LA20_1 = input.LA(2);

					if ((EvaluatePredicate(synpred2_cs_fragment)))
					{
						alt20 = 1;
					}
					else if ((EvaluatePredicate(synpred3_cs_fragment)))
					{
						alt20 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 20, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
				case 95:
				case 97:
				case 98:
				case 100:
				case 101:
				case 105:
				case 117:
				case 120:
				case 122:
				case 126:
				case 132:
				case 135:
				case 141:
				case 143:
				case 144:
				case 147:
				case 148:
				case 152:
				case 154:
				case 157:
				case 160:
				case 162:
				case 167:
				case 171:
				case 172:
				case 183:
				case 190:
				case 194:
				case 196:
					{
					int LA20_2 = input.LA(2);

					if ((EvaluatePredicate(synpred2_cs_fragment)))
					{
						alt20 = 1;
					}
					else if ((EvaluatePredicate(synpred3_cs_fragment)))
					{
						alt20 = 2;
					}
					else if ((EvaluatePredicate(synpred4_cs_fragment)))
					{
						alt20 = 3;
					}
					else if ((true))
					{
						alt20 = 5;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 20, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Character_literal:
				case FALSE:
				case Hex_number:
				case NULL:
				case NUMBER:
				case Real_literal:
				case STRINGLITERAL:
				case TRUE:
				case Verbatim_string_literal:
					{
					int LA20_3 = input.LA(2);

					if ((EvaluatePredicate(synpred2_cs_fragment)))
					{
						alt20 = 1;
					}
					else if ((EvaluatePredicate(synpred3_cs_fragment)))
					{
						alt20 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 20, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 180:
					{
					alt20 = 4;
					}
					break;
				case 153:
					{
					alt20 = 6;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:92:11: ( member_name '(' )=> method_declaration
					{
					DebugLocation(92, 34);
					PushFollow(Follow._method_declaration_in_class_member_declaration542);
					method_declaration64=method_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration64.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:93:8: ( member_name '{' )=> property_declaration
					{
					DebugLocation(93, 31);
					PushFollow(Follow._property_declaration_in_class_member_declaration561);
					property_declaration65=property_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, property_declaration65.Tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// .\\cs.g:94:8: ( member_name '.' 'this' )=> type_name '.' indexer_declaration
					{
					DebugLocation(94, 40);
					PushFollow(Follow._type_name_in_class_member_declaration584);
					type_name66=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_name66.Tree);
					DebugLocation(94, 50);
					char_literal67=(IToken)Match(input,DOT,Follow._DOT_in_class_member_declaration586); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal67_tree = (object)adaptor.Create(char_literal67);
					adaptor.AddChild(root_0, char_literal67_tree);
					}
					DebugLocation(94, 54);
					PushFollow(Follow._indexer_declaration_in_class_member_declaration588);
					indexer_declaration68=indexer_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, indexer_declaration68.Tree);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// .\\cs.g:95:8: indexer_declaration
					{
					DebugLocation(95, 8);
					PushFollow(Follow._indexer_declaration_in_class_member_declaration597);
					indexer_declaration69=indexer_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, indexer_declaration69.Tree);

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// .\\cs.g:96:11: field_declaration
					{
					DebugLocation(96, 11);
					PushFollow(Follow._field_declaration_in_class_member_declaration610);
					field_declaration70=field_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, field_declaration70.Tree);

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// .\\cs.g:97:11: operator_declaration
					{
					DebugLocation(97, 11);
					PushFollow(Follow._operator_declaration_in_class_member_declaration628);
					operator_declaration71=operator_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, operator_declaration71.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(20); }


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// .\\cs.g:101:4: class_declaration
				{
				DebugLocation(101, 4);
				PushFollow(Follow._class_declaration_in_class_member_declaration646);
				class_declaration72=class_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_declaration72.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// .\\cs.g:102:4: struct_declaration
				{
				DebugLocation(102, 4);
				PushFollow(Follow._struct_declaration_in_class_member_declaration653);
				struct_declaration73=struct_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration73.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// .\\cs.g:103:4: enum_declaration
				{
				DebugLocation(103, 4);
				PushFollow(Follow._enum_declaration_in_class_member_declaration659);
				enum_declaration74=enum_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_declaration74.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// .\\cs.g:104:4: delegate_declaration
				{
				DebugLocation(104, 4);
				PushFollow(Follow._delegate_declaration_in_class_member_declaration666);
				delegate_declaration75=delegate_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, delegate_declaration75.Tree);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// .\\cs.g:105:4: conversion_operator_declaration
				{
				DebugLocation(105, 4);
				PushFollow(Follow._conversion_operator_declaration_in_class_member_declaration672);
				conversion_operator_declaration76=conversion_operator_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conversion_operator_declaration76.Tree);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// .\\cs.g:106:4: constructor_declaration
				{
				DebugLocation(106, 4);
				PushFollow(Follow._constructor_declaration_in_class_member_declaration677);
				constructor_declaration77=constructor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_declaration77.Tree);

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// .\\cs.g:107:4: destructor_declaration
				{
				DebugLocation(107, 4);
				PushFollow(Follow._destructor_declaration_in_class_member_declaration683);
				destructor_declaration78=destructor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, destructor_declaration78.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_member_declaration", 18);
			LeaveRule("class_member_declaration", 18);
			LeaveRule_class_member_declaration();
	        if (state.backtracking > 0) { Memoize(input, 18, class_member_declaration_StartIndex); }

	    }
	 	DebugLocation(109, 1);
		} finally { DebugExitRule(GrammarFileName, "class_member_declaration"); }
		return retval;

	}
	// $ANTLR end "class_member_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_primary_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_primary_expression() {}

	// $ANTLR start "primary_expression"
	// .\\cs.g:111:1: primary_expression : ( ( 'this' brackets )=> 'this' brackets ( primary_expression_part )* | ( 'base' brackets )=> 'this' brackets ( primary_expression_part )* | primary_expression_start ( primary_expression_part )* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression );
	[GrammarRule("primary_expression")]
	private AstParserRuleReturnScope<object, IToken> primary_expression()
	{
		EnterRule_primary_expression();
		EnterRule("primary_expression", 19);
		TraceIn("primary_expression", 19);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int primary_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal79 = default(IToken);
	    IToken string_literal82 = default(IToken);
	    IToken string_literal87 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> brackets80 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> primary_expression_part81 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> brackets83 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> primary_expression_part84 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> primary_expression_start85 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> primary_expression_part86 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> object_creation_expression88 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> primary_expression_part89 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> delegate_creation_expression90 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> object_creation_expression91 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> anonymous_object_creation_expression92 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> sizeof_expression93 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> checked_expression94 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> unchecked_expression95 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> default_value_expression96 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> anonymous_method_expression97 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal79_tree = default(object);
	    object string_literal82_tree = default(object);
	    object string_literal87_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "primary_expression");
		DebugLocation(111, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// .\\cs.g:111:19: ( ( 'this' brackets )=> 'this' brackets ( primary_expression_part )* | ( 'base' brackets )=> 'this' brackets ( primary_expression_part )* | primary_expression_start ( primary_expression_part )* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression )
			int alt27=9;
			try { DebugEnterDecision(27, decisionCanBacktrack[27]);
			switch (input.LA(1))
			{
			case 180:
				{
				int LA27_1 = input.LA(2);

				if ((EvaluatePredicate(synpred5_cs_fragment)))
				{
					alt27 = 1;
				}
				else if ((EvaluatePredicate(synpred6_cs_fragment)))
				{
					alt27 = 2;
				}
				else if ((true))
				{
					alt27 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 27, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case IDENTIFIER:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 68:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 102:
			case 103:
			case 105:
			case 106:
			case 109:
			case 114:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 177:
			case 183:
			case 184:
			case 185:
			case 186:
			case 189:
			case 190:
			case 194:
			case 196:
				{
				alt27 = 3;
				}
				break;
			case 150:
				{
				alt27 = 4;
				}
				break;
			case 174:
				{
				alt27 = 5;
				}
				break;
			case 110:
				{
				alt27 = 6;
				}
				break;
			case 187:
				{
				alt27 = 7;
				}
				break;
			case 115:
				{
				alt27 = 8;
				}
				break;
			case 116:
				{
				alt27 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:112:2: ( 'this' brackets )=> 'this' brackets ( primary_expression_part )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(112, 26);
				string_literal79=(IToken)Match(input,180,Follow._180_in_primary_expression709); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal79_tree = (object)adaptor.Create(string_literal79);
				adaptor.AddChild(root_0, string_literal79_tree);
				}
				DebugLocation(112, 35);
				PushFollow(Follow._brackets_in_primary_expression713);
				brackets80=brackets();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, brackets80.Tree);
				DebugLocation(112, 46);
				// .\\cs.g:112:46: ( primary_expression_part )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, decisionCanBacktrack[22]);
					int LA22_0 = input.LA(1);

					if ((LA22_0==DOT||LA22_0==PTR||LA22_0==68||LA22_0==91))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// .\\cs.g:112:46: primary_expression_part
						{
						DebugLocation(112, 46);
						PushFollow(Follow._primary_expression_part_in_primary_expression717);
						primary_expression_part81=primary_expression_part();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression_part81.Tree);

						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:113:4: ( 'base' brackets )=> 'this' brackets ( primary_expression_part )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(113, 27);
				string_literal82=(IToken)Match(input,180,Follow._180_in_primary_expression733); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal82_tree = (object)adaptor.Create(string_literal82);
				adaptor.AddChild(root_0, string_literal82_tree);
				}
				DebugLocation(113, 36);
				PushFollow(Follow._brackets_in_primary_expression737);
				brackets83=brackets();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, brackets83.Tree);
				DebugLocation(113, 47);
				// .\\cs.g:113:47: ( primary_expression_part )*
				try { DebugEnterSubRule(23);
				while (true)
				{
					int alt23=2;
					try { DebugEnterDecision(23, decisionCanBacktrack[23]);
					int LA23_0 = input.LA(1);

					if ((LA23_0==DOT||LA23_0==PTR||LA23_0==68||LA23_0==91))
					{
						alt23 = 1;
					}


					} finally { DebugExitDecision(23); }
					switch ( alt23 )
					{
					case 1:
						DebugEnterAlt(1);
						// .\\cs.g:113:47: primary_expression_part
						{
						DebugLocation(113, 47);
						PushFollow(Follow._primary_expression_part_in_primary_expression741);
						primary_expression_part84=primary_expression_part();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression_part84.Tree);

						}
						break;

					default:
						goto loop23;
					}
				}

				loop23:
					;

				} finally { DebugExitSubRule(23); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:114:4: primary_expression_start ( primary_expression_part )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(114, 4);
				PushFollow(Follow._primary_expression_start_in_primary_expression747);
				primary_expression_start85=primary_expression_start();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression_start85.Tree);
				DebugLocation(114, 31);
				// .\\cs.g:114:31: ( primary_expression_part )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, decisionCanBacktrack[24]);
					int LA24_0 = input.LA(1);

					if ((LA24_0==DOT||LA24_0==PTR||LA24_0==68||LA24_0==91))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// .\\cs.g:114:31: primary_expression_part
						{
						DebugLocation(114, 31);
						PushFollow(Follow._primary_expression_part_in_primary_expression751);
						primary_expression_part86=primary_expression_part();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression_part86.Tree);

						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// .\\cs.g:115:4: 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(115, 4);
				string_literal87=(IToken)Match(input,150,Follow._150_in_primary_expression757); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal87_tree = (object)adaptor.Create(string_literal87);
				adaptor.AddChild(root_0, string_literal87_tree);
				}
				DebugLocation(115, 10);
				// .\\cs.g:115:10: ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression )
				int alt26=4;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, decisionCanBacktrack[26]);
				switch (input.LA(1))
				{
				case 103:
				case 106:
				case 109:
				case 114:
				case 119:
				case 129:
				case 138:
				case 146:
				case 151:
				case 169:
				case 173:
				case 177:
				case 185:
				case 186:
				case 189:
					{
					int LA26_1 = input.LA(2);

					if ((EvaluatePredicate(synpred7_cs_fragment)))
					{
						alt26 = 1;
					}
					else if ((true))
					{
						alt26 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
				case 95:
				case 97:
				case 98:
				case 100:
				case 101:
				case 105:
				case 117:
				case 120:
				case 122:
				case 126:
				case 132:
				case 135:
				case 141:
				case 143:
				case 144:
				case 147:
				case 148:
				case 152:
				case 154:
				case 157:
				case 160:
				case 162:
				case 167:
				case 171:
				case 172:
				case 183:
				case 190:
				case 194:
				case 196:
					{
					int LA26_2 = input.LA(2);

					if ((EvaluatePredicate(synpred7_cs_fragment)))
					{
						alt26 = 1;
					}
					else if ((EvaluatePredicate(synpred8_cs_fragment)))
					{
						alt26 = 2;
					}
					else if ((true))
					{
						alt26 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 192:
					{
					int LA26_3 = input.LA(2);

					if ((EvaluatePredicate(synpred7_cs_fragment)))
					{
						alt26 = 1;
					}
					else if ((true))
					{
						alt26 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 197:
					{
					alt26 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:115:14: ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+
					{
					DebugLocation(116, 6);
					PushFollow(Follow._object_creation_expression_in_primary_expression785);
					object_creation_expression88=object_creation_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, object_creation_expression88.Tree);
					DebugLocation(116, 35);
					// .\\cs.g:116:35: ( primary_expression_part )+
					int cnt25=0;
					try { DebugEnterSubRule(25);
					while (true)
					{
						int alt25=2;
						try { DebugEnterDecision(25, decisionCanBacktrack[25]);
						int LA25_0 = input.LA(1);

						if ((LA25_0==DOT||LA25_0==PTR||LA25_0==68||LA25_0==91))
						{
							alt25 = 1;
						}


						} finally { DebugExitDecision(25); }
						switch (alt25)
						{
						case 1:
							DebugEnterAlt(1);
							// .\\cs.g:116:35: primary_expression_part
							{
							DebugLocation(116, 35);
							PushFollow(Follow._primary_expression_part_in_primary_expression789);
							primary_expression_part89=primary_expression_part();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression_part89.Tree);

							}
							break;

						default:
							if (cnt25 >= 1)
								goto loop25;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee25 = new EarlyExitException( 25, input );
							DebugRecognitionException(eee25);
							throw eee25;
						}
						cnt25++;
					}
					loop25:
						;

					} finally { DebugExitSubRule(25); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:119:7: ( delegate_creation_expression )=> delegate_creation_expression
					{
					DebugLocation(119, 41);
					PushFollow(Follow._delegate_creation_expression_in_primary_expression817);
					delegate_creation_expression90=delegate_creation_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, delegate_creation_expression90.Tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// .\\cs.g:120:7: object_creation_expression
					{
					DebugLocation(120, 7);
					PushFollow(Follow._object_creation_expression_in_primary_expression825);
					object_creation_expression91=object_creation_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, object_creation_expression91.Tree);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// .\\cs.g:121:7: anonymous_object_creation_expression
					{
					DebugLocation(121, 7);
					PushFollow(Follow._anonymous_object_creation_expression_in_primary_expression833);
					anonymous_object_creation_expression92=anonymous_object_creation_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, anonymous_object_creation_expression92.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(26); }


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// .\\cs.g:122:4: sizeof_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(122, 4);
				PushFollow(Follow._sizeof_expression_in_primary_expression846);
				sizeof_expression93=sizeof_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sizeof_expression93.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// .\\cs.g:123:4: checked_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(123, 4);
				PushFollow(Follow._checked_expression_in_primary_expression857);
				checked_expression94=checked_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, checked_expression94.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// .\\cs.g:124:4: unchecked_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(124, 4);
				PushFollow(Follow._unchecked_expression_in_primary_expression876);
				unchecked_expression95=unchecked_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unchecked_expression95.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// .\\cs.g:125:4: default_value_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(125, 4);
				PushFollow(Follow._default_value_expression_in_primary_expression893);
				default_value_expression96=default_value_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, default_value_expression96.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// .\\cs.g:126:4: anonymous_method_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(126, 4);
				PushFollow(Follow._anonymous_method_expression_in_primary_expression906);
				anonymous_method_expression97=anonymous_method_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, anonymous_method_expression97.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expression", 19);
			LeaveRule("primary_expression", 19);
			LeaveRule_primary_expression();
	        if (state.backtracking > 0) { Memoize(input, 19, primary_expression_StartIndex); }

	    }
	 	DebugLocation(127, 1);
		} finally { DebugExitRule(GrammarFileName, "primary_expression"); }
		return retval;

	}
	// $ANTLR end "primary_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_primary_expression_start() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_primary_expression_start() {}

	// $ANTLR start "primary_expression_start"
	// .\\cs.g:129:1: primary_expression_start : ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | 'this' | 'base' | paren_expression | typeof_expression | literal );
	[GrammarRule("primary_expression_start")]
	private AstParserRuleReturnScope<object, IToken> primary_expression_start()
	{
		EnterRule_primary_expression_start();
		EnterRule("primary_expression_start", 20);
		TraceIn("primary_expression_start", 20);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int primary_expression_start_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal102 = default(IToken);
	    IToken string_literal104 = default(IToken);
	    IToken string_literal105 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> predefined_type98 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier99 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> generic_argument_list100 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier101 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier103 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> paren_expression106 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> typeof_expression107 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> literal108 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal102_tree = default(object);
	    object string_literal104_tree = default(object);
	    object string_literal105_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "primary_expression_start");
		DebugLocation(129, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// .\\cs.g:129:25: ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | 'this' | 'base' | paren_expression | typeof_expression | literal )
			int alt29=8;
			try { DebugEnterDecision(29, decisionCanBacktrack[29]);
			switch (input.LA(1))
			{
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				alt29 = 1;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA29_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_cs_fragment)))
				{
					alt29 = 2;
				}
				else if ((true))
				{
					alt29 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 29, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 180:
				{
				alt29 = 4;
				}
				break;
			case 102:
				{
				alt29 = 5;
				}
				break;
			case 68:
				{
				alt29 = 6;
				}
				break;
			case 184:
				{
				alt29 = 7;
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
				{
				alt29 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:130:2: predefined_type
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(130, 2);
				PushFollow(Follow._predefined_type_in_primary_expression_start919);
				predefined_type98=predefined_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type98.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:131:4: ( identifier '<' )=> identifier generic_argument_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(131, 27);
				PushFollow(Follow._identifier_in_primary_expression_start947);
				identifier99=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier99.Tree);
				DebugLocation(131, 40);
				PushFollow(Follow._generic_argument_list_in_primary_expression_start951);
				generic_argument_list100=generic_argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_argument_list100.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:132:4: identifier ( '::' identifier )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(132, 4);
				PushFollow(Follow._identifier_in_primary_expression_start956);
				identifier101=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier101.Tree);
				DebugLocation(132, 15);
				// .\\cs.g:132:15: ( '::' identifier )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, decisionCanBacktrack[28]);
				int LA28_0 = input.LA(1);

				if ((LA28_0==80))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:132:16: '::' identifier
					{
					DebugLocation(132, 16);
					string_literal102=(IToken)Match(input,80,Follow._80_in_primary_expression_start959); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal102_tree = (object)adaptor.Create(string_literal102);
					adaptor.AddChild(root_0, string_literal102_tree);
					}
					DebugLocation(132, 23);
					PushFollow(Follow._identifier_in_primary_expression_start963);
					identifier103=identifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, identifier103.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(28); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// .\\cs.g:133:4: 'this'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(133, 4);
				string_literal104=(IToken)Match(input,180,Follow._180_in_primary_expression_start970); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal104_tree = (object)adaptor.Create(string_literal104);
				adaptor.AddChild(root_0, string_literal104_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// .\\cs.g:134:4: 'base'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(134, 4);
				string_literal105=(IToken)Match(input,102,Follow._102_in_primary_expression_start976); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal105_tree = (object)adaptor.Create(string_literal105);
				adaptor.AddChild(root_0, string_literal105_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// .\\cs.g:135:4: paren_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(135, 4);
				PushFollow(Follow._paren_expression_in_primary_expression_start981);
				paren_expression106=paren_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, paren_expression106.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// .\\cs.g:136:4: typeof_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(136, 4);
				PushFollow(Follow._typeof_expression_in_primary_expression_start986);
				typeof_expression107=typeof_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeof_expression107.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// .\\cs.g:137:4: literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(137, 4);
				PushFollow(Follow._literal_in_primary_expression_start1004);
				literal108=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal108.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expression_start", 20);
			LeaveRule("primary_expression_start", 20);
			LeaveRule_primary_expression_start();
	        if (state.backtracking > 0) { Memoize(input, 20, primary_expression_start_StartIndex); }

	    }
	 	DebugLocation(138, 1);
		} finally { DebugExitRule(GrammarFileName, "primary_expression_start"); }
		return retval;

	}
	// $ANTLR end "primary_expression_start"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_primary_expression_part() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_primary_expression_part() {}

	// $ANTLR start "primary_expression_part"
	// .\\cs.g:140:1: primary_expression_part : ( access_identifier | brackets_or_arguments );
	[GrammarRule("primary_expression_part")]
	private AstParserRuleReturnScope<object, IToken> primary_expression_part()
	{
		EnterRule_primary_expression_part();
		EnterRule("primary_expression_part", 21);
		TraceIn("primary_expression_part", 21);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int primary_expression_part_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> access_identifier109 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> brackets_or_arguments110 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "primary_expression_part");
		DebugLocation(140, 25);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// .\\cs.g:140:24: ( access_identifier | brackets_or_arguments )
			int alt30=2;
			try { DebugEnterDecision(30, decisionCanBacktrack[30]);
			int LA30_0 = input.LA(1);

			if ((LA30_0==DOT||LA30_0==PTR))
			{
				alt30 = 1;
			}
			else if ((LA30_0==68||LA30_0==91))
			{
				alt30 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:141:3: access_identifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(141, 3);
				PushFollow(Follow._access_identifier_in_primary_expression_part1015);
				access_identifier109=access_identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, access_identifier109.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:142:4: brackets_or_arguments
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(142, 4);
				PushFollow(Follow._brackets_or_arguments_in_primary_expression_part1020);
				brackets_or_arguments110=brackets_or_arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, brackets_or_arguments110.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expression_part", 21);
			LeaveRule("primary_expression_part", 21);
			LeaveRule_primary_expression_part();
	        if (state.backtracking > 0) { Memoize(input, 21, primary_expression_part_StartIndex); }

	    }
	 	DebugLocation(142, 25);
		} finally { DebugExitRule(GrammarFileName, "primary_expression_part"); }
		return retval;

	}
	// $ANTLR end "primary_expression_part"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_access_identifier() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_access_identifier() {}

	// $ANTLR start "access_identifier"
	// .\\cs.g:143:1: access_identifier : access_operator type_or_generic ;
	[GrammarRule("access_identifier")]
	private AstParserRuleReturnScope<object, IToken> access_identifier()
	{
		EnterRule_access_identifier();
		EnterRule("access_identifier", 22);
		TraceIn("access_identifier", 22);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int access_identifier_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> access_operator111 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_or_generic112 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "access_identifier");
		DebugLocation(143, 35);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// .\\cs.g:143:18: ( access_operator type_or_generic )
			DebugEnterAlt(1);
			// .\\cs.g:144:2: access_operator type_or_generic
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(144, 2);
			PushFollow(Follow._access_operator_in_access_identifier1028);
			access_operator111=access_operator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, access_operator111.Tree);
			DebugLocation(144, 20);
			PushFollow(Follow._type_or_generic_in_access_identifier1032);
			type_or_generic112=type_or_generic();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_or_generic112.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("access_identifier", 22);
			LeaveRule("access_identifier", 22);
			LeaveRule_access_identifier();
	        if (state.backtracking > 0) { Memoize(input, 22, access_identifier_StartIndex); }

	    }
	 	DebugLocation(144, 35);
		} finally { DebugExitRule(GrammarFileName, "access_identifier"); }
		return retval;

	}
	// $ANTLR end "access_identifier"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_access_operator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_access_operator() {}

	// $ANTLR start "access_operator"
	// .\\cs.g:145:1: access_operator : ( '.' | '->' );
	[GrammarRule("access_operator")]
	private AstParserRuleReturnScope<object, IToken> access_operator()
	{
		EnterRule_access_operator();
		EnterRule("access_operator", 23);
		TraceIn("access_operator", 23);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int access_operator_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set113 = default(IToken);

	    object set113_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "access_operator");
		DebugLocation(145, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// .\\cs.g:145:16: ( '.' | '->' )
			DebugEnterAlt(1);
			// .\\cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(145, 16);

			set113=(IToken)input.LT(1);
			if (input.LA(1)==DOT||input.LA(1)==PTR)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set113));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("access_operator", 23);
			LeaveRule("access_operator", 23);
			LeaveRule_access_operator();
	        if (state.backtracking > 0) { Memoize(input, 23, access_operator_StartIndex); }

	    }
	 	DebugLocation(146, 14);
		} finally { DebugExitRule(GrammarFileName, "access_operator"); }
		return retval;

	}
	// $ANTLR end "access_operator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_brackets_or_arguments() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_brackets_or_arguments() {}

	// $ANTLR start "brackets_or_arguments"
	// .\\cs.g:147:1: brackets_or_arguments : ( brackets | arguments );
	[GrammarRule("brackets_or_arguments")]
	private AstParserRuleReturnScope<object, IToken> brackets_or_arguments()
	{
		EnterRule_brackets_or_arguments();
		EnterRule("brackets_or_arguments", 24);
		TraceIn("brackets_or_arguments", 24);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int brackets_or_arguments_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> brackets114 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> arguments115 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "brackets_or_arguments");
		DebugLocation(147, 22);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// .\\cs.g:147:22: ( brackets | arguments )
			int alt31=2;
			try { DebugEnterDecision(31, decisionCanBacktrack[31]);
			int LA31_0 = input.LA(1);

			if ((LA31_0==91))
			{
				alt31 = 1;
			}
			else if ((LA31_0==68))
			{
				alt31 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 31, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:148:2: brackets
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(148, 2);
				PushFollow(Follow._brackets_in_brackets_or_arguments1054);
				brackets114=brackets();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, brackets114.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:148:13: arguments
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(148, 13);
				PushFollow(Follow._arguments_in_brackets_or_arguments1058);
				arguments115=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments115.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("brackets_or_arguments", 24);
			LeaveRule("brackets_or_arguments", 24);
			LeaveRule_brackets_or_arguments();
	        if (state.backtracking > 0) { Memoize(input, 24, brackets_or_arguments_StartIndex); }

	    }
	 	DebugLocation(148, 22);
		} finally { DebugExitRule(GrammarFileName, "brackets_or_arguments"); }
		return retval;

	}
	// $ANTLR end "brackets_or_arguments"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_brackets() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_brackets() {}

	// $ANTLR start "brackets"
	// .\\cs.g:149:1: brackets : '[' ( expression_list )? ']' ;
	[GrammarRule("brackets")]
	private AstParserRuleReturnScope<object, IToken> brackets()
	{
		EnterRule_brackets();
		EnterRule("brackets", 25);
		TraceIn("brackets", 25);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int brackets_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal116 = default(IToken);
	    IToken char_literal118 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression_list117 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal116_tree = default(object);
	    object char_literal118_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "brackets");
		DebugLocation(149, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// .\\cs.g:149:9: ( '[' ( expression_list )? ']' )
			DebugEnterAlt(1);
			// .\\cs.g:150:2: '[' ( expression_list )? ']'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(150, 2);
			char_literal116=(IToken)Match(input,91,Follow._91_in_brackets1066); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal116_tree = (object)adaptor.Create(char_literal116);
			adaptor.AddChild(root_0, char_literal116_tree);
			}
			DebugLocation(150, 8);
			// .\\cs.g:150:8: ( expression_list )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, decisionCanBacktrack[32]);
			int LA32_0 = input.LA(1);

			if ((LA32_0==Character_literal||LA32_0==FALSE||(LA32_0>=Hex_number && LA32_0<=IDENTIFIER)||(LA32_0>=MINUS && LA32_0<=NUMBER)||LA32_0==Real_literal||LA32_0==STRINGLITERAL||LA32_0==TRUE||LA32_0==Verbatim_string_literal||LA32_0==61||LA32_0==66||(LA32_0>=68 && LA32_0<=69)||(LA32_0>=71 && LA32_0<=72)||LA32_0==75||LA32_0==95||(LA32_0>=97 && LA32_0<=98)||(LA32_0>=100 && LA32_0<=103)||(LA32_0>=105 && LA32_0<=106)||(LA32_0>=109 && LA32_0<=110)||(LA32_0>=114 && LA32_0<=117)||(LA32_0>=119 && LA32_0<=120)||LA32_0==122||LA32_0==126||LA32_0==129||LA32_0==132||LA32_0==135||LA32_0==138||LA32_0==141||(LA32_0>=143 && LA32_0<=144)||(LA32_0>=146 && LA32_0<=148)||(LA32_0>=150 && LA32_0<=152)||LA32_0==154||LA32_0==157||LA32_0==160||LA32_0==162||LA32_0==167||LA32_0==169||(LA32_0>=171 && LA32_0<=174)||LA32_0==177||LA32_0==180||(LA32_0>=183 && LA32_0<=187)||(LA32_0>=189 && LA32_0<=190)||LA32_0==194||LA32_0==196||LA32_0==202))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:150:8: expression_list
				{
				DebugLocation(150, 8);
				PushFollow(Follow._expression_list_in_brackets1070);
				expression_list117=expression_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_list117.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(150, 27);
			char_literal118=(IToken)Match(input,92,Follow._92_in_brackets1075); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal118_tree = (object)adaptor.Create(char_literal118);
			adaptor.AddChild(root_0, char_literal118_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("brackets", 25);
			LeaveRule("brackets", 25);
			LeaveRule_brackets();
	        if (state.backtracking > 0) { Memoize(input, 25, brackets_StartIndex); }

	    }
	 	DebugLocation(150, 30);
		} finally { DebugExitRule(GrammarFileName, "brackets"); }
		return retval;

	}
	// $ANTLR end "brackets"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_paren_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_paren_expression() {}

	// $ANTLR start "paren_expression"
	// .\\cs.g:151:1: paren_expression : '(' expression ')' ;
	[GrammarRule("paren_expression")]
	private AstParserRuleReturnScope<object, IToken> paren_expression()
	{
		EnterRule_paren_expression();
		EnterRule("paren_expression", 26);
		TraceIn("paren_expression", 26);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int paren_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal119 = default(IToken);
	    IToken char_literal121 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression120 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal119_tree = default(object);
	    object char_literal121_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "paren_expression");
		DebugLocation(151, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// .\\cs.g:151:17: ( '(' expression ')' )
			DebugEnterAlt(1);
			// .\\cs.g:152:2: '(' expression ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(152, 2);
			char_literal119=(IToken)Match(input,68,Follow._68_in_paren_expression1085); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal119_tree = (object)adaptor.Create(char_literal119);
			adaptor.AddChild(root_0, char_literal119_tree);
			}
			DebugLocation(152, 8);
			PushFollow(Follow._expression_in_paren_expression1089);
			expression120=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression120.Tree);
			DebugLocation(152, 21);
			char_literal121=(IToken)Match(input,RPAREN,Follow._RPAREN_in_paren_expression1093); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal121_tree = (object)adaptor.Create(char_literal121);
			adaptor.AddChild(root_0, char_literal121_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("paren_expression", 26);
			LeaveRule("paren_expression", 26);
			LeaveRule_paren_expression();
	        if (state.backtracking > 0) { Memoize(input, 26, paren_expression_StartIndex); }

	    }
	 	DebugLocation(152, 24);
		} finally { DebugExitRule(GrammarFileName, "paren_expression"); }
		return retval;

	}
	// $ANTLR end "paren_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_arguments() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_arguments() {}

	// $ANTLR start "arguments"
	// .\\cs.g:153:1: arguments : '(' ( argument_list )? ')' ;
	[GrammarRule("arguments")]
	private AstParserRuleReturnScope<object, IToken> arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 27);
		TraceIn("arguments", 27);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int arguments_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal122 = default(IToken);
	    IToken char_literal124 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> argument_list123 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal122_tree = default(object);
	    object char_literal124_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(153, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// .\\cs.g:153:10: ( '(' ( argument_list )? ')' )
			DebugEnterAlt(1);
			// .\\cs.g:154:2: '(' ( argument_list )? ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(154, 2);
			char_literal122=(IToken)Match(input,68,Follow._68_in_arguments1102); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal122_tree = (object)adaptor.Create(char_literal122);
			adaptor.AddChild(root_0, char_literal122_tree);
			}
			DebugLocation(154, 8);
			// .\\cs.g:154:8: ( argument_list )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, decisionCanBacktrack[33]);
			int LA33_0 = input.LA(1);

			if ((LA33_0==Character_literal||LA33_0==FALSE||(LA33_0>=Hex_number && LA33_0<=IDENTIFIER)||(LA33_0>=MINUS && LA33_0<=NUMBER)||LA33_0==Real_literal||LA33_0==STRINGLITERAL||LA33_0==TRUE||LA33_0==Verbatim_string_literal||LA33_0==61||LA33_0==66||(LA33_0>=68 && LA33_0<=69)||(LA33_0>=71 && LA33_0<=72)||LA33_0==75||LA33_0==95||(LA33_0>=97 && LA33_0<=98)||(LA33_0>=100 && LA33_0<=103)||(LA33_0>=105 && LA33_0<=106)||(LA33_0>=109 && LA33_0<=110)||(LA33_0>=114 && LA33_0<=117)||(LA33_0>=119 && LA33_0<=120)||LA33_0==122||LA33_0==126||LA33_0==129||LA33_0==132||LA33_0==135||LA33_0==138||LA33_0==141||(LA33_0>=143 && LA33_0<=144)||(LA33_0>=146 && LA33_0<=148)||(LA33_0>=150 && LA33_0<=152)||(LA33_0>=154 && LA33_0<=155)||LA33_0==157||LA33_0==160||LA33_0==162||(LA33_0>=166 && LA33_0<=167)||LA33_0==169||(LA33_0>=171 && LA33_0<=174)||LA33_0==177||LA33_0==180||(LA33_0>=183 && LA33_0<=187)||(LA33_0>=189 && LA33_0<=190)||LA33_0==194||LA33_0==196||LA33_0==202))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:154:8: argument_list
				{
				DebugLocation(154, 8);
				PushFollow(Follow._argument_list_in_arguments1106);
				argument_list123=argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, argument_list123.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(154, 25);
			char_literal124=(IToken)Match(input,RPAREN,Follow._RPAREN_in_arguments1111); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal124_tree = (object)adaptor.Create(char_literal124);
			adaptor.AddChild(root_0, char_literal124_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arguments", 27);
			LeaveRule("arguments", 27);
			LeaveRule_arguments();
	        if (state.backtracking > 0) { Memoize(input, 27, arguments_StartIndex); }

	    }
	 	DebugLocation(154, 28);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_argument_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_argument_list() {}

	// $ANTLR start "argument_list"
	// .\\cs.g:155:1: argument_list : argument ( ',' argument )* ;
	[GrammarRule("argument_list")]
	private AstParserRuleReturnScope<object, IToken> argument_list()
	{
		EnterRule_argument_list();
		EnterRule("argument_list", 28);
		TraceIn("argument_list", 28);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int argument_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal126 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> argument125 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> argument127 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal126_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "argument_list");
		DebugLocation(155, 25);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// .\\cs.g:155:14: ( argument ( ',' argument )* )
			DebugEnterAlt(1);
			// .\\cs.g:156:2: argument ( ',' argument )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(156, 2);
			PushFollow(Follow._argument_in_argument_list1120);
			argument125=argument();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, argument125.Tree);
			DebugLocation(156, 11);
			// .\\cs.g:156:11: ( ',' argument )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, decisionCanBacktrack[34]);
				int LA34_0 = input.LA(1);

				if ((LA34_0==74))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:156:12: ',' argument
					{
					DebugLocation(156, 12);
					char_literal126=(IToken)Match(input,74,Follow._74_in_argument_list1123); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal126_tree = (object)adaptor.Create(char_literal126);
					adaptor.AddChild(root_0, char_literal126_tree);
					}
					DebugLocation(156, 16);
					PushFollow(Follow._argument_in_argument_list1125);
					argument127=argument();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, argument127.Tree);

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument_list", 28);
			LeaveRule("argument_list", 28);
			LeaveRule_argument_list();
	        if (state.backtracking > 0) { Memoize(input, 28, argument_list_StartIndex); }

	    }
	 	DebugLocation(156, 25);
		} finally { DebugExitRule(GrammarFileName, "argument_list"); }
		return retval;

	}
	// $ANTLR end "argument_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_argument() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_argument() {}

	// $ANTLR start "argument"
	// .\\cs.g:158:1: argument : ( argument_name argument_value | argument_value );
	[GrammarRule("argument")]
	private AstParserRuleReturnScope<object, IToken> argument()
	{
		EnterRule_argument();
		EnterRule("argument", 29);
		TraceIn("argument", 29);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int argument_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> argument_name128 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> argument_value129 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> argument_value130 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "argument");
		DebugLocation(158, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// .\\cs.g:158:9: ( argument_name argument_value | argument_value )
			int alt35=2;
			try { DebugEnterDecision(35, decisionCanBacktrack[35]);
			switch (input.LA(1))
			{
			case 132:
				{
				int LA35_1 = input.LA(2);

				if ((LA35_1==79))
				{
					alt35 = 1;
				}
				else if ((LA35_1==DOT||LA35_1==GT||LA35_1==IDENTIFIER||LA35_1==MINUS||LA35_1==PTR||LA35_1==RPAREN||(LA35_1>=62 && LA35_1<=78)||(LA35_1>=80 && LA35_1<=91)||(LA35_1>=93 && LA35_1<=95)||(LA35_1>=97 && LA35_1<=101)||LA35_1==103||(LA35_1>=105 && LA35_1<=106)||LA35_1==109||LA35_1==114||LA35_1==117||(LA35_1>=119 && LA35_1<=120)||LA35_1==122||LA35_1==126||LA35_1==129||LA35_1==132||LA35_1==135||LA35_1==138||(LA35_1>=141 && LA35_1<=144)||(LA35_1>=146 && LA35_1<=148)||(LA35_1>=151 && LA35_1<=152)||LA35_1==154||LA35_1==157||LA35_1==160||LA35_1==162||LA35_1==167||LA35_1==169||(LA35_1>=171 && LA35_1<=173)||LA35_1==177||LA35_1==183||(LA35_1>=185 && LA35_1<=186)||(LA35_1>=189 && LA35_1<=190)||LA35_1==192||LA35_1==194||LA35_1==196||(LA35_1>=198 && LA35_1<=200)))
				{
					alt35 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 35, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 68:
			case 69:
			case 71:
			case 72:
			case 75:
			case 102:
			case 103:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 119:
			case 129:
			case 138:
			case 146:
			case 150:
			case 151:
			case 155:
			case 166:
			case 169:
			case 173:
			case 174:
			case 177:
			case 180:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 202:
				{
				alt35 = 2;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA35_3 = input.LA(2);

				if ((LA35_3==79))
				{
					alt35 = 1;
				}
				else if ((LA35_3==DOT||LA35_3==GT||LA35_3==MINUS||LA35_3==PTR||LA35_3==RPAREN||(LA35_3>=62 && LA35_3<=78)||(LA35_3>=80 && LA35_3<=91)||(LA35_3>=93 && LA35_3<=94)||LA35_3==99||LA35_3==142||(LA35_3>=198 && LA35_3<=200)))
				{
					alt35 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 35, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:159:2: argument_name argument_value
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(159, 2);
				PushFollow(Follow._argument_name_in_argument1135);
				argument_name128=argument_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, argument_name128.Tree);
				DebugLocation(159, 18);
				PushFollow(Follow._argument_value_in_argument1139);
				argument_value129=argument_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, argument_value129.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:160:4: argument_value
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(160, 4);
				PushFollow(Follow._argument_value_in_argument1144);
				argument_value130=argument_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, argument_value130.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument", 29);
			LeaveRule("argument", 29);
			LeaveRule_argument();
	        if (state.backtracking > 0) { Memoize(input, 29, argument_StartIndex); }

	    }
	 	DebugLocation(160, 17);
		} finally { DebugExitRule(GrammarFileName, "argument"); }
		return retval;

	}
	// $ANTLR end "argument"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_argument_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_argument_name() {}

	// $ANTLR start "argument_name"
	// .\\cs.g:161:1: argument_name : identifier ':' ;
	[GrammarRule("argument_name")]
	private AstParserRuleReturnScope<object, IToken> argument_name()
	{
		EnterRule_argument_name();
		EnterRule("argument_name", 30);
		TraceIn("argument_name", 30);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int argument_name_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal132 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier131 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal132_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "argument_name");
		DebugLocation(161, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// .\\cs.g:161:14: ( identifier ':' )
			DebugEnterAlt(1);
			// .\\cs.g:162:2: identifier ':'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(162, 2);
			PushFollow(Follow._identifier_in_argument_name1151);
			identifier131=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier131.Tree);
			DebugLocation(162, 15);
			char_literal132=(IToken)Match(input,79,Follow._79_in_argument_name1155); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal132_tree = (object)adaptor.Create(char_literal132);
			adaptor.AddChild(root_0, char_literal132_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument_name", 30);
			LeaveRule("argument_name", 30);
			LeaveRule_argument_name();
	        if (state.backtracking > 0) { Memoize(input, 30, argument_name_StartIndex); }

	    }
	 	DebugLocation(162, 17);
		} finally { DebugExitRule(GrammarFileName, "argument_name"); }
		return retval;

	}
	// $ANTLR end "argument_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_argument_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_argument_value() {}

	// $ANTLR start "argument_value"
	// .\\cs.g:163:1: argument_value : ( expression | ref_variable_reference | 'out' variable_reference );
	[GrammarRule("argument_value")]
	private AstParserRuleReturnScope<object, IToken> argument_value()
	{
		EnterRule_argument_value();
		EnterRule("argument_value", 31);
		TraceIn("argument_value", 31);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int argument_value_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal135 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression133 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> ref_variable_reference134 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable_reference136 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal135_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "argument_value");
		DebugLocation(163, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// .\\cs.g:163:15: ( expression | ref_variable_reference | 'out' variable_reference )
			int alt36=3;
			try { DebugEnterDecision(36, decisionCanBacktrack[36]);
			switch (input.LA(1))
			{
			case Character_literal:
			case FALSE:
			case Hex_number:
			case IDENTIFIER:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 68:
			case 69:
			case 71:
			case 72:
			case 75:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 102:
			case 103:
			case 105:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 150:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 174:
			case 177:
			case 180:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 190:
			case 194:
			case 196:
			case 202:
				{
				alt36 = 1;
				}
				break;
			case 166:
				{
				alt36 = 2;
				}
				break;
			case 155:
				{
				alt36 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:164:2: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(164, 2);
				PushFollow(Follow._expression_in_argument_value1163);
				expression133=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression133.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:165:4: ref_variable_reference
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(165, 4);
				PushFollow(Follow._ref_variable_reference_in_argument_value1169);
				ref_variable_reference134=ref_variable_reference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ref_variable_reference134.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:166:4: 'out' variable_reference
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(166, 4);
				string_literal135=(IToken)Match(input,155,Follow._155_in_argument_value1175); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal135_tree = (object)adaptor.Create(string_literal135);
				adaptor.AddChild(root_0, string_literal135_tree);
				}
				DebugLocation(166, 12);
				PushFollow(Follow._variable_reference_in_argument_value1179);
				variable_reference136=variable_reference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable_reference136.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument_value", 31);
			LeaveRule("argument_value", 31);
			LeaveRule_argument_value();
	        if (state.backtracking > 0) { Memoize(input, 31, argument_value_StartIndex); }

	    }
	 	DebugLocation(166, 30);
		} finally { DebugExitRule(GrammarFileName, "argument_value"); }
		return retval;

	}
	// $ANTLR end "argument_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_ref_variable_reference() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_ref_variable_reference() {}

	// $ANTLR start "ref_variable_reference"
	// .\\cs.g:167:1: ref_variable_reference : 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference ) ;
	[GrammarRule("ref_variable_reference")]
	private AstParserRuleReturnScope<object, IToken> ref_variable_reference()
	{
		EnterRule_ref_variable_reference();
		EnterRule("ref_variable_reference", 32);
		TraceIn("ref_variable_reference", 32);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int ref_variable_reference_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal137 = default(IToken);
	    IToken char_literal138 = default(IToken);
	    IToken char_literal140 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type139 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> ref_variable_reference141 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable_reference142 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable_reference143 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal137_tree = default(object);
	    object char_literal138_tree = default(object);
	    object char_literal140_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "ref_variable_reference");
		DebugLocation(167, 23);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// .\\cs.g:167:23: ( 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference ) )
			DebugEnterAlt(1);
			// .\\cs.g:168:2: 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(168, 2);
			string_literal137=(IToken)Match(input,166,Follow._166_in_ref_variable_reference1187); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal137_tree = (object)adaptor.Create(string_literal137);
			adaptor.AddChild(root_0, string_literal137_tree);
			}
			DebugLocation(169, 3);
			// .\\cs.g:169:3: ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, decisionCanBacktrack[38]);
			int LA38_0 = input.LA(1);

			if ((LA38_0==68))
			{
				int LA38_1 = input.LA(2);

				if ((EvaluatePredicate(synpred10_cs_fragment)))
				{
					alt38 = 1;
				}
				else if ((true))
				{
					alt38 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA38_0==Character_literal||LA38_0==FALSE||(LA38_0>=Hex_number && LA38_0<=IDENTIFIER)||(LA38_0>=MINUS && LA38_0<=NUMBER)||LA38_0==Real_literal||LA38_0==STRINGLITERAL||LA38_0==TRUE||LA38_0==Verbatim_string_literal||LA38_0==61||LA38_0==66||LA38_0==69||(LA38_0>=71 && LA38_0<=72)||LA38_0==75||LA38_0==95||(LA38_0>=97 && LA38_0<=98)||(LA38_0>=100 && LA38_0<=103)||(LA38_0>=105 && LA38_0<=106)||(LA38_0>=109 && LA38_0<=110)||(LA38_0>=114 && LA38_0<=117)||(LA38_0>=119 && LA38_0<=120)||LA38_0==122||LA38_0==126||LA38_0==129||LA38_0==132||LA38_0==135||LA38_0==138||LA38_0==141||(LA38_0>=143 && LA38_0<=144)||(LA38_0>=146 && LA38_0<=148)||(LA38_0>=150 && LA38_0<=152)||LA38_0==154||LA38_0==157||LA38_0==160||LA38_0==162||LA38_0==167||LA38_0==169||(LA38_0>=171 && LA38_0<=174)||LA38_0==177||LA38_0==180||(LA38_0>=183 && LA38_0<=187)||(LA38_0>=189 && LA38_0<=190)||LA38_0==194||LA38_0==196||LA38_0==202))
			{
				alt38 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:169:4: ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference )
				{
				DebugLocation(169, 28);
				char_literal138=(IToken)Match(input,68,Follow._68_in_ref_variable_reference1209); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal138_tree = (object)adaptor.Create(char_literal138);
				adaptor.AddChild(root_0, char_literal138_tree);
				}
				DebugLocation(169, 34);
				PushFollow(Follow._type_in_ref_variable_reference1213);
				type139=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type139.Tree);
				DebugLocation(169, 41);
				char_literal140=(IToken)Match(input,RPAREN,Follow._RPAREN_in_ref_variable_reference1217); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal140_tree = (object)adaptor.Create(char_literal140);
				adaptor.AddChild(root_0, char_literal140_tree);
				}
				DebugLocation(169, 47);
				// .\\cs.g:169:47: ( ref_variable_reference | variable_reference )
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, decisionCanBacktrack[37]);
				int LA37_0 = input.LA(1);

				if ((LA37_0==166))
				{
					alt37 = 1;
				}
				else if ((LA37_0==Character_literal||LA37_0==FALSE||(LA37_0>=Hex_number && LA37_0<=IDENTIFIER)||(LA37_0>=MINUS && LA37_0<=NUMBER)||LA37_0==Real_literal||LA37_0==STRINGLITERAL||LA37_0==TRUE||LA37_0==Verbatim_string_literal||LA37_0==61||LA37_0==66||(LA37_0>=68 && LA37_0<=69)||(LA37_0>=71 && LA37_0<=72)||LA37_0==75||LA37_0==95||(LA37_0>=97 && LA37_0<=98)||(LA37_0>=100 && LA37_0<=103)||(LA37_0>=105 && LA37_0<=106)||(LA37_0>=109 && LA37_0<=110)||(LA37_0>=114 && LA37_0<=117)||(LA37_0>=119 && LA37_0<=120)||LA37_0==122||LA37_0==126||LA37_0==129||LA37_0==132||LA37_0==135||LA37_0==138||LA37_0==141||(LA37_0>=143 && LA37_0<=144)||(LA37_0>=146 && LA37_0<=148)||(LA37_0>=150 && LA37_0<=152)||LA37_0==154||LA37_0==157||LA37_0==160||LA37_0==162||LA37_0==167||LA37_0==169||(LA37_0>=171 && LA37_0<=174)||LA37_0==177||LA37_0==180||(LA37_0>=183 && LA37_0<=187)||(LA37_0>=189 && LA37_0<=190)||LA37_0==194||LA37_0==196||LA37_0==202))
				{
					alt37 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:169:48: ref_variable_reference
					{
					DebugLocation(169, 48);
					PushFollow(Follow._ref_variable_reference_in_ref_variable_reference1222);
					ref_variable_reference141=ref_variable_reference();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, ref_variable_reference141.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:169:73: variable_reference
					{
					DebugLocation(169, 73);
					PushFollow(Follow._variable_reference_in_ref_variable_reference1226);
					variable_reference142=variable_reference();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable_reference142.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(37); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:171:5: variable_reference
				{
				DebugLocation(171, 5);
				PushFollow(Follow._variable_reference_in_ref_variable_reference1262);
				variable_reference143=variable_reference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable_reference143.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ref_variable_reference", 32);
			LeaveRule("ref_variable_reference", 32);
			LeaveRule_ref_variable_reference();
	        if (state.backtracking > 0) { Memoize(input, 32, ref_variable_reference_StartIndex); }

	    }
	 	DebugLocation(171, 23);
		} finally { DebugExitRule(GrammarFileName, "ref_variable_reference"); }
		return retval;

	}
	// $ANTLR end "ref_variable_reference"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variable_reference() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variable_reference() {}

	// $ANTLR start "variable_reference"
	// .\\cs.g:173:1: variable_reference : expression ;
	[GrammarRule("variable_reference")]
	private AstParserRuleReturnScope<object, IToken> variable_reference()
	{
		EnterRule_variable_reference();
		EnterRule("variable_reference", 33);
		TraceIn("variable_reference", 33);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int variable_reference_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression144 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "variable_reference");
		DebugLocation(173, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// .\\cs.g:173:19: ( expression )
			DebugEnterAlt(1);
			// .\\cs.g:174:2: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(174, 2);
			PushFollow(Follow._expression_in_variable_reference1272);
			expression144=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression144.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable_reference", 33);
			LeaveRule("variable_reference", 33);
			LeaveRule_variable_reference();
	        if (state.backtracking > 0) { Memoize(input, 33, variable_reference_StartIndex); }

	    }
	 	DebugLocation(174, 11);
		} finally { DebugExitRule(GrammarFileName, "variable_reference"); }
		return retval;

	}
	// $ANTLR end "variable_reference"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_rank_specifiers() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_rank_specifiers() {}

	// $ANTLR start "rank_specifiers"
	// .\\cs.g:175:1: rank_specifiers : ( rank_specifier )+ ;
	[GrammarRule("rank_specifiers")]
	private AstParserRuleReturnScope<object, IToken> rank_specifiers()
	{
		EnterRule_rank_specifiers();
		EnterRule("rank_specifiers", 34);
		TraceIn("rank_specifiers", 34);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int rank_specifiers_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> rank_specifier145 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "rank_specifiers");
		DebugLocation(175, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// .\\cs.g:175:16: ( ( rank_specifier )+ )
			DebugEnterAlt(1);
			// .\\cs.g:176:2: ( rank_specifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(176, 2);
			// .\\cs.g:176:2: ( rank_specifier )+
			int cnt39=0;
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, decisionCanBacktrack[39]);
				int LA39_0 = input.LA(1);

				if ((LA39_0==91))
				{
					int LA39_2 = input.LA(2);

					if ((LA39_2==74||LA39_2==92))
					{
						alt39 = 1;
					}


				}


				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:176:2: rank_specifier
					{
					DebugLocation(176, 2);
					PushFollow(Follow._rank_specifier_in_rank_specifiers1280);
					rank_specifier145=rank_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, rank_specifier145.Tree);

					}
					break;

				default:
					if (cnt39 >= 1)
						goto loop39;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee39 = new EarlyExitException( 39, input );
					DebugRecognitionException(eee39);
					throw eee39;
				}
				cnt39++;
			}
			loop39:
				;

			} finally { DebugExitSubRule(39); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("rank_specifiers", 34);
			LeaveRule("rank_specifiers", 34);
			LeaveRule_rank_specifiers();
	        if (state.backtracking > 0) { Memoize(input, 34, rank_specifiers_StartIndex); }

	    }
	 	DebugLocation(176, 17);
		} finally { DebugExitRule(GrammarFileName, "rank_specifiers"); }
		return retval;

	}
	// $ANTLR end "rank_specifiers"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_rank_specifier() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_rank_specifier() {}

	// $ANTLR start "rank_specifier"
	// .\\cs.g:177:1: rank_specifier : '[' ( dim_separators )? ']' ;
	[GrammarRule("rank_specifier")]
	private AstParserRuleReturnScope<object, IToken> rank_specifier()
	{
		EnterRule_rank_specifier();
		EnterRule("rank_specifier", 35);
		TraceIn("rank_specifier", 35);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int rank_specifier_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal146 = default(IToken);
	    IToken char_literal148 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> dim_separators147 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal146_tree = default(object);
	    object char_literal148_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "rank_specifier");
		DebugLocation(177, 29);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// .\\cs.g:177:15: ( '[' ( dim_separators )? ']' )
			DebugEnterAlt(1);
			// .\\cs.g:178:2: '[' ( dim_separators )? ']'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(178, 2);
			char_literal146=(IToken)Match(input,91,Follow._91_in_rank_specifier1298); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal146_tree = (object)adaptor.Create(char_literal146);
			adaptor.AddChild(root_0, char_literal146_tree);
			}
			DebugLocation(178, 8);
			// .\\cs.g:178:8: ( dim_separators )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, decisionCanBacktrack[40]);
			int LA40_0 = input.LA(1);

			if ((LA40_0==74))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:178:8: dim_separators
				{
				DebugLocation(178, 8);
				PushFollow(Follow._dim_separators_in_rank_specifier1302);
				dim_separators147=dim_separators();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, dim_separators147.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(178, 26);
			char_literal148=(IToken)Match(input,92,Follow._92_in_rank_specifier1307); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal148_tree = (object)adaptor.Create(char_literal148);
			adaptor.AddChild(root_0, char_literal148_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("rank_specifier", 35);
			LeaveRule("rank_specifier", 35);
			LeaveRule_rank_specifier();
	        if (state.backtracking > 0) { Memoize(input, 35, rank_specifier_StartIndex); }

	    }
	 	DebugLocation(178, 29);
		} finally { DebugExitRule(GrammarFileName, "rank_specifier"); }
		return retval;

	}
	// $ANTLR end "rank_specifier"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_dim_separators() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_dim_separators() {}

	// $ANTLR start "dim_separators"
	// .\\cs.g:179:1: dim_separators : ( ',' )+ ;
	[GrammarRule("dim_separators")]
	private AstParserRuleReturnScope<object, IToken> dim_separators()
	{
		EnterRule_dim_separators();
		EnterRule("dim_separators", 36);
		TraceIn("dim_separators", 36);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int dim_separators_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal149 = default(IToken);

	    object char_literal149_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "dim_separators");
		DebugLocation(179, 6);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// .\\cs.g:179:15: ( ( ',' )+ )
			DebugEnterAlt(1);
			// .\\cs.g:180:2: ( ',' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(180, 2);
			// .\\cs.g:180:2: ( ',' )+
			int cnt41=0;
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, decisionCanBacktrack[41]);
				int LA41_0 = input.LA(1);

				if ((LA41_0==74))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:180:2: ','
					{
					DebugLocation(180, 2);
					char_literal149=(IToken)Match(input,74,Follow._74_in_dim_separators1316); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal149_tree = (object)adaptor.Create(char_literal149);
					adaptor.AddChild(root_0, char_literal149_tree);
					}

					}
					break;

				default:
					if (cnt41 >= 1)
						goto loop41;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee41 = new EarlyExitException( 41, input );
					DebugRecognitionException(eee41);
					throw eee41;
				}
				cnt41++;
			}
			loop41:
				;

			} finally { DebugExitSubRule(41); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dim_separators", 36);
			LeaveRule("dim_separators", 36);
			LeaveRule_dim_separators();
	        if (state.backtracking > 0) { Memoize(input, 36, dim_separators_StartIndex); }

	    }
	 	DebugLocation(180, 6);
		} finally { DebugExitRule(GrammarFileName, "dim_separators"); }
		return retval;

	}
	// $ANTLR end "dim_separators"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_delegate_creation_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_delegate_creation_expression() {}

	// $ANTLR start "delegate_creation_expression"
	// .\\cs.g:182:1: delegate_creation_expression : type_name '(' type_name ')' ;
	[GrammarRule("delegate_creation_expression")]
	private AstParserRuleReturnScope<object, IToken> delegate_creation_expression()
	{
		EnterRule_delegate_creation_expression();
		EnterRule("delegate_creation_expression", 37);
		TraceIn("delegate_creation_expression", 37);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int delegate_creation_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal151 = default(IToken);
	    IToken char_literal153 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type_name150 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_name152 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal151_tree = default(object);
	    object char_literal153_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "delegate_creation_expression");
		DebugLocation(182, 35);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// .\\cs.g:182:29: ( type_name '(' type_name ')' )
			DebugEnterAlt(1);
			// .\\cs.g:184:2: type_name '(' type_name ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(184, 2);
			PushFollow(Follow._type_name_in_delegate_creation_expression1329);
			type_name150=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name150.Tree);
			DebugLocation(184, 14);
			char_literal151=(IToken)Match(input,68,Follow._68_in_delegate_creation_expression1333); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal151_tree = (object)adaptor.Create(char_literal151);
			adaptor.AddChild(root_0, char_literal151_tree);
			}
			DebugLocation(184, 20);
			PushFollow(Follow._type_name_in_delegate_creation_expression1337);
			type_name152=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name152.Tree);
			DebugLocation(184, 32);
			char_literal153=(IToken)Match(input,RPAREN,Follow._RPAREN_in_delegate_creation_expression1341); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal153_tree = (object)adaptor.Create(char_literal153);
			adaptor.AddChild(root_0, char_literal153_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("delegate_creation_expression", 37);
			LeaveRule("delegate_creation_expression", 37);
			LeaveRule_delegate_creation_expression();
	        if (state.backtracking > 0) { Memoize(input, 37, delegate_creation_expression_StartIndex); }

	    }
	 	DebugLocation(184, 35);
		} finally { DebugExitRule(GrammarFileName, "delegate_creation_expression"); }
		return retval;

	}
	// $ANTLR end "delegate_creation_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_anonymous_object_creation_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_anonymous_object_creation_expression() {}

	// $ANTLR start "anonymous_object_creation_expression"
	// .\\cs.g:185:1: anonymous_object_creation_expression : anonymous_object_initializer ;
	[GrammarRule("anonymous_object_creation_expression")]
	private AstParserRuleReturnScope<object, IToken> anonymous_object_creation_expression()
	{
		EnterRule_anonymous_object_creation_expression();
		EnterRule("anonymous_object_creation_expression", 38);
		TraceIn("anonymous_object_creation_expression", 38);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int anonymous_object_creation_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> anonymous_object_initializer154 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "anonymous_object_creation_expression");
		DebugLocation(185, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// .\\cs.g:185:37: ( anonymous_object_initializer )
			DebugEnterAlt(1);
			// .\\cs.g:187:2: anonymous_object_initializer
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(187, 2);
			PushFollow(Follow._anonymous_object_initializer_in_anonymous_object_creation_expression1352);
			anonymous_object_initializer154=anonymous_object_initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, anonymous_object_initializer154.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_object_creation_expression", 38);
			LeaveRule("anonymous_object_creation_expression", 38);
			LeaveRule_anonymous_object_creation_expression();
	        if (state.backtracking > 0) { Memoize(input, 38, anonymous_object_creation_expression_StartIndex); }

	    }
	 	DebugLocation(187, 30);
		} finally { DebugExitRule(GrammarFileName, "anonymous_object_creation_expression"); }
		return retval;

	}
	// $ANTLR end "anonymous_object_creation_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_anonymous_object_initializer() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_anonymous_object_initializer() {}

	// $ANTLR start "anonymous_object_initializer"
	// .\\cs.g:188:1: anonymous_object_initializer : '{' ( member_declarator_list )? ( ',' )? '}' ;
	[GrammarRule("anonymous_object_initializer")]
	private AstParserRuleReturnScope<object, IToken> anonymous_object_initializer()
	{
		EnterRule_anonymous_object_initializer();
		EnterRule("anonymous_object_initializer", 39);
		TraceIn("anonymous_object_initializer", 39);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int anonymous_object_initializer_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal155 = default(IToken);
	    IToken char_literal157 = default(IToken);
	    IToken char_literal158 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> member_declarator_list156 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal155_tree = default(object);
	    object char_literal157_tree = default(object);
	    object char_literal158_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "anonymous_object_initializer");
		DebugLocation(188, 43);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// .\\cs.g:188:29: ( '{' ( member_declarator_list )? ( ',' )? '}' )
			DebugEnterAlt(1);
			// .\\cs.g:189:2: '{' ( member_declarator_list )? ( ',' )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(189, 2);
			char_literal155=(IToken)Match(input,197,Follow._197_in_anonymous_object_initializer1361); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal155_tree = (object)adaptor.Create(char_literal155);
			adaptor.AddChild(root_0, char_literal155_tree);
			}
			DebugLocation(189, 8);
			// .\\cs.g:189:8: ( member_declarator_list )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, decisionCanBacktrack[42]);
			int LA42_0 = input.LA(1);

			if ((LA42_0==IDENTIFIER||LA42_0==95||(LA42_0>=97 && LA42_0<=98)||(LA42_0>=100 && LA42_0<=101)||LA42_0==105||LA42_0==117||LA42_0==120||LA42_0==122||LA42_0==126||LA42_0==132||LA42_0==135||LA42_0==141||(LA42_0>=143 && LA42_0<=144)||(LA42_0>=147 && LA42_0<=148)||LA42_0==152||LA42_0==154||LA42_0==157||LA42_0==160||LA42_0==162||LA42_0==167||(LA42_0>=171 && LA42_0<=172)||LA42_0==183||LA42_0==190||LA42_0==194||LA42_0==196))
			{
				alt42 = 1;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:189:8: member_declarator_list
				{
				DebugLocation(189, 8);
				PushFollow(Follow._member_declarator_list_in_anonymous_object_initializer1365);
				member_declarator_list156=member_declarator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, member_declarator_list156.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(42); }

			DebugLocation(189, 34);
			// .\\cs.g:189:34: ( ',' )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, decisionCanBacktrack[43]);
			int LA43_0 = input.LA(1);

			if ((LA43_0==74))
			{
				alt43 = 1;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:189:34: ','
				{
				DebugLocation(189, 34);
				char_literal157=(IToken)Match(input,74,Follow._74_in_anonymous_object_initializer1370); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal157_tree = (object)adaptor.Create(char_literal157);
				adaptor.AddChild(root_0, char_literal157_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(43); }

			DebugLocation(189, 41);
			char_literal158=(IToken)Match(input,201,Follow._201_in_anonymous_object_initializer1375); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal158_tree = (object)adaptor.Create(char_literal158);
			adaptor.AddChild(root_0, char_literal158_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_object_initializer", 39);
			LeaveRule("anonymous_object_initializer", 39);
			LeaveRule_anonymous_object_initializer();
	        if (state.backtracking > 0) { Memoize(input, 39, anonymous_object_initializer_StartIndex); }

	    }
	 	DebugLocation(189, 43);
		} finally { DebugExitRule(GrammarFileName, "anonymous_object_initializer"); }
		return retval;

	}
	// $ANTLR end "anonymous_object_initializer"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_member_declarator_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_member_declarator_list() {}

	// $ANTLR start "member_declarator_list"
	// .\\cs.g:190:1: member_declarator_list : member_declarator ( ',' member_declarator )* ;
	[GrammarRule("member_declarator_list")]
	private AstParserRuleReturnScope<object, IToken> member_declarator_list()
	{
		EnterRule_member_declarator_list();
		EnterRule("member_declarator_list", 40);
		TraceIn("member_declarator_list", 40);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int member_declarator_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal160 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> member_declarator159 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> member_declarator161 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal160_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "member_declarator_list");
		DebugLocation(190, 45);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// .\\cs.g:190:23: ( member_declarator ( ',' member_declarator )* )
			DebugEnterAlt(1);
			// .\\cs.g:191:2: member_declarator ( ',' member_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(191, 2);
			PushFollow(Follow._member_declarator_in_member_declarator_list1383);
			member_declarator159=member_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, member_declarator159.Tree);
			DebugLocation(191, 21);
			// .\\cs.g:191:21: ( ',' member_declarator )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, decisionCanBacktrack[44]);
				int LA44_0 = input.LA(1);

				if ((LA44_0==74))
				{
					int LA44_1 = input.LA(2);

					if ((LA44_1==IDENTIFIER||LA44_1==95||(LA44_1>=97 && LA44_1<=98)||(LA44_1>=100 && LA44_1<=101)||LA44_1==105||LA44_1==117||LA44_1==120||LA44_1==122||LA44_1==126||LA44_1==132||LA44_1==135||LA44_1==141||(LA44_1>=143 && LA44_1<=144)||(LA44_1>=147 && LA44_1<=148)||LA44_1==152||LA44_1==154||LA44_1==157||LA44_1==160||LA44_1==162||LA44_1==167||(LA44_1>=171 && LA44_1<=172)||LA44_1==183||LA44_1==190||LA44_1==194||LA44_1==196))
					{
						alt44 = 1;
					}


				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:191:22: ',' member_declarator
					{
					DebugLocation(191, 22);
					char_literal160=(IToken)Match(input,74,Follow._74_in_member_declarator_list1387); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal160_tree = (object)adaptor.Create(char_literal160);
					adaptor.AddChild(root_0, char_literal160_tree);
					}
					DebugLocation(191, 26);
					PushFollow(Follow._member_declarator_in_member_declarator_list1389);
					member_declarator161=member_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, member_declarator161.Tree);

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("member_declarator_list", 40);
			LeaveRule("member_declarator_list", 40);
			LeaveRule_member_declarator_list();
	        if (state.backtracking > 0) { Memoize(input, 40, member_declarator_list_StartIndex); }

	    }
	 	DebugLocation(191, 45);
		} finally { DebugExitRule(GrammarFileName, "member_declarator_list"); }
		return retval;

	}
	// $ANTLR end "member_declarator_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_member_declarator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_member_declarator() {}

	// $ANTLR start "member_declarator"
	// .\\cs.g:192:1: member_declarator : identifier ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression ) ;
	[GrammarRule("member_declarator")]
	private AstParserRuleReturnScope<object, IToken> member_declarator()
	{
		EnterRule_member_declarator();
		EnterRule("member_declarator", 41);
		TraceIn("member_declarator", 41);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int member_declarator_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal164 = default(IToken);
	    IToken char_literal166 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier162 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> generic_argument_list163 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> primary_or_array_creation_expression165 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression167 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal164_tree = default(object);
	    object char_literal166_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "member_declarator");
		DebugLocation(192, 25);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// .\\cs.g:192:18: ( identifier ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression ) )
			DebugEnterAlt(1);
			// .\\cs.g:193:2: identifier ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(193, 2);
			PushFollow(Follow._identifier_in_member_declarator1401);
			identifier162=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier162.Tree);
			DebugLocation(193, 15);
			// .\\cs.g:193:15: ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression )
			int alt45=3;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, decisionCanBacktrack[45]);
			switch (input.LA(1))
			{
			case 81:
				{
				alt45 = 1;
				}
				break;
			case DOT:
				{
				alt45 = 2;
				}
				break;
			case 85:
				{
				alt45 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:193:16: generic_argument_list
				{
				DebugLocation(193, 16);
				PushFollow(Follow._generic_argument_list_in_member_declarator1406);
				generic_argument_list163=generic_argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_argument_list163.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:194:8: ( '.' primary_or_array_creation_expression )
				{
				DebugLocation(194, 8);
				// .\\cs.g:194:8: ( '.' primary_or_array_creation_expression )
				DebugEnterAlt(1);
				// .\\cs.g:194:9: '.' primary_or_array_creation_expression
				{
				DebugLocation(194, 9);
				char_literal164=(IToken)Match(input,DOT,Follow._DOT_in_member_declarator1416); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal164_tree = (object)adaptor.Create(char_literal164);
				adaptor.AddChild(root_0, char_literal164_tree);
				}
				DebugLocation(194, 15);
				PushFollow(Follow._primary_or_array_creation_expression_in_member_declarator1420);
				primary_or_array_creation_expression165=primary_or_array_creation_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary_or_array_creation_expression165.Tree);

				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:195:8: '=' expression
				{
				DebugLocation(195, 8);
				char_literal166=(IToken)Match(input,85,Follow._85_in_member_declarator1430); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal166_tree = (object)adaptor.Create(char_literal166);
				adaptor.AddChild(root_0, char_literal166_tree);
				}
				DebugLocation(195, 14);
				PushFollow(Follow._expression_in_member_declarator1434);
				expression167=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression167.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(45); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("member_declarator", 41);
			LeaveRule("member_declarator", 41);
			LeaveRule_member_declarator();
	        if (state.backtracking > 0) { Memoize(input, 41, member_declarator_StartIndex); }

	    }
	 	DebugLocation(195, 25);
		} finally { DebugExitRule(GrammarFileName, "member_declarator"); }
		return retval;

	}
	// $ANTLR end "member_declarator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_primary_or_array_creation_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_primary_or_array_creation_expression() {}

	// $ANTLR start "primary_or_array_creation_expression"
	// .\\cs.g:196:1: primary_or_array_creation_expression : ( ( array_creation_expression )=> array_creation_expression | primary_expression );
	[GrammarRule("primary_or_array_creation_expression")]
	private AstParserRuleReturnScope<object, IToken> primary_or_array_creation_expression()
	{
		EnterRule_primary_or_array_creation_expression();
		EnterRule("primary_or_array_creation_expression", 42);
		TraceIn("primary_or_array_creation_expression", 42);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int primary_or_array_creation_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> array_creation_expression168 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> primary_expression169 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "primary_or_array_creation_expression");
		DebugLocation(196, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// .\\cs.g:196:37: ( ( array_creation_expression )=> array_creation_expression | primary_expression )
			int alt46=2;
			try { DebugEnterDecision(46, decisionCanBacktrack[46]);
			int LA46_0 = input.LA(1);

			if ((LA46_0==150))
			{
				int LA46_1 = input.LA(2);

				if ((EvaluatePredicate(synpred11_cs_fragment)))
				{
					alt46 = 1;
				}
				else if ((true))
				{
					alt46 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 46, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA46_0==Character_literal||LA46_0==FALSE||(LA46_0>=Hex_number && LA46_0<=IDENTIFIER)||(LA46_0>=NULL && LA46_0<=NUMBER)||LA46_0==Real_literal||LA46_0==STRINGLITERAL||LA46_0==TRUE||LA46_0==Verbatim_string_literal||LA46_0==68||LA46_0==95||(LA46_0>=97 && LA46_0<=98)||(LA46_0>=100 && LA46_0<=103)||(LA46_0>=105 && LA46_0<=106)||(LA46_0>=109 && LA46_0<=110)||(LA46_0>=114 && LA46_0<=117)||(LA46_0>=119 && LA46_0<=120)||LA46_0==122||LA46_0==126||LA46_0==129||LA46_0==132||LA46_0==135||LA46_0==138||LA46_0==141||(LA46_0>=143 && LA46_0<=144)||(LA46_0>=146 && LA46_0<=148)||(LA46_0>=151 && LA46_0<=152)||LA46_0==154||LA46_0==157||LA46_0==160||LA46_0==162||LA46_0==167||LA46_0==169||(LA46_0>=171 && LA46_0<=174)||LA46_0==177||LA46_0==180||(LA46_0>=183 && LA46_0<=187)||(LA46_0>=189 && LA46_0<=190)||LA46_0==194||LA46_0==196))
			{
				alt46 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:197:2: ( array_creation_expression )=> array_creation_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(197, 33);
				PushFollow(Follow._array_creation_expression_in_primary_or_array_creation_expression1449);
				array_creation_expression168=array_creation_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, array_creation_expression168.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:198:4: primary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(198, 4);
				PushFollow(Follow._primary_expression_in_primary_or_array_creation_expression1454);
				primary_expression169=primary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression169.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_or_array_creation_expression", 42);
			LeaveRule("primary_or_array_creation_expression", 42);
			LeaveRule_primary_or_array_creation_expression();
	        if (state.backtracking > 0) { Memoize(input, 42, primary_or_array_creation_expression_StartIndex); }

	    }
	 	DebugLocation(199, 1);
		} finally { DebugExitRule(GrammarFileName, "primary_or_array_creation_expression"); }
		return retval;

	}
	// $ANTLR end "primary_or_array_creation_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_array_creation_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_array_creation_expression() {}

	// $ANTLR start "array_creation_expression"
	// .\\cs.g:201:1: array_creation_expression : 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) ) ;
	[GrammarRule("array_creation_expression")]
	private AstParserRuleReturnScope<object, IToken> array_creation_expression()
	{
		EnterRule_array_creation_expression();
		EnterRule("array_creation_expression", 43);
		TraceIn("array_creation_expression", 43);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int array_creation_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal170 = default(IToken);
	    IToken char_literal172 = default(IToken);
	    IToken char_literal174 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type171 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list173 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> rank_specifiers175 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> array_initializer176 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> arguments177 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> invocation_part178 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> invocation_part179 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> arguments180 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> array_initializer181 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> rank_specifier182 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> array_initializer183 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal170_tree = default(object);
	    object char_literal172_tree = default(object);
	    object char_literal174_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "array_creation_expression");
		DebugLocation(201, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// .\\cs.g:201:26: ( 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) ) )
			DebugEnterAlt(1);
			// .\\cs.g:202:2: 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(202, 2);
			string_literal170=(IToken)Match(input,150,Follow._150_in_array_creation_expression1465); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal170_tree = (object)adaptor.Create(string_literal170);
			adaptor.AddChild(root_0, string_literal170_tree);
			}
			DebugLocation(203, 3);
			// .\\cs.g:203:3: ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) )
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, decisionCanBacktrack[52]);
			int LA52_0 = input.LA(1);

			if ((LA52_0==IDENTIFIER||LA52_0==95||(LA52_0>=97 && LA52_0<=98)||(LA52_0>=100 && LA52_0<=101)||LA52_0==103||(LA52_0>=105 && LA52_0<=106)||LA52_0==109||LA52_0==114||LA52_0==117||(LA52_0>=119 && LA52_0<=120)||LA52_0==122||LA52_0==126||LA52_0==129||LA52_0==132||LA52_0==135||LA52_0==138||LA52_0==141||(LA52_0>=143 && LA52_0<=144)||(LA52_0>=146 && LA52_0<=148)||(LA52_0>=151 && LA52_0<=152)||LA52_0==154||LA52_0==157||LA52_0==160||LA52_0==162||LA52_0==167||LA52_0==169||(LA52_0>=171 && LA52_0<=173)||LA52_0==177||LA52_0==183||(LA52_0>=185 && LA52_0<=186)||(LA52_0>=189 && LA52_0<=190)||LA52_0==192||LA52_0==194||LA52_0==196))
			{
				alt52 = 1;
			}
			else if ((LA52_0==91))
			{
				alt52 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:203:4: type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer )
				{
				DebugLocation(203, 4);
				PushFollow(Follow._type_in_array_creation_expression1473);
				type171=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type171.Tree);
				DebugLocation(203, 11);
				// .\\cs.g:203:11: ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer )
				int alt51=2;
				try { DebugEnterSubRule(51);
				try { DebugEnterDecision(51, decisionCanBacktrack[51]);
				int LA51_0 = input.LA(1);

				if ((LA51_0==91))
				{
					alt51 = 1;
				}
				else if ((LA51_0==197))
				{
					alt51 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:203:12: '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
					{
					DebugLocation(203, 12);
					char_literal172=(IToken)Match(input,91,Follow._91_in_array_creation_expression1478); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal172_tree = (object)adaptor.Create(char_literal172);
					adaptor.AddChild(root_0, char_literal172_tree);
					}
					DebugLocation(203, 18);
					PushFollow(Follow._expression_list_in_array_creation_expression1482);
					expression_list173=expression_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression_list173.Tree);
					DebugLocation(203, 36);
					char_literal174=(IToken)Match(input,92,Follow._92_in_array_creation_expression1486); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal174_tree = (object)adaptor.Create(char_literal174);
					adaptor.AddChild(root_0, char_literal174_tree);
					}
					DebugLocation(204, 6);
					// .\\cs.g:204:6: ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
					int alt50=2;
					try { DebugEnterSubRule(50);
					try { DebugEnterDecision(50, decisionCanBacktrack[50]);
					try
					{
						alt50 = dfa50.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(50); }
					switch (alt50)
					{
					case 1:
						DebugEnterAlt(1);
						// .\\cs.g:204:8: ( rank_specifiers )? ( array_initializer )?
						{
						DebugLocation(204, 8);
						// .\\cs.g:204:8: ( rank_specifiers )?
						int alt47=2;
						try { DebugEnterSubRule(47);
						try { DebugEnterDecision(47, decisionCanBacktrack[47]);
						int LA47_0 = input.LA(1);

						if ((LA47_0==91))
						{
							alt47 = 1;
						}
						} finally { DebugExitDecision(47); }
						switch (alt47)
						{
						case 1:
							DebugEnterAlt(1);
							// .\\cs.g:204:8: rank_specifiers
							{
							DebugLocation(204, 8);
							PushFollow(Follow._rank_specifiers_in_array_creation_expression1498);
							rank_specifiers175=rank_specifiers();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, rank_specifiers175.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(47); }

						DebugLocation(204, 27);
						// .\\cs.g:204:27: ( array_initializer )?
						int alt48=2;
						try { DebugEnterSubRule(48);
						try { DebugEnterDecision(48, decisionCanBacktrack[48]);
						int LA48_0 = input.LA(1);

						if ((LA48_0==197))
						{
							alt48 = 1;
						}
						} finally { DebugExitDecision(48); }
						switch (alt48)
						{
						case 1:
							DebugEnterAlt(1);
							// .\\cs.g:204:27: array_initializer
							{
							DebugLocation(204, 27);
							PushFollow(Follow._array_initializer_in_array_creation_expression1503);
							array_initializer176=array_initializer();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, array_initializer176.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(48); }


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// .\\cs.g:206:8: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments
						{
						DebugLocation(206, 8);
						// .\\cs.g:206:8: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )*
						try { DebugEnterSubRule(49);
						while (true)
						{
							int alt49=3;
							try { DebugEnterDecision(49, decisionCanBacktrack[49]);
							int LA49_0 = input.LA(1);

							if ((LA49_0==68))
							{
								int LA49_1 = input.LA(2);

								if ((EvaluatePredicate(synpred12_cs_fragment)))
								{
									alt49 = 1;
								}


							}
							else if ((LA49_0==DOT||LA49_0==PTR||LA49_0==91))
							{
								alt49 = 2;
							}


							} finally { DebugExitDecision(49); }
							switch ( alt49 )
							{
							case 1:
								DebugEnterAlt(1);
								// .\\cs.g:206:10: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
								{
								DebugLocation(206, 10);
								// .\\cs.g:206:10: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
								DebugEnterAlt(1);
								// .\\cs.g:206:11: ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part
								{
								DebugLocation(206, 43);
								PushFollow(Follow._arguments_in_array_creation_expression1539);
								arguments177=arguments();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, arguments177.Tree);
								DebugLocation(206, 55);
								PushFollow(Follow._invocation_part_in_array_creation_expression1543);
								invocation_part178=invocation_part();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, invocation_part178.Tree);

								}


								}
								break;
							case 2:
								DebugEnterAlt(2);
								// .\\cs.g:207:10: invocation_part
								{
								DebugLocation(207, 10);
								PushFollow(Follow._invocation_part_in_array_creation_expression1555);
								invocation_part179=invocation_part();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, invocation_part179.Tree);

								}
								break;

							default:
								goto loop49;
							}
						}

						loop49:
							;

						} finally { DebugExitSubRule(49); }

						DebugLocation(207, 30);
						PushFollow(Follow._arguments_in_array_creation_expression1561);
						arguments180=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, arguments180.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(50); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:209:7: array_initializer
					{
					DebugLocation(209, 7);
					PushFollow(Follow._array_initializer_in_array_creation_expression1583);
					array_initializer181=array_initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, array_initializer181.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(51); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:211:5: rank_specifier ( array_initializer )
				{
				DebugLocation(211, 5);
				PushFollow(Follow._rank_specifier_in_array_creation_expression1597);
				rank_specifier182=rank_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, rank_specifier182.Tree);
				DebugLocation(212, 4);
				// .\\cs.g:212:4: ( array_initializer )
				DebugEnterAlt(1);
				// .\\cs.g:212:5: array_initializer
				{
				DebugLocation(212, 5);
				PushFollow(Follow._array_initializer_in_array_creation_expression1606);
				array_initializer183=array_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, array_initializer183.Tree);

				}


				}
				break;

			}
			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("array_creation_expression", 43);
			LeaveRule("array_creation_expression", 43);
			LeaveRule_array_creation_expression();
	        if (state.backtracking > 0) { Memoize(input, 43, array_creation_expression_StartIndex); }

	    }
	 	DebugLocation(214, 4);
		} finally { DebugExitRule(GrammarFileName, "array_creation_expression"); }
		return retval;

	}
	// $ANTLR end "array_creation_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_array_initializer() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_array_initializer() {}

	// $ANTLR start "array_initializer"
	// .\\cs.g:215:1: array_initializer : '{' ( variable_initializer_list )? ( ',' )? '}' ;
	[GrammarRule("array_initializer")]
	private AstParserRuleReturnScope<object, IToken> array_initializer()
	{
		EnterRule_array_initializer();
		EnterRule("array_initializer", 44);
		TraceIn("array_initializer", 44);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int array_initializer_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal184 = default(IToken);
	    IToken char_literal186 = default(IToken);
	    IToken char_literal187 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable_initializer_list185 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal184_tree = default(object);
	    object char_literal186_tree = default(object);
	    object char_literal187_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "array_initializer");
		DebugLocation(215, 47);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// .\\cs.g:215:18: ( '{' ( variable_initializer_list )? ( ',' )? '}' )
			DebugEnterAlt(1);
			// .\\cs.g:216:2: '{' ( variable_initializer_list )? ( ',' )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(216, 2);
			char_literal184=(IToken)Match(input,197,Follow._197_in_array_initializer1627); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal184_tree = (object)adaptor.Create(char_literal184);
			adaptor.AddChild(root_0, char_literal184_tree);
			}
			DebugLocation(216, 8);
			// .\\cs.g:216:8: ( variable_initializer_list )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, decisionCanBacktrack[53]);
			int LA53_0 = input.LA(1);

			if ((LA53_0==Character_literal||LA53_0==FALSE||(LA53_0>=Hex_number && LA53_0<=IDENTIFIER)||(LA53_0>=MINUS && LA53_0<=NUMBER)||LA53_0==Real_literal||LA53_0==STRINGLITERAL||LA53_0==TRUE||LA53_0==Verbatim_string_literal||LA53_0==61||LA53_0==66||(LA53_0>=68 && LA53_0<=69)||(LA53_0>=71 && LA53_0<=72)||LA53_0==75||LA53_0==95||(LA53_0>=97 && LA53_0<=98)||(LA53_0>=100 && LA53_0<=103)||(LA53_0>=105 && LA53_0<=106)||(LA53_0>=109 && LA53_0<=110)||(LA53_0>=114 && LA53_0<=117)||(LA53_0>=119 && LA53_0<=120)||LA53_0==122||LA53_0==126||LA53_0==129||LA53_0==132||LA53_0==135||LA53_0==138||LA53_0==141||(LA53_0>=143 && LA53_0<=144)||(LA53_0>=146 && LA53_0<=148)||(LA53_0>=150 && LA53_0<=152)||LA53_0==154||LA53_0==157||LA53_0==160||LA53_0==162||LA53_0==167||LA53_0==169||(LA53_0>=171 && LA53_0<=174)||LA53_0==177||LA53_0==180||(LA53_0>=183 && LA53_0<=187)||(LA53_0>=189 && LA53_0<=190)||LA53_0==194||(LA53_0>=196 && LA53_0<=197)||LA53_0==202))
			{
				alt53 = 1;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:216:8: variable_initializer_list
				{
				DebugLocation(216, 8);
				PushFollow(Follow._variable_initializer_list_in_array_initializer1631);
				variable_initializer_list185=variable_initializer_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable_initializer_list185.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(53); }

			DebugLocation(216, 37);
			// .\\cs.g:216:37: ( ',' )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, decisionCanBacktrack[54]);
			int LA54_0 = input.LA(1);

			if ((LA54_0==74))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:216:37: ','
				{
				DebugLocation(216, 37);
				char_literal186=(IToken)Match(input,74,Follow._74_in_array_initializer1636); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal186_tree = (object)adaptor.Create(char_literal186);
				adaptor.AddChild(root_0, char_literal186_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(216, 44);
			char_literal187=(IToken)Match(input,201,Follow._201_in_array_initializer1641); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal187_tree = (object)adaptor.Create(char_literal187);
			adaptor.AddChild(root_0, char_literal187_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("array_initializer", 44);
			LeaveRule("array_initializer", 44);
			LeaveRule_array_initializer();
	        if (state.backtracking > 0) { Memoize(input, 44, array_initializer_StartIndex); }

	    }
	 	DebugLocation(216, 47);
		} finally { DebugExitRule(GrammarFileName, "array_initializer"); }
		return retval;

	}
	// $ANTLR end "array_initializer"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variable_initializer_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variable_initializer_list() {}

	// $ANTLR start "variable_initializer_list"
	// .\\cs.g:217:1: variable_initializer_list : variable_initializer ( ',' variable_initializer )* ;
	[GrammarRule("variable_initializer_list")]
	private AstParserRuleReturnScope<object, IToken> variable_initializer_list()
	{
		EnterRule_variable_initializer_list();
		EnterRule("variable_initializer_list", 45);
		TraceIn("variable_initializer_list", 45);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int variable_initializer_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal189 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable_initializer188 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable_initializer190 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal189_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "variable_initializer_list");
		DebugLocation(217, 50);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// .\\cs.g:217:26: ( variable_initializer ( ',' variable_initializer )* )
			DebugEnterAlt(1);
			// .\\cs.g:218:2: variable_initializer ( ',' variable_initializer )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(218, 2);
			PushFollow(Follow._variable_initializer_in_variable_initializer_list1649);
			variable_initializer188=variable_initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variable_initializer188.Tree);
			DebugLocation(218, 23);
			// .\\cs.g:218:23: ( ',' variable_initializer )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, decisionCanBacktrack[55]);
				int LA55_0 = input.LA(1);

				if ((LA55_0==74))
				{
					int LA55_1 = input.LA(2);

					if ((LA55_1==Character_literal||LA55_1==FALSE||(LA55_1>=Hex_number && LA55_1<=IDENTIFIER)||(LA55_1>=MINUS && LA55_1<=NUMBER)||LA55_1==Real_literal||LA55_1==STRINGLITERAL||LA55_1==TRUE||LA55_1==Verbatim_string_literal||LA55_1==61||LA55_1==66||(LA55_1>=68 && LA55_1<=69)||(LA55_1>=71 && LA55_1<=72)||LA55_1==75||LA55_1==95||(LA55_1>=97 && LA55_1<=98)||(LA55_1>=100 && LA55_1<=103)||(LA55_1>=105 && LA55_1<=106)||(LA55_1>=109 && LA55_1<=110)||(LA55_1>=114 && LA55_1<=117)||(LA55_1>=119 && LA55_1<=120)||LA55_1==122||LA55_1==126||LA55_1==129||LA55_1==132||LA55_1==135||LA55_1==138||LA55_1==141||(LA55_1>=143 && LA55_1<=144)||(LA55_1>=146 && LA55_1<=148)||(LA55_1>=150 && LA55_1<=152)||LA55_1==154||LA55_1==157||LA55_1==160||LA55_1==162||LA55_1==167||LA55_1==169||(LA55_1>=171 && LA55_1<=174)||LA55_1==177||LA55_1==180||(LA55_1>=183 && LA55_1<=187)||(LA55_1>=189 && LA55_1<=190)||LA55_1==194||(LA55_1>=196 && LA55_1<=197)||LA55_1==202))
					{
						alt55 = 1;
					}


				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:218:24: ',' variable_initializer
					{
					DebugLocation(218, 24);
					char_literal189=(IToken)Match(input,74,Follow._74_in_variable_initializer_list1652); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal189_tree = (object)adaptor.Create(char_literal189);
					adaptor.AddChild(root_0, char_literal189_tree);
					}
					DebugLocation(218, 28);
					PushFollow(Follow._variable_initializer_in_variable_initializer_list1654);
					variable_initializer190=variable_initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable_initializer190.Tree);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable_initializer_list", 45);
			LeaveRule("variable_initializer_list", 45);
			LeaveRule_variable_initializer_list();
	        if (state.backtracking > 0) { Memoize(input, 45, variable_initializer_list_StartIndex); }

	    }
	 	DebugLocation(218, 50);
		} finally { DebugExitRule(GrammarFileName, "variable_initializer_list"); }
		return retval;

	}
	// $ANTLR end "variable_initializer_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variable_initializer() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variable_initializer() {}

	// $ANTLR start "variable_initializer"
	// .\\cs.g:219:1: variable_initializer : ( expression | array_initializer );
	[GrammarRule("variable_initializer")]
	private AstParserRuleReturnScope<object, IToken> variable_initializer()
	{
		EnterRule_variable_initializer();
		EnterRule("variable_initializer", 46);
		TraceIn("variable_initializer", 46);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int variable_initializer_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression191 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> array_initializer192 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "variable_initializer");
		DebugLocation(219, 32);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// .\\cs.g:219:21: ( expression | array_initializer )
			int alt56=2;
			try { DebugEnterDecision(56, decisionCanBacktrack[56]);
			int LA56_0 = input.LA(1);

			if ((LA56_0==Character_literal||LA56_0==FALSE||(LA56_0>=Hex_number && LA56_0<=IDENTIFIER)||(LA56_0>=MINUS && LA56_0<=NUMBER)||LA56_0==Real_literal||LA56_0==STRINGLITERAL||LA56_0==TRUE||LA56_0==Verbatim_string_literal||LA56_0==61||LA56_0==66||(LA56_0>=68 && LA56_0<=69)||(LA56_0>=71 && LA56_0<=72)||LA56_0==75||LA56_0==95||(LA56_0>=97 && LA56_0<=98)||(LA56_0>=100 && LA56_0<=103)||(LA56_0>=105 && LA56_0<=106)||(LA56_0>=109 && LA56_0<=110)||(LA56_0>=114 && LA56_0<=117)||(LA56_0>=119 && LA56_0<=120)||LA56_0==122||LA56_0==126||LA56_0==129||LA56_0==132||LA56_0==135||LA56_0==138||LA56_0==141||(LA56_0>=143 && LA56_0<=144)||(LA56_0>=146 && LA56_0<=148)||(LA56_0>=150 && LA56_0<=152)||LA56_0==154||LA56_0==157||LA56_0==160||LA56_0==162||LA56_0==167||LA56_0==169||(LA56_0>=171 && LA56_0<=174)||LA56_0==177||LA56_0==180||(LA56_0>=183 && LA56_0<=187)||(LA56_0>=189 && LA56_0<=190)||LA56_0==194||LA56_0==196||LA56_0==202))
			{
				alt56 = 1;
			}
			else if ((LA56_0==197))
			{
				alt56 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:220:2: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(220, 2);
				PushFollow(Follow._expression_in_variable_initializer1664);
				expression191=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression191.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:220:15: array_initializer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(220, 15);
				PushFollow(Follow._array_initializer_in_variable_initializer1668);
				array_initializer192=array_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, array_initializer192.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable_initializer", 46);
			LeaveRule("variable_initializer", 46);
			LeaveRule_variable_initializer();
	        if (state.backtracking > 0) { Memoize(input, 46, variable_initializer_StartIndex); }

	    }
	 	DebugLocation(220, 32);
		} finally { DebugExitRule(GrammarFileName, "variable_initializer"); }
		return retval;

	}
	// $ANTLR end "variable_initializer"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_sizeof_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_sizeof_expression() {}

	// $ANTLR start "sizeof_expression"
	// .\\cs.g:221:1: sizeof_expression : 'sizeof' '(' unmanaged_type ')' ;
	[GrammarRule("sizeof_expression")]
	private AstParserRuleReturnScope<object, IToken> sizeof_expression()
	{
		EnterRule_sizeof_expression();
		EnterRule("sizeof_expression", 47);
		TraceIn("sizeof_expression", 47);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int sizeof_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal193 = default(IToken);
	    IToken char_literal194 = default(IToken);
	    IToken char_literal196 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> unmanaged_type195 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal193_tree = default(object);
	    object char_literal194_tree = default(object);
	    object char_literal196_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "sizeof_expression");
		DebugLocation(221, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// .\\cs.g:221:18: ( 'sizeof' '(' unmanaged_type ')' )
			DebugEnterAlt(1);
			// .\\cs.g:222:2: 'sizeof' '(' unmanaged_type ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(222, 2);
			string_literal193=(IToken)Match(input,174,Follow._174_in_sizeof_expression1676); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal193_tree = (object)adaptor.Create(string_literal193);
			adaptor.AddChild(root_0, string_literal193_tree);
			}
			DebugLocation(222, 13);
			char_literal194=(IToken)Match(input,68,Follow._68_in_sizeof_expression1680); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal194_tree = (object)adaptor.Create(char_literal194);
			adaptor.AddChild(root_0, char_literal194_tree);
			}
			DebugLocation(222, 19);
			PushFollow(Follow._unmanaged_type_in_sizeof_expression1684);
			unmanaged_type195=unmanaged_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unmanaged_type195.Tree);
			DebugLocation(222, 36);
			char_literal196=(IToken)Match(input,RPAREN,Follow._RPAREN_in_sizeof_expression1688); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal196_tree = (object)adaptor.Create(char_literal196);
			adaptor.AddChild(root_0, char_literal196_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sizeof_expression", 47);
			LeaveRule("sizeof_expression", 47);
			LeaveRule_sizeof_expression();
	        if (state.backtracking > 0) { Memoize(input, 47, sizeof_expression_StartIndex); }

	    }
	 	DebugLocation(222, 38);
		} finally { DebugExitRule(GrammarFileName, "sizeof_expression"); }
		return retval;

	}
	// $ANTLR end "sizeof_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_checked_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_checked_expression() {}

	// $ANTLR start "checked_expression"
	// .\\cs.g:223:1: checked_expression : 'checked' '(' expression ')' ;
	[GrammarRule("checked_expression")]
	private AstParserRuleReturnScope<object, IToken> checked_expression()
	{
		EnterRule_checked_expression();
		EnterRule("checked_expression", 48);
		TraceIn("checked_expression", 48);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int checked_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal197 = default(IToken);
	    IToken char_literal198 = default(IToken);
	    IToken char_literal200 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression199 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal197_tree = default(object);
	    object char_literal198_tree = default(object);
	    object char_literal200_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "checked_expression");
		DebugLocation(223, 36);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// .\\cs.g:223:19: ( 'checked' '(' expression ')' )
			DebugEnterAlt(1);
			// .\\cs.g:224:2: 'checked' '(' expression ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(224, 2);
			string_literal197=(IToken)Match(input,110,Follow._110_in_checked_expression1696); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal197_tree = (object)adaptor.Create(string_literal197);
			adaptor.AddChild(root_0, string_literal197_tree);
			}
			DebugLocation(224, 14);
			char_literal198=(IToken)Match(input,68,Follow._68_in_checked_expression1700); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal198_tree = (object)adaptor.Create(char_literal198);
			adaptor.AddChild(root_0, char_literal198_tree);
			}
			DebugLocation(224, 20);
			PushFollow(Follow._expression_in_checked_expression1704);
			expression199=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression199.Tree);
			DebugLocation(224, 33);
			char_literal200=(IToken)Match(input,RPAREN,Follow._RPAREN_in_checked_expression1708); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal200_tree = (object)adaptor.Create(char_literal200);
			adaptor.AddChild(root_0, char_literal200_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("checked_expression", 48);
			LeaveRule("checked_expression", 48);
			LeaveRule_checked_expression();
	        if (state.backtracking > 0) { Memoize(input, 48, checked_expression_StartIndex); }

	    }
	 	DebugLocation(224, 36);
		} finally { DebugExitRule(GrammarFileName, "checked_expression"); }
		return retval;

	}
	// $ANTLR end "checked_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_unchecked_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_unchecked_expression() {}

	// $ANTLR start "unchecked_expression"
	// .\\cs.g:225:1: unchecked_expression : 'unchecked' '(' expression ')' ;
	[GrammarRule("unchecked_expression")]
	private AstParserRuleReturnScope<object, IToken> unchecked_expression()
	{
		EnterRule_unchecked_expression();
		EnterRule("unchecked_expression", 49);
		TraceIn("unchecked_expression", 49);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int unchecked_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal201 = default(IToken);
	    IToken char_literal202 = default(IToken);
	    IToken char_literal204 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression203 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal201_tree = default(object);
	    object char_literal202_tree = default(object);
	    object char_literal204_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "unchecked_expression");
		DebugLocation(225, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// .\\cs.g:225:21: ( 'unchecked' '(' expression ')' )
			DebugEnterAlt(1);
			// .\\cs.g:226:2: 'unchecked' '(' expression ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(226, 2);
			string_literal201=(IToken)Match(input,187,Follow._187_in_unchecked_expression1717); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal201_tree = (object)adaptor.Create(string_literal201);
			adaptor.AddChild(root_0, string_literal201_tree);
			}
			DebugLocation(226, 16);
			char_literal202=(IToken)Match(input,68,Follow._68_in_unchecked_expression1721); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal202_tree = (object)adaptor.Create(char_literal202);
			adaptor.AddChild(root_0, char_literal202_tree);
			}
			DebugLocation(226, 22);
			PushFollow(Follow._expression_in_unchecked_expression1725);
			expression203=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression203.Tree);
			DebugLocation(226, 35);
			char_literal204=(IToken)Match(input,RPAREN,Follow._RPAREN_in_unchecked_expression1729); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal204_tree = (object)adaptor.Create(char_literal204);
			adaptor.AddChild(root_0, char_literal204_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unchecked_expression", 49);
			LeaveRule("unchecked_expression", 49);
			LeaveRule_unchecked_expression();
	        if (state.backtracking > 0) { Memoize(input, 49, unchecked_expression_StartIndex); }

	    }
	 	DebugLocation(226, 38);
		} finally { DebugExitRule(GrammarFileName, "unchecked_expression"); }
		return retval;

	}
	// $ANTLR end "unchecked_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_default_value_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_default_value_expression() {}

	// $ANTLR start "default_value_expression"
	// .\\cs.g:227:1: default_value_expression : 'default' '(' type ')' ;
	[GrammarRule("default_value_expression")]
	private AstParserRuleReturnScope<object, IToken> default_value_expression()
	{
		EnterRule_default_value_expression();
		EnterRule("default_value_expression", 50);
		TraceIn("default_value_expression", 50);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int default_value_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal205 = default(IToken);
	    IToken char_literal206 = default(IToken);
	    IToken char_literal208 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type207 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal205_tree = default(object);
	    object char_literal206_tree = default(object);
	    object char_literal208_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "default_value_expression");
		DebugLocation(227, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// .\\cs.g:227:25: ( 'default' '(' type ')' )
			DebugEnterAlt(1);
			// .\\cs.g:228:2: 'default' '(' type ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(228, 2);
			string_literal205=(IToken)Match(input,115,Follow._115_in_default_value_expression1738); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal205_tree = (object)adaptor.Create(string_literal205);
			adaptor.AddChild(root_0, string_literal205_tree);
			}
			DebugLocation(228, 14);
			char_literal206=(IToken)Match(input,68,Follow._68_in_default_value_expression1742); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal206_tree = (object)adaptor.Create(char_literal206);
			adaptor.AddChild(root_0, char_literal206_tree);
			}
			DebugLocation(228, 20);
			PushFollow(Follow._type_in_default_value_expression1746);
			type207=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type207.Tree);
			DebugLocation(228, 27);
			char_literal208=(IToken)Match(input,RPAREN,Follow._RPAREN_in_default_value_expression1750); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal208_tree = (object)adaptor.Create(char_literal208);
			adaptor.AddChild(root_0, char_literal208_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("default_value_expression", 50);
			LeaveRule("default_value_expression", 50);
			LeaveRule_default_value_expression();
	        if (state.backtracking > 0) { Memoize(input, 50, default_value_expression_StartIndex); }

	    }
	 	DebugLocation(228, 30);
		} finally { DebugExitRule(GrammarFileName, "default_value_expression"); }
		return retval;

	}
	// $ANTLR end "default_value_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_anonymous_method_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_anonymous_method_expression() {}

	// $ANTLR start "anonymous_method_expression"
	// .\\cs.g:229:1: anonymous_method_expression : 'delegate' ( explicit_anonymous_function_signature )? block ;
	[GrammarRule("anonymous_method_expression")]
	private AstParserRuleReturnScope<object, IToken> anonymous_method_expression()
	{
		EnterRule_anonymous_method_expression();
		EnterRule("anonymous_method_expression", 51);
		TraceIn("anonymous_method_expression", 51);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int anonymous_method_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal209 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> explicit_anonymous_function_signature210 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> block211 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal209_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "anonymous_method_expression");
		DebugLocation(229, 60);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// .\\cs.g:229:28: ( 'delegate' ( explicit_anonymous_function_signature )? block )
			DebugEnterAlt(1);
			// .\\cs.g:230:2: 'delegate' ( explicit_anonymous_function_signature )? block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(230, 2);
			string_literal209=(IToken)Match(input,116,Follow._116_in_anonymous_method_expression1758); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal209_tree = (object)adaptor.Create(string_literal209);
			adaptor.AddChild(root_0, string_literal209_tree);
			}
			DebugLocation(230, 15);
			// .\\cs.g:230:15: ( explicit_anonymous_function_signature )?
			int alt57=2;
			try { DebugEnterSubRule(57);
			try { DebugEnterDecision(57, decisionCanBacktrack[57]);
			int LA57_0 = input.LA(1);

			if ((LA57_0==68))
			{
				alt57 = 1;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:230:15: explicit_anonymous_function_signature
				{
				DebugLocation(230, 15);
				PushFollow(Follow._explicit_anonymous_function_signature_in_anonymous_method_expression1762);
				explicit_anonymous_function_signature210=explicit_anonymous_function_signature();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, explicit_anonymous_function_signature210.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(57); }

			DebugLocation(230, 56);
			PushFollow(Follow._block_in_anonymous_method_expression1767);
			block211=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block211.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_method_expression", 51);
			LeaveRule("anonymous_method_expression", 51);
			LeaveRule_anonymous_method_expression();
	        if (state.backtracking > 0) { Memoize(input, 51, anonymous_method_expression_StartIndex); }

	    }
	 	DebugLocation(230, 60);
		} finally { DebugExitRule(GrammarFileName, "anonymous_method_expression"); }
		return retval;

	}
	// $ANTLR end "anonymous_method_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_explicit_anonymous_function_signature() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_explicit_anonymous_function_signature() {}

	// $ANTLR start "explicit_anonymous_function_signature"
	// .\\cs.g:231:1: explicit_anonymous_function_signature : '(' ( explicit_anonymous_function_parameter_list )? ')' ;
	[GrammarRule("explicit_anonymous_function_signature")]
	private AstParserRuleReturnScope<object, IToken> explicit_anonymous_function_signature()
	{
		EnterRule_explicit_anonymous_function_signature();
		EnterRule("explicit_anonymous_function_signature", 52);
		TraceIn("explicit_anonymous_function_signature", 52);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int explicit_anonymous_function_signature_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal212 = default(IToken);
	    IToken char_literal214 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> explicit_anonymous_function_parameter_list213 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal212_tree = default(object);
	    object char_literal214_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "explicit_anonymous_function_signature");
		DebugLocation(231, 57);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// .\\cs.g:231:38: ( '(' ( explicit_anonymous_function_parameter_list )? ')' )
			DebugEnterAlt(1);
			// .\\cs.g:232:2: '(' ( explicit_anonymous_function_parameter_list )? ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(232, 2);
			char_literal212=(IToken)Match(input,68,Follow._68_in_explicit_anonymous_function_signature1774); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal212_tree = (object)adaptor.Create(char_literal212);
			adaptor.AddChild(root_0, char_literal212_tree);
			}
			DebugLocation(232, 8);
			// .\\cs.g:232:8: ( explicit_anonymous_function_parameter_list )?
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, decisionCanBacktrack[58]);
			int LA58_0 = input.LA(1);

			if ((LA58_0==IDENTIFIER||LA58_0==95||(LA58_0>=97 && LA58_0<=98)||(LA58_0>=100 && LA58_0<=101)||LA58_0==103||(LA58_0>=105 && LA58_0<=106)||LA58_0==109||LA58_0==114||LA58_0==117||(LA58_0>=119 && LA58_0<=120)||LA58_0==122||LA58_0==126||LA58_0==129||LA58_0==132||LA58_0==135||LA58_0==138||LA58_0==141||(LA58_0>=143 && LA58_0<=144)||(LA58_0>=146 && LA58_0<=148)||(LA58_0>=151 && LA58_0<=152)||(LA58_0>=154 && LA58_0<=155)||LA58_0==157||LA58_0==160||LA58_0==162||(LA58_0>=166 && LA58_0<=167)||LA58_0==169||(LA58_0>=171 && LA58_0<=173)||LA58_0==177||LA58_0==183||(LA58_0>=185 && LA58_0<=186)||(LA58_0>=189 && LA58_0<=190)||LA58_0==192||LA58_0==194||LA58_0==196))
			{
				alt58 = 1;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:232:8: explicit_anonymous_function_parameter_list
				{
				DebugLocation(232, 8);
				PushFollow(Follow._explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature1778);
				explicit_anonymous_function_parameter_list213=explicit_anonymous_function_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, explicit_anonymous_function_parameter_list213.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(58); }

			DebugLocation(232, 54);
			char_literal214=(IToken)Match(input,RPAREN,Follow._RPAREN_in_explicit_anonymous_function_signature1783); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal214_tree = (object)adaptor.Create(char_literal214);
			adaptor.AddChild(root_0, char_literal214_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("explicit_anonymous_function_signature", 52);
			LeaveRule("explicit_anonymous_function_signature", 52);
			LeaveRule_explicit_anonymous_function_signature();
	        if (state.backtracking > 0) { Memoize(input, 52, explicit_anonymous_function_signature_StartIndex); }

	    }
	 	DebugLocation(232, 57);
		} finally { DebugExitRule(GrammarFileName, "explicit_anonymous_function_signature"); }
		return retval;

	}
	// $ANTLR end "explicit_anonymous_function_signature"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_explicit_anonymous_function_parameter_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_explicit_anonymous_function_parameter_list() {}

	// $ANTLR start "explicit_anonymous_function_parameter_list"
	// .\\cs.g:233:1: explicit_anonymous_function_parameter_list : explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )* ;
	[GrammarRule("explicit_anonymous_function_parameter_list")]
	private AstParserRuleReturnScope<object, IToken> explicit_anonymous_function_parameter_list()
	{
		EnterRule_explicit_anonymous_function_parameter_list();
		EnterRule("explicit_anonymous_function_parameter_list", 53);
		TraceIn("explicit_anonymous_function_parameter_list", 53);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int explicit_anonymous_function_parameter_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal216 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> explicit_anonymous_function_parameter215 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> explicit_anonymous_function_parameter217 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal216_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "explicit_anonymous_function_parameter_list");
		DebugLocation(233, 88);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// .\\cs.g:233:43: ( explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )* )
			DebugEnterAlt(1);
			// .\\cs.g:234:2: explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(234, 2);
			PushFollow(Follow._explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list1791);
			explicit_anonymous_function_parameter215=explicit_anonymous_function_parameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, explicit_anonymous_function_parameter215.Tree);
			DebugLocation(234, 42);
			// .\\cs.g:234:42: ( ',' explicit_anonymous_function_parameter )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, decisionCanBacktrack[59]);
				int LA59_0 = input.LA(1);

				if ((LA59_0==74))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:234:43: ',' explicit_anonymous_function_parameter
					{
					DebugLocation(234, 43);
					char_literal216=(IToken)Match(input,74,Follow._74_in_explicit_anonymous_function_parameter_list1796); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal216_tree = (object)adaptor.Create(char_literal216);
					adaptor.AddChild(root_0, char_literal216_tree);
					}
					DebugLocation(234, 49);
					PushFollow(Follow._explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list1800);
					explicit_anonymous_function_parameter217=explicit_anonymous_function_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, explicit_anonymous_function_parameter217.Tree);

					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("explicit_anonymous_function_parameter_list", 53);
			LeaveRule("explicit_anonymous_function_parameter_list", 53);
			LeaveRule_explicit_anonymous_function_parameter_list();
	        if (state.backtracking > 0) { Memoize(input, 53, explicit_anonymous_function_parameter_list_StartIndex); }

	    }
	 	DebugLocation(234, 88);
		} finally { DebugExitRule(GrammarFileName, "explicit_anonymous_function_parameter_list"); }
		return retval;

	}
	// $ANTLR end "explicit_anonymous_function_parameter_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_explicit_anonymous_function_parameter() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_explicit_anonymous_function_parameter() {}

	// $ANTLR start "explicit_anonymous_function_parameter"
	// .\\cs.g:235:1: explicit_anonymous_function_parameter : ( anonymous_function_parameter_modifier )? type identifier ;
	[GrammarRule("explicit_anonymous_function_parameter")]
	private AstParserRuleReturnScope<object, IToken> explicit_anonymous_function_parameter()
	{
		EnterRule_explicit_anonymous_function_parameter();
		EnterRule("explicit_anonymous_function_parameter", 54);
		TraceIn("explicit_anonymous_function_parameter", 54);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int explicit_anonymous_function_parameter_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> anonymous_function_parameter_modifier218 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type219 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier220 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "explicit_anonymous_function_parameter");
		DebugLocation(235, 59);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// .\\cs.g:235:38: ( ( anonymous_function_parameter_modifier )? type identifier )
			DebugEnterAlt(1);
			// .\\cs.g:236:2: ( anonymous_function_parameter_modifier )? type identifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(236, 2);
			// .\\cs.g:236:2: ( anonymous_function_parameter_modifier )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, decisionCanBacktrack[60]);
			int LA60_0 = input.LA(1);

			if ((LA60_0==155||LA60_0==166))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:236:2: anonymous_function_parameter_modifier
				{
				DebugLocation(236, 2);
				PushFollow(Follow._anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter1811);
				anonymous_function_parameter_modifier218=anonymous_function_parameter_modifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, anonymous_function_parameter_modifier218.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(60); }

			DebugLocation(236, 43);
			PushFollow(Follow._type_in_explicit_anonymous_function_parameter1816);
			type219=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type219.Tree);
			DebugLocation(236, 50);
			PushFollow(Follow._identifier_in_explicit_anonymous_function_parameter1820);
			identifier220=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier220.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("explicit_anonymous_function_parameter", 54);
			LeaveRule("explicit_anonymous_function_parameter", 54);
			LeaveRule_explicit_anonymous_function_parameter();
	        if (state.backtracking > 0) { Memoize(input, 54, explicit_anonymous_function_parameter_StartIndex); }

	    }
	 	DebugLocation(236, 59);
		} finally { DebugExitRule(GrammarFileName, "explicit_anonymous_function_parameter"); }
		return retval;

	}
	// $ANTLR end "explicit_anonymous_function_parameter"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_anonymous_function_parameter_modifier() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_anonymous_function_parameter_modifier() {}

	// $ANTLR start "anonymous_function_parameter_modifier"
	// .\\cs.g:237:1: anonymous_function_parameter_modifier : ( 'ref' | 'out' );
	[GrammarRule("anonymous_function_parameter_modifier")]
	private AstParserRuleReturnScope<object, IToken> anonymous_function_parameter_modifier()
	{
		EnterRule_anonymous_function_parameter_modifier();
		EnterRule("anonymous_function_parameter_modifier", 55);
		TraceIn("anonymous_function_parameter_modifier", 55);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int anonymous_function_parameter_modifier_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set221 = default(IToken);

	    object set221_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "anonymous_function_parameter_modifier");
		DebugLocation(237, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// .\\cs.g:237:38: ( 'ref' | 'out' )
			DebugEnterAlt(1);
			// .\\cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(237, 38);

			set221=(IToken)input.LT(1);
			if (input.LA(1)==155||input.LA(1)==166)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set221));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_function_parameter_modifier", 55);
			LeaveRule("anonymous_function_parameter_modifier", 55);
			LeaveRule_anonymous_function_parameter_modifier();
	        if (state.backtracking > 0) { Memoize(input, 55, anonymous_function_parameter_modifier_StartIndex); }

	    }
	 	DebugLocation(238, 14);
		} finally { DebugExitRule(GrammarFileName, "anonymous_function_parameter_modifier"); }
		return retval;

	}
	// $ANTLR end "anonymous_function_parameter_modifier"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_object_creation_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_object_creation_expression() {}

	// $ANTLR start "object_creation_expression"
	// .\\cs.g:242:1: object_creation_expression : type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) ;
	[GrammarRule("object_creation_expression")]
	private AstParserRuleReturnScope<object, IToken> object_creation_expression()
	{
		EnterRule_object_creation_expression();
		EnterRule("object_creation_expression", 56);
		TraceIn("object_creation_expression", 56);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int object_creation_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal223 = default(IToken);
	    IToken char_literal225 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type222 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> argument_list224 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> object_or_collection_initializer226 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> object_or_collection_initializer227 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal223_tree = default(object);
	    object char_literal225_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "object_creation_expression");
		DebugLocation(242, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// .\\cs.g:242:27: ( type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) )
			DebugEnterAlt(1);
			// .\\cs.g:244:2: type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(244, 2);
			PushFollow(Follow._type_in_object_creation_expression1844);
			type222=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type222.Tree);
			DebugLocation(245, 3);
			// .\\cs.g:245:3: ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, decisionCanBacktrack[63]);
			int LA63_0 = input.LA(1);

			if ((LA63_0==68))
			{
				alt63 = 1;
			}
			else if ((LA63_0==197))
			{
				alt63 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:245:5: '(' ( argument_list )? ')' ( object_or_collection_initializer )?
				{
				DebugLocation(245, 5);
				char_literal223=(IToken)Match(input,68,Follow._68_in_object_creation_expression1853); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal223_tree = (object)adaptor.Create(char_literal223);
				adaptor.AddChild(root_0, char_literal223_tree);
				}
				DebugLocation(245, 11);
				// .\\cs.g:245:11: ( argument_list )?
				int alt61=2;
				try { DebugEnterSubRule(61);
				try { DebugEnterDecision(61, decisionCanBacktrack[61]);
				int LA61_0 = input.LA(1);

				if ((LA61_0==Character_literal||LA61_0==FALSE||(LA61_0>=Hex_number && LA61_0<=IDENTIFIER)||(LA61_0>=MINUS && LA61_0<=NUMBER)||LA61_0==Real_literal||LA61_0==STRINGLITERAL||LA61_0==TRUE||LA61_0==Verbatim_string_literal||LA61_0==61||LA61_0==66||(LA61_0>=68 && LA61_0<=69)||(LA61_0>=71 && LA61_0<=72)||LA61_0==75||LA61_0==95||(LA61_0>=97 && LA61_0<=98)||(LA61_0>=100 && LA61_0<=103)||(LA61_0>=105 && LA61_0<=106)||(LA61_0>=109 && LA61_0<=110)||(LA61_0>=114 && LA61_0<=117)||(LA61_0>=119 && LA61_0<=120)||LA61_0==122||LA61_0==126||LA61_0==129||LA61_0==132||LA61_0==135||LA61_0==138||LA61_0==141||(LA61_0>=143 && LA61_0<=144)||(LA61_0>=146 && LA61_0<=148)||(LA61_0>=150 && LA61_0<=152)||(LA61_0>=154 && LA61_0<=155)||LA61_0==157||LA61_0==160||LA61_0==162||(LA61_0>=166 && LA61_0<=167)||LA61_0==169||(LA61_0>=171 && LA61_0<=174)||LA61_0==177||LA61_0==180||(LA61_0>=183 && LA61_0<=187)||(LA61_0>=189 && LA61_0<=190)||LA61_0==194||LA61_0==196||LA61_0==202))
				{
					alt61 = 1;
				}
				} finally { DebugExitDecision(61); }
				switch (alt61)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:245:11: argument_list
					{
					DebugLocation(245, 11);
					PushFollow(Follow._argument_list_in_object_creation_expression1857);
					argument_list224=argument_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, argument_list224.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(61); }

				DebugLocation(245, 28);
				char_literal225=(IToken)Match(input,RPAREN,Follow._RPAREN_in_object_creation_expression1862); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal225_tree = (object)adaptor.Create(char_literal225);
				adaptor.AddChild(root_0, char_literal225_tree);
				}
				DebugLocation(245, 34);
				// .\\cs.g:245:34: ( object_or_collection_initializer )?
				int alt62=2;
				try { DebugEnterSubRule(62);
				try { DebugEnterDecision(62, decisionCanBacktrack[62]);
				int LA62_0 = input.LA(1);

				if ((LA62_0==197))
				{
					alt62 = 1;
				}
				} finally { DebugExitDecision(62); }
				switch (alt62)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:245:34: object_or_collection_initializer
					{
					DebugLocation(245, 34);
					PushFollow(Follow._object_or_collection_initializer_in_object_creation_expression1866);
					object_or_collection_initializer226=object_or_collection_initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, object_or_collection_initializer226.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(62); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:246:7: object_or_collection_initializer
				{
				DebugLocation(246, 7);
				PushFollow(Follow._object_or_collection_initializer_in_object_creation_expression1877);
				object_or_collection_initializer227=object_or_collection_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, object_or_collection_initializer227.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("object_creation_expression", 56);
			LeaveRule("object_creation_expression", 56);
			LeaveRule_object_creation_expression();
	        if (state.backtracking > 0) { Memoize(input, 56, object_creation_expression_StartIndex); }

	    }
	 	DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "object_creation_expression"); }
		return retval;

	}
	// $ANTLR end "object_creation_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_object_or_collection_initializer() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_object_or_collection_initializer() {}

	// $ANTLR start "object_or_collection_initializer"
	// .\\cs.g:248:1: object_or_collection_initializer : '{' ( object_initializer | collection_initializer ) ;
	[GrammarRule("object_or_collection_initializer")]
	private AstParserRuleReturnScope<object, IToken> object_or_collection_initializer()
	{
		EnterRule_object_or_collection_initializer();
		EnterRule("object_or_collection_initializer", 57);
		TraceIn("object_or_collection_initializer", 57);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int object_or_collection_initializer_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal228 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> object_initializer229 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> collection_initializer230 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal228_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "object_or_collection_initializer");
		DebugLocation(248, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// .\\cs.g:248:33: ( '{' ( object_initializer | collection_initializer ) )
			DebugEnterAlt(1);
			// .\\cs.g:249:2: '{' ( object_initializer | collection_initializer )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(249, 2);
			char_literal228=(IToken)Match(input,197,Follow._197_in_object_or_collection_initializer1889); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal228_tree = (object)adaptor.Create(char_literal228);
			adaptor.AddChild(root_0, char_literal228_tree);
			}
			DebugLocation(249, 7);
			// .\\cs.g:249:7: ( object_initializer | collection_initializer )
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, decisionCanBacktrack[64]);
			switch (input.LA(1))
			{
			case 132:
				{
				int LA64_1 = input.LA(2);

				if ((LA64_1==85))
				{
					alt64 = 1;
				}
				else if ((LA64_1==DOT||LA64_1==GT||LA64_1==IDENTIFIER||LA64_1==MINUS||LA64_1==PTR||(LA64_1>=62 && LA64_1<=63)||(LA64_1>=65 && LA64_1<=66)||(LA64_1>=68 && LA64_1<=69)||(LA64_1>=71 && LA64_1<=72)||(LA64_1>=74 && LA64_1<=75)||LA64_1==77||(LA64_1>=80 && LA64_1<=82)||LA64_1==84||(LA64_1>=86 && LA64_1<=91)||LA64_1==93||LA64_1==95||(LA64_1>=97 && LA64_1<=101)||LA64_1==103||(LA64_1>=105 && LA64_1<=106)||LA64_1==109||LA64_1==114||LA64_1==117||(LA64_1>=119 && LA64_1<=120)||LA64_1==122||LA64_1==126||LA64_1==129||LA64_1==132||LA64_1==135||LA64_1==138||(LA64_1>=141 && LA64_1<=144)||(LA64_1>=146 && LA64_1<=148)||(LA64_1>=151 && LA64_1<=152)||LA64_1==154||LA64_1==157||LA64_1==160||LA64_1==162||LA64_1==167||LA64_1==169||(LA64_1>=171 && LA64_1<=173)||LA64_1==177||LA64_1==183||(LA64_1>=185 && LA64_1<=186)||(LA64_1>=189 && LA64_1<=190)||LA64_1==192||LA64_1==194||LA64_1==196||LA64_1==198||(LA64_1>=200 && LA64_1<=201)))
				{
					alt64 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 64, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 74:
			case 201:
				{
				alt64 = 1;
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 68:
			case 69:
			case 71:
			case 72:
			case 75:
			case 102:
			case 103:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 119:
			case 129:
			case 138:
			case 146:
			case 150:
			case 151:
			case 169:
			case 173:
			case 174:
			case 177:
			case 180:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 197:
			case 202:
				{
				alt64 = 2;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA64_4 = input.LA(2);

				if ((LA64_4==85))
				{
					alt64 = 1;
				}
				else if ((LA64_4==DOT||LA64_4==GT||LA64_4==MINUS||LA64_4==PTR||(LA64_4>=62 && LA64_4<=63)||(LA64_4>=65 && LA64_4<=66)||(LA64_4>=68 && LA64_4<=69)||(LA64_4>=71 && LA64_4<=72)||(LA64_4>=74 && LA64_4<=75)||LA64_4==77||(LA64_4>=80 && LA64_4<=82)||LA64_4==84||(LA64_4>=86 && LA64_4<=91)||LA64_4==93||LA64_4==99||LA64_4==142||LA64_4==198||(LA64_4>=200 && LA64_4<=201)))
				{
					alt64 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 64, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:249:8: object_initializer
				{
				DebugLocation(249, 8);
				PushFollow(Follow._object_initializer_in_object_or_collection_initializer1893);
				object_initializer229=object_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, object_initializer229.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:250:5: collection_initializer
				{
				DebugLocation(250, 5);
				PushFollow(Follow._collection_initializer_in_object_or_collection_initializer1900);
				collection_initializer230=collection_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, collection_initializer230.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("object_or_collection_initializer", 57);
			LeaveRule("object_or_collection_initializer", 57);
			LeaveRule_object_or_collection_initializer();
	        if (state.backtracking > 0) { Memoize(input, 57, object_or_collection_initializer_StartIndex); }

	    }
	 	DebugLocation(250, 28);
		} finally { DebugExitRule(GrammarFileName, "object_or_collection_initializer"); }
		return retval;

	}
	// $ANTLR end "object_or_collection_initializer"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_collection_initializer() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_collection_initializer() {}

	// $ANTLR start "collection_initializer"
	// .\\cs.g:251:1: collection_initializer : element_initializer_list ( ',' )? '}' ;
	[GrammarRule("collection_initializer")]
	private AstParserRuleReturnScope<object, IToken> collection_initializer()
	{
		EnterRule_collection_initializer();
		EnterRule("collection_initializer", 58);
		TraceIn("collection_initializer", 58);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int collection_initializer_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal232 = default(IToken);
	    IToken char_literal233 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> element_initializer_list231 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal232_tree = default(object);
	    object char_literal233_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "collection_initializer");
		DebugLocation(251, 39);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// .\\cs.g:251:23: ( element_initializer_list ( ',' )? '}' )
			DebugEnterAlt(1);
			// .\\cs.g:252:2: element_initializer_list ( ',' )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(252, 2);
			PushFollow(Follow._element_initializer_list_in_collection_initializer1910);
			element_initializer_list231=element_initializer_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, element_initializer_list231.Tree);
			DebugLocation(252, 29);
			// .\\cs.g:252:29: ( ',' )?
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, decisionCanBacktrack[65]);
			int LA65_0 = input.LA(1);

			if ((LA65_0==74))
			{
				alt65 = 1;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:252:29: ','
				{
				DebugLocation(252, 29);
				char_literal232=(IToken)Match(input,74,Follow._74_in_collection_initializer1914); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal232_tree = (object)adaptor.Create(char_literal232);
				adaptor.AddChild(root_0, char_literal232_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(65); }

			DebugLocation(252, 36);
			char_literal233=(IToken)Match(input,201,Follow._201_in_collection_initializer1919); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal233_tree = (object)adaptor.Create(char_literal233);
			adaptor.AddChild(root_0, char_literal233_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("collection_initializer", 58);
			LeaveRule("collection_initializer", 58);
			LeaveRule_collection_initializer();
	        if (state.backtracking > 0) { Memoize(input, 58, collection_initializer_StartIndex); }

	    }
	 	DebugLocation(252, 39);
		} finally { DebugExitRule(GrammarFileName, "collection_initializer"); }
		return retval;

	}
	// $ANTLR end "collection_initializer"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_element_initializer_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_element_initializer_list() {}

	// $ANTLR start "element_initializer_list"
	// .\\cs.g:253:1: element_initializer_list : element_initializer ( ',' element_initializer )* ;
	[GrammarRule("element_initializer_list")]
	private AstParserRuleReturnScope<object, IToken> element_initializer_list()
	{
		EnterRule_element_initializer_list();
		EnterRule("element_initializer_list", 59);
		TraceIn("element_initializer_list", 59);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int element_initializer_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal235 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> element_initializer234 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> element_initializer236 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal235_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "element_initializer_list");
		DebugLocation(253, 49);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// .\\cs.g:253:25: ( element_initializer ( ',' element_initializer )* )
			DebugEnterAlt(1);
			// .\\cs.g:254:2: element_initializer ( ',' element_initializer )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(254, 2);
			PushFollow(Follow._element_initializer_in_element_initializer_list1928);
			element_initializer234=element_initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, element_initializer234.Tree);
			DebugLocation(254, 23);
			// .\\cs.g:254:23: ( ',' element_initializer )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, decisionCanBacktrack[66]);
				int LA66_0 = input.LA(1);

				if ((LA66_0==74))
				{
					int LA66_1 = input.LA(2);

					if ((LA66_1==Character_literal||LA66_1==FALSE||(LA66_1>=Hex_number && LA66_1<=IDENTIFIER)||(LA66_1>=MINUS && LA66_1<=NUMBER)||LA66_1==Real_literal||LA66_1==STRINGLITERAL||LA66_1==TRUE||LA66_1==Verbatim_string_literal||LA66_1==61||LA66_1==66||(LA66_1>=68 && LA66_1<=69)||(LA66_1>=71 && LA66_1<=72)||LA66_1==75||LA66_1==95||(LA66_1>=97 && LA66_1<=98)||(LA66_1>=100 && LA66_1<=103)||(LA66_1>=105 && LA66_1<=106)||(LA66_1>=109 && LA66_1<=110)||(LA66_1>=114 && LA66_1<=117)||(LA66_1>=119 && LA66_1<=120)||LA66_1==122||LA66_1==126||LA66_1==129||LA66_1==132||LA66_1==135||LA66_1==138||LA66_1==141||(LA66_1>=143 && LA66_1<=144)||(LA66_1>=146 && LA66_1<=148)||(LA66_1>=150 && LA66_1<=152)||LA66_1==154||LA66_1==157||LA66_1==160||LA66_1==162||LA66_1==167||LA66_1==169||(LA66_1>=171 && LA66_1<=174)||LA66_1==177||LA66_1==180||(LA66_1>=183 && LA66_1<=187)||(LA66_1>=189 && LA66_1<=190)||LA66_1==194||(LA66_1>=196 && LA66_1<=197)||LA66_1==202))
					{
						alt66 = 1;
					}


				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:254:24: ',' element_initializer
					{
					DebugLocation(254, 24);
					char_literal235=(IToken)Match(input,74,Follow._74_in_element_initializer_list1932); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal235_tree = (object)adaptor.Create(char_literal235);
					adaptor.AddChild(root_0, char_literal235_tree);
					}
					DebugLocation(254, 28);
					PushFollow(Follow._element_initializer_in_element_initializer_list1934);
					element_initializer236=element_initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, element_initializer236.Tree);

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("element_initializer_list", 59);
			LeaveRule("element_initializer_list", 59);
			LeaveRule_element_initializer_list();
	        if (state.backtracking > 0) { Memoize(input, 59, element_initializer_list_StartIndex); }

	    }
	 	DebugLocation(254, 49);
		} finally { DebugExitRule(GrammarFileName, "element_initializer_list"); }
		return retval;

	}
	// $ANTLR end "element_initializer_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_element_initializer() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_element_initializer() {}

	// $ANTLR start "element_initializer"
	// .\\cs.g:255:1: element_initializer : ( non_assignment_expression | '{' expression_list '}' );
	[GrammarRule("element_initializer")]
	private AstParserRuleReturnScope<object, IToken> element_initializer()
	{
		EnterRule_element_initializer();
		EnterRule("element_initializer", 60);
		TraceIn("element_initializer", 60);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int element_initializer_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal238 = default(IToken);
	    IToken char_literal240 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> non_assignment_expression237 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list239 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal238_tree = default(object);
	    object char_literal240_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "element_initializer");
		DebugLocation(255, 31);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// .\\cs.g:255:20: ( non_assignment_expression | '{' expression_list '}' )
			int alt67=2;
			try { DebugEnterDecision(67, decisionCanBacktrack[67]);
			int LA67_0 = input.LA(1);

			if ((LA67_0==Character_literal||LA67_0==FALSE||(LA67_0>=Hex_number && LA67_0<=IDENTIFIER)||(LA67_0>=MINUS && LA67_0<=NUMBER)||LA67_0==Real_literal||LA67_0==STRINGLITERAL||LA67_0==TRUE||LA67_0==Verbatim_string_literal||LA67_0==61||LA67_0==66||(LA67_0>=68 && LA67_0<=69)||(LA67_0>=71 && LA67_0<=72)||LA67_0==75||LA67_0==95||(LA67_0>=97 && LA67_0<=98)||(LA67_0>=100 && LA67_0<=103)||(LA67_0>=105 && LA67_0<=106)||(LA67_0>=109 && LA67_0<=110)||(LA67_0>=114 && LA67_0<=117)||(LA67_0>=119 && LA67_0<=120)||LA67_0==122||LA67_0==126||LA67_0==129||LA67_0==132||LA67_0==135||LA67_0==138||LA67_0==141||(LA67_0>=143 && LA67_0<=144)||(LA67_0>=146 && LA67_0<=148)||(LA67_0>=150 && LA67_0<=152)||LA67_0==154||LA67_0==157||LA67_0==160||LA67_0==162||LA67_0==167||LA67_0==169||(LA67_0>=171 && LA67_0<=174)||LA67_0==177||LA67_0==180||(LA67_0>=183 && LA67_0<=187)||(LA67_0>=189 && LA67_0<=190)||LA67_0==194||LA67_0==196||LA67_0==202))
			{
				alt67 = 1;
			}
			else if ((LA67_0==197))
			{
				alt67 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:256:2: non_assignment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(256, 2);
				PushFollow(Follow._non_assignment_expression_in_element_initializer1945);
				non_assignment_expression237=non_assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, non_assignment_expression237.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:257:4: '{' expression_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(257, 4);
				char_literal238=(IToken)Match(input,197,Follow._197_in_element_initializer1951); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal238_tree = (object)adaptor.Create(char_literal238);
				adaptor.AddChild(root_0, char_literal238_tree);
				}
				DebugLocation(257, 10);
				PushFollow(Follow._expression_list_in_element_initializer1955);
				expression_list239=expression_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_list239.Tree);
				DebugLocation(257, 28);
				char_literal240=(IToken)Match(input,201,Follow._201_in_element_initializer1959); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal240_tree = (object)adaptor.Create(char_literal240);
				adaptor.AddChild(root_0, char_literal240_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("element_initializer", 60);
			LeaveRule("element_initializer", 60);
			LeaveRule_element_initializer();
	        if (state.backtracking > 0) { Memoize(input, 60, element_initializer_StartIndex); }

	    }
	 	DebugLocation(257, 31);
		} finally { DebugExitRule(GrammarFileName, "element_initializer"); }
		return retval;

	}
	// $ANTLR end "element_initializer"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_object_initializer() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_object_initializer() {}

	// $ANTLR start "object_initializer"
	// .\\cs.g:264:1: object_initializer : ( member_initializer_list )? ( ',' )? '}' ;
	[GrammarRule("object_initializer")]
	private AstParserRuleReturnScope<object, IToken> object_initializer()
	{
		EnterRule_object_initializer();
		EnterRule("object_initializer", 61);
		TraceIn("object_initializer", 61);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int object_initializer_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal242 = default(IToken);
	    IToken char_literal243 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> member_initializer_list241 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal242_tree = default(object);
	    object char_literal243_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "object_initializer");
		DebugLocation(264, 39);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// .\\cs.g:264:19: ( ( member_initializer_list )? ( ',' )? '}' )
			DebugEnterAlt(1);
			// .\\cs.g:265:2: ( member_initializer_list )? ( ',' )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(265, 2);
			// .\\cs.g:265:2: ( member_initializer_list )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, decisionCanBacktrack[68]);
			int LA68_0 = input.LA(1);

			if ((LA68_0==IDENTIFIER||LA68_0==95||(LA68_0>=97 && LA68_0<=98)||(LA68_0>=100 && LA68_0<=101)||LA68_0==105||LA68_0==117||LA68_0==120||LA68_0==122||LA68_0==126||LA68_0==132||LA68_0==135||LA68_0==141||(LA68_0>=143 && LA68_0<=144)||(LA68_0>=147 && LA68_0<=148)||LA68_0==152||LA68_0==154||LA68_0==157||LA68_0==160||LA68_0==162||LA68_0==167||(LA68_0>=171 && LA68_0<=172)||LA68_0==183||LA68_0==190||LA68_0==194||LA68_0==196))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:265:2: member_initializer_list
				{
				DebugLocation(265, 2);
				PushFollow(Follow._member_initializer_list_in_object_initializer1974);
				member_initializer_list241=member_initializer_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, member_initializer_list241.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(68); }

			DebugLocation(265, 29);
			// .\\cs.g:265:29: ( ',' )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, decisionCanBacktrack[69]);
			int LA69_0 = input.LA(1);

			if ((LA69_0==74))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:265:29: ','
				{
				DebugLocation(265, 29);
				char_literal242=(IToken)Match(input,74,Follow._74_in_object_initializer1979); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal242_tree = (object)adaptor.Create(char_literal242);
				adaptor.AddChild(root_0, char_literal242_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(265, 36);
			char_literal243=(IToken)Match(input,201,Follow._201_in_object_initializer1984); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal243_tree = (object)adaptor.Create(char_literal243);
			adaptor.AddChild(root_0, char_literal243_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("object_initializer", 61);
			LeaveRule("object_initializer", 61);
			LeaveRule_object_initializer();
	        if (state.backtracking > 0) { Memoize(input, 61, object_initializer_StartIndex); }

	    }
	 	DebugLocation(265, 39);
		} finally { DebugExitRule(GrammarFileName, "object_initializer"); }
		return retval;

	}
	// $ANTLR end "object_initializer"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_member_initializer_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_member_initializer_list() {}

	// $ANTLR start "member_initializer_list"
	// .\\cs.g:266:1: member_initializer_list : member_initializer ( ',' member_initializer ) ;
	[GrammarRule("member_initializer_list")]
	private AstParserRuleReturnScope<object, IToken> member_initializer_list()
	{
		EnterRule_member_initializer_list();
		EnterRule("member_initializer_list", 62);
		TraceIn("member_initializer_list", 62);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int member_initializer_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal245 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> member_initializer244 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> member_initializer246 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal245_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "member_initializer_list");
		DebugLocation(266, 46);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// .\\cs.g:266:24: ( member_initializer ( ',' member_initializer ) )
			DebugEnterAlt(1);
			// .\\cs.g:267:2: member_initializer ( ',' member_initializer )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(267, 2);
			PushFollow(Follow._member_initializer_in_member_initializer_list1993);
			member_initializer244=member_initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, member_initializer244.Tree);
			DebugLocation(267, 22);
			// .\\cs.g:267:22: ( ',' member_initializer )
			DebugEnterAlt(1);
			// .\\cs.g:267:23: ',' member_initializer
			{
			DebugLocation(267, 23);
			char_literal245=(IToken)Match(input,74,Follow._74_in_member_initializer_list1997); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal245_tree = (object)adaptor.Create(char_literal245);
			adaptor.AddChild(root_0, char_literal245_tree);
			}
			DebugLocation(267, 27);
			PushFollow(Follow._member_initializer_in_member_initializer_list1999);
			member_initializer246=member_initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, member_initializer246.Tree);

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("member_initializer_list", 62);
			LeaveRule("member_initializer_list", 62);
			LeaveRule_member_initializer_list();
	        if (state.backtracking > 0) { Memoize(input, 62, member_initializer_list_StartIndex); }

	    }
	 	DebugLocation(267, 46);
		} finally { DebugExitRule(GrammarFileName, "member_initializer_list"); }
		return retval;

	}
	// $ANTLR end "member_initializer_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_member_initializer() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_member_initializer() {}

	// $ANTLR start "member_initializer"
	// .\\cs.g:268:1: member_initializer : identifier '=' initializer_value ;
	[GrammarRule("member_initializer")]
	private AstParserRuleReturnScope<object, IToken> member_initializer()
	{
		EnterRule_member_initializer();
		EnterRule("member_initializer", 63);
		TraceIn("member_initializer", 63);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int member_initializer_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal248 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier247 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> initializer_value249 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal248_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "member_initializer");
		DebugLocation(268, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// .\\cs.g:268:19: ( identifier '=' initializer_value )
			DebugEnterAlt(1);
			// .\\cs.g:269:2: identifier '=' initializer_value
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(269, 2);
			PushFollow(Follow._identifier_in_member_initializer2009);
			identifier247=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier247.Tree);
			DebugLocation(269, 15);
			char_literal248=(IToken)Match(input,85,Follow._85_in_member_initializer2013); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal248_tree = (object)adaptor.Create(char_literal248);
			adaptor.AddChild(root_0, char_literal248_tree);
			}
			DebugLocation(269, 21);
			PushFollow(Follow._initializer_value_in_member_initializer2017);
			initializer_value249=initializer_value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, initializer_value249.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("member_initializer", 63);
			LeaveRule("member_initializer", 63);
			LeaveRule_member_initializer();
	        if (state.backtracking > 0) { Memoize(input, 63, member_initializer_StartIndex); }

	    }
	 	DebugLocation(269, 38);
		} finally { DebugExitRule(GrammarFileName, "member_initializer"); }
		return retval;

	}
	// $ANTLR end "member_initializer"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_initializer_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_initializer_value() {}

	// $ANTLR start "initializer_value"
	// .\\cs.g:270:1: initializer_value : ( expression | object_or_collection_initializer );
	[GrammarRule("initializer_value")]
	private AstParserRuleReturnScope<object, IToken> initializer_value()
	{
		EnterRule_initializer_value();
		EnterRule("initializer_value", 64);
		TraceIn("initializer_value", 64);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int initializer_value_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression250 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> object_or_collection_initializer251 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "initializer_value");
		DebugLocation(270, 36);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// .\\cs.g:270:18: ( expression | object_or_collection_initializer )
			int alt70=2;
			try { DebugEnterDecision(70, decisionCanBacktrack[70]);
			int LA70_0 = input.LA(1);

			if ((LA70_0==Character_literal||LA70_0==FALSE||(LA70_0>=Hex_number && LA70_0<=IDENTIFIER)||(LA70_0>=MINUS && LA70_0<=NUMBER)||LA70_0==Real_literal||LA70_0==STRINGLITERAL||LA70_0==TRUE||LA70_0==Verbatim_string_literal||LA70_0==61||LA70_0==66||(LA70_0>=68 && LA70_0<=69)||(LA70_0>=71 && LA70_0<=72)||LA70_0==75||LA70_0==95||(LA70_0>=97 && LA70_0<=98)||(LA70_0>=100 && LA70_0<=103)||(LA70_0>=105 && LA70_0<=106)||(LA70_0>=109 && LA70_0<=110)||(LA70_0>=114 && LA70_0<=117)||(LA70_0>=119 && LA70_0<=120)||LA70_0==122||LA70_0==126||LA70_0==129||LA70_0==132||LA70_0==135||LA70_0==138||LA70_0==141||(LA70_0>=143 && LA70_0<=144)||(LA70_0>=146 && LA70_0<=148)||(LA70_0>=150 && LA70_0<=152)||LA70_0==154||LA70_0==157||LA70_0==160||LA70_0==162||LA70_0==167||LA70_0==169||(LA70_0>=171 && LA70_0<=174)||LA70_0==177||LA70_0==180||(LA70_0>=183 && LA70_0<=187)||(LA70_0>=189 && LA70_0<=190)||LA70_0==194||LA70_0==196||LA70_0==202))
			{
				alt70 = 1;
			}
			else if ((LA70_0==197))
			{
				alt70 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 70, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:271:2: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(271, 2);
				PushFollow(Follow._expression_in_initializer_value2026);
				expression250=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression250.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:272:4: object_or_collection_initializer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(272, 4);
				PushFollow(Follow._object_or_collection_initializer_in_initializer_value2032);
				object_or_collection_initializer251=object_or_collection_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, object_or_collection_initializer251.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initializer_value", 64);
			LeaveRule("initializer_value", 64);
			LeaveRule_initializer_value();
	        if (state.backtracking > 0) { Memoize(input, 64, initializer_value_StartIndex); }

	    }
	 	DebugLocation(272, 36);
		} finally { DebugExitRule(GrammarFileName, "initializer_value"); }
		return retval;

	}
	// $ANTLR end "initializer_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_typeof_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_typeof_expression() {}

	// $ANTLR start "typeof_expression"
	// .\\cs.g:276:1: typeof_expression : 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')' ;
	[GrammarRule("typeof_expression")]
	private AstParserRuleReturnScope<object, IToken> typeof_expression()
	{
		EnterRule_typeof_expression();
		EnterRule("typeof_expression", 65);
		TraceIn("typeof_expression", 65);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int typeof_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal252 = default(IToken);
	    IToken char_literal253 = default(IToken);
	    IToken string_literal256 = default(IToken);
	    IToken char_literal257 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> unbound_type_name254 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type255 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal252_tree = default(object);
	    object char_literal253_tree = default(object);
	    object string_literal256_tree = default(object);
	    object char_literal257_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "typeof_expression");
		DebugLocation(276, 23);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// .\\cs.g:276:18: ( 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')' )
			DebugEnterAlt(1);
			// .\\cs.g:277:2: 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(277, 2);
			string_literal252=(IToken)Match(input,184,Follow._184_in_typeof_expression2044); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal252_tree = (object)adaptor.Create(string_literal252);
			adaptor.AddChild(root_0, string_literal252_tree);
			}
			DebugLocation(277, 13);
			char_literal253=(IToken)Match(input,68,Follow._68_in_typeof_expression2048); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal253_tree = (object)adaptor.Create(char_literal253);
			adaptor.AddChild(root_0, char_literal253_tree);
			}
			DebugLocation(277, 19);
			// .\\cs.g:277:19: ( ( unbound_type_name )=> unbound_type_name | type | 'void' )
			int alt71=3;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, decisionCanBacktrack[71]);
			try
			{
				alt71 = dfa71.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:277:20: ( unbound_type_name )=> unbound_type_name
				{
				DebugLocation(277, 43);
				PushFollow(Follow._unbound_type_name_in_typeof_expression2059);
				unbound_type_name254=unbound_type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unbound_type_name254.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:278:10: type
				{
				DebugLocation(278, 10);
				PushFollow(Follow._type_in_typeof_expression2070);
				type255=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type255.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:279:10: 'void'
				{
				DebugLocation(279, 10);
				string_literal256=(IToken)Match(input,192,Follow._192_in_typeof_expression2082); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal256_tree = (object)adaptor.Create(string_literal256);
				adaptor.AddChild(root_0, string_literal256_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(71); }

			DebugLocation(279, 20);
			char_literal257=(IToken)Match(input,RPAREN,Follow._RPAREN_in_typeof_expression2087); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal257_tree = (object)adaptor.Create(char_literal257);
			adaptor.AddChild(root_0, char_literal257_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeof_expression", 65);
			LeaveRule("typeof_expression", 65);
			LeaveRule_typeof_expression();
	        if (state.backtracking > 0) { Memoize(input, 65, typeof_expression_StartIndex); }

	    }
	 	DebugLocation(279, 23);
		} finally { DebugExitRule(GrammarFileName, "typeof_expression"); }
		return retval;

	}
	// $ANTLR end "typeof_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_unbound_type_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_unbound_type_name() {}

	// $ANTLR start "unbound_type_name"
	// .\\cs.g:284:1: unbound_type_name : unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier ;
	[GrammarRule("unbound_type_name")]
	private AstParserRuleReturnScope<object, IToken> unbound_type_name()
	{
		EnterRule_unbound_type_name();
		EnterRule("unbound_type_name", 66);
		TraceIn("unbound_type_name", 66);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int unbound_type_name_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> unbound_type_name_start258 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> generic_dimension_specifier259 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> unbound_type_name_part260 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> unbound_type_name_part261 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> generic_dimension_specifier262 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "unbound_type_name");
		DebugLocation(284, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// .\\cs.g:284:18: ( unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier )
			DebugEnterAlt(1);
			// .\\cs.g:286:2: unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(286, 2);
			PushFollow(Follow._unbound_type_name_start_in_unbound_type_name2102);
			unbound_type_name_start258=unbound_type_name_start();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unbound_type_name_start258.Tree);
			DebugLocation(287, 3);
			// .\\cs.g:287:3: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*
			try { DebugEnterSubRule(72);
			while (true)
			{
				int alt72=3;
				try { DebugEnterDecision(72, decisionCanBacktrack[72]);
				try
				{
					alt72 = dfa72.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(72); }
				switch ( alt72 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:287:4: ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part )
					{
					DebugLocation(287, 4);
					// .\\cs.g:287:4: ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part )
					DebugEnterAlt(1);
					// .\\cs.g:287:5: ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part
					{
					DebugLocation(287, 44);
					PushFollow(Follow._generic_dimension_specifier_in_unbound_type_name2121);
					generic_dimension_specifier259=generic_dimension_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, generic_dimension_specifier259.Tree);
					DebugLocation(287, 74);
					PushFollow(Follow._unbound_type_name_part_in_unbound_type_name2125);
					unbound_type_name_part260=unbound_type_name_part();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unbound_type_name_part260.Tree);

					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:288:5: unbound_type_name_part
					{
					DebugLocation(288, 5);
					PushFollow(Follow._unbound_type_name_part_in_unbound_type_name2132);
					unbound_type_name_part261=unbound_type_name_part();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unbound_type_name_part261.Tree);

					}
					break;

				default:
					goto loop72;
				}
			}

			loop72:
				;

			} finally { DebugExitSubRule(72); }

			DebugLocation(289, 4);
			PushFollow(Follow._generic_dimension_specifier_in_unbound_type_name2142);
			generic_dimension_specifier262=generic_dimension_specifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, generic_dimension_specifier262.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unbound_type_name", 66);
			LeaveRule("unbound_type_name", 66);
			LeaveRule_unbound_type_name();
	        if (state.backtracking > 0) { Memoize(input, 66, unbound_type_name_StartIndex); }

	    }
	 	DebugLocation(290, 1);
		} finally { DebugExitRule(GrammarFileName, "unbound_type_name"); }
		return retval;

	}
	// $ANTLR end "unbound_type_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_unbound_type_name_start() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_unbound_type_name_start() {}

	// $ANTLR start "unbound_type_name_start"
	// .\\cs.g:292:1: unbound_type_name_start : identifier ( '::' identifier )? ;
	[GrammarRule("unbound_type_name_start")]
	private AstParserRuleReturnScope<object, IToken> unbound_type_name_start()
	{
		EnterRule_unbound_type_name_start();
		EnterRule("unbound_type_name_start", 67);
		TraceIn("unbound_type_name_start", 67);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int unbound_type_name_start_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal264 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier263 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier265 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal264_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "unbound_type_name_start");
		DebugLocation(292, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// .\\cs.g:292:24: ( identifier ( '::' identifier )? )
			DebugEnterAlt(1);
			// .\\cs.g:293:2: identifier ( '::' identifier )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(293, 2);
			PushFollow(Follow._identifier_in_unbound_type_name_start2152);
			identifier263=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier263.Tree);
			DebugLocation(293, 13);
			// .\\cs.g:293:13: ( '::' identifier )?
			int alt73=2;
			try { DebugEnterSubRule(73);
			try { DebugEnterDecision(73, decisionCanBacktrack[73]);
			int LA73_0 = input.LA(1);

			if ((LA73_0==80))
			{
				alt73 = 1;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:293:14: '::' identifier
				{
				DebugLocation(293, 14);
				string_literal264=(IToken)Match(input,80,Follow._80_in_unbound_type_name_start2155); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal264_tree = (object)adaptor.Create(string_literal264);
				adaptor.AddChild(root_0, string_literal264_tree);
				}
				DebugLocation(293, 19);
				PushFollow(Follow._identifier_in_unbound_type_name_start2157);
				identifier265=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier265.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(73); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unbound_type_name_start", 67);
			LeaveRule("unbound_type_name_start", 67);
			LeaveRule_unbound_type_name_start();
	        if (state.backtracking > 0) { Memoize(input, 67, unbound_type_name_start_StartIndex); }

	    }
	 	DebugLocation(293, 30);
		} finally { DebugExitRule(GrammarFileName, "unbound_type_name_start"); }
		return retval;

	}
	// $ANTLR end "unbound_type_name_start"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_unbound_type_name_part() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_unbound_type_name_part() {}

	// $ANTLR start "unbound_type_name_part"
	// .\\cs.g:294:1: unbound_type_name_part : '.' identifier ;
	[GrammarRule("unbound_type_name_part")]
	private AstParserRuleReturnScope<object, IToken> unbound_type_name_part()
	{
		EnterRule_unbound_type_name_part();
		EnterRule("unbound_type_name_part", 68);
		TraceIn("unbound_type_name_part", 68);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int unbound_type_name_part_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal266 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier267 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal266_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "unbound_type_name_part");
		DebugLocation(294, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// .\\cs.g:294:23: ( '.' identifier )
			DebugEnterAlt(1);
			// .\\cs.g:295:2: '.' identifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(295, 2);
			char_literal266=(IToken)Match(input,DOT,Follow._DOT_in_unbound_type_name_part2166); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal266_tree = (object)adaptor.Create(char_literal266);
			adaptor.AddChild(root_0, char_literal266_tree);
			}
			DebugLocation(295, 8);
			PushFollow(Follow._identifier_in_unbound_type_name_part2170);
			identifier267=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier267.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unbound_type_name_part", 68);
			LeaveRule("unbound_type_name_part", 68);
			LeaveRule_unbound_type_name_part();
	        if (state.backtracking > 0) { Memoize(input, 68, unbound_type_name_part_StartIndex); }

	    }
	 	DebugLocation(295, 17);
		} finally { DebugExitRule(GrammarFileName, "unbound_type_name_part"); }
		return retval;

	}
	// $ANTLR end "unbound_type_name_part"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_generic_dimension_specifier() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_generic_dimension_specifier() {}

	// $ANTLR start "generic_dimension_specifier"
	// .\\cs.g:296:1: generic_dimension_specifier : '<' ( commas )? '>' ;
	[GrammarRule("generic_dimension_specifier")]
	private AstParserRuleReturnScope<object, IToken> generic_dimension_specifier()
	{
		EnterRule_generic_dimension_specifier();
		EnterRule("generic_dimension_specifier", 69);
		TraceIn("generic_dimension_specifier", 69);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int generic_dimension_specifier_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal268 = default(IToken);
	    IToken char_literal270 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> commas269 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal268_tree = default(object);
	    object char_literal270_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "generic_dimension_specifier");
		DebugLocation(296, 21);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// .\\cs.g:296:28: ( '<' ( commas )? '>' )
			DebugEnterAlt(1);
			// .\\cs.g:297:2: '<' ( commas )? '>'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(297, 2);
			char_literal268=(IToken)Match(input,81,Follow._81_in_generic_dimension_specifier2178); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal268_tree = (object)adaptor.Create(char_literal268);
			adaptor.AddChild(root_0, char_literal268_tree);
			}
			DebugLocation(297, 8);
			// .\\cs.g:297:8: ( commas )?
			int alt74=2;
			try { DebugEnterSubRule(74);
			try { DebugEnterDecision(74, decisionCanBacktrack[74]);
			int LA74_0 = input.LA(1);

			if ((LA74_0==74))
			{
				alt74 = 1;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:297:8: commas
				{
				DebugLocation(297, 8);
				PushFollow(Follow._commas_in_generic_dimension_specifier2182);
				commas269=commas();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commas269.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(74); }

			DebugLocation(297, 18);
			char_literal270=(IToken)Match(input,GT,Follow._GT_in_generic_dimension_specifier2187); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal270_tree = (object)adaptor.Create(char_literal270);
			adaptor.AddChild(root_0, char_literal270_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_dimension_specifier", 69);
			LeaveRule("generic_dimension_specifier", 69);
			LeaveRule_generic_dimension_specifier();
	        if (state.backtracking > 0) { Memoize(input, 69, generic_dimension_specifier_StartIndex); }

	    }
	 	DebugLocation(297, 21);
		} finally { DebugExitRule(GrammarFileName, "generic_dimension_specifier"); }
		return retval;

	}
	// $ANTLR end "generic_dimension_specifier"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_commas() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_commas() {}

	// $ANTLR start "commas"
	// .\\cs.g:298:1: commas : ( ',' )+ ;
	[GrammarRule("commas")]
	private AstParserRuleReturnScope<object, IToken> commas()
	{
		EnterRule_commas();
		EnterRule("commas", 70);
		TraceIn("commas", 70);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int commas_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal271 = default(IToken);

	    object char_literal271_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "commas");
		DebugLocation(298, 6);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// .\\cs.g:298:7: ( ( ',' )+ )
			DebugEnterAlt(1);
			// .\\cs.g:299:2: ( ',' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(299, 2);
			// .\\cs.g:299:2: ( ',' )+
			int cnt75=0;
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, decisionCanBacktrack[75]);
				int LA75_0 = input.LA(1);

				if ((LA75_0==74))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch (alt75)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:299:2: ','
					{
					DebugLocation(299, 2);
					char_literal271=(IToken)Match(input,74,Follow._74_in_commas2196); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal271_tree = (object)adaptor.Create(char_literal271);
					adaptor.AddChild(root_0, char_literal271_tree);
					}

					}
					break;

				default:
					if (cnt75 >= 1)
						goto loop75;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee75 = new EarlyExitException( 75, input );
					DebugRecognitionException(eee75);
					throw eee75;
				}
				cnt75++;
			}
			loop75:
				;

			} finally { DebugExitSubRule(75); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commas", 70);
			LeaveRule("commas", 70);
			LeaveRule_commas();
	        if (state.backtracking > 0) { Memoize(input, 70, commas_StartIndex); }

	    }
	 	DebugLocation(299, 6);
		} finally { DebugExitRule(GrammarFileName, "commas"); }
		return retval;

	}
	// $ANTLR end "commas"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_type_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_type_name() {}

	// $ANTLR start "type_name"
	// .\\cs.g:305:1: type_name : namespace_or_type_name ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<object, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 71);
		TraceIn("type_name", 71);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int type_name_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> namespace_or_type_name272 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(305, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// .\\cs.g:305:10: ( namespace_or_type_name )
			DebugEnterAlt(1);
			// .\\cs.g:306:2: namespace_or_type_name
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(306, 2);
			PushFollow(Follow._namespace_or_type_name_in_type_name2212);
			namespace_or_type_name272=namespace_or_type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_or_type_name272.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 71);
			LeaveRule("type_name", 71);
			LeaveRule_type_name();
	        if (state.backtracking > 0) { Memoize(input, 71, type_name_StartIndex); }

	    }
	 	DebugLocation(306, 24);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_namespace_or_type_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_namespace_or_type_name() {}

	// $ANTLR start "namespace_or_type_name"
	// .\\cs.g:307:1: namespace_or_type_name : type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )* ;
	[GrammarRule("namespace_or_type_name")]
	private AstParserRuleReturnScope<object, IToken> namespace_or_type_name()
	{
		EnterRule_namespace_or_type_name();
		EnterRule("namespace_or_type_name", 72);
		TraceIn("namespace_or_type_name", 72);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int namespace_or_type_name_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal274 = default(IToken);
	    IToken char_literal276 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type_or_generic273 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_or_generic275 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_or_generic277 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal274_tree = default(object);
	    object char_literal276_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "namespace_or_type_name");
		DebugLocation(307, 69);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// .\\cs.g:307:23: ( type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )* )
			DebugEnterAlt(1);
			// .\\cs.g:308:3: type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(308, 3);
			PushFollow(Follow._type_or_generic_in_namespace_or_type_name2221);
			type_or_generic273=type_or_generic();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_or_generic273.Tree);
			DebugLocation(308, 21);
			// .\\cs.g:308:21: ( '::' type_or_generic )?
			int alt76=2;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, decisionCanBacktrack[76]);
			int LA76_0 = input.LA(1);

			if ((LA76_0==80))
			{
				alt76 = 1;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:308:22: '::' type_or_generic
				{
				DebugLocation(308, 22);
				string_literal274=(IToken)Match(input,80,Follow._80_in_namespace_or_type_name2226); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal274_tree = (object)adaptor.Create(string_literal274);
				adaptor.AddChild(root_0, string_literal274_tree);
				}
				DebugLocation(308, 27);
				PushFollow(Follow._type_or_generic_in_namespace_or_type_name2228);
				type_or_generic275=type_or_generic();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_or_generic275.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(76); }

			DebugLocation(308, 45);
			// .\\cs.g:308:45: ( '.' type_or_generic )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=2;
				try { DebugEnterDecision(77, decisionCanBacktrack[77]);
				int LA77_0 = input.LA(1);

				if ((LA77_0==DOT))
				{
					int LA77_2 = input.LA(2);

					if ((LA77_2==IDENTIFIER||LA77_2==95||(LA77_2>=97 && LA77_2<=98)||(LA77_2>=100 && LA77_2<=101)||LA77_2==105||LA77_2==117||LA77_2==120||LA77_2==122||LA77_2==126||LA77_2==132||LA77_2==135||LA77_2==141||(LA77_2>=143 && LA77_2<=144)||(LA77_2>=147 && LA77_2<=148)||LA77_2==152||LA77_2==154||LA77_2==157||LA77_2==160||LA77_2==162||LA77_2==167||(LA77_2>=171 && LA77_2<=172)||LA77_2==183||LA77_2==190||LA77_2==194||LA77_2==196))
					{
						alt77 = 1;
					}


				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:308:46: '.' type_or_generic
					{
					DebugLocation(308, 46);
					char_literal276=(IToken)Match(input,DOT,Follow._DOT_in_namespace_or_type_name2233); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal276_tree = (object)adaptor.Create(char_literal276);
					adaptor.AddChild(root_0, char_literal276_tree);
					}
					DebugLocation(308, 52);
					PushFollow(Follow._type_or_generic_in_namespace_or_type_name2237);
					type_or_generic277=type_or_generic();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_or_generic277.Tree);

					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_or_type_name", 72);
			LeaveRule("namespace_or_type_name", 72);
			LeaveRule_namespace_or_type_name();
	        if (state.backtracking > 0) { Memoize(input, 72, namespace_or_type_name_StartIndex); }

	    }
	 	DebugLocation(308, 69);
		} finally { DebugExitRule(GrammarFileName, "namespace_or_type_name"); }
		return retval;

	}
	// $ANTLR end "namespace_or_type_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_type_or_generic() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_type_or_generic() {}

	// $ANTLR start "type_or_generic"
	// .\\cs.g:309:1: type_or_generic : ( ( identifier '<' )=> identifier generic_argument_list | identifier );
	[GrammarRule("type_or_generic")]
	private AstParserRuleReturnScope<object, IToken> type_or_generic()
	{
		EnterRule_type_or_generic();
		EnterRule("type_or_generic", 73);
		TraceIn("type_or_generic", 73);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int type_or_generic_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> identifier278 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> generic_argument_list279 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier280 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "type_or_generic");
		DebugLocation(309, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }

			// .\\cs.g:309:16: ( ( identifier '<' )=> identifier generic_argument_list | identifier )
			int alt78=2;
			try { DebugEnterDecision(78, decisionCanBacktrack[78]);
			int LA78_0 = input.LA(1);

			if ((LA78_0==IDENTIFIER||LA78_0==95||(LA78_0>=97 && LA78_0<=98)||(LA78_0>=100 && LA78_0<=101)||LA78_0==105||LA78_0==117||LA78_0==120||LA78_0==122||LA78_0==126||LA78_0==132||LA78_0==135||LA78_0==141||(LA78_0>=143 && LA78_0<=144)||(LA78_0>=147 && LA78_0<=148)||LA78_0==152||LA78_0==154||LA78_0==157||LA78_0==160||LA78_0==162||LA78_0==167||(LA78_0>=171 && LA78_0<=172)||LA78_0==183||LA78_0==190||LA78_0==194||LA78_0==196))
			{
				int LA78_1 = input.LA(2);

				if ((EvaluatePredicate(synpred15_cs_fragment)))
				{
					alt78 = 1;
				}
				else if ((true))
				{
					alt78 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 78, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 78, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:310:2: ( identifier '<' )=> identifier generic_argument_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(310, 24);
				PushFollow(Follow._identifier_in_type_or_generic2257);
				identifier278=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier278.Tree);
				DebugLocation(310, 37);
				PushFollow(Follow._generic_argument_list_in_type_or_generic2261);
				generic_argument_list279=generic_argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_argument_list279.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:311:4: identifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(311, 4);
				PushFollow(Follow._identifier_in_type_or_generic2266);
				identifier280=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier280.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_or_generic", 73);
			LeaveRule("type_or_generic", 73);
			LeaveRule_type_or_generic();
	        if (state.backtracking > 0) { Memoize(input, 73, type_or_generic_StartIndex); }

	    }
	 	DebugLocation(311, 14);
		} finally { DebugExitRule(GrammarFileName, "type_or_generic"); }
		return retval;

	}
	// $ANTLR end "type_or_generic"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_qid() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_qid() {}

	// $ANTLR start "qid"
	// .\\cs.g:313:1: qid : qid_start ( qid_part )* ;
	[GrammarRule("qid")]
	private AstParserRuleReturnScope<object, IToken> qid()
	{
		EnterRule_qid();
		EnterRule("qid", 74);
		TraceIn("qid", 74);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int qid_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> qid_start281 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> qid_part282 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "qid");
		DebugLocation(313, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }

			// .\\cs.g:313:4: ( qid_start ( qid_part )* )
			DebugEnterAlt(1);
			// .\\cs.g:314:2: qid_start ( qid_part )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(314, 2);
			PushFollow(Follow._qid_start_in_qid2277);
			qid_start281=qid_start();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qid_start281.Tree);
			DebugLocation(314, 14);
			// .\\cs.g:314:14: ( qid_part )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, decisionCanBacktrack[79]);
				int LA79_0 = input.LA(1);

				if ((LA79_0==DOT))
				{
					int LA79_2 = input.LA(2);

					if ((LA79_2==IDENTIFIER||LA79_2==95||(LA79_2>=97 && LA79_2<=98)||(LA79_2>=100 && LA79_2<=101)||LA79_2==105||LA79_2==117||LA79_2==120||LA79_2==122||LA79_2==126||LA79_2==132||LA79_2==135||LA79_2==141||(LA79_2>=143 && LA79_2<=144)||(LA79_2>=147 && LA79_2<=148)||LA79_2==152||LA79_2==154||LA79_2==157||LA79_2==160||LA79_2==162||LA79_2==167||(LA79_2>=171 && LA79_2<=172)||LA79_2==183||LA79_2==190||LA79_2==194||LA79_2==196))
					{
						alt79 = 1;
					}


				}
				else if ((LA79_0==PTR))
				{
					alt79 = 1;
				}


				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:314:14: qid_part
					{
					DebugLocation(314, 14);
					PushFollow(Follow._qid_part_in_qid2281);
					qid_part282=qid_part();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qid_part282.Tree);

					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qid", 74);
			LeaveRule("qid", 74);
			LeaveRule_qid();
	        if (state.backtracking > 0) { Memoize(input, 74, qid_StartIndex); }

	    }
	 	DebugLocation(315, 1);
		} finally { DebugExitRule(GrammarFileName, "qid"); }
		return retval;

	}
	// $ANTLR end "qid"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_qid_start() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_qid_start() {}

	// $ANTLR start "qid_start"
	// .\\cs.g:316:1: qid_start : ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | literal );
	[GrammarRule("qid_start")]
	private AstParserRuleReturnScope<object, IToken> qid_start()
	{
		EnterRule_qid_start();
		EnterRule("qid_start", 75);
		TraceIn("qid_start", 75);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int qid_start_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal287 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> predefined_type283 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier284 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> generic_argument_list285 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier286 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier288 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> literal289 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal287_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "qid_start");
		DebugLocation(316, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return retval; }

			// .\\cs.g:316:10: ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | literal )
			int alt81=4;
			try { DebugEnterDecision(81, decisionCanBacktrack[81]);
			switch (input.LA(1))
			{
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				alt81 = 1;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA81_2 = input.LA(2);

				if ((LA81_2==81) && (EvaluatePredicate(synpred16_cs_fragment)))
				{
					alt81 = 2;
				}
				else if ((LA81_2==DOT||LA81_2==PTR||LA81_2==68||LA81_2==80||LA81_2==197))
				{
					alt81 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 81, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
				{
				alt81 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 81, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:317:2: predefined_type
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(317, 2);
				PushFollow(Follow._predefined_type_in_qid_start2291);
				predefined_type283=predefined_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type283.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:318:4: ( identifier '<' )=> identifier generic_argument_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(318, 27);
				PushFollow(Follow._identifier_in_qid_start2307);
				identifier284=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier284.Tree);
				DebugLocation(318, 40);
				PushFollow(Follow._generic_argument_list_in_qid_start2311);
				generic_argument_list285=generic_argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_argument_list285.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:321:4: identifier ( '::' identifier )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(321, 4);
				PushFollow(Follow._identifier_in_qid_start2318);
				identifier286=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier286.Tree);
				DebugLocation(321, 17);
				// .\\cs.g:321:17: ( '::' identifier )?
				int alt80=2;
				try { DebugEnterSubRule(80);
				try { DebugEnterDecision(80, decisionCanBacktrack[80]);
				int LA80_0 = input.LA(1);

				if ((LA80_0==80))
				{
					alt80 = 1;
				}
				} finally { DebugExitDecision(80); }
				switch (alt80)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:321:18: '::' identifier
					{
					DebugLocation(321, 18);
					string_literal287=(IToken)Match(input,80,Follow._80_in_qid_start2323); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal287_tree = (object)adaptor.Create(string_literal287);
					adaptor.AddChild(root_0, string_literal287_tree);
					}
					DebugLocation(321, 25);
					PushFollow(Follow._identifier_in_qid_start2327);
					identifier288=identifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, identifier288.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(80); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// .\\cs.g:322:4: literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(322, 4);
				PushFollow(Follow._literal_in_qid_start2334);
				literal289=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal289.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qid_start", 75);
			LeaveRule("qid_start", 75);
			LeaveRule_qid_start();
	        if (state.backtracking > 0) { Memoize(input, 75, qid_start_StartIndex); }

	    }
	 	DebugLocation(323, 1);
		} finally { DebugExitRule(GrammarFileName, "qid_start"); }
		return retval;

	}
	// $ANTLR end "qid_start"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_qid_part() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_qid_part() {}

	// $ANTLR start "qid_part"
	// .\\cs.g:326:1: qid_part : access_identifier ;
	[GrammarRule("qid_part")]
	private AstParserRuleReturnScope<object, IToken> qid_part()
	{
		EnterRule_qid_part();
		EnterRule("qid_part", 76);
		TraceIn("qid_part", 76);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int qid_part_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> access_identifier290 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "qid_part");
		DebugLocation(326, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return retval; }

			// .\\cs.g:326:9: ( access_identifier )
			DebugEnterAlt(1);
			// .\\cs.g:327:2: access_identifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(327, 2);
			PushFollow(Follow._access_identifier_in_qid_part2348);
			access_identifier290=access_identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, access_identifier290.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qid_part", 76);
			LeaveRule("qid_part", 76);
			LeaveRule_qid_part();
	        if (state.backtracking > 0) { Memoize(input, 76, qid_part_StartIndex); }

	    }
	 	DebugLocation(327, 19);
		} finally { DebugExitRule(GrammarFileName, "qid_part"); }
		return retval;

	}
	// $ANTLR end "qid_part"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_generic_argument_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_generic_argument_list() {}

	// $ANTLR start "generic_argument_list"
	// .\\cs.g:329:1: generic_argument_list : '<' type_arguments '>' ;
	[GrammarRule("generic_argument_list")]
	private AstParserRuleReturnScope<object, IToken> generic_argument_list()
	{
		EnterRule_generic_argument_list();
		EnterRule("generic_argument_list", 77);
		TraceIn("generic_argument_list", 77);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int generic_argument_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal291 = default(IToken);
	    IToken char_literal293 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type_arguments292 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal291_tree = default(object);
	    object char_literal293_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "generic_argument_list");
		DebugLocation(329, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return retval; }

			// .\\cs.g:329:22: ( '<' type_arguments '>' )
			DebugEnterAlt(1);
			// .\\cs.g:330:2: '<' type_arguments '>'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(330, 2);
			char_literal291=(IToken)Match(input,81,Follow._81_in_generic_argument_list2358); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal291_tree = (object)adaptor.Create(char_literal291);
			adaptor.AddChild(root_0, char_literal291_tree);
			}
			DebugLocation(330, 8);
			PushFollow(Follow._type_arguments_in_generic_argument_list2362);
			type_arguments292=type_arguments();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_arguments292.Tree);
			DebugLocation(330, 25);
			char_literal293=(IToken)Match(input,GT,Follow._GT_in_generic_argument_list2366); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal293_tree = (object)adaptor.Create(char_literal293);
			adaptor.AddChild(root_0, char_literal293_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_argument_list", 77);
			LeaveRule("generic_argument_list", 77);
			LeaveRule_generic_argument_list();
	        if (state.backtracking > 0) { Memoize(input, 77, generic_argument_list_StartIndex); }

	    }
	 	DebugLocation(330, 28);
		} finally { DebugExitRule(GrammarFileName, "generic_argument_list"); }
		return retval;

	}
	// $ANTLR end "generic_argument_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_type_arguments() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_type_arguments() {}

	// $ANTLR start "type_arguments"
	// .\\cs.g:331:1: type_arguments : type ( ',' type )* ;
	[GrammarRule("type_arguments")]
	private AstParserRuleReturnScope<object, IToken> type_arguments()
	{
		EnterRule_type_arguments();
		EnterRule("type_arguments", 78);
		TraceIn("type_arguments", 78);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int type_arguments_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal295 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type294 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type296 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal295_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "type_arguments");
		DebugLocation(331, 18);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return retval; }

			// .\\cs.g:331:15: ( type ( ',' type )* )
			DebugEnterAlt(1);
			// .\\cs.g:332:2: type ( ',' type )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(332, 2);
			PushFollow(Follow._type_in_type_arguments2375);
			type294=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type294.Tree);
			DebugLocation(332, 7);
			// .\\cs.g:332:7: ( ',' type )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, decisionCanBacktrack[82]);
				int LA82_0 = input.LA(1);

				if ((LA82_0==74))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:332:8: ',' type
					{
					DebugLocation(332, 8);
					char_literal295=(IToken)Match(input,74,Follow._74_in_type_arguments2378); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal295_tree = (object)adaptor.Create(char_literal295);
					adaptor.AddChild(root_0, char_literal295_tree);
					}
					DebugLocation(332, 12);
					PushFollow(Follow._type_in_type_arguments2380);
					type296=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type296.Tree);

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_arguments", 78);
			LeaveRule("type_arguments", 78);
			LeaveRule_type_arguments();
	        if (state.backtracking > 0) { Memoize(input, 78, type_arguments_StartIndex); }

	    }
	 	DebugLocation(332, 18);
		} finally { DebugExitRule(GrammarFileName, "type_arguments"); }
		return retval;

	}
	// $ANTLR end "type_arguments"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_type() {}

	// $ANTLR start "type"
	// .\\cs.g:334:1: type : ( ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )* | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' ) | ( predefined_type | type_name ) | 'void' ( '*' )+ );
	[GrammarRule("type")]
	private AstParserRuleReturnScope<object, IToken> type()
	{
		EnterRule_type();
		EnterRule("type", 79);
		TraceIn("type", 79);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int type_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal300 = default(IToken);
	    IToken char_literal303 = default(IToken);
	    IToken char_literal304 = default(IToken);
	    IToken string_literal307 = default(IToken);
	    IToken char_literal308 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> predefined_type297 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_name298 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> rank_specifiers299 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> predefined_type301 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_name302 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> predefined_type305 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_name306 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal300_tree = default(object);
	    object char_literal303_tree = default(object);
	    object char_literal304_tree = default(object);
	    object string_literal307_tree = default(object);
	    object char_literal308_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(334, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return retval; }

			// .\\cs.g:334:5: ( ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )* | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' ) | ( predefined_type | type_name ) | 'void' ( '*' )+ )
			int alt90=4;
			try { DebugEnterDecision(90, decisionCanBacktrack[90]);
			switch (input.LA(1))
			{
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				int LA90_1 = input.LA(2);

				if ((EvaluatePredicate(synpred17_cs_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred18_cs_fragment)))
				{
					alt90 = 2;
				}
				else if ((true))
				{
					alt90 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred17_cs_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred18_cs_fragment)))
				{
					alt90 = 2;
				}
				else if ((true))
				{
					alt90 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 192:
				{
				alt90 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:335:4: ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(335, 56);
				// .\\cs.g:335:56: ( predefined_type | type_name )
				int alt83=2;
				try { DebugEnterSubRule(83);
				try { DebugEnterDecision(83, decisionCanBacktrack[83]);
				int LA83_0 = input.LA(1);

				if ((LA83_0==103||LA83_0==106||LA83_0==109||LA83_0==114||LA83_0==119||LA83_0==129||LA83_0==138||LA83_0==146||LA83_0==151||LA83_0==169||LA83_0==173||LA83_0==177||(LA83_0>=185 && LA83_0<=186)||LA83_0==189))
				{
					alt83 = 1;
				}
				else if ((LA83_0==IDENTIFIER||LA83_0==95||(LA83_0>=97 && LA83_0<=98)||(LA83_0>=100 && LA83_0<=101)||LA83_0==105||LA83_0==117||LA83_0==120||LA83_0==122||LA83_0==126||LA83_0==132||LA83_0==135||LA83_0==141||(LA83_0>=143 && LA83_0<=144)||(LA83_0>=147 && LA83_0<=148)||LA83_0==152||LA83_0==154||LA83_0==157||LA83_0==160||LA83_0==162||LA83_0==167||(LA83_0>=171 && LA83_0<=172)||LA83_0==183||LA83_0==190||LA83_0==194||LA83_0==196))
				{
					alt83 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(83); }
				switch (alt83)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:335:57: predefined_type
					{
					DebugLocation(335, 57);
					PushFollow(Follow._predefined_type_in_type2409);
					predefined_type297=predefined_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type297.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:335:75: type_name
					{
					DebugLocation(335, 75);
					PushFollow(Follow._type_name_in_type2413);
					type_name298=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_name298.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(83); }

				DebugLocation(335, 88);
				PushFollow(Follow._rank_specifiers_in_type2418);
				rank_specifiers299=rank_specifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, rank_specifiers299.Tree);
				DebugLocation(335, 106);
				// .\\cs.g:335:106: ( '*' )*
				try { DebugEnterSubRule(84);
				while (true)
				{
					int alt84=2;
					try { DebugEnterDecision(84, decisionCanBacktrack[84]);
					int LA84_0 = input.LA(1);

					if ((LA84_0==69))
					{
						alt84 = 1;
					}


					} finally { DebugExitDecision(84); }
					switch ( alt84 )
					{
					case 1:
						DebugEnterAlt(1);
						// .\\cs.g:335:106: '*'
						{
						DebugLocation(335, 106);
						char_literal300=(IToken)Match(input,69,Follow._69_in_type2422); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal300_tree = (object)adaptor.Create(char_literal300);
						adaptor.AddChild(root_0, char_literal300_tree);
						}

						}
						break;

					default:
						goto loop84;
					}
				}

				loop84:
					;

				} finally { DebugExitSubRule(84); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:336:4: ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(336, 53);
				// .\\cs.g:336:53: ( predefined_type | type_name )
				int alt85=2;
				try { DebugEnterSubRule(85);
				try { DebugEnterDecision(85, decisionCanBacktrack[85]);
				int LA85_0 = input.LA(1);

				if ((LA85_0==103||LA85_0==106||LA85_0==109||LA85_0==114||LA85_0==119||LA85_0==129||LA85_0==138||LA85_0==146||LA85_0==151||LA85_0==169||LA85_0==173||LA85_0==177||(LA85_0>=185 && LA85_0<=186)||LA85_0==189))
				{
					alt85 = 1;
				}
				else if ((LA85_0==IDENTIFIER||LA85_0==95||(LA85_0>=97 && LA85_0<=98)||(LA85_0>=100 && LA85_0<=101)||LA85_0==105||LA85_0==117||LA85_0==120||LA85_0==122||LA85_0==126||LA85_0==132||LA85_0==135||LA85_0==141||(LA85_0>=143 && LA85_0<=144)||(LA85_0>=147 && LA85_0<=148)||LA85_0==152||LA85_0==154||LA85_0==157||LA85_0==160||LA85_0==162||LA85_0==167||(LA85_0>=171 && LA85_0<=172)||LA85_0==183||LA85_0==190||LA85_0==194||LA85_0==196))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(85); }
				switch (alt85)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:336:54: predefined_type
					{
					DebugLocation(336, 54);
					PushFollow(Follow._predefined_type_in_type2451);
					predefined_type301=predefined_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type301.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:336:72: type_name
					{
					DebugLocation(336, 72);
					PushFollow(Follow._type_name_in_type2455);
					type_name302=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_name302.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(85); }

				DebugLocation(336, 85);
				// .\\cs.g:336:85: ( ( '*' )+ | '?' )
				int alt87=2;
				try { DebugEnterSubRule(87);
				try { DebugEnterDecision(87, decisionCanBacktrack[87]);
				int LA87_0 = input.LA(1);

				if ((LA87_0==69))
				{
					alt87 = 1;
				}
				else if ((LA87_0==89))
				{
					alt87 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:336:86: ( '*' )+
					{
					DebugLocation(336, 86);
					// .\\cs.g:336:86: ( '*' )+
					int cnt86=0;
					try { DebugEnterSubRule(86);
					while (true)
					{
						int alt86=2;
						try { DebugEnterDecision(86, decisionCanBacktrack[86]);
						int LA86_0 = input.LA(1);

						if ((LA86_0==69))
						{
							alt86 = 1;
						}


						} finally { DebugExitDecision(86); }
						switch (alt86)
						{
						case 1:
							DebugEnterAlt(1);
							// .\\cs.g:336:86: '*'
							{
							DebugLocation(336, 86);
							char_literal303=(IToken)Match(input,69,Follow._69_in_type2461); if (state.failed) return retval;
							if (state.backtracking == 0) {
							char_literal303_tree = (object)adaptor.Create(char_literal303);
							adaptor.AddChild(root_0, char_literal303_tree);
							}

							}
							break;

						default:
							if (cnt86 >= 1)
								goto loop86;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee86 = new EarlyExitException( 86, input );
							DebugRecognitionException(eee86);
							throw eee86;
						}
						cnt86++;
					}
					loop86:
						;

					} finally { DebugExitSubRule(86); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:336:93: '?'
					{
					DebugLocation(336, 93);
					char_literal304=(IToken)Match(input,89,Follow._89_in_type2466); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal304_tree = (object)adaptor.Create(char_literal304);
					adaptor.AddChild(root_0, char_literal304_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(87); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:337:4: ( predefined_type | type_name )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(337, 4);
				// .\\cs.g:337:4: ( predefined_type | type_name )
				int alt88=2;
				try { DebugEnterSubRule(88);
				try { DebugEnterDecision(88, decisionCanBacktrack[88]);
				int LA88_0 = input.LA(1);

				if ((LA88_0==103||LA88_0==106||LA88_0==109||LA88_0==114||LA88_0==119||LA88_0==129||LA88_0==138||LA88_0==146||LA88_0==151||LA88_0==169||LA88_0==173||LA88_0==177||(LA88_0>=185 && LA88_0<=186)||LA88_0==189))
				{
					alt88 = 1;
				}
				else if ((LA88_0==IDENTIFIER||LA88_0==95||(LA88_0>=97 && LA88_0<=98)||(LA88_0>=100 && LA88_0<=101)||LA88_0==105||LA88_0==117||LA88_0==120||LA88_0==122||LA88_0==126||LA88_0==132||LA88_0==135||LA88_0==141||(LA88_0>=143 && LA88_0<=144)||(LA88_0>=147 && LA88_0<=148)||LA88_0==152||LA88_0==154||LA88_0==157||LA88_0==160||LA88_0==162||LA88_0==167||(LA88_0>=171 && LA88_0<=172)||LA88_0==183||LA88_0==190||LA88_0==194||LA88_0==196))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(88); }
				switch (alt88)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:337:5: predefined_type
					{
					DebugLocation(337, 5);
					PushFollow(Follow._predefined_type_in_type2473);
					predefined_type305=predefined_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type305.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:337:23: type_name
					{
					DebugLocation(337, 23);
					PushFollow(Follow._type_name_in_type2477);
					type_name306=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_name306.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(88); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// .\\cs.g:338:4: 'void' ( '*' )+
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(338, 4);
				string_literal307=(IToken)Match(input,192,Follow._192_in_type2483); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal307_tree = (object)adaptor.Create(string_literal307);
				adaptor.AddChild(root_0, string_literal307_tree);
				}
				DebugLocation(338, 11);
				// .\\cs.g:338:11: ( '*' )+
				int cnt89=0;
				try { DebugEnterSubRule(89);
				while (true)
				{
					int alt89=2;
					try { DebugEnterDecision(89, decisionCanBacktrack[89]);
					int LA89_0 = input.LA(1);

					if ((LA89_0==69))
					{
						alt89 = 1;
					}


					} finally { DebugExitDecision(89); }
					switch (alt89)
					{
					case 1:
						DebugEnterAlt(1);
						// .\\cs.g:338:11: '*'
						{
						DebugLocation(338, 11);
						char_literal308=(IToken)Match(input,69,Follow._69_in_type2485); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal308_tree = (object)adaptor.Create(char_literal308);
						adaptor.AddChild(root_0, char_literal308_tree);
						}

						}
						break;

					default:
						if (cnt89 >= 1)
							goto loop89;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee89 = new EarlyExitException( 89, input );
						DebugRecognitionException(eee89);
						throw eee89;
					}
					cnt89++;
				}
				loop89:
					;

				} finally { DebugExitSubRule(89); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type", 79);
			LeaveRule("type", 79);
			LeaveRule_type();
	        if (state.backtracking > 0) { Memoize(input, 79, type_StartIndex); }

	    }
	 	DebugLocation(339, 1);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return retval;

	}
	// $ANTLR end "type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_non_nullable_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_non_nullable_type() {}

	// $ANTLR start "non_nullable_type"
	// .\\cs.g:340:1: non_nullable_type : ( ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? ) | 'void' ( '*' )+ );
	[GrammarRule("non_nullable_type")]
	private AstParserRuleReturnScope<object, IToken> non_nullable_type()
	{
		EnterRule_non_nullable_type();
		EnterRule("non_nullable_type", 80);
		TraceIn("non_nullable_type", 80);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int non_nullable_type_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal312 = default(IToken);
	    IToken char_literal313 = default(IToken);
	    IToken string_literal314 = default(IToken);
	    IToken char_literal315 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> predefined_type309 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_name310 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> rank_specifiers311 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal312_tree = default(object);
	    object char_literal313_tree = default(object);
	    object string_literal314_tree = default(object);
	    object char_literal315_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "non_nullable_type");
		DebugLocation(340, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return retval; }

			// .\\cs.g:340:18: ( ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? ) | 'void' ( '*' )+ )
			int alt97=2;
			try { DebugEnterDecision(97, decisionCanBacktrack[97]);
			int LA97_0 = input.LA(1);

			if ((LA97_0==IDENTIFIER||LA97_0==95||(LA97_0>=97 && LA97_0<=98)||(LA97_0>=100 && LA97_0<=101)||LA97_0==103||(LA97_0>=105 && LA97_0<=106)||LA97_0==109||LA97_0==114||LA97_0==117||(LA97_0>=119 && LA97_0<=120)||LA97_0==122||LA97_0==126||LA97_0==129||LA97_0==132||LA97_0==135||LA97_0==138||LA97_0==141||(LA97_0>=143 && LA97_0<=144)||(LA97_0>=146 && LA97_0<=148)||(LA97_0>=151 && LA97_0<=152)||LA97_0==154||LA97_0==157||LA97_0==160||LA97_0==162||LA97_0==167||LA97_0==169||(LA97_0>=171 && LA97_0<=173)||LA97_0==177||LA97_0==183||(LA97_0>=185 && LA97_0<=186)||(LA97_0>=189 && LA97_0<=190)||LA97_0==194||LA97_0==196))
			{
				alt97 = 1;
			}
			else if ((LA97_0==192))
			{
				alt97 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 97, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:341:2: ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(341, 2);
				// .\\cs.g:341:2: ( predefined_type | type_name )
				int alt91=2;
				try { DebugEnterSubRule(91);
				try { DebugEnterDecision(91, decisionCanBacktrack[91]);
				int LA91_0 = input.LA(1);

				if ((LA91_0==103||LA91_0==106||LA91_0==109||LA91_0==114||LA91_0==119||LA91_0==129||LA91_0==138||LA91_0==146||LA91_0==151||LA91_0==169||LA91_0==173||LA91_0==177||(LA91_0>=185 && LA91_0<=186)||LA91_0==189))
				{
					alt91 = 1;
				}
				else if ((LA91_0==IDENTIFIER||LA91_0==95||(LA91_0>=97 && LA91_0<=98)||(LA91_0>=100 && LA91_0<=101)||LA91_0==105||LA91_0==117||LA91_0==120||LA91_0==122||LA91_0==126||LA91_0==132||LA91_0==135||LA91_0==141||(LA91_0>=143 && LA91_0<=144)||(LA91_0>=147 && LA91_0<=148)||LA91_0==152||LA91_0==154||LA91_0==157||LA91_0==160||LA91_0==162||LA91_0==167||(LA91_0>=171 && LA91_0<=172)||LA91_0==183||LA91_0==190||LA91_0==194||LA91_0==196))
				{
					alt91 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:341:3: predefined_type
					{
					DebugLocation(341, 3);
					PushFollow(Follow._predefined_type_in_non_nullable_type2496);
					predefined_type309=predefined_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type309.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:341:21: type_name
					{
					DebugLocation(341, 21);
					PushFollow(Follow._type_name_in_non_nullable_type2500);
					type_name310=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_name310.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(91); }

				DebugLocation(342, 3);
				// .\\cs.g:342:3: ( rank_specifiers ( '*' )* | ( ( '*' )+ )? )
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, decisionCanBacktrack[95]);
				int LA95_0 = input.LA(1);

				if ((LA95_0==91))
				{
					alt95 = 1;
				}
				else if ((LA95_0==EOF||LA95_0==GT||LA95_0==IDENTIFIER||LA95_0==RPAREN||LA95_0==SEMI||LA95_0==62||(LA95_0>=65 && LA95_0<=66)||LA95_0==69||LA95_0==74||LA95_0==79||LA95_0==81||LA95_0==84||LA95_0==86||(LA95_0>=88 && LA95_0<=90)||(LA95_0>=92 && LA95_0<=93)||LA95_0==95||(LA95_0>=97 && LA95_0<=101)||LA95_0==105||LA95_0==117||LA95_0==120||LA95_0==122||LA95_0==126||LA95_0==132||LA95_0==135||(LA95_0>=141 && LA95_0<=144)||(LA95_0>=147 && LA95_0<=148)||LA95_0==152||LA95_0==154||LA95_0==157||LA95_0==160||LA95_0==162||LA95_0==167||(LA95_0>=171 && LA95_0<=172)||LA95_0==183||LA95_0==190||LA95_0==194||LA95_0==196||LA95_0==198||(LA95_0>=200 && LA95_0<=201)))
				{
					alt95 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:342:7: rank_specifiers ( '*' )*
					{
					DebugLocation(342, 7);
					PushFollow(Follow._rank_specifiers_in_non_nullable_type2509);
					rank_specifiers311=rank_specifiers();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, rank_specifiers311.Tree);
					DebugLocation(342, 25);
					// .\\cs.g:342:25: ( '*' )*
					try { DebugEnterSubRule(92);
					while (true)
					{
						int alt92=2;
						try { DebugEnterDecision(92, decisionCanBacktrack[92]);
						int LA92_0 = input.LA(1);

						if ((LA92_0==69))
						{
							alt92 = 1;
						}


						} finally { DebugExitDecision(92); }
						switch ( alt92 )
						{
						case 1:
							DebugEnterAlt(1);
							// .\\cs.g:342:25: '*'
							{
							DebugLocation(342, 25);
							char_literal312=(IToken)Match(input,69,Follow._69_in_non_nullable_type2513); if (state.failed) return retval;
							if (state.backtracking == 0) {
							char_literal312_tree = (object)adaptor.Create(char_literal312);
							adaptor.AddChild(root_0, char_literal312_tree);
							}

							}
							break;

						default:
							goto loop92;
						}
					}

					loop92:
						;

					} finally { DebugExitSubRule(92); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:343:6: ( ( '*' )+ )?
					{
					DebugLocation(343, 6);
					// .\\cs.g:343:6: ( ( '*' )+ )?
					int alt94=2;
					try { DebugEnterSubRule(94);
					try { DebugEnterDecision(94, decisionCanBacktrack[94]);
					int LA94_0 = input.LA(1);

					if ((LA94_0==69))
					{
						alt94 = 1;
					}
					} finally { DebugExitDecision(94); }
					switch (alt94)
					{
					case 1:
						DebugEnterAlt(1);
						// .\\cs.g:343:7: ( '*' )+
						{
						DebugLocation(343, 7);
						// .\\cs.g:343:7: ( '*' )+
						int cnt93=0;
						try { DebugEnterSubRule(93);
						while (true)
						{
							int alt93=2;
							try { DebugEnterDecision(93, decisionCanBacktrack[93]);
							int LA93_0 = input.LA(1);

							if ((LA93_0==69))
							{
								alt93 = 1;
							}


							} finally { DebugExitDecision(93); }
							switch (alt93)
							{
							case 1:
								DebugEnterAlt(1);
								// .\\cs.g:343:7: '*'
								{
								DebugLocation(343, 7);
								char_literal313=(IToken)Match(input,69,Follow._69_in_non_nullable_type2522); if (state.failed) return retval;
								if (state.backtracking == 0) {
								char_literal313_tree = (object)adaptor.Create(char_literal313);
								adaptor.AddChild(root_0, char_literal313_tree);
								}

								}
								break;

							default:
								if (cnt93 >= 1)
									goto loop93;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee93 = new EarlyExitException( 93, input );
								DebugRecognitionException(eee93);
								throw eee93;
							}
							cnt93++;
						}
						loop93:
							;

						} finally { DebugExitSubRule(93); }


						}
						break;

					}
					} finally { DebugExitSubRule(94); }


					}
					break;

				}
				} finally { DebugExitSubRule(95); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:345:4: 'void' ( '*' )+
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(345, 4);
				string_literal314=(IToken)Match(input,192,Follow._192_in_non_nullable_type2534); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal314_tree = (object)adaptor.Create(string_literal314);
				adaptor.AddChild(root_0, string_literal314_tree);
				}
				DebugLocation(345, 13);
				// .\\cs.g:345:13: ( '*' )+
				int cnt96=0;
				try { DebugEnterSubRule(96);
				while (true)
				{
					int alt96=2;
					try { DebugEnterDecision(96, decisionCanBacktrack[96]);
					int LA96_0 = input.LA(1);

					if ((LA96_0==69))
					{
						alt96 = 1;
					}


					} finally { DebugExitDecision(96); }
					switch (alt96)
					{
					case 1:
						DebugEnterAlt(1);
						// .\\cs.g:345:13: '*'
						{
						DebugLocation(345, 13);
						char_literal315=(IToken)Match(input,69,Follow._69_in_non_nullable_type2538); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal315_tree = (object)adaptor.Create(char_literal315);
						adaptor.AddChild(root_0, char_literal315_tree);
						}

						}
						break;

					default:
						if (cnt96 >= 1)
							goto loop96;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee96 = new EarlyExitException( 96, input );
						DebugRecognitionException(eee96);
						throw eee96;
					}
					cnt96++;
				}
				loop96:
					;

				} finally { DebugExitSubRule(96); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("non_nullable_type", 80);
			LeaveRule("non_nullable_type", 80);
			LeaveRule_non_nullable_type();
	        if (state.backtracking > 0) { Memoize(input, 80, non_nullable_type_StartIndex); }

	    }
	 	DebugLocation(345, 17);
		} finally { DebugExitRule(GrammarFileName, "non_nullable_type"); }
		return retval;

	}
	// $ANTLR end "non_nullable_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_non_array_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_non_array_type() {}

	// $ANTLR start "non_array_type"
	// .\\cs.g:347:1: non_array_type : type ;
	[GrammarRule("non_array_type")]
	private AstParserRuleReturnScope<object, IToken> non_array_type()
	{
		EnterRule_non_array_type();
		EnterRule("non_array_type", 81);
		TraceIn("non_array_type", 81);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int non_array_type_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> type316 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "non_array_type");
		DebugLocation(347, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 81)) { return retval; }

			// .\\cs.g:347:15: ( type )
			DebugEnterAlt(1);
			// .\\cs.g:348:2: type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(348, 2);
			PushFollow(Follow._type_in_non_array_type2549);
			type316=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type316.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("non_array_type", 81);
			LeaveRule("non_array_type", 81);
			LeaveRule_non_array_type();
	        if (state.backtracking > 0) { Memoize(input, 81, non_array_type_StartIndex); }

	    }
	 	DebugLocation(348, 5);
		} finally { DebugExitRule(GrammarFileName, "non_array_type"); }
		return retval;

	}
	// $ANTLR end "non_array_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_array_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_array_type() {}

	// $ANTLR start "array_type"
	// .\\cs.g:349:1: array_type : type ;
	[GrammarRule("array_type")]
	private AstParserRuleReturnScope<object, IToken> array_type()
	{
		EnterRule_array_type();
		EnterRule("array_type", 82);
		TraceIn("array_type", 82);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int array_type_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> type317 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "array_type");
		DebugLocation(349, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 82)) { return retval; }

			// .\\cs.g:349:11: ( type )
			DebugEnterAlt(1);
			// .\\cs.g:350:2: type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(350, 2);
			PushFollow(Follow._type_in_array_type2556);
			type317=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type317.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("array_type", 82);
			LeaveRule("array_type", 82);
			LeaveRule_array_type();
	        if (state.backtracking > 0) { Memoize(input, 82, array_type_StartIndex); }

	    }
	 	DebugLocation(350, 5);
		} finally { DebugExitRule(GrammarFileName, "array_type"); }
		return retval;

	}
	// $ANTLR end "array_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_unmanaged_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_unmanaged_type() {}

	// $ANTLR start "unmanaged_type"
	// .\\cs.g:351:1: unmanaged_type : type ;
	[GrammarRule("unmanaged_type")]
	private AstParserRuleReturnScope<object, IToken> unmanaged_type()
	{
		EnterRule_unmanaged_type();
		EnterRule("unmanaged_type", 83);
		TraceIn("unmanaged_type", 83);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int unmanaged_type_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> type318 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "unmanaged_type");
		DebugLocation(351, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 83)) { return retval; }

			// .\\cs.g:351:15: ( type )
			DebugEnterAlt(1);
			// .\\cs.g:352:2: type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(352, 2);
			PushFollow(Follow._type_in_unmanaged_type2563);
			type318=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type318.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unmanaged_type", 83);
			LeaveRule("unmanaged_type", 83);
			LeaveRule_unmanaged_type();
	        if (state.backtracking > 0) { Memoize(input, 83, unmanaged_type_StartIndex); }

	    }
	 	DebugLocation(352, 5);
		} finally { DebugExitRule(GrammarFileName, "unmanaged_type"); }
		return retval;

	}
	// $ANTLR end "unmanaged_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_class_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_class_type() {}

	// $ANTLR start "class_type"
	// .\\cs.g:353:1: class_type : type ;
	[GrammarRule("class_type")]
	private AstParserRuleReturnScope<object, IToken> class_type()
	{
		EnterRule_class_type();
		EnterRule("class_type", 84);
		TraceIn("class_type", 84);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int class_type_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> type319 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "class_type");
		DebugLocation(353, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 84)) { return retval; }

			// .\\cs.g:353:11: ( type )
			DebugEnterAlt(1);
			// .\\cs.g:354:2: type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(354, 2);
			PushFollow(Follow._type_in_class_type2570);
			type319=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type319.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_type", 84);
			LeaveRule("class_type", 84);
			LeaveRule_class_type();
	        if (state.backtracking > 0) { Memoize(input, 84, class_type_StartIndex); }

	    }
	 	DebugLocation(354, 5);
		} finally { DebugExitRule(GrammarFileName, "class_type"); }
		return retval;

	}
	// $ANTLR end "class_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_pointer_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_pointer_type() {}

	// $ANTLR start "pointer_type"
	// .\\cs.g:355:1: pointer_type : type ;
	[GrammarRule("pointer_type")]
	private AstParserRuleReturnScope<object, IToken> pointer_type()
	{
		EnterRule_pointer_type();
		EnterRule("pointer_type", 85);
		TraceIn("pointer_type", 85);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int pointer_type_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> type320 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "pointer_type");
		DebugLocation(355, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 85)) { return retval; }

			// .\\cs.g:355:13: ( type )
			DebugEnterAlt(1);
			// .\\cs.g:356:2: type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(356, 2);
			PushFollow(Follow._type_in_pointer_type2577);
			type320=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type320.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pointer_type", 85);
			LeaveRule("pointer_type", 85);
			LeaveRule_pointer_type();
	        if (state.backtracking > 0) { Memoize(input, 85, pointer_type_StartIndex); }

	    }
	 	DebugLocation(356, 5);
		} finally { DebugExitRule(GrammarFileName, "pointer_type"); }
		return retval;

	}
	// $ANTLR end "pointer_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_block() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_block() {}

	// $ANTLR start "block"
	// .\\cs.g:362:1: block : ( ';' | '{' ( statement_list )? '}' );
	[GrammarRule("block")]
	private AstParserRuleReturnScope<object, IToken> block()
	{
		EnterRule_block();
		EnterRule("block", 86);
		TraceIn("block", 86);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int block_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal321 = default(IToken);
	    IToken char_literal322 = default(IToken);
	    IToken char_literal324 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> statement_list323 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal321_tree = default(object);
	    object char_literal322_tree = default(object);
	    object char_literal324_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(362, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 86)) { return retval; }

			// .\\cs.g:362:6: ( ';' | '{' ( statement_list )? '}' )
			int alt99=2;
			try { DebugEnterDecision(99, decisionCanBacktrack[99]);
			int LA99_0 = input.LA(1);

			if ((LA99_0==SEMI))
			{
				alt99 = 1;
			}
			else if ((LA99_0==197))
			{
				alt99 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 99, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:363:2: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(363, 2);
				char_literal321=(IToken)Match(input,SEMI,Follow._SEMI_in_block2589); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal321_tree = (object)adaptor.Create(char_literal321);
				adaptor.AddChild(root_0, char_literal321_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:364:4: '{' ( statement_list )? '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(364, 4);
				char_literal322=(IToken)Match(input,197,Follow._197_in_block2594); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal322_tree = (object)adaptor.Create(char_literal322);
				adaptor.AddChild(root_0, char_literal322_tree);
				}
				DebugLocation(364, 10);
				// .\\cs.g:364:10: ( statement_list )?
				int alt98=2;
				try { DebugEnterSubRule(98);
				try { DebugEnterDecision(98, decisionCanBacktrack[98]);
				int LA98_0 = input.LA(1);

				if ((LA98_0==Character_literal||LA98_0==FALSE||(LA98_0>=Hex_number && LA98_0<=IF)||(LA98_0>=MINUS && LA98_0<=NUMBER)||LA98_0==Real_literal||(LA98_0>=SEMI && LA98_0<=STRINGLITERAL)||LA98_0==TRUE||(LA98_0>=USING && LA98_0<=Verbatim_string_literal)||LA98_0==61||LA98_0==66||(LA98_0>=68 && LA98_0<=69)||(LA98_0>=71 && LA98_0<=72)||LA98_0==75||LA98_0==95||(LA98_0>=97 && LA98_0<=98)||(LA98_0>=100 && LA98_0<=106)||(LA98_0>=109 && LA98_0<=110)||(LA98_0>=112 && LA98_0<=120)||LA98_0==122||LA98_0==126||(LA98_0>=128 && LA98_0<=132)||(LA98_0>=134 && LA98_0<=135)||LA98_0==138||LA98_0==141||(LA98_0>=143 && LA98_0<=148)||(LA98_0>=150 && LA98_0<=152)||LA98_0==154||LA98_0==157||LA98_0==160||LA98_0==162||(LA98_0>=167 && LA98_0<=169)||(LA98_0>=171 && LA98_0<=174)||LA98_0==177||(LA98_0>=179 && LA98_0<=190)||LA98_0==192||(LA98_0>=194 && LA98_0<=197)||LA98_0==202))
				{
					alt98 = 1;
				}
				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:364:10: statement_list
					{
					DebugLocation(364, 10);
					PushFollow(Follow._statement_list_in_block2598);
					statement_list323=statement_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement_list323.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(98); }

				DebugLocation(364, 28);
				char_literal324=(IToken)Match(input,201,Follow._201_in_block2603); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal324_tree = (object)adaptor.Create(char_literal324);
				adaptor.AddChild(root_0, char_literal324_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 86);
			LeaveRule("block", 86);
			LeaveRule_block();
	        if (state.backtracking > 0) { Memoize(input, 86, block_StartIndex); }

	    }
	 	DebugLocation(364, 30);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_statement_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_statement_list() {}

	// $ANTLR start "statement_list"
	// .\\cs.g:365:1: statement_list : ( statement )+ ;
	[GrammarRule("statement_list")]
	private AstParserRuleReturnScope<object, IToken> statement_list()
	{
		EnterRule_statement_list();
		EnterRule("statement_list", 87);
		TraceIn("statement_list", 87);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int statement_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> statement325 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "statement_list");
		DebugLocation(365, 12);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 87)) { return retval; }

			// .\\cs.g:365:15: ( ( statement )+ )
			DebugEnterAlt(1);
			// .\\cs.g:366:2: ( statement )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(366, 2);
			// .\\cs.g:366:2: ( statement )+
			int cnt100=0;
			try { DebugEnterSubRule(100);
			while (true)
			{
				int alt100=2;
				try { DebugEnterDecision(100, decisionCanBacktrack[100]);
				int LA100_0 = input.LA(1);

				if ((LA100_0==115))
				{
					int LA100_2 = input.LA(2);

					if ((LA100_2==68))
					{
						alt100 = 1;
					}


				}
				else if ((LA100_0==Character_literal||LA100_0==FALSE||(LA100_0>=Hex_number && LA100_0<=IF)||(LA100_0>=MINUS && LA100_0<=NUMBER)||LA100_0==Real_literal||(LA100_0>=SEMI && LA100_0<=STRINGLITERAL)||LA100_0==TRUE||(LA100_0>=USING && LA100_0<=Verbatim_string_literal)||LA100_0==61||LA100_0==66||(LA100_0>=68 && LA100_0<=69)||(LA100_0>=71 && LA100_0<=72)||LA100_0==75||LA100_0==95||(LA100_0>=97 && LA100_0<=98)||(LA100_0>=100 && LA100_0<=106)||(LA100_0>=109 && LA100_0<=110)||(LA100_0>=112 && LA100_0<=114)||(LA100_0>=116 && LA100_0<=120)||LA100_0==122||LA100_0==126||(LA100_0>=128 && LA100_0<=132)||(LA100_0>=134 && LA100_0<=135)||LA100_0==138||LA100_0==141||(LA100_0>=143 && LA100_0<=148)||(LA100_0>=150 && LA100_0<=152)||LA100_0==154||LA100_0==157||LA100_0==160||LA100_0==162||(LA100_0>=167 && LA100_0<=169)||(LA100_0>=171 && LA100_0<=174)||LA100_0==177||(LA100_0>=179 && LA100_0<=190)||LA100_0==192||(LA100_0>=194 && LA100_0<=197)||LA100_0==202))
				{
					alt100 = 1;
				}


				} finally { DebugExitDecision(100); }
				switch (alt100)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:366:2: statement
					{
					DebugLocation(366, 2);
					PushFollow(Follow._statement_in_statement_list2610);
					statement325=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement325.Tree);

					}
					break;

				default:
					if (cnt100 >= 1)
						goto loop100;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee100 = new EarlyExitException( 100, input );
					DebugRecognitionException(eee100);
					throw eee100;
				}
				cnt100++;
			}
			loop100:
				;

			} finally { DebugExitSubRule(100); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement_list", 87);
			LeaveRule("statement_list", 87);
			LeaveRule_statement_list();
	        if (state.backtracking > 0) { Memoize(input, 87, statement_list_StartIndex); }

	    }
	 	DebugLocation(366, 12);
		} finally { DebugExitRule(GrammarFileName, "statement_list"); }
		return retval;

	}
	// $ANTLR end "statement_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// .\\cs.g:371:1: expression : ( ( unary_expression assignment_operator )=> assignment | non_assignment_expression );
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 88);
		TraceIn("expression", 88);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> assignment326 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> non_assignment_expression327 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(371, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 88)) { return retval; }

			// .\\cs.g:371:11: ( ( unary_expression assignment_operator )=> assignment | non_assignment_expression )
			int alt101=2;
			try { DebugEnterDecision(101, decisionCanBacktrack[101]);
			switch (input.LA(1))
			{
			case 68:
				{
				int LA101_1 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 150:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 180:
				{
				int LA101_3 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				int LA101_4 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 132:
				{
				int LA101_5 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 102:
				{
				int LA101_6 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 184:
				{
				int LA101_7 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
				{
				int LA101_8 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 174:
				{
				int LA101_9 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 110:
				{
				int LA101_10 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 187:
				{
				int LA101_11 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 115:
				{
				int LA101_12 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 116:
				{
				int LA101_13 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 13, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 71:
				{
				int LA101_14 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 14, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MINUS:
				{
				int LA101_15 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 15, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 61:
				{
				int LA101_16 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 16, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 202:
				{
				int LA101_17 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 17, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 72:
				{
				int LA101_18 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 18, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 75:
				{
				int LA101_19 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 19, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 69:
				{
				int LA101_20 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 20, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 66:
				{
				int LA101_21 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 21, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA101_22 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 22, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:372:2: ( unary_expression assignment_operator )=> assignment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(372, 46);
				PushFollow(Follow._assignment_in_expression2635);
				assignment326=assignment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment326.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:373:4: non_assignment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(373, 4);
				PushFollow(Follow._non_assignment_expression_in_expression2641);
				non_assignment_expression327=non_assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, non_assignment_expression327.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 88);
			LeaveRule("expression", 88);
			LeaveRule_expression();
	        if (state.backtracking > 0) { Memoize(input, 88, expression_StartIndex); }

	    }
	 	DebugLocation(374, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list() {}

	// $ANTLR start "expression_list"
	// .\\cs.g:375:1: expression_list : expression ( ',' expression )* ;
	[GrammarRule("expression_list")]
	private AstParserRuleReturnScope<object, IToken> expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 89);
		TraceIn("expression_list", 89);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int expression_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal329 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression328 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression330 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal329_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(375, 33);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 89)) { return retval; }

			// .\\cs.g:375:16: ( expression ( ',' expression )* )
			DebugEnterAlt(1);
			// .\\cs.g:376:2: expression ( ',' expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(376, 2);
			PushFollow(Follow._expression_in_expression_list2650);
			expression328=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression328.Tree);
			DebugLocation(376, 14);
			// .\\cs.g:376:14: ( ',' expression )*
			try { DebugEnterSubRule(102);
			while (true)
			{
				int alt102=2;
				try { DebugEnterDecision(102, decisionCanBacktrack[102]);
				int LA102_0 = input.LA(1);

				if ((LA102_0==74))
				{
					alt102 = 1;
				}


				} finally { DebugExitDecision(102); }
				switch ( alt102 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:376:15: ',' expression
					{
					DebugLocation(376, 15);
					char_literal329=(IToken)Match(input,74,Follow._74_in_expression_list2654); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal329_tree = (object)adaptor.Create(char_literal329);
					adaptor.AddChild(root_0, char_literal329_tree);
					}
					DebugLocation(376, 21);
					PushFollow(Follow._expression_in_expression_list2658);
					expression330=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression330.Tree);

					}
					break;

				default:
					goto loop102;
				}
			}

			loop102:
				;

			} finally { DebugExitSubRule(102); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 89);
			LeaveRule("expression_list", 89);
			LeaveRule_expression_list();
	        if (state.backtracking > 0) { Memoize(input, 89, expression_list_StartIndex); }

	    }
	 	DebugLocation(376, 33);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_assignment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_assignment() {}

	// $ANTLR start "assignment"
	// .\\cs.g:377:1: assignment : unary_expression assignment_operator expression ;
	[GrammarRule("assignment")]
	private AstParserRuleReturnScope<object, IToken> assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 90);
		TraceIn("assignment", 90);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int assignment_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> unary_expression331 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> assignment_operator332 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression333 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(377, 53);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 90)) { return retval; }

			// .\\cs.g:377:11: ( unary_expression assignment_operator expression )
			DebugEnterAlt(1);
			// .\\cs.g:378:2: unary_expression assignment_operator expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(378, 2);
			PushFollow(Follow._unary_expression_in_assignment2668);
			unary_expression331=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression331.Tree);
			DebugLocation(378, 21);
			PushFollow(Follow._assignment_operator_in_assignment2672);
			assignment_operator332=assignment_operator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_operator332.Tree);
			DebugLocation(378, 43);
			PushFollow(Follow._expression_in_assignment2676);
			expression333=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression333.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment", 90);
			LeaveRule("assignment", 90);
			LeaveRule_assignment();
	        if (state.backtracking > 0) { Memoize(input, 90, assignment_StartIndex); }

	    }
	 	DebugLocation(378, 53);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_unary_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_unary_expression() {}

	// $ANTLR start "unary_expression"
	// .\\cs.g:379:1: unary_expression : ( ( cast_expression )=> cast_expression | primary_or_array_creation_expression ( '++' )? ( '--' )? | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | pre_increment_expression | pre_decrement_expression | pointer_indirection_expression | addressof_expression );
	[GrammarRule("unary_expression")]
	private AstParserRuleReturnScope<object, IToken> unary_expression()
	{
		EnterRule_unary_expression();
		EnterRule("unary_expression", 91);
		TraceIn("unary_expression", 91);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int unary_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal336 = default(IToken);
	    IToken string_literal337 = default(IToken);
	    IToken char_literal338 = default(IToken);
	    IToken char_literal340 = default(IToken);
	    IToken char_literal342 = default(IToken);
	    IToken char_literal344 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> cast_expression334 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> primary_or_array_creation_expression335 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> unary_expression339 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> unary_expression341 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> unary_expression343 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> unary_expression345 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> pre_increment_expression346 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> pre_decrement_expression347 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> pointer_indirection_expression348 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> addressof_expression349 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal336_tree = default(object);
	    object string_literal337_tree = default(object);
	    object char_literal338_tree = default(object);
	    object char_literal340_tree = default(object);
	    object char_literal342_tree = default(object);
	    object char_literal344_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "unary_expression");
		DebugLocation(379, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 91)) { return retval; }

			// .\\cs.g:379:17: ( ( cast_expression )=> cast_expression | primary_or_array_creation_expression ( '++' )? ( '--' )? | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | pre_increment_expression | pre_decrement_expression | pointer_indirection_expression | addressof_expression )
			int alt105=10;
			try { DebugEnterDecision(105, decisionCanBacktrack[105]);
			switch (input.LA(1))
			{
			case 68:
				{
				int LA105_1 = input.LA(2);

				if ((EvaluatePredicate(synpred20_cs_fragment)))
				{
					alt105 = 1;
				}
				else if ((true))
				{
					alt105 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 105, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case IDENTIFIER:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 102:
			case 103:
			case 105:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 150:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 174:
			case 177:
			case 180:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 190:
			case 194:
			case 196:
				{
				alt105 = 2;
				}
				break;
			case 71:
				{
				alt105 = 3;
				}
				break;
			case MINUS:
				{
				alt105 = 4;
				}
				break;
			case 61:
				{
				alt105 = 5;
				}
				break;
			case 202:
				{
				alt105 = 6;
				}
				break;
			case 72:
				{
				alt105 = 7;
				}
				break;
			case 75:
				{
				alt105 = 8;
				}
				break;
			case 69:
				{
				alt105 = 9;
				}
				break;
			case 66:
				{
				alt105 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 105, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(105); }
			switch (alt105)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:381:2: ( cast_expression )=> cast_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(381, 23);
				PushFollow(Follow._cast_expression_in_unary_expression2693);
				cast_expression334=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression334.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:382:4: primary_or_array_creation_expression ( '++' )? ( '--' )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(382, 4);
				PushFollow(Follow._primary_or_array_creation_expression_in_unary_expression2698);
				primary_or_array_creation_expression335=primary_or_array_creation_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary_or_array_creation_expression335.Tree);
				DebugLocation(382, 43);
				// .\\cs.g:382:43: ( '++' )?
				int alt103=2;
				try { DebugEnterSubRule(103);
				try { DebugEnterDecision(103, decisionCanBacktrack[103]);
				int LA103_0 = input.LA(1);

				if ((LA103_0==72))
				{
					alt103 = 1;
				}
				} finally { DebugExitDecision(103); }
				switch (alt103)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:382:43: '++'
					{
					DebugLocation(382, 43);
					string_literal336=(IToken)Match(input,72,Follow._72_in_unary_expression2702); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal336_tree = (object)adaptor.Create(string_literal336);
					adaptor.AddChild(root_0, string_literal336_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(103); }

				DebugLocation(382, 51);
				// .\\cs.g:382:51: ( '--' )?
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, decisionCanBacktrack[104]);
				int LA104_0 = input.LA(1);

				if ((LA104_0==75))
				{
					alt104 = 1;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:382:51: '--'
					{
					DebugLocation(382, 51);
					string_literal337=(IToken)Match(input,75,Follow._75_in_unary_expression2707); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal337_tree = (object)adaptor.Create(string_literal337);
					adaptor.AddChild(root_0, string_literal337_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(104); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:383:4: '+' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(383, 4);
				char_literal338=(IToken)Match(input,71,Follow._71_in_unary_expression2713); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal338_tree = (object)adaptor.Create(char_literal338);
				adaptor.AddChild(root_0, char_literal338_tree);
				}
				DebugLocation(383, 10);
				PushFollow(Follow._unary_expression_in_unary_expression2717);
				unary_expression339=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression339.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// .\\cs.g:384:4: '-' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(384, 4);
				char_literal340=(IToken)Match(input,MINUS,Follow._MINUS_in_unary_expression2723); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal340_tree = (object)adaptor.Create(char_literal340);
				adaptor.AddChild(root_0, char_literal340_tree);
				}
				DebugLocation(384, 10);
				PushFollow(Follow._unary_expression_in_unary_expression2727);
				unary_expression341=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression341.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// .\\cs.g:385:4: '!' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(385, 4);
				char_literal342=(IToken)Match(input,61,Follow._61_in_unary_expression2733); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal342_tree = (object)adaptor.Create(char_literal342);
				adaptor.AddChild(root_0, char_literal342_tree);
				}
				DebugLocation(385, 10);
				PushFollow(Follow._unary_expression_in_unary_expression2737);
				unary_expression343=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression343.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// .\\cs.g:386:4: '~' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(386, 4);
				char_literal344=(IToken)Match(input,202,Follow._202_in_unary_expression2743); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal344_tree = (object)adaptor.Create(char_literal344);
				adaptor.AddChild(root_0, char_literal344_tree);
				}
				DebugLocation(386, 10);
				PushFollow(Follow._unary_expression_in_unary_expression2747);
				unary_expression345=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression345.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// .\\cs.g:387:4: pre_increment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(387, 4);
				PushFollow(Follow._pre_increment_expression_in_unary_expression2753);
				pre_increment_expression346=pre_increment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pre_increment_expression346.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// .\\cs.g:388:4: pre_decrement_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(388, 4);
				PushFollow(Follow._pre_decrement_expression_in_unary_expression2759);
				pre_decrement_expression347=pre_decrement_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pre_decrement_expression347.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// .\\cs.g:389:4: pointer_indirection_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(389, 4);
				PushFollow(Follow._pointer_indirection_expression_in_unary_expression2765);
				pointer_indirection_expression348=pointer_indirection_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer_indirection_expression348.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// .\\cs.g:390:4: addressof_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(390, 4);
				PushFollow(Follow._addressof_expression_in_unary_expression2770);
				addressof_expression349=addressof_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, addressof_expression349.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_expression", 91);
			LeaveRule("unary_expression", 91);
			LeaveRule_unary_expression();
	        if (state.backtracking > 0) { Memoize(input, 91, unary_expression_StartIndex); }

	    }
	 	DebugLocation(391, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_expression"); }
		return retval;

	}
	// $ANTLR end "unary_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_cast_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_cast_expression() {}

	// $ANTLR start "cast_expression"
	// .\\cs.g:392:1: cast_expression : '(' type ')' unary_expression ;
	[GrammarRule("cast_expression")]
	private AstParserRuleReturnScope<object, IToken> cast_expression()
	{
		EnterRule_cast_expression();
		EnterRule("cast_expression", 92);
		TraceIn("cast_expression", 92);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int cast_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal350 = default(IToken);
	    IToken char_literal352 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type351 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> unary_expression353 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal350_tree = default(object);
	    object char_literal352_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "cast_expression");
		DebugLocation(392, 37);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 92)) { return retval; }

			// .\\cs.g:392:16: ( '(' type ')' unary_expression )
			DebugEnterAlt(1);
			// .\\cs.g:393:2: '(' type ')' unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(393, 2);
			char_literal350=(IToken)Match(input,68,Follow._68_in_cast_expression2780); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal350_tree = (object)adaptor.Create(char_literal350);
			adaptor.AddChild(root_0, char_literal350_tree);
			}
			DebugLocation(393, 8);
			PushFollow(Follow._type_in_cast_expression2784);
			type351=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type351.Tree);
			DebugLocation(393, 15);
			char_literal352=(IToken)Match(input,RPAREN,Follow._RPAREN_in_cast_expression2788); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal352_tree = (object)adaptor.Create(char_literal352);
			adaptor.AddChild(root_0, char_literal352_tree);
			}
			DebugLocation(393, 21);
			PushFollow(Follow._unary_expression_in_cast_expression2792);
			unary_expression353=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression353.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expression", 92);
			LeaveRule("cast_expression", 92);
			LeaveRule_cast_expression();
	        if (state.backtracking > 0) { Memoize(input, 92, cast_expression_StartIndex); }

	    }
	 	DebugLocation(393, 37);
		} finally { DebugExitRule(GrammarFileName, "cast_expression"); }
		return retval;

	}
	// $ANTLR end "cast_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_assignment_operator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_assignment_operator() {}

	// $ANTLR start "assignment_operator"
	// .\\cs.g:394:1: assignment_operator : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>' '>=' );
	[GrammarRule("assignment_operator")]
	private AstParserRuleReturnScope<object, IToken> assignment_operator()
	{
		EnterRule_assignment_operator();
		EnterRule("assignment_operator", 93);
		TraceIn("assignment_operator", 93);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int assignment_operator_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal354 = default(IToken);
	    IToken string_literal355 = default(IToken);
	    IToken string_literal356 = default(IToken);
	    IToken string_literal357 = default(IToken);
	    IToken string_literal358 = default(IToken);
	    IToken string_literal359 = default(IToken);
	    IToken string_literal360 = default(IToken);
	    IToken string_literal361 = default(IToken);
	    IToken string_literal362 = default(IToken);
	    IToken string_literal363 = default(IToken);
	    IToken char_literal364 = default(IToken);
	    IToken string_literal365 = default(IToken);

	    object char_literal354_tree = default(object);
	    object string_literal355_tree = default(object);
	    object string_literal356_tree = default(object);
	    object string_literal357_tree = default(object);
	    object string_literal358_tree = default(object);
	    object string_literal359_tree = default(object);
	    object string_literal360_tree = default(object);
	    object string_literal361_tree = default(object);
	    object string_literal362_tree = default(object);
	    object string_literal363_tree = default(object);
	    object char_literal364_tree = default(object);
	    object string_literal365_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "assignment_operator");
		DebugLocation(394, 80);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 93)) { return retval; }

			// .\\cs.g:394:20: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>' '>=' )
			int alt106=11;
			try { DebugEnterDecision(106, decisionCanBacktrack[106]);
			switch (input.LA(1))
			{
			case 85:
				{
				alt106 = 1;
				}
				break;
			case 73:
				{
				alt106 = 2;
				}
				break;
			case 76:
				{
				alt106 = 3;
				}
				break;
			case 70:
				{
				alt106 = 4;
				}
				break;
			case 78:
				{
				alt106 = 5;
				}
				break;
			case 64:
				{
				alt106 = 6;
				}
				break;
			case 67:
				{
				alt106 = 7;
				}
				break;
			case 199:
				{
				alt106 = 8;
				}
				break;
			case 94:
				{
				alt106 = 9;
				}
				break;
			case 83:
				{
				alt106 = 10;
				}
				break;
			case GT:
				{
				alt106 = 11;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 106, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:395:2: '='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(395, 2);
				char_literal354=(IToken)Match(input,85,Follow._85_in_assignment_operator2800); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal354_tree = (object)adaptor.Create(char_literal354);
				adaptor.AddChild(root_0, char_literal354_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:395:8: '+='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(395, 8);
				string_literal355=(IToken)Match(input,73,Follow._73_in_assignment_operator2804); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal355_tree = (object)adaptor.Create(string_literal355);
				adaptor.AddChild(root_0, string_literal355_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:395:15: '-='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(395, 15);
				string_literal356=(IToken)Match(input,76,Follow._76_in_assignment_operator2808); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal356_tree = (object)adaptor.Create(string_literal356);
				adaptor.AddChild(root_0, string_literal356_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// .\\cs.g:395:22: '*='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(395, 22);
				string_literal357=(IToken)Match(input,70,Follow._70_in_assignment_operator2812); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal357_tree = (object)adaptor.Create(string_literal357);
				adaptor.AddChild(root_0, string_literal357_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// .\\cs.g:395:29: '/='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(395, 29);
				string_literal358=(IToken)Match(input,78,Follow._78_in_assignment_operator2816); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal358_tree = (object)adaptor.Create(string_literal358);
				adaptor.AddChild(root_0, string_literal358_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// .\\cs.g:395:36: '%='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(395, 36);
				string_literal359=(IToken)Match(input,64,Follow._64_in_assignment_operator2820); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal359_tree = (object)adaptor.Create(string_literal359);
				adaptor.AddChild(root_0, string_literal359_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// .\\cs.g:395:43: '&='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(395, 43);
				string_literal360=(IToken)Match(input,67,Follow._67_in_assignment_operator2824); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal360_tree = (object)adaptor.Create(string_literal360);
				adaptor.AddChild(root_0, string_literal360_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// .\\cs.g:395:50: '|='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(395, 50);
				string_literal361=(IToken)Match(input,199,Follow._199_in_assignment_operator2828); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal361_tree = (object)adaptor.Create(string_literal361);
				adaptor.AddChild(root_0, string_literal361_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// .\\cs.g:395:57: '^='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(395, 57);
				string_literal362=(IToken)Match(input,94,Follow._94_in_assignment_operator2832); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal362_tree = (object)adaptor.Create(string_literal362);
				adaptor.AddChild(root_0, string_literal362_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// .\\cs.g:395:64: '<<='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(395, 64);
				string_literal363=(IToken)Match(input,83,Follow._83_in_assignment_operator2836); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal363_tree = (object)adaptor.Create(string_literal363);
				adaptor.AddChild(root_0, string_literal363_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// .\\cs.g:395:72: '>' '>='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(395, 72);
				char_literal364=(IToken)Match(input,GT,Follow._GT_in_assignment_operator2840); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal364_tree = (object)adaptor.Create(char_literal364);
				adaptor.AddChild(root_0, char_literal364_tree);
				}
				DebugLocation(395, 76);
				string_literal365=(IToken)Match(input,88,Follow._88_in_assignment_operator2842); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal365_tree = (object)adaptor.Create(string_literal365);
				adaptor.AddChild(root_0, string_literal365_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment_operator", 93);
			LeaveRule("assignment_operator", 93);
			LeaveRule_assignment_operator();
	        if (state.backtracking > 0) { Memoize(input, 93, assignment_operator_StartIndex); }

	    }
	 	DebugLocation(395, 80);
		} finally { DebugExitRule(GrammarFileName, "assignment_operator"); }
		return retval;

	}
	// $ANTLR end "assignment_operator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_pre_increment_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_pre_increment_expression() {}

	// $ANTLR start "pre_increment_expression"
	// .\\cs.g:396:1: pre_increment_expression : '++' unary_expression ;
	[GrammarRule("pre_increment_expression")]
	private AstParserRuleReturnScope<object, IToken> pre_increment_expression()
	{
		EnterRule_pre_increment_expression();
		EnterRule("pre_increment_expression", 94);
		TraceIn("pre_increment_expression", 94);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int pre_increment_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal366 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> unary_expression367 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal366_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "pre_increment_expression");
		DebugLocation(396, 25);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 94)) { return retval; }

			// .\\cs.g:396:25: ( '++' unary_expression )
			DebugEnterAlt(1);
			// .\\cs.g:397:2: '++' unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(397, 2);
			string_literal366=(IToken)Match(input,72,Follow._72_in_pre_increment_expression2851); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal366_tree = (object)adaptor.Create(string_literal366);
			adaptor.AddChild(root_0, string_literal366_tree);
			}
			DebugLocation(397, 9);
			PushFollow(Follow._unary_expression_in_pre_increment_expression2855);
			unary_expression367=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression367.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pre_increment_expression", 94);
			LeaveRule("pre_increment_expression", 94);
			LeaveRule_pre_increment_expression();
	        if (state.backtracking > 0) { Memoize(input, 94, pre_increment_expression_StartIndex); }

	    }
	 	DebugLocation(397, 25);
		} finally { DebugExitRule(GrammarFileName, "pre_increment_expression"); }
		return retval;

	}
	// $ANTLR end "pre_increment_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_pre_decrement_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_pre_decrement_expression() {}

	// $ANTLR start "pre_decrement_expression"
	// .\\cs.g:398:1: pre_decrement_expression : '--' unary_expression ;
	[GrammarRule("pre_decrement_expression")]
	private AstParserRuleReturnScope<object, IToken> pre_decrement_expression()
	{
		EnterRule_pre_decrement_expression();
		EnterRule("pre_decrement_expression", 95);
		TraceIn("pre_decrement_expression", 95);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int pre_decrement_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal368 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> unary_expression369 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal368_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "pre_decrement_expression");
		DebugLocation(398, 25);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 95)) { return retval; }

			// .\\cs.g:398:25: ( '--' unary_expression )
			DebugEnterAlt(1);
			// .\\cs.g:399:2: '--' unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(399, 2);
			string_literal368=(IToken)Match(input,75,Follow._75_in_pre_decrement_expression2864); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal368_tree = (object)adaptor.Create(string_literal368);
			adaptor.AddChild(root_0, string_literal368_tree);
			}
			DebugLocation(399, 9);
			PushFollow(Follow._unary_expression_in_pre_decrement_expression2868);
			unary_expression369=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression369.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pre_decrement_expression", 95);
			LeaveRule("pre_decrement_expression", 95);
			LeaveRule_pre_decrement_expression();
	        if (state.backtracking > 0) { Memoize(input, 95, pre_decrement_expression_StartIndex); }

	    }
	 	DebugLocation(399, 25);
		} finally { DebugExitRule(GrammarFileName, "pre_decrement_expression"); }
		return retval;

	}
	// $ANTLR end "pre_decrement_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_pointer_indirection_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_pointer_indirection_expression() {}

	// $ANTLR start "pointer_indirection_expression"
	// .\\cs.g:400:1: pointer_indirection_expression : '*' unary_expression ;
	[GrammarRule("pointer_indirection_expression")]
	private AstParserRuleReturnScope<object, IToken> pointer_indirection_expression()
	{
		EnterRule_pointer_indirection_expression();
		EnterRule("pointer_indirection_expression", 96);
		TraceIn("pointer_indirection_expression", 96);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int pointer_indirection_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal370 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> unary_expression371 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal370_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "pointer_indirection_expression");
		DebugLocation(400, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 96)) { return retval; }

			// .\\cs.g:400:31: ( '*' unary_expression )
			DebugEnterAlt(1);
			// .\\cs.g:401:2: '*' unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(401, 2);
			char_literal370=(IToken)Match(input,69,Follow._69_in_pointer_indirection_expression2876); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal370_tree = (object)adaptor.Create(char_literal370);
			adaptor.AddChild(root_0, char_literal370_tree);
			}
			DebugLocation(401, 8);
			PushFollow(Follow._unary_expression_in_pointer_indirection_expression2880);
			unary_expression371=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression371.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pointer_indirection_expression", 96);
			LeaveRule("pointer_indirection_expression", 96);
			LeaveRule_pointer_indirection_expression();
	        if (state.backtracking > 0) { Memoize(input, 96, pointer_indirection_expression_StartIndex); }

	    }
	 	DebugLocation(401, 24);
		} finally { DebugExitRule(GrammarFileName, "pointer_indirection_expression"); }
		return retval;

	}
	// $ANTLR end "pointer_indirection_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_addressof_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_addressof_expression() {}

	// $ANTLR start "addressof_expression"
	// .\\cs.g:402:1: addressof_expression : '&' unary_expression ;
	[GrammarRule("addressof_expression")]
	private AstParserRuleReturnScope<object, IToken> addressof_expression()
	{
		EnterRule_addressof_expression();
		EnterRule("addressof_expression", 97);
		TraceIn("addressof_expression", 97);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int addressof_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal372 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> unary_expression373 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal372_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "addressof_expression");
		DebugLocation(402, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 97)) { return retval; }

			// .\\cs.g:402:21: ( '&' unary_expression )
			DebugEnterAlt(1);
			// .\\cs.g:403:2: '&' unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(403, 2);
			char_literal372=(IToken)Match(input,66,Follow._66_in_addressof_expression2888); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal372_tree = (object)adaptor.Create(char_literal372);
			adaptor.AddChild(root_0, char_literal372_tree);
			}
			DebugLocation(403, 8);
			PushFollow(Follow._unary_expression_in_addressof_expression2892);
			unary_expression373=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression373.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("addressof_expression", 97);
			LeaveRule("addressof_expression", 97);
			LeaveRule_addressof_expression();
	        if (state.backtracking > 0) { Memoize(input, 97, addressof_expression_StartIndex); }

	    }
	 	DebugLocation(403, 24);
		} finally { DebugExitRule(GrammarFileName, "addressof_expression"); }
		return retval;

	}
	// $ANTLR end "addressof_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_non_assignment_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_non_assignment_expression() {}

	// $ANTLR start "non_assignment_expression"
	// .\\cs.g:405:1: non_assignment_expression : ( ( anonymous_function_signature '=>' )=> lambda_expression | ( query_expression )=> query_expression | conditional_expression );
	[GrammarRule("non_assignment_expression")]
	private AstParserRuleReturnScope<object, IToken> non_assignment_expression()
	{
		EnterRule_non_assignment_expression();
		EnterRule("non_assignment_expression", 98);
		TraceIn("non_assignment_expression", 98);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int non_assignment_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> lambda_expression374 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> query_expression375 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> conditional_expression376 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "non_assignment_expression");
		DebugLocation(405, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 98)) { return retval; }

			// .\\cs.g:405:26: ( ( anonymous_function_signature '=>' )=> lambda_expression | ( query_expression )=> query_expression | conditional_expression )
			int alt107=3;
			try { DebugEnterDecision(107, decisionCanBacktrack[107]);
			switch (input.LA(1))
			{
			case 68:
				{
				int LA107_1 = input.LA(2);

				if ((EvaluatePredicate(synpred21_cs_fragment)))
				{
					alt107 = 1;
				}
				else if ((true))
				{
					alt107 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 107, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 132:
				{
				int LA107_2 = input.LA(2);

				if ((EvaluatePredicate(synpred21_cs_fragment)))
				{
					alt107 = 1;
				}
				else if ((EvaluatePredicate(synpred22_cs_fragment)))
				{
					alt107 = 2;
				}
				else if ((true))
				{
					alt107 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 107, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA107_3 = input.LA(2);

				if ((EvaluatePredicate(synpred21_cs_fragment)))
				{
					alt107 = 1;
				}
				else if ((true))
				{
					alt107 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 107, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 69:
			case 71:
			case 72:
			case 75:
			case 102:
			case 103:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 119:
			case 129:
			case 138:
			case 146:
			case 150:
			case 151:
			case 169:
			case 173:
			case 174:
			case 177:
			case 180:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 202:
				{
				alt107 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 107, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(107); }
			switch (alt107)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:407:2: ( anonymous_function_signature '=>' )=> lambda_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(407, 43);
				PushFollow(Follow._lambda_expression_in_non_assignment_expression2913);
				lambda_expression374=lambda_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expression374.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:408:4: ( query_expression )=> query_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(408, 26);
				PushFollow(Follow._query_expression_in_non_assignment_expression2924);
				query_expression375=query_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, query_expression375.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:409:4: conditional_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(409, 4);
				PushFollow(Follow._conditional_expression_in_non_assignment_expression2930);
				conditional_expression376=conditional_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression376.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("non_assignment_expression", 98);
			LeaveRule("non_assignment_expression", 98);
			LeaveRule_non_assignment_expression();
	        if (state.backtracking > 0) { Memoize(input, 98, non_assignment_expression_StartIndex); }

	    }
	 	DebugLocation(410, 1);
		} finally { DebugExitRule(GrammarFileName, "non_assignment_expression"); }
		return retval;

	}
	// $ANTLR end "non_assignment_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_multiplicative_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_multiplicative_expression() {}

	// $ANTLR start "multiplicative_expression"
	// .\\cs.g:416:1: multiplicative_expression : unary_expression ( ( '*' | '/' | '%' ) unary_expression )* ;
	[GrammarRule("multiplicative_expression")]
	private AstParserRuleReturnScope<object, IToken> multiplicative_expression()
	{
		EnterRule_multiplicative_expression();
		EnterRule("multiplicative_expression", 99);
		TraceIn("multiplicative_expression", 99);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int multiplicative_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set378 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> unary_expression377 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> unary_expression379 = default(AstParserRuleReturnScope<object, IToken>);

	    object set378_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "multiplicative_expression");
		DebugLocation(416, 56);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 99)) { return retval; }

			// .\\cs.g:416:26: ( unary_expression ( ( '*' | '/' | '%' ) unary_expression )* )
			DebugEnterAlt(1);
			// .\\cs.g:417:2: unary_expression ( ( '*' | '/' | '%' ) unary_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(417, 2);
			PushFollow(Follow._unary_expression_in_multiplicative_expression2944);
			unary_expression377=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression377.Tree);
			DebugLocation(417, 19);
			// .\\cs.g:417:19: ( ( '*' | '/' | '%' ) unary_expression )*
			try { DebugEnterSubRule(108);
			while (true)
			{
				int alt108=2;
				try { DebugEnterDecision(108, decisionCanBacktrack[108]);
				int LA108_0 = input.LA(1);

				if ((LA108_0==63||LA108_0==69||LA108_0==77))
				{
					alt108 = 1;
				}


				} finally { DebugExitDecision(108); }
				switch ( alt108 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:417:22: ( '*' | '/' | '%' ) unary_expression
					{
					DebugLocation(417, 22);

					set378=(IToken)input.LT(1);
					if (input.LA(1)==63||input.LA(1)==69||input.LA(1)==77)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set378));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(417, 38);
					PushFollow(Follow._unary_expression_in_multiplicative_expression2959);
					unary_expression379=unary_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression379.Tree);

					}
					break;

				default:
					goto loop108;
				}
			}

			loop108:
				;

			} finally { DebugExitSubRule(108); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicative_expression", 99);
			LeaveRule("multiplicative_expression", 99);
			LeaveRule_multiplicative_expression();
	        if (state.backtracking > 0) { Memoize(input, 99, multiplicative_expression_StartIndex); }

	    }
	 	DebugLocation(417, 56);
		} finally { DebugExitRule(GrammarFileName, "multiplicative_expression"); }
		return retval;

	}
	// $ANTLR end "multiplicative_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_additive_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_additive_expression() {}

	// $ANTLR start "additive_expression"
	// .\\cs.g:418:1: additive_expression : multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )* ;
	[GrammarRule("additive_expression")]
	private AstParserRuleReturnScope<object, IToken> additive_expression()
	{
		EnterRule_additive_expression();
		EnterRule("additive_expression", 100);
		TraceIn("additive_expression", 100);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int additive_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set381 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> multiplicative_expression380 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> multiplicative_expression382 = default(AstParserRuleReturnScope<object, IToken>);

	    object set381_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "additive_expression");
		DebugLocation(418, 68);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 100)) { return retval; }

			// .\\cs.g:418:20: ( multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )* )
			DebugEnterAlt(1);
			// .\\cs.g:419:2: multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(419, 2);
			PushFollow(Follow._multiplicative_expression_in_additive_expression2969);
			multiplicative_expression380=multiplicative_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression380.Tree);
			DebugLocation(419, 28);
			// .\\cs.g:419:28: ( ( '+' | '-' ) multiplicative_expression )*
			try { DebugEnterSubRule(109);
			while (true)
			{
				int alt109=2;
				try { DebugEnterDecision(109, decisionCanBacktrack[109]);
				int LA109_0 = input.LA(1);

				if ((LA109_0==MINUS||LA109_0==71))
				{
					alt109 = 1;
				}


				} finally { DebugExitDecision(109); }
				switch ( alt109 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:419:29: ( '+' | '-' ) multiplicative_expression
					{
					DebugLocation(419, 29);

					set381=(IToken)input.LT(1);
					if (input.LA(1)==MINUS||input.LA(1)==71)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set381));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(419, 41);
					PushFollow(Follow._multiplicative_expression_in_additive_expression2980);
					multiplicative_expression382=multiplicative_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression382.Tree);

					}
					break;

				default:
					goto loop109;
				}
			}

			loop109:
				;

			} finally { DebugExitSubRule(109); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additive_expression", 100);
			LeaveRule("additive_expression", 100);
			LeaveRule_additive_expression();
	        if (state.backtracking > 0) { Memoize(input, 100, additive_expression_StartIndex); }

	    }
	 	DebugLocation(419, 68);
		} finally { DebugExitRule(GrammarFileName, "additive_expression"); }
		return retval;

	}
	// $ANTLR end "additive_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_shift_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_shift_expression() {}

	// $ANTLR start "shift_expression"
	// .\\cs.g:421:1: shift_expression : additive_expression ( ( '<<' | '>' '>' ) additive_expression )* ;
	[GrammarRule("shift_expression")]
	private AstParserRuleReturnScope<object, IToken> shift_expression()
	{
		EnterRule_shift_expression();
		EnterRule("shift_expression", 101);
		TraceIn("shift_expression", 101);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int shift_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal384 = default(IToken);
	    IToken char_literal385 = default(IToken);
	    IToken char_literal386 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> additive_expression383 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> additive_expression387 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal384_tree = default(object);
	    object char_literal385_tree = default(object);
	    object char_literal386_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "shift_expression");
		DebugLocation(421, 59);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 101)) { return retval; }

			// .\\cs.g:421:17: ( additive_expression ( ( '<<' | '>' '>' ) additive_expression )* )
			DebugEnterAlt(1);
			// .\\cs.g:422:2: additive_expression ( ( '<<' | '>' '>' ) additive_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(422, 2);
			PushFollow(Follow._additive_expression_in_shift_expression2991);
			additive_expression383=additive_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, additive_expression383.Tree);
			DebugLocation(422, 22);
			// .\\cs.g:422:22: ( ( '<<' | '>' '>' ) additive_expression )*
			try { DebugEnterSubRule(111);
			while (true)
			{
				int alt111=2;
				try { DebugEnterDecision(111, decisionCanBacktrack[111]);
				int LA111_0 = input.LA(1);

				if ((LA111_0==GT))
				{
					int LA111_1 = input.LA(2);

					if ((LA111_1==GT))
					{
						alt111 = 1;
					}


				}
				else if ((LA111_0==82))
				{
					alt111 = 1;
				}


				} finally { DebugExitDecision(111); }
				switch ( alt111 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:422:23: ( '<<' | '>' '>' ) additive_expression
					{
					DebugLocation(422, 23);
					// .\\cs.g:422:23: ( '<<' | '>' '>' )
					int alt110=2;
					try { DebugEnterSubRule(110);
					try { DebugEnterDecision(110, decisionCanBacktrack[110]);
					int LA110_0 = input.LA(1);

					if ((LA110_0==82))
					{
						alt110 = 1;
					}
					else if ((LA110_0==GT))
					{
						alt110 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 110, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(110); }
					switch (alt110)
					{
					case 1:
						DebugEnterAlt(1);
						// .\\cs.g:422:24: '<<'
						{
						DebugLocation(422, 24);
						string_literal384=(IToken)Match(input,82,Follow._82_in_shift_expression2995); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal384_tree = (object)adaptor.Create(string_literal384);
						adaptor.AddChild(root_0, string_literal384_tree);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// .\\cs.g:422:29: '>' '>'
						{
						DebugLocation(422, 29);
						char_literal385=(IToken)Match(input,GT,Follow._GT_in_shift_expression2997); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal385_tree = (object)adaptor.Create(char_literal385);
						adaptor.AddChild(root_0, char_literal385_tree);
						}
						DebugLocation(422, 33);
						char_literal386=(IToken)Match(input,GT,Follow._GT_in_shift_expression2999); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal386_tree = (object)adaptor.Create(char_literal386);
						adaptor.AddChild(root_0, char_literal386_tree);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(110); }

					DebugLocation(422, 38);
					PushFollow(Follow._additive_expression_in_shift_expression3002);
					additive_expression387=additive_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, additive_expression387.Tree);

					}
					break;

				default:
					goto loop111;
				}
			}

			loop111:
				;

			} finally { DebugExitSubRule(111); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expression", 101);
			LeaveRule("shift_expression", 101);
			LeaveRule_shift_expression();
	        if (state.backtracking > 0) { Memoize(input, 101, shift_expression_StartIndex); }

	    }
	 	DebugLocation(422, 59);
		} finally { DebugExitRule(GrammarFileName, "shift_expression"); }
		return retval;

	}
	// $ANTLR end "shift_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_relational_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_relational_expression() {}

	// $ANTLR start "relational_expression"
	// .\\cs.g:423:1: relational_expression : shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )* ;
	[GrammarRule("relational_expression")]
	private AstParserRuleReturnScope<object, IToken> relational_expression()
	{
		EnterRule_relational_expression();
		EnterRule("relational_expression", 102);
		TraceIn("relational_expression", 102);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int relational_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set389 = default(IToken);
	    IToken set391 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> shift_expression388 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> shift_expression390 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> non_nullable_type392 = default(AstParserRuleReturnScope<object, IToken>);

	    object set389_tree = default(object);
	    object set391_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "relational_expression");
		DebugLocation(423, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 102)) { return retval; }

			// .\\cs.g:423:22: ( shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )* )
			DebugEnterAlt(1);
			// .\\cs.g:424:2: shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(424, 2);
			PushFollow(Follow._shift_expression_in_relational_expression3012);
			shift_expression388=shift_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expression388.Tree);
			DebugLocation(425, 3);
			// .\\cs.g:425:3: ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )*
			try { DebugEnterSubRule(112);
			while (true)
			{
				int alt112=3;
				try { DebugEnterDecision(112, decisionCanBacktrack[112]);
				int LA112_0 = input.LA(1);

				if ((LA112_0==GT||LA112_0==81||LA112_0==84||LA112_0==88))
				{
					alt112 = 1;
				}
				else if ((LA112_0==99||LA112_0==142))
				{
					alt112 = 2;
				}


				} finally { DebugExitDecision(112); }
				switch ( alt112 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:425:5: ( ( '<' | '>' | '>=' | '<=' ) shift_expression )
					{
					DebugLocation(425, 5);
					// .\\cs.g:425:5: ( ( '<' | '>' | '>=' | '<=' ) shift_expression )
					DebugEnterAlt(1);
					// .\\cs.g:425:6: ( '<' | '>' | '>=' | '<=' ) shift_expression
					{
					DebugLocation(425, 6);

					set389=(IToken)input.LT(1);
					if (input.LA(1)==GT||input.LA(1)==81||input.LA(1)==84||input.LA(1)==88)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set389));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(425, 26);
					PushFollow(Follow._shift_expression_in_relational_expression3029);
					shift_expression390=shift_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expression390.Tree);

					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:426:6: ( ( 'is' | 'as' ) non_nullable_type )
					{
					DebugLocation(426, 6);
					// .\\cs.g:426:6: ( ( 'is' | 'as' ) non_nullable_type )
					DebugEnterAlt(1);
					// .\\cs.g:426:7: ( 'is' | 'as' ) non_nullable_type
					{
					DebugLocation(426, 7);

					set391=(IToken)input.LT(1);
					if (input.LA(1)==99||input.LA(1)==142)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set391));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(426, 21);
					PushFollow(Follow._non_nullable_type_in_relational_expression3046);
					non_nullable_type392=non_nullable_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, non_nullable_type392.Tree);

					}


					}
					break;

				default:
					goto loop112;
				}
			}

			loop112:
				;

			} finally { DebugExitSubRule(112); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relational_expression", 102);
			LeaveRule("relational_expression", 102);
			LeaveRule_relational_expression();
	        if (state.backtracking > 0) { Memoize(input, 102, relational_expression_StartIndex); }

	    }
	 	DebugLocation(427, 5);
		} finally { DebugExitRule(GrammarFileName, "relational_expression"); }
		return retval;

	}
	// $ANTLR end "relational_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_equality_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_equality_expression() {}

	// $ANTLR start "equality_expression"
	// .\\cs.g:428:1: equality_expression : relational_expression ( ( '==' | '!=' ) relational_expression )* ;
	[GrammarRule("equality_expression")]
	private AstParserRuleReturnScope<object, IToken> equality_expression()
	{
		EnterRule_equality_expression();
		EnterRule("equality_expression", 103);
		TraceIn("equality_expression", 103);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int equality_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set394 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> relational_expression393 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> relational_expression395 = default(AstParserRuleReturnScope<object, IToken>);

	    object set394_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "equality_expression");
		DebugLocation(428, 43);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 103)) { return retval; }

			// .\\cs.g:428:20: ( relational_expression ( ( '==' | '!=' ) relational_expression )* )
			DebugEnterAlt(1);
			// .\\cs.g:429:2: relational_expression ( ( '==' | '!=' ) relational_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(429, 2);
			PushFollow(Follow._relational_expression_in_equality_expression3060);
			relational_expression393=relational_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relational_expression393.Tree);
			DebugLocation(430, 5);
			// .\\cs.g:430:5: ( ( '==' | '!=' ) relational_expression )*
			try { DebugEnterSubRule(113);
			while (true)
			{
				int alt113=2;
				try { DebugEnterDecision(113, decisionCanBacktrack[113]);
				int LA113_0 = input.LA(1);

				if ((LA113_0==62||LA113_0==86))
				{
					alt113 = 1;
				}


				} finally { DebugExitDecision(113); }
				switch ( alt113 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:430:6: ( '==' | '!=' ) relational_expression
					{
					DebugLocation(430, 6);

					set394=(IToken)input.LT(1);
					if (input.LA(1)==62||input.LA(1)==86)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set394));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(430, 20);
					PushFollow(Follow._relational_expression_in_equality_expression3075);
					relational_expression395=relational_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, relational_expression395.Tree);

					}
					break;

				default:
					goto loop113;
				}
			}

			loop113:
				;

			} finally { DebugExitSubRule(113); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equality_expression", 103);
			LeaveRule("equality_expression", 103);
			LeaveRule_equality_expression();
	        if (state.backtracking > 0) { Memoize(input, 103, equality_expression_StartIndex); }

	    }
	 	DebugLocation(430, 43);
		} finally { DebugExitRule(GrammarFileName, "equality_expression"); }
		return retval;

	}
	// $ANTLR end "equality_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_and_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_and_expression() {}

	// $ANTLR start "and_expression"
	// .\\cs.g:431:1: and_expression : equality_expression ( '&' equality_expression )* ;
	[GrammarRule("and_expression")]
	private AstParserRuleReturnScope<object, IToken> and_expression()
	{
		EnterRule_and_expression();
		EnterRule("and_expression", 104);
		TraceIn("and_expression", 104);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int and_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal397 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> equality_expression396 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> equality_expression398 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal397_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "and_expression");
		DebugLocation(431, 50);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 104)) { return retval; }

			// .\\cs.g:431:15: ( equality_expression ( '&' equality_expression )* )
			DebugEnterAlt(1);
			// .\\cs.g:432:2: equality_expression ( '&' equality_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(432, 2);
			PushFollow(Follow._equality_expression_in_and_expression3085);
			equality_expression396=equality_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equality_expression396.Tree);
			DebugLocation(432, 22);
			// .\\cs.g:432:22: ( '&' equality_expression )*
			try { DebugEnterSubRule(114);
			while (true)
			{
				int alt114=2;
				try { DebugEnterDecision(114, decisionCanBacktrack[114]);
				int LA114_0 = input.LA(1);

				if ((LA114_0==66))
				{
					alt114 = 1;
				}


				} finally { DebugExitDecision(114); }
				switch ( alt114 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:432:23: '&' equality_expression
					{
					DebugLocation(432, 23);
					char_literal397=(IToken)Match(input,66,Follow._66_in_and_expression3088); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal397_tree = (object)adaptor.Create(char_literal397);
					adaptor.AddChild(root_0, char_literal397_tree);
					}
					DebugLocation(432, 29);
					PushFollow(Follow._equality_expression_in_and_expression3092);
					equality_expression398=equality_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equality_expression398.Tree);

					}
					break;

				default:
					goto loop114;
				}
			}

			loop114:
				;

			} finally { DebugExitSubRule(114); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expression", 104);
			LeaveRule("and_expression", 104);
			LeaveRule_and_expression();
	        if (state.backtracking > 0) { Memoize(input, 104, and_expression_StartIndex); }

	    }
	 	DebugLocation(432, 50);
		} finally { DebugExitRule(GrammarFileName, "and_expression"); }
		return retval;

	}
	// $ANTLR end "and_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_exclusive_or_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_exclusive_or_expression() {}

	// $ANTLR start "exclusive_or_expression"
	// .\\cs.g:433:1: exclusive_or_expression : and_expression ( '^' and_expression )* ;
	[GrammarRule("exclusive_or_expression")]
	private AstParserRuleReturnScope<object, IToken> exclusive_or_expression()
	{
		EnterRule_exclusive_or_expression();
		EnterRule("exclusive_or_expression", 105);
		TraceIn("exclusive_or_expression", 105);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int exclusive_or_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal400 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> and_expression399 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> and_expression401 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal400_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "exclusive_or_expression");
		DebugLocation(433, 40);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 105)) { return retval; }

			// .\\cs.g:433:24: ( and_expression ( '^' and_expression )* )
			DebugEnterAlt(1);
			// .\\cs.g:434:2: and_expression ( '^' and_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(434, 2);
			PushFollow(Follow._and_expression_in_exclusive_or_expression3102);
			and_expression399=and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, and_expression399.Tree);
			DebugLocation(434, 17);
			// .\\cs.g:434:17: ( '^' and_expression )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=2;
				try { DebugEnterDecision(115, decisionCanBacktrack[115]);
				int LA115_0 = input.LA(1);

				if ((LA115_0==93))
				{
					alt115 = 1;
				}


				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:434:18: '^' and_expression
					{
					DebugLocation(434, 18);
					char_literal400=(IToken)Match(input,93,Follow._93_in_exclusive_or_expression3105); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal400_tree = (object)adaptor.Create(char_literal400);
					adaptor.AddChild(root_0, char_literal400_tree);
					}
					DebugLocation(434, 24);
					PushFollow(Follow._and_expression_in_exclusive_or_expression3109);
					and_expression401=and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, and_expression401.Tree);

					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusive_or_expression", 105);
			LeaveRule("exclusive_or_expression", 105);
			LeaveRule_exclusive_or_expression();
	        if (state.backtracking > 0) { Memoize(input, 105, exclusive_or_expression_StartIndex); }

	    }
	 	DebugLocation(434, 40);
		} finally { DebugExitRule(GrammarFileName, "exclusive_or_expression"); }
		return retval;

	}
	// $ANTLR end "exclusive_or_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_inclusive_or_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_inclusive_or_expression() {}

	// $ANTLR start "inclusive_or_expression"
	// .\\cs.g:435:1: inclusive_or_expression : exclusive_or_expression ( '|' exclusive_or_expression )* ;
	[GrammarRule("inclusive_or_expression")]
	private AstParserRuleReturnScope<object, IToken> inclusive_or_expression()
	{
		EnterRule_inclusive_or_expression();
		EnterRule("inclusive_or_expression", 106);
		TraceIn("inclusive_or_expression", 106);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int inclusive_or_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal403 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> exclusive_or_expression402 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> exclusive_or_expression404 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal403_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "inclusive_or_expression");
		DebugLocation(435, 60);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 106)) { return retval; }

			// .\\cs.g:435:24: ( exclusive_or_expression ( '|' exclusive_or_expression )* )
			DebugEnterAlt(1);
			// .\\cs.g:436:2: exclusive_or_expression ( '|' exclusive_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(436, 2);
			PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression3119);
			exclusive_or_expression402=exclusive_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exclusive_or_expression402.Tree);
			DebugLocation(436, 28);
			// .\\cs.g:436:28: ( '|' exclusive_or_expression )*
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=2;
				try { DebugEnterDecision(116, decisionCanBacktrack[116]);
				int LA116_0 = input.LA(1);

				if ((LA116_0==198))
				{
					alt116 = 1;
				}


				} finally { DebugExitDecision(116); }
				switch ( alt116 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:436:29: '|' exclusive_or_expression
					{
					DebugLocation(436, 29);
					char_literal403=(IToken)Match(input,198,Follow._198_in_inclusive_or_expression3124); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal403_tree = (object)adaptor.Create(char_literal403);
					adaptor.AddChild(root_0, char_literal403_tree);
					}
					DebugLocation(436, 35);
					PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression3128);
					exclusive_or_expression404=exclusive_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exclusive_or_expression404.Tree);

					}
					break;

				default:
					goto loop116;
				}
			}

			loop116:
				;

			} finally { DebugExitSubRule(116); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusive_or_expression", 106);
			LeaveRule("inclusive_or_expression", 106);
			LeaveRule_inclusive_or_expression();
	        if (state.backtracking > 0) { Memoize(input, 106, inclusive_or_expression_StartIndex); }

	    }
	 	DebugLocation(436, 60);
		} finally { DebugExitRule(GrammarFileName, "inclusive_or_expression"); }
		return retval;

	}
	// $ANTLR end "inclusive_or_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_conditional_and_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_conditional_and_expression() {}

	// $ANTLR start "conditional_and_expression"
	// .\\cs.g:437:1: conditional_and_expression : inclusive_or_expression ( '&&' inclusive_or_expression )* ;
	[GrammarRule("conditional_and_expression")]
	private AstParserRuleReturnScope<object, IToken> conditional_and_expression()
	{
		EnterRule_conditional_and_expression();
		EnterRule("conditional_and_expression", 107);
		TraceIn("conditional_and_expression", 107);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int conditional_and_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal406 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> inclusive_or_expression405 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> inclusive_or_expression407 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal406_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "conditional_and_expression");
		DebugLocation(437, 61);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 107)) { return retval; }

			// .\\cs.g:437:27: ( inclusive_or_expression ( '&&' inclusive_or_expression )* )
			DebugEnterAlt(1);
			// .\\cs.g:438:2: inclusive_or_expression ( '&&' inclusive_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(438, 2);
			PushFollow(Follow._inclusive_or_expression_in_conditional_and_expression3138);
			inclusive_or_expression405=inclusive_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, inclusive_or_expression405.Tree);
			DebugLocation(438, 28);
			// .\\cs.g:438:28: ( '&&' inclusive_or_expression )*
			try { DebugEnterSubRule(117);
			while (true)
			{
				int alt117=2;
				try { DebugEnterDecision(117, decisionCanBacktrack[117]);
				int LA117_0 = input.LA(1);

				if ((LA117_0==65))
				{
					alt117 = 1;
				}


				} finally { DebugExitDecision(117); }
				switch ( alt117 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:438:29: '&&' inclusive_or_expression
					{
					DebugLocation(438, 29);
					string_literal406=(IToken)Match(input,65,Follow._65_in_conditional_and_expression3143); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal406_tree = (object)adaptor.Create(string_literal406);
					adaptor.AddChild(root_0, string_literal406_tree);
					}
					DebugLocation(438, 36);
					PushFollow(Follow._inclusive_or_expression_in_conditional_and_expression3147);
					inclusive_or_expression407=inclusive_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, inclusive_or_expression407.Tree);

					}
					break;

				default:
					goto loop117;
				}
			}

			loop117:
				;

			} finally { DebugExitSubRule(117); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional_and_expression", 107);
			LeaveRule("conditional_and_expression", 107);
			LeaveRule_conditional_and_expression();
	        if (state.backtracking > 0) { Memoize(input, 107, conditional_and_expression_StartIndex); }

	    }
	 	DebugLocation(438, 61);
		} finally { DebugExitRule(GrammarFileName, "conditional_and_expression"); }
		return retval;

	}
	// $ANTLR end "conditional_and_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_conditional_or_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_conditional_or_expression() {}

	// $ANTLR start "conditional_or_expression"
	// .\\cs.g:439:1: conditional_or_expression : conditional_and_expression ( '||' conditional_and_expression )* ;
	[GrammarRule("conditional_or_expression")]
	private AstParserRuleReturnScope<object, IToken> conditional_or_expression()
	{
		EnterRule_conditional_or_expression();
		EnterRule("conditional_or_expression", 108);
		TraceIn("conditional_or_expression", 108);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int conditional_or_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal409 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> conditional_and_expression408 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> conditional_and_expression410 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal409_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "conditional_or_expression");
		DebugLocation(439, 66);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 108)) { return retval; }

			// .\\cs.g:439:26: ( conditional_and_expression ( '||' conditional_and_expression )* )
			DebugEnterAlt(1);
			// .\\cs.g:440:2: conditional_and_expression ( '||' conditional_and_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(440, 2);
			PushFollow(Follow._conditional_and_expression_in_conditional_or_expression3157);
			conditional_and_expression408=conditional_and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_and_expression408.Tree);
			DebugLocation(440, 30);
			// .\\cs.g:440:30: ( '||' conditional_and_expression )*
			try { DebugEnterSubRule(118);
			while (true)
			{
				int alt118=2;
				try { DebugEnterDecision(118, decisionCanBacktrack[118]);
				int LA118_0 = input.LA(1);

				if ((LA118_0==200))
				{
					alt118 = 1;
				}


				} finally { DebugExitDecision(118); }
				switch ( alt118 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:440:31: '||' conditional_and_expression
					{
					DebugLocation(440, 31);
					string_literal409=(IToken)Match(input,200,Follow._200_in_conditional_or_expression3161); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal409_tree = (object)adaptor.Create(string_literal409);
					adaptor.AddChild(root_0, string_literal409_tree);
					}
					DebugLocation(440, 38);
					PushFollow(Follow._conditional_and_expression_in_conditional_or_expression3165);
					conditional_and_expression410=conditional_and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_and_expression410.Tree);

					}
					break;

				default:
					goto loop118;
				}
			}

			loop118:
				;

			} finally { DebugExitSubRule(118); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional_or_expression", 108);
			LeaveRule("conditional_or_expression", 108);
			LeaveRule_conditional_or_expression();
	        if (state.backtracking > 0) { Memoize(input, 108, conditional_or_expression_StartIndex); }

	    }
	 	DebugLocation(440, 66);
		} finally { DebugExitRule(GrammarFileName, "conditional_or_expression"); }
		return retval;

	}
	// $ANTLR end "conditional_or_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_null_coalescing_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_null_coalescing_expression() {}

	// $ANTLR start "null_coalescing_expression"
	// .\\cs.g:442:1: null_coalescing_expression : conditional_or_expression ( '??' conditional_or_expression )* ;
	[GrammarRule("null_coalescing_expression")]
	private AstParserRuleReturnScope<object, IToken> null_coalescing_expression()
	{
		EnterRule_null_coalescing_expression();
		EnterRule("null_coalescing_expression", 109);
		TraceIn("null_coalescing_expression", 109);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int null_coalescing_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal412 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> conditional_or_expression411 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> conditional_or_expression413 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal412_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "null_coalescing_expression");
		DebugLocation(442, 65);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 109)) { return retval; }

			// .\\cs.g:442:27: ( conditional_or_expression ( '??' conditional_or_expression )* )
			DebugEnterAlt(1);
			// .\\cs.g:443:2: conditional_or_expression ( '??' conditional_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(443, 2);
			PushFollow(Follow._conditional_or_expression_in_null_coalescing_expression3176);
			conditional_or_expression411=conditional_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_or_expression411.Tree);
			DebugLocation(443, 30);
			// .\\cs.g:443:30: ( '??' conditional_or_expression )*
			try { DebugEnterSubRule(119);
			while (true)
			{
				int alt119=2;
				try { DebugEnterDecision(119, decisionCanBacktrack[119]);
				int LA119_0 = input.LA(1);

				if ((LA119_0==90))
				{
					alt119 = 1;
				}


				} finally { DebugExitDecision(119); }
				switch ( alt119 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:443:31: '??' conditional_or_expression
					{
					DebugLocation(443, 31);
					string_literal412=(IToken)Match(input,90,Follow._90_in_null_coalescing_expression3181); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal412_tree = (object)adaptor.Create(string_literal412);
					adaptor.AddChild(root_0, string_literal412_tree);
					}
					DebugLocation(443, 38);
					PushFollow(Follow._conditional_or_expression_in_null_coalescing_expression3185);
					conditional_or_expression413=conditional_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_or_expression413.Tree);

					}
					break;

				default:
					goto loop119;
				}
			}

			loop119:
				;

			} finally { DebugExitSubRule(119); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("null_coalescing_expression", 109);
			LeaveRule("null_coalescing_expression", 109);
			LeaveRule_null_coalescing_expression();
	        if (state.backtracking > 0) { Memoize(input, 109, null_coalescing_expression_StartIndex); }

	    }
	 	DebugLocation(443, 65);
		} finally { DebugExitRule(GrammarFileName, "null_coalescing_expression"); }
		return retval;

	}
	// $ANTLR end "null_coalescing_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_conditional_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_conditional_expression() {}

	// $ANTLR start "conditional_expression"
	// .\\cs.g:444:1: conditional_expression : null_coalescing_expression ( '?' expression ':' expression )? ;
	[GrammarRule("conditional_expression")]
	private AstParserRuleReturnScope<object, IToken> conditional_expression()
	{
		EnterRule_conditional_expression();
		EnterRule("conditional_expression", 110);
		TraceIn("conditional_expression", 110);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int conditional_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal415 = default(IToken);
	    IToken char_literal417 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> null_coalescing_expression414 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression416 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression418 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal415_tree = default(object);
	    object char_literal417_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "conditional_expression");
		DebugLocation(444, 69);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 110)) { return retval; }

			// .\\cs.g:444:23: ( null_coalescing_expression ( '?' expression ':' expression )? )
			DebugEnterAlt(1);
			// .\\cs.g:445:2: null_coalescing_expression ( '?' expression ':' expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(445, 2);
			PushFollow(Follow._null_coalescing_expression_in_conditional_expression3195);
			null_coalescing_expression414=null_coalescing_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, null_coalescing_expression414.Tree);
			DebugLocation(445, 31);
			// .\\cs.g:445:31: ( '?' expression ':' expression )?
			int alt120=2;
			try { DebugEnterSubRule(120);
			try { DebugEnterDecision(120, decisionCanBacktrack[120]);
			int LA120_0 = input.LA(1);

			if ((LA120_0==89))
			{
				alt120 = 1;
			}
			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:445:32: '?' expression ':' expression
				{
				DebugLocation(445, 32);
				char_literal415=(IToken)Match(input,89,Follow._89_in_conditional_expression3200); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal415_tree = (object)adaptor.Create(char_literal415);
				adaptor.AddChild(root_0, char_literal415_tree);
				}
				DebugLocation(445, 38);
				PushFollow(Follow._expression_in_conditional_expression3204);
				expression416=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression416.Tree);
				DebugLocation(445, 51);
				char_literal417=(IToken)Match(input,79,Follow._79_in_conditional_expression3208); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal417_tree = (object)adaptor.Create(char_literal417);
				adaptor.AddChild(root_0, char_literal417_tree);
				}
				DebugLocation(445, 57);
				PushFollow(Follow._expression_in_conditional_expression3212);
				expression418=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression418.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(120); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional_expression", 110);
			LeaveRule("conditional_expression", 110);
			LeaveRule_conditional_expression();
	        if (state.backtracking > 0) { Memoize(input, 110, conditional_expression_StartIndex); }

	    }
	 	DebugLocation(445, 69);
		} finally { DebugExitRule(GrammarFileName, "conditional_expression"); }
		return retval;

	}
	// $ANTLR end "conditional_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_lambda_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_lambda_expression() {}

	// $ANTLR start "lambda_expression"
	// .\\cs.g:450:1: lambda_expression : anonymous_function_signature '=>' anonymous_function_body ;
	[GrammarRule("lambda_expression")]
	private AstParserRuleReturnScope<object, IToken> lambda_expression()
	{
		EnterRule_lambda_expression();
		EnterRule("lambda_expression", 111);
		TraceIn("lambda_expression", 111);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int lambda_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal420 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> anonymous_function_signature419 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> anonymous_function_body421 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal420_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "lambda_expression");
		DebugLocation(450, 62);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 111)) { return retval; }

			// .\\cs.g:450:18: ( anonymous_function_signature '=>' anonymous_function_body )
			DebugEnterAlt(1);
			// .\\cs.g:451:2: anonymous_function_signature '=>' anonymous_function_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(451, 2);
			PushFollow(Follow._anonymous_function_signature_in_lambda_expression3232);
			anonymous_function_signature419=anonymous_function_signature();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, anonymous_function_signature419.Tree);
			DebugLocation(451, 33);
			string_literal420=(IToken)Match(input,87,Follow._87_in_lambda_expression3236); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal420_tree = (object)adaptor.Create(string_literal420);
			adaptor.AddChild(root_0, string_literal420_tree);
			}
			DebugLocation(451, 40);
			PushFollow(Follow._anonymous_function_body_in_lambda_expression3240);
			anonymous_function_body421=anonymous_function_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, anonymous_function_body421.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expression", 111);
			LeaveRule("lambda_expression", 111);
			LeaveRule_lambda_expression();
	        if (state.backtracking > 0) { Memoize(input, 111, lambda_expression_StartIndex); }

	    }
	 	DebugLocation(451, 62);
		} finally { DebugExitRule(GrammarFileName, "lambda_expression"); }
		return retval;

	}
	// $ANTLR end "lambda_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_anonymous_function_signature() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_anonymous_function_signature() {}

	// $ANTLR start "anonymous_function_signature"
	// .\\cs.g:452:1: anonymous_function_signature : ( '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')' | implicit_anonymous_function_parameter_list );
	[GrammarRule("anonymous_function_signature")]
	private AstParserRuleReturnScope<object, IToken> anonymous_function_signature()
	{
		EnterRule_anonymous_function_signature();
		EnterRule("anonymous_function_signature", 112);
		TraceIn("anonymous_function_signature", 112);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int anonymous_function_signature_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal422 = default(IToken);
	    IToken char_literal425 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> explicit_anonymous_function_parameter_list423 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> implicit_anonymous_function_parameter_list424 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> implicit_anonymous_function_parameter_list426 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal422_tree = default(object);
	    object char_literal425_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "anonymous_function_signature");
		DebugLocation(452, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 112)) { return retval; }

			// .\\cs.g:452:29: ( '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')' | implicit_anonymous_function_parameter_list )
			int alt122=2;
			try { DebugEnterDecision(122, decisionCanBacktrack[122]);
			int LA122_0 = input.LA(1);

			if ((LA122_0==68))
			{
				alt122 = 1;
			}
			else if ((LA122_0==IDENTIFIER||LA122_0==95||(LA122_0>=97 && LA122_0<=98)||(LA122_0>=100 && LA122_0<=101)||LA122_0==105||LA122_0==117||LA122_0==120||LA122_0==122||LA122_0==126||LA122_0==132||LA122_0==135||LA122_0==141||(LA122_0>=143 && LA122_0<=144)||(LA122_0>=147 && LA122_0<=148)||LA122_0==152||LA122_0==154||LA122_0==157||LA122_0==160||LA122_0==162||LA122_0==167||(LA122_0>=171 && LA122_0<=172)||LA122_0==183||LA122_0==190||LA122_0==194||LA122_0==196))
			{
				alt122 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 122, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:453:2: '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(453, 2);
				char_literal422=(IToken)Match(input,68,Follow._68_in_anonymous_function_signature3247); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal422_tree = (object)adaptor.Create(char_literal422);
				adaptor.AddChild(root_0, char_literal422_tree);
				}
				DebugLocation(453, 6);
				// .\\cs.g:453:6: ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )?
				int alt121=3;
				try { DebugEnterSubRule(121);
				try { DebugEnterDecision(121, decisionCanBacktrack[121]);
				int LA121_0 = input.LA(1);

				if ((LA121_0==103||LA121_0==106||LA121_0==109||LA121_0==114||LA121_0==119||LA121_0==129||LA121_0==138||LA121_0==146||LA121_0==151||LA121_0==155||LA121_0==166||LA121_0==169||LA121_0==173||LA121_0==177||(LA121_0>=185 && LA121_0<=186)||LA121_0==189||LA121_0==192))
				{
					alt121 = 1;
				}
				else if ((LA121_0==IDENTIFIER||LA121_0==95||(LA121_0>=97 && LA121_0<=98)||(LA121_0>=100 && LA121_0<=101)||LA121_0==105||LA121_0==117||LA121_0==120||LA121_0==122||LA121_0==126||LA121_0==132||LA121_0==135||LA121_0==141||(LA121_0>=143 && LA121_0<=144)||(LA121_0>=147 && LA121_0<=148)||LA121_0==152||LA121_0==154||LA121_0==157||LA121_0==160||LA121_0==162||LA121_0==167||(LA121_0>=171 && LA121_0<=172)||LA121_0==183||LA121_0==190||LA121_0==194||LA121_0==196))
				{
					int LA121_2 = input.LA(2);

					if ((LA121_2==DOT||LA121_2==IDENTIFIER||LA121_2==69||(LA121_2>=80 && LA121_2<=81)||LA121_2==89||LA121_2==91||LA121_2==95||(LA121_2>=97 && LA121_2<=98)||(LA121_2>=100 && LA121_2<=101)||LA121_2==105||LA121_2==117||LA121_2==120||LA121_2==122||LA121_2==126||LA121_2==132||LA121_2==135||LA121_2==141||(LA121_2>=143 && LA121_2<=144)||(LA121_2>=147 && LA121_2<=148)||LA121_2==152||LA121_2==154||LA121_2==157||LA121_2==160||LA121_2==162||LA121_2==167||(LA121_2>=171 && LA121_2<=172)||LA121_2==183||LA121_2==190||LA121_2==194||LA121_2==196))
					{
						alt121 = 1;
					}
					else if ((LA121_2==RPAREN||LA121_2==74))
					{
						alt121 = 2;
					}
				}
				} finally { DebugExitDecision(121); }
				switch (alt121)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:453:7: explicit_anonymous_function_parameter_list
					{
					DebugLocation(453, 7);
					PushFollow(Follow._explicit_anonymous_function_parameter_list_in_anonymous_function_signature3250);
					explicit_anonymous_function_parameter_list423=explicit_anonymous_function_parameter_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, explicit_anonymous_function_parameter_list423.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:454:5: implicit_anonymous_function_parameter_list
					{
					DebugLocation(454, 5);
					PushFollow(Follow._implicit_anonymous_function_parameter_list_in_anonymous_function_signature3256);
					implicit_anonymous_function_parameter_list424=implicit_anonymous_function_parameter_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, implicit_anonymous_function_parameter_list424.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(121); }

				DebugLocation(454, 50);
				char_literal425=(IToken)Match(input,RPAREN,Follow._RPAREN_in_anonymous_function_signature3260); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal425_tree = (object)adaptor.Create(char_literal425);
				adaptor.AddChild(root_0, char_literal425_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:455:4: implicit_anonymous_function_parameter_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(455, 4);
				PushFollow(Follow._implicit_anonymous_function_parameter_list_in_anonymous_function_signature3265);
				implicit_anonymous_function_parameter_list426=implicit_anonymous_function_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, implicit_anonymous_function_parameter_list426.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_function_signature", 112);
			LeaveRule("anonymous_function_signature", 112);
			LeaveRule_anonymous_function_signature();
	        if (state.backtracking > 0) { Memoize(input, 112, anonymous_function_signature_StartIndex); }

	    }
	 	DebugLocation(456, 1);
		} finally { DebugExitRule(GrammarFileName, "anonymous_function_signature"); }
		return retval;

	}
	// $ANTLR end "anonymous_function_signature"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_implicit_anonymous_function_parameter_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_implicit_anonymous_function_parameter_list() {}

	// $ANTLR start "implicit_anonymous_function_parameter_list"
	// .\\cs.g:457:1: implicit_anonymous_function_parameter_list : implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )* ;
	[GrammarRule("implicit_anonymous_function_parameter_list")]
	private AstParserRuleReturnScope<object, IToken> implicit_anonymous_function_parameter_list()
	{
		EnterRule_implicit_anonymous_function_parameter_list();
		EnterRule("implicit_anonymous_function_parameter_list", 113);
		TraceIn("implicit_anonymous_function_parameter_list", 113);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int implicit_anonymous_function_parameter_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal428 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> implicit_anonymous_function_parameter427 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> implicit_anonymous_function_parameter429 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal428_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "implicit_anonymous_function_parameter_list");
		DebugLocation(457, 88);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 113)) { return retval; }

			// .\\cs.g:457:43: ( implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )* )
			DebugEnterAlt(1);
			// .\\cs.g:458:2: implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(458, 2);
			PushFollow(Follow._implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3274);
			implicit_anonymous_function_parameter427=implicit_anonymous_function_parameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, implicit_anonymous_function_parameter427.Tree);
			DebugLocation(458, 42);
			// .\\cs.g:458:42: ( ',' implicit_anonymous_function_parameter )*
			try { DebugEnterSubRule(123);
			while (true)
			{
				int alt123=2;
				try { DebugEnterDecision(123, decisionCanBacktrack[123]);
				int LA123_0 = input.LA(1);

				if ((LA123_0==74))
				{
					alt123 = 1;
				}


				} finally { DebugExitDecision(123); }
				switch ( alt123 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:458:43: ',' implicit_anonymous_function_parameter
					{
					DebugLocation(458, 43);
					char_literal428=(IToken)Match(input,74,Follow._74_in_implicit_anonymous_function_parameter_list3279); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal428_tree = (object)adaptor.Create(char_literal428);
					adaptor.AddChild(root_0, char_literal428_tree);
					}
					DebugLocation(458, 49);
					PushFollow(Follow._implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3283);
					implicit_anonymous_function_parameter429=implicit_anonymous_function_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, implicit_anonymous_function_parameter429.Tree);

					}
					break;

				default:
					goto loop123;
				}
			}

			loop123:
				;

			} finally { DebugExitSubRule(123); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("implicit_anonymous_function_parameter_list", 113);
			LeaveRule("implicit_anonymous_function_parameter_list", 113);
			LeaveRule_implicit_anonymous_function_parameter_list();
	        if (state.backtracking > 0) { Memoize(input, 113, implicit_anonymous_function_parameter_list_StartIndex); }

	    }
	 	DebugLocation(458, 88);
		} finally { DebugExitRule(GrammarFileName, "implicit_anonymous_function_parameter_list"); }
		return retval;

	}
	// $ANTLR end "implicit_anonymous_function_parameter_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_implicit_anonymous_function_parameter() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_implicit_anonymous_function_parameter() {}

	// $ANTLR start "implicit_anonymous_function_parameter"
	// .\\cs.g:459:1: implicit_anonymous_function_parameter : identifier ;
	[GrammarRule("implicit_anonymous_function_parameter")]
	private AstParserRuleReturnScope<object, IToken> implicit_anonymous_function_parameter()
	{
		EnterRule_implicit_anonymous_function_parameter();
		EnterRule("implicit_anonymous_function_parameter", 114);
		TraceIn("implicit_anonymous_function_parameter", 114);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int implicit_anonymous_function_parameter_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> identifier430 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "implicit_anonymous_function_parameter");
		DebugLocation(459, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 114)) { return retval; }

			// .\\cs.g:459:38: ( identifier )
			DebugEnterAlt(1);
			// .\\cs.g:460:2: identifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(460, 2);
			PushFollow(Follow._identifier_in_implicit_anonymous_function_parameter3293);
			identifier430=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier430.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("implicit_anonymous_function_parameter", 114);
			LeaveRule("implicit_anonymous_function_parameter", 114);
			LeaveRule_implicit_anonymous_function_parameter();
	        if (state.backtracking > 0) { Memoize(input, 114, implicit_anonymous_function_parameter_StartIndex); }

	    }
	 	DebugLocation(460, 11);
		} finally { DebugExitRule(GrammarFileName, "implicit_anonymous_function_parameter"); }
		return retval;

	}
	// $ANTLR end "implicit_anonymous_function_parameter"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_anonymous_function_body() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_anonymous_function_body() {}

	// $ANTLR start "anonymous_function_body"
	// .\\cs.g:461:1: anonymous_function_body : ( expression | block );
	[GrammarRule("anonymous_function_body")]
	private AstParserRuleReturnScope<object, IToken> anonymous_function_body()
	{
		EnterRule_anonymous_function_body();
		EnterRule("anonymous_function_body", 115);
		TraceIn("anonymous_function_body", 115);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int anonymous_function_body_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression431 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> block432 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "anonymous_function_body");
		DebugLocation(461, 9);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 115)) { return retval; }

			// .\\cs.g:461:24: ( expression | block )
			int alt124=2;
			try { DebugEnterDecision(124, decisionCanBacktrack[124]);
			int LA124_0 = input.LA(1);

			if ((LA124_0==Character_literal||LA124_0==FALSE||(LA124_0>=Hex_number && LA124_0<=IDENTIFIER)||(LA124_0>=MINUS && LA124_0<=NUMBER)||LA124_0==Real_literal||LA124_0==STRINGLITERAL||LA124_0==TRUE||LA124_0==Verbatim_string_literal||LA124_0==61||LA124_0==66||(LA124_0>=68 && LA124_0<=69)||(LA124_0>=71 && LA124_0<=72)||LA124_0==75||LA124_0==95||(LA124_0>=97 && LA124_0<=98)||(LA124_0>=100 && LA124_0<=103)||(LA124_0>=105 && LA124_0<=106)||(LA124_0>=109 && LA124_0<=110)||(LA124_0>=114 && LA124_0<=117)||(LA124_0>=119 && LA124_0<=120)||LA124_0==122||LA124_0==126||LA124_0==129||LA124_0==132||LA124_0==135||LA124_0==138||LA124_0==141||(LA124_0>=143 && LA124_0<=144)||(LA124_0>=146 && LA124_0<=148)||(LA124_0>=150 && LA124_0<=152)||LA124_0==154||LA124_0==157||LA124_0==160||LA124_0==162||LA124_0==167||LA124_0==169||(LA124_0>=171 && LA124_0<=174)||LA124_0==177||LA124_0==180||(LA124_0>=183 && LA124_0<=187)||(LA124_0>=189 && LA124_0<=190)||LA124_0==194||LA124_0==196||LA124_0==202))
			{
				alt124 = 1;
			}
			else if ((LA124_0==SEMI||LA124_0==197))
			{
				alt124 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 124, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(124); }
			switch (alt124)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:462:2: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(462, 2);
				PushFollow(Follow._expression_in_anonymous_function_body3300);
				expression431=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression431.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:463:4: block
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(463, 4);
				PushFollow(Follow._block_in_anonymous_function_body3305);
				block432=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block432.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_function_body", 115);
			LeaveRule("anonymous_function_body", 115);
			LeaveRule_anonymous_function_body();
	        if (state.backtracking > 0) { Memoize(input, 115, anonymous_function_body_StartIndex); }

	    }
	 	DebugLocation(463, 9);
		} finally { DebugExitRule(GrammarFileName, "anonymous_function_body"); }
		return retval;

	}
	// $ANTLR end "anonymous_function_body"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_query_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_query_expression() {}

	// $ANTLR start "query_expression"
	// .\\cs.g:468:1: query_expression : from_clause query_body ;
	[GrammarRule("query_expression")]
	private AstParserRuleReturnScope<object, IToken> query_expression()
	{
		EnterRule_query_expression();
		EnterRule("query_expression", 116);
		TraceIn("query_expression", 116);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int query_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> from_clause433 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> query_body434 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "query_expression");
		DebugLocation(468, 26);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 116)) { return retval; }

			// .\\cs.g:468:17: ( from_clause query_body )
			DebugEnterAlt(1);
			// .\\cs.g:469:2: from_clause query_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(469, 2);
			PushFollow(Follow._from_clause_in_query_expression3317);
			from_clause433=from_clause();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, from_clause433.Tree);
			DebugLocation(469, 16);
			PushFollow(Follow._query_body_in_query_expression3321);
			query_body434=query_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, query_body434.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("query_expression", 116);
			LeaveRule("query_expression", 116);
			LeaveRule_query_expression();
	        if (state.backtracking > 0) { Memoize(input, 116, query_expression_StartIndex); }

	    }
	 	DebugLocation(469, 26);
		} finally { DebugExitRule(GrammarFileName, "query_expression"); }
		return retval;

	}
	// $ANTLR end "query_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_query_body() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_query_body() {}

	// $ANTLR start "query_body"
	// .\\cs.g:470:1: query_body : ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )? ;
	[GrammarRule("query_body")]
	private AstParserRuleReturnScope<object, IToken> query_body()
	{
		EnterRule_query_body();
		EnterRule("query_body", 117);
		TraceIn("query_body", 117);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int query_body_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> query_body_clauses435 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_or_group_clause436 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> query_continuation437 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "query_body");
		DebugLocation(470, 82);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 117)) { return retval; }

			// .\\cs.g:470:11: ( ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )? )
			DebugEnterAlt(1);
			// .\\cs.g:472:2: ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(472, 2);
			// .\\cs.g:472:2: ( query_body_clauses )?
			int alt125=2;
			try { DebugEnterSubRule(125);
			try { DebugEnterDecision(125, decisionCanBacktrack[125]);
			int LA125_0 = input.LA(1);

			if ((LA125_0==132||(LA125_0>=143 && LA125_0<=144)||LA125_0==154||LA125_0==194))
			{
				alt125 = 1;
			}
			} finally { DebugExitDecision(125); }
			switch (alt125)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:472:2: query_body_clauses
				{
				DebugLocation(472, 2);
				PushFollow(Follow._query_body_clauses_in_query_body3331);
				query_body_clauses435=query_body_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, query_body_clauses435.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(125); }

			DebugLocation(472, 24);
			PushFollow(Follow._select_or_group_clause_in_query_body3336);
			select_or_group_clause436=select_or_group_clause();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, select_or_group_clause436.Tree);
			DebugLocation(472, 49);
			// .\\cs.g:472:49: ( ( 'into' )=> query_continuation )?
			int alt126=2;
			try { DebugEnterSubRule(126);
			try { DebugEnterDecision(126, decisionCanBacktrack[126]);
			int LA126_0 = input.LA(1);

			if ((LA126_0==141))
			{
				int LA126_1 = input.LA(2);

				if ((EvaluatePredicate(synpred23_cs_fragment)))
				{
					alt126 = 1;
				}
			}
			} finally { DebugExitDecision(126); }
			switch (alt126)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:472:50: ( 'into' )=> query_continuation
				{
				DebugLocation(472, 62);
				PushFollow(Follow._query_continuation_in_query_body3347);
				query_continuation437=query_continuation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, query_continuation437.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(126); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("query_body", 117);
			LeaveRule("query_body", 117);
			LeaveRule_query_body();
	        if (state.backtracking > 0) { Memoize(input, 117, query_body_StartIndex); }

	    }
	 	DebugLocation(472, 82);
		} finally { DebugExitRule(GrammarFileName, "query_body"); }
		return retval;

	}
	// $ANTLR end "query_body"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_query_continuation() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_query_continuation() {}

	// $ANTLR start "query_continuation"
	// .\\cs.g:473:1: query_continuation : 'into' identifier query_body ;
	[GrammarRule("query_continuation")]
	private AstParserRuleReturnScope<object, IToken> query_continuation()
	{
		EnterRule_query_continuation();
		EnterRule("query_continuation", 118);
		TraceIn("query_continuation", 118);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int query_continuation_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal438 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier439 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> query_body440 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal438_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "query_continuation");
		DebugLocation(473, 33);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 118)) { return retval; }

			// .\\cs.g:473:19: ( 'into' identifier query_body )
			DebugEnterAlt(1);
			// .\\cs.g:474:2: 'into' identifier query_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(474, 2);
			string_literal438=(IToken)Match(input,141,Follow._141_in_query_continuation3357); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal438_tree = (object)adaptor.Create(string_literal438);
			adaptor.AddChild(root_0, string_literal438_tree);
			}
			DebugLocation(474, 11);
			PushFollow(Follow._identifier_in_query_continuation3361);
			identifier439=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier439.Tree);
			DebugLocation(474, 24);
			PushFollow(Follow._query_body_in_query_continuation3365);
			query_body440=query_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, query_body440.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("query_continuation", 118);
			LeaveRule("query_continuation", 118);
			LeaveRule_query_continuation();
	        if (state.backtracking > 0) { Memoize(input, 118, query_continuation_StartIndex); }

	    }
	 	DebugLocation(474, 33);
		} finally { DebugExitRule(GrammarFileName, "query_continuation"); }
		return retval;

	}
	// $ANTLR end "query_continuation"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_query_body_clauses() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_query_body_clauses() {}

	// $ANTLR start "query_body_clauses"
	// .\\cs.g:475:1: query_body_clauses : ( query_body_clause )+ ;
	[GrammarRule("query_body_clauses")]
	private AstParserRuleReturnScope<object, IToken> query_body_clauses()
	{
		EnterRule_query_body_clauses();
		EnterRule("query_body_clauses", 119);
		TraceIn("query_body_clauses", 119);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int query_body_clauses_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> query_body_clause441 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "query_body_clauses");
		DebugLocation(475, 20);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 119)) { return retval; }

			// .\\cs.g:475:19: ( ( query_body_clause )+ )
			DebugEnterAlt(1);
			// .\\cs.g:476:2: ( query_body_clause )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(476, 2);
			// .\\cs.g:476:2: ( query_body_clause )+
			int cnt127=0;
			try { DebugEnterSubRule(127);
			while (true)
			{
				int alt127=2;
				try { DebugEnterDecision(127, decisionCanBacktrack[127]);
				int LA127_0 = input.LA(1);

				if ((LA127_0==132||(LA127_0>=143 && LA127_0<=144)||LA127_0==154||LA127_0==194))
				{
					alt127 = 1;
				}


				} finally { DebugExitDecision(127); }
				switch (alt127)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:476:2: query_body_clause
					{
					DebugLocation(476, 2);
					PushFollow(Follow._query_body_clause_in_query_body_clauses3372);
					query_body_clause441=query_body_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, query_body_clause441.Tree);

					}
					break;

				default:
					if (cnt127 >= 1)
						goto loop127;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee127 = new EarlyExitException( 127, input );
					DebugRecognitionException(eee127);
					throw eee127;
				}
				cnt127++;
			}
			loop127:
				;

			} finally { DebugExitSubRule(127); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("query_body_clauses", 119);
			LeaveRule("query_body_clauses", 119);
			LeaveRule_query_body_clauses();
	        if (state.backtracking > 0) { Memoize(input, 119, query_body_clauses_StartIndex); }

	    }
	 	DebugLocation(476, 20);
		} finally { DebugExitRule(GrammarFileName, "query_body_clauses"); }
		return retval;

	}
	// $ANTLR end "query_body_clauses"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_query_body_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_query_body_clause() {}

	// $ANTLR start "query_body_clause"
	// .\\cs.g:477:1: query_body_clause : ( from_clause | let_clause | where_clause | join_clause | orderby_clause );
	[GrammarRule("query_body_clause")]
	private AstParserRuleReturnScope<object, IToken> query_body_clause()
	{
		EnterRule_query_body_clause();
		EnterRule("query_body_clause", 120);
		TraceIn("query_body_clause", 120);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int query_body_clause_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> from_clause442 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> let_clause443 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> where_clause444 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> join_clause445 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_clause446 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "query_body_clause");
		DebugLocation(477, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 120)) { return retval; }

			// .\\cs.g:477:18: ( from_clause | let_clause | where_clause | join_clause | orderby_clause )
			int alt128=5;
			try { DebugEnterDecision(128, decisionCanBacktrack[128]);
			switch (input.LA(1))
			{
			case 132:
				{
				alt128 = 1;
				}
				break;
			case 144:
				{
				alt128 = 2;
				}
				break;
			case 194:
				{
				alt128 = 3;
				}
				break;
			case 143:
				{
				alt128 = 4;
				}
				break;
			case 154:
				{
				alt128 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 128, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(128); }
			switch (alt128)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:478:2: from_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(478, 2);
				PushFollow(Follow._from_clause_in_query_body_clause3381);
				from_clause442=from_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, from_clause442.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:479:4: let_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(479, 4);
				PushFollow(Follow._let_clause_in_query_body_clause3386);
				let_clause443=let_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, let_clause443.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:480:4: where_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(480, 4);
				PushFollow(Follow._where_clause_in_query_body_clause3391);
				where_clause444=where_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, where_clause444.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// .\\cs.g:481:4: join_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(481, 4);
				PushFollow(Follow._join_clause_in_query_body_clause3396);
				join_clause445=join_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, join_clause445.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// .\\cs.g:482:4: orderby_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(482, 4);
				PushFollow(Follow._orderby_clause_in_query_body_clause3401);
				orderby_clause446=orderby_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, orderby_clause446.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("query_body_clause", 120);
			LeaveRule("query_body_clause", 120);
			LeaveRule_query_body_clause();
	        if (state.backtracking > 0) { Memoize(input, 120, query_body_clause_StartIndex); }

	    }
	 	DebugLocation(482, 17);
		} finally { DebugExitRule(GrammarFileName, "query_body_clause"); }
		return retval;

	}
	// $ANTLR end "query_body_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause() {}

	// $ANTLR start "from_clause"
	// .\\cs.g:483:1: from_clause : 'from' ( type )? identifier 'in' expression ;
	[GrammarRule("from_clause")]
	private AstParserRuleReturnScope<object, IToken> from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 121);
		TraceIn("from_clause", 121);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int from_clause_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal447 = default(IToken);
	    IToken string_literal450 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type448 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier449 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression451 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal447_tree = default(object);
	    object string_literal450_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(483, 49);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 121)) { return retval; }

			// .\\cs.g:483:12: ( 'from' ( type )? identifier 'in' expression )
			DebugEnterAlt(1);
			// .\\cs.g:484:2: 'from' ( type )? identifier 'in' expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(484, 2);
			string_literal447=(IToken)Match(input,132,Follow._132_in_from_clause3408); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal447_tree = (object)adaptor.Create(string_literal447);
			adaptor.AddChild(root_0, string_literal447_tree);
			}
			DebugLocation(484, 11);
			// .\\cs.g:484:11: ( type )?
			int alt129=2;
			try { DebugEnterSubRule(129);
			try { DebugEnterDecision(129, decisionCanBacktrack[129]);
			int LA129_0 = input.LA(1);

			if ((LA129_0==103||LA129_0==106||LA129_0==109||LA129_0==114||LA129_0==119||LA129_0==129||LA129_0==138||LA129_0==146||LA129_0==151||LA129_0==169||LA129_0==173||LA129_0==177||(LA129_0>=185 && LA129_0<=186)||LA129_0==189||LA129_0==192))
			{
				alt129 = 1;
			}
			else if ((LA129_0==IDENTIFIER||LA129_0==95||(LA129_0>=97 && LA129_0<=98)||(LA129_0>=100 && LA129_0<=101)||LA129_0==105||LA129_0==117||LA129_0==120||LA129_0==122||LA129_0==126||LA129_0==132||LA129_0==135||LA129_0==141||(LA129_0>=143 && LA129_0<=144)||(LA129_0>=147 && LA129_0<=148)||LA129_0==152||LA129_0==154||LA129_0==157||LA129_0==160||LA129_0==162||LA129_0==167||(LA129_0>=171 && LA129_0<=172)||LA129_0==183||LA129_0==190||LA129_0==194||LA129_0==196))
			{
				int LA129_2 = input.LA(2);

				if ((LA129_2==DOT||LA129_2==IDENTIFIER||LA129_2==69||(LA129_2>=80 && LA129_2<=81)||LA129_2==89||LA129_2==91||LA129_2==95||(LA129_2>=97 && LA129_2<=98)||(LA129_2>=100 && LA129_2<=101)||LA129_2==105||LA129_2==117||LA129_2==120||LA129_2==122||LA129_2==126||LA129_2==132||LA129_2==135||LA129_2==141||(LA129_2>=143 && LA129_2<=144)||(LA129_2>=147 && LA129_2<=148)||LA129_2==152||LA129_2==154||LA129_2==157||LA129_2==160||LA129_2==162||LA129_2==167||(LA129_2>=171 && LA129_2<=172)||LA129_2==183||LA129_2==190||LA129_2==194||LA129_2==196))
				{
					alt129 = 1;
				}
			}
			} finally { DebugExitDecision(129); }
			switch (alt129)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:484:11: type
				{
				DebugLocation(484, 11);
				PushFollow(Follow._type_in_from_clause3412);
				type448=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type448.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(129); }

			DebugLocation(484, 19);
			PushFollow(Follow._identifier_in_from_clause3417);
			identifier449=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier449.Tree);
			DebugLocation(484, 32);
			string_literal450=(IToken)Match(input,137,Follow._137_in_from_clause3421); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal450_tree = (object)adaptor.Create(string_literal450);
			adaptor.AddChild(root_0, string_literal450_tree);
			}
			DebugLocation(484, 39);
			PushFollow(Follow._expression_in_from_clause3425);
			expression451=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression451.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 121);
			LeaveRule("from_clause", 121);
			LeaveRule_from_clause();
	        if (state.backtracking > 0) { Memoize(input, 121, from_clause_StartIndex); }

	    }
	 	DebugLocation(484, 49);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_join_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_join_clause() {}

	// $ANTLR start "join_clause"
	// .\\cs.g:485:1: join_clause : 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? ;
	[GrammarRule("join_clause")]
	private AstParserRuleReturnScope<object, IToken> join_clause()
	{
		EnterRule_join_clause();
		EnterRule("join_clause", 122);
		TraceIn("join_clause", 122);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int join_clause_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal452 = default(IToken);
	    IToken string_literal455 = default(IToken);
	    IToken string_literal457 = default(IToken);
	    IToken string_literal459 = default(IToken);
	    IToken string_literal461 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type453 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier454 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression456 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression458 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression460 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier462 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal452_tree = default(object);
	    object string_literal455_tree = default(object);
	    object string_literal457_tree = default(object);
	    object string_literal459_tree = default(object);
	    object string_literal461_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "join_clause");
		DebugLocation(485, 114);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 122)) { return retval; }

			// .\\cs.g:485:12: ( 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? )
			DebugEnterAlt(1);
			// .\\cs.g:486:2: 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(486, 2);
			string_literal452=(IToken)Match(input,143,Follow._143_in_join_clause3433); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal452_tree = (object)adaptor.Create(string_literal452);
			adaptor.AddChild(root_0, string_literal452_tree);
			}
			DebugLocation(486, 11);
			// .\\cs.g:486:11: ( type )?
			int alt130=2;
			try { DebugEnterSubRule(130);
			try { DebugEnterDecision(130, decisionCanBacktrack[130]);
			int LA130_0 = input.LA(1);

			if ((LA130_0==103||LA130_0==106||LA130_0==109||LA130_0==114||LA130_0==119||LA130_0==129||LA130_0==138||LA130_0==146||LA130_0==151||LA130_0==169||LA130_0==173||LA130_0==177||(LA130_0>=185 && LA130_0<=186)||LA130_0==189||LA130_0==192))
			{
				alt130 = 1;
			}
			else if ((LA130_0==IDENTIFIER||LA130_0==95||(LA130_0>=97 && LA130_0<=98)||(LA130_0>=100 && LA130_0<=101)||LA130_0==105||LA130_0==117||LA130_0==120||LA130_0==122||LA130_0==126||LA130_0==132||LA130_0==135||LA130_0==141||(LA130_0>=143 && LA130_0<=144)||(LA130_0>=147 && LA130_0<=148)||LA130_0==152||LA130_0==154||LA130_0==157||LA130_0==160||LA130_0==162||LA130_0==167||(LA130_0>=171 && LA130_0<=172)||LA130_0==183||LA130_0==190||LA130_0==194||LA130_0==196))
			{
				int LA130_2 = input.LA(2);

				if ((LA130_2==DOT||LA130_2==IDENTIFIER||LA130_2==69||(LA130_2>=80 && LA130_2<=81)||LA130_2==89||LA130_2==91||LA130_2==95||(LA130_2>=97 && LA130_2<=98)||(LA130_2>=100 && LA130_2<=101)||LA130_2==105||LA130_2==117||LA130_2==120||LA130_2==122||LA130_2==126||LA130_2==132||LA130_2==135||LA130_2==141||(LA130_2>=143 && LA130_2<=144)||(LA130_2>=147 && LA130_2<=148)||LA130_2==152||LA130_2==154||LA130_2==157||LA130_2==160||LA130_2==162||LA130_2==167||(LA130_2>=171 && LA130_2<=172)||LA130_2==183||LA130_2==190||LA130_2==194||LA130_2==196))
				{
					alt130 = 1;
				}
			}
			} finally { DebugExitDecision(130); }
			switch (alt130)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:486:11: type
				{
				DebugLocation(486, 11);
				PushFollow(Follow._type_in_join_clause3437);
				type453=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type453.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(130); }

			DebugLocation(486, 19);
			PushFollow(Follow._identifier_in_join_clause3442);
			identifier454=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier454.Tree);
			DebugLocation(486, 32);
			string_literal455=(IToken)Match(input,137,Follow._137_in_join_clause3446); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal455_tree = (object)adaptor.Create(string_literal455);
			adaptor.AddChild(root_0, string_literal455_tree);
			}
			DebugLocation(486, 39);
			PushFollow(Follow._expression_in_join_clause3450);
			expression456=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression456.Tree);
			DebugLocation(486, 52);
			string_literal457=(IToken)Match(input,152,Follow._152_in_join_clause3454); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal457_tree = (object)adaptor.Create(string_literal457);
			adaptor.AddChild(root_0, string_literal457_tree);
			}
			DebugLocation(486, 59);
			PushFollow(Follow._expression_in_join_clause3458);
			expression458=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression458.Tree);
			DebugLocation(486, 72);
			string_literal459=(IToken)Match(input,122,Follow._122_in_join_clause3462); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal459_tree = (object)adaptor.Create(string_literal459);
			adaptor.AddChild(root_0, string_literal459_tree);
			}
			DebugLocation(486, 83);
			PushFollow(Follow._expression_in_join_clause3466);
			expression460=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression460.Tree);
			DebugLocation(486, 94);
			// .\\cs.g:486:94: ( 'into' identifier )?
			int alt131=2;
			try { DebugEnterSubRule(131);
			try { DebugEnterDecision(131, decisionCanBacktrack[131]);
			int LA131_0 = input.LA(1);

			if ((LA131_0==141))
			{
				alt131 = 1;
			}
			} finally { DebugExitDecision(131); }
			switch (alt131)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:486:95: 'into' identifier
				{
				DebugLocation(486, 95);
				string_literal461=(IToken)Match(input,141,Follow._141_in_join_clause3469); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal461_tree = (object)adaptor.Create(string_literal461);
				adaptor.AddChild(root_0, string_literal461_tree);
				}
				DebugLocation(486, 102);
				PushFollow(Follow._identifier_in_join_clause3471);
				identifier462=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier462.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(131); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("join_clause", 122);
			LeaveRule("join_clause", 122);
			LeaveRule_join_clause();
	        if (state.backtracking > 0) { Memoize(input, 122, join_clause_StartIndex); }

	    }
	 	DebugLocation(486, 114);
		} finally { DebugExitRule(GrammarFileName, "join_clause"); }
		return retval;

	}
	// $ANTLR end "join_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_let_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_let_clause() {}

	// $ANTLR start "let_clause"
	// .\\cs.g:487:1: let_clause : 'let' identifier '=' expression ;
	[GrammarRule("let_clause")]
	private AstParserRuleReturnScope<object, IToken> let_clause()
	{
		EnterRule_let_clause();
		EnterRule("let_clause", 123);
		TraceIn("let_clause", 123);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int let_clause_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal463 = default(IToken);
	    IToken char_literal465 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier464 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression466 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal463_tree = default(object);
	    object char_literal465_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "let_clause");
		DebugLocation(487, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 123)) { return retval; }

			// .\\cs.g:487:11: ( 'let' identifier '=' expression )
			DebugEnterAlt(1);
			// .\\cs.g:488:2: 'let' identifier '=' expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(488, 2);
			string_literal463=(IToken)Match(input,144,Follow._144_in_let_clause3481); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal463_tree = (object)adaptor.Create(string_literal463);
			adaptor.AddChild(root_0, string_literal463_tree);
			}
			DebugLocation(488, 10);
			PushFollow(Follow._identifier_in_let_clause3485);
			identifier464=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier464.Tree);
			DebugLocation(488, 23);
			char_literal465=(IToken)Match(input,85,Follow._85_in_let_clause3489); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal465_tree = (object)adaptor.Create(char_literal465);
			adaptor.AddChild(root_0, char_literal465_tree);
			}
			DebugLocation(488, 29);
			PushFollow(Follow._expression_in_let_clause3493);
			expression466=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression466.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("let_clause", 123);
			LeaveRule("let_clause", 123);
			LeaveRule_let_clause();
	        if (state.backtracking > 0) { Memoize(input, 123, let_clause_StartIndex); }

	    }
	 	DebugLocation(488, 38);
		} finally { DebugExitRule(GrammarFileName, "let_clause"); }
		return retval;

	}
	// $ANTLR end "let_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_clause() {}

	// $ANTLR start "orderby_clause"
	// .\\cs.g:489:1: orderby_clause : 'orderby' ordering_list ;
	[GrammarRule("orderby_clause")]
	private AstParserRuleReturnScope<object, IToken> orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 124);
		TraceIn("orderby_clause", 124);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int orderby_clause_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal467 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> ordering_list468 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal467_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(489, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 124)) { return retval; }

			// .\\cs.g:489:15: ( 'orderby' ordering_list )
			DebugEnterAlt(1);
			// .\\cs.g:490:2: 'orderby' ordering_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(490, 2);
			string_literal467=(IToken)Match(input,154,Follow._154_in_orderby_clause3500); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal467_tree = (object)adaptor.Create(string_literal467);
			adaptor.AddChild(root_0, string_literal467_tree);
			}
			DebugLocation(490, 14);
			PushFollow(Follow._ordering_list_in_orderby_clause3504);
			ordering_list468=ordering_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ordering_list468.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 124);
			LeaveRule("orderby_clause", 124);
			LeaveRule_orderby_clause();
	        if (state.backtracking > 0) { Memoize(input, 124, orderby_clause_StartIndex); }

	    }
	 	DebugLocation(490, 27);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_ordering_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_ordering_list() {}

	// $ANTLR start "ordering_list"
	// .\\cs.g:491:1: ordering_list : ordering ( ',' ordering )* ;
	[GrammarRule("ordering_list")]
	private AstParserRuleReturnScope<object, IToken> ordering_list()
	{
		EnterRule_ordering_list();
		EnterRule("ordering_list", 125);
		TraceIn("ordering_list", 125);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int ordering_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal470 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> ordering469 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> ordering471 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal470_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "ordering_list");
		DebugLocation(491, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 125)) { return retval; }

			// .\\cs.g:491:14: ( ordering ( ',' ordering )* )
			DebugEnterAlt(1);
			// .\\cs.g:492:2: ordering ( ',' ordering )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(492, 2);
			PushFollow(Follow._ordering_in_ordering_list3512);
			ordering469=ordering();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ordering469.Tree);
			DebugLocation(492, 13);
			// .\\cs.g:492:13: ( ',' ordering )*
			try { DebugEnterSubRule(132);
			while (true)
			{
				int alt132=2;
				try { DebugEnterDecision(132, decisionCanBacktrack[132]);
				int LA132_0 = input.LA(1);

				if ((LA132_0==74))
				{
					alt132 = 1;
				}


				} finally { DebugExitDecision(132); }
				switch ( alt132 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:492:14: ',' ordering
					{
					DebugLocation(492, 14);
					char_literal470=(IToken)Match(input,74,Follow._74_in_ordering_list3517); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal470_tree = (object)adaptor.Create(char_literal470);
					adaptor.AddChild(root_0, char_literal470_tree);
					}
					DebugLocation(492, 20);
					PushFollow(Follow._ordering_in_ordering_list3521);
					ordering471=ordering();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, ordering471.Tree);

					}
					break;

				default:
					goto loop132;
				}
			}

			loop132:
				;

			} finally { DebugExitSubRule(132); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ordering_list", 125);
			LeaveRule("ordering_list", 125);
			LeaveRule_ordering_list();
	        if (state.backtracking > 0) { Memoize(input, 125, ordering_list_StartIndex); }

	    }
	 	DebugLocation(492, 30);
		} finally { DebugExitRule(GrammarFileName, "ordering_list"); }
		return retval;

	}
	// $ANTLR end "ordering_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_ordering() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_ordering() {}

	// $ANTLR start "ordering"
	// .\\cs.g:493:1: ordering : expression ordering_direction ;
	[GrammarRule("ordering")]
	private AstParserRuleReturnScope<object, IToken> ordering()
	{
		EnterRule_ordering();
		EnterRule("ordering", 126);
		TraceIn("ordering", 126);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int ordering_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression472 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> ordering_direction473 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "ordering");
		DebugLocation(493, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 126)) { return retval; }

			// .\\cs.g:493:9: ( expression ordering_direction )
			DebugEnterAlt(1);
			// .\\cs.g:494:2: expression ordering_direction
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(494, 2);
			PushFollow(Follow._expression_in_ordering3531);
			expression472=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression472.Tree);
			DebugLocation(494, 16);
			PushFollow(Follow._ordering_direction_in_ordering3536);
			ordering_direction473=ordering_direction();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ordering_direction473.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ordering", 126);
			LeaveRule("ordering", 126);
			LeaveRule_ordering();
	        if (state.backtracking > 0) { Memoize(input, 126, ordering_StartIndex); }

	    }
	 	DebugLocation(495, 1);
		} finally { DebugExitRule(GrammarFileName, "ordering"); }
		return retval;

	}
	// $ANTLR end "ordering"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_ordering_direction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_ordering_direction() {}

	// $ANTLR start "ordering_direction"
	// .\\cs.g:496:1: ordering_direction : ( 'ascending' | 'descending' );
	[GrammarRule("ordering_direction")]
	private AstParserRuleReturnScope<object, IToken> ordering_direction()
	{
		EnterRule_ordering_direction();
		EnterRule("ordering_direction", 127);
		TraceIn("ordering_direction", 127);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int ordering_direction_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set474 = default(IToken);

	    object set474_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "ordering_direction");
		DebugLocation(496, 16);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 127)) { return retval; }

			// .\\cs.g:496:19: ( 'ascending' | 'descending' )
			DebugEnterAlt(1);
			// .\\cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(496, 19);

			set474=(IToken)input.LT(1);
			if (input.LA(1)==100||input.LA(1)==117)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set474));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ordering_direction", 127);
			LeaveRule("ordering_direction", 127);
			LeaveRule_ordering_direction();
	        if (state.backtracking > 0) { Memoize(input, 127, ordering_direction_StartIndex); }

	    }
	 	DebugLocation(498, 16);
		} finally { DebugExitRule(GrammarFileName, "ordering_direction"); }
		return retval;

	}
	// $ANTLR end "ordering_direction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_or_group_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_or_group_clause() {}

	// $ANTLR start "select_or_group_clause"
	// .\\cs.g:499:1: select_or_group_clause : ( select_clause | group_clause );
	[GrammarRule("select_or_group_clause")]
	private AstParserRuleReturnScope<object, IToken> select_or_group_clause()
	{
		EnterRule_select_or_group_clause();
		EnterRule("select_or_group_clause", 128);
		TraceIn("select_or_group_clause", 128);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int select_or_group_clause_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_clause475 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> group_clause476 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "select_or_group_clause");
		DebugLocation(499, 16);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 128)) { return retval; }

			// .\\cs.g:499:23: ( select_clause | group_clause )
			int alt133=2;
			try { DebugEnterDecision(133, decisionCanBacktrack[133]);
			int LA133_0 = input.LA(1);

			if ((LA133_0==171))
			{
				alt133 = 1;
			}
			else if ((LA133_0==135))
			{
				alt133 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 133, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(133); }
			switch (alt133)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:500:2: select_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(500, 2);
				PushFollow(Follow._select_clause_in_select_or_group_clause3558);
				select_clause475=select_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, select_clause475.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:501:4: group_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(501, 4);
				PushFollow(Follow._group_clause_in_select_or_group_clause3563);
				group_clause476=group_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, group_clause476.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_or_group_clause", 128);
			LeaveRule("select_or_group_clause", 128);
			LeaveRule_select_or_group_clause();
	        if (state.backtracking > 0) { Memoize(input, 128, select_or_group_clause_StartIndex); }

	    }
	 	DebugLocation(501, 16);
		} finally { DebugExitRule(GrammarFileName, "select_or_group_clause"); }
		return retval;

	}
	// $ANTLR end "select_or_group_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_clause() {}

	// $ANTLR start "select_clause"
	// .\\cs.g:502:1: select_clause : 'select' expression ;
	[GrammarRule("select_clause")]
	private AstParserRuleReturnScope<object, IToken> select_clause()
	{
		EnterRule_select_clause();
		EnterRule("select_clause", 129);
		TraceIn("select_clause", 129);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int select_clause_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal477 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression478 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal477_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "select_clause");
		DebugLocation(502, 23);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 129)) { return retval; }

			// .\\cs.g:502:14: ( 'select' expression )
			DebugEnterAlt(1);
			// .\\cs.g:503:2: 'select' expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(503, 2);
			string_literal477=(IToken)Match(input,171,Follow._171_in_select_clause3571); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal477_tree = (object)adaptor.Create(string_literal477);
			adaptor.AddChild(root_0, string_literal477_tree);
			}
			DebugLocation(503, 13);
			PushFollow(Follow._expression_in_select_clause3575);
			expression478=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression478.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_clause", 129);
			LeaveRule("select_clause", 129);
			LeaveRule_select_clause();
	        if (state.backtracking > 0) { Memoize(input, 129, select_clause_StartIndex); }

	    }
	 	DebugLocation(503, 23);
		} finally { DebugExitRule(GrammarFileName, "select_clause"); }
		return retval;

	}
	// $ANTLR end "select_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_group_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_group_clause() {}

	// $ANTLR start "group_clause"
	// .\\cs.g:504:1: group_clause : 'group' expression 'by' expression ;
	[GrammarRule("group_clause")]
	private AstParserRuleReturnScope<object, IToken> group_clause()
	{
		EnterRule_group_clause();
		EnterRule("group_clause", 130);
		TraceIn("group_clause", 130);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int group_clause_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal479 = default(IToken);
	    IToken string_literal481 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression480 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression482 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal479_tree = default(object);
	    object string_literal481_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "group_clause");
		DebugLocation(504, 42);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 130)) { return retval; }

			// .\\cs.g:504:13: ( 'group' expression 'by' expression )
			DebugEnterAlt(1);
			// .\\cs.g:505:2: 'group' expression 'by' expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(505, 2);
			string_literal479=(IToken)Match(input,135,Follow._135_in_group_clause3583); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal479_tree = (object)adaptor.Create(string_literal479);
			adaptor.AddChild(root_0, string_literal479_tree);
			}
			DebugLocation(505, 12);
			PushFollow(Follow._expression_in_group_clause3587);
			expression480=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression480.Tree);
			DebugLocation(505, 25);
			string_literal481=(IToken)Match(input,105,Follow._105_in_group_clause3591); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal481_tree = (object)adaptor.Create(string_literal481);
			adaptor.AddChild(root_0, string_literal481_tree);
			}
			DebugLocation(505, 32);
			PushFollow(Follow._expression_in_group_clause3595);
			expression482=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression482.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("group_clause", 130);
			LeaveRule("group_clause", 130);
			LeaveRule_group_clause();
	        if (state.backtracking > 0) { Memoize(input, 130, group_clause_StartIndex); }

	    }
	 	DebugLocation(505, 42);
		} finally { DebugExitRule(GrammarFileName, "group_clause"); }
		return retval;

	}
	// $ANTLR end "group_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_where_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_where_clause() {}

	// $ANTLR start "where_clause"
	// .\\cs.g:506:1: where_clause : 'where' boolean_expression ;
	[GrammarRule("where_clause")]
	private AstParserRuleReturnScope<object, IToken> where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 131);
		TraceIn("where_clause", 131);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int where_clause_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal483 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> boolean_expression484 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal483_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(506, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 131)) { return retval; }

			// .\\cs.g:506:13: ( 'where' boolean_expression )
			DebugEnterAlt(1);
			// .\\cs.g:507:2: 'where' boolean_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(507, 2);
			string_literal483=(IToken)Match(input,194,Follow._194_in_where_clause3603); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal483_tree = (object)adaptor.Create(string_literal483);
			adaptor.AddChild(root_0, string_literal483_tree);
			}
			DebugLocation(507, 12);
			PushFollow(Follow._boolean_expression_in_where_clause3607);
			boolean_expression484=boolean_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolean_expression484.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 131);
			LeaveRule("where_clause", 131);
			LeaveRule_where_clause();
	        if (state.backtracking > 0) { Memoize(input, 131, where_clause_StartIndex); }

	    }
	 	DebugLocation(507, 30);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_boolean_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_boolean_expression() {}

	// $ANTLR start "boolean_expression"
	// .\\cs.g:508:1: boolean_expression : expression ;
	[GrammarRule("boolean_expression")]
	private AstParserRuleReturnScope<object, IToken> boolean_expression()
	{
		EnterRule_boolean_expression();
		EnterRule("boolean_expression", 132);
		TraceIn("boolean_expression", 132);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int boolean_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression485 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "boolean_expression");
		DebugLocation(508, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 132)) { return retval; }

			// .\\cs.g:508:19: ( expression )
			DebugEnterAlt(1);
			// .\\cs.g:509:2: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(509, 2);
			PushFollow(Follow._expression_in_boolean_expression3615);
			expression485=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression485.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolean_expression", 132);
			LeaveRule("boolean_expression", 132);
			LeaveRule_boolean_expression();
	        if (state.backtracking > 0) { Memoize(input, 132, boolean_expression_StartIndex); }

	    }
	 	DebugLocation(509, 11);
		} finally { DebugExitRule(GrammarFileName, "boolean_expression"); }
		return retval;

	}
	// $ANTLR end "boolean_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_global_attributes() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_global_attributes() {}

	// $ANTLR start "global_attributes"
	// .\\cs.g:514:1: global_attributes : ( global_attribute )+ ;
	[GrammarRule("global_attributes")]
	private AstParserRuleReturnScope<object, IToken> global_attributes()
	{
		EnterRule_global_attributes();
		EnterRule("global_attributes", 133);
		TraceIn("global_attributes", 133);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int global_attributes_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> global_attribute486 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "global_attributes");
		DebugLocation(514, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 133)) { return retval; }

			// .\\cs.g:514:18: ( ( global_attribute )+ )
			DebugEnterAlt(1);
			// .\\cs.g:515:2: ( global_attribute )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(515, 2);
			// .\\cs.g:515:2: ( global_attribute )+
			int cnt134=0;
			try { DebugEnterSubRule(134);
			while (true)
			{
				int alt134=2;
				try { DebugEnterDecision(134, decisionCanBacktrack[134]);
				int LA134_0 = input.LA(1);

				if ((LA134_0==91))
				{
					int LA134_2 = input.LA(2);

					if ((LA134_2==101||LA134_2==148))
					{
						int LA134_3 = input.LA(3);

						if ((LA134_3==79))
						{
							alt134 = 1;
						}


					}


				}


				} finally { DebugExitDecision(134); }
				switch (alt134)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:515:2: global_attribute
					{
					DebugLocation(515, 2);
					PushFollow(Follow._global_attribute_in_global_attributes3627);
					global_attribute486=global_attribute();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, global_attribute486.Tree);

					}
					break;

				default:
					if (cnt134 >= 1)
						goto loop134;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee134 = new EarlyExitException( 134, input );
					DebugRecognitionException(eee134);
					throw eee134;
				}
				cnt134++;
			}
			loop134:
				;

			} finally { DebugExitSubRule(134); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_attributes", 133);
			LeaveRule("global_attributes", 133);
			LeaveRule_global_attributes();
	        if (state.backtracking > 0) { Memoize(input, 133, global_attributes_StartIndex); }

	    }
	 	DebugLocation(515, 19);
		} finally { DebugExitRule(GrammarFileName, "global_attributes"); }
		return retval;

	}
	// $ANTLR end "global_attributes"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_global_attribute() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_global_attribute() {}

	// $ANTLR start "global_attribute"
	// .\\cs.g:516:1: global_attribute : '[' global_attribute_target_specifier attribute_list ( ',' )? ']' ;
	[GrammarRule("global_attribute")]
	private AstParserRuleReturnScope<object, IToken> global_attribute()
	{
		EnterRule_global_attribute();
		EnterRule("global_attribute", 134);
		TraceIn("global_attribute", 134);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int global_attribute_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal487 = default(IToken);
	    IToken char_literal490 = default(IToken);
	    IToken char_literal491 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> global_attribute_target_specifier488 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> attribute_list489 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal487_tree = default(object);
	    object char_literal490_tree = default(object);
	    object char_literal491_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "global_attribute");
		DebugLocation(516, 71);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 134)) { return retval; }

			// .\\cs.g:516:17: ( '[' global_attribute_target_specifier attribute_list ( ',' )? ']' )
			DebugEnterAlt(1);
			// .\\cs.g:517:2: '[' global_attribute_target_specifier attribute_list ( ',' )? ']'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(517, 2);
			char_literal487=(IToken)Match(input,91,Follow._91_in_global_attribute3637); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal487_tree = (object)adaptor.Create(char_literal487);
			adaptor.AddChild(root_0, char_literal487_tree);
			}
			DebugLocation(517, 8);
			PushFollow(Follow._global_attribute_target_specifier_in_global_attribute3641);
			global_attribute_target_specifier488=global_attribute_target_specifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, global_attribute_target_specifier488.Tree);
			DebugLocation(517, 44);
			PushFollow(Follow._attribute_list_in_global_attribute3645);
			attribute_list489=attribute_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_list489.Tree);
			DebugLocation(517, 61);
			// .\\cs.g:517:61: ( ',' )?
			int alt135=2;
			try { DebugEnterSubRule(135);
			try { DebugEnterDecision(135, decisionCanBacktrack[135]);
			int LA135_0 = input.LA(1);

			if ((LA135_0==74))
			{
				alt135 = 1;
			}
			} finally { DebugExitDecision(135); }
			switch (alt135)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:517:61: ','
				{
				DebugLocation(517, 61);
				char_literal490=(IToken)Match(input,74,Follow._74_in_global_attribute3649); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal490_tree = (object)adaptor.Create(char_literal490);
				adaptor.AddChild(root_0, char_literal490_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(135); }

			DebugLocation(517, 68);
			char_literal491=(IToken)Match(input,92,Follow._92_in_global_attribute3654); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal491_tree = (object)adaptor.Create(char_literal491);
			adaptor.AddChild(root_0, char_literal491_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_attribute", 134);
			LeaveRule("global_attribute", 134);
			LeaveRule_global_attribute();
	        if (state.backtracking > 0) { Memoize(input, 134, global_attribute_StartIndex); }

	    }
	 	DebugLocation(517, 71);
		} finally { DebugExitRule(GrammarFileName, "global_attribute"); }
		return retval;

	}
	// $ANTLR end "global_attribute"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_global_attribute_target_specifier() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_global_attribute_target_specifier() {}

	// $ANTLR start "global_attribute_target_specifier"
	// .\\cs.g:518:1: global_attribute_target_specifier : global_attribute_target ':' ;
	[GrammarRule("global_attribute_target_specifier")]
	private AstParserRuleReturnScope<object, IToken> global_attribute_target_specifier()
	{
		EnterRule_global_attribute_target_specifier();
		EnterRule("global_attribute_target_specifier", 135);
		TraceIn("global_attribute_target_specifier", 135);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int global_attribute_target_specifier_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal493 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> global_attribute_target492 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal493_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "global_attribute_target_specifier");
		DebugLocation(518, 31);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 135)) { return retval; }

			// .\\cs.g:518:34: ( global_attribute_target ':' )
			DebugEnterAlt(1);
			// .\\cs.g:519:2: global_attribute_target ':'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(519, 2);
			PushFollow(Follow._global_attribute_target_in_global_attribute_target_specifier3663);
			global_attribute_target492=global_attribute_target();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, global_attribute_target492.Tree);
			DebugLocation(519, 28);
			char_literal493=(IToken)Match(input,79,Follow._79_in_global_attribute_target_specifier3667); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal493_tree = (object)adaptor.Create(char_literal493);
			adaptor.AddChild(root_0, char_literal493_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_attribute_target_specifier", 135);
			LeaveRule("global_attribute_target_specifier", 135);
			LeaveRule_global_attribute_target_specifier();
	        if (state.backtracking > 0) { Memoize(input, 135, global_attribute_target_specifier_StartIndex); }

	    }
	 	DebugLocation(519, 31);
		} finally { DebugExitRule(GrammarFileName, "global_attribute_target_specifier"); }
		return retval;

	}
	// $ANTLR end "global_attribute_target_specifier"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_global_attribute_target() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_global_attribute_target() {}

	// $ANTLR start "global_attribute_target"
	// .\\cs.g:520:1: global_attribute_target : ( 'assembly' | 'module' );
	[GrammarRule("global_attribute_target")]
	private AstParserRuleReturnScope<object, IToken> global_attribute_target()
	{
		EnterRule_global_attribute_target();
		EnterRule("global_attribute_target", 136);
		TraceIn("global_attribute_target", 136);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int global_attribute_target_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set494 = default(IToken);

	    object set494_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "global_attribute_target");
		DebugLocation(520, 23);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 136)) { return retval; }

			// .\\cs.g:520:24: ( 'assembly' | 'module' )
			DebugEnterAlt(1);
			// .\\cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(520, 24);

			set494=(IToken)input.LT(1);
			if (input.LA(1)==101||input.LA(1)==148)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set494));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_attribute_target", 136);
			LeaveRule("global_attribute_target", 136);
			LeaveRule_global_attribute_target();
	        if (state.backtracking > 0) { Memoize(input, 136, global_attribute_target_StartIndex); }

	    }
	 	DebugLocation(521, 23);
		} finally { DebugExitRule(GrammarFileName, "global_attribute_target"); }
		return retval;

	}
	// $ANTLR end "global_attribute_target"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_attributes() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_attributes() {}

	// $ANTLR start "attributes"
	// .\\cs.g:522:1: attributes : attribute_sections ;
	[GrammarRule("attributes")]
	private AstParserRuleReturnScope<object, IToken> attributes()
	{
		EnterRule_attributes();
		EnterRule("attributes", 137);
		TraceIn("attributes", 137);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int attributes_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> attribute_sections495 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "attributes");
		DebugLocation(522, 20);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 137)) { return retval; }

			// .\\cs.g:522:11: ( attribute_sections )
			DebugEnterAlt(1);
			// .\\cs.g:523:2: attribute_sections
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(523, 2);
			PushFollow(Follow._attribute_sections_in_attributes3689);
			attribute_sections495=attribute_sections();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_sections495.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attributes", 137);
			LeaveRule("attributes", 137);
			LeaveRule_attributes();
	        if (state.backtracking > 0) { Memoize(input, 137, attributes_StartIndex); }

	    }
	 	DebugLocation(523, 20);
		} finally { DebugExitRule(GrammarFileName, "attributes"); }
		return retval;

	}
	// $ANTLR end "attributes"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_attribute_sections() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_attribute_sections() {}

	// $ANTLR start "attribute_sections"
	// .\\cs.g:524:1: attribute_sections : ( attribute_section )+ ;
	[GrammarRule("attribute_sections")]
	private AstParserRuleReturnScope<object, IToken> attribute_sections()
	{
		EnterRule_attribute_sections();
		EnterRule("attribute_sections", 138);
		TraceIn("attribute_sections", 138);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int attribute_sections_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> attribute_section496 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "attribute_sections");
		DebugLocation(524, 20);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 138)) { return retval; }

			// .\\cs.g:524:19: ( ( attribute_section )+ )
			DebugEnterAlt(1);
			// .\\cs.g:525:2: ( attribute_section )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(525, 2);
			// .\\cs.g:525:2: ( attribute_section )+
			int cnt136=0;
			try { DebugEnterSubRule(136);
			while (true)
			{
				int alt136=2;
				try { DebugEnterDecision(136, decisionCanBacktrack[136]);
				int LA136_0 = input.LA(1);

				if ((LA136_0==91))
				{
					alt136 = 1;
				}


				} finally { DebugExitDecision(136); }
				switch (alt136)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:525:2: attribute_section
					{
					DebugLocation(525, 2);
					PushFollow(Follow._attribute_section_in_attribute_sections3698);
					attribute_section496=attribute_section();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_section496.Tree);

					}
					break;

				default:
					if (cnt136 >= 1)
						goto loop136;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee136 = new EarlyExitException( 136, input );
					DebugRecognitionException(eee136);
					throw eee136;
				}
				cnt136++;
			}
			loop136:
				;

			} finally { DebugExitSubRule(136); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_sections", 138);
			LeaveRule("attribute_sections", 138);
			LeaveRule_attribute_sections();
	        if (state.backtracking > 0) { Memoize(input, 138, attribute_sections_StartIndex); }

	    }
	 	DebugLocation(525, 20);
		} finally { DebugExitRule(GrammarFileName, "attribute_sections"); }
		return retval;

	}
	// $ANTLR end "attribute_sections"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_attribute_section() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_attribute_section() {}

	// $ANTLR start "attribute_section"
	// .\\cs.g:526:1: attribute_section : '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' ;
	[GrammarRule("attribute_section")]
	private AstParserRuleReturnScope<object, IToken> attribute_section()
	{
		EnterRule_attribute_section();
		EnterRule("attribute_section", 139);
		TraceIn("attribute_section", 139);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int attribute_section_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal497 = default(IToken);
	    IToken char_literal500 = default(IToken);
	    IToken char_literal501 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> attribute_target_specifier498 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> attribute_list499 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal497_tree = default(object);
	    object char_literal500_tree = default(object);
	    object char_literal501_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "attribute_section");
		DebugLocation(526, 65);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 139)) { return retval; }

			// .\\cs.g:526:18: ( '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' )
			DebugEnterAlt(1);
			// .\\cs.g:527:2: '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(527, 2);
			char_literal497=(IToken)Match(input,91,Follow._91_in_attribute_section3708); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal497_tree = (object)adaptor.Create(char_literal497);
			adaptor.AddChild(root_0, char_literal497_tree);
			}
			DebugLocation(527, 8);
			// .\\cs.g:527:8: ( attribute_target_specifier )?
			int alt137=2;
			try { DebugEnterSubRule(137);
			try { DebugEnterDecision(137, decisionCanBacktrack[137]);
			int LA137_0 = input.LA(1);

			if ((LA137_0==126||LA137_0==147||LA137_0==157||LA137_0==162||LA137_0==183))
			{
				int LA137_1 = input.LA(2);

				if ((LA137_1==79))
				{
					alt137 = 1;
				}
			}
			else if ((LA137_0==123||LA137_0==168))
			{
				alt137 = 1;
			}
			} finally { DebugExitDecision(137); }
			switch (alt137)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:527:8: attribute_target_specifier
				{
				DebugLocation(527, 8);
				PushFollow(Follow._attribute_target_specifier_in_attribute_section3712);
				attribute_target_specifier498=attribute_target_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_target_specifier498.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(137); }

			DebugLocation(527, 38);
			PushFollow(Follow._attribute_list_in_attribute_section3717);
			attribute_list499=attribute_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_list499.Tree);
			DebugLocation(527, 55);
			// .\\cs.g:527:55: ( ',' )?
			int alt138=2;
			try { DebugEnterSubRule(138);
			try { DebugEnterDecision(138, decisionCanBacktrack[138]);
			int LA138_0 = input.LA(1);

			if ((LA138_0==74))
			{
				alt138 = 1;
			}
			} finally { DebugExitDecision(138); }
			switch (alt138)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:527:55: ','
				{
				DebugLocation(527, 55);
				char_literal500=(IToken)Match(input,74,Follow._74_in_attribute_section3721); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal500_tree = (object)adaptor.Create(char_literal500);
				adaptor.AddChild(root_0, char_literal500_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(138); }

			DebugLocation(527, 62);
			char_literal501=(IToken)Match(input,92,Follow._92_in_attribute_section3726); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal501_tree = (object)adaptor.Create(char_literal501);
			adaptor.AddChild(root_0, char_literal501_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_section", 139);
			LeaveRule("attribute_section", 139);
			LeaveRule_attribute_section();
	        if (state.backtracking > 0) { Memoize(input, 139, attribute_section_StartIndex); }

	    }
	 	DebugLocation(527, 65);
		} finally { DebugExitRule(GrammarFileName, "attribute_section"); }
		return retval;

	}
	// $ANTLR end "attribute_section"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_attribute_target_specifier() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_attribute_target_specifier() {}

	// $ANTLR start "attribute_target_specifier"
	// .\\cs.g:528:1: attribute_target_specifier : attribute_target ':' ;
	[GrammarRule("attribute_target_specifier")]
	private AstParserRuleReturnScope<object, IToken> attribute_target_specifier()
	{
		EnterRule_attribute_target_specifier();
		EnterRule("attribute_target_specifier", 140);
		TraceIn("attribute_target_specifier", 140);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int attribute_target_specifier_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal503 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> attribute_target502 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal503_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "attribute_target_specifier");
		DebugLocation(528, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 140)) { return retval; }

			// .\\cs.g:528:27: ( attribute_target ':' )
			DebugEnterAlt(1);
			// .\\cs.g:529:2: attribute_target ':'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(529, 2);
			PushFollow(Follow._attribute_target_in_attribute_target_specifier3735);
			attribute_target502=attribute_target();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_target502.Tree);
			DebugLocation(529, 21);
			char_literal503=(IToken)Match(input,79,Follow._79_in_attribute_target_specifier3739); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal503_tree = (object)adaptor.Create(char_literal503);
			adaptor.AddChild(root_0, char_literal503_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_target_specifier", 140);
			LeaveRule("attribute_target_specifier", 140);
			LeaveRule_attribute_target_specifier();
	        if (state.backtracking > 0) { Memoize(input, 140, attribute_target_specifier_StartIndex); }

	    }
	 	DebugLocation(529, 24);
		} finally { DebugExitRule(GrammarFileName, "attribute_target_specifier"); }
		return retval;

	}
	// $ANTLR end "attribute_target_specifier"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_attribute_target() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_attribute_target() {}

	// $ANTLR start "attribute_target"
	// .\\cs.g:530:1: attribute_target : ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' );
	[GrammarRule("attribute_target")]
	private AstParserRuleReturnScope<object, IToken> attribute_target()
	{
		EnterRule_attribute_target();
		EnterRule("attribute_target", 141);
		TraceIn("attribute_target", 141);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int attribute_target_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set504 = default(IToken);

	    object set504_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "attribute_target");
		DebugLocation(530, 73);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 141)) { return retval; }

			// .\\cs.g:530:17: ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' )
			DebugEnterAlt(1);
			// .\\cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(530, 17);

			set504=(IToken)input.LT(1);
			if (input.LA(1)==123||input.LA(1)==126||input.LA(1)==147||input.LA(1)==157||input.LA(1)==162||input.LA(1)==168||input.LA(1)==183)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set504));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_target", 141);
			LeaveRule("attribute_target", 141);
			LeaveRule_attribute_target();
	        if (state.backtracking > 0) { Memoize(input, 141, attribute_target_StartIndex); }

	    }
	 	DebugLocation(531, 73);
		} finally { DebugExitRule(GrammarFileName, "attribute_target"); }
		return retval;

	}
	// $ANTLR end "attribute_target"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_attribute_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_attribute_list() {}

	// $ANTLR start "attribute_list"
	// .\\cs.g:532:1: attribute_list : attribute ( ',' attribute )* ;
	[GrammarRule("attribute_list")]
	private AstParserRuleReturnScope<object, IToken> attribute_list()
	{
		EnterRule_attribute_list();
		EnterRule("attribute_list", 142);
		TraceIn("attribute_list", 142);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int attribute_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal506 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> attribute505 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> attribute507 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal506_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "attribute_list");
		DebugLocation(532, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 142)) { return retval; }

			// .\\cs.g:532:15: ( attribute ( ',' attribute )* )
			DebugEnterAlt(1);
			// .\\cs.g:533:2: attribute ( ',' attribute )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(533, 2);
			PushFollow(Follow._attribute_in_attribute_list3781);
			attribute505=attribute();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute505.Tree);
			DebugLocation(533, 12);
			// .\\cs.g:533:12: ( ',' attribute )*
			try { DebugEnterSubRule(139);
			while (true)
			{
				int alt139=2;
				try { DebugEnterDecision(139, decisionCanBacktrack[139]);
				int LA139_0 = input.LA(1);

				if ((LA139_0==74))
				{
					int LA139_1 = input.LA(2);

					if ((LA139_1==IDENTIFIER||LA139_1==95||(LA139_1>=97 && LA139_1<=98)||(LA139_1>=100 && LA139_1<=101)||LA139_1==105||LA139_1==117||LA139_1==120||LA139_1==122||LA139_1==126||LA139_1==132||LA139_1==135||LA139_1==141||(LA139_1>=143 && LA139_1<=144)||(LA139_1>=147 && LA139_1<=148)||LA139_1==152||LA139_1==154||LA139_1==157||LA139_1==160||LA139_1==162||LA139_1==167||(LA139_1>=171 && LA139_1<=172)||LA139_1==183||LA139_1==190||LA139_1==194||LA139_1==196))
					{
						alt139 = 1;
					}


				}


				} finally { DebugExitDecision(139); }
				switch ( alt139 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:533:13: ',' attribute
					{
					DebugLocation(533, 13);
					char_literal506=(IToken)Match(input,74,Follow._74_in_attribute_list3784); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal506_tree = (object)adaptor.Create(char_literal506);
					adaptor.AddChild(root_0, char_literal506_tree);
					}
					DebugLocation(533, 17);
					PushFollow(Follow._attribute_in_attribute_list3786);
					attribute507=attribute();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attribute507.Tree);

					}
					break;

				default:
					goto loop139;
				}
			}

			loop139:
				;

			} finally { DebugExitSubRule(139); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_list", 142);
			LeaveRule("attribute_list", 142);
			LeaveRule_attribute_list();
	        if (state.backtracking > 0) { Memoize(input, 142, attribute_list_StartIndex); }

	    }
	 	DebugLocation(533, 28);
		} finally { DebugExitRule(GrammarFileName, "attribute_list"); }
		return retval;

	}
	// $ANTLR end "attribute_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_attribute() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_attribute() {}

	// $ANTLR start "attribute"
	// .\\cs.g:534:1: attribute : type_name ( attribute_arguments )? ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<object, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 143);
		TraceIn("attribute", 143);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int attribute_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> type_name508 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> attribute_arguments509 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(534, 34);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 143)) { return retval; }

			// .\\cs.g:534:10: ( type_name ( attribute_arguments )? )
			DebugEnterAlt(1);
			// .\\cs.g:535:2: type_name ( attribute_arguments )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(535, 2);
			PushFollow(Follow._type_name_in_attribute3798);
			type_name508=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name508.Tree);
			DebugLocation(535, 14);
			// .\\cs.g:535:14: ( attribute_arguments )?
			int alt140=2;
			try { DebugEnterSubRule(140);
			try { DebugEnterDecision(140, decisionCanBacktrack[140]);
			int LA140_0 = input.LA(1);

			if ((LA140_0==68))
			{
				alt140 = 1;
			}
			} finally { DebugExitDecision(140); }
			switch (alt140)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:535:14: attribute_arguments
				{
				DebugLocation(535, 14);
				PushFollow(Follow._attribute_arguments_in_attribute3802);
				attribute_arguments509=attribute_arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_arguments509.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(140); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 143);
			LeaveRule("attribute", 143);
			LeaveRule_attribute();
	        if (state.backtracking > 0) { Memoize(input, 143, attribute_StartIndex); }

	    }
	 	DebugLocation(535, 34);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_attribute_arguments() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_attribute_arguments() {}

	// $ANTLR start "attribute_arguments"
	// .\\cs.g:537:1: attribute_arguments : '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' ) ;
	[GrammarRule("attribute_arguments")]
	private AstParserRuleReturnScope<object, IToken> attribute_arguments()
	{
		EnterRule_attribute_arguments();
		EnterRule("attribute_arguments", 144);
		TraceIn("attribute_arguments", 144);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int attribute_arguments_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal510 = default(IToken);
	    IToken char_literal511 = default(IToken);
	    IToken char_literal514 = default(IToken);
	    IToken char_literal516 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> positional_argument512 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> named_argument513 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> positional_argument515 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal510_tree = default(object);
	    object char_literal511_tree = default(object);
	    object char_literal514_tree = default(object);
	    object char_literal516_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "attribute_arguments");
		DebugLocation(537, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 144)) { return retval; }

			// .\\cs.g:537:20: ( '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' ) )
			DebugEnterAlt(1);
			// .\\cs.g:538:2: '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(538, 2);
			char_literal510=(IToken)Match(input,68,Follow._68_in_attribute_arguments3813); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal510_tree = (object)adaptor.Create(char_literal510);
			adaptor.AddChild(root_0, char_literal510_tree);
			}
			DebugLocation(538, 8);
			// .\\cs.g:538:8: ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' )
			int alt142=2;
			try { DebugEnterSubRule(142);
			try { DebugEnterDecision(142, decisionCanBacktrack[142]);
			int LA142_0 = input.LA(1);

			if ((LA142_0==RPAREN))
			{
				alt142 = 1;
			}
			else if ((LA142_0==Character_literal||LA142_0==FALSE||(LA142_0>=Hex_number && LA142_0<=IDENTIFIER)||(LA142_0>=MINUS && LA142_0<=NUMBER)||LA142_0==Real_literal||LA142_0==STRINGLITERAL||LA142_0==TRUE||LA142_0==Verbatim_string_literal||LA142_0==61||LA142_0==66||(LA142_0>=68 && LA142_0<=69)||(LA142_0>=71 && LA142_0<=72)||LA142_0==75||LA142_0==95||(LA142_0>=97 && LA142_0<=98)||(LA142_0>=100 && LA142_0<=103)||(LA142_0>=105 && LA142_0<=106)||(LA142_0>=109 && LA142_0<=110)||(LA142_0>=114 && LA142_0<=117)||(LA142_0>=119 && LA142_0<=120)||LA142_0==122||LA142_0==126||LA142_0==129||LA142_0==132||LA142_0==135||LA142_0==138||LA142_0==141||(LA142_0>=143 && LA142_0<=144)||(LA142_0>=146 && LA142_0<=148)||(LA142_0>=150 && LA142_0<=152)||LA142_0==154||LA142_0==157||LA142_0==160||LA142_0==162||LA142_0==167||LA142_0==169||(LA142_0>=171 && LA142_0<=174)||LA142_0==177||LA142_0==180||(LA142_0>=183 && LA142_0<=187)||(LA142_0>=189 && LA142_0<=190)||LA142_0==194||LA142_0==196||LA142_0==202))
			{
				alt142 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 142, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(142); }
			switch (alt142)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:538:9: ')'
				{
				DebugLocation(538, 9);
				char_literal511=(IToken)Match(input,RPAREN,Follow._RPAREN_in_attribute_arguments3818); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal511_tree = (object)adaptor.Create(char_literal511);
				adaptor.AddChild(root_0, char_literal511_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:539:8: ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')'
				{
				DebugLocation(539, 8);
				// .\\cs.g:539:8: ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* )
				DebugEnterAlt(1);
				// .\\cs.g:539:9: positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )*
				{
				DebugLocation(539, 9);
				PushFollow(Follow._positional_argument_in_attribute_arguments3838);
				positional_argument512=positional_argument();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, positional_argument512.Tree);
				DebugLocation(539, 31);
				// .\\cs.g:539:31: ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )*
				try { DebugEnterSubRule(141);
				while (true)
				{
					int alt141=3;
					try { DebugEnterDecision(141, decisionCanBacktrack[141]);
					int LA141_0 = input.LA(1);

					if ((LA141_0==IDENTIFIER||LA141_0==95||(LA141_0>=97 && LA141_0<=98)||(LA141_0>=100 && LA141_0<=101)||LA141_0==105||LA141_0==117||LA141_0==120||LA141_0==122||LA141_0==126||LA141_0==132||LA141_0==135||LA141_0==141||(LA141_0>=143 && LA141_0<=144)||(LA141_0>=147 && LA141_0<=148)||LA141_0==152||LA141_0==154||LA141_0==157||LA141_0==160||LA141_0==162||LA141_0==167||(LA141_0>=171 && LA141_0<=172)||LA141_0==183||LA141_0==190||LA141_0==194||LA141_0==196) && (EvaluatePredicate(synpred24_cs_fragment)))
					{
						alt141 = 1;
					}
					else if ((LA141_0==74))
					{
						alt141 = 2;
					}


					} finally { DebugExitDecision(141); }
					switch ( alt141 )
					{
					case 1:
						DebugEnterAlt(1);
						// .\\cs.g:539:32: ( ',' identifier '=' )=> named_argument
						{
						DebugLocation(539, 60);
						PushFollow(Follow._named_argument_in_attribute_arguments3857);
						named_argument513=named_argument();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, named_argument513.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// .\\cs.g:540:15: ',' positional_argument
						{
						DebugLocation(540, 15);
						char_literal514=(IToken)Match(input,74,Follow._74_in_attribute_arguments3873); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal514_tree = (object)adaptor.Create(char_literal514);
						adaptor.AddChild(root_0, char_literal514_tree);
						}
						DebugLocation(540, 19);
						PushFollow(Follow._positional_argument_in_attribute_arguments3875);
						positional_argument515=positional_argument();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, positional_argument515.Tree);

						}
						break;

					default:
						goto loop141;
					}
				}

				loop141:
					;

				} finally { DebugExitSubRule(141); }


				}

				DebugLocation(541, 8);
				char_literal516=(IToken)Match(input,RPAREN,Follow._RPAREN_in_attribute_arguments3886); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal516_tree = (object)adaptor.Create(char_literal516);
				adaptor.AddChild(root_0, char_literal516_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(142); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_arguments", 144);
			LeaveRule("attribute_arguments", 144);
			LeaveRule_attribute_arguments();
	        if (state.backtracking > 0) { Memoize(input, 144, attribute_arguments_StartIndex); }

	    }
	 	DebugLocation(542, 5);
		} finally { DebugExitRule(GrammarFileName, "attribute_arguments"); }
		return retval;

	}
	// $ANTLR end "attribute_arguments"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_positional_argument_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_positional_argument_list() {}

	// $ANTLR start "positional_argument_list"
	// .\\cs.g:543:1: positional_argument_list : positional_argument ( ',' positional_argument )* ;
	[GrammarRule("positional_argument_list")]
	private AstParserRuleReturnScope<object, IToken> positional_argument_list()
	{
		EnterRule_positional_argument_list();
		EnterRule("positional_argument_list", 145);
		TraceIn("positional_argument_list", 145);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int positional_argument_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal518 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> positional_argument517 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> positional_argument519 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal518_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "positional_argument_list");
		DebugLocation(543, 48);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 145)) { return retval; }

			// .\\cs.g:543:25: ( positional_argument ( ',' positional_argument )* )
			DebugEnterAlt(1);
			// .\\cs.g:544:2: positional_argument ( ',' positional_argument )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(544, 2);
			PushFollow(Follow._positional_argument_in_positional_argument_list3900);
			positional_argument517=positional_argument();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, positional_argument517.Tree);
			DebugLocation(544, 22);
			// .\\cs.g:544:22: ( ',' positional_argument )*
			try { DebugEnterSubRule(143);
			while (true)
			{
				int alt143=2;
				try { DebugEnterDecision(143, decisionCanBacktrack[143]);
				int LA143_0 = input.LA(1);

				if ((LA143_0==74))
				{
					alt143 = 1;
				}


				} finally { DebugExitDecision(143); }
				switch ( alt143 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:544:23: ',' positional_argument
					{
					DebugLocation(544, 23);
					char_literal518=(IToken)Match(input,74,Follow._74_in_positional_argument_list3903); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal518_tree = (object)adaptor.Create(char_literal518);
					adaptor.AddChild(root_0, char_literal518_tree);
					}
					DebugLocation(544, 27);
					PushFollow(Follow._positional_argument_in_positional_argument_list3905);
					positional_argument519=positional_argument();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, positional_argument519.Tree);

					}
					break;

				default:
					goto loop143;
				}
			}

			loop143:
				;

			} finally { DebugExitSubRule(143); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("positional_argument_list", 145);
			LeaveRule("positional_argument_list", 145);
			LeaveRule_positional_argument_list();
	        if (state.backtracking > 0) { Memoize(input, 145, positional_argument_list_StartIndex); }

	    }
	 	DebugLocation(544, 48);
		} finally { DebugExitRule(GrammarFileName, "positional_argument_list"); }
		return retval;

	}
	// $ANTLR end "positional_argument_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_positional_argument() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_positional_argument() {}

	// $ANTLR start "positional_argument"
	// .\\cs.g:545:1: positional_argument : attribute_argument_expression ;
	[GrammarRule("positional_argument")]
	private AstParserRuleReturnScope<object, IToken> positional_argument()
	{
		EnterRule_positional_argument();
		EnterRule("positional_argument", 146);
		TraceIn("positional_argument", 146);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int positional_argument_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> attribute_argument_expression520 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "positional_argument");
		DebugLocation(545, 31);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 146)) { return retval; }

			// .\\cs.g:545:20: ( attribute_argument_expression )
			DebugEnterAlt(1);
			// .\\cs.g:546:2: attribute_argument_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(546, 2);
			PushFollow(Follow._attribute_argument_expression_in_positional_argument3916);
			attribute_argument_expression520=attribute_argument_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_argument_expression520.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("positional_argument", 146);
			LeaveRule("positional_argument", 146);
			LeaveRule_positional_argument();
	        if (state.backtracking > 0) { Memoize(input, 146, positional_argument_StartIndex); }

	    }
	 	DebugLocation(546, 31);
		} finally { DebugExitRule(GrammarFileName, "positional_argument"); }
		return retval;

	}
	// $ANTLR end "positional_argument"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_named_argument_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_named_argument_list() {}

	// $ANTLR start "named_argument_list"
	// .\\cs.g:547:1: named_argument_list : named_argument ( ',' named_argument )* ;
	[GrammarRule("named_argument_list")]
	private AstParserRuleReturnScope<object, IToken> named_argument_list()
	{
		EnterRule_named_argument_list();
		EnterRule("named_argument_list", 147);
		TraceIn("named_argument_list", 147);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int named_argument_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal522 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> named_argument521 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> named_argument523 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal522_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "named_argument_list");
		DebugLocation(547, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 147)) { return retval; }

			// .\\cs.g:547:20: ( named_argument ( ',' named_argument )* )
			DebugEnterAlt(1);
			// .\\cs.g:548:2: named_argument ( ',' named_argument )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(548, 2);
			PushFollow(Follow._named_argument_in_named_argument_list3925);
			named_argument521=named_argument();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, named_argument521.Tree);
			DebugLocation(548, 17);
			// .\\cs.g:548:17: ( ',' named_argument )*
			try { DebugEnterSubRule(144);
			while (true)
			{
				int alt144=2;
				try { DebugEnterDecision(144, decisionCanBacktrack[144]);
				int LA144_0 = input.LA(1);

				if ((LA144_0==74))
				{
					alt144 = 1;
				}


				} finally { DebugExitDecision(144); }
				switch ( alt144 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:548:18: ',' named_argument
					{
					DebugLocation(548, 18);
					char_literal522=(IToken)Match(input,74,Follow._74_in_named_argument_list3928); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal522_tree = (object)adaptor.Create(char_literal522);
					adaptor.AddChild(root_0, char_literal522_tree);
					}
					DebugLocation(548, 22);
					PushFollow(Follow._named_argument_in_named_argument_list3930);
					named_argument523=named_argument();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, named_argument523.Tree);

					}
					break;

				default:
					goto loop144;
				}
			}

			loop144:
				;

			} finally { DebugExitSubRule(144); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("named_argument_list", 147);
			LeaveRule("named_argument_list", 147);
			LeaveRule_named_argument_list();
	        if (state.backtracking > 0) { Memoize(input, 147, named_argument_list_StartIndex); }

	    }
	 	DebugLocation(548, 38);
		} finally { DebugExitRule(GrammarFileName, "named_argument_list"); }
		return retval;

	}
	// $ANTLR end "named_argument_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_named_argument() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_named_argument() {}

	// $ANTLR start "named_argument"
	// .\\cs.g:549:1: named_argument : identifier '=' attribute_argument_expression ;
	[GrammarRule("named_argument")]
	private AstParserRuleReturnScope<object, IToken> named_argument()
	{
		EnterRule_named_argument();
		EnterRule("named_argument", 148);
		TraceIn("named_argument", 148);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int named_argument_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal525 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier524 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> attribute_argument_expression526 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal525_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "named_argument");
		DebugLocation(549, 50);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 148)) { return retval; }

			// .\\cs.g:549:15: ( identifier '=' attribute_argument_expression )
			DebugEnterAlt(1);
			// .\\cs.g:550:2: identifier '=' attribute_argument_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(550, 2);
			PushFollow(Follow._identifier_in_named_argument3941);
			identifier524=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier524.Tree);
			DebugLocation(550, 15);
			char_literal525=(IToken)Match(input,85,Follow._85_in_named_argument3945); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal525_tree = (object)adaptor.Create(char_literal525);
			adaptor.AddChild(root_0, char_literal525_tree);
			}
			DebugLocation(550, 21);
			PushFollow(Follow._attribute_argument_expression_in_named_argument3949);
			attribute_argument_expression526=attribute_argument_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_argument_expression526.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("named_argument", 148);
			LeaveRule("named_argument", 148);
			LeaveRule_named_argument();
	        if (state.backtracking > 0) { Memoize(input, 148, named_argument_StartIndex); }

	    }
	 	DebugLocation(550, 50);
		} finally { DebugExitRule(GrammarFileName, "named_argument"); }
		return retval;

	}
	// $ANTLR end "named_argument"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_attribute_argument_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_attribute_argument_expression() {}

	// $ANTLR start "attribute_argument_expression"
	// .\\cs.g:551:1: attribute_argument_expression : expression ;
	[GrammarRule("attribute_argument_expression")]
	private AstParserRuleReturnScope<object, IToken> attribute_argument_expression()
	{
		EnterRule_attribute_argument_expression();
		EnterRule("attribute_argument_expression", 149);
		TraceIn("attribute_argument_expression", 149);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int attribute_argument_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression527 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "attribute_argument_expression");
		DebugLocation(551, 12);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 149)) { return retval; }

			// .\\cs.g:551:30: ( expression )
			DebugEnterAlt(1);
			// .\\cs.g:552:2: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(552, 2);
			PushFollow(Follow._expression_in_attribute_argument_expression3958);
			expression527=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression527.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_argument_expression", 149);
			LeaveRule("attribute_argument_expression", 149);
			LeaveRule_attribute_argument_expression();
	        if (state.backtracking > 0) { Memoize(input, 149, attribute_argument_expression_StartIndex); }

	    }
	 	DebugLocation(552, 12);
		} finally { DebugExitRule(GrammarFileName, "attribute_argument_expression"); }
		return retval;

	}
	// $ANTLR end "attribute_argument_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_class_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_class_declaration() {}

	// $ANTLR start "class_declaration"
	// .\\cs.g:558:1: class_declaration : 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? ;
	[GrammarRule("class_declaration")]
	private AstParserRuleReturnScope<object, IToken> class_declaration()
	{
		EnterRule_class_declaration();
		EnterRule("class_declaration", 150);
		TraceIn("class_declaration", 150);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int class_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal528 = default(IToken);
	    IToken char_literal533 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type_or_generic529 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> class_base530 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_parameter_constraints_clauses531 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> class_body532 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal528_tree = default(object);
	    object char_literal533_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "class_declaration");
		DebugLocation(558, 98);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 150)) { return retval; }

			// .\\cs.g:558:18: ( 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? )
			DebugEnterAlt(1);
			// .\\cs.g:559:2: 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(559, 2);
			string_literal528=(IToken)Match(input,111,Follow._111_in_class_declaration3971); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal528_tree = (object)adaptor.Create(string_literal528);
			adaptor.AddChild(root_0, string_literal528_tree);
			}
			DebugLocation(559, 11);
			PushFollow(Follow._type_or_generic_in_class_declaration3974);
			type_or_generic529=type_or_generic();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_or_generic529.Tree);
			DebugLocation(559, 29);
			// .\\cs.g:559:29: ( class_base )?
			int alt145=2;
			try { DebugEnterSubRule(145);
			try { DebugEnterDecision(145, decisionCanBacktrack[145]);
			int LA145_0 = input.LA(1);

			if ((LA145_0==79))
			{
				alt145 = 1;
			}
			} finally { DebugExitDecision(145); }
			switch (alt145)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:559:29: class_base
				{
				DebugLocation(559, 29);
				PushFollow(Follow._class_base_in_class_declaration3978);
				class_base530=class_base();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_base530.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(145); }

			DebugLocation(559, 43);
			// .\\cs.g:559:43: ( type_parameter_constraints_clauses )?
			int alt146=2;
			try { DebugEnterSubRule(146);
			try { DebugEnterDecision(146, decisionCanBacktrack[146]);
			int LA146_0 = input.LA(1);

			if ((LA146_0==194))
			{
				alt146 = 1;
			}
			} finally { DebugExitDecision(146); }
			switch (alt146)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:559:43: type_parameter_constraints_clauses
				{
				DebugLocation(559, 43);
				PushFollow(Follow._type_parameter_constraints_clauses_in_class_declaration3983);
				type_parameter_constraints_clauses531=type_parameter_constraints_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clauses531.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(146); }

			DebugLocation(559, 81);
			PushFollow(Follow._class_body_in_class_declaration3988);
			class_body532=class_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, class_body532.Tree);
			DebugLocation(559, 94);
			// .\\cs.g:559:94: ( ';' )?
			int alt147=2;
			try { DebugEnterSubRule(147);
			try { DebugEnterDecision(147, decisionCanBacktrack[147]);
			int LA147_0 = input.LA(1);

			if ((LA147_0==SEMI))
			{
				alt147 = 1;
			}
			} finally { DebugExitDecision(147); }
			switch (alt147)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:559:94: ';'
				{
				DebugLocation(559, 94);
				char_literal533=(IToken)Match(input,SEMI,Follow._SEMI_in_class_declaration3992); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal533_tree = (object)adaptor.Create(char_literal533);
				adaptor.AddChild(root_0, char_literal533_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(147); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_declaration", 150);
			LeaveRule("class_declaration", 150);
			LeaveRule_class_declaration();
	        if (state.backtracking > 0) { Memoize(input, 150, class_declaration_StartIndex); }

	    }
	 	DebugLocation(559, 98);
		} finally { DebugExitRule(GrammarFileName, "class_declaration"); }
		return retval;

	}
	// $ANTLR end "class_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_class_base() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_class_base() {}

	// $ANTLR start "class_base"
	// .\\cs.g:560:1: class_base : ':' interface_type_list ;
	[GrammarRule("class_base")]
	private AstParserRuleReturnScope<object, IToken> class_base()
	{
		EnterRule_class_base();
		EnterRule("class_base", 151);
		TraceIn("class_base", 151);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int class_base_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal534 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> interface_type_list535 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal534_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "class_base");
		DebugLocation(560, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 151)) { return retval; }

			// .\\cs.g:560:11: ( ':' interface_type_list )
			DebugEnterAlt(1);
			// .\\cs.g:563:2: ':' interface_type_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(563, 2);
			char_literal534=(IToken)Match(input,79,Follow._79_in_class_base4005); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal534_tree = (object)adaptor.Create(char_literal534);
			adaptor.AddChild(root_0, char_literal534_tree);
			}
			DebugLocation(563, 8);
			PushFollow(Follow._interface_type_list_in_class_base4009);
			interface_type_list535=interface_type_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interface_type_list535.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_base", 151);
			LeaveRule("class_base", 151);
			LeaveRule_class_base();
	        if (state.backtracking > 0) { Memoize(input, 151, class_base_StartIndex); }

	    }
	 	DebugLocation(563, 27);
		} finally { DebugExitRule(GrammarFileName, "class_base"); }
		return retval;

	}
	// $ANTLR end "class_base"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_interface_type_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_interface_type_list() {}

	// $ANTLR start "interface_type_list"
	// .\\cs.g:565:1: interface_type_list : type ( ',' type )* ;
	[GrammarRule("interface_type_list")]
	private AstParserRuleReturnScope<object, IToken> interface_type_list()
	{
		EnterRule_interface_type_list();
		EnterRule("interface_type_list", 152);
		TraceIn("interface_type_list", 152);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int interface_type_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal537 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type536 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type538 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal537_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "interface_type_list");
		DebugLocation(565, 20);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 152)) { return retval; }

			// .\\cs.g:565:20: ( type ( ',' type )* )
			DebugEnterAlt(1);
			// .\\cs.g:566:2: type ( ',' type )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(566, 2);
			PushFollow(Follow._type_in_interface_type_list4019);
			type536=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type536.Tree);
			DebugLocation(566, 7);
			// .\\cs.g:566:7: ( ',' type )*
			try { DebugEnterSubRule(148);
			while (true)
			{
				int alt148=2;
				try { DebugEnterDecision(148, decisionCanBacktrack[148]);
				int LA148_0 = input.LA(1);

				if ((LA148_0==74))
				{
					alt148 = 1;
				}


				} finally { DebugExitDecision(148); }
				switch ( alt148 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:566:8: ',' type
					{
					DebugLocation(566, 8);
					char_literal537=(IToken)Match(input,74,Follow._74_in_interface_type_list4022); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal537_tree = (object)adaptor.Create(char_literal537);
					adaptor.AddChild(root_0, char_literal537_tree);
					}
					DebugLocation(566, 14);
					PushFollow(Follow._type_in_interface_type_list4026);
					type538=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type538.Tree);

					}
					break;

				default:
					goto loop148;
				}
			}

			loop148:
				;

			} finally { DebugExitSubRule(148); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_type_list", 152);
			LeaveRule("interface_type_list", 152);
			LeaveRule_interface_type_list();
	        if (state.backtracking > 0) { Memoize(input, 152, interface_type_list_StartIndex); }

	    }
	 	DebugLocation(566, 20);
		} finally { DebugExitRule(GrammarFileName, "interface_type_list"); }
		return retval;

	}
	// $ANTLR end "interface_type_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_class_body() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_class_body() {}

	// $ANTLR start "class_body"
	// .\\cs.g:568:1: class_body : '{' ( class_member_declarations )? '}' ;
	[GrammarRule("class_body")]
	private AstParserRuleReturnScope<object, IToken> class_body()
	{
		EnterRule_class_body();
		EnterRule("class_body", 153);
		TraceIn("class_body", 153);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int class_body_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal539 = default(IToken);
	    IToken char_literal541 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> class_member_declarations540 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal539_tree = default(object);
	    object char_literal541_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "class_body");
		DebugLocation(568, 40);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 153)) { return retval; }

			// .\\cs.g:568:11: ( '{' ( class_member_declarations )? '}' )
			DebugEnterAlt(1);
			// .\\cs.g:569:2: '{' ( class_member_declarations )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(569, 2);
			char_literal539=(IToken)Match(input,197,Follow._197_in_class_body4037); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal539_tree = (object)adaptor.Create(char_literal539);
			adaptor.AddChild(root_0, char_literal539_tree);
			}
			DebugLocation(569, 8);
			// .\\cs.g:569:8: ( class_member_declarations )?
			int alt149=2;
			try { DebugEnterSubRule(149);
			try { DebugEnterDecision(149, decisionCanBacktrack[149]);
			int LA149_0 = input.LA(1);

			if ((LA149_0==ENUM||LA149_0==IDENTIFIER||LA149_0==91||(LA149_0>=95 && LA149_0<=98)||(LA149_0>=100 && LA149_0<=101)||LA149_0==103||(LA149_0>=105 && LA149_0<=106)||LA149_0==109||(LA149_0>=111 && LA149_0<=112)||LA149_0==114||(LA149_0>=116 && LA149_0<=117)||(LA149_0>=119 && LA149_0<=120)||(LA149_0>=122 && LA149_0<=126)||LA149_0==129||LA149_0==132||(LA149_0>=135 && LA149_0<=136)||(LA149_0>=138 && LA149_0<=141)||(LA149_0>=143 && LA149_0<=144)||(LA149_0>=146 && LA149_0<=148)||(LA149_0>=150 && LA149_0<=152)||LA149_0==154||(LA149_0>=156 && LA149_0<=157)||(LA149_0>=159 && LA149_0<=165)||LA149_0==167||(LA149_0>=169 && LA149_0<=173)||(LA149_0>=176 && LA149_0<=178)||LA149_0==183||(LA149_0>=185 && LA149_0<=186)||(LA149_0>=188 && LA149_0<=194)||LA149_0==196||LA149_0==202))
			{
				alt149 = 1;
			}
			} finally { DebugExitDecision(149); }
			switch (alt149)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:569:8: class_member_declarations
				{
				DebugLocation(569, 8);
				PushFollow(Follow._class_member_declarations_in_class_body4041);
				class_member_declarations540=class_member_declarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_member_declarations540.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(149); }

			DebugLocation(569, 37);
			char_literal541=(IToken)Match(input,201,Follow._201_in_class_body4046); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal541_tree = (object)adaptor.Create(char_literal541);
			adaptor.AddChild(root_0, char_literal541_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_body", 153);
			LeaveRule("class_body", 153);
			LeaveRule_class_body();
	        if (state.backtracking > 0) { Memoize(input, 153, class_body_StartIndex); }

	    }
	 	DebugLocation(569, 40);
		} finally { DebugExitRule(GrammarFileName, "class_body"); }
		return retval;

	}
	// $ANTLR end "class_body"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_class_member_declarations() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_class_member_declarations() {}

	// $ANTLR start "class_member_declarations"
	// .\\cs.g:570:1: class_member_declarations : ( class_member_declaration )+ ;
	[GrammarRule("class_member_declarations")]
	private AstParserRuleReturnScope<object, IToken> class_member_declarations()
	{
		EnterRule_class_member_declarations();
		EnterRule("class_member_declarations", 154);
		TraceIn("class_member_declarations", 154);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int class_member_declarations_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> class_member_declaration542 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "class_member_declarations");
		DebugLocation(570, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 154)) { return retval; }

			// .\\cs.g:570:26: ( ( class_member_declaration )+ )
			DebugEnterAlt(1);
			// .\\cs.g:571:2: ( class_member_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(571, 2);
			// .\\cs.g:571:2: ( class_member_declaration )+
			int cnt150=0;
			try { DebugEnterSubRule(150);
			while (true)
			{
				int alt150=2;
				try { DebugEnterDecision(150, decisionCanBacktrack[150]);
				int LA150_0 = input.LA(1);

				if ((LA150_0==ENUM||LA150_0==IDENTIFIER||LA150_0==91||(LA150_0>=95 && LA150_0<=98)||(LA150_0>=100 && LA150_0<=101)||LA150_0==103||(LA150_0>=105 && LA150_0<=106)||LA150_0==109||(LA150_0>=111 && LA150_0<=112)||LA150_0==114||(LA150_0>=116 && LA150_0<=117)||(LA150_0>=119 && LA150_0<=120)||(LA150_0>=122 && LA150_0<=126)||LA150_0==129||LA150_0==132||(LA150_0>=135 && LA150_0<=136)||(LA150_0>=138 && LA150_0<=141)||(LA150_0>=143 && LA150_0<=144)||(LA150_0>=146 && LA150_0<=148)||(LA150_0>=150 && LA150_0<=152)||LA150_0==154||(LA150_0>=156 && LA150_0<=157)||(LA150_0>=159 && LA150_0<=165)||LA150_0==167||(LA150_0>=169 && LA150_0<=173)||(LA150_0>=176 && LA150_0<=178)||LA150_0==183||(LA150_0>=185 && LA150_0<=186)||(LA150_0>=188 && LA150_0<=194)||LA150_0==196||LA150_0==202))
				{
					alt150 = 1;
				}


				} finally { DebugExitDecision(150); }
				switch (alt150)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:571:2: class_member_declaration
					{
					DebugLocation(571, 2);
					PushFollow(Follow._class_member_declaration_in_class_member_declarations4054);
					class_member_declaration542=class_member_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, class_member_declaration542.Tree);

					}
					break;

				default:
					if (cnt150 >= 1)
						goto loop150;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee150 = new EarlyExitException( 150, input );
					DebugRecognitionException(eee150);
					throw eee150;
				}
				cnt150++;
			}
			loop150:
				;

			} finally { DebugExitSubRule(150); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_member_declarations", 154);
			LeaveRule("class_member_declarations", 154);
			LeaveRule_class_member_declarations();
	        if (state.backtracking > 0) { Memoize(input, 154, class_member_declarations_StartIndex); }

	    }
	 	DebugLocation(571, 27);
		} finally { DebugExitRule(GrammarFileName, "class_member_declarations"); }
		return retval;

	}
	// $ANTLR end "class_member_declarations"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_constant_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_constant_declaration() {}

	// $ANTLR start "constant_declaration"
	// .\\cs.g:574:1: constant_declaration : 'const' type constant_declarators ';' ;
	[GrammarRule("constant_declaration")]
	private AstParserRuleReturnScope<object, IToken> constant_declaration()
	{
		EnterRule_constant_declaration();
		EnterRule("constant_declaration", 155);
		TraceIn("constant_declaration", 155);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int constant_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal543 = default(IToken);
	    IToken char_literal546 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type544 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> constant_declarators545 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal543_tree = default(object);
	    object char_literal546_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "constant_declaration");
		DebugLocation(574, 45);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 155)) { return retval; }

			// .\\cs.g:574:21: ( 'const' type constant_declarators ';' )
			DebugEnterAlt(1);
			// .\\cs.g:575:2: 'const' type constant_declarators ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(575, 2);
			string_literal543=(IToken)Match(input,112,Follow._112_in_constant_declaration4065); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal543_tree = (object)adaptor.Create(string_literal543);
			adaptor.AddChild(root_0, string_literal543_tree);
			}
			DebugLocation(575, 12);
			PushFollow(Follow._type_in_constant_declaration4069);
			type544=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type544.Tree);
			DebugLocation(575, 19);
			PushFollow(Follow._constant_declarators_in_constant_declaration4073);
			constant_declarators545=constant_declarators();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declarators545.Tree);
			DebugLocation(575, 42);
			char_literal546=(IToken)Match(input,SEMI,Follow._SEMI_in_constant_declaration4077); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal546_tree = (object)adaptor.Create(char_literal546);
			adaptor.AddChild(root_0, char_literal546_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_declaration", 155);
			LeaveRule("constant_declaration", 155);
			LeaveRule_constant_declaration();
	        if (state.backtracking > 0) { Memoize(input, 155, constant_declaration_StartIndex); }

	    }
	 	DebugLocation(575, 45);
		} finally { DebugExitRule(GrammarFileName, "constant_declaration"); }
		return retval;

	}
	// $ANTLR end "constant_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_constant_declarators() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_constant_declarators() {}

	// $ANTLR start "constant_declarators"
	// .\\cs.g:576:1: constant_declarators : constant_declarator ( ',' constant_declarator )* ;
	[GrammarRule("constant_declarators")]
	private AstParserRuleReturnScope<object, IToken> constant_declarators()
	{
		EnterRule_constant_declarators();
		EnterRule("constant_declarators", 156);
		TraceIn("constant_declarators", 156);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int constant_declarators_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal548 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> constant_declarator547 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> constant_declarator549 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal548_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "constant_declarators");
		DebugLocation(576, 48);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 156)) { return retval; }

			// .\\cs.g:576:21: ( constant_declarator ( ',' constant_declarator )* )
			DebugEnterAlt(1);
			// .\\cs.g:577:2: constant_declarator ( ',' constant_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(577, 2);
			PushFollow(Follow._constant_declarator_in_constant_declarators4085);
			constant_declarator547=constant_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declarator547.Tree);
			DebugLocation(577, 22);
			// .\\cs.g:577:22: ( ',' constant_declarator )*
			try { DebugEnterSubRule(151);
			while (true)
			{
				int alt151=2;
				try { DebugEnterDecision(151, decisionCanBacktrack[151]);
				int LA151_0 = input.LA(1);

				if ((LA151_0==74))
				{
					alt151 = 1;
				}


				} finally { DebugExitDecision(151); }
				switch ( alt151 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:577:23: ',' constant_declarator
					{
					DebugLocation(577, 23);
					char_literal548=(IToken)Match(input,74,Follow._74_in_constant_declarators4088); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal548_tree = (object)adaptor.Create(char_literal548);
					adaptor.AddChild(root_0, char_literal548_tree);
					}
					DebugLocation(577, 27);
					PushFollow(Follow._constant_declarator_in_constant_declarators4090);
					constant_declarator549=constant_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declarator549.Tree);

					}
					break;

				default:
					goto loop151;
				}
			}

			loop151:
				;

			} finally { DebugExitSubRule(151); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_declarators", 156);
			LeaveRule("constant_declarators", 156);
			LeaveRule_constant_declarators();
	        if (state.backtracking > 0) { Memoize(input, 156, constant_declarators_StartIndex); }

	    }
	 	DebugLocation(577, 48);
		} finally { DebugExitRule(GrammarFileName, "constant_declarators"); }
		return retval;

	}
	// $ANTLR end "constant_declarators"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_constant_declarator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_constant_declarator() {}

	// $ANTLR start "constant_declarator"
	// .\\cs.g:578:1: constant_declarator : identifier ( '=' constant_expression )? ;
	[GrammarRule("constant_declarator")]
	private AstParserRuleReturnScope<object, IToken> constant_declarator()
	{
		EnterRule_constant_declarator();
		EnterRule("constant_declarator", 157);
		TraceIn("constant_declarator", 157);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int constant_declarator_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal551 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier550 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> constant_expression552 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal551_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "constant_declarator");
		DebugLocation(578, 43);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 157)) { return retval; }

			// .\\cs.g:578:20: ( identifier ( '=' constant_expression )? )
			DebugEnterAlt(1);
			// .\\cs.g:579:2: identifier ( '=' constant_expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(579, 2);
			PushFollow(Follow._identifier_in_constant_declarator4100);
			identifier550=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier550.Tree);
			DebugLocation(579, 15);
			// .\\cs.g:579:15: ( '=' constant_expression )?
			int alt152=2;
			try { DebugEnterSubRule(152);
			try { DebugEnterDecision(152, decisionCanBacktrack[152]);
			int LA152_0 = input.LA(1);

			if ((LA152_0==85))
			{
				alt152 = 1;
			}
			} finally { DebugExitDecision(152); }
			switch (alt152)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:579:16: '=' constant_expression
				{
				DebugLocation(579, 16);
				char_literal551=(IToken)Match(input,85,Follow._85_in_constant_declarator4105); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal551_tree = (object)adaptor.Create(char_literal551);
				adaptor.AddChild(root_0, char_literal551_tree);
				}
				DebugLocation(579, 22);
				PushFollow(Follow._constant_expression_in_constant_declarator4109);
				constant_expression552=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression552.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(152); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_declarator", 157);
			LeaveRule("constant_declarator", 157);
			LeaveRule_constant_declarator();
	        if (state.backtracking > 0) { Memoize(input, 157, constant_declarator_StartIndex); }

	    }
	 	DebugLocation(579, 43);
		} finally { DebugExitRule(GrammarFileName, "constant_declarator"); }
		return retval;

	}
	// $ANTLR end "constant_declarator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_constant_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_constant_expression() {}

	// $ANTLR start "constant_expression"
	// .\\cs.g:580:1: constant_expression : expression ;
	[GrammarRule("constant_expression")]
	private AstParserRuleReturnScope<object, IToken> constant_expression()
	{
		EnterRule_constant_expression();
		EnterRule("constant_expression", 158);
		TraceIn("constant_expression", 158);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int constant_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression553 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "constant_expression");
		DebugLocation(580, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 158)) { return retval; }

			// .\\cs.g:580:20: ( expression )
			DebugEnterAlt(1);
			// .\\cs.g:581:2: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(581, 2);
			PushFollow(Follow._expression_in_constant_expression4119);
			expression553=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression553.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_expression", 158);
			LeaveRule("constant_expression", 158);
			LeaveRule_constant_expression();
	        if (state.backtracking > 0) { Memoize(input, 158, constant_expression_StartIndex); }

	    }
	 	DebugLocation(581, 11);
		} finally { DebugExitRule(GrammarFileName, "constant_expression"); }
		return retval;

	}
	// $ANTLR end "constant_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_field_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_field_declaration() {}

	// $ANTLR start "field_declaration"
	// .\\cs.g:584:1: field_declaration : variable_declarators ';' ;
	[GrammarRule("field_declaration")]
	private AstParserRuleReturnScope<object, IToken> field_declaration()
	{
		EnterRule_field_declaration();
		EnterRule("field_declaration", 159);
		TraceIn("field_declaration", 159);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int field_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal555 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable_declarators554 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal555_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "field_declaration");
		DebugLocation(584, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 159)) { return retval; }

			// .\\cs.g:584:18: ( variable_declarators ';' )
			DebugEnterAlt(1);
			// .\\cs.g:585:2: variable_declarators ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(585, 2);
			PushFollow(Follow._variable_declarators_in_field_declaration4128);
			variable_declarators554=variable_declarators();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variable_declarators554.Tree);
			DebugLocation(585, 25);
			char_literal555=(IToken)Match(input,SEMI,Follow._SEMI_in_field_declaration4132); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal555_tree = (object)adaptor.Create(char_literal555);
			adaptor.AddChild(root_0, char_literal555_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("field_declaration", 159);
			LeaveRule("field_declaration", 159);
			LeaveRule_field_declaration();
	        if (state.backtracking > 0) { Memoize(input, 159, field_declaration_StartIndex); }

	    }
	 	DebugLocation(585, 28);
		} finally { DebugExitRule(GrammarFileName, "field_declaration"); }
		return retval;

	}
	// $ANTLR end "field_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variable_declarators() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variable_declarators() {}

	// $ANTLR start "variable_declarators"
	// .\\cs.g:586:1: variable_declarators : variable_declarator ( ',' variable_declarator )* ;
	[GrammarRule("variable_declarators")]
	private AstParserRuleReturnScope<object, IToken> variable_declarators()
	{
		EnterRule_variable_declarators();
		EnterRule("variable_declarators", 160);
		TraceIn("variable_declarators", 160);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int variable_declarators_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal557 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable_declarator556 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable_declarator558 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal557_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "variable_declarators");
		DebugLocation(586, 50);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 160)) { return retval; }

			// .\\cs.g:586:21: ( variable_declarator ( ',' variable_declarator )* )
			DebugEnterAlt(1);
			// .\\cs.g:587:2: variable_declarator ( ',' variable_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(587, 2);
			PushFollow(Follow._variable_declarator_in_variable_declarators4140);
			variable_declarator556=variable_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variable_declarator556.Tree);
			DebugLocation(587, 22);
			// .\\cs.g:587:22: ( ',' variable_declarator )*
			try { DebugEnterSubRule(153);
			while (true)
			{
				int alt153=2;
				try { DebugEnterDecision(153, decisionCanBacktrack[153]);
				int LA153_0 = input.LA(1);

				if ((LA153_0==74))
				{
					alt153 = 1;
				}


				} finally { DebugExitDecision(153); }
				switch ( alt153 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:587:23: ',' variable_declarator
					{
					DebugLocation(587, 23);
					char_literal557=(IToken)Match(input,74,Follow._74_in_variable_declarators4143); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal557_tree = (object)adaptor.Create(char_literal557);
					adaptor.AddChild(root_0, char_literal557_tree);
					}
					DebugLocation(587, 29);
					PushFollow(Follow._variable_declarator_in_variable_declarators4147);
					variable_declarator558=variable_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable_declarator558.Tree);

					}
					break;

				default:
					goto loop153;
				}
			}

			loop153:
				;

			} finally { DebugExitSubRule(153); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable_declarators", 160);
			LeaveRule("variable_declarators", 160);
			LeaveRule_variable_declarators();
	        if (state.backtracking > 0) { Memoize(input, 160, variable_declarators_StartIndex); }

	    }
	 	DebugLocation(587, 50);
		} finally { DebugExitRule(GrammarFileName, "variable_declarators"); }
		return retval;

	}
	// $ANTLR end "variable_declarators"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variable_declarator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variable_declarator() {}

	// $ANTLR start "variable_declarator"
	// .\\cs.g:588:1: variable_declarator : type_name ( '=' variable_initializer )? ;
	[GrammarRule("variable_declarator")]
	private AstParserRuleReturnScope<object, IToken> variable_declarator()
	{
		EnterRule_variable_declarator();
		EnterRule("variable_declarator", 161);
		TraceIn("variable_declarator", 161);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int variable_declarator_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal560 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type_name559 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable_initializer561 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal560_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "variable_declarator");
		DebugLocation(588, 41);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 161)) { return retval; }

			// .\\cs.g:588:20: ( type_name ( '=' variable_initializer )? )
			DebugEnterAlt(1);
			// .\\cs.g:589:2: type_name ( '=' variable_initializer )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(589, 2);
			PushFollow(Follow._type_name_in_variable_declarator4157);
			type_name559=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name559.Tree);
			DebugLocation(589, 12);
			// .\\cs.g:589:12: ( '=' variable_initializer )?
			int alt154=2;
			try { DebugEnterSubRule(154);
			try { DebugEnterDecision(154, decisionCanBacktrack[154]);
			int LA154_0 = input.LA(1);

			if ((LA154_0==85))
			{
				alt154 = 1;
			}
			} finally { DebugExitDecision(154); }
			switch (alt154)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:589:13: '=' variable_initializer
				{
				DebugLocation(589, 13);
				char_literal560=(IToken)Match(input,85,Follow._85_in_variable_declarator4160); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal560_tree = (object)adaptor.Create(char_literal560);
				adaptor.AddChild(root_0, char_literal560_tree);
				}
				DebugLocation(589, 19);
				PushFollow(Follow._variable_initializer_in_variable_declarator4164);
				variable_initializer561=variable_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable_initializer561.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(154); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable_declarator", 161);
			LeaveRule("variable_declarator", 161);
			LeaveRule_variable_declarator();
	        if (state.backtracking > 0) { Memoize(input, 161, variable_declarator_StartIndex); }

	    }
	 	DebugLocation(589, 41);
		} finally { DebugExitRule(GrammarFileName, "variable_declarator"); }
		return retval;

	}
	// $ANTLR end "variable_declarator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_method_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_method_declaration() {}

	// $ANTLR start "method_declaration"
	// .\\cs.g:592:1: method_declaration : method_header method_body ;
	[GrammarRule("method_declaration")]
	private AstParserRuleReturnScope<object, IToken> method_declaration()
	{
		EnterRule_method_declaration();
		EnterRule("method_declaration", 162);
		TraceIn("method_declaration", 162);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int method_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> method_header562 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> method_body563 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "method_declaration");
		DebugLocation(592, 29);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 162)) { return retval; }

			// .\\cs.g:592:19: ( method_header method_body )
			DebugEnterAlt(1);
			// .\\cs.g:593:2: method_header method_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(593, 2);
			PushFollow(Follow._method_header_in_method_declaration4178);
			method_header562=method_header();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, method_header562.Tree);
			DebugLocation(593, 18);
			PushFollow(Follow._method_body_in_method_declaration4182);
			method_body563=method_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, method_body563.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("method_declaration", 162);
			LeaveRule("method_declaration", 162);
			LeaveRule_method_declaration();
	        if (state.backtracking > 0) { Memoize(input, 162, method_declaration_StartIndex); }

	    }
	 	DebugLocation(593, 29);
		} finally { DebugExitRule(GrammarFileName, "method_declaration"); }
		return retval;

	}
	// $ANTLR end "method_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_method_header() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_method_header() {}

	// $ANTLR start "method_header"
	// .\\cs.g:594:1: method_header : member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ;
	[GrammarRule("method_header")]
	private AstParserRuleReturnScope<object, IToken> method_header()
	{
		EnterRule_method_header();
		EnterRule("method_header", 163);
		TraceIn("method_header", 163);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int method_header_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal565 = default(IToken);
	    IToken char_literal567 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> member_name564 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> formal_parameter_list566 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_parameter_constraints_clauses568 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal565_tree = default(object);
	    object char_literal567_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "method_header");
		DebugLocation(594, 87);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 163)) { return retval; }

			// .\\cs.g:594:14: ( member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? )
			DebugEnterAlt(1);
			// .\\cs.g:595:2: member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(595, 2);
			PushFollow(Follow._member_name_in_method_header4190);
			member_name564=member_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, member_name564.Tree);
			DebugLocation(595, 15);
			char_literal565=(IToken)Match(input,68,Follow._68_in_method_header4193); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal565_tree = (object)adaptor.Create(char_literal565);
			adaptor.AddChild(root_0, char_literal565_tree);
			}
			DebugLocation(595, 21);
			// .\\cs.g:595:21: ( formal_parameter_list )?
			int alt155=2;
			try { DebugEnterSubRule(155);
			try { DebugEnterDecision(155, decisionCanBacktrack[155]);
			int LA155_0 = input.LA(1);

			if ((LA155_0==IDENTIFIER||LA155_0==91||LA155_0==95||(LA155_0>=97 && LA155_0<=98)||(LA155_0>=100 && LA155_0<=101)||LA155_0==103||(LA155_0>=105 && LA155_0<=106)||LA155_0==109||LA155_0==114||LA155_0==117||(LA155_0>=119 && LA155_0<=120)||LA155_0==122||LA155_0==126||LA155_0==129||LA155_0==132||LA155_0==135||LA155_0==138||LA155_0==141||(LA155_0>=143 && LA155_0<=144)||(LA155_0>=146 && LA155_0<=148)||(LA155_0>=151 && LA155_0<=152)||(LA155_0>=154 && LA155_0<=155)||(LA155_0>=157 && LA155_0<=158)||LA155_0==160||LA155_0==162||(LA155_0>=166 && LA155_0<=167)||LA155_0==169||(LA155_0>=171 && LA155_0<=173)||LA155_0==177||LA155_0==180||LA155_0==183||(LA155_0>=185 && LA155_0<=186)||(LA155_0>=189 && LA155_0<=190)||LA155_0==192||LA155_0==194||LA155_0==196))
			{
				alt155 = 1;
			}
			} finally { DebugExitDecision(155); }
			switch (alt155)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:595:21: formal_parameter_list
				{
				DebugLocation(595, 21);
				PushFollow(Follow._formal_parameter_list_in_method_header4197);
				formal_parameter_list566=formal_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter_list566.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(155); }

			DebugLocation(595, 46);
			char_literal567=(IToken)Match(input,RPAREN,Follow._RPAREN_in_method_header4202); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal567_tree = (object)adaptor.Create(char_literal567);
			adaptor.AddChild(root_0, char_literal567_tree);
			}
			DebugLocation(595, 52);
			// .\\cs.g:595:52: ( type_parameter_constraints_clauses )?
			int alt156=2;
			try { DebugEnterSubRule(156);
			try { DebugEnterDecision(156, decisionCanBacktrack[156]);
			int LA156_0 = input.LA(1);

			if ((LA156_0==194))
			{
				alt156 = 1;
			}
			} finally { DebugExitDecision(156); }
			switch (alt156)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:595:52: type_parameter_constraints_clauses
				{
				DebugLocation(595, 52);
				PushFollow(Follow._type_parameter_constraints_clauses_in_method_header4206);
				type_parameter_constraints_clauses568=type_parameter_constraints_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clauses568.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(156); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("method_header", 163);
			LeaveRule("method_header", 163);
			LeaveRule_method_header();
	        if (state.backtracking > 0) { Memoize(input, 163, method_header_StartIndex); }

	    }
	 	DebugLocation(595, 87);
		} finally { DebugExitRule(GrammarFileName, "method_header"); }
		return retval;

	}
	// $ANTLR end "method_header"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_method_body() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_method_body() {}

	// $ANTLR start "method_body"
	// .\\cs.g:596:1: method_body : block ;
	[GrammarRule("method_body")]
	private AstParserRuleReturnScope<object, IToken> method_body()
	{
		EnterRule_method_body();
		EnterRule("method_body", 164);
		TraceIn("method_body", 164);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int method_body_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> block569 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "method_body");
		DebugLocation(596, 7);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 164)) { return retval; }

			// .\\cs.g:596:12: ( block )
			DebugEnterAlt(1);
			// .\\cs.g:597:2: block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(597, 2);
			PushFollow(Follow._block_in_method_body4215);
			block569=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block569.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("method_body", 164);
			LeaveRule("method_body", 164);
			LeaveRule_method_body();
	        if (state.backtracking > 0) { Memoize(input, 164, method_body_StartIndex); }

	    }
	 	DebugLocation(597, 7);
		} finally { DebugExitRule(GrammarFileName, "method_body"); }
		return retval;

	}
	// $ANTLR end "method_body"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_member_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_member_name() {}

	// $ANTLR start "member_name"
	// .\\cs.g:598:1: member_name : qid ;
	[GrammarRule("member_name")]
	private AstParserRuleReturnScope<object, IToken> member_name()
	{
		EnterRule_member_name();
		EnterRule("member_name", 165);
		TraceIn("member_name", 165);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int member_name_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> qid570 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "member_name");
		DebugLocation(598, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 165)) { return retval; }

			// .\\cs.g:598:12: ( qid )
			DebugEnterAlt(1);
			// .\\cs.g:599:2: qid
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(599, 2);
			PushFollow(Follow._qid_in_member_name4223);
			qid570=qid();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qid570.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("member_name", 165);
			LeaveRule("member_name", 165);
			LeaveRule_member_name();
	        if (state.backtracking > 0) { Memoize(input, 165, member_name_StartIndex); }

	    }
	 	DebugLocation(599, 5);
		} finally { DebugExitRule(GrammarFileName, "member_name"); }
		return retval;

	}
	// $ANTLR end "member_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_property_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_property_declaration() {}

	// $ANTLR start "property_declaration"
	// .\\cs.g:602:1: property_declaration : member_name '{' accessor_declarations '}' ;
	[GrammarRule("property_declaration")]
	private AstParserRuleReturnScope<object, IToken> property_declaration()
	{
		EnterRule_property_declaration();
		EnterRule("property_declaration", 166);
		TraceIn("property_declaration", 166);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int property_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal572 = default(IToken);
	    IToken char_literal574 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> member_name571 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> accessor_declarations573 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal572_tree = default(object);
	    object char_literal574_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "property_declaration");
		DebugLocation(602, 49);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 166)) { return retval; }

			// .\\cs.g:602:21: ( member_name '{' accessor_declarations '}' )
			DebugEnterAlt(1);
			// .\\cs.g:603:2: member_name '{' accessor_declarations '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(603, 2);
			PushFollow(Follow._member_name_in_property_declaration4235);
			member_name571=member_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, member_name571.Tree);
			DebugLocation(603, 16);
			char_literal572=(IToken)Match(input,197,Follow._197_in_property_declaration4239); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal572_tree = (object)adaptor.Create(char_literal572);
			adaptor.AddChild(root_0, char_literal572_tree);
			}
			DebugLocation(603, 22);
			PushFollow(Follow._accessor_declarations_in_property_declaration4243);
			accessor_declarations573=accessor_declarations();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, accessor_declarations573.Tree);
			DebugLocation(603, 46);
			char_literal574=(IToken)Match(input,201,Follow._201_in_property_declaration4247); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal574_tree = (object)adaptor.Create(char_literal574);
			adaptor.AddChild(root_0, char_literal574_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("property_declaration", 166);
			LeaveRule("property_declaration", 166);
			LeaveRule_property_declaration();
	        if (state.backtracking > 0) { Memoize(input, 166, property_declaration_StartIndex); }

	    }
	 	DebugLocation(603, 49);
		} finally { DebugExitRule(GrammarFileName, "property_declaration"); }
		return retval;

	}
	// $ANTLR end "property_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_accessor_declarations() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_accessor_declarations() {}

	// $ANTLR start "accessor_declarations"
	// .\\cs.g:604:1: accessor_declarations : ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? ) ;
	[GrammarRule("accessor_declarations")]
	private AstParserRuleReturnScope<object, IToken> accessor_declarations()
	{
		EnterRule_accessor_declarations();
		EnterRule("accessor_declarations", 167);
		TraceIn("accessor_declarations", 167);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int accessor_declarations_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> attributes575 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> get_accessor_declaration576 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> attributes577 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> set_accessor_declaration578 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> set_accessor_declaration579 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> attributes580 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> get_accessor_declaration581 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "accessor_declarations");
		DebugLocation(604, 72);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 167)) { return retval; }

			// .\\cs.g:604:22: ( ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? ) )
			DebugEnterAlt(1);
			// .\\cs.g:605:2: ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(605, 2);
			// .\\cs.g:605:2: ( attributes )?
			int alt157=2;
			try { DebugEnterSubRule(157);
			try { DebugEnterDecision(157, decisionCanBacktrack[157]);
			int LA157_0 = input.LA(1);

			if ((LA157_0==91))
			{
				alt157 = 1;
			}
			} finally { DebugExitDecision(157); }
			switch (alt157)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:605:2: attributes
				{
				DebugLocation(605, 2);
				PushFollow(Follow._attributes_in_accessor_declarations4255);
				attributes575=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes575.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(157); }

			DebugLocation(606, 3);
			// .\\cs.g:606:3: ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? )
			int alt162=2;
			try { DebugEnterSubRule(162);
			try { DebugEnterDecision(162, decisionCanBacktrack[162]);
			switch (input.LA(1))
			{
			case 140:
			case 161:
			case 163:
			case 164:
				{
				int LA162_1 = input.LA(2);

				if ((LA162_1==133))
				{
					alt162 = 1;
				}
				else if ((LA162_1==172))
				{
					alt162 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 162, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 133:
				{
				alt162 = 1;
				}
				break;
			case 172:
				{
				alt162 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 162, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(162); }
			switch (alt162)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:606:4: get_accessor_declaration ( attributes )? ( set_accessor_declaration )?
				{
				DebugLocation(606, 4);
				PushFollow(Follow._get_accessor_declaration_in_accessor_declarations4261);
				get_accessor_declaration576=get_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, get_accessor_declaration576.Tree);
				DebugLocation(606, 31);
				// .\\cs.g:606:31: ( attributes )?
				int alt158=2;
				try { DebugEnterSubRule(158);
				try { DebugEnterDecision(158, decisionCanBacktrack[158]);
				int LA158_0 = input.LA(1);

				if ((LA158_0==91))
				{
					alt158 = 1;
				}
				} finally { DebugExitDecision(158); }
				switch (alt158)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:606:31: attributes
					{
					DebugLocation(606, 31);
					PushFollow(Follow._attributes_in_accessor_declarations4265);
					attributes577=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes577.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(158); }

				DebugLocation(606, 45);
				// .\\cs.g:606:45: ( set_accessor_declaration )?
				int alt159=2;
				try { DebugEnterSubRule(159);
				try { DebugEnterDecision(159, decisionCanBacktrack[159]);
				int LA159_0 = input.LA(1);

				if ((LA159_0==140||LA159_0==161||(LA159_0>=163 && LA159_0<=164)||LA159_0==172))
				{
					alt159 = 1;
				}
				} finally { DebugExitDecision(159); }
				switch (alt159)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:606:45: set_accessor_declaration
					{
					DebugLocation(606, 45);
					PushFollow(Follow._set_accessor_declaration_in_accessor_declarations4270);
					set_accessor_declaration578=set_accessor_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, set_accessor_declaration578.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(159); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:607:5: set_accessor_declaration ( attributes )? ( get_accessor_declaration )?
				{
				DebugLocation(607, 5);
				PushFollow(Follow._set_accessor_declaration_in_accessor_declarations4277);
				set_accessor_declaration579=set_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, set_accessor_declaration579.Tree);
				DebugLocation(607, 32);
				// .\\cs.g:607:32: ( attributes )?
				int alt160=2;
				try { DebugEnterSubRule(160);
				try { DebugEnterDecision(160, decisionCanBacktrack[160]);
				int LA160_0 = input.LA(1);

				if ((LA160_0==91))
				{
					alt160 = 1;
				}
				} finally { DebugExitDecision(160); }
				switch (alt160)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:607:32: attributes
					{
					DebugLocation(607, 32);
					PushFollow(Follow._attributes_in_accessor_declarations4281);
					attributes580=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes580.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(160); }

				DebugLocation(607, 46);
				// .\\cs.g:607:46: ( get_accessor_declaration )?
				int alt161=2;
				try { DebugEnterSubRule(161);
				try { DebugEnterDecision(161, decisionCanBacktrack[161]);
				int LA161_0 = input.LA(1);

				if ((LA161_0==133||LA161_0==140||LA161_0==161||(LA161_0>=163 && LA161_0<=164)))
				{
					alt161 = 1;
				}
				} finally { DebugExitDecision(161); }
				switch (alt161)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:607:46: get_accessor_declaration
					{
					DebugLocation(607, 46);
					PushFollow(Follow._get_accessor_declaration_in_accessor_declarations4286);
					get_accessor_declaration581=get_accessor_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, get_accessor_declaration581.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(161); }


				}
				break;

			}
			} finally { DebugExitSubRule(162); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("accessor_declarations", 167);
			LeaveRule("accessor_declarations", 167);
			LeaveRule_accessor_declarations();
	        if (state.backtracking > 0) { Memoize(input, 167, accessor_declarations_StartIndex); }

	    }
	 	DebugLocation(607, 72);
		} finally { DebugExitRule(GrammarFileName, "accessor_declarations"); }
		return retval;

	}
	// $ANTLR end "accessor_declarations"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_get_accessor_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_get_accessor_declaration() {}

	// $ANTLR start "get_accessor_declaration"
	// .\\cs.g:608:1: get_accessor_declaration : ( accessor_modifier )? 'get' accessor_body ;
	[GrammarRule("get_accessor_declaration")]
	private AstParserRuleReturnScope<object, IToken> get_accessor_declaration()
	{
		EnterRule_get_accessor_declaration();
		EnterRule("get_accessor_declaration", 168);
		TraceIn("get_accessor_declaration", 168);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int get_accessor_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal583 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> accessor_modifier582 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> accessor_body584 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal583_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "get_accessor_declaration");
		DebugLocation(608, 44);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 168)) { return retval; }

			// .\\cs.g:608:25: ( ( accessor_modifier )? 'get' accessor_body )
			DebugEnterAlt(1);
			// .\\cs.g:609:2: ( accessor_modifier )? 'get' accessor_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(609, 2);
			// .\\cs.g:609:2: ( accessor_modifier )?
			int alt163=2;
			try { DebugEnterSubRule(163);
			try { DebugEnterDecision(163, decisionCanBacktrack[163]);
			int LA163_0 = input.LA(1);

			if ((LA163_0==140||LA163_0==161||(LA163_0>=163 && LA163_0<=164)))
			{
				alt163 = 1;
			}
			} finally { DebugExitDecision(163); }
			switch (alt163)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:609:2: accessor_modifier
				{
				DebugLocation(609, 2);
				PushFollow(Follow._accessor_modifier_in_get_accessor_declaration4296);
				accessor_modifier582=accessor_modifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, accessor_modifier582.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(163); }

			DebugLocation(609, 23);
			string_literal583=(IToken)Match(input,133,Follow._133_in_get_accessor_declaration4301); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal583_tree = (object)adaptor.Create(string_literal583);
			adaptor.AddChild(root_0, string_literal583_tree);
			}
			DebugLocation(609, 31);
			PushFollow(Follow._accessor_body_in_get_accessor_declaration4305);
			accessor_body584=accessor_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, accessor_body584.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("get_accessor_declaration", 168);
			LeaveRule("get_accessor_declaration", 168);
			LeaveRule_get_accessor_declaration();
	        if (state.backtracking > 0) { Memoize(input, 168, get_accessor_declaration_StartIndex); }

	    }
	 	DebugLocation(609, 44);
		} finally { DebugExitRule(GrammarFileName, "get_accessor_declaration"); }
		return retval;

	}
	// $ANTLR end "get_accessor_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_set_accessor_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_set_accessor_declaration() {}

	// $ANTLR start "set_accessor_declaration"
	// .\\cs.g:610:1: set_accessor_declaration : ( accessor_modifier )? 'set' accessor_body ;
	[GrammarRule("set_accessor_declaration")]
	private AstParserRuleReturnScope<object, IToken> set_accessor_declaration()
	{
		EnterRule_set_accessor_declaration();
		EnterRule("set_accessor_declaration", 169);
		TraceIn("set_accessor_declaration", 169);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int set_accessor_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal586 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> accessor_modifier585 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> accessor_body587 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal586_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "set_accessor_declaration");
		DebugLocation(610, 44);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 169)) { return retval; }

			// .\\cs.g:610:25: ( ( accessor_modifier )? 'set' accessor_body )
			DebugEnterAlt(1);
			// .\\cs.g:611:2: ( accessor_modifier )? 'set' accessor_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(611, 2);
			// .\\cs.g:611:2: ( accessor_modifier )?
			int alt164=2;
			try { DebugEnterSubRule(164);
			try { DebugEnterDecision(164, decisionCanBacktrack[164]);
			int LA164_0 = input.LA(1);

			if ((LA164_0==140||LA164_0==161||(LA164_0>=163 && LA164_0<=164)))
			{
				alt164 = 1;
			}
			} finally { DebugExitDecision(164); }
			switch (alt164)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:611:2: accessor_modifier
				{
				DebugLocation(611, 2);
				PushFollow(Follow._accessor_modifier_in_set_accessor_declaration4313);
				accessor_modifier585=accessor_modifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, accessor_modifier585.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(164); }

			DebugLocation(611, 23);
			string_literal586=(IToken)Match(input,172,Follow._172_in_set_accessor_declaration4318); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal586_tree = (object)adaptor.Create(string_literal586);
			adaptor.AddChild(root_0, string_literal586_tree);
			}
			DebugLocation(611, 31);
			PushFollow(Follow._accessor_body_in_set_accessor_declaration4322);
			accessor_body587=accessor_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, accessor_body587.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_accessor_declaration", 169);
			LeaveRule("set_accessor_declaration", 169);
			LeaveRule_set_accessor_declaration();
	        if (state.backtracking > 0) { Memoize(input, 169, set_accessor_declaration_StartIndex); }

	    }
	 	DebugLocation(611, 44);
		} finally { DebugExitRule(GrammarFileName, "set_accessor_declaration"); }
		return retval;

	}
	// $ANTLR end "set_accessor_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_accessor_modifier() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_accessor_modifier() {}

	// $ANTLR start "accessor_modifier"
	// .\\cs.g:612:1: accessor_modifier : ( 'public' | 'protected' | 'private' | 'internal' );
	[GrammarRule("accessor_modifier")]
	private AstParserRuleReturnScope<object, IToken> accessor_modifier()
	{
		EnterRule_accessor_modifier();
		EnterRule("accessor_modifier", 170);
		TraceIn("accessor_modifier", 170);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int accessor_modifier_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set588 = default(IToken);

	    object set588_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "accessor_modifier");
		DebugLocation(612, 49);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 170)) { return retval; }

			// .\\cs.g:612:18: ( 'public' | 'protected' | 'private' | 'internal' )
			DebugEnterAlt(1);
			// .\\cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(612, 18);

			set588=(IToken)input.LT(1);
			if (input.LA(1)==140||input.LA(1)==161||(input.LA(1)>=163 && input.LA(1)<=164))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set588));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("accessor_modifier", 170);
			LeaveRule("accessor_modifier", 170);
			LeaveRule_accessor_modifier();
	        if (state.backtracking > 0) { Memoize(input, 170, accessor_modifier_StartIndex); }

	    }
	 	DebugLocation(613, 49);
		} finally { DebugExitRule(GrammarFileName, "accessor_modifier"); }
		return retval;

	}
	// $ANTLR end "accessor_modifier"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_accessor_body() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_accessor_body() {}

	// $ANTLR start "accessor_body"
	// .\\cs.g:614:1: accessor_body : block ;
	[GrammarRule("accessor_body")]
	private AstParserRuleReturnScope<object, IToken> accessor_body()
	{
		EnterRule_accessor_body();
		EnterRule("accessor_body", 171);
		TraceIn("accessor_body", 171);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int accessor_body_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> block589 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "accessor_body");
		DebugLocation(614, 7);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 171)) { return retval; }

			// .\\cs.g:614:14: ( block )
			DebugEnterAlt(1);
			// .\\cs.g:615:2: block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(615, 2);
			PushFollow(Follow._block_in_accessor_body4350);
			block589=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block589.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("accessor_body", 171);
			LeaveRule("accessor_body", 171);
			LeaveRule_accessor_body();
	        if (state.backtracking > 0) { Memoize(input, 171, accessor_body_StartIndex); }

	    }
	 	DebugLocation(615, 7);
		} finally { DebugExitRule(GrammarFileName, "accessor_body"); }
		return retval;

	}
	// $ANTLR end "accessor_body"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_event_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_event_declaration() {}

	// $ANTLR start "event_declaration"
	// .\\cs.g:618:1: event_declaration : 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' ) ;
	[GrammarRule("event_declaration")]
	private AstParserRuleReturnScope<object, IToken> event_declaration()
	{
		EnterRule_event_declaration();
		EnterRule("event_declaration", 172);
		TraceIn("event_declaration", 172);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int event_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal590 = default(IToken);
	    IToken char_literal593 = default(IToken);
	    IToken char_literal595 = default(IToken);
	    IToken char_literal597 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type591 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> member_name592 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> event_accessor_declarations594 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable_declarators596 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal590_tree = default(object);
	    object char_literal593_tree = default(object);
	    object char_literal595_tree = default(object);
	    object char_literal597_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "event_declaration");
		DebugLocation(618, 2);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 172)) { return retval; }

			// .\\cs.g:618:18: ( 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' ) )
			DebugEnterAlt(1);
			// .\\cs.g:619:2: 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(619, 2);
			string_literal590=(IToken)Match(input,123,Follow._123_in_event_declaration4360); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal590_tree = (object)adaptor.Create(string_literal590);
			adaptor.AddChild(root_0, string_literal590_tree);
			}
			DebugLocation(619, 12);
			PushFollow(Follow._type_in_event_declaration4364);
			type591=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type591.Tree);
			DebugLocation(620, 3);
			// .\\cs.g:620:3: ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' )
			int alt165=2;
			try { DebugEnterSubRule(165);
			try { DebugEnterDecision(165, decisionCanBacktrack[165]);
			int LA165_0 = input.LA(1);

			if ((LA165_0==103||LA165_0==106||LA165_0==109||LA165_0==114||LA165_0==119||LA165_0==129||LA165_0==138||LA165_0==146||LA165_0==151||LA165_0==169||LA165_0==173||LA165_0==177||(LA165_0>=185 && LA165_0<=186)||LA165_0==189) && (EvaluatePredicate(synpred25_cs_fragment)))
			{
				alt165 = 1;
			}
			else if ((LA165_0==IDENTIFIER||LA165_0==95||(LA165_0>=97 && LA165_0<=98)||(LA165_0>=100 && LA165_0<=101)||LA165_0==105||LA165_0==117||LA165_0==120||LA165_0==122||LA165_0==126||LA165_0==132||LA165_0==135||LA165_0==141||(LA165_0>=143 && LA165_0<=144)||(LA165_0>=147 && LA165_0<=148)||LA165_0==152||LA165_0==154||LA165_0==157||LA165_0==160||LA165_0==162||LA165_0==167||(LA165_0>=171 && LA165_0<=172)||LA165_0==183||LA165_0==190||LA165_0==194||LA165_0==196))
			{
				int LA165_2 = input.LA(2);

				if ((EvaluatePredicate(synpred25_cs_fragment)))
				{
					alt165 = 1;
				}
				else if ((true))
				{
					alt165 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 165, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA165_0==Character_literal||LA165_0==FALSE||LA165_0==Hex_number||(LA165_0>=NULL && LA165_0<=NUMBER)||LA165_0==Real_literal||LA165_0==STRINGLITERAL||LA165_0==TRUE||LA165_0==Verbatim_string_literal) && (EvaluatePredicate(synpred25_cs_fragment)))
			{
				alt165 = 1;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 165, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(165); }
			switch (alt165)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:620:4: ( member_name '{' )=> member_name '{' event_accessor_declarations '}'
				{
				DebugLocation(620, 27);
				PushFollow(Follow._member_name_in_event_declaration4379);
				member_name592=member_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, member_name592.Tree);
				DebugLocation(620, 41);
				char_literal593=(IToken)Match(input,197,Follow._197_in_event_declaration4383); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal593_tree = (object)adaptor.Create(char_literal593);
				adaptor.AddChild(root_0, char_literal593_tree);
				}
				DebugLocation(620, 47);
				PushFollow(Follow._event_accessor_declarations_in_event_declaration4387);
				event_accessor_declarations594=event_accessor_declarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, event_accessor_declarations594.Tree);
				DebugLocation(620, 77);
				char_literal595=(IToken)Match(input,201,Follow._201_in_event_declaration4391); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal595_tree = (object)adaptor.Create(char_literal595);
				adaptor.AddChild(root_0, char_literal595_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:621:5: variable_declarators ';'
				{
				DebugLocation(621, 5);
				PushFollow(Follow._variable_declarators_in_event_declaration4397);
				variable_declarators596=variable_declarators();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable_declarators596.Tree);
				DebugLocation(621, 28);
				char_literal597=(IToken)Match(input,SEMI,Follow._SEMI_in_event_declaration4401); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal597_tree = (object)adaptor.Create(char_literal597);
				adaptor.AddChild(root_0, char_literal597_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(165); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("event_declaration", 172);
			LeaveRule("event_declaration", 172);
			LeaveRule_event_declaration();
	        if (state.backtracking > 0) { Memoize(input, 172, event_declaration_StartIndex); }

	    }
	 	DebugLocation(622, 2);
		} finally { DebugExitRule(GrammarFileName, "event_declaration"); }
		return retval;

	}
	// $ANTLR end "event_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_event_modifiers() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_event_modifiers() {}

	// $ANTLR start "event_modifiers"
	// .\\cs.g:623:1: event_modifiers : ( modifier )+ ;
	[GrammarRule("event_modifiers")]
	private AstParserRuleReturnScope<object, IToken> event_modifiers()
	{
		EnterRule_event_modifiers();
		EnterRule("event_modifiers", 173);
		TraceIn("event_modifiers", 173);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int event_modifiers_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> modifier598 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "event_modifiers");
		DebugLocation(623, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 173)) { return retval; }

			// .\\cs.g:623:16: ( ( modifier )+ )
			DebugEnterAlt(1);
			// .\\cs.g:624:2: ( modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(624, 2);
			// .\\cs.g:624:2: ( modifier )+
			int cnt166=0;
			try { DebugEnterSubRule(166);
			while (true)
			{
				int alt166=2;
				try { DebugEnterDecision(166, decisionCanBacktrack[166]);
				int LA166_0 = input.LA(1);

				if ((LA166_0==96||LA166_0==125||LA166_0==140||LA166_0==150||LA166_0==156||LA166_0==161||(LA166_0>=163 && LA166_0<=165)||LA166_0==170||LA166_0==176||LA166_0==188||LA166_0==191||LA166_0==193))
				{
					alt166 = 1;
				}


				} finally { DebugExitDecision(166); }
				switch (alt166)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:624:2: modifier
					{
					DebugLocation(624, 2);
					PushFollow(Follow._modifier_in_event_modifiers4413);
					modifier598=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifier598.Tree);

					}
					break;

				default:
					if (cnt166 >= 1)
						goto loop166;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee166 = new EarlyExitException( 166, input );
					DebugRecognitionException(eee166);
					throw eee166;
				}
				cnt166++;
			}
			loop166:
				;

			} finally { DebugExitSubRule(166); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("event_modifiers", 173);
			LeaveRule("event_modifiers", 173);
			LeaveRule_event_modifiers();
	        if (state.backtracking > 0) { Memoize(input, 173, event_modifiers_StartIndex); }

	    }
	 	DebugLocation(624, 11);
		} finally { DebugExitRule(GrammarFileName, "event_modifiers"); }
		return retval;

	}
	// $ANTLR end "event_modifiers"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_event_accessor_declarations() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_event_accessor_declarations() {}

	// $ANTLR start "event_accessor_declarations"
	// .\\cs.g:625:1: event_accessor_declarations : ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) ) ;
	[GrammarRule("event_accessor_declarations")]
	private AstParserRuleReturnScope<object, IToken> event_accessor_declarations()
	{
		EnterRule_event_accessor_declarations();
		EnterRule("event_accessor_declarations", 174);
		TraceIn("event_accessor_declarations", 174);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int event_accessor_declarations_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> attributes599 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> add_accessor_declaration600 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> attributes601 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> remove_accessor_declaration602 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> remove_accessor_declaration603 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> attributes604 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> add_accessor_declaration605 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "event_accessor_declarations");
		DebugLocation(625, 89);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 174)) { return retval; }

			// .\\cs.g:625:28: ( ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) ) )
			DebugEnterAlt(1);
			// .\\cs.g:626:2: ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(626, 2);
			// .\\cs.g:626:2: ( attributes )?
			int alt167=2;
			try { DebugEnterSubRule(167);
			try { DebugEnterDecision(167, decisionCanBacktrack[167]);
			int LA167_0 = input.LA(1);

			if ((LA167_0==91))
			{
				alt167 = 1;
			}
			} finally { DebugExitDecision(167); }
			switch (alt167)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:626:2: attributes
				{
				DebugLocation(626, 2);
				PushFollow(Follow._attributes_in_event_accessor_declarations4422);
				attributes599=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes599.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(167); }

			DebugLocation(626, 16);
			// .\\cs.g:626:16: ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) )
			int alt170=2;
			try { DebugEnterSubRule(170);
			try { DebugEnterDecision(170, decisionCanBacktrack[170]);
			int LA170_0 = input.LA(1);

			if ((LA170_0==97))
			{
				alt170 = 1;
			}
			else if ((LA170_0==167))
			{
				alt170 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 170, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(170); }
			switch (alt170)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:626:17: ( add_accessor_declaration ( attributes )? remove_accessor_declaration )
				{
				DebugLocation(626, 17);
				// .\\cs.g:626:17: ( add_accessor_declaration ( attributes )? remove_accessor_declaration )
				DebugEnterAlt(1);
				// .\\cs.g:626:18: add_accessor_declaration ( attributes )? remove_accessor_declaration
				{
				DebugLocation(626, 18);
				PushFollow(Follow._add_accessor_declaration_in_event_accessor_declarations4429);
				add_accessor_declaration600=add_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, add_accessor_declaration600.Tree);
				DebugLocation(626, 45);
				// .\\cs.g:626:45: ( attributes )?
				int alt168=2;
				try { DebugEnterSubRule(168);
				try { DebugEnterDecision(168, decisionCanBacktrack[168]);
				int LA168_0 = input.LA(1);

				if ((LA168_0==91))
				{
					alt168 = 1;
				}
				} finally { DebugExitDecision(168); }
				switch (alt168)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:626:45: attributes
					{
					DebugLocation(626, 45);
					PushFollow(Follow._attributes_in_event_accessor_declarations4433);
					attributes601=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes601.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(168); }

				DebugLocation(626, 59);
				PushFollow(Follow._remove_accessor_declaration_in_event_accessor_declarations4438);
				remove_accessor_declaration602=remove_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, remove_accessor_declaration602.Tree);

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:627:18: ( remove_accessor_declaration ( attributes )? add_accessor_declaration )
				{
				DebugLocation(627, 18);
				// .\\cs.g:627:18: ( remove_accessor_declaration ( attributes )? add_accessor_declaration )
				DebugEnterAlt(1);
				// .\\cs.g:627:19: remove_accessor_declaration ( attributes )? add_accessor_declaration
				{
				DebugLocation(627, 19);
				PushFollow(Follow._remove_accessor_declaration_in_event_accessor_declarations4459);
				remove_accessor_declaration603=remove_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, remove_accessor_declaration603.Tree);
				DebugLocation(627, 49);
				// .\\cs.g:627:49: ( attributes )?
				int alt169=2;
				try { DebugEnterSubRule(169);
				try { DebugEnterDecision(169, decisionCanBacktrack[169]);
				int LA169_0 = input.LA(1);

				if ((LA169_0==91))
				{
					alt169 = 1;
				}
				} finally { DebugExitDecision(169); }
				switch (alt169)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:627:49: attributes
					{
					DebugLocation(627, 49);
					PushFollow(Follow._attributes_in_event_accessor_declarations4463);
					attributes604=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes604.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(169); }

				DebugLocation(627, 63);
				PushFollow(Follow._add_accessor_declaration_in_event_accessor_declarations4468);
				add_accessor_declaration605=add_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, add_accessor_declaration605.Tree);

				}


				}
				break;

			}
			} finally { DebugExitSubRule(170); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("event_accessor_declarations", 174);
			LeaveRule("event_accessor_declarations", 174);
			LeaveRule_event_accessor_declarations();
	        if (state.backtracking > 0) { Memoize(input, 174, event_accessor_declarations_StartIndex); }

	    }
	 	DebugLocation(627, 89);
		} finally { DebugExitRule(GrammarFileName, "event_accessor_declarations"); }
		return retval;

	}
	// $ANTLR end "event_accessor_declarations"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_add_accessor_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_add_accessor_declaration() {}

	// $ANTLR start "add_accessor_declaration"
	// .\\cs.g:628:1: add_accessor_declaration : 'add' block ;
	[GrammarRule("add_accessor_declaration")]
	private AstParserRuleReturnScope<object, IToken> add_accessor_declaration()
	{
		EnterRule_add_accessor_declaration();
		EnterRule("add_accessor_declaration", 175);
		TraceIn("add_accessor_declaration", 175);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int add_accessor_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal606 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> block607 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal606_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "add_accessor_declaration");
		DebugLocation(628, 15);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 175)) { return retval; }

			// .\\cs.g:628:25: ( 'add' block )
			DebugEnterAlt(1);
			// .\\cs.g:629:2: 'add' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(629, 2);
			string_literal606=(IToken)Match(input,97,Follow._97_in_add_accessor_declaration4478); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal606_tree = (object)adaptor.Create(string_literal606);
			adaptor.AddChild(root_0, string_literal606_tree);
			}
			DebugLocation(629, 10);
			PushFollow(Follow._block_in_add_accessor_declaration4482);
			block607=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block607.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_accessor_declaration", 175);
			LeaveRule("add_accessor_declaration", 175);
			LeaveRule_add_accessor_declaration();
	        if (state.backtracking > 0) { Memoize(input, 175, add_accessor_declaration_StartIndex); }

	    }
	 	DebugLocation(629, 15);
		} finally { DebugExitRule(GrammarFileName, "add_accessor_declaration"); }
		return retval;

	}
	// $ANTLR end "add_accessor_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_remove_accessor_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_remove_accessor_declaration() {}

	// $ANTLR start "remove_accessor_declaration"
	// .\\cs.g:630:1: remove_accessor_declaration : 'remove' block ;
	[GrammarRule("remove_accessor_declaration")]
	private AstParserRuleReturnScope<object, IToken> remove_accessor_declaration()
	{
		EnterRule_remove_accessor_declaration();
		EnterRule("remove_accessor_declaration", 176);
		TraceIn("remove_accessor_declaration", 176);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int remove_accessor_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal608 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> block609 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal608_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "remove_accessor_declaration");
		DebugLocation(630, 18);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 176)) { return retval; }

			// .\\cs.g:630:28: ( 'remove' block )
			DebugEnterAlt(1);
			// .\\cs.g:631:2: 'remove' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(631, 2);
			string_literal608=(IToken)Match(input,167,Follow._167_in_remove_accessor_declaration4490); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal608_tree = (object)adaptor.Create(string_literal608);
			adaptor.AddChild(root_0, string_literal608_tree);
			}
			DebugLocation(631, 13);
			PushFollow(Follow._block_in_remove_accessor_declaration4494);
			block609=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block609.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("remove_accessor_declaration", 176);
			LeaveRule("remove_accessor_declaration", 176);
			LeaveRule_remove_accessor_declaration();
	        if (state.backtracking > 0) { Memoize(input, 176, remove_accessor_declaration_StartIndex); }

	    }
	 	DebugLocation(631, 18);
		} finally { DebugExitRule(GrammarFileName, "remove_accessor_declaration"); }
		return retval;

	}
	// $ANTLR end "remove_accessor_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_enum_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_enum_declaration() {}

	// $ANTLR start "enum_declaration"
	// .\\cs.g:636:1: enum_declaration : 'enum' identifier ( enum_base )? enum_body ( ';' )? ;
	[GrammarRule("enum_declaration")]
	private AstParserRuleReturnScope<object, IToken> enum_declaration()
	{
		EnterRule_enum_declaration();
		EnterRule("enum_declaration", 177);
		TraceIn("enum_declaration", 177);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int enum_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal610 = default(IToken);
	    IToken char_literal614 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier611 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> enum_base612 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> enum_body613 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal610_tree = default(object);
	    object char_literal614_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "enum_declaration");
		DebugLocation(636, 53);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 177)) { return retval; }

			// .\\cs.g:636:17: ( 'enum' identifier ( enum_base )? enum_body ( ';' )? )
			DebugEnterAlt(1);
			// .\\cs.g:637:2: 'enum' identifier ( enum_base )? enum_body ( ';' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(637, 2);
			string_literal610=(IToken)Match(input,ENUM,Follow._ENUM_in_enum_declaration4506); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal610_tree = (object)adaptor.Create(string_literal610);
			adaptor.AddChild(root_0, string_literal610_tree);
			}
			DebugLocation(637, 11);
			PushFollow(Follow._identifier_in_enum_declaration4510);
			identifier611=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier611.Tree);
			DebugLocation(637, 24);
			// .\\cs.g:637:24: ( enum_base )?
			int alt171=2;
			try { DebugEnterSubRule(171);
			try { DebugEnterDecision(171, decisionCanBacktrack[171]);
			int LA171_0 = input.LA(1);

			if ((LA171_0==79))
			{
				alt171 = 1;
			}
			} finally { DebugExitDecision(171); }
			switch (alt171)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:637:24: enum_base
				{
				DebugLocation(637, 24);
				PushFollow(Follow._enum_base_in_enum_declaration4514);
				enum_base612=enum_base();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_base612.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(171); }

			DebugLocation(637, 37);
			PushFollow(Follow._enum_body_in_enum_declaration4519);
			enum_body613=enum_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enum_body613.Tree);
			DebugLocation(637, 49);
			// .\\cs.g:637:49: ( ';' )?
			int alt172=2;
			try { DebugEnterSubRule(172);
			try { DebugEnterDecision(172, decisionCanBacktrack[172]);
			int LA172_0 = input.LA(1);

			if ((LA172_0==SEMI))
			{
				alt172 = 1;
			}
			} finally { DebugExitDecision(172); }
			switch (alt172)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:637:49: ';'
				{
				DebugLocation(637, 49);
				char_literal614=(IToken)Match(input,SEMI,Follow._SEMI_in_enum_declaration4523); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal614_tree = (object)adaptor.Create(char_literal614);
				adaptor.AddChild(root_0, char_literal614_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(172); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_declaration", 177);
			LeaveRule("enum_declaration", 177);
			LeaveRule_enum_declaration();
	        if (state.backtracking > 0) { Memoize(input, 177, enum_declaration_StartIndex); }

	    }
	 	DebugLocation(637, 53);
		} finally { DebugExitRule(GrammarFileName, "enum_declaration"); }
		return retval;

	}
	// $ANTLR end "enum_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_enum_base() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_enum_base() {}

	// $ANTLR start "enum_base"
	// .\\cs.g:638:1: enum_base : ':' integral_type ;
	[GrammarRule("enum_base")]
	private AstParserRuleReturnScope<object, IToken> enum_base()
	{
		EnterRule_enum_base();
		EnterRule("enum_base", 178);
		TraceIn("enum_base", 178);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int enum_base_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal615 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> integral_type616 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal615_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "enum_base");
		DebugLocation(638, 21);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 178)) { return retval; }

			// .\\cs.g:638:10: ( ':' integral_type )
			DebugEnterAlt(1);
			// .\\cs.g:639:2: ':' integral_type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(639, 2);
			char_literal615=(IToken)Match(input,79,Follow._79_in_enum_base4532); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal615_tree = (object)adaptor.Create(char_literal615);
			adaptor.AddChild(root_0, char_literal615_tree);
			}
			DebugLocation(639, 8);
			PushFollow(Follow._integral_type_in_enum_base4536);
			integral_type616=integral_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, integral_type616.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_base", 178);
			LeaveRule("enum_base", 178);
			LeaveRule_enum_base();
	        if (state.backtracking > 0) { Memoize(input, 178, enum_base_StartIndex); }

	    }
	 	DebugLocation(639, 21);
		} finally { DebugExitRule(GrammarFileName, "enum_base"); }
		return retval;

	}
	// $ANTLR end "enum_base"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_enum_body() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_enum_body() {}

	// $ANTLR start "enum_body"
	// .\\cs.g:640:1: enum_body : '{' ( enum_member_declarations ( ',' )? )? '}' ;
	[GrammarRule("enum_body")]
	private AstParserRuleReturnScope<object, IToken> enum_body()
	{
		EnterRule_enum_body();
		EnterRule("enum_body", 179);
		TraceIn("enum_body", 179);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int enum_body_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal617 = default(IToken);
	    IToken char_literal619 = default(IToken);
	    IToken char_literal620 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> enum_member_declarations618 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal617_tree = default(object);
	    object char_literal619_tree = default(object);
	    object char_literal620_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "enum_body");
		DebugLocation(640, 44);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 179)) { return retval; }

			// .\\cs.g:640:10: ( '{' ( enum_member_declarations ( ',' )? )? '}' )
			DebugEnterAlt(1);
			// .\\cs.g:641:2: '{' ( enum_member_declarations ( ',' )? )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(641, 2);
			char_literal617=(IToken)Match(input,197,Follow._197_in_enum_body4544); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal617_tree = (object)adaptor.Create(char_literal617);
			adaptor.AddChild(root_0, char_literal617_tree);
			}
			DebugLocation(641, 6);
			// .\\cs.g:641:6: ( enum_member_declarations ( ',' )? )?
			int alt174=2;
			try { DebugEnterSubRule(174);
			try { DebugEnterDecision(174, decisionCanBacktrack[174]);
			int LA174_0 = input.LA(1);

			if ((LA174_0==IDENTIFIER||LA174_0==91||LA174_0==95||(LA174_0>=97 && LA174_0<=98)||(LA174_0>=100 && LA174_0<=101)||LA174_0==105||LA174_0==117||LA174_0==120||LA174_0==122||LA174_0==126||LA174_0==132||LA174_0==135||LA174_0==141||(LA174_0>=143 && LA174_0<=144)||(LA174_0>=147 && LA174_0<=148)||LA174_0==152||LA174_0==154||LA174_0==157||LA174_0==160||LA174_0==162||LA174_0==167||(LA174_0>=171 && LA174_0<=172)||LA174_0==183||LA174_0==190||LA174_0==194||LA174_0==196))
			{
				alt174 = 1;
			}
			} finally { DebugExitDecision(174); }
			switch (alt174)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:641:7: enum_member_declarations ( ',' )?
				{
				DebugLocation(641, 7);
				PushFollow(Follow._enum_member_declarations_in_enum_body4547);
				enum_member_declarations618=enum_member_declarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_member_declarations618.Tree);
				DebugLocation(641, 32);
				// .\\cs.g:641:32: ( ',' )?
				int alt173=2;
				try { DebugEnterSubRule(173);
				try { DebugEnterDecision(173, decisionCanBacktrack[173]);
				int LA173_0 = input.LA(1);

				if ((LA173_0==74))
				{
					alt173 = 1;
				}
				} finally { DebugExitDecision(173); }
				switch (alt173)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:641:32: ','
					{
					DebugLocation(641, 32);
					char_literal619=(IToken)Match(input,74,Follow._74_in_enum_body4549); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal619_tree = (object)adaptor.Create(char_literal619);
					adaptor.AddChild(root_0, char_literal619_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(173); }


				}
				break;

			}
			} finally { DebugExitSubRule(174); }

			DebugLocation(641, 41);
			char_literal620=(IToken)Match(input,201,Follow._201_in_enum_body4556); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal620_tree = (object)adaptor.Create(char_literal620);
			adaptor.AddChild(root_0, char_literal620_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_body", 179);
			LeaveRule("enum_body", 179);
			LeaveRule_enum_body();
	        if (state.backtracking > 0) { Memoize(input, 179, enum_body_StartIndex); }

	    }
	 	DebugLocation(641, 44);
		} finally { DebugExitRule(GrammarFileName, "enum_body"); }
		return retval;

	}
	// $ANTLR end "enum_body"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_enum_member_declarations() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_enum_member_declarations() {}

	// $ANTLR start "enum_member_declarations"
	// .\\cs.g:642:1: enum_member_declarations : enum_member_declaration ( ',' enum_member_declaration )* ;
	[GrammarRule("enum_member_declarations")]
	private AstParserRuleReturnScope<object, IToken> enum_member_declarations()
	{
		EnterRule_enum_member_declarations();
		EnterRule("enum_member_declarations", 180);
		TraceIn("enum_member_declarations", 180);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int enum_member_declarations_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal622 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> enum_member_declaration621 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> enum_member_declaration623 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal622_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "enum_member_declarations");
		DebugLocation(642, 56);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 180)) { return retval; }

			// .\\cs.g:642:25: ( enum_member_declaration ( ',' enum_member_declaration )* )
			DebugEnterAlt(1);
			// .\\cs.g:643:2: enum_member_declaration ( ',' enum_member_declaration )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(643, 2);
			PushFollow(Follow._enum_member_declaration_in_enum_member_declarations4564);
			enum_member_declaration621=enum_member_declaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enum_member_declaration621.Tree);
			DebugLocation(643, 26);
			// .\\cs.g:643:26: ( ',' enum_member_declaration )*
			try { DebugEnterSubRule(175);
			while (true)
			{
				int alt175=2;
				try { DebugEnterDecision(175, decisionCanBacktrack[175]);
				int LA175_0 = input.LA(1);

				if ((LA175_0==74))
				{
					int LA175_1 = input.LA(2);

					if ((LA175_1==IDENTIFIER||LA175_1==91||LA175_1==95||(LA175_1>=97 && LA175_1<=98)||(LA175_1>=100 && LA175_1<=101)||LA175_1==105||LA175_1==117||LA175_1==120||LA175_1==122||LA175_1==126||LA175_1==132||LA175_1==135||LA175_1==141||(LA175_1>=143 && LA175_1<=144)||(LA175_1>=147 && LA175_1<=148)||LA175_1==152||LA175_1==154||LA175_1==157||LA175_1==160||LA175_1==162||LA175_1==167||(LA175_1>=171 && LA175_1<=172)||LA175_1==183||LA175_1==190||LA175_1==194||LA175_1==196))
					{
						alt175 = 1;
					}


				}


				} finally { DebugExitDecision(175); }
				switch ( alt175 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:643:27: ',' enum_member_declaration
					{
					DebugLocation(643, 27);
					char_literal622=(IToken)Match(input,74,Follow._74_in_enum_member_declarations4567); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal622_tree = (object)adaptor.Create(char_literal622);
					adaptor.AddChild(root_0, char_literal622_tree);
					}
					DebugLocation(643, 31);
					PushFollow(Follow._enum_member_declaration_in_enum_member_declarations4569);
					enum_member_declaration623=enum_member_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, enum_member_declaration623.Tree);

					}
					break;

				default:
					goto loop175;
				}
			}

			loop175:
				;

			} finally { DebugExitSubRule(175); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_member_declarations", 180);
			LeaveRule("enum_member_declarations", 180);
			LeaveRule_enum_member_declarations();
	        if (state.backtracking > 0) { Memoize(input, 180, enum_member_declarations_StartIndex); }

	    }
	 	DebugLocation(643, 56);
		} finally { DebugExitRule(GrammarFileName, "enum_member_declarations"); }
		return retval;

	}
	// $ANTLR end "enum_member_declarations"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_enum_member_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_enum_member_declaration() {}

	// $ANTLR start "enum_member_declaration"
	// .\\cs.g:644:1: enum_member_declaration : ( attributes )? identifier ( '=' expression )? ;
	[GrammarRule("enum_member_declaration")]
	private AstParserRuleReturnScope<object, IToken> enum_member_declaration()
	{
		EnterRule_enum_member_declaration();
		EnterRule("enum_member_declaration", 181);
		TraceIn("enum_member_declaration", 181);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int enum_member_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal626 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> attributes624 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier625 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression627 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal626_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "enum_member_declaration");
		DebugLocation(644, 48);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 181)) { return retval; }

			// .\\cs.g:644:24: ( ( attributes )? identifier ( '=' expression )? )
			DebugEnterAlt(1);
			// .\\cs.g:645:2: ( attributes )? identifier ( '=' expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(645, 2);
			// .\\cs.g:645:2: ( attributes )?
			int alt176=2;
			try { DebugEnterSubRule(176);
			try { DebugEnterDecision(176, decisionCanBacktrack[176]);
			int LA176_0 = input.LA(1);

			if ((LA176_0==91))
			{
				alt176 = 1;
			}
			} finally { DebugExitDecision(176); }
			switch (alt176)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:645:2: attributes
				{
				DebugLocation(645, 2);
				PushFollow(Follow._attributes_in_enum_member_declaration4579);
				attributes624=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes624.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(176); }

			DebugLocation(645, 16);
			PushFollow(Follow._identifier_in_enum_member_declaration4584);
			identifier625=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier625.Tree);
			DebugLocation(645, 29);
			// .\\cs.g:645:29: ( '=' expression )?
			int alt177=2;
			try { DebugEnterSubRule(177);
			try { DebugEnterDecision(177, decisionCanBacktrack[177]);
			int LA177_0 = input.LA(1);

			if ((LA177_0==85))
			{
				alt177 = 1;
			}
			} finally { DebugExitDecision(177); }
			switch (alt177)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:645:30: '=' expression
				{
				DebugLocation(645, 30);
				char_literal626=(IToken)Match(input,85,Follow._85_in_enum_member_declaration4589); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal626_tree = (object)adaptor.Create(char_literal626);
				adaptor.AddChild(root_0, char_literal626_tree);
				}
				DebugLocation(645, 36);
				PushFollow(Follow._expression_in_enum_member_declaration4593);
				expression627=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression627.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(177); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_member_declaration", 181);
			LeaveRule("enum_member_declaration", 181);
			LeaveRule_enum_member_declaration();
	        if (state.backtracking > 0) { Memoize(input, 181, enum_member_declaration_StartIndex); }

	    }
	 	DebugLocation(645, 48);
		} finally { DebugExitRule(GrammarFileName, "enum_member_declaration"); }
		return retval;

	}
	// $ANTLR end "enum_member_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_integral_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_integral_type() {}

	// $ANTLR start "integral_type"
	// .\\cs.g:650:1: integral_type : ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' );
	[GrammarRule("integral_type")]
	private AstParserRuleReturnScope<object, IToken> integral_type()
	{
		EnterRule_integral_type();
		EnterRule("integral_type", 182);
		TraceIn("integral_type", 182);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int integral_type_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set628 = default(IToken);

	    object set628_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "integral_type");
		DebugLocation(650, 84);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 182)) { return retval; }

			// .\\cs.g:650:14: ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' )
			DebugEnterAlt(1);
			// .\\cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(650, 14);

			set628=(IToken)input.LT(1);
			if (input.LA(1)==106||input.LA(1)==109||input.LA(1)==138||input.LA(1)==146||input.LA(1)==169||input.LA(1)==173||(input.LA(1)>=185 && input.LA(1)<=186)||input.LA(1)==189)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set628));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("integral_type", 182);
			LeaveRule("integral_type", 182);
			LeaveRule_integral_type();
	        if (state.backtracking > 0) { Memoize(input, 182, integral_type_StartIndex); }

	    }
	 	DebugLocation(651, 84);
		} finally { DebugExitRule(GrammarFileName, "integral_type"); }
		return retval;

	}
	// $ANTLR end "integral_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_delegate_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_delegate_declaration() {}

	// $ANTLR start "delegate_declaration"
	// .\\cs.g:654:1: delegate_declaration : 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' ;
	[GrammarRule("delegate_declaration")]
	private AstParserRuleReturnScope<object, IToken> delegate_declaration()
	{
		EnterRule_delegate_declaration();
		EnterRule("delegate_declaration", 183);
		TraceIn("delegate_declaration", 183);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int delegate_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal629 = default(IToken);
	    IToken char_literal633 = default(IToken);
	    IToken char_literal635 = default(IToken);
	    IToken char_literal637 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> return_type630 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier631 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variant_generic_parameter_list632 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> formal_parameter_list634 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_parameter_constraints_clauses636 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal629_tree = default(object);
	    object char_literal633_tree = default(object);
	    object char_literal635_tree = default(object);
	    object char_literal637_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "delegate_declaration");
		DebugLocation(654, 81);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 183)) { return retval; }

			// .\\cs.g:654:21: ( 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' )
			DebugEnterAlt(1);
			// .\\cs.g:655:2: 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(655, 2);
			string_literal629=(IToken)Match(input,116,Follow._116_in_delegate_declaration4650); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal629_tree = (object)adaptor.Create(string_literal629);
			adaptor.AddChild(root_0, string_literal629_tree);
			}
			DebugLocation(655, 15);
			PushFollow(Follow._return_type_in_delegate_declaration4654);
			return_type630=return_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, return_type630.Tree);
			DebugLocation(655, 29);
			PushFollow(Follow._identifier_in_delegate_declaration4658);
			identifier631=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier631.Tree);
			DebugLocation(655, 41);
			// .\\cs.g:655:41: ( variant_generic_parameter_list )?
			int alt178=2;
			try { DebugEnterSubRule(178);
			try { DebugEnterDecision(178, decisionCanBacktrack[178]);
			int LA178_0 = input.LA(1);

			if ((LA178_0==81))
			{
				alt178 = 1;
			}
			} finally { DebugExitDecision(178); }
			switch (alt178)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:655:41: variant_generic_parameter_list
				{
				DebugLocation(655, 41);
				PushFollow(Follow._variant_generic_parameter_list_in_delegate_declaration4661);
				variant_generic_parameter_list632=variant_generic_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variant_generic_parameter_list632.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(178); }

			DebugLocation(656, 3);
			char_literal633=(IToken)Match(input,68,Follow._68_in_delegate_declaration4669); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal633_tree = (object)adaptor.Create(char_literal633);
			adaptor.AddChild(root_0, char_literal633_tree);
			}
			DebugLocation(656, 9);
			// .\\cs.g:656:9: ( formal_parameter_list )?
			int alt179=2;
			try { DebugEnterSubRule(179);
			try { DebugEnterDecision(179, decisionCanBacktrack[179]);
			int LA179_0 = input.LA(1);

			if ((LA179_0==IDENTIFIER||LA179_0==91||LA179_0==95||(LA179_0>=97 && LA179_0<=98)||(LA179_0>=100 && LA179_0<=101)||LA179_0==103||(LA179_0>=105 && LA179_0<=106)||LA179_0==109||LA179_0==114||LA179_0==117||(LA179_0>=119 && LA179_0<=120)||LA179_0==122||LA179_0==126||LA179_0==129||LA179_0==132||LA179_0==135||LA179_0==138||LA179_0==141||(LA179_0>=143 && LA179_0<=144)||(LA179_0>=146 && LA179_0<=148)||(LA179_0>=151 && LA179_0<=152)||(LA179_0>=154 && LA179_0<=155)||(LA179_0>=157 && LA179_0<=158)||LA179_0==160||LA179_0==162||(LA179_0>=166 && LA179_0<=167)||LA179_0==169||(LA179_0>=171 && LA179_0<=173)||LA179_0==177||LA179_0==180||LA179_0==183||(LA179_0>=185 && LA179_0<=186)||(LA179_0>=189 && LA179_0<=190)||LA179_0==192||LA179_0==194||LA179_0==196))
			{
				alt179 = 1;
			}
			} finally { DebugExitDecision(179); }
			switch (alt179)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:656:9: formal_parameter_list
				{
				DebugLocation(656, 9);
				PushFollow(Follow._formal_parameter_list_in_delegate_declaration4673);
				formal_parameter_list634=formal_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter_list634.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(179); }

			DebugLocation(656, 34);
			char_literal635=(IToken)Match(input,RPAREN,Follow._RPAREN_in_delegate_declaration4678); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal635_tree = (object)adaptor.Create(char_literal635);
			adaptor.AddChild(root_0, char_literal635_tree);
			}
			DebugLocation(656, 40);
			// .\\cs.g:656:40: ( type_parameter_constraints_clauses )?
			int alt180=2;
			try { DebugEnterSubRule(180);
			try { DebugEnterDecision(180, decisionCanBacktrack[180]);
			int LA180_0 = input.LA(1);

			if ((LA180_0==194))
			{
				alt180 = 1;
			}
			} finally { DebugExitDecision(180); }
			switch (alt180)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:656:40: type_parameter_constraints_clauses
				{
				DebugLocation(656, 40);
				PushFollow(Follow._type_parameter_constraints_clauses_in_delegate_declaration4682);
				type_parameter_constraints_clauses636=type_parameter_constraints_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clauses636.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(180); }

			DebugLocation(656, 78);
			char_literal637=(IToken)Match(input,SEMI,Follow._SEMI_in_delegate_declaration4687); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal637_tree = (object)adaptor.Create(char_literal637);
			adaptor.AddChild(root_0, char_literal637_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("delegate_declaration", 183);
			LeaveRule("delegate_declaration", 183);
			LeaveRule_delegate_declaration();
	        if (state.backtracking > 0) { Memoize(input, 183, delegate_declaration_StartIndex); }

	    }
	 	DebugLocation(656, 81);
		} finally { DebugExitRule(GrammarFileName, "delegate_declaration"); }
		return retval;

	}
	// $ANTLR end "delegate_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_delegate_modifiers() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_delegate_modifiers() {}

	// $ANTLR start "delegate_modifiers"
	// .\\cs.g:657:1: delegate_modifiers : ( modifier )+ ;
	[GrammarRule("delegate_modifiers")]
	private AstParserRuleReturnScope<object, IToken> delegate_modifiers()
	{
		EnterRule_delegate_modifiers();
		EnterRule("delegate_modifiers", 184);
		TraceIn("delegate_modifiers", 184);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int delegate_modifiers_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> modifier638 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "delegate_modifiers");
		DebugLocation(657, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 184)) { return retval; }

			// .\\cs.g:657:19: ( ( modifier )+ )
			DebugEnterAlt(1);
			// .\\cs.g:658:2: ( modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(658, 2);
			// .\\cs.g:658:2: ( modifier )+
			int cnt181=0;
			try { DebugEnterSubRule(181);
			while (true)
			{
				int alt181=2;
				try { DebugEnterDecision(181, decisionCanBacktrack[181]);
				int LA181_0 = input.LA(1);

				if ((LA181_0==96||LA181_0==125||LA181_0==140||LA181_0==150||LA181_0==156||LA181_0==161||(LA181_0>=163 && LA181_0<=165)||LA181_0==170||LA181_0==176||LA181_0==188||LA181_0==191||LA181_0==193))
				{
					alt181 = 1;
				}


				} finally { DebugExitDecision(181); }
				switch (alt181)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:658:2: modifier
					{
					DebugLocation(658, 2);
					PushFollow(Follow._modifier_in_delegate_modifiers4695);
					modifier638=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifier638.Tree);

					}
					break;

				default:
					if (cnt181 >= 1)
						goto loop181;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee181 = new EarlyExitException( 181, input );
					DebugRecognitionException(eee181);
					throw eee181;
				}
				cnt181++;
			}
			loop181:
				;

			} finally { DebugExitSubRule(181); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("delegate_modifiers", 184);
			LeaveRule("delegate_modifiers", 184);
			LeaveRule_delegate_modifiers();
	        if (state.backtracking > 0) { Memoize(input, 184, delegate_modifiers_StartIndex); }

	    }
	 	DebugLocation(658, 11);
		} finally { DebugExitRule(GrammarFileName, "delegate_modifiers"); }
		return retval;

	}
	// $ANTLR end "delegate_modifiers"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variant_generic_parameter_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variant_generic_parameter_list() {}

	// $ANTLR start "variant_generic_parameter_list"
	// .\\cs.g:660:1: variant_generic_parameter_list : '<' variant_type_parameters '>' ;
	[GrammarRule("variant_generic_parameter_list")]
	private AstParserRuleReturnScope<object, IToken> variant_generic_parameter_list()
	{
		EnterRule_variant_generic_parameter_list();
		EnterRule("variant_generic_parameter_list", 185);
		TraceIn("variant_generic_parameter_list", 185);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int variant_generic_parameter_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal639 = default(IToken);
	    IToken char_literal641 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variant_type_parameters640 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal639_tree = default(object);
	    object char_literal641_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "variant_generic_parameter_list");
		DebugLocation(660, 37);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 185)) { return retval; }

			// .\\cs.g:660:31: ( '<' variant_type_parameters '>' )
			DebugEnterAlt(1);
			// .\\cs.g:661:2: '<' variant_type_parameters '>'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(661, 2);
			char_literal639=(IToken)Match(input,81,Follow._81_in_variant_generic_parameter_list4705); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal639_tree = (object)adaptor.Create(char_literal639);
			adaptor.AddChild(root_0, char_literal639_tree);
			}
			DebugLocation(661, 8);
			PushFollow(Follow._variant_type_parameters_in_variant_generic_parameter_list4709);
			variant_type_parameters640=variant_type_parameters();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variant_type_parameters640.Tree);
			DebugLocation(661, 34);
			char_literal641=(IToken)Match(input,GT,Follow._GT_in_variant_generic_parameter_list4713); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal641_tree = (object)adaptor.Create(char_literal641);
			adaptor.AddChild(root_0, char_literal641_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variant_generic_parameter_list", 185);
			LeaveRule("variant_generic_parameter_list", 185);
			LeaveRule_variant_generic_parameter_list();
	        if (state.backtracking > 0) { Memoize(input, 185, variant_generic_parameter_list_StartIndex); }

	    }
	 	DebugLocation(661, 37);
		} finally { DebugExitRule(GrammarFileName, "variant_generic_parameter_list"); }
		return retval;

	}
	// $ANTLR end "variant_generic_parameter_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variant_type_parameters() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variant_type_parameters() {}

	// $ANTLR start "variant_type_parameters"
	// .\\cs.g:662:1: variant_type_parameters : variant_type_variable_name ( ',' variant_type_variable_name )* ;
	[GrammarRule("variant_type_parameters")]
	private AstParserRuleReturnScope<object, IToken> variant_type_parameters()
	{
		EnterRule_variant_type_parameters();
		EnterRule("variant_type_parameters", 186);
		TraceIn("variant_type_parameters", 186);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int variant_type_parameters_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal643 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variant_type_variable_name642 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variant_type_variable_name644 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal643_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "variant_type_parameters");
		DebugLocation(662, 62);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 186)) { return retval; }

			// .\\cs.g:662:24: ( variant_type_variable_name ( ',' variant_type_variable_name )* )
			DebugEnterAlt(1);
			// .\\cs.g:663:2: variant_type_variable_name ( ',' variant_type_variable_name )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(663, 2);
			PushFollow(Follow._variant_type_variable_name_in_variant_type_parameters4721);
			variant_type_variable_name642=variant_type_variable_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variant_type_variable_name642.Tree);
			DebugLocation(663, 29);
			// .\\cs.g:663:29: ( ',' variant_type_variable_name )*
			try { DebugEnterSubRule(182);
			while (true)
			{
				int alt182=2;
				try { DebugEnterDecision(182, decisionCanBacktrack[182]);
				int LA182_0 = input.LA(1);

				if ((LA182_0==74))
				{
					alt182 = 1;
				}


				} finally { DebugExitDecision(182); }
				switch ( alt182 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:663:30: ',' variant_type_variable_name
					{
					DebugLocation(663, 30);
					char_literal643=(IToken)Match(input,74,Follow._74_in_variant_type_parameters4724); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal643_tree = (object)adaptor.Create(char_literal643);
					adaptor.AddChild(root_0, char_literal643_tree);
					}
					DebugLocation(663, 34);
					PushFollow(Follow._variant_type_variable_name_in_variant_type_parameters4726);
					variant_type_variable_name644=variant_type_variable_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variant_type_variable_name644.Tree);

					}
					break;

				default:
					goto loop182;
				}
			}

			loop182:
				;

			} finally { DebugExitSubRule(182); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variant_type_parameters", 186);
			LeaveRule("variant_type_parameters", 186);
			LeaveRule_variant_type_parameters();
	        if (state.backtracking > 0) { Memoize(input, 186, variant_type_parameters_StartIndex); }

	    }
	 	DebugLocation(663, 62);
		} finally { DebugExitRule(GrammarFileName, "variant_type_parameters"); }
		return retval;

	}
	// $ANTLR end "variant_type_parameters"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variant_type_variable_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variant_type_variable_name() {}

	// $ANTLR start "variant_type_variable_name"
	// .\\cs.g:664:1: variant_type_variable_name : ( attributes )? ( variance_annotation )? type_variable_name ;
	[GrammarRule("variant_type_variable_name")]
	private AstParserRuleReturnScope<object, IToken> variant_type_variable_name()
	{
		EnterRule_variant_type_variable_name();
		EnterRule("variant_type_variable_name", 187);
		TraceIn("variant_type_variable_name", 187);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int variant_type_variable_name_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> attributes645 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variance_annotation646 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_variable_name647 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "variant_type_variable_name");
		DebugLocation(664, 57);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 187)) { return retval; }

			// .\\cs.g:664:27: ( ( attributes )? ( variance_annotation )? type_variable_name )
			DebugEnterAlt(1);
			// .\\cs.g:665:2: ( attributes )? ( variance_annotation )? type_variable_name
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(665, 2);
			// .\\cs.g:665:2: ( attributes )?
			int alt183=2;
			try { DebugEnterSubRule(183);
			try { DebugEnterDecision(183, decisionCanBacktrack[183]);
			int LA183_0 = input.LA(1);

			if ((LA183_0==91))
			{
				alt183 = 1;
			}
			} finally { DebugExitDecision(183); }
			switch (alt183)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:665:2: attributes
				{
				DebugLocation(665, 2);
				PushFollow(Follow._attributes_in_variant_type_variable_name4736);
				attributes645=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes645.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(183); }

			DebugLocation(665, 16);
			// .\\cs.g:665:16: ( variance_annotation )?
			int alt184=2;
			try { DebugEnterSubRule(184);
			try { DebugEnterDecision(184, decisionCanBacktrack[184]);
			int LA184_0 = input.LA(1);

			if ((LA184_0==137||LA184_0==155))
			{
				alt184 = 1;
			}
			} finally { DebugExitDecision(184); }
			switch (alt184)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:665:16: variance_annotation
				{
				DebugLocation(665, 16);
				PushFollow(Follow._variance_annotation_in_variant_type_variable_name4741);
				variance_annotation646=variance_annotation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variance_annotation646.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(184); }

			DebugLocation(665, 39);
			PushFollow(Follow._type_variable_name_in_variant_type_variable_name4746);
			type_variable_name647=type_variable_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_variable_name647.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variant_type_variable_name", 187);
			LeaveRule("variant_type_variable_name", 187);
			LeaveRule_variant_type_variable_name();
	        if (state.backtracking > 0) { Memoize(input, 187, variant_type_variable_name_StartIndex); }

	    }
	 	DebugLocation(665, 57);
		} finally { DebugExitRule(GrammarFileName, "variant_type_variable_name"); }
		return retval;

	}
	// $ANTLR end "variant_type_variable_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variance_annotation() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variance_annotation() {}

	// $ANTLR start "variance_annotation"
	// .\\cs.g:666:1: variance_annotation : ( 'in' | 'out' );
	[GrammarRule("variance_annotation")]
	private AstParserRuleReturnScope<object, IToken> variance_annotation()
	{
		EnterRule_variance_annotation();
		EnterRule("variance_annotation", 188);
		TraceIn("variance_annotation", 188);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int variance_annotation_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set648 = default(IToken);

	    object set648_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "variance_annotation");
		DebugLocation(666, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 188)) { return retval; }

			// .\\cs.g:666:20: ( 'in' | 'out' )
			DebugEnterAlt(1);
			// .\\cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(666, 20);

			set648=(IToken)input.LT(1);
			if (input.LA(1)==137||input.LA(1)==155)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set648));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variance_annotation", 188);
			LeaveRule("variance_annotation", 188);
			LeaveRule_variance_annotation();
	        if (state.backtracking > 0) { Memoize(input, 188, variance_annotation_StartIndex); }

	    }
	 	DebugLocation(667, 14);
		} finally { DebugExitRule(GrammarFileName, "variance_annotation"); }
		return retval;

	}
	// $ANTLR end "variance_annotation"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_type_parameter_constraints_clauses() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_type_parameter_constraints_clauses() {}

	// $ANTLR start "type_parameter_constraints_clauses"
	// .\\cs.g:669:1: type_parameter_constraints_clauses : type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )* ;
	[GrammarRule("type_parameter_constraints_clauses")]
	private AstParserRuleReturnScope<object, IToken> type_parameter_constraints_clauses()
	{
		EnterRule_type_parameter_constraints_clauses();
		EnterRule("type_parameter_constraints_clauses", 189);
		TraceIn("type_parameter_constraints_clauses", 189);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int type_parameter_constraints_clauses_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal650 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type_parameter_constraints_clause649 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_parameter_constraints_clause651 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal650_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "type_parameter_constraints_clauses");
		DebugLocation(669, 80);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 189)) { return retval; }

			// .\\cs.g:669:35: ( type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )* )
			DebugEnterAlt(1);
			// .\\cs.g:670:2: type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(670, 2);
			PushFollow(Follow._type_parameter_constraints_clause_in_type_parameter_constraints_clauses4767);
			type_parameter_constraints_clause649=type_parameter_constraints_clause();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clause649.Tree);
			DebugLocation(670, 38);
			// .\\cs.g:670:38: ( ',' type_parameter_constraints_clause )*
			try { DebugEnterSubRule(185);
			while (true)
			{
				int alt185=2;
				try { DebugEnterDecision(185, decisionCanBacktrack[185]);
				int LA185_0 = input.LA(1);

				if ((LA185_0==74))
				{
					alt185 = 1;
				}


				} finally { DebugExitDecision(185); }
				switch ( alt185 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:670:39: ',' type_parameter_constraints_clause
					{
					DebugLocation(670, 39);
					char_literal650=(IToken)Match(input,74,Follow._74_in_type_parameter_constraints_clauses4772); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal650_tree = (object)adaptor.Create(char_literal650);
					adaptor.AddChild(root_0, char_literal650_tree);
					}
					DebugLocation(670, 45);
					PushFollow(Follow._type_parameter_constraints_clause_in_type_parameter_constraints_clauses4776);
					type_parameter_constraints_clause651=type_parameter_constraints_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clause651.Tree);

					}
					break;

				default:
					goto loop185;
				}
			}

			loop185:
				;

			} finally { DebugExitSubRule(185); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_parameter_constraints_clauses", 189);
			LeaveRule("type_parameter_constraints_clauses", 189);
			LeaveRule_type_parameter_constraints_clauses();
	        if (state.backtracking > 0) { Memoize(input, 189, type_parameter_constraints_clauses_StartIndex); }

	    }
	 	DebugLocation(670, 80);
		} finally { DebugExitRule(GrammarFileName, "type_parameter_constraints_clauses"); }
		return retval;

	}
	// $ANTLR end "type_parameter_constraints_clauses"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_type_parameter_constraints_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_type_parameter_constraints_clause() {}

	// $ANTLR start "type_parameter_constraints_clause"
	// .\\cs.g:671:1: type_parameter_constraints_clause : 'where' type_variable_name ':' type_parameter_constraint_list ;
	[GrammarRule("type_parameter_constraints_clause")]
	private AstParserRuleReturnScope<object, IToken> type_parameter_constraints_clause()
	{
		EnterRule_type_parameter_constraints_clause();
		EnterRule("type_parameter_constraints_clause", 190);
		TraceIn("type_parameter_constraints_clause", 190);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int type_parameter_constraints_clause_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal652 = default(IToken);
	    IToken char_literal654 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type_variable_name653 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_parameter_constraint_list655 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal652_tree = default(object);
	    object char_literal654_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "type_parameter_constraints_clause");
		DebugLocation(671, 69);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 190)) { return retval; }

			// .\\cs.g:671:34: ( 'where' type_variable_name ':' type_parameter_constraint_list )
			DebugEnterAlt(1);
			// .\\cs.g:672:2: 'where' type_variable_name ':' type_parameter_constraint_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(672, 2);
			string_literal652=(IToken)Match(input,194,Follow._194_in_type_parameter_constraints_clause4786); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal652_tree = (object)adaptor.Create(string_literal652);
			adaptor.AddChild(root_0, string_literal652_tree);
			}
			DebugLocation(672, 12);
			PushFollow(Follow._type_variable_name_in_type_parameter_constraints_clause4790);
			type_variable_name653=type_variable_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_variable_name653.Tree);
			DebugLocation(672, 33);
			char_literal654=(IToken)Match(input,79,Follow._79_in_type_parameter_constraints_clause4794); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal654_tree = (object)adaptor.Create(char_literal654);
			adaptor.AddChild(root_0, char_literal654_tree);
			}
			DebugLocation(672, 39);
			PushFollow(Follow._type_parameter_constraint_list_in_type_parameter_constraints_clause4798);
			type_parameter_constraint_list655=type_parameter_constraint_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraint_list655.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_parameter_constraints_clause", 190);
			LeaveRule("type_parameter_constraints_clause", 190);
			LeaveRule_type_parameter_constraints_clause();
	        if (state.backtracking > 0) { Memoize(input, 190, type_parameter_constraints_clause_StartIndex); }

	    }
	 	DebugLocation(672, 69);
		} finally { DebugExitRule(GrammarFileName, "type_parameter_constraints_clause"); }
		return retval;

	}
	// $ANTLR end "type_parameter_constraints_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_type_parameter_constraint_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_type_parameter_constraint_list() {}

	// $ANTLR start "type_parameter_constraint_list"
	// .\\cs.g:674:1: type_parameter_constraint_list : ( ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )? | secondary_constraint_list ( ',' constructor_constraint )? | constructor_constraint );
	[GrammarRule("type_parameter_constraint_list")]
	private AstParserRuleReturnScope<object, IToken> type_parameter_constraint_list()
	{
		EnterRule_type_parameter_constraint_list();
		EnterRule("type_parameter_constraint_list", 191);
		TraceIn("type_parameter_constraint_list", 191);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int type_parameter_constraint_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set656 = default(IToken);
	    IToken char_literal657 = default(IToken);
	    IToken char_literal659 = default(IToken);
	    IToken char_literal662 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> secondary_constraint_list658 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> constructor_constraint660 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> secondary_constraint_list661 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> constructor_constraint663 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> constructor_constraint664 = default(AstParserRuleReturnScope<object, IToken>);

	    object set656_tree = default(object);
	    object char_literal657_tree = default(object);
	    object char_literal659_tree = default(object);
	    object char_literal662_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "type_parameter_constraint_list");
		DebugLocation(674, 26);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 191)) { return retval; }

			// .\\cs.g:674:31: ( ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )? | secondary_constraint_list ( ',' constructor_constraint )? | constructor_constraint )
			int alt189=3;
			try { DebugEnterDecision(189, decisionCanBacktrack[189]);
			switch (input.LA(1))
			{
			case 111:
			case 178:
				{
				alt189 = 1;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				alt189 = 2;
				}
				break;
			case 150:
				{
				alt189 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 189, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(189); }
			switch (alt189)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:675:5: ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(675, 5);

				set656=(IToken)input.LT(1);
				if (input.LA(1)==111||input.LA(1)==178)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set656));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(675, 28);
				// .\\cs.g:675:28: ( ',' secondary_constraint_list )?
				int alt186=2;
				try { DebugEnterSubRule(186);
				try { DebugEnterDecision(186, decisionCanBacktrack[186]);
				int LA186_0 = input.LA(1);

				if ((LA186_0==74))
				{
					int LA186_1 = input.LA(2);

					if ((LA186_1==194))
					{
						int LA186_3 = input.LA(3);

						if ((LA186_3==DOT||LA186_3==SEMI||LA186_3==74||(LA186_3>=80 && LA186_3<=81)||LA186_3==197))
						{
							alt186 = 1;
						}
					}
					else if ((LA186_1==IDENTIFIER||LA186_1==95||(LA186_1>=97 && LA186_1<=98)||(LA186_1>=100 && LA186_1<=101)||LA186_1==105||LA186_1==117||LA186_1==120||LA186_1==122||LA186_1==126||LA186_1==132||LA186_1==135||LA186_1==141||(LA186_1>=143 && LA186_1<=144)||(LA186_1>=147 && LA186_1<=148)||LA186_1==152||LA186_1==154||LA186_1==157||LA186_1==160||LA186_1==162||LA186_1==167||(LA186_1>=171 && LA186_1<=172)||LA186_1==183||LA186_1==190||LA186_1==196))
					{
						alt186 = 1;
					}
				}
				} finally { DebugExitDecision(186); }
				switch (alt186)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:675:29: ',' secondary_constraint_list
					{
					DebugLocation(675, 29);
					char_literal657=(IToken)Match(input,74,Follow._74_in_type_parameter_constraint_list4872); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal657_tree = (object)adaptor.Create(char_literal657);
					adaptor.AddChild(root_0, char_literal657_tree);
					}
					DebugLocation(675, 35);
					PushFollow(Follow._secondary_constraint_list_in_type_parameter_constraint_list4876);
					secondary_constraint_list658=secondary_constraint_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, secondary_constraint_list658.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(186); }

				DebugLocation(675, 65);
				// .\\cs.g:675:65: ( ',' constructor_constraint )?
				int alt187=2;
				try { DebugEnterSubRule(187);
				try { DebugEnterDecision(187, decisionCanBacktrack[187]);
				int LA187_0 = input.LA(1);

				if ((LA187_0==74))
				{
					int LA187_1 = input.LA(2);

					if ((LA187_1==150))
					{
						alt187 = 1;
					}
				}
				} finally { DebugExitDecision(187); }
				switch (alt187)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:675:66: ',' constructor_constraint
					{
					DebugLocation(675, 66);
					char_literal659=(IToken)Match(input,74,Follow._74_in_type_parameter_constraint_list4883); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal659_tree = (object)adaptor.Create(char_literal659);
					adaptor.AddChild(root_0, char_literal659_tree);
					}
					DebugLocation(675, 72);
					PushFollow(Follow._constructor_constraint_in_type_parameter_constraint_list4887);
					constructor_constraint660=constructor_constraint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_constraint660.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(187); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:676:4: secondary_constraint_list ( ',' constructor_constraint )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(676, 4);
				PushFollow(Follow._secondary_constraint_list_in_type_parameter_constraint_list4894);
				secondary_constraint_list661=secondary_constraint_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, secondary_constraint_list661.Tree);
				DebugLocation(676, 32);
				// .\\cs.g:676:32: ( ',' constructor_constraint )?
				int alt188=2;
				try { DebugEnterSubRule(188);
				try { DebugEnterDecision(188, decisionCanBacktrack[188]);
				int LA188_0 = input.LA(1);

				if ((LA188_0==74))
				{
					int LA188_1 = input.LA(2);

					if ((LA188_1==150))
					{
						alt188 = 1;
					}
				}
				} finally { DebugExitDecision(188); }
				switch (alt188)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:676:33: ',' constructor_constraint
					{
					DebugLocation(676, 33);
					char_literal662=(IToken)Match(input,74,Follow._74_in_type_parameter_constraint_list4899); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal662_tree = (object)adaptor.Create(char_literal662);
					adaptor.AddChild(root_0, char_literal662_tree);
					}
					DebugLocation(676, 39);
					PushFollow(Follow._constructor_constraint_in_type_parameter_constraint_list4903);
					constructor_constraint663=constructor_constraint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_constraint663.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(188); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:677:4: constructor_constraint
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(677, 4);
				PushFollow(Follow._constructor_constraint_in_type_parameter_constraint_list4910);
				constructor_constraint664=constructor_constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_constraint664.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_parameter_constraint_list", 191);
			LeaveRule("type_parameter_constraint_list", 191);
			LeaveRule_type_parameter_constraint_list();
	        if (state.backtracking > 0) { Memoize(input, 191, type_parameter_constraint_list_StartIndex); }

	    }
	 	DebugLocation(677, 26);
		} finally { DebugExitRule(GrammarFileName, "type_parameter_constraint_list"); }
		return retval;

	}
	// $ANTLR end "type_parameter_constraint_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_secondary_constraint_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_secondary_constraint_list() {}

	// $ANTLR start "secondary_constraint_list"
	// .\\cs.g:682:1: secondary_constraint_list : secondary_constraint ( ',' secondary_constraint )* ;
	[GrammarRule("secondary_constraint_list")]
	private AstParserRuleReturnScope<object, IToken> secondary_constraint_list()
	{
		EnterRule_secondary_constraint_list();
		EnterRule("secondary_constraint_list", 192);
		TraceIn("secondary_constraint_list", 192);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int secondary_constraint_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal666 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> secondary_constraint665 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> secondary_constraint667 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal666_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "secondary_constraint_list");
		DebugLocation(682, 50);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 192)) { return retval; }

			// .\\cs.g:682:26: ( secondary_constraint ( ',' secondary_constraint )* )
			DebugEnterAlt(1);
			// .\\cs.g:683:2: secondary_constraint ( ',' secondary_constraint )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(683, 2);
			PushFollow(Follow._secondary_constraint_in_secondary_constraint_list4922);
			secondary_constraint665=secondary_constraint();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, secondary_constraint665.Tree);
			DebugLocation(683, 23);
			// .\\cs.g:683:23: ( ',' secondary_constraint )*
			try { DebugEnterSubRule(190);
			while (true)
			{
				int alt190=2;
				try { DebugEnterDecision(190, decisionCanBacktrack[190]);
				int LA190_0 = input.LA(1);

				if ((LA190_0==74))
				{
					int LA190_1 = input.LA(2);

					if ((LA190_1==194))
					{
						int LA190_3 = input.LA(3);

						if ((LA190_3==DOT||LA190_3==SEMI||LA190_3==74||(LA190_3>=80 && LA190_3<=81)||LA190_3==197))
						{
							alt190 = 1;
						}


					}
					else if ((LA190_1==IDENTIFIER||LA190_1==95||(LA190_1>=97 && LA190_1<=98)||(LA190_1>=100 && LA190_1<=101)||LA190_1==105||LA190_1==117||LA190_1==120||LA190_1==122||LA190_1==126||LA190_1==132||LA190_1==135||LA190_1==141||(LA190_1>=143 && LA190_1<=144)||(LA190_1>=147 && LA190_1<=148)||LA190_1==152||LA190_1==154||LA190_1==157||LA190_1==160||LA190_1==162||LA190_1==167||(LA190_1>=171 && LA190_1<=172)||LA190_1==183||LA190_1==190||LA190_1==196))
					{
						alt190 = 1;
					}


				}


				} finally { DebugExitDecision(190); }
				switch ( alt190 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:683:24: ',' secondary_constraint
					{
					DebugLocation(683, 24);
					char_literal666=(IToken)Match(input,74,Follow._74_in_secondary_constraint_list4925); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal666_tree = (object)adaptor.Create(char_literal666);
					adaptor.AddChild(root_0, char_literal666_tree);
					}
					DebugLocation(683, 28);
					PushFollow(Follow._secondary_constraint_in_secondary_constraint_list4927);
					secondary_constraint667=secondary_constraint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, secondary_constraint667.Tree);

					}
					break;

				default:
					goto loop190;
				}
			}

			loop190:
				;

			} finally { DebugExitSubRule(190); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("secondary_constraint_list", 192);
			LeaveRule("secondary_constraint_list", 192);
			LeaveRule_secondary_constraint_list();
	        if (state.backtracking > 0) { Memoize(input, 192, secondary_constraint_list_StartIndex); }

	    }
	 	DebugLocation(683, 50);
		} finally { DebugExitRule(GrammarFileName, "secondary_constraint_list"); }
		return retval;

	}
	// $ANTLR end "secondary_constraint_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_secondary_constraint() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_secondary_constraint() {}

	// $ANTLR start "secondary_constraint"
	// .\\cs.g:684:1: secondary_constraint : type_name ;
	[GrammarRule("secondary_constraint")]
	private AstParserRuleReturnScope<object, IToken> secondary_constraint()
	{
		EnterRule_secondary_constraint();
		EnterRule("secondary_constraint", 193);
		TraceIn("secondary_constraint", 193);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int secondary_constraint_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> type_name668 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "secondary_constraint");
		DebugLocation(684, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 193)) { return retval; }

			// .\\cs.g:684:21: ( type_name )
			DebugEnterAlt(1);
			// .\\cs.g:685:2: type_name
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(685, 2);
			PushFollow(Follow._type_name_in_secondary_constraint4937);
			type_name668=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name668.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("secondary_constraint", 193);
			LeaveRule("secondary_constraint", 193);
			LeaveRule_secondary_constraint();
	        if (state.backtracking > 0) { Memoize(input, 193, secondary_constraint_StartIndex); }

	    }
	 	DebugLocation(685, 11);
		} finally { DebugExitRule(GrammarFileName, "secondary_constraint"); }
		return retval;

	}
	// $ANTLR end "secondary_constraint"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_type_variable_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_type_variable_name() {}

	// $ANTLR start "type_variable_name"
	// .\\cs.g:686:1: type_variable_name : identifier ;
	[GrammarRule("type_variable_name")]
	private AstParserRuleReturnScope<object, IToken> type_variable_name()
	{
		EnterRule_type_variable_name();
		EnterRule("type_variable_name", 194);
		TraceIn("type_variable_name", 194);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int type_variable_name_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> identifier669 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "type_variable_name");
		DebugLocation(686, 12);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 194)) { return retval; }

			// .\\cs.g:686:19: ( identifier )
			DebugEnterAlt(1);
			// .\\cs.g:687:2: identifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(687, 2);
			PushFollow(Follow._identifier_in_type_variable_name4947);
			identifier669=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier669.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_variable_name", 194);
			LeaveRule("type_variable_name", 194);
			LeaveRule_type_variable_name();
	        if (state.backtracking > 0) { Memoize(input, 194, type_variable_name_StartIndex); }

	    }
	 	DebugLocation(687, 12);
		} finally { DebugExitRule(GrammarFileName, "type_variable_name"); }
		return retval;

	}
	// $ANTLR end "type_variable_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_constructor_constraint() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_constructor_constraint() {}

	// $ANTLR start "constructor_constraint"
	// .\\cs.g:688:1: constructor_constraint : 'new' '(' ')' ;
	[GrammarRule("constructor_constraint")]
	private AstParserRuleReturnScope<object, IToken> constructor_constraint()
	{
		EnterRule_constructor_constraint();
		EnterRule("constructor_constraint", 195);
		TraceIn("constructor_constraint", 195);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int constructor_constraint_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal670 = default(IToken);
	    IToken char_literal671 = default(IToken);
	    IToken char_literal672 = default(IToken);

	    object string_literal670_tree = default(object);
	    object char_literal671_tree = default(object);
	    object char_literal672_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "constructor_constraint");
		DebugLocation(688, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 195)) { return retval; }

			// .\\cs.g:688:23: ( 'new' '(' ')' )
			DebugEnterAlt(1);
			// .\\cs.g:689:2: 'new' '(' ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(689, 2);
			string_literal670=(IToken)Match(input,150,Follow._150_in_constructor_constraint4955); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal670_tree = (object)adaptor.Create(string_literal670);
			adaptor.AddChild(root_0, string_literal670_tree);
			}
			DebugLocation(689, 10);
			char_literal671=(IToken)Match(input,68,Follow._68_in_constructor_constraint4959); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal671_tree = (object)adaptor.Create(char_literal671);
			adaptor.AddChild(root_0, char_literal671_tree);
			}
			DebugLocation(689, 16);
			char_literal672=(IToken)Match(input,RPAREN,Follow._RPAREN_in_constructor_constraint4963); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal672_tree = (object)adaptor.Create(char_literal672);
			adaptor.AddChild(root_0, char_literal672_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constructor_constraint", 195);
			LeaveRule("constructor_constraint", 195);
			LeaveRule_constructor_constraint();
	        if (state.backtracking > 0) { Memoize(input, 195, constructor_constraint_StartIndex); }

	    }
	 	DebugLocation(689, 19);
		} finally { DebugExitRule(GrammarFileName, "constructor_constraint"); }
		return retval;

	}
	// $ANTLR end "constructor_constraint"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_return_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_return_type() {}

	// $ANTLR start "return_type"
	// .\\cs.g:690:1: return_type : ( type | 'void' );
	[GrammarRule("return_type")]
	private AstParserRuleReturnScope<object, IToken> return_type()
	{
		EnterRule_return_type();
		EnterRule("return_type", 196);
		TraceIn("return_type", 196);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int return_type_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal674 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type673 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal674_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "return_type");
		DebugLocation(690, 10);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 196)) { return retval; }

			// .\\cs.g:690:12: ( type | 'void' )
			int alt191=2;
			try { DebugEnterDecision(191, decisionCanBacktrack[191]);
			int LA191_0 = input.LA(1);

			if ((LA191_0==IDENTIFIER||LA191_0==95||(LA191_0>=97 && LA191_0<=98)||(LA191_0>=100 && LA191_0<=101)||LA191_0==103||(LA191_0>=105 && LA191_0<=106)||LA191_0==109||LA191_0==114||LA191_0==117||(LA191_0>=119 && LA191_0<=120)||LA191_0==122||LA191_0==126||LA191_0==129||LA191_0==132||LA191_0==135||LA191_0==138||LA191_0==141||(LA191_0>=143 && LA191_0<=144)||(LA191_0>=146 && LA191_0<=148)||(LA191_0>=151 && LA191_0<=152)||LA191_0==154||LA191_0==157||LA191_0==160||LA191_0==162||LA191_0==167||LA191_0==169||(LA191_0>=171 && LA191_0<=173)||LA191_0==177||LA191_0==183||(LA191_0>=185 && LA191_0<=186)||(LA191_0>=189 && LA191_0<=190)||LA191_0==194||LA191_0==196))
			{
				alt191 = 1;
			}
			else if ((LA191_0==192))
			{
				int LA191_2 = input.LA(2);

				if ((LA191_2==69))
				{
					alt191 = 1;
				}
				else if ((LA191_2==IDENTIFIER||LA191_2==95||(LA191_2>=97 && LA191_2<=98)||(LA191_2>=100 && LA191_2<=101)||LA191_2==105||LA191_2==117||LA191_2==120||LA191_2==122||LA191_2==126||LA191_2==132||LA191_2==135||LA191_2==141||(LA191_2>=143 && LA191_2<=144)||(LA191_2>=147 && LA191_2<=148)||LA191_2==152||LA191_2==154||LA191_2==157||LA191_2==160||LA191_2==162||LA191_2==167||(LA191_2>=171 && LA191_2<=172)||LA191_2==183||LA191_2==190||LA191_2==194||LA191_2==196))
				{
					alt191 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 191, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 191, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(191); }
			switch (alt191)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:691:2: type
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(691, 2);
				PushFollow(Follow._type_in_return_type4971);
				type673=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type673.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:692:5: 'void'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(692, 5);
				string_literal674=(IToken)Match(input,192,Follow._192_in_return_type4977); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal674_tree = (object)adaptor.Create(string_literal674);
				adaptor.AddChild(root_0, string_literal674_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("return_type", 196);
			LeaveRule("return_type", 196);
			LeaveRule_return_type();
	        if (state.backtracking > 0) { Memoize(input, 196, return_type_StartIndex); }

	    }
	 	DebugLocation(692, 10);
		} finally { DebugExitRule(GrammarFileName, "return_type"); }
		return retval;

	}
	// $ANTLR end "return_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formal_parameter_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formal_parameter_list() {}

	// $ANTLR start "formal_parameter_list"
	// .\\cs.g:693:1: formal_parameter_list : formal_parameter ( ',' formal_parameter )* ;
	[GrammarRule("formal_parameter_list")]
	private AstParserRuleReturnScope<object, IToken> formal_parameter_list()
	{
		EnterRule_formal_parameter_list();
		EnterRule("formal_parameter_list", 197);
		TraceIn("formal_parameter_list", 197);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int formal_parameter_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal676 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> formal_parameter675 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> formal_parameter677 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal676_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "formal_parameter_list");
		DebugLocation(693, 42);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 197)) { return retval; }

			// .\\cs.g:693:22: ( formal_parameter ( ',' formal_parameter )* )
			DebugEnterAlt(1);
			// .\\cs.g:694:2: formal_parameter ( ',' formal_parameter )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(694, 2);
			PushFollow(Follow._formal_parameter_in_formal_parameter_list4984);
			formal_parameter675=formal_parameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter675.Tree);
			DebugLocation(694, 19);
			// .\\cs.g:694:19: ( ',' formal_parameter )*
			try { DebugEnterSubRule(192);
			while (true)
			{
				int alt192=2;
				try { DebugEnterDecision(192, decisionCanBacktrack[192]);
				int LA192_0 = input.LA(1);

				if ((LA192_0==74))
				{
					alt192 = 1;
				}


				} finally { DebugExitDecision(192); }
				switch ( alt192 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:694:20: ',' formal_parameter
					{
					DebugLocation(694, 20);
					char_literal676=(IToken)Match(input,74,Follow._74_in_formal_parameter_list4987); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal676_tree = (object)adaptor.Create(char_literal676);
					adaptor.AddChild(root_0, char_literal676_tree);
					}
					DebugLocation(694, 24);
					PushFollow(Follow._formal_parameter_in_formal_parameter_list4989);
					formal_parameter677=formal_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter677.Tree);

					}
					break;

				default:
					goto loop192;
				}
			}

			loop192:
				;

			} finally { DebugExitSubRule(192); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formal_parameter_list", 197);
			LeaveRule("formal_parameter_list", 197);
			LeaveRule_formal_parameter_list();
	        if (state.backtracking > 0) { Memoize(input, 197, formal_parameter_list_StartIndex); }

	    }
	 	DebugLocation(694, 42);
		} finally { DebugExitRule(GrammarFileName, "formal_parameter_list"); }
		return retval;

	}
	// $ANTLR end "formal_parameter_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formal_parameter() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formal_parameter() {}

	// $ANTLR start "formal_parameter"
	// .\\cs.g:695:1: formal_parameter : ( ( attributes )? ( fixed_parameter | parameter_array ) | '__arglist' );
	[GrammarRule("formal_parameter")]
	private AstParserRuleReturnScope<object, IToken> formal_parameter()
	{
		EnterRule_formal_parameter();
		EnterRule("formal_parameter", 198);
		TraceIn("formal_parameter", 198);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int formal_parameter_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal681 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> attributes678 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> fixed_parameter679 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> parameter_array680 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal681_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "formal_parameter");
		DebugLocation(695, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 198)) { return retval; }

			// .\\cs.g:695:17: ( ( attributes )? ( fixed_parameter | parameter_array ) | '__arglist' )
			int alt195=2;
			try { DebugEnterDecision(195, decisionCanBacktrack[195]);
			int LA195_0 = input.LA(1);

			if ((LA195_0==IDENTIFIER||LA195_0==91||(LA195_0>=97 && LA195_0<=98)||(LA195_0>=100 && LA195_0<=101)||LA195_0==103||(LA195_0>=105 && LA195_0<=106)||LA195_0==109||LA195_0==114||LA195_0==117||(LA195_0>=119 && LA195_0<=120)||LA195_0==122||LA195_0==126||LA195_0==129||LA195_0==132||LA195_0==135||LA195_0==138||LA195_0==141||(LA195_0>=143 && LA195_0<=144)||(LA195_0>=146 && LA195_0<=148)||(LA195_0>=151 && LA195_0<=152)||(LA195_0>=154 && LA195_0<=155)||(LA195_0>=157 && LA195_0<=158)||LA195_0==160||LA195_0==162||(LA195_0>=166 && LA195_0<=167)||LA195_0==169||(LA195_0>=171 && LA195_0<=173)||LA195_0==177||LA195_0==180||LA195_0==183||(LA195_0>=185 && LA195_0<=186)||(LA195_0>=189 && LA195_0<=190)||LA195_0==192||LA195_0==194||LA195_0==196))
			{
				alt195 = 1;
			}
			else if ((LA195_0==95))
			{
				int LA195_2 = input.LA(2);

				if ((LA195_2==DOT||LA195_2==IDENTIFIER||LA195_2==69||(LA195_2>=80 && LA195_2<=81)||LA195_2==89||LA195_2==91||LA195_2==95||(LA195_2>=97 && LA195_2<=98)||(LA195_2>=100 && LA195_2<=101)||LA195_2==105||LA195_2==117||LA195_2==120||LA195_2==122||LA195_2==126||LA195_2==132||LA195_2==135||LA195_2==141||(LA195_2>=143 && LA195_2<=144)||(LA195_2>=147 && LA195_2<=148)||LA195_2==152||LA195_2==154||LA195_2==157||LA195_2==160||LA195_2==162||LA195_2==167||(LA195_2>=171 && LA195_2<=172)||LA195_2==183||LA195_2==190||LA195_2==194||LA195_2==196))
				{
					alt195 = 1;
				}
				else if ((LA195_2==RPAREN||LA195_2==74||LA195_2==92))
				{
					alt195 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 195, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 195, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(195); }
			switch (alt195)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:696:2: ( attributes )? ( fixed_parameter | parameter_array )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(696, 2);
				// .\\cs.g:696:2: ( attributes )?
				int alt193=2;
				try { DebugEnterSubRule(193);
				try { DebugEnterDecision(193, decisionCanBacktrack[193]);
				int LA193_0 = input.LA(1);

				if ((LA193_0==91))
				{
					alt193 = 1;
				}
				} finally { DebugExitDecision(193); }
				switch (alt193)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:696:2: attributes
					{
					DebugLocation(696, 2);
					PushFollow(Follow._attributes_in_formal_parameter4999);
					attributes678=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes678.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(193); }

				DebugLocation(696, 16);
				// .\\cs.g:696:16: ( fixed_parameter | parameter_array )
				int alt194=2;
				try { DebugEnterSubRule(194);
				try { DebugEnterDecision(194, decisionCanBacktrack[194]);
				int LA194_0 = input.LA(1);

				if ((LA194_0==IDENTIFIER||LA194_0==95||(LA194_0>=97 && LA194_0<=98)||(LA194_0>=100 && LA194_0<=101)||LA194_0==103||(LA194_0>=105 && LA194_0<=106)||LA194_0==109||LA194_0==114||LA194_0==117||(LA194_0>=119 && LA194_0<=120)||LA194_0==122||LA194_0==126||LA194_0==129||LA194_0==132||LA194_0==135||LA194_0==138||LA194_0==141||(LA194_0>=143 && LA194_0<=144)||(LA194_0>=146 && LA194_0<=148)||(LA194_0>=151 && LA194_0<=152)||(LA194_0>=154 && LA194_0<=155)||LA194_0==157||LA194_0==160||LA194_0==162||(LA194_0>=166 && LA194_0<=167)||LA194_0==169||(LA194_0>=171 && LA194_0<=173)||LA194_0==177||LA194_0==180||LA194_0==183||(LA194_0>=185 && LA194_0<=186)||(LA194_0>=189 && LA194_0<=190)||LA194_0==192||LA194_0==194||LA194_0==196))
				{
					alt194 = 1;
				}
				else if ((LA194_0==158))
				{
					alt194 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 194, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(194); }
				switch (alt194)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:696:17: fixed_parameter
					{
					DebugLocation(696, 17);
					PushFollow(Follow._fixed_parameter_in_formal_parameter5005);
					fixed_parameter679=fixed_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_parameter679.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:696:35: parameter_array
					{
					DebugLocation(696, 35);
					PushFollow(Follow._parameter_array_in_formal_parameter5009);
					parameter_array680=parameter_array();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_array680.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(194); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:697:4: '__arglist'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(697, 4);
				string_literal681=(IToken)Match(input,95,Follow._95_in_formal_parameter5016); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal681_tree = (object)adaptor.Create(string_literal681);
				adaptor.AddChild(root_0, string_literal681_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formal_parameter", 198);
			LeaveRule("formal_parameter", 198);
			LeaveRule_formal_parameter();
	        if (state.backtracking > 0) { Memoize(input, 198, formal_parameter_StartIndex); }

	    }
	 	DebugLocation(697, 14);
		} finally { DebugExitRule(GrammarFileName, "formal_parameter"); }
		return retval;

	}
	// $ANTLR end "formal_parameter"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_fixed_parameters() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_fixed_parameters() {}

	// $ANTLR start "fixed_parameters"
	// .\\cs.g:698:1: fixed_parameters : fixed_parameter ( ',' fixed_parameter )* ;
	[GrammarRule("fixed_parameters")]
	private AstParserRuleReturnScope<object, IToken> fixed_parameters()
	{
		EnterRule_fixed_parameters();
		EnterRule("fixed_parameters", 199);
		TraceIn("fixed_parameters", 199);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int fixed_parameters_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal683 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> fixed_parameter682 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> fixed_parameter684 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal683_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "fixed_parameters");
		DebugLocation(698, 44);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 199)) { return retval; }

			// .\\cs.g:698:17: ( fixed_parameter ( ',' fixed_parameter )* )
			DebugEnterAlt(1);
			// .\\cs.g:699:2: fixed_parameter ( ',' fixed_parameter )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(699, 2);
			PushFollow(Follow._fixed_parameter_in_fixed_parameters5024);
			fixed_parameter682=fixed_parameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_parameter682.Tree);
			DebugLocation(699, 20);
			// .\\cs.g:699:20: ( ',' fixed_parameter )*
			try { DebugEnterSubRule(196);
			while (true)
			{
				int alt196=2;
				try { DebugEnterDecision(196, decisionCanBacktrack[196]);
				int LA196_0 = input.LA(1);

				if ((LA196_0==74))
				{
					alt196 = 1;
				}


				} finally { DebugExitDecision(196); }
				switch ( alt196 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:699:21: ',' fixed_parameter
					{
					DebugLocation(699, 21);
					char_literal683=(IToken)Match(input,74,Follow._74_in_fixed_parameters5029); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal683_tree = (object)adaptor.Create(char_literal683);
					adaptor.AddChild(root_0, char_literal683_tree);
					}
					DebugLocation(699, 27);
					PushFollow(Follow._fixed_parameter_in_fixed_parameters5033);
					fixed_parameter684=fixed_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_parameter684.Tree);

					}
					break;

				default:
					goto loop196;
				}
			}

			loop196:
				;

			} finally { DebugExitSubRule(196); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fixed_parameters", 199);
			LeaveRule("fixed_parameters", 199);
			LeaveRule_fixed_parameters();
	        if (state.backtracking > 0) { Memoize(input, 199, fixed_parameters_StartIndex); }

	    }
	 	DebugLocation(699, 44);
		} finally { DebugExitRule(GrammarFileName, "fixed_parameters"); }
		return retval;

	}
	// $ANTLR end "fixed_parameters"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_fixed_parameter() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_fixed_parameter() {}

	// $ANTLR start "fixed_parameter"
	// .\\cs.g:701:1: fixed_parameter : ( parameter_modifier )? type identifier ( default_argument )? ;
	[GrammarRule("fixed_parameter")]
	private AstParserRuleReturnScope<object, IToken> fixed_parameter()
	{
		EnterRule_fixed_parameter();
		EnterRule("fixed_parameter", 200);
		TraceIn("fixed_parameter", 200);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int fixed_parameter_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> parameter_modifier685 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type686 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier687 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> default_argument688 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "fixed_parameter");
		DebugLocation(701, 61);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 200)) { return retval; }

			// .\\cs.g:701:16: ( ( parameter_modifier )? type identifier ( default_argument )? )
			DebugEnterAlt(1);
			// .\\cs.g:702:2: ( parameter_modifier )? type identifier ( default_argument )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(702, 2);
			// .\\cs.g:702:2: ( parameter_modifier )?
			int alt197=2;
			try { DebugEnterSubRule(197);
			try { DebugEnterDecision(197, decisionCanBacktrack[197]);
			int LA197_0 = input.LA(1);

			if ((LA197_0==155||LA197_0==166||LA197_0==180))
			{
				alt197 = 1;
			}
			} finally { DebugExitDecision(197); }
			switch (alt197)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:702:2: parameter_modifier
				{
				DebugLocation(702, 2);
				PushFollow(Follow._parameter_modifier_in_fixed_parameter5044);
				parameter_modifier685=parameter_modifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_modifier685.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(197); }

			DebugLocation(702, 24);
			PushFollow(Follow._type_in_fixed_parameter5049);
			type686=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type686.Tree);
			DebugLocation(702, 31);
			PushFollow(Follow._identifier_in_fixed_parameter5053);
			identifier687=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier687.Tree);
			DebugLocation(702, 44);
			// .\\cs.g:702:44: ( default_argument )?
			int alt198=2;
			try { DebugEnterSubRule(198);
			try { DebugEnterDecision(198, decisionCanBacktrack[198]);
			int LA198_0 = input.LA(1);

			if ((LA198_0==85))
			{
				alt198 = 1;
			}
			} finally { DebugExitDecision(198); }
			switch (alt198)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:702:44: default_argument
				{
				DebugLocation(702, 44);
				PushFollow(Follow._default_argument_in_fixed_parameter5057);
				default_argument688=default_argument();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, default_argument688.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(198); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fixed_parameter", 200);
			LeaveRule("fixed_parameter", 200);
			LeaveRule_fixed_parameter();
	        if (state.backtracking > 0) { Memoize(input, 200, fixed_parameter_StartIndex); }

	    }
	 	DebugLocation(702, 61);
		} finally { DebugExitRule(GrammarFileName, "fixed_parameter"); }
		return retval;

	}
	// $ANTLR end "fixed_parameter"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_default_argument() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_default_argument() {}

	// $ANTLR start "default_argument"
	// .\\cs.g:704:1: default_argument : '=' expression ;
	[GrammarRule("default_argument")]
	private AstParserRuleReturnScope<object, IToken> default_argument()
	{
		EnterRule_default_argument();
		EnterRule("default_argument", 201);
		TraceIn("default_argument", 201);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int default_argument_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal689 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression690 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal689_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "default_argument");
		DebugLocation(704, 15);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 201)) { return retval; }

			// .\\cs.g:704:17: ( '=' expression )
			DebugEnterAlt(1);
			// .\\cs.g:705:2: '=' expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(705, 2);
			char_literal689=(IToken)Match(input,85,Follow._85_in_default_argument5067); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal689_tree = (object)adaptor.Create(char_literal689);
			adaptor.AddChild(root_0, char_literal689_tree);
			}
			DebugLocation(705, 6);
			PushFollow(Follow._expression_in_default_argument5069);
			expression690=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression690.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("default_argument", 201);
			LeaveRule("default_argument", 201);
			LeaveRule_default_argument();
	        if (state.backtracking > 0) { Memoize(input, 201, default_argument_StartIndex); }

	    }
	 	DebugLocation(705, 15);
		} finally { DebugExitRule(GrammarFileName, "default_argument"); }
		return retval;

	}
	// $ANTLR end "default_argument"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parameter_modifier() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parameter_modifier() {}

	// $ANTLR start "parameter_modifier"
	// .\\cs.g:706:1: parameter_modifier : ( 'ref' | 'out' | 'this' );
	[GrammarRule("parameter_modifier")]
	private AstParserRuleReturnScope<object, IToken> parameter_modifier()
	{
		EnterRule_parameter_modifier();
		EnterRule("parameter_modifier", 202);
		TraceIn("parameter_modifier", 202);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int parameter_modifier_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set691 = default(IToken);

	    object set691_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "parameter_modifier");
		DebugLocation(706, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 202)) { return retval; }

			// .\\cs.g:706:19: ( 'ref' | 'out' | 'this' )
			DebugEnterAlt(1);
			// .\\cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(706, 19);

			set691=(IToken)input.LT(1);
			if (input.LA(1)==155||input.LA(1)==166||input.LA(1)==180)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set691));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_modifier", 202);
			LeaveRule("parameter_modifier", 202);
			LeaveRule_parameter_modifier();
	        if (state.backtracking > 0) { Memoize(input, 202, parameter_modifier_StartIndex); }

	    }
	 	DebugLocation(707, 24);
		} finally { DebugExitRule(GrammarFileName, "parameter_modifier"); }
		return retval;

	}
	// $ANTLR end "parameter_modifier"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parameter_array() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parameter_array() {}

	// $ANTLR start "parameter_array"
	// .\\cs.g:708:1: parameter_array : 'params' type identifier ;
	[GrammarRule("parameter_array")]
	private AstParserRuleReturnScope<object, IToken> parameter_array()
	{
		EnterRule_parameter_array();
		EnterRule("parameter_array", 203);
		TraceIn("parameter_array", 203);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int parameter_array_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal692 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type693 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier694 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal692_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "parameter_array");
		DebugLocation(708, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 203)) { return retval; }

			// .\\cs.g:708:16: ( 'params' type identifier )
			DebugEnterAlt(1);
			// .\\cs.g:709:2: 'params' type identifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(709, 2);
			string_literal692=(IToken)Match(input,158,Follow._158_in_parameter_array5092); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal692_tree = (object)adaptor.Create(string_literal692);
			adaptor.AddChild(root_0, string_literal692_tree);
			}
			DebugLocation(709, 13);
			PushFollow(Follow._type_in_parameter_array5096);
			type693=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type693.Tree);
			DebugLocation(709, 20);
			PushFollow(Follow._identifier_in_parameter_array5100);
			identifier694=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier694.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_array", 203);
			LeaveRule("parameter_array", 203);
			LeaveRule_parameter_array();
	        if (state.backtracking > 0) { Memoize(input, 203, parameter_array_StartIndex); }

	    }
	 	DebugLocation(709, 30);
		} finally { DebugExitRule(GrammarFileName, "parameter_array"); }
		return retval;

	}
	// $ANTLR end "parameter_array"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_interface_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_interface_declaration() {}

	// $ANTLR start "interface_declaration"
	// .\\cs.g:712:1: interface_declaration : 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? ;
	[GrammarRule("interface_declaration")]
	private AstParserRuleReturnScope<object, IToken> interface_declaration()
	{
		EnterRule_interface_declaration();
		EnterRule("interface_declaration", 204);
		TraceIn("interface_declaration", 204);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int interface_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal695 = default(IToken);
	    IToken char_literal701 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier696 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variant_generic_parameter_list697 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> interface_base698 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_parameter_constraints_clauses699 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> interface_body700 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal695_tree = default(object);
	    object char_literal701_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "interface_declaration");
		DebugLocation(712, 83);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 204)) { return retval; }

			// .\\cs.g:712:22: ( 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? )
			DebugEnterAlt(1);
			// .\\cs.g:713:2: 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(713, 2);
			string_literal695=(IToken)Match(input,139,Follow._139_in_interface_declaration5110); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal695_tree = (object)adaptor.Create(string_literal695);
			adaptor.AddChild(root_0, string_literal695_tree);
			}
			DebugLocation(713, 16);
			PushFollow(Follow._identifier_in_interface_declaration5114);
			identifier696=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier696.Tree);
			DebugLocation(713, 29);
			// .\\cs.g:713:29: ( variant_generic_parameter_list )?
			int alt199=2;
			try { DebugEnterSubRule(199);
			try { DebugEnterDecision(199, decisionCanBacktrack[199]);
			int LA199_0 = input.LA(1);

			if ((LA199_0==81))
			{
				alt199 = 1;
			}
			} finally { DebugExitDecision(199); }
			switch (alt199)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:713:29: variant_generic_parameter_list
				{
				DebugLocation(713, 29);
				PushFollow(Follow._variant_generic_parameter_list_in_interface_declaration5118);
				variant_generic_parameter_list697=variant_generic_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variant_generic_parameter_list697.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(199); }

			DebugLocation(714, 6);
			// .\\cs.g:714:6: ( interface_base )?
			int alt200=2;
			try { DebugEnterSubRule(200);
			try { DebugEnterDecision(200, decisionCanBacktrack[200]);
			int LA200_0 = input.LA(1);

			if ((LA200_0==79))
			{
				alt200 = 1;
			}
			} finally { DebugExitDecision(200); }
			switch (alt200)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:714:6: interface_base
				{
				DebugLocation(714, 6);
				PushFollow(Follow._interface_base_in_interface_declaration5127);
				interface_base698=interface_base();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_base698.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(200); }

			DebugLocation(714, 24);
			// .\\cs.g:714:24: ( type_parameter_constraints_clauses )?
			int alt201=2;
			try { DebugEnterSubRule(201);
			try { DebugEnterDecision(201, decisionCanBacktrack[201]);
			int LA201_0 = input.LA(1);

			if ((LA201_0==194))
			{
				alt201 = 1;
			}
			} finally { DebugExitDecision(201); }
			switch (alt201)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:714:24: type_parameter_constraints_clauses
				{
				DebugLocation(714, 24);
				PushFollow(Follow._type_parameter_constraints_clauses_in_interface_declaration5132);
				type_parameter_constraints_clauses699=type_parameter_constraints_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clauses699.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(201); }

			DebugLocation(714, 62);
			PushFollow(Follow._interface_body_in_interface_declaration5137);
			interface_body700=interface_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interface_body700.Tree);
			DebugLocation(714, 79);
			// .\\cs.g:714:79: ( ';' )?
			int alt202=2;
			try { DebugEnterSubRule(202);
			try { DebugEnterDecision(202, decisionCanBacktrack[202]);
			int LA202_0 = input.LA(1);

			if ((LA202_0==SEMI))
			{
				alt202 = 1;
			}
			} finally { DebugExitDecision(202); }
			switch (alt202)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:714:79: ';'
				{
				DebugLocation(714, 79);
				char_literal701=(IToken)Match(input,SEMI,Follow._SEMI_in_interface_declaration5141); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal701_tree = (object)adaptor.Create(char_literal701);
				adaptor.AddChild(root_0, char_literal701_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(202); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_declaration", 204);
			LeaveRule("interface_declaration", 204);
			LeaveRule_interface_declaration();
	        if (state.backtracking > 0) { Memoize(input, 204, interface_declaration_StartIndex); }

	    }
	 	DebugLocation(714, 83);
		} finally { DebugExitRule(GrammarFileName, "interface_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_interface_modifiers() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_interface_modifiers() {}

	// $ANTLR start "interface_modifiers"
	// .\\cs.g:715:1: interface_modifiers : ( modifier )+ ;
	[GrammarRule("interface_modifiers")]
	private AstParserRuleReturnScope<object, IToken> interface_modifiers()
	{
		EnterRule_interface_modifiers();
		EnterRule("interface_modifiers", 205);
		TraceIn("interface_modifiers", 205);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int interface_modifiers_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> modifier702 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "interface_modifiers");
		DebugLocation(715, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 205)) { return retval; }

			// .\\cs.g:715:20: ( ( modifier )+ )
			DebugEnterAlt(1);
			// .\\cs.g:716:2: ( modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(716, 2);
			// .\\cs.g:716:2: ( modifier )+
			int cnt203=0;
			try { DebugEnterSubRule(203);
			while (true)
			{
				int alt203=2;
				try { DebugEnterDecision(203, decisionCanBacktrack[203]);
				int LA203_0 = input.LA(1);

				if ((LA203_0==96||LA203_0==125||LA203_0==140||LA203_0==150||LA203_0==156||LA203_0==161||(LA203_0>=163 && LA203_0<=165)||LA203_0==170||LA203_0==176||LA203_0==188||LA203_0==191||LA203_0==193))
				{
					alt203 = 1;
				}


				} finally { DebugExitDecision(203); }
				switch (alt203)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:716:2: modifier
					{
					DebugLocation(716, 2);
					PushFollow(Follow._modifier_in_interface_modifiers5151);
					modifier702=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifier702.Tree);

					}
					break;

				default:
					if (cnt203 >= 1)
						goto loop203;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee203 = new EarlyExitException( 203, input );
					DebugRecognitionException(eee203);
					throw eee203;
				}
				cnt203++;
			}
			loop203:
				;

			} finally { DebugExitSubRule(203); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_modifiers", 205);
			LeaveRule("interface_modifiers", 205);
			LeaveRule_interface_modifiers();
	        if (state.backtracking > 0) { Memoize(input, 205, interface_modifiers_StartIndex); }

	    }
	 	DebugLocation(716, 11);
		} finally { DebugExitRule(GrammarFileName, "interface_modifiers"); }
		return retval;

	}
	// $ANTLR end "interface_modifiers"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_interface_base() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_interface_base() {}

	// $ANTLR start "interface_base"
	// .\\cs.g:717:1: interface_base : ':' interface_type_list ;
	[GrammarRule("interface_base")]
	private AstParserRuleReturnScope<object, IToken> interface_base()
	{
		EnterRule_interface_base();
		EnterRule("interface_base", 206);
		TraceIn("interface_base", 206);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int interface_base_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal703 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> interface_type_list704 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal703_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "interface_base");
		DebugLocation(717, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 206)) { return retval; }

			// .\\cs.g:717:15: ( ':' interface_type_list )
			DebugEnterAlt(1);
			// .\\cs.g:718:5: ':' interface_type_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(718, 5);
			char_literal703=(IToken)Match(input,79,Follow._79_in_interface_base5164); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal703_tree = (object)adaptor.Create(char_literal703);
			adaptor.AddChild(root_0, char_literal703_tree);
			}
			DebugLocation(718, 9);
			PushFollow(Follow._interface_type_list_in_interface_base5166);
			interface_type_list704=interface_type_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interface_type_list704.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_base", 206);
			LeaveRule("interface_base", 206);
			LeaveRule_interface_base();
	        if (state.backtracking > 0) { Memoize(input, 206, interface_base_StartIndex); }

	    }
	 	DebugLocation(718, 28);
		} finally { DebugExitRule(GrammarFileName, "interface_base"); }
		return retval;

	}
	// $ANTLR end "interface_base"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_interface_body() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_interface_body() {}

	// $ANTLR start "interface_body"
	// .\\cs.g:719:1: interface_body : '{' ( interface_member_declarations )? '}' ;
	[GrammarRule("interface_body")]
	private AstParserRuleReturnScope<object, IToken> interface_body()
	{
		EnterRule_interface_body();
		EnterRule("interface_body", 207);
		TraceIn("interface_body", 207);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int interface_body_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal705 = default(IToken);
	    IToken char_literal707 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> interface_member_declarations706 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal705_tree = default(object);
	    object char_literal707_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "interface_body");
		DebugLocation(719, 44);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 207)) { return retval; }

			// .\\cs.g:719:15: ( '{' ( interface_member_declarations )? '}' )
			DebugEnterAlt(1);
			// .\\cs.g:720:2: '{' ( interface_member_declarations )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(720, 2);
			char_literal705=(IToken)Match(input,197,Follow._197_in_interface_body5174); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal705_tree = (object)adaptor.Create(char_literal705);
			adaptor.AddChild(root_0, char_literal705_tree);
			}
			DebugLocation(720, 8);
			// .\\cs.g:720:8: ( interface_member_declarations )?
			int alt204=2;
			try { DebugEnterSubRule(204);
			try { DebugEnterDecision(204, decisionCanBacktrack[204]);
			int LA204_0 = input.LA(1);

			if ((LA204_0==IDENTIFIER||LA204_0==91||(LA204_0>=95 && LA204_0<=98)||(LA204_0>=100 && LA204_0<=101)||LA204_0==103||(LA204_0>=105 && LA204_0<=106)||LA204_0==109||LA204_0==114||LA204_0==117||(LA204_0>=119 && LA204_0<=120)||(LA204_0>=122 && LA204_0<=123)||(LA204_0>=125 && LA204_0<=126)||LA204_0==129||LA204_0==132||LA204_0==135||LA204_0==138||(LA204_0>=140 && LA204_0<=141)||(LA204_0>=143 && LA204_0<=144)||(LA204_0>=146 && LA204_0<=148)||(LA204_0>=150 && LA204_0<=152)||LA204_0==154||(LA204_0>=156 && LA204_0<=157)||(LA204_0>=160 && LA204_0<=165)||LA204_0==167||(LA204_0>=169 && LA204_0<=173)||(LA204_0>=176 && LA204_0<=177)||LA204_0==183||(LA204_0>=185 && LA204_0<=186)||(LA204_0>=188 && LA204_0<=194)||LA204_0==196))
			{
				alt204 = 1;
			}
			} finally { DebugExitDecision(204); }
			switch (alt204)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:720:8: interface_member_declarations
				{
				DebugLocation(720, 8);
				PushFollow(Follow._interface_member_declarations_in_interface_body5178);
				interface_member_declarations706=interface_member_declarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_member_declarations706.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(204); }

			DebugLocation(720, 41);
			char_literal707=(IToken)Match(input,201,Follow._201_in_interface_body5183); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal707_tree = (object)adaptor.Create(char_literal707);
			adaptor.AddChild(root_0, char_literal707_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_body", 207);
			LeaveRule("interface_body", 207);
			LeaveRule_interface_body();
	        if (state.backtracking > 0) { Memoize(input, 207, interface_body_StartIndex); }

	    }
	 	DebugLocation(720, 44);
		} finally { DebugExitRule(GrammarFileName, "interface_body"); }
		return retval;

	}
	// $ANTLR end "interface_body"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_interface_member_declarations() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_interface_member_declarations() {}

	// $ANTLR start "interface_member_declarations"
	// .\\cs.g:721:1: interface_member_declarations : ( interface_member_declaration )+ ;
	[GrammarRule("interface_member_declarations")]
	private AstParserRuleReturnScope<object, IToken> interface_member_declarations()
	{
		EnterRule_interface_member_declarations();
		EnterRule("interface_member_declarations", 208);
		TraceIn("interface_member_declarations", 208);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int interface_member_declarations_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> interface_member_declaration708 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "interface_member_declarations");
		DebugLocation(721, 31);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 208)) { return retval; }

			// .\\cs.g:721:30: ( ( interface_member_declaration )+ )
			DebugEnterAlt(1);
			// .\\cs.g:722:2: ( interface_member_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(722, 2);
			// .\\cs.g:722:2: ( interface_member_declaration )+
			int cnt205=0;
			try { DebugEnterSubRule(205);
			while (true)
			{
				int alt205=2;
				try { DebugEnterDecision(205, decisionCanBacktrack[205]);
				int LA205_0 = input.LA(1);

				if ((LA205_0==IDENTIFIER||LA205_0==91||(LA205_0>=95 && LA205_0<=98)||(LA205_0>=100 && LA205_0<=101)||LA205_0==103||(LA205_0>=105 && LA205_0<=106)||LA205_0==109||LA205_0==114||LA205_0==117||(LA205_0>=119 && LA205_0<=120)||(LA205_0>=122 && LA205_0<=123)||(LA205_0>=125 && LA205_0<=126)||LA205_0==129||LA205_0==132||LA205_0==135||LA205_0==138||(LA205_0>=140 && LA205_0<=141)||(LA205_0>=143 && LA205_0<=144)||(LA205_0>=146 && LA205_0<=148)||(LA205_0>=150 && LA205_0<=152)||LA205_0==154||(LA205_0>=156 && LA205_0<=157)||(LA205_0>=160 && LA205_0<=165)||LA205_0==167||(LA205_0>=169 && LA205_0<=173)||(LA205_0>=176 && LA205_0<=177)||LA205_0==183||(LA205_0>=185 && LA205_0<=186)||(LA205_0>=188 && LA205_0<=194)||LA205_0==196))
				{
					alt205 = 1;
				}


				} finally { DebugExitDecision(205); }
				switch (alt205)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:722:2: interface_member_declaration
					{
					DebugLocation(722, 2);
					PushFollow(Follow._interface_member_declaration_in_interface_member_declarations5191);
					interface_member_declaration708=interface_member_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_member_declaration708.Tree);

					}
					break;

				default:
					if (cnt205 >= 1)
						goto loop205;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee205 = new EarlyExitException( 205, input );
					DebugRecognitionException(eee205);
					throw eee205;
				}
				cnt205++;
			}
			loop205:
				;

			} finally { DebugExitSubRule(205); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_member_declarations", 208);
			LeaveRule("interface_member_declarations", 208);
			LeaveRule_interface_member_declarations();
	        if (state.backtracking > 0) { Memoize(input, 208, interface_member_declarations_StartIndex); }

	    }
	 	DebugLocation(722, 31);
		} finally { DebugExitRule(GrammarFileName, "interface_member_declarations"); }
		return retval;

	}
	// $ANTLR end "interface_member_declarations"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_interface_member_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_interface_member_declaration() {}

	// $ANTLR start "interface_member_declaration"
	// .\\cs.g:723:1: interface_member_declaration : ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) ) ;
	[GrammarRule("interface_member_declaration")]
	private AstParserRuleReturnScope<object, IToken> interface_member_declaration()
	{
		EnterRule_interface_member_declaration();
		EnterRule("interface_member_declaration", 209);
		TraceIn("interface_member_declaration", 209);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int interface_member_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal711 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> attributes709 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> modifiers710 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> interface_method_declaration712 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> interface_event_declaration713 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type714 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> interface_method_declaration715 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> interface_property_declaration716 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> interface_indexer_declaration717 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal711_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "interface_member_declaration");
		DebugLocation(723, 2);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 209)) { return retval; }

			// .\\cs.g:723:29: ( ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) ) )
			DebugEnterAlt(1);
			// .\\cs.g:724:2: ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(724, 2);
			// .\\cs.g:724:2: ( attributes )?
			int alt206=2;
			try { DebugEnterSubRule(206);
			try { DebugEnterDecision(206, decisionCanBacktrack[206]);
			int LA206_0 = input.LA(1);

			if ((LA206_0==91))
			{
				alt206 = 1;
			}
			} finally { DebugExitDecision(206); }
			switch (alt206)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:724:2: attributes
				{
				DebugLocation(724, 2);
				PushFollow(Follow._attributes_in_interface_member_declaration5200);
				attributes709=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes709.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(206); }

			DebugLocation(724, 17);
			// .\\cs.g:724:17: ( modifiers )?
			int alt207=2;
			try { DebugEnterSubRule(207);
			try { DebugEnterDecision(207, decisionCanBacktrack[207]);
			int LA207_0 = input.LA(1);

			if ((LA207_0==96||LA207_0==125||LA207_0==140||LA207_0==150||LA207_0==156||LA207_0==161||(LA207_0>=163 && LA207_0<=165)||LA207_0==170||LA207_0==176||LA207_0==188||LA207_0==191||LA207_0==193))
			{
				alt207 = 1;
			}
			} finally { DebugExitDecision(207); }
			switch (alt207)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:724:17: modifiers
				{
				DebugLocation(724, 17);
				PushFollow(Follow._modifiers_in_interface_member_declaration5206);
				modifiers710=modifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers710.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(207); }

			DebugLocation(725, 3);
			// .\\cs.g:725:3: ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) )
			int alt209=3;
			try { DebugEnterSubRule(209);
			try { DebugEnterDecision(209, decisionCanBacktrack[209]);
			switch (input.LA(1))
			{
			case 192:
				{
				int LA209_1 = input.LA(2);

				if ((LA209_1==IDENTIFIER||LA209_1==95||(LA209_1>=97 && LA209_1<=98)||(LA209_1>=100 && LA209_1<=101)||LA209_1==105||LA209_1==117||LA209_1==120||LA209_1==122||LA209_1==126||LA209_1==132||LA209_1==135||LA209_1==141||(LA209_1>=143 && LA209_1<=144)||(LA209_1>=147 && LA209_1<=148)||LA209_1==152||LA209_1==154||LA209_1==157||LA209_1==160||LA209_1==162||LA209_1==167||(LA209_1>=171 && LA209_1<=172)||LA209_1==183||LA209_1==190||LA209_1==194||LA209_1==196))
				{
					alt209 = 1;
				}
				else if ((LA209_1==69))
				{
					alt209 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 209, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 123:
				{
				alt209 = 2;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 103:
			case 105:
			case 106:
			case 109:
			case 114:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 177:
			case 183:
			case 185:
			case 186:
			case 189:
			case 190:
			case 194:
			case 196:
				{
				alt209 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 209, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(209); }
			switch (alt209)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:725:4: 'void' interface_method_declaration
				{
				DebugLocation(725, 4);
				string_literal711=(IToken)Match(input,192,Follow._192_in_interface_member_declaration5212); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal711_tree = (object)adaptor.Create(string_literal711);
				adaptor.AddChild(root_0, string_literal711_tree);
				}
				DebugLocation(725, 13);
				PushFollow(Follow._interface_method_declaration_in_interface_member_declaration5216);
				interface_method_declaration712=interface_method_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_method_declaration712.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:726:5: interface_event_declaration
				{
				DebugLocation(726, 5);
				PushFollow(Follow._interface_event_declaration_in_interface_member_declaration5222);
				interface_event_declaration713=interface_event_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_event_declaration713.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:727:5: type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration )
				{
				DebugLocation(727, 5);
				PushFollow(Follow._type_in_interface_member_declaration5228);
				type714=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type714.Tree);
				DebugLocation(727, 12);
				// .\\cs.g:727:12: ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration )
				int alt208=3;
				try { DebugEnterSubRule(208);
				try { DebugEnterDecision(208, decisionCanBacktrack[208]);
				int LA208_0 = input.LA(1);

				if ((LA208_0==IDENTIFIER||LA208_0==95||(LA208_0>=97 && LA208_0<=98)||(LA208_0>=100 && LA208_0<=101)||LA208_0==105||LA208_0==117||LA208_0==120||LA208_0==122||LA208_0==126||LA208_0==132||LA208_0==135||LA208_0==141||(LA208_0>=143 && LA208_0<=144)||(LA208_0>=147 && LA208_0<=148)||LA208_0==152||LA208_0==154||LA208_0==157||LA208_0==160||LA208_0==162||LA208_0==167||(LA208_0>=171 && LA208_0<=172)||LA208_0==183||LA208_0==190||LA208_0==194||LA208_0==196))
				{
					int LA208_1 = input.LA(2);

					if ((LA208_1==81) && (EvaluatePredicate(synpred26_cs_fragment)))
					{
						alt208 = 1;
					}
					else if ((LA208_1==68) && (EvaluatePredicate(synpred26_cs_fragment)))
					{
						alt208 = 1;
					}
					else if ((LA208_1==197) && (EvaluatePredicate(synpred27_cs_fragment)))
					{
						alt208 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 208, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA208_0==180))
				{
					alt208 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 208, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(208); }
				switch (alt208)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:727:14: ( member_name '(' )=> interface_method_declaration
					{
					DebugLocation(727, 37);
					PushFollow(Follow._interface_method_declaration_in_interface_member_declaration5244);
					interface_method_declaration715=interface_method_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_method_declaration715.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:728:14: ( member_name '{' )=> interface_property_declaration
					{
					DebugLocation(728, 37);
					PushFollow(Follow._interface_property_declaration_in_interface_member_declaration5269);
					interface_property_declaration716=interface_property_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_property_declaration716.Tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// .\\cs.g:729:8: interface_indexer_declaration
					{
					DebugLocation(729, 8);
					PushFollow(Follow._interface_indexer_declaration_in_interface_member_declaration5279);
					interface_indexer_declaration717=interface_indexer_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_indexer_declaration717.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(208); }


				}
				break;

			}
			} finally { DebugExitSubRule(209); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_member_declaration", 209);
			LeaveRule("interface_member_declaration", 209);
			LeaveRule_interface_member_declaration();
	        if (state.backtracking > 0) { Memoize(input, 209, interface_member_declaration_StartIndex); }

	    }
	 	DebugLocation(731, 2);
		} finally { DebugExitRule(GrammarFileName, "interface_member_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_member_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_interface_property_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_interface_property_declaration() {}

	// $ANTLR start "interface_property_declaration"
	// .\\cs.g:732:1: interface_property_declaration : identifier '{' interface_accessor_declarations '}' ;
	[GrammarRule("interface_property_declaration")]
	private AstParserRuleReturnScope<object, IToken> interface_property_declaration()
	{
		EnterRule_interface_property_declaration();
		EnterRule("interface_property_declaration", 210);
		TraceIn("interface_property_declaration", 210);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int interface_property_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal719 = default(IToken);
	    IToken char_literal721 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier718 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> interface_accessor_declarations720 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal719_tree = default(object);
	    object char_literal721_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "interface_property_declaration");
		DebugLocation(732, 58);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 210)) { return retval; }

			// .\\cs.g:732:31: ( identifier '{' interface_accessor_declarations '}' )
			DebugEnterAlt(1);
			// .\\cs.g:733:2: identifier '{' interface_accessor_declarations '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(733, 2);
			PushFollow(Follow._identifier_in_interface_property_declaration5296);
			identifier718=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier718.Tree);
			DebugLocation(733, 15);
			char_literal719=(IToken)Match(input,197,Follow._197_in_interface_property_declaration5300); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal719_tree = (object)adaptor.Create(char_literal719);
			adaptor.AddChild(root_0, char_literal719_tree);
			}
			DebugLocation(733, 21);
			PushFollow(Follow._interface_accessor_declarations_in_interface_property_declaration5304);
			interface_accessor_declarations720=interface_accessor_declarations();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interface_accessor_declarations720.Tree);
			DebugLocation(733, 55);
			char_literal721=(IToken)Match(input,201,Follow._201_in_interface_property_declaration5308); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal721_tree = (object)adaptor.Create(char_literal721);
			adaptor.AddChild(root_0, char_literal721_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_property_declaration", 210);
			LeaveRule("interface_property_declaration", 210);
			LeaveRule_interface_property_declaration();
	        if (state.backtracking > 0) { Memoize(input, 210, interface_property_declaration_StartIndex); }

	    }
	 	DebugLocation(733, 58);
		} finally { DebugExitRule(GrammarFileName, "interface_property_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_property_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_interface_method_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_interface_method_declaration() {}

	// $ANTLR start "interface_method_declaration"
	// .\\cs.g:734:1: interface_method_declaration : identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' ;
	[GrammarRule("interface_method_declaration")]
	private AstParserRuleReturnScope<object, IToken> interface_method_declaration()
	{
		EnterRule_interface_method_declaration();
		EnterRule("interface_method_declaration", 211);
		TraceIn("interface_method_declaration", 211);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int interface_method_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal724 = default(IToken);
	    IToken char_literal726 = default(IToken);
	    IToken char_literal728 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier722 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> generic_argument_list723 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> formal_parameter_list725 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_parameter_constraints_clauses727 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal724_tree = default(object);
	    object char_literal726_tree = default(object);
	    object char_literal728_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "interface_method_declaration");
		DebugLocation(734, 84);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 211)) { return retval; }

			// .\\cs.g:734:29: ( identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' )
			DebugEnterAlt(1);
			// .\\cs.g:735:2: identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(735, 2);
			PushFollow(Follow._identifier_in_interface_method_declaration5316);
			identifier722=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier722.Tree);
			DebugLocation(735, 15);
			// .\\cs.g:735:15: ( generic_argument_list )?
			int alt210=2;
			try { DebugEnterSubRule(210);
			try { DebugEnterDecision(210, decisionCanBacktrack[210]);
			int LA210_0 = input.LA(1);

			if ((LA210_0==81))
			{
				alt210 = 1;
			}
			} finally { DebugExitDecision(210); }
			switch (alt210)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:735:15: generic_argument_list
				{
				DebugLocation(735, 15);
				PushFollow(Follow._generic_argument_list_in_interface_method_declaration5320);
				generic_argument_list723=generic_argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_argument_list723.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(210); }

			DebugLocation(736, 6);
			char_literal724=(IToken)Match(input,68,Follow._68_in_interface_method_declaration5328); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal724_tree = (object)adaptor.Create(char_literal724);
			adaptor.AddChild(root_0, char_literal724_tree);
			}
			DebugLocation(736, 12);
			// .\\cs.g:736:12: ( formal_parameter_list )?
			int alt211=2;
			try { DebugEnterSubRule(211);
			try { DebugEnterDecision(211, decisionCanBacktrack[211]);
			int LA211_0 = input.LA(1);

			if ((LA211_0==IDENTIFIER||LA211_0==91||LA211_0==95||(LA211_0>=97 && LA211_0<=98)||(LA211_0>=100 && LA211_0<=101)||LA211_0==103||(LA211_0>=105 && LA211_0<=106)||LA211_0==109||LA211_0==114||LA211_0==117||(LA211_0>=119 && LA211_0<=120)||LA211_0==122||LA211_0==126||LA211_0==129||LA211_0==132||LA211_0==135||LA211_0==138||LA211_0==141||(LA211_0>=143 && LA211_0<=144)||(LA211_0>=146 && LA211_0<=148)||(LA211_0>=151 && LA211_0<=152)||(LA211_0>=154 && LA211_0<=155)||(LA211_0>=157 && LA211_0<=158)||LA211_0==160||LA211_0==162||(LA211_0>=166 && LA211_0<=167)||LA211_0==169||(LA211_0>=171 && LA211_0<=173)||LA211_0==177||LA211_0==180||LA211_0==183||(LA211_0>=185 && LA211_0<=186)||(LA211_0>=189 && LA211_0<=190)||LA211_0==192||LA211_0==194||LA211_0==196))
			{
				alt211 = 1;
			}
			} finally { DebugExitDecision(211); }
			switch (alt211)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:736:12: formal_parameter_list
				{
				DebugLocation(736, 12);
				PushFollow(Follow._formal_parameter_list_in_interface_method_declaration5332);
				formal_parameter_list725=formal_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter_list725.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(211); }

			DebugLocation(736, 37);
			char_literal726=(IToken)Match(input,RPAREN,Follow._RPAREN_in_interface_method_declaration5337); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal726_tree = (object)adaptor.Create(char_literal726);
			adaptor.AddChild(root_0, char_literal726_tree);
			}
			DebugLocation(736, 43);
			// .\\cs.g:736:43: ( type_parameter_constraints_clauses )?
			int alt212=2;
			try { DebugEnterSubRule(212);
			try { DebugEnterDecision(212, decisionCanBacktrack[212]);
			int LA212_0 = input.LA(1);

			if ((LA212_0==194))
			{
				alt212 = 1;
			}
			} finally { DebugExitDecision(212); }
			switch (alt212)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:736:43: type_parameter_constraints_clauses
				{
				DebugLocation(736, 43);
				PushFollow(Follow._type_parameter_constraints_clauses_in_interface_method_declaration5341);
				type_parameter_constraints_clauses727=type_parameter_constraints_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clauses727.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(212); }

			DebugLocation(736, 81);
			char_literal728=(IToken)Match(input,SEMI,Follow._SEMI_in_interface_method_declaration5346); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal728_tree = (object)adaptor.Create(char_literal728);
			adaptor.AddChild(root_0, char_literal728_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_method_declaration", 211);
			LeaveRule("interface_method_declaration", 211);
			LeaveRule_interface_method_declaration();
	        if (state.backtracking > 0) { Memoize(input, 211, interface_method_declaration_StartIndex); }

	    }
	 	DebugLocation(736, 84);
		} finally { DebugExitRule(GrammarFileName, "interface_method_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_method_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_interface_event_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_interface_event_declaration() {}

	// $ANTLR start "interface_event_declaration"
	// .\\cs.g:737:1: interface_event_declaration : 'event' type identifier ';' ;
	[GrammarRule("interface_event_declaration")]
	private AstParserRuleReturnScope<object, IToken> interface_event_declaration()
	{
		EnterRule_interface_event_declaration();
		EnterRule("interface_event_declaration", 212);
		TraceIn("interface_event_declaration", 212);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int interface_event_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal729 = default(IToken);
	    IToken char_literal732 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type730 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier731 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal729_tree = default(object);
	    object char_literal732_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "interface_event_declaration");
		DebugLocation(737, 35);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 212)) { return retval; }

			// .\\cs.g:737:28: ( 'event' type identifier ';' )
			DebugEnterAlt(1);
			// .\\cs.g:739:2: 'event' type identifier ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(739, 2);
			string_literal729=(IToken)Match(input,123,Follow._123_in_interface_event_declaration5357); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal729_tree = (object)adaptor.Create(string_literal729);
			adaptor.AddChild(root_0, string_literal729_tree);
			}
			DebugLocation(739, 12);
			PushFollow(Follow._type_in_interface_event_declaration5361);
			type730=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type730.Tree);
			DebugLocation(739, 19);
			PushFollow(Follow._identifier_in_interface_event_declaration5365);
			identifier731=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier731.Tree);
			DebugLocation(739, 32);
			char_literal732=(IToken)Match(input,SEMI,Follow._SEMI_in_interface_event_declaration5369); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal732_tree = (object)adaptor.Create(char_literal732);
			adaptor.AddChild(root_0, char_literal732_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_event_declaration", 212);
			LeaveRule("interface_event_declaration", 212);
			LeaveRule_interface_event_declaration();
	        if (state.backtracking > 0) { Memoize(input, 212, interface_event_declaration_StartIndex); }

	    }
	 	DebugLocation(739, 35);
		} finally { DebugExitRule(GrammarFileName, "interface_event_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_event_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_interface_indexer_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_interface_indexer_declaration() {}

	// $ANTLR start "interface_indexer_declaration"
	// .\\cs.g:740:1: interface_indexer_declaration : 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}' ;
	[GrammarRule("interface_indexer_declaration")]
	private AstParserRuleReturnScope<object, IToken> interface_indexer_declaration()
	{
		EnterRule_interface_indexer_declaration();
		EnterRule("interface_indexer_declaration", 213);
		TraceIn("interface_indexer_declaration", 213);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int interface_indexer_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal733 = default(IToken);
	    IToken char_literal734 = default(IToken);
	    IToken char_literal736 = default(IToken);
	    IToken char_literal737 = default(IToken);
	    IToken char_literal739 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> formal_parameter_list735 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> interface_accessor_declarations738 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal733_tree = default(object);
	    object char_literal734_tree = default(object);
	    object char_literal736_tree = default(object);
	    object char_literal737_tree = default(object);
	    object char_literal739_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "interface_indexer_declaration");
		DebugLocation(740, 90);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 213)) { return retval; }

			// .\\cs.g:740:30: ( 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}' )
			DebugEnterAlt(1);
			// .\\cs.g:742:2: 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(742, 2);
			string_literal733=(IToken)Match(input,180,Follow._180_in_interface_indexer_declaration5381); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal733_tree = (object)adaptor.Create(string_literal733);
			adaptor.AddChild(root_0, string_literal733_tree);
			}
			DebugLocation(742, 11);
			char_literal734=(IToken)Match(input,91,Follow._91_in_interface_indexer_declaration5385); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal734_tree = (object)adaptor.Create(char_literal734);
			adaptor.AddChild(root_0, char_literal734_tree);
			}
			DebugLocation(742, 17);
			PushFollow(Follow._formal_parameter_list_in_interface_indexer_declaration5389);
			formal_parameter_list735=formal_parameter_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter_list735.Tree);
			DebugLocation(742, 41);
			char_literal736=(IToken)Match(input,92,Follow._92_in_interface_indexer_declaration5393); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal736_tree = (object)adaptor.Create(char_literal736);
			adaptor.AddChild(root_0, char_literal736_tree);
			}
			DebugLocation(742, 47);
			char_literal737=(IToken)Match(input,197,Follow._197_in_interface_indexer_declaration5397); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal737_tree = (object)adaptor.Create(char_literal737);
			adaptor.AddChild(root_0, char_literal737_tree);
			}
			DebugLocation(742, 53);
			PushFollow(Follow._interface_accessor_declarations_in_interface_indexer_declaration5401);
			interface_accessor_declarations738=interface_accessor_declarations();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interface_accessor_declarations738.Tree);
			DebugLocation(742, 87);
			char_literal739=(IToken)Match(input,201,Follow._201_in_interface_indexer_declaration5405); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal739_tree = (object)adaptor.Create(char_literal739);
			adaptor.AddChild(root_0, char_literal739_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_indexer_declaration", 213);
			LeaveRule("interface_indexer_declaration", 213);
			LeaveRule_interface_indexer_declaration();
	        if (state.backtracking > 0) { Memoize(input, 213, interface_indexer_declaration_StartIndex); }

	    }
	 	DebugLocation(742, 90);
		} finally { DebugExitRule(GrammarFileName, "interface_indexer_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_indexer_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_interface_accessor_declarations() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_interface_accessor_declarations() {}

	// $ANTLR start "interface_accessor_declarations"
	// .\\cs.g:743:1: interface_accessor_declarations : ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? ) ;
	[GrammarRule("interface_accessor_declarations")]
	private AstParserRuleReturnScope<object, IToken> interface_accessor_declarations()
	{
		EnterRule_interface_accessor_declarations();
		EnterRule("interface_accessor_declarations", 214);
		TraceIn("interface_accessor_declarations", 214);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int interface_accessor_declarations_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> attributes740 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> interface_get_accessor_declaration741 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> attributes742 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> interface_set_accessor_declaration743 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> interface_set_accessor_declaration744 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> attributes745 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> interface_get_accessor_declaration746 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "interface_accessor_declarations");
		DebugLocation(743, 92);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 214)) { return retval; }

			// .\\cs.g:743:32: ( ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? ) )
			DebugEnterAlt(1);
			// .\\cs.g:744:2: ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(744, 2);
			// .\\cs.g:744:2: ( attributes )?
			int alt213=2;
			try { DebugEnterSubRule(213);
			try { DebugEnterDecision(213, decisionCanBacktrack[213]);
			int LA213_0 = input.LA(1);

			if ((LA213_0==91))
			{
				alt213 = 1;
			}
			} finally { DebugExitDecision(213); }
			switch (alt213)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:744:2: attributes
				{
				DebugLocation(744, 2);
				PushFollow(Follow._attributes_in_interface_accessor_declarations5413);
				attributes740=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes740.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(213); }

			DebugLocation(745, 3);
			// .\\cs.g:745:3: ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? )
			int alt218=2;
			try { DebugEnterSubRule(218);
			try { DebugEnterDecision(218, decisionCanBacktrack[218]);
			int LA218_0 = input.LA(1);

			if ((LA218_0==133))
			{
				alt218 = 1;
			}
			else if ((LA218_0==172))
			{
				alt218 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 218, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(218); }
			switch (alt218)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:745:4: interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )?
				{
				DebugLocation(745, 4);
				PushFollow(Follow._interface_get_accessor_declaration_in_interface_accessor_declarations5422);
				interface_get_accessor_declaration741=interface_get_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_get_accessor_declaration741.Tree);
				DebugLocation(745, 41);
				// .\\cs.g:745:41: ( attributes )?
				int alt214=2;
				try { DebugEnterSubRule(214);
				try { DebugEnterDecision(214, decisionCanBacktrack[214]);
				int LA214_0 = input.LA(1);

				if ((LA214_0==91))
				{
					alt214 = 1;
				}
				} finally { DebugExitDecision(214); }
				switch (alt214)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:745:41: attributes
					{
					DebugLocation(745, 41);
					PushFollow(Follow._attributes_in_interface_accessor_declarations5426);
					attributes742=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes742.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(214); }

				DebugLocation(745, 55);
				// .\\cs.g:745:55: ( interface_set_accessor_declaration )?
				int alt215=2;
				try { DebugEnterSubRule(215);
				try { DebugEnterDecision(215, decisionCanBacktrack[215]);
				int LA215_0 = input.LA(1);

				if ((LA215_0==172))
				{
					alt215 = 1;
				}
				} finally { DebugExitDecision(215); }
				switch (alt215)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:745:55: interface_set_accessor_declaration
					{
					DebugLocation(745, 55);
					PushFollow(Follow._interface_set_accessor_declaration_in_interface_accessor_declarations5431);
					interface_set_accessor_declaration743=interface_set_accessor_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_set_accessor_declaration743.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(215); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:746:5: interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )?
				{
				DebugLocation(746, 5);
				PushFollow(Follow._interface_set_accessor_declaration_in_interface_accessor_declarations5438);
				interface_set_accessor_declaration744=interface_set_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_set_accessor_declaration744.Tree);
				DebugLocation(746, 42);
				// .\\cs.g:746:42: ( attributes )?
				int alt216=2;
				try { DebugEnterSubRule(216);
				try { DebugEnterDecision(216, decisionCanBacktrack[216]);
				int LA216_0 = input.LA(1);

				if ((LA216_0==91))
				{
					alt216 = 1;
				}
				} finally { DebugExitDecision(216); }
				switch (alt216)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:746:42: attributes
					{
					DebugLocation(746, 42);
					PushFollow(Follow._attributes_in_interface_accessor_declarations5442);
					attributes745=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes745.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(216); }

				DebugLocation(746, 56);
				// .\\cs.g:746:56: ( interface_get_accessor_declaration )?
				int alt217=2;
				try { DebugEnterSubRule(217);
				try { DebugEnterDecision(217, decisionCanBacktrack[217]);
				int LA217_0 = input.LA(1);

				if ((LA217_0==133))
				{
					alt217 = 1;
				}
				} finally { DebugExitDecision(217); }
				switch (alt217)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:746:56: interface_get_accessor_declaration
					{
					DebugLocation(746, 56);
					PushFollow(Follow._interface_get_accessor_declaration_in_interface_accessor_declarations5447);
					interface_get_accessor_declaration746=interface_get_accessor_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_get_accessor_declaration746.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(217); }


				}
				break;

			}
			} finally { DebugExitSubRule(218); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_accessor_declarations", 214);
			LeaveRule("interface_accessor_declarations", 214);
			LeaveRule_interface_accessor_declarations();
	        if (state.backtracking > 0) { Memoize(input, 214, interface_accessor_declarations_StartIndex); }

	    }
	 	DebugLocation(746, 92);
		} finally { DebugExitRule(GrammarFileName, "interface_accessor_declarations"); }
		return retval;

	}
	// $ANTLR end "interface_accessor_declarations"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_interface_get_accessor_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_interface_get_accessor_declaration() {}

	// $ANTLR start "interface_get_accessor_declaration"
	// .\\cs.g:747:1: interface_get_accessor_declaration : 'get' ';' ;
	[GrammarRule("interface_get_accessor_declaration")]
	private AstParserRuleReturnScope<object, IToken> interface_get_accessor_declaration()
	{
		EnterRule_interface_get_accessor_declaration();
		EnterRule("interface_get_accessor_declaration", 215);
		TraceIn("interface_get_accessor_declaration", 215);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int interface_get_accessor_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal747 = default(IToken);
	    IToken char_literal748 = default(IToken);

	    object string_literal747_tree = default(object);
	    object char_literal748_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "interface_get_accessor_declaration");
		DebugLocation(747, 13);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 215)) { return retval; }

			// .\\cs.g:747:35: ( 'get' ';' )
			DebugEnterAlt(1);
			// .\\cs.g:748:2: 'get' ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(748, 2);
			string_literal747=(IToken)Match(input,133,Follow._133_in_interface_get_accessor_declaration5457); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal747_tree = (object)adaptor.Create(string_literal747);
			adaptor.AddChild(root_0, string_literal747_tree);
			}
			DebugLocation(748, 10);
			char_literal748=(IToken)Match(input,SEMI,Follow._SEMI_in_interface_get_accessor_declaration5461); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal748_tree = (object)adaptor.Create(char_literal748);
			adaptor.AddChild(root_0, char_literal748_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_get_accessor_declaration", 215);
			LeaveRule("interface_get_accessor_declaration", 215);
			LeaveRule_interface_get_accessor_declaration();
	        if (state.backtracking > 0) { Memoize(input, 215, interface_get_accessor_declaration_StartIndex); }

	    }
	 	DebugLocation(748, 13);
		} finally { DebugExitRule(GrammarFileName, "interface_get_accessor_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_get_accessor_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_interface_set_accessor_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_interface_set_accessor_declaration() {}

	// $ANTLR start "interface_set_accessor_declaration"
	// .\\cs.g:749:1: interface_set_accessor_declaration : 'set' ';' ;
	[GrammarRule("interface_set_accessor_declaration")]
	private AstParserRuleReturnScope<object, IToken> interface_set_accessor_declaration()
	{
		EnterRule_interface_set_accessor_declaration();
		EnterRule("interface_set_accessor_declaration", 216);
		TraceIn("interface_set_accessor_declaration", 216);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int interface_set_accessor_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal749 = default(IToken);
	    IToken char_literal750 = default(IToken);

	    object string_literal749_tree = default(object);
	    object char_literal750_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "interface_set_accessor_declaration");
		DebugLocation(749, 13);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 216)) { return retval; }

			// .\\cs.g:749:35: ( 'set' ';' )
			DebugEnterAlt(1);
			// .\\cs.g:750:2: 'set' ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(750, 2);
			string_literal749=(IToken)Match(input,172,Follow._172_in_interface_set_accessor_declaration5471); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal749_tree = (object)adaptor.Create(string_literal749);
			adaptor.AddChild(root_0, string_literal749_tree);
			}
			DebugLocation(750, 10);
			char_literal750=(IToken)Match(input,SEMI,Follow._SEMI_in_interface_set_accessor_declaration5475); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal750_tree = (object)adaptor.Create(char_literal750);
			adaptor.AddChild(root_0, char_literal750_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_set_accessor_declaration", 216);
			LeaveRule("interface_set_accessor_declaration", 216);
			LeaveRule_interface_set_accessor_declaration();
	        if (state.backtracking > 0) { Memoize(input, 216, interface_set_accessor_declaration_StartIndex); }

	    }
	 	DebugLocation(750, 13);
		} finally { DebugExitRule(GrammarFileName, "interface_set_accessor_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_set_accessor_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_method_modifiers() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_method_modifiers() {}

	// $ANTLR start "method_modifiers"
	// .\\cs.g:751:1: method_modifiers : ( modifier )+ ;
	[GrammarRule("method_modifiers")]
	private AstParserRuleReturnScope<object, IToken> method_modifiers()
	{
		EnterRule_method_modifiers();
		EnterRule("method_modifiers", 217);
		TraceIn("method_modifiers", 217);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int method_modifiers_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> modifier751 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "method_modifiers");
		DebugLocation(751, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 217)) { return retval; }

			// .\\cs.g:751:17: ( ( modifier )+ )
			DebugEnterAlt(1);
			// .\\cs.g:752:2: ( modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(752, 2);
			// .\\cs.g:752:2: ( modifier )+
			int cnt219=0;
			try { DebugEnterSubRule(219);
			while (true)
			{
				int alt219=2;
				try { DebugEnterDecision(219, decisionCanBacktrack[219]);
				int LA219_0 = input.LA(1);

				if ((LA219_0==96||LA219_0==125||LA219_0==140||LA219_0==150||LA219_0==156||LA219_0==161||(LA219_0>=163 && LA219_0<=165)||LA219_0==170||LA219_0==176||LA219_0==188||LA219_0==191||LA219_0==193))
				{
					alt219 = 1;
				}


				} finally { DebugExitDecision(219); }
				switch (alt219)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:752:2: modifier
					{
					DebugLocation(752, 2);
					PushFollow(Follow._modifier_in_method_modifiers5485);
					modifier751=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifier751.Tree);

					}
					break;

				default:
					if (cnt219 >= 1)
						goto loop219;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee219 = new EarlyExitException( 219, input );
					DebugRecognitionException(eee219);
					throw eee219;
				}
				cnt219++;
			}
			loop219:
				;

			} finally { DebugExitSubRule(219); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("method_modifiers", 217);
			LeaveRule("method_modifiers", 217);
			LeaveRule_method_modifiers();
	        if (state.backtracking > 0) { Memoize(input, 217, method_modifiers_StartIndex); }

	    }
	 	DebugLocation(752, 11);
		} finally { DebugExitRule(GrammarFileName, "method_modifiers"); }
		return retval;

	}
	// $ANTLR end "method_modifiers"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_struct_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_struct_declaration() {}

	// $ANTLR start "struct_declaration"
	// .\\cs.g:755:1: struct_declaration : 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )? ;
	[GrammarRule("struct_declaration")]
	private AstParserRuleReturnScope<object, IToken> struct_declaration()
	{
		EnterRule_struct_declaration();
		EnterRule("struct_declaration", 218);
		TraceIn("struct_declaration", 218);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int struct_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal752 = default(IToken);
	    IToken char_literal757 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type_or_generic753 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> struct_interfaces754 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_parameter_constraints_clauses755 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> struct_body756 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal752_tree = default(object);
	    object char_literal757_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "struct_declaration");
		DebugLocation(755, 108);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 218)) { return retval; }

			// .\\cs.g:755:19: ( 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )? )
			DebugEnterAlt(1);
			// .\\cs.g:756:2: 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(756, 2);
			string_literal752=(IToken)Match(input,178,Follow._178_in_struct_declaration5497); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal752_tree = (object)adaptor.Create(string_literal752);
			adaptor.AddChild(root_0, string_literal752_tree);
			}
			DebugLocation(756, 13);
			PushFollow(Follow._type_or_generic_in_struct_declaration5501);
			type_or_generic753=type_or_generic();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_or_generic753.Tree);
			DebugLocation(756, 31);
			// .\\cs.g:756:31: ( struct_interfaces )?
			int alt220=2;
			try { DebugEnterSubRule(220);
			try { DebugEnterDecision(220, decisionCanBacktrack[220]);
			int LA220_0 = input.LA(1);

			if ((LA220_0==79))
			{
				alt220 = 1;
			}
			} finally { DebugExitDecision(220); }
			switch (alt220)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:756:31: struct_interfaces
				{
				DebugLocation(756, 31);
				PushFollow(Follow._struct_interfaces_in_struct_declaration5505);
				struct_interfaces754=struct_interfaces();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_interfaces754.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(220); }

			DebugLocation(756, 52);
			// .\\cs.g:756:52: ( type_parameter_constraints_clauses )?
			int alt221=2;
			try { DebugEnterSubRule(221);
			try { DebugEnterDecision(221, decisionCanBacktrack[221]);
			int LA221_0 = input.LA(1);

			if ((LA221_0==194))
			{
				alt221 = 1;
			}
			} finally { DebugExitDecision(221); }
			switch (alt221)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:756:52: type_parameter_constraints_clauses
				{
				DebugLocation(756, 52);
				PushFollow(Follow._type_parameter_constraints_clauses_in_struct_declaration5510);
				type_parameter_constraints_clauses755=type_parameter_constraints_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clauses755.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(221); }

			DebugLocation(756, 90);
			PushFollow(Follow._struct_body_in_struct_declaration5515);
			struct_body756=struct_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, struct_body756.Tree);
			DebugLocation(756, 104);
			// .\\cs.g:756:104: ( ';' )?
			int alt222=2;
			try { DebugEnterSubRule(222);
			try { DebugEnterDecision(222, decisionCanBacktrack[222]);
			int LA222_0 = input.LA(1);

			if ((LA222_0==SEMI))
			{
				alt222 = 1;
			}
			} finally { DebugExitDecision(222); }
			switch (alt222)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:756:104: ';'
				{
				DebugLocation(756, 104);
				char_literal757=(IToken)Match(input,SEMI,Follow._SEMI_in_struct_declaration5519); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal757_tree = (object)adaptor.Create(char_literal757);
				adaptor.AddChild(root_0, char_literal757_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(222); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declaration", 218);
			LeaveRule("struct_declaration", 218);
			LeaveRule_struct_declaration();
	        if (state.backtracking > 0) { Memoize(input, 218, struct_declaration_StartIndex); }

	    }
	 	DebugLocation(756, 108);
		} finally { DebugExitRule(GrammarFileName, "struct_declaration"); }
		return retval;

	}
	// $ANTLR end "struct_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_struct_modifiers() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_struct_modifiers() {}

	// $ANTLR start "struct_modifiers"
	// .\\cs.g:757:1: struct_modifiers : ( struct_modifier )+ ;
	[GrammarRule("struct_modifiers")]
	private AstParserRuleReturnScope<object, IToken> struct_modifiers()
	{
		EnterRule_struct_modifiers();
		EnterRule("struct_modifiers", 219);
		TraceIn("struct_modifiers", 219);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int struct_modifiers_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> struct_modifier758 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "struct_modifiers");
		DebugLocation(757, 18);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 219)) { return retval; }

			// .\\cs.g:757:17: ( ( struct_modifier )+ )
			DebugEnterAlt(1);
			// .\\cs.g:758:2: ( struct_modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(758, 2);
			// .\\cs.g:758:2: ( struct_modifier )+
			int cnt223=0;
			try { DebugEnterSubRule(223);
			while (true)
			{
				int alt223=2;
				try { DebugEnterDecision(223, decisionCanBacktrack[223]);
				int LA223_0 = input.LA(1);

				if ((LA223_0==140||LA223_0==150||LA223_0==161||(LA223_0>=163 && LA223_0<=164)||LA223_0==188))
				{
					alt223 = 1;
				}


				} finally { DebugExitDecision(223); }
				switch (alt223)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:758:2: struct_modifier
					{
					DebugLocation(758, 2);
					PushFollow(Follow._struct_modifier_in_struct_modifiers5528);
					struct_modifier758=struct_modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_modifier758.Tree);

					}
					break;

				default:
					if (cnt223 >= 1)
						goto loop223;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee223 = new EarlyExitException( 223, input );
					DebugRecognitionException(eee223);
					throw eee223;
				}
				cnt223++;
			}
			loop223:
				;

			} finally { DebugExitSubRule(223); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_modifiers", 219);
			LeaveRule("struct_modifiers", 219);
			LeaveRule_struct_modifiers();
	        if (state.backtracking > 0) { Memoize(input, 219, struct_modifiers_StartIndex); }

	    }
	 	DebugLocation(758, 18);
		} finally { DebugExitRule(GrammarFileName, "struct_modifiers"); }
		return retval;

	}
	// $ANTLR end "struct_modifiers"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_struct_modifier() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_struct_modifier() {}

	// $ANTLR start "struct_modifier"
	// .\\cs.g:759:1: struct_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' );
	[GrammarRule("struct_modifier")]
	private AstParserRuleReturnScope<object, IToken> struct_modifier()
	{
		EnterRule_struct_modifier();
		EnterRule("struct_modifier", 220);
		TraceIn("struct_modifier", 220);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int struct_modifier_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set759 = default(IToken);

	    object set759_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "struct_modifier");
		DebugLocation(759, 68);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 220)) { return retval; }

			// .\\cs.g:759:16: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' )
			DebugEnterAlt(1);
			// .\\cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(759, 16);

			set759=(IToken)input.LT(1);
			if (input.LA(1)==140||input.LA(1)==150||input.LA(1)==161||(input.LA(1)>=163 && input.LA(1)<=164)||input.LA(1)==188)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set759));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_modifier", 220);
			LeaveRule("struct_modifier", 220);
			LeaveRule_struct_modifier();
	        if (state.backtracking > 0) { Memoize(input, 220, struct_modifier_StartIndex); }

	    }
	 	DebugLocation(760, 68);
		} finally { DebugExitRule(GrammarFileName, "struct_modifier"); }
		return retval;

	}
	// $ANTLR end "struct_modifier"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_struct_interfaces() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_struct_interfaces() {}

	// $ANTLR start "struct_interfaces"
	// .\\cs.g:761:1: struct_interfaces : ':' interface_type_list ;
	[GrammarRule("struct_interfaces")]
	private AstParserRuleReturnScope<object, IToken> struct_interfaces()
	{
		EnterRule_struct_interfaces();
		EnterRule("struct_interfaces", 221);
		TraceIn("struct_interfaces", 221);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int struct_interfaces_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal760 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> interface_type_list761 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal760_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "struct_interfaces");
		DebugLocation(761, 26);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 221)) { return retval; }

			// .\\cs.g:761:18: ( ':' interface_type_list )
			DebugEnterAlt(1);
			// .\\cs.g:762:2: ':' interface_type_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(762, 2);
			char_literal760=(IToken)Match(input,79,Follow._79_in_struct_interfaces5565); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal760_tree = (object)adaptor.Create(char_literal760);
			adaptor.AddChild(root_0, char_literal760_tree);
			}
			DebugLocation(762, 8);
			PushFollow(Follow._interface_type_list_in_struct_interfaces5569);
			interface_type_list761=interface_type_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interface_type_list761.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_interfaces", 221);
			LeaveRule("struct_interfaces", 221);
			LeaveRule_struct_interfaces();
	        if (state.backtracking > 0) { Memoize(input, 221, struct_interfaces_StartIndex); }

	    }
	 	DebugLocation(762, 26);
		} finally { DebugExitRule(GrammarFileName, "struct_interfaces"); }
		return retval;

	}
	// $ANTLR end "struct_interfaces"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_struct_body() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_struct_body() {}

	// $ANTLR start "struct_body"
	// .\\cs.g:763:1: struct_body : '{' ( struct_member_declarations )? '}' ;
	[GrammarRule("struct_body")]
	private AstParserRuleReturnScope<object, IToken> struct_body()
	{
		EnterRule_struct_body();
		EnterRule("struct_body", 222);
		TraceIn("struct_body", 222);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int struct_body_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal762 = default(IToken);
	    IToken char_literal764 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> struct_member_declarations763 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal762_tree = default(object);
	    object char_literal764_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "struct_body");
		DebugLocation(763, 40);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 222)) { return retval; }

			// .\\cs.g:763:12: ( '{' ( struct_member_declarations )? '}' )
			DebugEnterAlt(1);
			// .\\cs.g:764:2: '{' ( struct_member_declarations )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(764, 2);
			char_literal762=(IToken)Match(input,197,Follow._197_in_struct_body5576); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal762_tree = (object)adaptor.Create(char_literal762);
			adaptor.AddChild(root_0, char_literal762_tree);
			}
			DebugLocation(764, 8);
			// .\\cs.g:764:8: ( struct_member_declarations )?
			int alt224=2;
			try { DebugEnterSubRule(224);
			try { DebugEnterDecision(224, decisionCanBacktrack[224]);
			int LA224_0 = input.LA(1);

			if ((LA224_0==ENUM||LA224_0==IDENTIFIER||LA224_0==91||(LA224_0>=95 && LA224_0<=98)||(LA224_0>=100 && LA224_0<=101)||LA224_0==103||(LA224_0>=105 && LA224_0<=106)||LA224_0==109||(LA224_0>=111 && LA224_0<=112)||LA224_0==114||(LA224_0>=116 && LA224_0<=117)||(LA224_0>=119 && LA224_0<=120)||(LA224_0>=122 && LA224_0<=126)||LA224_0==129||LA224_0==132||(LA224_0>=135 && LA224_0<=136)||(LA224_0>=138 && LA224_0<=141)||(LA224_0>=143 && LA224_0<=144)||(LA224_0>=146 && LA224_0<=148)||(LA224_0>=150 && LA224_0<=152)||LA224_0==154||(LA224_0>=156 && LA224_0<=157)||(LA224_0>=159 && LA224_0<=165)||LA224_0==167||(LA224_0>=169 && LA224_0<=173)||(LA224_0>=176 && LA224_0<=178)||LA224_0==183||(LA224_0>=185 && LA224_0<=186)||(LA224_0>=188 && LA224_0<=194)||LA224_0==196))
			{
				alt224 = 1;
			}
			} finally { DebugExitDecision(224); }
			switch (alt224)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:764:8: struct_member_declarations
				{
				DebugLocation(764, 8);
				PushFollow(Follow._struct_member_declarations_in_struct_body5580);
				struct_member_declarations763=struct_member_declarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_member_declarations763.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(224); }

			DebugLocation(764, 38);
			char_literal764=(IToken)Match(input,201,Follow._201_in_struct_body5585); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal764_tree = (object)adaptor.Create(char_literal764);
			adaptor.AddChild(root_0, char_literal764_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_body", 222);
			LeaveRule("struct_body", 222);
			LeaveRule_struct_body();
	        if (state.backtracking > 0) { Memoize(input, 222, struct_body_StartIndex); }

	    }
	 	DebugLocation(764, 40);
		} finally { DebugExitRule(GrammarFileName, "struct_body"); }
		return retval;

	}
	// $ANTLR end "struct_body"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_struct_member_declarations() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_struct_member_declarations() {}

	// $ANTLR start "struct_member_declarations"
	// .\\cs.g:765:1: struct_member_declarations : ( struct_member_declaration )+ ;
	[GrammarRule("struct_member_declarations")]
	private AstParserRuleReturnScope<object, IToken> struct_member_declarations()
	{
		EnterRule_struct_member_declarations();
		EnterRule("struct_member_declarations", 223);
		TraceIn("struct_member_declarations", 223);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int struct_member_declarations_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> struct_member_declaration765 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "struct_member_declarations");
		DebugLocation(765, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 223)) { return retval; }

			// .\\cs.g:765:27: ( ( struct_member_declaration )+ )
			DebugEnterAlt(1);
			// .\\cs.g:766:2: ( struct_member_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(766, 2);
			// .\\cs.g:766:2: ( struct_member_declaration )+
			int cnt225=0;
			try { DebugEnterSubRule(225);
			while (true)
			{
				int alt225=2;
				try { DebugEnterDecision(225, decisionCanBacktrack[225]);
				int LA225_0 = input.LA(1);

				if ((LA225_0==ENUM||LA225_0==IDENTIFIER||LA225_0==91||(LA225_0>=95 && LA225_0<=98)||(LA225_0>=100 && LA225_0<=101)||LA225_0==103||(LA225_0>=105 && LA225_0<=106)||LA225_0==109||(LA225_0>=111 && LA225_0<=112)||LA225_0==114||(LA225_0>=116 && LA225_0<=117)||(LA225_0>=119 && LA225_0<=120)||(LA225_0>=122 && LA225_0<=126)||LA225_0==129||LA225_0==132||(LA225_0>=135 && LA225_0<=136)||(LA225_0>=138 && LA225_0<=141)||(LA225_0>=143 && LA225_0<=144)||(LA225_0>=146 && LA225_0<=148)||(LA225_0>=150 && LA225_0<=152)||LA225_0==154||(LA225_0>=156 && LA225_0<=157)||(LA225_0>=159 && LA225_0<=165)||LA225_0==167||(LA225_0>=169 && LA225_0<=173)||(LA225_0>=176 && LA225_0<=178)||LA225_0==183||(LA225_0>=185 && LA225_0<=186)||(LA225_0>=188 && LA225_0<=194)||LA225_0==196))
				{
					alt225 = 1;
				}


				} finally { DebugExitDecision(225); }
				switch (alt225)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:766:2: struct_member_declaration
					{
					DebugLocation(766, 2);
					PushFollow(Follow._struct_member_declaration_in_struct_member_declarations5592);
					struct_member_declaration765=struct_member_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_member_declaration765.Tree);

					}
					break;

				default:
					if (cnt225 >= 1)
						goto loop225;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee225 = new EarlyExitException( 225, input );
					DebugRecognitionException(eee225);
					throw eee225;
				}
				cnt225++;
			}
			loop225:
				;

			} finally { DebugExitSubRule(225); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_member_declarations", 223);
			LeaveRule("struct_member_declarations", 223);
			LeaveRule_struct_member_declarations();
	        if (state.backtracking > 0) { Memoize(input, 223, struct_member_declarations_StartIndex); }

	    }
	 	DebugLocation(766, 28);
		} finally { DebugExitRule(GrammarFileName, "struct_member_declarations"); }
		return retval;

	}
	// $ANTLR end "struct_member_declarations"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_struct_member_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_struct_member_declaration() {}

	// $ANTLR start "struct_member_declaration"
	// .\\cs.g:767:1: struct_member_declaration : ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration ) ;
	[GrammarRule("struct_member_declaration")]
	private AstParserRuleReturnScope<object, IToken> struct_member_declaration()
	{
		EnterRule_struct_member_declaration();
		EnterRule("struct_member_declaration", 224);
		TraceIn("struct_member_declaration", 224);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int struct_member_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal767 = default(IToken);
	    IToken char_literal770 = default(IToken);
	    IToken string_literal772 = default(IToken);
	    IToken string_literal779 = default(IToken);
	    IToken char_literal785 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> m = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> attributes766 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type768 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> constant_declarators769 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> event_declaration771 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> method_declaration773 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> interface_declaration774 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> class_declaration775 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> struct_declaration776 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> interface_declaration777 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> class_declaration778 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> method_declaration780 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type781 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> method_declaration782 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> property_declaration783 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_name784 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> indexer_declaration786 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> indexer_declaration787 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> field_declaration788 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> operator_declaration789 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> struct_declaration790 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> enum_declaration791 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> delegate_declaration792 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> conversion_operator_declaration793 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> constructor_declaration794 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal767_tree = default(object);
	    object char_literal770_tree = default(object);
	    object string_literal772_tree = default(object);
	    object string_literal779_tree = default(object);
	    object char_literal785_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "struct_member_declaration");
		DebugLocation(767, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 224)) { return retval; }

			// .\\cs.g:767:26: ( ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration ) )
			DebugEnterAlt(1);
			// .\\cs.g:768:2: ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(768, 2);
			// .\\cs.g:768:2: ( attributes )?
			int alt226=2;
			try { DebugEnterSubRule(226);
			try { DebugEnterDecision(226, decisionCanBacktrack[226]);
			int LA226_0 = input.LA(1);

			if ((LA226_0==91))
			{
				alt226 = 1;
			}
			} finally { DebugExitDecision(226); }
			switch (alt226)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:768:2: attributes
				{
				DebugLocation(768, 2);
				PushFollow(Follow._attributes_in_struct_member_declaration5601);
				attributes766=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes766.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(226); }

			DebugLocation(768, 17);
			// .\\cs.g:768:17: (m= modifiers )?
			int alt227=2;
			try { DebugEnterSubRule(227);
			try { DebugEnterDecision(227, decisionCanBacktrack[227]);
			int LA227_0 = input.LA(1);

			if ((LA227_0==96||LA227_0==125||LA227_0==140||LA227_0==150||LA227_0==156||LA227_0==161||(LA227_0>=163 && LA227_0<=165)||LA227_0==170||LA227_0==176||LA227_0==188||LA227_0==191||LA227_0==193))
			{
				alt227 = 1;
			}
			} finally { DebugExitDecision(227); }
			switch (alt227)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:768:17: m= modifiers
				{
				DebugLocation(768, 17);
				PushFollow(Follow._modifiers_in_struct_member_declaration5608);
				m=modifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, m.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(227); }

			DebugLocation(769, 2);
			// .\\cs.g:769:2: ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration )
			int alt230=12;
			try { DebugEnterSubRule(230);
			try { DebugEnterDecision(230, decisionCanBacktrack[230]);
			switch (input.LA(1))
			{
			case 112:
				{
				alt230 = 1;
				}
				break;
			case 123:
				{
				alt230 = 2;
				}
				break;
			case 159:
				{
				alt230 = 3;
				}
				break;
			case 139:
				{
				alt230 = 4;
				}
				break;
			case 111:
				{
				alt230 = 5;
				}
				break;
			case 192:
				{
				int LA230_6 = input.LA(2);

				if ((LA230_6==Character_literal||LA230_6==FALSE||(LA230_6>=Hex_number && LA230_6<=IDENTIFIER)||(LA230_6>=NULL && LA230_6<=NUMBER)||LA230_6==Real_literal||LA230_6==STRINGLITERAL||LA230_6==TRUE||LA230_6==Verbatim_string_literal||LA230_6==95||(LA230_6>=97 && LA230_6<=98)||(LA230_6>=100 && LA230_6<=101)||LA230_6==103||(LA230_6>=105 && LA230_6<=106)||LA230_6==109||LA230_6==114||LA230_6==117||(LA230_6>=119 && LA230_6<=120)||LA230_6==122||LA230_6==126||LA230_6==129||LA230_6==132||LA230_6==135||LA230_6==138||LA230_6==141||(LA230_6>=143 && LA230_6<=144)||(LA230_6>=146 && LA230_6<=148)||(LA230_6>=151 && LA230_6<=152)||LA230_6==154||LA230_6==157||LA230_6==160||LA230_6==162||LA230_6==167||LA230_6==169||(LA230_6>=171 && LA230_6<=173)||LA230_6==177||LA230_6==183||(LA230_6>=185 && LA230_6<=186)||(LA230_6>=189 && LA230_6<=190)||LA230_6==194||LA230_6==196))
				{
					alt230 = 6;
				}
				else if ((LA230_6==69))
				{
					alt230 = 7;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 230, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				alt230 = 7;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA230_8 = input.LA(2);

				if ((LA230_8==Character_literal||LA230_8==DOT||LA230_8==FALSE||(LA230_8>=Hex_number && LA230_8<=IDENTIFIER)||(LA230_8>=NULL && LA230_8<=NUMBER)||LA230_8==Real_literal||LA230_8==STRINGLITERAL||LA230_8==TRUE||LA230_8==Verbatim_string_literal||LA230_8==69||(LA230_8>=80 && LA230_8<=81)||LA230_8==89||LA230_8==91||LA230_8==95||(LA230_8>=97 && LA230_8<=98)||(LA230_8>=100 && LA230_8<=101)||LA230_8==103||(LA230_8>=105 && LA230_8<=106)||LA230_8==109||LA230_8==114||LA230_8==117||(LA230_8>=119 && LA230_8<=120)||LA230_8==122||LA230_8==126||LA230_8==129||LA230_8==132||LA230_8==135||LA230_8==138||LA230_8==141||(LA230_8>=143 && LA230_8<=144)||(LA230_8>=146 && LA230_8<=148)||(LA230_8>=151 && LA230_8<=154)||LA230_8==157||LA230_8==160||LA230_8==162||LA230_8==167||LA230_8==169||(LA230_8>=171 && LA230_8<=173)||LA230_8==177||LA230_8==180||LA230_8==183||(LA230_8>=185 && LA230_8<=186)||(LA230_8>=189 && LA230_8<=190)||LA230_8==194||LA230_8==196))
				{
					alt230 = 7;
				}
				else if ((LA230_8==68))
				{
					alt230 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 230, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 178:
				{
				alt230 = 8;
				}
				break;
			case ENUM:
				{
				alt230 = 9;
				}
				break;
			case 116:
				{
				alt230 = 10;
				}
				break;
			case 124:
			case 136:
				{
				alt230 = 11;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 230, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(230); }
			switch (alt230)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:769:4: 'const' type constant_declarators ';'
				{
				DebugLocation(769, 4);
				string_literal767=(IToken)Match(input,112,Follow._112_in_struct_member_declaration5614); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal767_tree = (object)adaptor.Create(string_literal767);
				adaptor.AddChild(root_0, string_literal767_tree);
				}
				DebugLocation(769, 14);
				PushFollow(Follow._type_in_struct_member_declaration5618);
				type768=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type768.Tree);
				DebugLocation(769, 21);
				PushFollow(Follow._constant_declarators_in_struct_member_declaration5622);
				constant_declarators769=constant_declarators();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declarators769.Tree);
				DebugLocation(769, 44);
				char_literal770=(IToken)Match(input,SEMI,Follow._SEMI_in_struct_member_declaration5626); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal770_tree = (object)adaptor.Create(char_literal770);
				adaptor.AddChild(root_0, char_literal770_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:770:4: event_declaration
				{
				DebugLocation(770, 4);
				PushFollow(Follow._event_declaration_in_struct_member_declaration5631);
				event_declaration771=event_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, event_declaration771.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:771:4: 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration )
				{
				DebugLocation(771, 4);
				string_literal772=(IToken)Match(input,159,Follow._159_in_struct_member_declaration5638); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal772_tree = (object)adaptor.Create(string_literal772);
				adaptor.AddChild(root_0, string_literal772_tree);
				}
				DebugLocation(771, 14);
				// .\\cs.g:771:14: ( method_declaration | interface_declaration | class_declaration | struct_declaration )
				int alt228=4;
				try { DebugEnterSubRule(228);
				try { DebugEnterDecision(228, decisionCanBacktrack[228]);
				switch (input.LA(1))
				{
				case Character_literal:
				case FALSE:
				case Hex_number:
				case IDENTIFIER:
				case NULL:
				case NUMBER:
				case Real_literal:
				case STRINGLITERAL:
				case TRUE:
				case Verbatim_string_literal:
				case 95:
				case 97:
				case 98:
				case 100:
				case 101:
				case 103:
				case 105:
				case 106:
				case 109:
				case 114:
				case 117:
				case 119:
				case 120:
				case 122:
				case 126:
				case 129:
				case 132:
				case 135:
				case 138:
				case 141:
				case 143:
				case 144:
				case 146:
				case 147:
				case 148:
				case 151:
				case 152:
				case 154:
				case 157:
				case 160:
				case 162:
				case 167:
				case 169:
				case 171:
				case 172:
				case 173:
				case 177:
				case 183:
				case 185:
				case 186:
				case 189:
				case 190:
				case 194:
				case 196:
					{
					alt228 = 1;
					}
					break;
				case 139:
					{
					alt228 = 2;
					}
					break;
				case 111:
					{
					alt228 = 3;
					}
					break;
				case 178:
					{
					alt228 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 228, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(228); }
				switch (alt228)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:771:15: method_declaration
					{
					DebugLocation(771, 15);
					PushFollow(Follow._method_declaration_in_struct_member_declaration5641);
					method_declaration773=method_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration773.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:772:9: interface_declaration
					{
					DebugLocation(772, 9);
					PushFollow(Follow._interface_declaration_in_struct_member_declaration5652);
					interface_declaration774=interface_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_declaration774.Tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// .\\cs.g:773:9: class_declaration
					{
					DebugLocation(773, 9);
					PushFollow(Follow._class_declaration_in_struct_member_declaration5663);
					class_declaration775=class_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, class_declaration775.Tree);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// .\\cs.g:774:9: struct_declaration
					{
					DebugLocation(774, 9);
					PushFollow(Follow._struct_declaration_in_struct_member_declaration5674);
					struct_declaration776=struct_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration776.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(228); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// .\\cs.g:776:4: interface_declaration
				{
				DebugLocation(776, 4);
				PushFollow(Follow._interface_declaration_in_struct_member_declaration5681);
				interface_declaration777=interface_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_declaration777.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// .\\cs.g:777:4: class_declaration
				{
				DebugLocation(777, 4);
				PushFollow(Follow._class_declaration_in_struct_member_declaration5687);
				class_declaration778=class_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_declaration778.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// .\\cs.g:778:4: 'void' method_declaration
				{
				DebugLocation(778, 4);
				string_literal779=(IToken)Match(input,192,Follow._192_in_struct_member_declaration5694); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal779_tree = (object)adaptor.Create(string_literal779);
				adaptor.AddChild(root_0, string_literal779_tree);
				}
				DebugLocation(778, 13);
				PushFollow(Follow._method_declaration_in_struct_member_declaration5698);
				method_declaration780=method_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration780.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// .\\cs.g:779:4: type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
				{
				DebugLocation(779, 4);
				PushFollow(Follow._type_in_struct_member_declaration5703);
				type781=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type781.Tree);
				DebugLocation(779, 9);
				// .\\cs.g:779:9: ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
				int alt229=6;
				try { DebugEnterSubRule(229);
				try { DebugEnterDecision(229, decisionCanBacktrack[229]);
				switch (input.LA(1))
				{
				case 103:
				case 106:
				case 109:
				case 114:
				case 119:
				case 129:
				case 138:
				case 146:
				case 151:
				case 169:
				case 173:
				case 177:
				case 185:
				case 186:
				case 189:
					{
					int LA229_1 = input.LA(2);

					if ((EvaluatePredicate(synpred28_cs_fragment)))
					{
						alt229 = 1;
					}
					else if ((EvaluatePredicate(synpred29_cs_fragment)))
					{
						alt229 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 229, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
				case 95:
				case 97:
				case 98:
				case 100:
				case 101:
				case 105:
				case 117:
				case 120:
				case 122:
				case 126:
				case 132:
				case 135:
				case 141:
				case 143:
				case 144:
				case 147:
				case 148:
				case 152:
				case 154:
				case 157:
				case 160:
				case 162:
				case 167:
				case 171:
				case 172:
				case 183:
				case 190:
				case 194:
				case 196:
					{
					int LA229_2 = input.LA(2);

					if ((EvaluatePredicate(synpred28_cs_fragment)))
					{
						alt229 = 1;
					}
					else if ((EvaluatePredicate(synpred29_cs_fragment)))
					{
						alt229 = 2;
					}
					else if ((EvaluatePredicate(synpred30_cs_fragment)))
					{
						alt229 = 3;
					}
					else if ((true))
					{
						alt229 = 5;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 229, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Character_literal:
				case FALSE:
				case Hex_number:
				case NULL:
				case NUMBER:
				case Real_literal:
				case STRINGLITERAL:
				case TRUE:
				case Verbatim_string_literal:
					{
					int LA229_3 = input.LA(2);

					if ((EvaluatePredicate(synpred28_cs_fragment)))
					{
						alt229 = 1;
					}
					else if ((EvaluatePredicate(synpred29_cs_fragment)))
					{
						alt229 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 229, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 180:
					{
					alt229 = 4;
					}
					break;
				case 153:
					{
					alt229 = 6;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 229, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(229); }
				switch (alt229)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:779:11: ( member_name '(' )=> method_declaration
					{
					DebugLocation(779, 34);
					PushFollow(Follow._method_declaration_in_struct_member_declaration5717);
					method_declaration782=method_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration782.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:780:8: ( member_name '{' )=> property_declaration
					{
					DebugLocation(780, 31);
					PushFollow(Follow._property_declaration_in_struct_member_declaration5736);
					property_declaration783=property_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, property_declaration783.Tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// .\\cs.g:781:8: ( member_name '.' 'this' )=> type_name '.' indexer_declaration
					{
					DebugLocation(781, 40);
					PushFollow(Follow._type_name_in_struct_member_declaration5759);
					type_name784=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_name784.Tree);
					DebugLocation(781, 50);
					char_literal785=(IToken)Match(input,DOT,Follow._DOT_in_struct_member_declaration5761); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal785_tree = (object)adaptor.Create(char_literal785);
					adaptor.AddChild(root_0, char_literal785_tree);
					}
					DebugLocation(781, 54);
					PushFollow(Follow._indexer_declaration_in_struct_member_declaration5763);
					indexer_declaration786=indexer_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, indexer_declaration786.Tree);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// .\\cs.g:782:8: indexer_declaration
					{
					DebugLocation(782, 8);
					PushFollow(Follow._indexer_declaration_in_struct_member_declaration5772);
					indexer_declaration787=indexer_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, indexer_declaration787.Tree);

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// .\\cs.g:783:11: field_declaration
					{
					DebugLocation(783, 11);
					PushFollow(Follow._field_declaration_in_struct_member_declaration5785);
					field_declaration788=field_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, field_declaration788.Tree);

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// .\\cs.g:784:11: operator_declaration
					{
					DebugLocation(784, 11);
					PushFollow(Follow._operator_declaration_in_struct_member_declaration5803);
					operator_declaration789=operator_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, operator_declaration789.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(229); }


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// .\\cs.g:788:4: struct_declaration
				{
				DebugLocation(788, 4);
				PushFollow(Follow._struct_declaration_in_struct_member_declaration5821);
				struct_declaration790=struct_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration790.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// .\\cs.g:789:4: enum_declaration
				{
				DebugLocation(789, 4);
				PushFollow(Follow._enum_declaration_in_struct_member_declaration5827);
				enum_declaration791=enum_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_declaration791.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// .\\cs.g:790:4: delegate_declaration
				{
				DebugLocation(790, 4);
				PushFollow(Follow._delegate_declaration_in_struct_member_declaration5834);
				delegate_declaration792=delegate_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, delegate_declaration792.Tree);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// .\\cs.g:791:4: conversion_operator_declaration
				{
				DebugLocation(791, 4);
				PushFollow(Follow._conversion_operator_declaration_in_struct_member_declaration5840);
				conversion_operator_declaration793=conversion_operator_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conversion_operator_declaration793.Tree);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// .\\cs.g:792:4: constructor_declaration
				{
				DebugLocation(792, 4);
				PushFollow(Follow._constructor_declaration_in_struct_member_declaration5845);
				constructor_declaration794=constructor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_declaration794.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(230); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_member_declaration", 224);
			LeaveRule("struct_member_declaration", 224);
			LeaveRule_struct_member_declaration();
	        if (state.backtracking > 0) { Memoize(input, 224, struct_member_declaration_StartIndex); }

	    }
	 	DebugLocation(794, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_member_declaration"); }
		return retval;

	}
	// $ANTLR end "struct_member_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_indexer_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_indexer_declaration() {}

	// $ANTLR start "indexer_declaration"
	// .\\cs.g:798:1: indexer_declaration : indexer_declarator '{' accessor_declarations '}' ;
	[GrammarRule("indexer_declaration")]
	private AstParserRuleReturnScope<object, IToken> indexer_declaration()
	{
		EnterRule_indexer_declaration();
		EnterRule("indexer_declaration", 225);
		TraceIn("indexer_declaration", 225);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int indexer_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal796 = default(IToken);
	    IToken char_literal798 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> indexer_declarator795 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> accessor_declarations797 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal796_tree = default(object);
	    object char_literal798_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "indexer_declaration");
		DebugLocation(798, 56);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 225)) { return retval; }

			// .\\cs.g:798:20: ( indexer_declarator '{' accessor_declarations '}' )
			DebugEnterAlt(1);
			// .\\cs.g:799:2: indexer_declarator '{' accessor_declarations '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(799, 2);
			PushFollow(Follow._indexer_declarator_in_indexer_declaration5862);
			indexer_declarator795=indexer_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, indexer_declarator795.Tree);
			DebugLocation(799, 23);
			char_literal796=(IToken)Match(input,197,Follow._197_in_indexer_declaration5866); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal796_tree = (object)adaptor.Create(char_literal796);
			adaptor.AddChild(root_0, char_literal796_tree);
			}
			DebugLocation(799, 29);
			PushFollow(Follow._accessor_declarations_in_indexer_declaration5870);
			accessor_declarations797=accessor_declarations();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, accessor_declarations797.Tree);
			DebugLocation(799, 53);
			char_literal798=(IToken)Match(input,201,Follow._201_in_indexer_declaration5874); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal798_tree = (object)adaptor.Create(char_literal798);
			adaptor.AddChild(root_0, char_literal798_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("indexer_declaration", 225);
			LeaveRule("indexer_declaration", 225);
			LeaveRule_indexer_declaration();
	        if (state.backtracking > 0) { Memoize(input, 225, indexer_declaration_StartIndex); }

	    }
	 	DebugLocation(799, 56);
		} finally { DebugExitRule(GrammarFileName, "indexer_declaration"); }
		return retval;

	}
	// $ANTLR end "indexer_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_indexer_declarator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_indexer_declarator() {}

	// $ANTLR start "indexer_declarator"
	// .\\cs.g:800:1: indexer_declarator : 'this' '[' formal_parameter_list ']' ;
	[GrammarRule("indexer_declarator")]
	private AstParserRuleReturnScope<object, IToken> indexer_declarator()
	{
		EnterRule_indexer_declarator();
		EnterRule("indexer_declarator", 226);
		TraceIn("indexer_declarator", 226);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int indexer_declarator_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal799 = default(IToken);
	    IToken char_literal800 = default(IToken);
	    IToken char_literal802 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> formal_parameter_list801 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal799_tree = default(object);
	    object char_literal800_tree = default(object);
	    object char_literal802_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "indexer_declarator");
		DebugLocation(800, 44);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 226)) { return retval; }

			// .\\cs.g:800:19: ( 'this' '[' formal_parameter_list ']' )
			DebugEnterAlt(1);
			// .\\cs.g:802:2: 'this' '[' formal_parameter_list ']'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(802, 2);
			string_literal799=(IToken)Match(input,180,Follow._180_in_indexer_declarator5884); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal799_tree = (object)adaptor.Create(string_literal799);
			adaptor.AddChild(root_0, string_literal799_tree);
			}
			DebugLocation(802, 11);
			char_literal800=(IToken)Match(input,91,Follow._91_in_indexer_declarator5888); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal800_tree = (object)adaptor.Create(char_literal800);
			adaptor.AddChild(root_0, char_literal800_tree);
			}
			DebugLocation(802, 17);
			PushFollow(Follow._formal_parameter_list_in_indexer_declarator5892);
			formal_parameter_list801=formal_parameter_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter_list801.Tree);
			DebugLocation(802, 41);
			char_literal802=(IToken)Match(input,92,Follow._92_in_indexer_declarator5896); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal802_tree = (object)adaptor.Create(char_literal802);
			adaptor.AddChild(root_0, char_literal802_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("indexer_declarator", 226);
			LeaveRule("indexer_declarator", 226);
			LeaveRule_indexer_declarator();
	        if (state.backtracking > 0) { Memoize(input, 226, indexer_declarator_StartIndex); }

	    }
	 	DebugLocation(802, 44);
		} finally { DebugExitRule(GrammarFileName, "indexer_declarator"); }
		return retval;

	}
	// $ANTLR end "indexer_declarator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_operator_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_operator_declaration() {}

	// $ANTLR start "operator_declaration"
	// .\\cs.g:805:1: operator_declaration : operator_declarator operator_body ;
	[GrammarRule("operator_declaration")]
	private AstParserRuleReturnScope<object, IToken> operator_declaration()
	{
		EnterRule_operator_declaration();
		EnterRule("operator_declaration", 227);
		TraceIn("operator_declaration", 227);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int operator_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> operator_declarator803 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> operator_body804 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "operator_declaration");
		DebugLocation(805, 37);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 227)) { return retval; }

			// .\\cs.g:805:21: ( operator_declarator operator_body )
			DebugEnterAlt(1);
			// .\\cs.g:806:2: operator_declarator operator_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(806, 2);
			PushFollow(Follow._operator_declarator_in_operator_declaration5907);
			operator_declarator803=operator_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, operator_declarator803.Tree);
			DebugLocation(806, 24);
			PushFollow(Follow._operator_body_in_operator_declaration5911);
			operator_body804=operator_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, operator_body804.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator_declaration", 227);
			LeaveRule("operator_declaration", 227);
			LeaveRule_operator_declaration();
	        if (state.backtracking > 0) { Memoize(input, 227, operator_declaration_StartIndex); }

	    }
	 	DebugLocation(806, 37);
		} finally { DebugExitRule(GrammarFileName, "operator_declaration"); }
		return retval;

	}
	// $ANTLR end "operator_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_operator_declarator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_operator_declarator() {}

	// $ANTLR start "operator_declarator"
	// .\\cs.g:807:1: operator_declarator : 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator ) ;
	[GrammarRule("operator_declarator")]
	private AstParserRuleReturnScope<object, IToken> operator_declarator()
	{
		EnterRule_operator_declarator();
		EnterRule("operator_declarator", 228);
		TraceIn("operator_declarator", 228);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int operator_declarator_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal805 = default(IToken);
	    IToken set806 = default(IToken);
	    IToken char_literal807 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type808 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier809 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> binary_operator_declarator810 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> unary_operator_declarator811 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> overloadable_unary_operator812 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> unary_operator_declarator813 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> overloadable_binary_operator814 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> binary_operator_declarator815 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal805_tree = default(object);
	    object set806_tree = default(object);
	    object char_literal807_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "operator_declarator");
		DebugLocation(807, 63);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 228)) { return retval; }

			// .\\cs.g:807:20: ( 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator ) )
			DebugEnterAlt(1);
			// .\\cs.g:808:2: 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(808, 2);
			string_literal805=(IToken)Match(input,153,Follow._153_in_operator_declarator5919); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal805_tree = (object)adaptor.Create(string_literal805);
			adaptor.AddChild(root_0, string_literal805_tree);
			}
			DebugLocation(809, 3);
			// .\\cs.g:809:3: ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator )
			int alt232=3;
			try { DebugEnterSubRule(232);
			try { DebugEnterDecision(232, decisionCanBacktrack[232]);
			switch (input.LA(1))
			{
			case MINUS:
			case 71:
				{
				alt232 = 1;
				}
				break;
			case FALSE:
			case TRUE:
			case 61:
			case 72:
			case 75:
			case 202:
				{
				alt232 = 2;
				}
				break;
			case GT:
			case 62:
			case 63:
			case 66:
			case 69:
			case 77:
			case 81:
			case 82:
			case 84:
			case 86:
			case 88:
			case 93:
			case 198:
				{
				alt232 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 232, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(232); }
			switch (alt232)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:809:4: ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator )
				{
				DebugLocation(809, 4);

				set806=(IToken)input.LT(1);
				if (input.LA(1)==MINUS||input.LA(1)==71)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set806));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(809, 18);
				char_literal807=(IToken)Match(input,68,Follow._68_in_operator_declarator5937); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal807_tree = (object)adaptor.Create(char_literal807);
				adaptor.AddChild(root_0, char_literal807_tree);
				}
				DebugLocation(809, 24);
				PushFollow(Follow._type_in_operator_declarator5941);
				type808=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type808.Tree);
				DebugLocation(809, 31);
				PushFollow(Follow._identifier_in_operator_declarator5945);
				identifier809=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier809.Tree);
				DebugLocation(809, 42);
				// .\\cs.g:809:42: ( binary_operator_declarator | unary_operator_declarator )
				int alt231=2;
				try { DebugEnterSubRule(231);
				try { DebugEnterDecision(231, decisionCanBacktrack[231]);
				int LA231_0 = input.LA(1);

				if ((LA231_0==74))
				{
					alt231 = 1;
				}
				else if ((LA231_0==RPAREN))
				{
					alt231 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 231, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(231); }
				switch (alt231)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:809:43: binary_operator_declarator
					{
					DebugLocation(809, 43);
					PushFollow(Follow._binary_operator_declarator_in_operator_declarator5948);
					binary_operator_declarator810=binary_operator_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, binary_operator_declarator810.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:809:72: unary_operator_declarator
					{
					DebugLocation(809, 72);
					PushFollow(Follow._unary_operator_declarator_in_operator_declarator5952);
					unary_operator_declarator811=unary_operator_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unary_operator_declarator811.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(231); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:810:5: overloadable_unary_operator unary_operator_declarator
				{
				DebugLocation(810, 5);
				PushFollow(Follow._overloadable_unary_operator_in_operator_declarator5959);
				overloadable_unary_operator812=overloadable_unary_operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, overloadable_unary_operator812.Tree);
				DebugLocation(810, 35);
				PushFollow(Follow._unary_operator_declarator_in_operator_declarator5963);
				unary_operator_declarator813=unary_operator_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_operator_declarator813.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:811:5: overloadable_binary_operator binary_operator_declarator
				{
				DebugLocation(811, 5);
				PushFollow(Follow._overloadable_binary_operator_in_operator_declarator5969);
				overloadable_binary_operator814=overloadable_binary_operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, overloadable_binary_operator814.Tree);
				DebugLocation(811, 36);
				PushFollow(Follow._binary_operator_declarator_in_operator_declarator5973);
				binary_operator_declarator815=binary_operator_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, binary_operator_declarator815.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(232); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator_declarator", 228);
			LeaveRule("operator_declarator", 228);
			LeaveRule_operator_declarator();
	        if (state.backtracking > 0) { Memoize(input, 228, operator_declarator_StartIndex); }

	    }
	 	DebugLocation(811, 63);
		} finally { DebugExitRule(GrammarFileName, "operator_declarator"); }
		return retval;

	}
	// $ANTLR end "operator_declarator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_unary_operator_declarator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_unary_operator_declarator() {}

	// $ANTLR start "unary_operator_declarator"
	// .\\cs.g:812:1: unary_operator_declarator : ')' ;
	[GrammarRule("unary_operator_declarator")]
	private AstParserRuleReturnScope<object, IToken> unary_operator_declarator()
	{
		EnterRule_unary_operator_declarator();
		EnterRule("unary_operator_declarator", 229);
		TraceIn("unary_operator_declarator", 229);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int unary_operator_declarator_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal816 = default(IToken);

	    object char_literal816_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "unary_operator_declarator");
		DebugLocation(812, 8);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 229)) { return retval; }

			// .\\cs.g:812:26: ( ')' )
			DebugEnterAlt(1);
			// .\\cs.g:813:5: ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(813, 5);
			char_literal816=(IToken)Match(input,RPAREN,Follow._RPAREN_in_unary_operator_declarator5985); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal816_tree = (object)adaptor.Create(char_literal816);
			adaptor.AddChild(root_0, char_literal816_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_operator_declarator", 229);
			LeaveRule("unary_operator_declarator", 229);
			LeaveRule_unary_operator_declarator();
	        if (state.backtracking > 0) { Memoize(input, 229, unary_operator_declarator_StartIndex); }

	    }
	 	DebugLocation(813, 8);
		} finally { DebugExitRule(GrammarFileName, "unary_operator_declarator"); }
		return retval;

	}
	// $ANTLR end "unary_operator_declarator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_overloadable_unary_operator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_overloadable_unary_operator() {}

	// $ANTLR start "overloadable_unary_operator"
	// .\\cs.g:814:1: overloadable_unary_operator : ( '!' | '~' | '++' | '--' | 'true' | 'false' );
	[GrammarRule("overloadable_unary_operator")]
	private AstParserRuleReturnScope<object, IToken> overloadable_unary_operator()
	{
		EnterRule_overloadable_unary_operator();
		EnterRule("overloadable_unary_operator", 230);
		TraceIn("overloadable_unary_operator", 230);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int overloadable_unary_operator_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set817 = default(IToken);

	    object set817_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "overloadable_unary_operator");
		DebugLocation(814, 67);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 230)) { return retval; }

			// .\\cs.g:814:28: ( '!' | '~' | '++' | '--' | 'true' | 'false' )
			DebugEnterAlt(1);
			// .\\cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(814, 28);

			set817=(IToken)input.LT(1);
			if (input.LA(1)==FALSE||input.LA(1)==TRUE||input.LA(1)==61||input.LA(1)==72||input.LA(1)==75||input.LA(1)==202)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set817));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("overloadable_unary_operator", 230);
			LeaveRule("overloadable_unary_operator", 230);
			LeaveRule_overloadable_unary_operator();
	        if (state.backtracking > 0) { Memoize(input, 230, overloadable_unary_operator_StartIndex); }

	    }
	 	DebugLocation(815, 67);
		} finally { DebugExitRule(GrammarFileName, "overloadable_unary_operator"); }
		return retval;

	}
	// $ANTLR end "overloadable_unary_operator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_binary_operator_declarator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_binary_operator_declarator() {}

	// $ANTLR start "binary_operator_declarator"
	// .\\cs.g:816:1: binary_operator_declarator : ',' type identifier ')' ;
	[GrammarRule("binary_operator_declarator")]
	private AstParserRuleReturnScope<object, IToken> binary_operator_declarator()
	{
		EnterRule_binary_operator_declarator();
		EnterRule("binary_operator_declarator", 231);
		TraceIn("binary_operator_declarator", 231);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int binary_operator_declarator_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal818 = default(IToken);
	    IToken char_literal821 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type819 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier820 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal818_tree = default(object);
	    object char_literal821_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "binary_operator_declarator");
		DebugLocation(816, 31);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 231)) { return retval; }

			// .\\cs.g:816:27: ( ',' type identifier ')' )
			DebugEnterAlt(1);
			// .\\cs.g:817:2: ',' type identifier ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(817, 2);
			char_literal818=(IToken)Match(input,74,Follow._74_in_binary_operator_declarator6028); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal818_tree = (object)adaptor.Create(char_literal818);
			adaptor.AddChild(root_0, char_literal818_tree);
			}
			DebugLocation(817, 8);
			PushFollow(Follow._type_in_binary_operator_declarator6032);
			type819=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type819.Tree);
			DebugLocation(817, 15);
			PushFollow(Follow._identifier_in_binary_operator_declarator6036);
			identifier820=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier820.Tree);
			DebugLocation(817, 28);
			char_literal821=(IToken)Match(input,RPAREN,Follow._RPAREN_in_binary_operator_declarator6040); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal821_tree = (object)adaptor.Create(char_literal821);
			adaptor.AddChild(root_0, char_literal821_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("binary_operator_declarator", 231);
			LeaveRule("binary_operator_declarator", 231);
			LeaveRule_binary_operator_declarator();
	        if (state.backtracking > 0) { Memoize(input, 231, binary_operator_declarator_StartIndex); }

	    }
	 	DebugLocation(817, 31);
		} finally { DebugExitRule(GrammarFileName, "binary_operator_declarator"); }
		return retval;

	}
	// $ANTLR end "binary_operator_declarator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_overloadable_binary_operator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_overloadable_binary_operator() {}

	// $ANTLR start "overloadable_binary_operator"
	// .\\cs.g:819:1: overloadable_binary_operator : ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' );
	[GrammarRule("overloadable_binary_operator")]
	private AstParserRuleReturnScope<object, IToken> overloadable_binary_operator()
	{
		EnterRule_overloadable_binary_operator();
		EnterRule("overloadable_binary_operator", 232);
		TraceIn("overloadable_binary_operator", 232);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int overloadable_binary_operator_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal822 = default(IToken);
	    IToken char_literal823 = default(IToken);
	    IToken char_literal824 = default(IToken);
	    IToken char_literal825 = default(IToken);
	    IToken char_literal826 = default(IToken);
	    IToken char_literal827 = default(IToken);
	    IToken string_literal828 = default(IToken);
	    IToken char_literal829 = default(IToken);
	    IToken char_literal830 = default(IToken);
	    IToken string_literal831 = default(IToken);
	    IToken string_literal832 = default(IToken);
	    IToken char_literal833 = default(IToken);
	    IToken char_literal834 = default(IToken);
	    IToken string_literal835 = default(IToken);
	    IToken string_literal836 = default(IToken);

	    object char_literal822_tree = default(object);
	    object char_literal823_tree = default(object);
	    object char_literal824_tree = default(object);
	    object char_literal825_tree = default(object);
	    object char_literal826_tree = default(object);
	    object char_literal827_tree = default(object);
	    object string_literal828_tree = default(object);
	    object char_literal829_tree = default(object);
	    object char_literal830_tree = default(object);
	    object string_literal831_tree = default(object);
	    object string_literal832_tree = default(object);
	    object char_literal833_tree = default(object);
	    object char_literal834_tree = default(object);
	    object string_literal835_tree = default(object);
	    object string_literal836_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "overloadable_binary_operator");
		DebugLocation(819, 109);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 232)) { return retval; }

			// .\\cs.g:819:29: ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' )
			int alt233=14;
			try { DebugEnterDecision(233, decisionCanBacktrack[233]);
			switch (input.LA(1))
			{
			case 69:
				{
				alt233 = 1;
				}
				break;
			case 77:
				{
				alt233 = 2;
				}
				break;
			case 63:
				{
				alt233 = 3;
				}
				break;
			case 66:
				{
				alt233 = 4;
				}
				break;
			case 198:
				{
				alt233 = 5;
				}
				break;
			case 93:
				{
				alt233 = 6;
				}
				break;
			case 82:
				{
				alt233 = 7;
				}
				break;
			case GT:
				{
				int LA233_8 = input.LA(2);

				if ((LA233_8==GT))
				{
					alt233 = 8;
				}
				else if ((LA233_8==74))
				{
					alt233 = 11;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 233, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 86:
				{
				alt233 = 9;
				}
				break;
			case 62:
				{
				alt233 = 10;
				}
				break;
			case 81:
				{
				alt233 = 12;
				}
				break;
			case 88:
				{
				alt233 = 13;
				}
				break;
			case 84:
				{
				alt233 = 14;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 233, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(233); }
			switch (alt233)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:820:19: '*'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(820, 19);
				char_literal822=(IToken)Match(input,69,Follow._69_in_overloadable_binary_operator6051); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal822_tree = (object)adaptor.Create(char_literal822);
				adaptor.AddChild(root_0, char_literal822_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:820:25: '/'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(820, 25);
				char_literal823=(IToken)Match(input,77,Follow._77_in_overloadable_binary_operator6055); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal823_tree = (object)adaptor.Create(char_literal823);
				adaptor.AddChild(root_0, char_literal823_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:820:31: '%'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(820, 31);
				char_literal824=(IToken)Match(input,63,Follow._63_in_overloadable_binary_operator6059); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal824_tree = (object)adaptor.Create(char_literal824);
				adaptor.AddChild(root_0, char_literal824_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// .\\cs.g:820:37: '&'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(820, 37);
				char_literal825=(IToken)Match(input,66,Follow._66_in_overloadable_binary_operator6063); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal825_tree = (object)adaptor.Create(char_literal825);
				adaptor.AddChild(root_0, char_literal825_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// .\\cs.g:820:43: '|'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(820, 43);
				char_literal826=(IToken)Match(input,198,Follow._198_in_overloadable_binary_operator6067); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal826_tree = (object)adaptor.Create(char_literal826);
				adaptor.AddChild(root_0, char_literal826_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// .\\cs.g:820:49: '^'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(820, 49);
				char_literal827=(IToken)Match(input,93,Follow._93_in_overloadable_binary_operator6071); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal827_tree = (object)adaptor.Create(char_literal827);
				adaptor.AddChild(root_0, char_literal827_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// .\\cs.g:820:55: '<<'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(820, 55);
				string_literal828=(IToken)Match(input,82,Follow._82_in_overloadable_binary_operator6075); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal828_tree = (object)adaptor.Create(string_literal828);
				adaptor.AddChild(root_0, string_literal828_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// .\\cs.g:820:62: '>' '>'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(820, 62);
				char_literal829=(IToken)Match(input,GT,Follow._GT_in_overloadable_binary_operator6079); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal829_tree = (object)adaptor.Create(char_literal829);
				adaptor.AddChild(root_0, char_literal829_tree);
				}
				DebugLocation(820, 66);
				char_literal830=(IToken)Match(input,GT,Follow._GT_in_overloadable_binary_operator6081); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal830_tree = (object)adaptor.Create(char_literal830);
				adaptor.AddChild(root_0, char_literal830_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// .\\cs.g:820:72: '=='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(820, 72);
				string_literal831=(IToken)Match(input,86,Follow._86_in_overloadable_binary_operator6085); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal831_tree = (object)adaptor.Create(string_literal831);
				adaptor.AddChild(root_0, string_literal831_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// .\\cs.g:820:79: '!='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(820, 79);
				string_literal832=(IToken)Match(input,62,Follow._62_in_overloadable_binary_operator6089); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal832_tree = (object)adaptor.Create(string_literal832);
				adaptor.AddChild(root_0, string_literal832_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// .\\cs.g:820:86: '>'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(820, 86);
				char_literal833=(IToken)Match(input,GT,Follow._GT_in_overloadable_binary_operator6093); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal833_tree = (object)adaptor.Create(char_literal833);
				adaptor.AddChild(root_0, char_literal833_tree);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// .\\cs.g:820:92: '<'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(820, 92);
				char_literal834=(IToken)Match(input,81,Follow._81_in_overloadable_binary_operator6097); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal834_tree = (object)adaptor.Create(char_literal834);
				adaptor.AddChild(root_0, char_literal834_tree);
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// .\\cs.g:820:98: '>='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(820, 98);
				string_literal835=(IToken)Match(input,88,Follow._88_in_overloadable_binary_operator6101); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal835_tree = (object)adaptor.Create(string_literal835);
				adaptor.AddChild(root_0, string_literal835_tree);
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// .\\cs.g:820:105: '<='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(820, 105);
				string_literal836=(IToken)Match(input,84,Follow._84_in_overloadable_binary_operator6105); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal836_tree = (object)adaptor.Create(string_literal836);
				adaptor.AddChild(root_0, string_literal836_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("overloadable_binary_operator", 232);
			LeaveRule("overloadable_binary_operator", 232);
			LeaveRule_overloadable_binary_operator();
	        if (state.backtracking > 0) { Memoize(input, 232, overloadable_binary_operator_StartIndex); }

	    }
	 	DebugLocation(820, 109);
		} finally { DebugExitRule(GrammarFileName, "overloadable_binary_operator"); }
		return retval;

	}
	// $ANTLR end "overloadable_binary_operator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_conversion_operator_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_conversion_operator_declaration() {}

	// $ANTLR start "conversion_operator_declaration"
	// .\\cs.g:822:1: conversion_operator_declaration : conversion_operator_declarator operator_body ;
	[GrammarRule("conversion_operator_declaration")]
	private AstParserRuleReturnScope<object, IToken> conversion_operator_declaration()
	{
		EnterRule_conversion_operator_declaration();
		EnterRule("conversion_operator_declaration", 233);
		TraceIn("conversion_operator_declaration", 233);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int conversion_operator_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> conversion_operator_declarator837 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> operator_body838 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "conversion_operator_declaration");
		DebugLocation(822, 48);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 233)) { return retval; }

			// .\\cs.g:822:32: ( conversion_operator_declarator operator_body )
			DebugEnterAlt(1);
			// .\\cs.g:823:2: conversion_operator_declarator operator_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(823, 2);
			PushFollow(Follow._conversion_operator_declarator_in_conversion_operator_declaration6115);
			conversion_operator_declarator837=conversion_operator_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conversion_operator_declarator837.Tree);
			DebugLocation(823, 35);
			PushFollow(Follow._operator_body_in_conversion_operator_declaration6119);
			operator_body838=operator_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, operator_body838.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conversion_operator_declaration", 233);
			LeaveRule("conversion_operator_declaration", 233);
			LeaveRule_conversion_operator_declaration();
	        if (state.backtracking > 0) { Memoize(input, 233, conversion_operator_declaration_StartIndex); }

	    }
	 	DebugLocation(823, 48);
		} finally { DebugExitRule(GrammarFileName, "conversion_operator_declaration"); }
		return retval;

	}
	// $ANTLR end "conversion_operator_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_conversion_operator_declarator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_conversion_operator_declarator() {}

	// $ANTLR start "conversion_operator_declarator"
	// .\\cs.g:824:1: conversion_operator_declarator : ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' ;
	[GrammarRule("conversion_operator_declarator")]
	private AstParserRuleReturnScope<object, IToken> conversion_operator_declarator()
	{
		EnterRule_conversion_operator_declarator();
		EnterRule("conversion_operator_declarator", 234);
		TraceIn("conversion_operator_declarator", 234);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int conversion_operator_declarator_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set839 = default(IToken);
	    IToken string_literal840 = default(IToken);
	    IToken char_literal842 = default(IToken);
	    IToken char_literal845 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type841 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type843 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier844 = default(AstParserRuleReturnScope<object, IToken>);

	    object set839_tree = default(object);
	    object string_literal840_tree = default(object);
	    object char_literal842_tree = default(object);
	    object char_literal845_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "conversion_operator_declarator");
		DebugLocation(824, 78);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 234)) { return retval; }

			// .\\cs.g:824:31: ( ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' )
			DebugEnterAlt(1);
			// .\\cs.g:825:2: ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(825, 2);

			set839=(IToken)input.LT(1);
			if (input.LA(1)==124||input.LA(1)==136)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set839));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(825, 29);
			string_literal840=(IToken)Match(input,153,Follow._153_in_conversion_operator_declarator6136); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal840_tree = (object)adaptor.Create(string_literal840);
			adaptor.AddChild(root_0, string_literal840_tree);
			}
			DebugLocation(825, 42);
			PushFollow(Follow._type_in_conversion_operator_declarator6140);
			type841=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type841.Tree);
			DebugLocation(825, 49);
			char_literal842=(IToken)Match(input,68,Follow._68_in_conversion_operator_declarator6144); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal842_tree = (object)adaptor.Create(char_literal842);
			adaptor.AddChild(root_0, char_literal842_tree);
			}
			DebugLocation(825, 55);
			PushFollow(Follow._type_in_conversion_operator_declarator6148);
			type843=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type843.Tree);
			DebugLocation(825, 62);
			PushFollow(Follow._identifier_in_conversion_operator_declarator6152);
			identifier844=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier844.Tree);
			DebugLocation(825, 75);
			char_literal845=(IToken)Match(input,RPAREN,Follow._RPAREN_in_conversion_operator_declarator6156); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal845_tree = (object)adaptor.Create(char_literal845);
			adaptor.AddChild(root_0, char_literal845_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conversion_operator_declarator", 234);
			LeaveRule("conversion_operator_declarator", 234);
			LeaveRule_conversion_operator_declarator();
	        if (state.backtracking > 0) { Memoize(input, 234, conversion_operator_declarator_StartIndex); }

	    }
	 	DebugLocation(825, 78);
		} finally { DebugExitRule(GrammarFileName, "conversion_operator_declarator"); }
		return retval;

	}
	// $ANTLR end "conversion_operator_declarator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_operator_body() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_operator_body() {}

	// $ANTLR start "operator_body"
	// .\\cs.g:826:1: operator_body : block ;
	[GrammarRule("operator_body")]
	private AstParserRuleReturnScope<object, IToken> operator_body()
	{
		EnterRule_operator_body();
		EnterRule("operator_body", 235);
		TraceIn("operator_body", 235);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int operator_body_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> block846 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "operator_body");
		DebugLocation(826, 7);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 235)) { return retval; }

			// .\\cs.g:826:14: ( block )
			DebugEnterAlt(1);
			// .\\cs.g:827:2: block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(827, 2);
			PushFollow(Follow._block_in_operator_body6164);
			block846=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block846.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator_body", 235);
			LeaveRule("operator_body", 235);
			LeaveRule_operator_body();
	        if (state.backtracking > 0) { Memoize(input, 235, operator_body_StartIndex); }

	    }
	 	DebugLocation(827, 7);
		} finally { DebugExitRule(GrammarFileName, "operator_body"); }
		return retval;

	}
	// $ANTLR end "operator_body"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_constructor_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_constructor_declaration() {}

	// $ANTLR start "constructor_declaration"
	// .\\cs.g:830:1: constructor_declaration : constructor_declarator constructor_body ;
	[GrammarRule("constructor_declaration")]
	private AstParserRuleReturnScope<object, IToken> constructor_declaration()
	{
		EnterRule_constructor_declaration();
		EnterRule("constructor_declaration", 236);
		TraceIn("constructor_declaration", 236);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int constructor_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> constructor_declarator847 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> constructor_body848 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "constructor_declaration");
		DebugLocation(830, 43);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 236)) { return retval; }

			// .\\cs.g:830:24: ( constructor_declarator constructor_body )
			DebugEnterAlt(1);
			// .\\cs.g:831:2: constructor_declarator constructor_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(831, 2);
			PushFollow(Follow._constructor_declarator_in_constructor_declaration6174);
			constructor_declarator847=constructor_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_declarator847.Tree);
			DebugLocation(831, 27);
			PushFollow(Follow._constructor_body_in_constructor_declaration6178);
			constructor_body848=constructor_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_body848.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constructor_declaration", 236);
			LeaveRule("constructor_declaration", 236);
			LeaveRule_constructor_declaration();
	        if (state.backtracking > 0) { Memoize(input, 236, constructor_declaration_StartIndex); }

	    }
	 	DebugLocation(831, 43);
		} finally { DebugExitRule(GrammarFileName, "constructor_declaration"); }
		return retval;

	}
	// $ANTLR end "constructor_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_constructor_declarator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_constructor_declarator() {}

	// $ANTLR start "constructor_declarator"
	// .\\cs.g:832:1: constructor_declarator : identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )? ;
	[GrammarRule("constructor_declarator")]
	private AstParserRuleReturnScope<object, IToken> constructor_declarator()
	{
		EnterRule_constructor_declarator();
		EnterRule("constructor_declarator", 237);
		TraceIn("constructor_declarator", 237);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int constructor_declarator_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal850 = default(IToken);
	    IToken char_literal852 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier849 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> formal_parameter_list851 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> constructor_initializer853 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal850_tree = default(object);
	    object char_literal852_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "constructor_declarator");
		DebugLocation(832, 76);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 237)) { return retval; }

			// .\\cs.g:832:23: ( identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )? )
			DebugEnterAlt(1);
			// .\\cs.g:833:2: identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(833, 2);
			PushFollow(Follow._identifier_in_constructor_declarator6186);
			identifier849=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier849.Tree);
			DebugLocation(833, 15);
			char_literal850=(IToken)Match(input,68,Follow._68_in_constructor_declarator6190); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal850_tree = (object)adaptor.Create(char_literal850);
			adaptor.AddChild(root_0, char_literal850_tree);
			}
			DebugLocation(833, 21);
			// .\\cs.g:833:21: ( formal_parameter_list )?
			int alt234=2;
			try { DebugEnterSubRule(234);
			try { DebugEnterDecision(234, decisionCanBacktrack[234]);
			int LA234_0 = input.LA(1);

			if ((LA234_0==IDENTIFIER||LA234_0==91||LA234_0==95||(LA234_0>=97 && LA234_0<=98)||(LA234_0>=100 && LA234_0<=101)||LA234_0==103||(LA234_0>=105 && LA234_0<=106)||LA234_0==109||LA234_0==114||LA234_0==117||(LA234_0>=119 && LA234_0<=120)||LA234_0==122||LA234_0==126||LA234_0==129||LA234_0==132||LA234_0==135||LA234_0==138||LA234_0==141||(LA234_0>=143 && LA234_0<=144)||(LA234_0>=146 && LA234_0<=148)||(LA234_0>=151 && LA234_0<=152)||(LA234_0>=154 && LA234_0<=155)||(LA234_0>=157 && LA234_0<=158)||LA234_0==160||LA234_0==162||(LA234_0>=166 && LA234_0<=167)||LA234_0==169||(LA234_0>=171 && LA234_0<=173)||LA234_0==177||LA234_0==180||LA234_0==183||(LA234_0>=185 && LA234_0<=186)||(LA234_0>=189 && LA234_0<=190)||LA234_0==192||LA234_0==194||LA234_0==196))
			{
				alt234 = 1;
			}
			} finally { DebugExitDecision(234); }
			switch (alt234)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:833:21: formal_parameter_list
				{
				DebugLocation(833, 21);
				PushFollow(Follow._formal_parameter_list_in_constructor_declarator6194);
				formal_parameter_list851=formal_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter_list851.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(234); }

			DebugLocation(833, 46);
			char_literal852=(IToken)Match(input,RPAREN,Follow._RPAREN_in_constructor_declarator6199); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal852_tree = (object)adaptor.Create(char_literal852);
			adaptor.AddChild(root_0, char_literal852_tree);
			}
			DebugLocation(833, 52);
			// .\\cs.g:833:52: ( constructor_initializer )?
			int alt235=2;
			try { DebugEnterSubRule(235);
			try { DebugEnterDecision(235, decisionCanBacktrack[235]);
			int LA235_0 = input.LA(1);

			if ((LA235_0==79))
			{
				alt235 = 1;
			}
			} finally { DebugExitDecision(235); }
			switch (alt235)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:833:52: constructor_initializer
				{
				DebugLocation(833, 52);
				PushFollow(Follow._constructor_initializer_in_constructor_declarator6203);
				constructor_initializer853=constructor_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_initializer853.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(235); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constructor_declarator", 237);
			LeaveRule("constructor_declarator", 237);
			LeaveRule_constructor_declarator();
	        if (state.backtracking > 0) { Memoize(input, 237, constructor_declarator_StartIndex); }

	    }
	 	DebugLocation(833, 76);
		} finally { DebugExitRule(GrammarFileName, "constructor_declarator"); }
		return retval;

	}
	// $ANTLR end "constructor_declarator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_constructor_initializer() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_constructor_initializer() {}

	// $ANTLR start "constructor_initializer"
	// .\\cs.g:834:1: constructor_initializer : ':' ( 'base' | 'this' ) '(' ( argument_list )? ')' ;
	[GrammarRule("constructor_initializer")]
	private AstParserRuleReturnScope<object, IToken> constructor_initializer()
	{
		EnterRule_constructor_initializer();
		EnterRule("constructor_initializer", 238);
		TraceIn("constructor_initializer", 238);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int constructor_initializer_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal854 = default(IToken);
	    IToken set855 = default(IToken);
	    IToken char_literal856 = default(IToken);
	    IToken char_literal858 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> argument_list857 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal854_tree = default(object);
	    object set855_tree = default(object);
	    object char_literal856_tree = default(object);
	    object char_literal858_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "constructor_initializer");
		DebugLocation(834, 54);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 238)) { return retval; }

			// .\\cs.g:834:24: ( ':' ( 'base' | 'this' ) '(' ( argument_list )? ')' )
			DebugEnterAlt(1);
			// .\\cs.g:835:2: ':' ( 'base' | 'this' ) '(' ( argument_list )? ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(835, 2);
			char_literal854=(IToken)Match(input,79,Follow._79_in_constructor_initializer6212); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal854_tree = (object)adaptor.Create(char_literal854);
			adaptor.AddChild(root_0, char_literal854_tree);
			}
			DebugLocation(835, 8);

			set855=(IToken)input.LT(1);
			if (input.LA(1)==102||input.LA(1)==180)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set855));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(835, 28);
			char_literal856=(IToken)Match(input,68,Follow._68_in_constructor_initializer6226); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal856_tree = (object)adaptor.Create(char_literal856);
			adaptor.AddChild(root_0, char_literal856_tree);
			}
			DebugLocation(835, 34);
			// .\\cs.g:835:34: ( argument_list )?
			int alt236=2;
			try { DebugEnterSubRule(236);
			try { DebugEnterDecision(236, decisionCanBacktrack[236]);
			int LA236_0 = input.LA(1);

			if ((LA236_0==Character_literal||LA236_0==FALSE||(LA236_0>=Hex_number && LA236_0<=IDENTIFIER)||(LA236_0>=MINUS && LA236_0<=NUMBER)||LA236_0==Real_literal||LA236_0==STRINGLITERAL||LA236_0==TRUE||LA236_0==Verbatim_string_literal||LA236_0==61||LA236_0==66||(LA236_0>=68 && LA236_0<=69)||(LA236_0>=71 && LA236_0<=72)||LA236_0==75||LA236_0==95||(LA236_0>=97 && LA236_0<=98)||(LA236_0>=100 && LA236_0<=103)||(LA236_0>=105 && LA236_0<=106)||(LA236_0>=109 && LA236_0<=110)||(LA236_0>=114 && LA236_0<=117)||(LA236_0>=119 && LA236_0<=120)||LA236_0==122||LA236_0==126||LA236_0==129||LA236_0==132||LA236_0==135||LA236_0==138||LA236_0==141||(LA236_0>=143 && LA236_0<=144)||(LA236_0>=146 && LA236_0<=148)||(LA236_0>=150 && LA236_0<=152)||(LA236_0>=154 && LA236_0<=155)||LA236_0==157||LA236_0==160||LA236_0==162||(LA236_0>=166 && LA236_0<=167)||LA236_0==169||(LA236_0>=171 && LA236_0<=174)||LA236_0==177||LA236_0==180||(LA236_0>=183 && LA236_0<=187)||(LA236_0>=189 && LA236_0<=190)||LA236_0==194||LA236_0==196||LA236_0==202))
			{
				alt236 = 1;
			}
			} finally { DebugExitDecision(236); }
			switch (alt236)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:835:34: argument_list
				{
				DebugLocation(835, 34);
				PushFollow(Follow._argument_list_in_constructor_initializer6230);
				argument_list857=argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, argument_list857.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(236); }

			DebugLocation(835, 51);
			char_literal858=(IToken)Match(input,RPAREN,Follow._RPAREN_in_constructor_initializer6235); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal858_tree = (object)adaptor.Create(char_literal858);
			adaptor.AddChild(root_0, char_literal858_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constructor_initializer", 238);
			LeaveRule("constructor_initializer", 238);
			LeaveRule_constructor_initializer();
	        if (state.backtracking > 0) { Memoize(input, 238, constructor_initializer_StartIndex); }

	    }
	 	DebugLocation(835, 54);
		} finally { DebugExitRule(GrammarFileName, "constructor_initializer"); }
		return retval;

	}
	// $ANTLR end "constructor_initializer"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_constructor_body() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_constructor_body() {}

	// $ANTLR start "constructor_body"
	// .\\cs.g:836:1: constructor_body : block ;
	[GrammarRule("constructor_body")]
	private AstParserRuleReturnScope<object, IToken> constructor_body()
	{
		EnterRule_constructor_body();
		EnterRule("constructor_body", 239);
		TraceIn("constructor_body", 239);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int constructor_body_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> block859 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "constructor_body");
		DebugLocation(836, 7);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 239)) { return retval; }

			// .\\cs.g:836:17: ( block )
			DebugEnterAlt(1);
			// .\\cs.g:837:2: block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(837, 2);
			PushFollow(Follow._block_in_constructor_body6243);
			block859=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block859.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constructor_body", 239);
			LeaveRule("constructor_body", 239);
			LeaveRule_constructor_body();
	        if (state.backtracking > 0) { Memoize(input, 239, constructor_body_StartIndex); }

	    }
	 	DebugLocation(837, 7);
		} finally { DebugExitRule(GrammarFileName, "constructor_body"); }
		return retval;

	}
	// $ANTLR end "constructor_body"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_destructor_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_destructor_declaration() {}

	// $ANTLR start "destructor_declaration"
	// .\\cs.g:846:1: destructor_declaration : '~' identifier '(' ')' destructor_body ;
	[GrammarRule("destructor_declaration")]
	private AstParserRuleReturnScope<object, IToken> destructor_declaration()
	{
		EnterRule_destructor_declaration();
		EnterRule("destructor_declaration", 240);
		TraceIn("destructor_declaration", 240);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int destructor_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal860 = default(IToken);
	    IToken char_literal862 = default(IToken);
	    IToken char_literal863 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier861 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> destructor_body864 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal860_tree = default(object);
	    object char_literal862_tree = default(object);
	    object char_literal863_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "destructor_declaration");
		DebugLocation(846, 48);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 240)) { return retval; }

			// .\\cs.g:846:23: ( '~' identifier '(' ')' destructor_body )
			DebugEnterAlt(1);
			// .\\cs.g:847:2: '~' identifier '(' ')' destructor_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(847, 2);
			char_literal860=(IToken)Match(input,202,Follow._202_in_destructor_declaration6259); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal860_tree = (object)adaptor.Create(char_literal860);
			adaptor.AddChild(root_0, char_literal860_tree);
			}
			DebugLocation(847, 7);
			PushFollow(Follow._identifier_in_destructor_declaration6262);
			identifier861=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier861.Tree);
			DebugLocation(847, 20);
			char_literal862=(IToken)Match(input,68,Follow._68_in_destructor_declaration6266); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal862_tree = (object)adaptor.Create(char_literal862);
			adaptor.AddChild(root_0, char_literal862_tree);
			}
			DebugLocation(847, 26);
			char_literal863=(IToken)Match(input,RPAREN,Follow._RPAREN_in_destructor_declaration6270); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal863_tree = (object)adaptor.Create(char_literal863);
			adaptor.AddChild(root_0, char_literal863_tree);
			}
			DebugLocation(847, 33);
			PushFollow(Follow._destructor_body_in_destructor_declaration6275);
			destructor_body864=destructor_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, destructor_body864.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("destructor_declaration", 240);
			LeaveRule("destructor_declaration", 240);
			LeaveRule_destructor_declaration();
	        if (state.backtracking > 0) { Memoize(input, 240, destructor_declaration_StartIndex); }

	    }
	 	DebugLocation(847, 48);
		} finally { DebugExitRule(GrammarFileName, "destructor_declaration"); }
		return retval;

	}
	// $ANTLR end "destructor_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_destructor_body() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_destructor_body() {}

	// $ANTLR start "destructor_body"
	// .\\cs.g:848:1: destructor_body : block ;
	[GrammarRule("destructor_body")]
	private AstParserRuleReturnScope<object, IToken> destructor_body()
	{
		EnterRule_destructor_body();
		EnterRule("destructor_body", 241);
		TraceIn("destructor_body", 241);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int destructor_body_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> block865 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "destructor_body");
		DebugLocation(848, 7);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 241)) { return retval; }

			// .\\cs.g:848:16: ( block )
			DebugEnterAlt(1);
			// .\\cs.g:849:2: block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(849, 2);
			PushFollow(Follow._block_in_destructor_body6283);
			block865=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block865.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("destructor_body", 241);
			LeaveRule("destructor_body", 241);
			LeaveRule_destructor_body();
	        if (state.backtracking > 0) { Memoize(input, 241, destructor_body_StartIndex); }

	    }
	 	DebugLocation(849, 7);
		} finally { DebugExitRule(GrammarFileName, "destructor_body"); }
		return retval;

	}
	// $ANTLR end "destructor_body"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_invocation_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_invocation_expression() {}

	// $ANTLR start "invocation_expression"
	// .\\cs.g:852:1: invocation_expression : invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ;
	[GrammarRule("invocation_expression")]
	private AstParserRuleReturnScope<object, IToken> invocation_expression()
	{
		EnterRule_invocation_expression();
		EnterRule("invocation_expression", 242);
		TraceIn("invocation_expression", 242);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int invocation_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> invocation_start866 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> arguments867 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> invocation_part868 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> invocation_part869 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> arguments870 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "invocation_expression");
		DebugLocation(852, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 242)) { return retval; }

			// .\\cs.g:852:22: ( invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
			DebugEnterAlt(1);
			// .\\cs.g:853:2: invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(853, 2);
			PushFollow(Follow._invocation_start_in_invocation_expression6293);
			invocation_start866=invocation_start();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, invocation_start866.Tree);
			DebugLocation(853, 21);
			// .\\cs.g:853:21: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )*
			try { DebugEnterSubRule(237);
			while (true)
			{
				int alt237=3;
				try { DebugEnterDecision(237, decisionCanBacktrack[237]);
				int LA237_0 = input.LA(1);

				if ((LA237_0==68))
				{
					int LA237_1 = input.LA(2);

					if ((EvaluatePredicate(synpred31_cs_fragment)))
					{
						alt237 = 1;
					}


				}
				else if ((LA237_0==DOT||LA237_0==PTR||LA237_0==91))
				{
					alt237 = 2;
				}


				} finally { DebugExitDecision(237); }
				switch ( alt237 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:853:22: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
					{
					DebugLocation(853, 22);
					// .\\cs.g:853:22: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
					DebugEnterAlt(1);
					// .\\cs.g:853:23: ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part
					{
					DebugLocation(853, 55);
					PushFollow(Follow._arguments_in_invocation_expression6315);
					arguments867=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arguments867.Tree);
					DebugLocation(853, 67);
					PushFollow(Follow._invocation_part_in_invocation_expression6319);
					invocation_part868=invocation_part();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, invocation_part868.Tree);

					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// .\\cs.g:854:9: invocation_part
					{
					DebugLocation(854, 9);
					PushFollow(Follow._invocation_part_in_invocation_expression6330);
					invocation_part869=invocation_part();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, invocation_part869.Tree);

					}
					break;

				default:
					goto loop237;
				}
			}

			loop237:
				;

			} finally { DebugExitSubRule(237); }

			DebugLocation(854, 29);
			PushFollow(Follow._arguments_in_invocation_expression6336);
			arguments870=arguments();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, arguments870.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("invocation_expression", 242);
			LeaveRule("invocation_expression", 242);
			LeaveRule_invocation_expression();
	        if (state.backtracking > 0) { Memoize(input, 242, invocation_expression_StartIndex); }

	    }
	 	DebugLocation(854, 38);
		} finally { DebugExitRule(GrammarFileName, "invocation_expression"); }
		return retval;

	}
	// $ANTLR end "invocation_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_invocation_start() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_invocation_start() {}

	// $ANTLR start "invocation_start"
	// .\\cs.g:855:1: invocation_start : ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | 'this' | 'base' | identifier ( '::' identifier )? | typeof_expression );
	[GrammarRule("invocation_start")]
	private AstParserRuleReturnScope<object, IToken> invocation_start()
	{
		EnterRule_invocation_start();
		EnterRule("invocation_start", 243);
		TraceIn("invocation_start", 243);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int invocation_start_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal874 = default(IToken);
	    IToken string_literal875 = default(IToken);
	    IToken string_literal877 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> predefined_type871 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier872 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> generic_argument_list873 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier876 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier878 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> typeof_expression879 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal874_tree = default(object);
	    object string_literal875_tree = default(object);
	    object string_literal877_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "invocation_start");
		DebugLocation(855, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 243)) { return retval; }

			// .\\cs.g:855:17: ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | 'this' | 'base' | identifier ( '::' identifier )? | typeof_expression )
			int alt239=6;
			try { DebugEnterDecision(239, decisionCanBacktrack[239]);
			switch (input.LA(1))
			{
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				alt239 = 1;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA239_2 = input.LA(2);

				if ((LA239_2==81) && (EvaluatePredicate(synpred32_cs_fragment)))
				{
					alt239 = 2;
				}
				else if ((LA239_2==DOT||LA239_2==PTR||LA239_2==68||LA239_2==80||LA239_2==91))
				{
					alt239 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 239, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 180:
				{
				alt239 = 3;
				}
				break;
			case 102:
				{
				alt239 = 4;
				}
				break;
			case 184:
				{
				alt239 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 239, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(239); }
			switch (alt239)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:856:2: predefined_type
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(856, 2);
				PushFollow(Follow._predefined_type_in_invocation_start6344);
				predefined_type871=predefined_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type871.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:857:4: ( identifier '<' )=> identifier generic_argument_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(857, 27);
				PushFollow(Follow._identifier_in_invocation_start6361);
				identifier872=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier872.Tree);
				DebugLocation(857, 40);
				PushFollow(Follow._generic_argument_list_in_invocation_start6365);
				generic_argument_list873=generic_argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_argument_list873.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:858:4: 'this'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(858, 4);
				string_literal874=(IToken)Match(input,180,Follow._180_in_invocation_start6370); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal874_tree = (object)adaptor.Create(string_literal874);
				adaptor.AddChild(root_0, string_literal874_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// .\\cs.g:859:4: 'base'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(859, 4);
				string_literal875=(IToken)Match(input,102,Follow._102_in_invocation_start6376); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal875_tree = (object)adaptor.Create(string_literal875);
				adaptor.AddChild(root_0, string_literal875_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// .\\cs.g:860:4: identifier ( '::' identifier )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(860, 4);
				PushFollow(Follow._identifier_in_invocation_start6381);
				identifier876=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier876.Tree);
				DebugLocation(860, 17);
				// .\\cs.g:860:17: ( '::' identifier )?
				int alt238=2;
				try { DebugEnterSubRule(238);
				try { DebugEnterDecision(238, decisionCanBacktrack[238]);
				int LA238_0 = input.LA(1);

				if ((LA238_0==80))
				{
					alt238 = 1;
				}
				} finally { DebugExitDecision(238); }
				switch (alt238)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:860:18: '::' identifier
					{
					DebugLocation(860, 18);
					string_literal877=(IToken)Match(input,80,Follow._80_in_invocation_start6386); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal877_tree = (object)adaptor.Create(string_literal877);
					adaptor.AddChild(root_0, string_literal877_tree);
					}
					DebugLocation(860, 25);
					PushFollow(Follow._identifier_in_invocation_start6390);
					identifier878=identifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, identifier878.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(238); }


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// .\\cs.g:861:4: typeof_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(861, 4);
				PushFollow(Follow._typeof_expression_in_invocation_start6397);
				typeof_expression879=typeof_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeof_expression879.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("invocation_start", 243);
			LeaveRule("invocation_start", 243);
			LeaveRule_invocation_start();
	        if (state.backtracking > 0) { Memoize(input, 243, invocation_start_StartIndex); }

	    }
	 	DebugLocation(862, 1);
		} finally { DebugExitRule(GrammarFileName, "invocation_start"); }
		return retval;

	}
	// $ANTLR end "invocation_start"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_invocation_part() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_invocation_part() {}

	// $ANTLR start "invocation_part"
	// .\\cs.g:863:1: invocation_part : ( access_identifier | brackets );
	[GrammarRule("invocation_part")]
	private AstParserRuleReturnScope<object, IToken> invocation_part()
	{
		EnterRule_invocation_part();
		EnterRule("invocation_part", 244);
		TraceIn("invocation_part", 244);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int invocation_part_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> access_identifier880 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> brackets881 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "invocation_part");
		DebugLocation(863, 12);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 244)) { return retval; }

			// .\\cs.g:863:16: ( access_identifier | brackets )
			int alt240=2;
			try { DebugEnterDecision(240, decisionCanBacktrack[240]);
			int LA240_0 = input.LA(1);

			if ((LA240_0==DOT||LA240_0==PTR))
			{
				alt240 = 1;
			}
			else if ((LA240_0==91))
			{
				alt240 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 240, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(240); }
			switch (alt240)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:864:3: access_identifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(864, 3);
				PushFollow(Follow._access_identifier_in_invocation_part6420);
				access_identifier880=access_identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, access_identifier880.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:865:4: brackets
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(865, 4);
				PushFollow(Follow._brackets_in_invocation_part6425);
				brackets881=brackets();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, brackets881.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("invocation_part", 244);
			LeaveRule("invocation_part", 244);
			LeaveRule_invocation_part();
	        if (state.backtracking > 0) { Memoize(input, 244, invocation_part_StartIndex); }

	    }
	 	DebugLocation(865, 12);
		} finally { DebugExitRule(GrammarFileName, "invocation_part"); }
		return retval;

	}
	// $ANTLR end "invocation_part"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_statement() {}

	// $ANTLR start "statement"
	// .\\cs.g:869:1: statement : ( ( declaration_statement )=> declaration_statement | ( identifier ':' )=> labeled_statement | embedded_statement );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<object, IToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 245);
		TraceIn("statement", 245);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> declaration_statement882 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> labeled_statement883 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> embedded_statement884 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(869, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 245)) { return retval; }

			// .\\cs.g:869:10: ( ( declaration_statement )=> declaration_statement | ( identifier ':' )=> labeled_statement | embedded_statement )
			int alt241=3;
			try { DebugEnterDecision(241, decisionCanBacktrack[241]);
			int LA241_0 = input.LA(1);

			if ((LA241_0==190))
			{
				int LA241_1 = input.LA(2);

				if ((EvaluatePredicate(synpred33_cs_fragment)))
				{
					alt241 = 1;
				}
				else if ((EvaluatePredicate(synpred34_cs_fragment)))
				{
					alt241 = 2;
				}
				else if ((true))
				{
					alt241 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 241, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA241_0==120))
			{
				int LA241_2 = input.LA(2);

				if ((EvaluatePredicate(synpred33_cs_fragment)))
				{
					alt241 = 1;
				}
				else if ((EvaluatePredicate(synpred34_cs_fragment)))
				{
					alt241 = 2;
				}
				else if ((true))
				{
					alt241 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 241, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA241_0==103||LA241_0==106||LA241_0==109||LA241_0==114||LA241_0==119||LA241_0==129||LA241_0==138||LA241_0==146||LA241_0==151||LA241_0==169||LA241_0==173||LA241_0==177||(LA241_0>=185 && LA241_0<=186)||LA241_0==189))
			{
				int LA241_3 = input.LA(2);

				if ((EvaluatePredicate(synpred33_cs_fragment)))
				{
					alt241 = 1;
				}
				else if ((true))
				{
					alt241 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 241, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA241_0==196))
			{
				int LA241_4 = input.LA(2);

				if ((EvaluatePredicate(synpred33_cs_fragment)))
				{
					alt241 = 1;
				}
				else if ((EvaluatePredicate(synpred34_cs_fragment)))
				{
					alt241 = 2;
				}
				else if ((true))
				{
					alt241 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 241, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA241_0==192) && (EvaluatePredicate(synpred33_cs_fragment)))
			{
				alt241 = 1;
			}
			else if ((LA241_0==112) && (EvaluatePredicate(synpred33_cs_fragment)))
			{
				alt241 = 1;
			}
			else if ((LA241_0==Character_literal||LA241_0==FALSE||LA241_0==Hex_number||LA241_0==IF||(LA241_0>=MINUS && LA241_0<=NUMBER)||LA241_0==Real_literal||(LA241_0>=SEMI && LA241_0<=STRINGLITERAL)||LA241_0==TRUE||(LA241_0>=USING && LA241_0<=Verbatim_string_literal)||LA241_0==61||LA241_0==66||(LA241_0>=68 && LA241_0<=69)||(LA241_0>=71 && LA241_0<=72)||LA241_0==75||LA241_0==102||LA241_0==104||LA241_0==110||LA241_0==113||(LA241_0>=115 && LA241_0<=116)||LA241_0==118||LA241_0==128||(LA241_0>=130 && LA241_0<=131)||LA241_0==134||LA241_0==145||LA241_0==150||LA241_0==168||LA241_0==174||(LA241_0>=179 && LA241_0<=182)||LA241_0==184||(LA241_0>=187 && LA241_0<=188)||LA241_0==195||LA241_0==197||LA241_0==202))
			{
				alt241 = 3;
			}
			else if ((LA241_0==132))
			{
				int LA241_25 = input.LA(2);

				if ((EvaluatePredicate(synpred33_cs_fragment)))
				{
					alt241 = 1;
				}
				else if ((EvaluatePredicate(synpred34_cs_fragment)))
				{
					alt241 = 2;
				}
				else if ((true))
				{
					alt241 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 241, 25, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA241_0==IDENTIFIER||LA241_0==95||(LA241_0>=97 && LA241_0<=98)||(LA241_0>=100 && LA241_0<=101)||LA241_0==105||LA241_0==117||LA241_0==122||LA241_0==126||LA241_0==135||LA241_0==141||(LA241_0>=143 && LA241_0<=144)||(LA241_0>=147 && LA241_0<=148)||LA241_0==152||LA241_0==154||LA241_0==157||LA241_0==160||LA241_0==162||LA241_0==167||(LA241_0>=171 && LA241_0<=172)||LA241_0==183||LA241_0==194))
			{
				int LA241_45 = input.LA(2);

				if ((EvaluatePredicate(synpred33_cs_fragment)))
				{
					alt241 = 1;
				}
				else if ((EvaluatePredicate(synpred34_cs_fragment)))
				{
					alt241 = 2;
				}
				else if ((true))
				{
					alt241 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 241, 45, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 241, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(241); }
			switch (alt241)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:870:2: ( declaration_statement )=> declaration_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(870, 29);
				PushFollow(Follow._declaration_statement_in_statement6442);
				declaration_statement882=declaration_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_statement882.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:871:4: ( identifier ':' )=> labeled_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(871, 26);
				PushFollow(Follow._labeled_statement_in_statement6457);
				labeled_statement883=labeled_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, labeled_statement883.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:872:4: embedded_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(872, 4);
				PushFollow(Follow._embedded_statement_in_statement6462);
				embedded_statement884=embedded_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement884.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 245);
			LeaveRule("statement", 245);
			LeaveRule_statement();
	        if (state.backtracking > 0) { Memoize(input, 245, statement_StartIndex); }

	    }
	 	DebugLocation(873, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_embedded_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_embedded_statement() {}

	// $ANTLR start "embedded_statement"
	// .\\cs.g:874:1: embedded_statement : ( block | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement | expression_statement );
	[GrammarRule("embedded_statement")]
	private AstParserRuleReturnScope<object, IToken> embedded_statement()
	{
		EnterRule_embedded_statement();
		EnterRule("embedded_statement", 246);
		TraceIn("embedded_statement", 246);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int embedded_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> block885 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> selection_statement886 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> iteration_statement887 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> jump_statement888 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> try_statement889 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> checked_statement890 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> unchecked_statement891 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> lock_statement892 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> using_statement893 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> yield_statement894 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> unsafe_statement895 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> fixed_statement896 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_statement897 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "embedded_statement");
		DebugLocation(874, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 246)) { return retval; }

			// .\\cs.g:874:19: ( block | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement | expression_statement )
			int alt242=13;
			try { DebugEnterDecision(242, decisionCanBacktrack[242]);
			switch (input.LA(1))
			{
			case SEMI:
			case 197:
				{
				alt242 = 1;
				}
				break;
			case IF:
			case 179:
				{
				alt242 = 2;
				}
				break;
			case 118:
			case 130:
			case 131:
			case 195:
				{
				alt242 = 3;
				}
				break;
			case 104:
			case 113:
			case 134:
			case 168:
			case 181:
				{
				alt242 = 4;
				}
				break;
			case 182:
				{
				alt242 = 5;
				}
				break;
			case 110:
				{
				int LA242_6 = input.LA(2);

				if ((LA242_6==68))
				{
					alt242 = 13;
				}
				else if ((LA242_6==SEMI||LA242_6==197))
				{
					alt242 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 242, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 187:
				{
				int LA242_7 = input.LA(2);

				if ((LA242_7==68))
				{
					alt242 = 13;
				}
				else if ((LA242_7==SEMI||LA242_7==197))
				{
					alt242 = 7;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 242, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 145:
				{
				alt242 = 8;
				}
				break;
			case USING:
				{
				alt242 = 9;
				}
				break;
			case 196:
				{
				int LA242_10 = input.LA(2);

				if ((LA242_10==104||LA242_10==168))
				{
					alt242 = 10;
				}
				else if ((LA242_10==DOT||LA242_10==GT||LA242_10==MINUS||LA242_10==PTR||LA242_10==SEMI||(LA242_10>=62 && LA242_10<=78)||(LA242_10>=80 && LA242_10<=91)||(LA242_10>=93 && LA242_10<=94)||LA242_10==99||LA242_10==142||(LA242_10>=198 && LA242_10<=200)))
				{
					alt242 = 13;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 242, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 188:
				{
				alt242 = 11;
				}
				break;
			case 128:
				{
				alt242 = 12;
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case IDENTIFIER:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 68:
			case 69:
			case 71:
			case 72:
			case 75:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 102:
			case 103:
			case 105:
			case 106:
			case 109:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 150:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 174:
			case 177:
			case 180:
			case 183:
			case 184:
			case 185:
			case 186:
			case 189:
			case 190:
			case 194:
			case 202:
				{
				alt242 = 13;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 242, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(242); }
			switch (alt242)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:875:2: block
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(875, 2);
				PushFollow(Follow._block_in_embedded_statement6472);
				block885=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block885.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:876:4: selection_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(876, 4);
				PushFollow(Follow._selection_statement_in_embedded_statement6477);
				selection_statement886=selection_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selection_statement886.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:877:4: iteration_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(877, 4);
				PushFollow(Follow._iteration_statement_in_embedded_statement6483);
				iteration_statement887=iteration_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, iteration_statement887.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// .\\cs.g:878:4: jump_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(878, 4);
				PushFollow(Follow._jump_statement_in_embedded_statement6489);
				jump_statement888=jump_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, jump_statement888.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// .\\cs.g:879:4: try_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(879, 4);
				PushFollow(Follow._try_statement_in_embedded_statement6496);
				try_statement889=try_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, try_statement889.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// .\\cs.g:880:4: checked_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(880, 4);
				PushFollow(Follow._checked_statement_in_embedded_statement6501);
				checked_statement890=checked_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, checked_statement890.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// .\\cs.g:881:4: unchecked_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(881, 4);
				PushFollow(Follow._unchecked_statement_in_embedded_statement6506);
				unchecked_statement891=unchecked_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unchecked_statement891.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// .\\cs.g:882:4: lock_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(882, 4);
				PushFollow(Follow._lock_statement_in_embedded_statement6511);
				lock_statement892=lock_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lock_statement892.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// .\\cs.g:883:4: using_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(883, 4);
				PushFollow(Follow._using_statement_in_embedded_statement6516);
				using_statement893=using_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, using_statement893.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// .\\cs.g:884:4: yield_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(884, 4);
				PushFollow(Follow._yield_statement_in_embedded_statement6522);
				yield_statement894=yield_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, yield_statement894.Tree);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// .\\cs.g:885:4: unsafe_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(885, 4);
				PushFollow(Follow._unsafe_statement_in_embedded_statement6528);
				unsafe_statement895=unsafe_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unsafe_statement895.Tree);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// .\\cs.g:886:4: fixed_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(886, 4);
				PushFollow(Follow._fixed_statement_in_embedded_statement6533);
				fixed_statement896=fixed_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_statement896.Tree);

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// .\\cs.g:887:4: expression_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(887, 4);
				PushFollow(Follow._expression_statement_in_embedded_statement6538);
				expression_statement897=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement897.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("embedded_statement", 246);
			LeaveRule("embedded_statement", 246);
			LeaveRule_embedded_statement();
	        if (state.backtracking > 0) { Memoize(input, 246, embedded_statement_StartIndex); }

	    }
	 	DebugLocation(888, 1);
		} finally { DebugExitRule(GrammarFileName, "embedded_statement"); }
		return retval;

	}
	// $ANTLR end "embedded_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_fixed_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_fixed_statement() {}

	// $ANTLR start "fixed_statement"
	// .\\cs.g:889:1: fixed_statement : 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement ;
	[GrammarRule("fixed_statement")]
	private AstParserRuleReturnScope<object, IToken> fixed_statement()
	{
		EnterRule_fixed_statement();
		EnterRule("fixed_statement", 247);
		TraceIn("fixed_statement", 247);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int fixed_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal898 = default(IToken);
	    IToken char_literal899 = default(IToken);
	    IToken char_literal902 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> pointer_type900 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> fixed_pointer_declarators901 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> embedded_statement903 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal898_tree = default(object);
	    object char_literal899_tree = default(object);
	    object char_literal902_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "fixed_statement");
		DebugLocation(889, 83);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 247)) { return retval; }

			// .\\cs.g:889:16: ( 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement )
			DebugEnterAlt(1);
			// .\\cs.g:890:2: 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(890, 2);
			string_literal898=(IToken)Match(input,128,Follow._128_in_fixed_statement6548); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal898_tree = (object)adaptor.Create(string_literal898);
			adaptor.AddChild(root_0, string_literal898_tree);
			}
			DebugLocation(890, 12);
			char_literal899=(IToken)Match(input,68,Follow._68_in_fixed_statement6552); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal899_tree = (object)adaptor.Create(char_literal899);
			adaptor.AddChild(root_0, char_literal899_tree);
			}
			DebugLocation(890, 18);
			PushFollow(Follow._pointer_type_in_fixed_statement6556);
			pointer_type900=pointer_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, pointer_type900.Tree);
			DebugLocation(890, 31);
			PushFollow(Follow._fixed_pointer_declarators_in_fixed_statement6558);
			fixed_pointer_declarators901=fixed_pointer_declarators();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_pointer_declarators901.Tree);
			DebugLocation(890, 59);
			char_literal902=(IToken)Match(input,RPAREN,Follow._RPAREN_in_fixed_statement6562); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal902_tree = (object)adaptor.Create(char_literal902);
			adaptor.AddChild(root_0, char_literal902_tree);
			}
			DebugLocation(890, 65);
			PushFollow(Follow._embedded_statement_in_fixed_statement6566);
			embedded_statement903=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement903.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fixed_statement", 247);
			LeaveRule("fixed_statement", 247);
			LeaveRule_fixed_statement();
	        if (state.backtracking > 0) { Memoize(input, 247, fixed_statement_StartIndex); }

	    }
	 	DebugLocation(890, 83);
		} finally { DebugExitRule(GrammarFileName, "fixed_statement"); }
		return retval;

	}
	// $ANTLR end "fixed_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_fixed_pointer_declarators() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_fixed_pointer_declarators() {}

	// $ANTLR start "fixed_pointer_declarators"
	// .\\cs.g:891:1: fixed_pointer_declarators : fixed_pointer_declarator ( ',' fixed_pointer_declarator )* ;
	[GrammarRule("fixed_pointer_declarators")]
	private AstParserRuleReturnScope<object, IToken> fixed_pointer_declarators()
	{
		EnterRule_fixed_pointer_declarators();
		EnterRule("fixed_pointer_declarators", 248);
		TraceIn("fixed_pointer_declarators", 248);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int fixed_pointer_declarators_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal905 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> fixed_pointer_declarator904 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> fixed_pointer_declarator906 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal905_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "fixed_pointer_declarators");
		DebugLocation(891, 62);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 248)) { return retval; }

			// .\\cs.g:891:26: ( fixed_pointer_declarator ( ',' fixed_pointer_declarator )* )
			DebugEnterAlt(1);
			// .\\cs.g:892:2: fixed_pointer_declarator ( ',' fixed_pointer_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(892, 2);
			PushFollow(Follow._fixed_pointer_declarator_in_fixed_pointer_declarators6574);
			fixed_pointer_declarator904=fixed_pointer_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_pointer_declarator904.Tree);
			DebugLocation(892, 29);
			// .\\cs.g:892:29: ( ',' fixed_pointer_declarator )*
			try { DebugEnterSubRule(243);
			while (true)
			{
				int alt243=2;
				try { DebugEnterDecision(243, decisionCanBacktrack[243]);
				int LA243_0 = input.LA(1);

				if ((LA243_0==74))
				{
					alt243 = 1;
				}


				} finally { DebugExitDecision(243); }
				switch ( alt243 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:892:30: ',' fixed_pointer_declarator
					{
					DebugLocation(892, 30);
					char_literal905=(IToken)Match(input,74,Follow._74_in_fixed_pointer_declarators6579); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal905_tree = (object)adaptor.Create(char_literal905);
					adaptor.AddChild(root_0, char_literal905_tree);
					}
					DebugLocation(892, 36);
					PushFollow(Follow._fixed_pointer_declarator_in_fixed_pointer_declarators6583);
					fixed_pointer_declarator906=fixed_pointer_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_pointer_declarator906.Tree);

					}
					break;

				default:
					goto loop243;
				}
			}

			loop243:
				;

			} finally { DebugExitSubRule(243); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fixed_pointer_declarators", 248);
			LeaveRule("fixed_pointer_declarators", 248);
			LeaveRule_fixed_pointer_declarators();
	        if (state.backtracking > 0) { Memoize(input, 248, fixed_pointer_declarators_StartIndex); }

	    }
	 	DebugLocation(892, 62);
		} finally { DebugExitRule(GrammarFileName, "fixed_pointer_declarators"); }
		return retval;

	}
	// $ANTLR end "fixed_pointer_declarators"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_fixed_pointer_declarator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_fixed_pointer_declarator() {}

	// $ANTLR start "fixed_pointer_declarator"
	// .\\cs.g:893:1: fixed_pointer_declarator : identifier '=' fixed_pointer_initializer ;
	[GrammarRule("fixed_pointer_declarator")]
	private AstParserRuleReturnScope<object, IToken> fixed_pointer_declarator()
	{
		EnterRule_fixed_pointer_declarator();
		EnterRule("fixed_pointer_declarator", 249);
		TraceIn("fixed_pointer_declarator", 249);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int fixed_pointer_declarator_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal908 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier907 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> fixed_pointer_initializer909 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal908_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "fixed_pointer_declarator");
		DebugLocation(893, 46);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 249)) { return retval; }

			// .\\cs.g:893:25: ( identifier '=' fixed_pointer_initializer )
			DebugEnterAlt(1);
			// .\\cs.g:894:2: identifier '=' fixed_pointer_initializer
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(894, 2);
			PushFollow(Follow._identifier_in_fixed_pointer_declarator6593);
			identifier907=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier907.Tree);
			DebugLocation(894, 15);
			char_literal908=(IToken)Match(input,85,Follow._85_in_fixed_pointer_declarator6597); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal908_tree = (object)adaptor.Create(char_literal908);
			adaptor.AddChild(root_0, char_literal908_tree);
			}
			DebugLocation(894, 21);
			PushFollow(Follow._fixed_pointer_initializer_in_fixed_pointer_declarator6601);
			fixed_pointer_initializer909=fixed_pointer_initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_pointer_initializer909.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fixed_pointer_declarator", 249);
			LeaveRule("fixed_pointer_declarator", 249);
			LeaveRule_fixed_pointer_declarator();
	        if (state.backtracking > 0) { Memoize(input, 249, fixed_pointer_declarator_StartIndex); }

	    }
	 	DebugLocation(894, 46);
		} finally { DebugExitRule(GrammarFileName, "fixed_pointer_declarator"); }
		return retval;

	}
	// $ANTLR end "fixed_pointer_declarator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_fixed_pointer_initializer() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_fixed_pointer_initializer() {}

	// $ANTLR start "fixed_pointer_initializer"
	// .\\cs.g:895:1: fixed_pointer_initializer : expression ;
	[GrammarRule("fixed_pointer_initializer")]
	private AstParserRuleReturnScope<object, IToken> fixed_pointer_initializer()
	{
		EnterRule_fixed_pointer_initializer();
		EnterRule("fixed_pointer_initializer", 250);
		TraceIn("fixed_pointer_initializer", 250);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int fixed_pointer_initializer_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression910 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "fixed_pointer_initializer");
		DebugLocation(895, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 250)) { return retval; }

			// .\\cs.g:895:26: ( expression )
			DebugEnterAlt(1);
			// .\\cs.g:897:2: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(897, 2);
			PushFollow(Follow._expression_in_fixed_pointer_initializer6611);
			expression910=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression910.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fixed_pointer_initializer", 250);
			LeaveRule("fixed_pointer_initializer", 250);
			LeaveRule_fixed_pointer_initializer();
	        if (state.backtracking > 0) { Memoize(input, 250, fixed_pointer_initializer_StartIndex); }

	    }
	 	DebugLocation(897, 11);
		} finally { DebugExitRule(GrammarFileName, "fixed_pointer_initializer"); }
		return retval;

	}
	// $ANTLR end "fixed_pointer_initializer"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_unsafe_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_unsafe_statement() {}

	// $ANTLR start "unsafe_statement"
	// .\\cs.g:898:1: unsafe_statement : 'unsafe' block ;
	[GrammarRule("unsafe_statement")]
	private AstParserRuleReturnScope<object, IToken> unsafe_statement()
	{
		EnterRule_unsafe_statement();
		EnterRule("unsafe_statement", 251);
		TraceIn("unsafe_statement", 251);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int unsafe_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal911 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> block912 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal911_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "unsafe_statement");
		DebugLocation(898, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 251)) { return retval; }

			// .\\cs.g:898:17: ( 'unsafe' block )
			DebugEnterAlt(1);
			// .\\cs.g:899:2: 'unsafe' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(899, 2);
			string_literal911=(IToken)Match(input,188,Follow._188_in_unsafe_statement6618); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal911_tree = (object)adaptor.Create(string_literal911);
			adaptor.AddChild(root_0, string_literal911_tree);
			}
			DebugLocation(899, 13);
			PushFollow(Follow._block_in_unsafe_statement6622);
			block912=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block912.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unsafe_statement", 251);
			LeaveRule("unsafe_statement", 251);
			LeaveRule_unsafe_statement();
	        if (state.backtracking > 0) { Memoize(input, 251, unsafe_statement_StartIndex); }

	    }
	 	DebugLocation(899, 17);
		} finally { DebugExitRule(GrammarFileName, "unsafe_statement"); }
		return retval;

	}
	// $ANTLR end "unsafe_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_labeled_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_labeled_statement() {}

	// $ANTLR start "labeled_statement"
	// .\\cs.g:900:1: labeled_statement : identifier ':' statement ;
	[GrammarRule("labeled_statement")]
	private AstParserRuleReturnScope<object, IToken> labeled_statement()
	{
		EnterRule_labeled_statement();
		EnterRule("labeled_statement", 252);
		TraceIn("labeled_statement", 252);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int labeled_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal914 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier913 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> statement915 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal914_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "labeled_statement");
		DebugLocation(900, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 252)) { return retval; }

			// .\\cs.g:900:18: ( identifier ':' statement )
			DebugEnterAlt(1);
			// .\\cs.g:901:2: identifier ':' statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(901, 2);
			PushFollow(Follow._identifier_in_labeled_statement6629);
			identifier913=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier913.Tree);
			DebugLocation(901, 15);
			char_literal914=(IToken)Match(input,79,Follow._79_in_labeled_statement6633); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal914_tree = (object)adaptor.Create(char_literal914);
			adaptor.AddChild(root_0, char_literal914_tree);
			}
			DebugLocation(901, 21);
			PushFollow(Follow._statement_in_labeled_statement6637);
			statement915=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement915.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("labeled_statement", 252);
			LeaveRule("labeled_statement", 252);
			LeaveRule_labeled_statement();
	        if (state.backtracking > 0) { Memoize(input, 252, labeled_statement_StartIndex); }

	    }
	 	DebugLocation(901, 30);
		} finally { DebugExitRule(GrammarFileName, "labeled_statement"); }
		return retval;

	}
	// $ANTLR end "labeled_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration_statement() {}

	// $ANTLR start "declaration_statement"
	// .\\cs.g:902:1: declaration_statement : ( local_variable_declaration | local_constant_declaration ) ';' ;
	[GrammarRule("declaration_statement")]
	private AstParserRuleReturnScope<object, IToken> declaration_statement()
	{
		EnterRule_declaration_statement();
		EnterRule("declaration_statement", 253);
		TraceIn("declaration_statement", 253);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int declaration_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal918 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> local_variable_declaration916 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> local_constant_declaration917 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal918_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "declaration_statement");
		DebugLocation(902, 35);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 253)) { return retval; }

			// .\\cs.g:902:22: ( ( local_variable_declaration | local_constant_declaration ) ';' )
			DebugEnterAlt(1);
			// .\\cs.g:903:2: ( local_variable_declaration | local_constant_declaration ) ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(903, 2);
			// .\\cs.g:903:2: ( local_variable_declaration | local_constant_declaration )
			int alt244=2;
			try { DebugEnterSubRule(244);
			try { DebugEnterDecision(244, decisionCanBacktrack[244]);
			int LA244_0 = input.LA(1);

			if ((LA244_0==IDENTIFIER||LA244_0==95||(LA244_0>=97 && LA244_0<=98)||(LA244_0>=100 && LA244_0<=101)||LA244_0==103||(LA244_0>=105 && LA244_0<=106)||LA244_0==109||LA244_0==114||LA244_0==117||(LA244_0>=119 && LA244_0<=120)||LA244_0==122||LA244_0==126||LA244_0==129||LA244_0==132||LA244_0==135||LA244_0==138||LA244_0==141||(LA244_0>=143 && LA244_0<=144)||(LA244_0>=146 && LA244_0<=148)||(LA244_0>=151 && LA244_0<=152)||LA244_0==154||LA244_0==157||LA244_0==160||LA244_0==162||LA244_0==167||LA244_0==169||(LA244_0>=171 && LA244_0<=173)||LA244_0==177||LA244_0==183||(LA244_0>=185 && LA244_0<=186)||(LA244_0>=189 && LA244_0<=190)||LA244_0==192||LA244_0==194||LA244_0==196))
			{
				alt244 = 1;
			}
			else if ((LA244_0==112))
			{
				alt244 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 244, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(244); }
			switch (alt244)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:903:3: local_variable_declaration
				{
				DebugLocation(903, 3);
				PushFollow(Follow._local_variable_declaration_in_declaration_statement6646);
				local_variable_declaration916=local_variable_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declaration916.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:904:4: local_constant_declaration
				{
				DebugLocation(904, 4);
				PushFollow(Follow._local_constant_declaration_in_declaration_statement6652);
				local_constant_declaration917=local_constant_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, local_constant_declaration917.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(244); }

			DebugLocation(904, 32);
			char_literal918=(IToken)Match(input,SEMI,Follow._SEMI_in_declaration_statement6655); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal918_tree = (object)adaptor.Create(char_literal918);
			adaptor.AddChild(root_0, char_literal918_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_statement", 253);
			LeaveRule("declaration_statement", 253);
			LeaveRule_declaration_statement();
	        if (state.backtracking > 0) { Memoize(input, 253, declaration_statement_StartIndex); }

	    }
	 	DebugLocation(904, 35);
		} finally { DebugExitRule(GrammarFileName, "declaration_statement"); }
		return retval;

	}
	// $ANTLR end "declaration_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_local_variable_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_local_variable_declaration() {}

	// $ANTLR start "local_variable_declaration"
	// .\\cs.g:905:1: local_variable_declaration : local_variable_type local_variable_declarators ;
	[GrammarRule("local_variable_declaration")]
	private AstParserRuleReturnScope<object, IToken> local_variable_declaration()
	{
		EnterRule_local_variable_declaration();
		EnterRule("local_variable_declaration", 254);
		TraceIn("local_variable_declaration", 254);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int local_variable_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> local_variable_type919 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> local_variable_declarators920 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "local_variable_declaration");
		DebugLocation(905, 50);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 254)) { return retval; }

			// .\\cs.g:905:27: ( local_variable_type local_variable_declarators )
			DebugEnterAlt(1);
			// .\\cs.g:906:2: local_variable_type local_variable_declarators
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(906, 2);
			PushFollow(Follow._local_variable_type_in_local_variable_declaration6663);
			local_variable_type919=local_variable_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_type919.Tree);
			DebugLocation(906, 24);
			PushFollow(Follow._local_variable_declarators_in_local_variable_declaration6667);
			local_variable_declarators920=local_variable_declarators();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declarators920.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_declaration", 254);
			LeaveRule("local_variable_declaration", 254);
			LeaveRule_local_variable_declaration();
	        if (state.backtracking > 0) { Memoize(input, 254, local_variable_declaration_StartIndex); }

	    }
	 	DebugLocation(906, 50);
		} finally { DebugExitRule(GrammarFileName, "local_variable_declaration"); }
		return retval;

	}
	// $ANTLR end "local_variable_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_local_variable_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_local_variable_type() {}

	// $ANTLR start "local_variable_type"
	// .\\cs.g:907:1: local_variable_type : ( ( 'var' )=> 'var' | ( 'dynamic' )=> 'dynamic' | type );
	[GrammarRule("local_variable_type")]
	private AstParserRuleReturnScope<object, IToken> local_variable_type()
	{
		EnterRule_local_variable_type();
		EnterRule("local_variable_type", 255);
		TraceIn("local_variable_type", 255);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int local_variable_type_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal921 = default(IToken);
	    IToken string_literal922 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type923 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal921_tree = default(object);
	    object string_literal922_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "local_variable_type");
		DebugLocation(907, 8);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 255)) { return retval; }

			// .\\cs.g:907:20: ( ( 'var' )=> 'var' | ( 'dynamic' )=> 'dynamic' | type )
			int alt245=3;
			try { DebugEnterDecision(245, decisionCanBacktrack[245]);
			switch (input.LA(1))
			{
			case 190:
				{
				int LA245_1 = input.LA(2);

				if ((EvaluatePredicate(synpred35_cs_fragment)))
				{
					alt245 = 1;
				}
				else if ((true))
				{
					alt245 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 245, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 120:
				{
				int LA245_2 = input.LA(2);

				if ((EvaluatePredicate(synpred36_cs_fragment)))
				{
					alt245 = 2;
				}
				else if ((true))
				{
					alt245 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 245, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 103:
			case 105:
			case 106:
			case 109:
			case 114:
			case 117:
			case 119:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 177:
			case 183:
			case 185:
			case 186:
			case 189:
			case 192:
			case 194:
			case 196:
				{
				alt245 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 245, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(245); }
			switch (alt245)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:908:2: ( 'var' )=> 'var'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(908, 13);
				string_literal921=(IToken)Match(input,190,Follow._190_in_local_variable_type6681); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal921_tree = (object)adaptor.Create(string_literal921);
				adaptor.AddChild(root_0, string_literal921_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:909:4: ( 'dynamic' )=> 'dynamic'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(909, 19);
				string_literal922=(IToken)Match(input,120,Follow._120_in_local_variable_type6692); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal922_tree = (object)adaptor.Create(string_literal922);
				adaptor.AddChild(root_0, string_literal922_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:910:4: type
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(910, 4);
				PushFollow(Follow._type_in_local_variable_type6697);
				type923=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type923.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_type", 255);
			LeaveRule("local_variable_type", 255);
			LeaveRule_local_variable_type();
	        if (state.backtracking > 0) { Memoize(input, 255, local_variable_type_StartIndex); }

	    }
	 	DebugLocation(910, 8);
		} finally { DebugExitRule(GrammarFileName, "local_variable_type"); }
		return retval;

	}
	// $ANTLR end "local_variable_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_local_variable_declarators() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_local_variable_declarators() {}

	// $ANTLR start "local_variable_declarators"
	// .\\cs.g:911:1: local_variable_declarators : local_variable_declarator ( ',' local_variable_declarator )* ;
	[GrammarRule("local_variable_declarators")]
	private AstParserRuleReturnScope<object, IToken> local_variable_declarators()
	{
		EnterRule_local_variable_declarators();
		EnterRule("local_variable_declarators", 256);
		TraceIn("local_variable_declarators", 256);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int local_variable_declarators_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal925 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> local_variable_declarator924 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> local_variable_declarator926 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal925_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "local_variable_declarators");
		DebugLocation(911, 60);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 256)) { return retval; }

			// .\\cs.g:911:27: ( local_variable_declarator ( ',' local_variable_declarator )* )
			DebugEnterAlt(1);
			// .\\cs.g:912:2: local_variable_declarator ( ',' local_variable_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(912, 2);
			PushFollow(Follow._local_variable_declarator_in_local_variable_declarators6705);
			local_variable_declarator924=local_variable_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declarator924.Tree);
			DebugLocation(912, 28);
			// .\\cs.g:912:28: ( ',' local_variable_declarator )*
			try { DebugEnterSubRule(246);
			while (true)
			{
				int alt246=2;
				try { DebugEnterDecision(246, decisionCanBacktrack[246]);
				int LA246_0 = input.LA(1);

				if ((LA246_0==74))
				{
					alt246 = 1;
				}


				} finally { DebugExitDecision(246); }
				switch ( alt246 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:912:29: ',' local_variable_declarator
					{
					DebugLocation(912, 29);
					char_literal925=(IToken)Match(input,74,Follow._74_in_local_variable_declarators6708); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal925_tree = (object)adaptor.Create(char_literal925);
					adaptor.AddChild(root_0, char_literal925_tree);
					}
					DebugLocation(912, 33);
					PushFollow(Follow._local_variable_declarator_in_local_variable_declarators6710);
					local_variable_declarator926=local_variable_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declarator926.Tree);

					}
					break;

				default:
					goto loop246;
				}
			}

			loop246:
				;

			} finally { DebugExitSubRule(246); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_declarators", 256);
			LeaveRule("local_variable_declarators", 256);
			LeaveRule_local_variable_declarators();
	        if (state.backtracking > 0) { Memoize(input, 256, local_variable_declarators_StartIndex); }

	    }
	 	DebugLocation(912, 60);
		} finally { DebugExitRule(GrammarFileName, "local_variable_declarators"); }
		return retval;

	}
	// $ANTLR end "local_variable_declarators"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_local_variable_declarator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_local_variable_declarator() {}

	// $ANTLR start "local_variable_declarator"
	// .\\cs.g:913:1: local_variable_declarator : identifier ( '=' local_variable_initializer )? ;
	[GrammarRule("local_variable_declarator")]
	private AstParserRuleReturnScope<object, IToken> local_variable_declarator()
	{
		EnterRule_local_variable_declarator();
		EnterRule("local_variable_declarator", 257);
		TraceIn("local_variable_declarator", 257);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int local_variable_declarator_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal928 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier927 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> local_variable_initializer929 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal928_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "local_variable_declarator");
		DebugLocation(913, 48);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 257)) { return retval; }

			// .\\cs.g:913:26: ( identifier ( '=' local_variable_initializer )? )
			DebugEnterAlt(1);
			// .\\cs.g:914:2: identifier ( '=' local_variable_initializer )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(914, 2);
			PushFollow(Follow._identifier_in_local_variable_declarator6720);
			identifier927=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier927.Tree);
			DebugLocation(914, 13);
			// .\\cs.g:914:13: ( '=' local_variable_initializer )?
			int alt247=2;
			try { DebugEnterSubRule(247);
			try { DebugEnterDecision(247, decisionCanBacktrack[247]);
			int LA247_0 = input.LA(1);

			if ((LA247_0==85))
			{
				alt247 = 1;
			}
			} finally { DebugExitDecision(247); }
			switch (alt247)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:914:14: '=' local_variable_initializer
				{
				DebugLocation(914, 14);
				char_literal928=(IToken)Match(input,85,Follow._85_in_local_variable_declarator6723); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal928_tree = (object)adaptor.Create(char_literal928);
				adaptor.AddChild(root_0, char_literal928_tree);
				}
				DebugLocation(914, 20);
				PushFollow(Follow._local_variable_initializer_in_local_variable_declarator6727);
				local_variable_initializer929=local_variable_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_initializer929.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(247); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_declarator", 257);
			LeaveRule("local_variable_declarator", 257);
			LeaveRule_local_variable_declarator();
	        if (state.backtracking > 0) { Memoize(input, 257, local_variable_declarator_StartIndex); }

	    }
	 	DebugLocation(914, 48);
		} finally { DebugExitRule(GrammarFileName, "local_variable_declarator"); }
		return retval;

	}
	// $ANTLR end "local_variable_declarator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_local_variable_initializer() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_local_variable_initializer() {}

	// $ANTLR start "local_variable_initializer"
	// .\\cs.g:915:1: local_variable_initializer : ( expression | array_initializer | stackalloc_initializer );
	[GrammarRule("local_variable_initializer")]
	private AstParserRuleReturnScope<object, IToken> local_variable_initializer()
	{
		EnterRule_local_variable_initializer();
		EnterRule("local_variable_initializer", 258);
		TraceIn("local_variable_initializer", 258);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int local_variable_initializer_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression930 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> array_initializer931 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> stackalloc_initializer932 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "local_variable_initializer");
		DebugLocation(915, 25);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 258)) { return retval; }

			// .\\cs.g:915:27: ( expression | array_initializer | stackalloc_initializer )
			int alt248=3;
			try { DebugEnterDecision(248, decisionCanBacktrack[248]);
			switch (input.LA(1))
			{
			case Character_literal:
			case FALSE:
			case Hex_number:
			case IDENTIFIER:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 68:
			case 69:
			case 71:
			case 72:
			case 75:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 102:
			case 103:
			case 105:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 150:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 174:
			case 177:
			case 180:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 190:
			case 194:
			case 196:
			case 202:
				{
				alt248 = 1;
				}
				break;
			case 197:
				{
				alt248 = 2;
				}
				break;
			case 175:
				{
				alt248 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 248, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(248); }
			switch (alt248)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:916:2: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(916, 2);
				PushFollow(Follow._expression_in_local_variable_initializer6738);
				expression930=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression930.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:917:4: array_initializer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(917, 4);
				PushFollow(Follow._array_initializer_in_local_variable_initializer6743);
				array_initializer931=array_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, array_initializer931.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:918:4: stackalloc_initializer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(918, 4);
				PushFollow(Follow._stackalloc_initializer_in_local_variable_initializer6749);
				stackalloc_initializer932=stackalloc_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stackalloc_initializer932.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_initializer", 258);
			LeaveRule("local_variable_initializer", 258);
			LeaveRule_local_variable_initializer();
	        if (state.backtracking > 0) { Memoize(input, 258, local_variable_initializer_StartIndex); }

	    }
	 	DebugLocation(918, 25);
		} finally { DebugExitRule(GrammarFileName, "local_variable_initializer"); }
		return retval;

	}
	// $ANTLR end "local_variable_initializer"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_stackalloc_initializer() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_stackalloc_initializer() {}

	// $ANTLR start "stackalloc_initializer"
	// .\\cs.g:919:1: stackalloc_initializer : 'stackalloc' unmanaged_type '[' expression ']' ;
	[GrammarRule("stackalloc_initializer")]
	private AstParserRuleReturnScope<object, IToken> stackalloc_initializer()
	{
		EnterRule_stackalloc_initializer();
		EnterRule("stackalloc_initializer", 259);
		TraceIn("stackalloc_initializer", 259);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int stackalloc_initializer_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal933 = default(IToken);
	    IToken char_literal935 = default(IToken);
	    IToken char_literal937 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> unmanaged_type934 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression936 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal933_tree = default(object);
	    object char_literal935_tree = default(object);
	    object char_literal937_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "stackalloc_initializer");
		DebugLocation(919, 56);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 259)) { return retval; }

			// .\\cs.g:919:23: ( 'stackalloc' unmanaged_type '[' expression ']' )
			DebugEnterAlt(1);
			// .\\cs.g:920:2: 'stackalloc' unmanaged_type '[' expression ']'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(920, 2);
			string_literal933=(IToken)Match(input,175,Follow._175_in_stackalloc_initializer6756); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal933_tree = (object)adaptor.Create(string_literal933);
			adaptor.AddChild(root_0, string_literal933_tree);
			}
			DebugLocation(920, 17);
			PushFollow(Follow._unmanaged_type_in_stackalloc_initializer6760);
			unmanaged_type934=unmanaged_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unmanaged_type934.Tree);
			DebugLocation(920, 34);
			char_literal935=(IToken)Match(input,91,Follow._91_in_stackalloc_initializer6764); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal935_tree = (object)adaptor.Create(char_literal935);
			adaptor.AddChild(root_0, char_literal935_tree);
			}
			DebugLocation(920, 40);
			PushFollow(Follow._expression_in_stackalloc_initializer6768);
			expression936=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression936.Tree);
			DebugLocation(920, 53);
			char_literal937=(IToken)Match(input,92,Follow._92_in_stackalloc_initializer6772); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal937_tree = (object)adaptor.Create(char_literal937);
			adaptor.AddChild(root_0, char_literal937_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stackalloc_initializer", 259);
			LeaveRule("stackalloc_initializer", 259);
			LeaveRule_stackalloc_initializer();
	        if (state.backtracking > 0) { Memoize(input, 259, stackalloc_initializer_StartIndex); }

	    }
	 	DebugLocation(920, 56);
		} finally { DebugExitRule(GrammarFileName, "stackalloc_initializer"); }
		return retval;

	}
	// $ANTLR end "stackalloc_initializer"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_local_constant_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_local_constant_declaration() {}

	// $ANTLR start "local_constant_declaration"
	// .\\cs.g:921:1: local_constant_declaration : 'const' type constant_declarators ;
	[GrammarRule("local_constant_declaration")]
	private AstParserRuleReturnScope<object, IToken> local_constant_declaration()
	{
		EnterRule_local_constant_declaration();
		EnterRule("local_constant_declaration", 260);
		TraceIn("local_constant_declaration", 260);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int local_constant_declaration_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal938 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> type939 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> constant_declarators940 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal938_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "local_constant_declaration");
		DebugLocation(921, 39);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 260)) { return retval; }

			// .\\cs.g:921:27: ( 'const' type constant_declarators )
			DebugEnterAlt(1);
			// .\\cs.g:922:2: 'const' type constant_declarators
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(922, 2);
			string_literal938=(IToken)Match(input,112,Follow._112_in_local_constant_declaration6780); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal938_tree = (object)adaptor.Create(string_literal938);
			adaptor.AddChild(root_0, string_literal938_tree);
			}
			DebugLocation(922, 12);
			PushFollow(Follow._type_in_local_constant_declaration6784);
			type939=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type939.Tree);
			DebugLocation(922, 19);
			PushFollow(Follow._constant_declarators_in_local_constant_declaration6788);
			constant_declarators940=constant_declarators();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declarators940.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_constant_declaration", 260);
			LeaveRule("local_constant_declaration", 260);
			LeaveRule_local_constant_declaration();
	        if (state.backtracking > 0) { Memoize(input, 260, local_constant_declaration_StartIndex); }

	    }
	 	DebugLocation(922, 39);
		} finally { DebugExitRule(GrammarFileName, "local_constant_declaration"); }
		return retval;

	}
	// $ANTLR end "local_constant_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_statement() {}

	// $ANTLR start "expression_statement"
	// .\\cs.g:923:1: expression_statement : expression ';' ;
	[GrammarRule("expression_statement")]
	private AstParserRuleReturnScope<object, IToken> expression_statement()
	{
		EnterRule_expression_statement();
		EnterRule("expression_statement", 261);
		TraceIn("expression_statement", 261);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int expression_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal942 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression941 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal942_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "expression_statement");
		DebugLocation(923, 18);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 261)) { return retval; }

			// .\\cs.g:923:21: ( expression ';' )
			DebugEnterAlt(1);
			// .\\cs.g:924:2: expression ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(924, 2);
			PushFollow(Follow._expression_in_expression_statement6796);
			expression941=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression941.Tree);
			DebugLocation(924, 15);
			char_literal942=(IToken)Match(input,SEMI,Follow._SEMI_in_expression_statement6800); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal942_tree = (object)adaptor.Create(char_literal942);
			adaptor.AddChild(root_0, char_literal942_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_statement", 261);
			LeaveRule("expression_statement", 261);
			LeaveRule_expression_statement();
	        if (state.backtracking > 0) { Memoize(input, 261, expression_statement_StartIndex); }

	    }
	 	DebugLocation(924, 18);
		} finally { DebugExitRule(GrammarFileName, "expression_statement"); }
		return retval;

	}
	// $ANTLR end "expression_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_statement_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_statement_expression() {}

	// $ANTLR start "statement_expression"
	// .\\cs.g:927:1: statement_expression : expression ;
	[GrammarRule("statement_expression")]
	private AstParserRuleReturnScope<object, IToken> statement_expression()
	{
		EnterRule_statement_expression();
		EnterRule("statement_expression", 262);
		TraceIn("statement_expression", 262);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int statement_expression_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression943 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "statement_expression");
		DebugLocation(927, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 262)) { return retval; }

			// .\\cs.g:927:21: ( expression )
			DebugEnterAlt(1);
			// .\\cs.g:928:2: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(928, 2);
			PushFollow(Follow._expression_in_statement_expression6810);
			expression943=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression943.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement_expression", 262);
			LeaveRule("statement_expression", 262);
			LeaveRule_statement_expression();
	        if (state.backtracking > 0) { Memoize(input, 262, statement_expression_StartIndex); }

	    }
	 	DebugLocation(929, 1);
		} finally { DebugExitRule(GrammarFileName, "statement_expression"); }
		return retval;

	}
	// $ANTLR end "statement_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_selection_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_selection_statement() {}

	// $ANTLR start "selection_statement"
	// .\\cs.g:930:1: selection_statement : ( if_statement | switch_statement );
	[GrammarRule("selection_statement")]
	private AstParserRuleReturnScope<object, IToken> selection_statement()
	{
		EnterRule_selection_statement();
		EnterRule("selection_statement", 263);
		TraceIn("selection_statement", 263);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int selection_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> if_statement944 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> switch_statement945 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "selection_statement");
		DebugLocation(930, 20);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 263)) { return retval; }

			// .\\cs.g:930:20: ( if_statement | switch_statement )
			int alt249=2;
			try { DebugEnterDecision(249, decisionCanBacktrack[249]);
			int LA249_0 = input.LA(1);

			if ((LA249_0==IF))
			{
				alt249 = 1;
			}
			else if ((LA249_0==179))
			{
				alt249 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 249, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(249); }
			switch (alt249)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:931:2: if_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(931, 2);
				PushFollow(Follow._if_statement_in_selection_statement6819);
				if_statement944=if_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, if_statement944.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:932:4: switch_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(932, 4);
				PushFollow(Follow._switch_statement_in_selection_statement6824);
				switch_statement945=switch_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, switch_statement945.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selection_statement", 263);
			LeaveRule("selection_statement", 263);
			LeaveRule_selection_statement();
	        if (state.backtracking > 0) { Memoize(input, 263, selection_statement_StartIndex); }

	    }
	 	DebugLocation(932, 20);
		} finally { DebugExitRule(GrammarFileName, "selection_statement"); }
		return retval;

	}
	// $ANTLR end "selection_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_if_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_if_statement() {}

	// $ANTLR start "if_statement"
	// .\\cs.g:933:1: if_statement : 'if' '(' boolean_expression ')' embedded_statement ( ( 'else' )=> else_statement )? ;
	[GrammarRule("if_statement")]
	private AstParserRuleReturnScope<object, IToken> if_statement()
	{
		EnterRule_if_statement();
		EnterRule("if_statement", 264);
		TraceIn("if_statement", 264);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int if_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal946 = default(IToken);
	    IToken char_literal947 = default(IToken);
	    IToken char_literal949 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> boolean_expression948 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> embedded_statement950 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> else_statement951 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal946_tree = default(object);
	    object char_literal947_tree = default(object);
	    object char_literal949_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "if_statement");
		DebugLocation(933, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 264)) { return retval; }

			// .\\cs.g:933:13: ( 'if' '(' boolean_expression ')' embedded_statement ( ( 'else' )=> else_statement )? )
			DebugEnterAlt(1);
			// .\\cs.g:935:2: 'if' '(' boolean_expression ')' embedded_statement ( ( 'else' )=> else_statement )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(935, 2);
			string_literal946=(IToken)Match(input,IF,Follow._IF_in_if_statement6834); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal946_tree = (object)adaptor.Create(string_literal946);
			adaptor.AddChild(root_0, string_literal946_tree);
			}
			DebugLocation(935, 9);
			char_literal947=(IToken)Match(input,68,Follow._68_in_if_statement6838); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal947_tree = (object)adaptor.Create(char_literal947);
			adaptor.AddChild(root_0, char_literal947_tree);
			}
			DebugLocation(935, 15);
			PushFollow(Follow._boolean_expression_in_if_statement6842);
			boolean_expression948=boolean_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolean_expression948.Tree);
			DebugLocation(935, 36);
			char_literal949=(IToken)Match(input,RPAREN,Follow._RPAREN_in_if_statement6846); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal949_tree = (object)adaptor.Create(char_literal949);
			adaptor.AddChild(root_0, char_literal949_tree);
			}
			DebugLocation(935, 42);
			PushFollow(Follow._embedded_statement_in_if_statement6850);
			embedded_statement950=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement950.Tree);
			DebugLocation(935, 61);
			// .\\cs.g:935:61: ( ( 'else' )=> else_statement )?
			int alt250=2;
			try { DebugEnterSubRule(250);
			try { DebugEnterDecision(250, decisionCanBacktrack[250]);
			int LA250_0 = input.LA(1);

			if ((LA250_0==121))
			{
				int LA250_1 = input.LA(2);

				if ((EvaluatePredicate(synpred37_cs_fragment)))
				{
					alt250 = 1;
				}
			}
			} finally { DebugExitDecision(250); }
			switch (alt250)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:935:62: ( 'else' )=> else_statement
				{
				DebugLocation(935, 74);
				PushFollow(Follow._else_statement_in_if_statement6859);
				else_statement951=else_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, else_statement951.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(250); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("if_statement", 264);
			LeaveRule("if_statement", 264);
			LeaveRule_if_statement();
	        if (state.backtracking > 0) { Memoize(input, 264, if_statement_StartIndex); }

	    }
	 	DebugLocation(936, 1);
		} finally { DebugExitRule(GrammarFileName, "if_statement"); }
		return retval;

	}
	// $ANTLR end "if_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_else_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_else_statement() {}

	// $ANTLR start "else_statement"
	// .\\cs.g:937:1: else_statement : 'else' embedded_statement ;
	[GrammarRule("else_statement")]
	private AstParserRuleReturnScope<object, IToken> else_statement()
	{
		EnterRule_else_statement();
		EnterRule("else_statement", 265);
		TraceIn("else_statement", 265);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int else_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal952 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> embedded_statement953 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal952_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "else_statement");
		DebugLocation(937, 29);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 265)) { return retval; }

			// .\\cs.g:937:15: ( 'else' embedded_statement )
			DebugEnterAlt(1);
			// .\\cs.g:938:2: 'else' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(938, 2);
			string_literal952=(IToken)Match(input,121,Follow._121_in_else_statement6870); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal952_tree = (object)adaptor.Create(string_literal952);
			adaptor.AddChild(root_0, string_literal952_tree);
			}
			DebugLocation(938, 11);
			PushFollow(Follow._embedded_statement_in_else_statement6874);
			embedded_statement953=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement953.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("else_statement", 265);
			LeaveRule("else_statement", 265);
			LeaveRule_else_statement();
	        if (state.backtracking > 0) { Memoize(input, 265, else_statement_StartIndex); }

	    }
	 	DebugLocation(938, 29);
		} finally { DebugExitRule(GrammarFileName, "else_statement"); }
		return retval;

	}
	// $ANTLR end "else_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_switch_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_switch_statement() {}

	// $ANTLR start "switch_statement"
	// .\\cs.g:939:1: switch_statement : 'switch' '(' expression ')' switch_block ;
	[GrammarRule("switch_statement")]
	private AstParserRuleReturnScope<object, IToken> switch_statement()
	{
		EnterRule_switch_statement();
		EnterRule("switch_statement", 266);
		TraceIn("switch_statement", 266);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int switch_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal954 = default(IToken);
	    IToken char_literal955 = default(IToken);
	    IToken char_literal957 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression956 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> switch_block958 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal954_tree = default(object);
	    object char_literal955_tree = default(object);
	    object char_literal957_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "switch_statement");
		DebugLocation(939, 50);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 266)) { return retval; }

			// .\\cs.g:939:17: ( 'switch' '(' expression ')' switch_block )
			DebugEnterAlt(1);
			// .\\cs.g:940:2: 'switch' '(' expression ')' switch_block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(940, 2);
			string_literal954=(IToken)Match(input,179,Follow._179_in_switch_statement6882); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal954_tree = (object)adaptor.Create(string_literal954);
			adaptor.AddChild(root_0, string_literal954_tree);
			}
			DebugLocation(940, 13);
			char_literal955=(IToken)Match(input,68,Follow._68_in_switch_statement6886); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal955_tree = (object)adaptor.Create(char_literal955);
			adaptor.AddChild(root_0, char_literal955_tree);
			}
			DebugLocation(940, 19);
			PushFollow(Follow._expression_in_switch_statement6890);
			expression956=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression956.Tree);
			DebugLocation(940, 32);
			char_literal957=(IToken)Match(input,RPAREN,Follow._RPAREN_in_switch_statement6894); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal957_tree = (object)adaptor.Create(char_literal957);
			adaptor.AddChild(root_0, char_literal957_tree);
			}
			DebugLocation(940, 38);
			PushFollow(Follow._switch_block_in_switch_statement6898);
			switch_block958=switch_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, switch_block958.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_statement", 266);
			LeaveRule("switch_statement", 266);
			LeaveRule_switch_statement();
	        if (state.backtracking > 0) { Memoize(input, 266, switch_statement_StartIndex); }

	    }
	 	DebugLocation(940, 50);
		} finally { DebugExitRule(GrammarFileName, "switch_statement"); }
		return retval;

	}
	// $ANTLR end "switch_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_switch_block() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_switch_block() {}

	// $ANTLR start "switch_block"
	// .\\cs.g:941:1: switch_block : '{' ( switch_sections )? '}' ;
	[GrammarRule("switch_block")]
	private AstParserRuleReturnScope<object, IToken> switch_block()
	{
		EnterRule_switch_block();
		EnterRule("switch_block", 267);
		TraceIn("switch_block", 267);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int switch_block_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal959 = default(IToken);
	    IToken char_literal961 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> switch_sections960 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal959_tree = default(object);
	    object char_literal961_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "switch_block");
		DebugLocation(941, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 267)) { return retval; }

			// .\\cs.g:941:13: ( '{' ( switch_sections )? '}' )
			DebugEnterAlt(1);
			// .\\cs.g:942:2: '{' ( switch_sections )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(942, 2);
			char_literal959=(IToken)Match(input,197,Follow._197_in_switch_block6906); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal959_tree = (object)adaptor.Create(char_literal959);
			adaptor.AddChild(root_0, char_literal959_tree);
			}
			DebugLocation(942, 8);
			// .\\cs.g:942:8: ( switch_sections )?
			int alt251=2;
			try { DebugEnterSubRule(251);
			try { DebugEnterDecision(251, decisionCanBacktrack[251]);
			int LA251_0 = input.LA(1);

			if ((LA251_0==107||LA251_0==115))
			{
				alt251 = 1;
			}
			} finally { DebugExitDecision(251); }
			switch (alt251)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:942:8: switch_sections
				{
				DebugLocation(942, 8);
				PushFollow(Follow._switch_sections_in_switch_block6910);
				switch_sections960=switch_sections();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, switch_sections960.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(251); }

			DebugLocation(942, 27);
			char_literal961=(IToken)Match(input,201,Follow._201_in_switch_block6915); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal961_tree = (object)adaptor.Create(char_literal961);
			adaptor.AddChild(root_0, char_literal961_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_block", 267);
			LeaveRule("switch_block", 267);
			LeaveRule_switch_block();
	        if (state.backtracking > 0) { Memoize(input, 267, switch_block_StartIndex); }

	    }
	 	DebugLocation(942, 30);
		} finally { DebugExitRule(GrammarFileName, "switch_block"); }
		return retval;

	}
	// $ANTLR end "switch_block"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_switch_sections() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_switch_sections() {}

	// $ANTLR start "switch_sections"
	// .\\cs.g:943:1: switch_sections : ( switch_section )+ ;
	[GrammarRule("switch_sections")]
	private AstParserRuleReturnScope<object, IToken> switch_sections()
	{
		EnterRule_switch_sections();
		EnterRule("switch_sections", 268);
		TraceIn("switch_sections", 268);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int switch_sections_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> switch_section962 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "switch_sections");
		DebugLocation(943, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 268)) { return retval; }

			// .\\cs.g:943:16: ( ( switch_section )+ )
			DebugEnterAlt(1);
			// .\\cs.g:944:2: ( switch_section )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(944, 2);
			// .\\cs.g:944:2: ( switch_section )+
			int cnt252=0;
			try { DebugEnterSubRule(252);
			while (true)
			{
				int alt252=2;
				try { DebugEnterDecision(252, decisionCanBacktrack[252]);
				int LA252_0 = input.LA(1);

				if ((LA252_0==107||LA252_0==115))
				{
					alt252 = 1;
				}


				} finally { DebugExitDecision(252); }
				switch (alt252)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:944:2: switch_section
					{
					DebugLocation(944, 2);
					PushFollow(Follow._switch_section_in_switch_sections6923);
					switch_section962=switch_section();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, switch_section962.Tree);

					}
					break;

				default:
					if (cnt252 >= 1)
						goto loop252;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee252 = new EarlyExitException( 252, input );
					DebugRecognitionException(eee252);
					throw eee252;
				}
				cnt252++;
			}
			loop252:
				;

			} finally { DebugExitSubRule(252); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_sections", 268);
			LeaveRule("switch_sections", 268);
			LeaveRule_switch_sections();
	        if (state.backtracking > 0) { Memoize(input, 268, switch_sections_StartIndex); }

	    }
	 	DebugLocation(944, 17);
		} finally { DebugExitRule(GrammarFileName, "switch_sections"); }
		return retval;

	}
	// $ANTLR end "switch_sections"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_switch_section() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_switch_section() {}

	// $ANTLR start "switch_section"
	// .\\cs.g:945:1: switch_section : switch_labels statement_list ;
	[GrammarRule("switch_section")]
	private AstParserRuleReturnScope<object, IToken> switch_section()
	{
		EnterRule_switch_section();
		EnterRule("switch_section", 269);
		TraceIn("switch_section", 269);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int switch_section_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> switch_labels963 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> statement_list964 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "switch_section");
		DebugLocation(945, 32);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 269)) { return retval; }

			// .\\cs.g:945:15: ( switch_labels statement_list )
			DebugEnterAlt(1);
			// .\\cs.g:946:2: switch_labels statement_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(946, 2);
			PushFollow(Follow._switch_labels_in_switch_section6932);
			switch_labels963=switch_labels();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, switch_labels963.Tree);
			DebugLocation(946, 18);
			PushFollow(Follow._statement_list_in_switch_section6936);
			statement_list964=statement_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement_list964.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_section", 269);
			LeaveRule("switch_section", 269);
			LeaveRule_switch_section();
	        if (state.backtracking > 0) { Memoize(input, 269, switch_section_StartIndex); }

	    }
	 	DebugLocation(946, 32);
		} finally { DebugExitRule(GrammarFileName, "switch_section"); }
		return retval;

	}
	// $ANTLR end "switch_section"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_switch_labels() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_switch_labels() {}

	// $ANTLR start "switch_labels"
	// .\\cs.g:947:1: switch_labels : ( switch_label )+ ;
	[GrammarRule("switch_labels")]
	private AstParserRuleReturnScope<object, IToken> switch_labels()
	{
		EnterRule_switch_labels();
		EnterRule("switch_labels", 270);
		TraceIn("switch_labels", 270);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int switch_labels_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> switch_label965 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "switch_labels");
		DebugLocation(947, 15);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 270)) { return retval; }

			// .\\cs.g:947:14: ( ( switch_label )+ )
			DebugEnterAlt(1);
			// .\\cs.g:948:2: ( switch_label )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(948, 2);
			// .\\cs.g:948:2: ( switch_label )+
			int cnt253=0;
			try { DebugEnterSubRule(253);
			while (true)
			{
				int alt253=2;
				try { DebugEnterDecision(253, decisionCanBacktrack[253]);
				int LA253_0 = input.LA(1);

				if ((LA253_0==115))
				{
					int LA253_2 = input.LA(2);

					if ((LA253_2==79))
					{
						alt253 = 1;
					}


				}
				else if ((LA253_0==107))
				{
					alt253 = 1;
				}


				} finally { DebugExitDecision(253); }
				switch (alt253)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:948:2: switch_label
					{
					DebugLocation(948, 2);
					PushFollow(Follow._switch_label_in_switch_labels6944);
					switch_label965=switch_label();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, switch_label965.Tree);

					}
					break;

				default:
					if (cnt253 >= 1)
						goto loop253;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee253 = new EarlyExitException( 253, input );
					DebugRecognitionException(eee253);
					throw eee253;
				}
				cnt253++;
			}
			loop253:
				;

			} finally { DebugExitSubRule(253); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_labels", 270);
			LeaveRule("switch_labels", 270);
			LeaveRule_switch_labels();
	        if (state.backtracking > 0) { Memoize(input, 270, switch_labels_StartIndex); }

	    }
	 	DebugLocation(948, 15);
		} finally { DebugExitRule(GrammarFileName, "switch_labels"); }
		return retval;

	}
	// $ANTLR end "switch_labels"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_switch_label() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_switch_label() {}

	// $ANTLR start "switch_label"
	// .\\cs.g:949:1: switch_label : ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) );
	[GrammarRule("switch_label")]
	private AstParserRuleReturnScope<object, IToken> switch_label()
	{
		EnterRule_switch_label();
		EnterRule("switch_label", 271);
		TraceIn("switch_label", 271);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int switch_label_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal966 = default(IToken);
	    IToken char_literal968 = default(IToken);
	    IToken string_literal969 = default(IToken);
	    IToken char_literal970 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> constant_expression967 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal966_tree = default(object);
	    object char_literal968_tree = default(object);
	    object string_literal969_tree = default(object);
	    object char_literal970_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "switch_label");
		DebugLocation(949, 21);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 271)) { return retval; }

			// .\\cs.g:949:13: ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) )
			int alt254=2;
			try { DebugEnterDecision(254, decisionCanBacktrack[254]);
			int LA254_0 = input.LA(1);

			if ((LA254_0==107))
			{
				alt254 = 1;
			}
			else if ((LA254_0==115))
			{
				alt254 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 254, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(254); }
			switch (alt254)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:950:2: ( 'case' constant_expression ':' )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(950, 2);
				// .\\cs.g:950:2: ( 'case' constant_expression ':' )
				DebugEnterAlt(1);
				// .\\cs.g:950:3: 'case' constant_expression ':'
				{
				DebugLocation(950, 3);
				string_literal966=(IToken)Match(input,107,Follow._107_in_switch_label6954); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal966_tree = (object)adaptor.Create(string_literal966);
				adaptor.AddChild(root_0, string_literal966_tree);
				}
				DebugLocation(950, 12);
				PushFollow(Follow._constant_expression_in_switch_label6958);
				constant_expression967=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression967.Tree);
				DebugLocation(950, 34);
				char_literal968=(IToken)Match(input,79,Follow._79_in_switch_label6962); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal968_tree = (object)adaptor.Create(char_literal968);
				adaptor.AddChild(root_0, char_literal968_tree);
				}

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:951:4: ( 'default' ':' )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(951, 4);
				// .\\cs.g:951:4: ( 'default' ':' )
				DebugEnterAlt(1);
				// .\\cs.g:951:5: 'default' ':'
				{
				DebugLocation(951, 5);
				string_literal969=(IToken)Match(input,115,Follow._115_in_switch_label6969); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal969_tree = (object)adaptor.Create(string_literal969);
				adaptor.AddChild(root_0, string_literal969_tree);
				}
				DebugLocation(951, 17);
				char_literal970=(IToken)Match(input,79,Follow._79_in_switch_label6973); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal970_tree = (object)adaptor.Create(char_literal970);
				adaptor.AddChild(root_0, char_literal970_tree);
				}

				}


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_label", 271);
			LeaveRule("switch_label", 271);
			LeaveRule_switch_label();
	        if (state.backtracking > 0) { Memoize(input, 271, switch_label_StartIndex); }

	    }
	 	DebugLocation(951, 21);
		} finally { DebugExitRule(GrammarFileName, "switch_label"); }
		return retval;

	}
	// $ANTLR end "switch_label"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_iteration_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_iteration_statement() {}

	// $ANTLR start "iteration_statement"
	// .\\cs.g:952:1: iteration_statement : ( while_statement | do_statement | for_statement | foreach_statement );
	[GrammarRule("iteration_statement")]
	private AstParserRuleReturnScope<object, IToken> iteration_statement()
	{
		EnterRule_iteration_statement();
		EnterRule("iteration_statement", 272);
		TraceIn("iteration_statement", 272);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int iteration_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> while_statement971 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> do_statement972 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> for_statement973 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> foreach_statement974 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "iteration_statement");
		DebugLocation(952, 21);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 272)) { return retval; }

			// .\\cs.g:952:20: ( while_statement | do_statement | for_statement | foreach_statement )
			int alt255=4;
			try { DebugEnterDecision(255, decisionCanBacktrack[255]);
			switch (input.LA(1))
			{
			case 195:
				{
				alt255 = 1;
				}
				break;
			case 118:
				{
				alt255 = 2;
				}
				break;
			case 130:
				{
				alt255 = 3;
				}
				break;
			case 131:
				{
				alt255 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 255, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(255); }
			switch (alt255)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:953:2: while_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(953, 2);
				PushFollow(Follow._while_statement_in_iteration_statement6982);
				while_statement971=while_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, while_statement971.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:954:4: do_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(954, 4);
				PushFollow(Follow._do_statement_in_iteration_statement6987);
				do_statement972=do_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, do_statement972.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:955:4: for_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(955, 4);
				PushFollow(Follow._for_statement_in_iteration_statement6992);
				for_statement973=for_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_statement973.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// .\\cs.g:956:4: foreach_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(956, 4);
				PushFollow(Follow._foreach_statement_in_iteration_statement6997);
				foreach_statement974=foreach_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, foreach_statement974.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("iteration_statement", 272);
			LeaveRule("iteration_statement", 272);
			LeaveRule_iteration_statement();
	        if (state.backtracking > 0) { Memoize(input, 272, iteration_statement_StartIndex); }

	    }
	 	DebugLocation(956, 21);
		} finally { DebugExitRule(GrammarFileName, "iteration_statement"); }
		return retval;

	}
	// $ANTLR end "iteration_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_while_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_while_statement() {}

	// $ANTLR start "while_statement"
	// .\\cs.g:957:1: while_statement : 'while' '(' boolean_expression ')' embedded_statement ;
	[GrammarRule("while_statement")]
	private AstParserRuleReturnScope<object, IToken> while_statement()
	{
		EnterRule_while_statement();
		EnterRule("while_statement", 273);
		TraceIn("while_statement", 273);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int while_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal975 = default(IToken);
	    IToken char_literal976 = default(IToken);
	    IToken char_literal978 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> boolean_expression977 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> embedded_statement979 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal975_tree = default(object);
	    object char_literal976_tree = default(object);
	    object char_literal978_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "while_statement");
		DebugLocation(957, 63);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 273)) { return retval; }

			// .\\cs.g:957:16: ( 'while' '(' boolean_expression ')' embedded_statement )
			DebugEnterAlt(1);
			// .\\cs.g:958:2: 'while' '(' boolean_expression ')' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(958, 2);
			string_literal975=(IToken)Match(input,195,Follow._195_in_while_statement7005); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal975_tree = (object)adaptor.Create(string_literal975);
			adaptor.AddChild(root_0, string_literal975_tree);
			}
			DebugLocation(958, 12);
			char_literal976=(IToken)Match(input,68,Follow._68_in_while_statement7009); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal976_tree = (object)adaptor.Create(char_literal976);
			adaptor.AddChild(root_0, char_literal976_tree);
			}
			DebugLocation(958, 18);
			PushFollow(Follow._boolean_expression_in_while_statement7013);
			boolean_expression977=boolean_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolean_expression977.Tree);
			DebugLocation(958, 39);
			char_literal978=(IToken)Match(input,RPAREN,Follow._RPAREN_in_while_statement7017); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal978_tree = (object)adaptor.Create(char_literal978);
			adaptor.AddChild(root_0, char_literal978_tree);
			}
			DebugLocation(958, 45);
			PushFollow(Follow._embedded_statement_in_while_statement7021);
			embedded_statement979=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement979.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("while_statement", 273);
			LeaveRule("while_statement", 273);
			LeaveRule_while_statement();
	        if (state.backtracking > 0) { Memoize(input, 273, while_statement_StartIndex); }

	    }
	 	DebugLocation(958, 63);
		} finally { DebugExitRule(GrammarFileName, "while_statement"); }
		return retval;

	}
	// $ANTLR end "while_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_do_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_do_statement() {}

	// $ANTLR start "do_statement"
	// .\\cs.g:959:1: do_statement : 'do' embedded_statement 'while' '(' boolean_expression ')' ';' ;
	[GrammarRule("do_statement")]
	private AstParserRuleReturnScope<object, IToken> do_statement()
	{
		EnterRule_do_statement();
		EnterRule("do_statement", 274);
		TraceIn("do_statement", 274);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int do_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal980 = default(IToken);
	    IToken string_literal982 = default(IToken);
	    IToken char_literal983 = default(IToken);
	    IToken char_literal985 = default(IToken);
	    IToken char_literal986 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> embedded_statement981 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> boolean_expression984 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal980_tree = default(object);
	    object string_literal982_tree = default(object);
	    object char_literal983_tree = default(object);
	    object char_literal985_tree = default(object);
	    object char_literal986_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "do_statement");
		DebugLocation(959, 76);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 274)) { return retval; }

			// .\\cs.g:959:13: ( 'do' embedded_statement 'while' '(' boolean_expression ')' ';' )
			DebugEnterAlt(1);
			// .\\cs.g:960:2: 'do' embedded_statement 'while' '(' boolean_expression ')' ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(960, 2);
			string_literal980=(IToken)Match(input,118,Follow._118_in_do_statement7029); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal980_tree = (object)adaptor.Create(string_literal980);
			adaptor.AddChild(root_0, string_literal980_tree);
			}
			DebugLocation(960, 9);
			PushFollow(Follow._embedded_statement_in_do_statement7033);
			embedded_statement981=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement981.Tree);
			DebugLocation(960, 30);
			string_literal982=(IToken)Match(input,195,Follow._195_in_do_statement7037); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal982_tree = (object)adaptor.Create(string_literal982);
			adaptor.AddChild(root_0, string_literal982_tree);
			}
			DebugLocation(960, 40);
			char_literal983=(IToken)Match(input,68,Follow._68_in_do_statement7041); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal983_tree = (object)adaptor.Create(char_literal983);
			adaptor.AddChild(root_0, char_literal983_tree);
			}
			DebugLocation(960, 46);
			PushFollow(Follow._boolean_expression_in_do_statement7045);
			boolean_expression984=boolean_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolean_expression984.Tree);
			DebugLocation(960, 67);
			char_literal985=(IToken)Match(input,RPAREN,Follow._RPAREN_in_do_statement7049); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal985_tree = (object)adaptor.Create(char_literal985);
			adaptor.AddChild(root_0, char_literal985_tree);
			}
			DebugLocation(960, 73);
			char_literal986=(IToken)Match(input,SEMI,Follow._SEMI_in_do_statement7053); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal986_tree = (object)adaptor.Create(char_literal986);
			adaptor.AddChild(root_0, char_literal986_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("do_statement", 274);
			LeaveRule("do_statement", 274);
			LeaveRule_do_statement();
	        if (state.backtracking > 0) { Memoize(input, 274, do_statement_StartIndex); }

	    }
	 	DebugLocation(960, 76);
		} finally { DebugExitRule(GrammarFileName, "do_statement"); }
		return retval;

	}
	// $ANTLR end "do_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_for_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_for_statement() {}

	// $ANTLR start "for_statement"
	// .\\cs.g:961:1: for_statement : 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement ;
	[GrammarRule("for_statement")]
	private AstParserRuleReturnScope<object, IToken> for_statement()
	{
		EnterRule_for_statement();
		EnterRule("for_statement", 275);
		TraceIn("for_statement", 275);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int for_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal987 = default(IToken);
	    IToken char_literal988 = default(IToken);
	    IToken char_literal990 = default(IToken);
	    IToken char_literal992 = default(IToken);
	    IToken char_literal994 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> for_initializer989 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> for_condition991 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> for_iterator993 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> embedded_statement995 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal987_tree = default(object);
	    object char_literal988_tree = default(object);
	    object char_literal990_tree = default(object);
	    object char_literal992_tree = default(object);
	    object char_literal994_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "for_statement");
		DebugLocation(961, 104);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 275)) { return retval; }

			// .\\cs.g:961:14: ( 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement )
			DebugEnterAlt(1);
			// .\\cs.g:962:2: 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(962, 2);
			string_literal987=(IToken)Match(input,130,Follow._130_in_for_statement7061); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal987_tree = (object)adaptor.Create(string_literal987);
			adaptor.AddChild(root_0, string_literal987_tree);
			}
			DebugLocation(962, 10);
			char_literal988=(IToken)Match(input,68,Follow._68_in_for_statement7065); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal988_tree = (object)adaptor.Create(char_literal988);
			adaptor.AddChild(root_0, char_literal988_tree);
			}
			DebugLocation(962, 16);
			// .\\cs.g:962:16: ( for_initializer )?
			int alt256=2;
			try { DebugEnterSubRule(256);
			try { DebugEnterDecision(256, decisionCanBacktrack[256]);
			int LA256_0 = input.LA(1);

			if ((LA256_0==Character_literal||LA256_0==FALSE||(LA256_0>=Hex_number && LA256_0<=IDENTIFIER)||(LA256_0>=MINUS && LA256_0<=NUMBER)||LA256_0==Real_literal||LA256_0==STRINGLITERAL||LA256_0==TRUE||LA256_0==Verbatim_string_literal||LA256_0==61||LA256_0==66||(LA256_0>=68 && LA256_0<=69)||(LA256_0>=71 && LA256_0<=72)||LA256_0==75||LA256_0==95||(LA256_0>=97 && LA256_0<=98)||(LA256_0>=100 && LA256_0<=103)||(LA256_0>=105 && LA256_0<=106)||(LA256_0>=109 && LA256_0<=110)||(LA256_0>=114 && LA256_0<=117)||(LA256_0>=119 && LA256_0<=120)||LA256_0==122||LA256_0==126||LA256_0==129||LA256_0==132||LA256_0==135||LA256_0==138||LA256_0==141||(LA256_0>=143 && LA256_0<=144)||(LA256_0>=146 && LA256_0<=148)||(LA256_0>=150 && LA256_0<=152)||LA256_0==154||LA256_0==157||LA256_0==160||LA256_0==162||LA256_0==167||LA256_0==169||(LA256_0>=171 && LA256_0<=174)||LA256_0==177||LA256_0==180||(LA256_0>=183 && LA256_0<=187)||(LA256_0>=189 && LA256_0<=190)||LA256_0==192||LA256_0==194||LA256_0==196||LA256_0==202))
			{
				alt256 = 1;
			}
			} finally { DebugExitDecision(256); }
			switch (alt256)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:962:16: for_initializer
				{
				DebugLocation(962, 16);
				PushFollow(Follow._for_initializer_in_for_statement7069);
				for_initializer989=for_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_initializer989.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(256); }

			DebugLocation(962, 35);
			char_literal990=(IToken)Match(input,SEMI,Follow._SEMI_in_for_statement7074); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal990_tree = (object)adaptor.Create(char_literal990);
			adaptor.AddChild(root_0, char_literal990_tree);
			}
			DebugLocation(962, 41);
			// .\\cs.g:962:41: ( for_condition )?
			int alt257=2;
			try { DebugEnterSubRule(257);
			try { DebugEnterDecision(257, decisionCanBacktrack[257]);
			int LA257_0 = input.LA(1);

			if ((LA257_0==Character_literal||LA257_0==FALSE||(LA257_0>=Hex_number && LA257_0<=IDENTIFIER)||(LA257_0>=MINUS && LA257_0<=NUMBER)||LA257_0==Real_literal||LA257_0==STRINGLITERAL||LA257_0==TRUE||LA257_0==Verbatim_string_literal||LA257_0==61||LA257_0==66||(LA257_0>=68 && LA257_0<=69)||(LA257_0>=71 && LA257_0<=72)||LA257_0==75||LA257_0==95||(LA257_0>=97 && LA257_0<=98)||(LA257_0>=100 && LA257_0<=103)||(LA257_0>=105 && LA257_0<=106)||(LA257_0>=109 && LA257_0<=110)||(LA257_0>=114 && LA257_0<=117)||(LA257_0>=119 && LA257_0<=120)||LA257_0==122||LA257_0==126||LA257_0==129||LA257_0==132||LA257_0==135||LA257_0==138||LA257_0==141||(LA257_0>=143 && LA257_0<=144)||(LA257_0>=146 && LA257_0<=148)||(LA257_0>=150 && LA257_0<=152)||LA257_0==154||LA257_0==157||LA257_0==160||LA257_0==162||LA257_0==167||LA257_0==169||(LA257_0>=171 && LA257_0<=174)||LA257_0==177||LA257_0==180||(LA257_0>=183 && LA257_0<=187)||(LA257_0>=189 && LA257_0<=190)||LA257_0==194||LA257_0==196||LA257_0==202))
			{
				alt257 = 1;
			}
			} finally { DebugExitDecision(257); }
			switch (alt257)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:962:41: for_condition
				{
				DebugLocation(962, 41);
				PushFollow(Follow._for_condition_in_for_statement7078);
				for_condition991=for_condition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_condition991.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(257); }

			DebugLocation(962, 58);
			char_literal992=(IToken)Match(input,SEMI,Follow._SEMI_in_for_statement7083); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal992_tree = (object)adaptor.Create(char_literal992);
			adaptor.AddChild(root_0, char_literal992_tree);
			}
			DebugLocation(962, 64);
			// .\\cs.g:962:64: ( for_iterator )?
			int alt258=2;
			try { DebugEnterSubRule(258);
			try { DebugEnterDecision(258, decisionCanBacktrack[258]);
			int LA258_0 = input.LA(1);

			if ((LA258_0==Character_literal||LA258_0==FALSE||(LA258_0>=Hex_number && LA258_0<=IDENTIFIER)||(LA258_0>=MINUS && LA258_0<=NUMBER)||LA258_0==Real_literal||LA258_0==STRINGLITERAL||LA258_0==TRUE||LA258_0==Verbatim_string_literal||LA258_0==61||LA258_0==66||(LA258_0>=68 && LA258_0<=69)||(LA258_0>=71 && LA258_0<=72)||LA258_0==75||LA258_0==95||(LA258_0>=97 && LA258_0<=98)||(LA258_0>=100 && LA258_0<=103)||(LA258_0>=105 && LA258_0<=106)||(LA258_0>=109 && LA258_0<=110)||(LA258_0>=114 && LA258_0<=117)||(LA258_0>=119 && LA258_0<=120)||LA258_0==122||LA258_0==126||LA258_0==129||LA258_0==132||LA258_0==135||LA258_0==138||LA258_0==141||(LA258_0>=143 && LA258_0<=144)||(LA258_0>=146 && LA258_0<=148)||(LA258_0>=150 && LA258_0<=152)||LA258_0==154||LA258_0==157||LA258_0==160||LA258_0==162||LA258_0==167||LA258_0==169||(LA258_0>=171 && LA258_0<=174)||LA258_0==177||LA258_0==180||(LA258_0>=183 && LA258_0<=187)||(LA258_0>=189 && LA258_0<=190)||LA258_0==194||LA258_0==196||LA258_0==202))
			{
				alt258 = 1;
			}
			} finally { DebugExitDecision(258); }
			switch (alt258)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:962:64: for_iterator
				{
				DebugLocation(962, 64);
				PushFollow(Follow._for_iterator_in_for_statement7087);
				for_iterator993=for_iterator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_iterator993.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(258); }

			DebugLocation(962, 80);
			char_literal994=(IToken)Match(input,RPAREN,Follow._RPAREN_in_for_statement7092); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal994_tree = (object)adaptor.Create(char_literal994);
			adaptor.AddChild(root_0, char_literal994_tree);
			}
			DebugLocation(962, 86);
			PushFollow(Follow._embedded_statement_in_for_statement7096);
			embedded_statement995=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement995.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_statement", 275);
			LeaveRule("for_statement", 275);
			LeaveRule_for_statement();
	        if (state.backtracking > 0) { Memoize(input, 275, for_statement_StartIndex); }

	    }
	 	DebugLocation(962, 104);
		} finally { DebugExitRule(GrammarFileName, "for_statement"); }
		return retval;

	}
	// $ANTLR end "for_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_for_initializer() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_for_initializer() {}

	// $ANTLR start "for_initializer"
	// .\\cs.g:963:1: for_initializer : ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list );
	[GrammarRule("for_initializer")]
	private AstParserRuleReturnScope<object, IToken> for_initializer()
	{
		EnterRule_for_initializer();
		EnterRule("for_initializer", 276);
		TraceIn("for_initializer", 276);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int for_initializer_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> local_variable_declaration996 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> statement_expression_list997 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "for_initializer");
		DebugLocation(963, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 276)) { return retval; }

			// .\\cs.g:963:16: ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list )
			int alt259=2;
			try { DebugEnterDecision(259, decisionCanBacktrack[259]);
			int LA259_0 = input.LA(1);

			if ((LA259_0==190))
			{
				int LA259_1 = input.LA(2);

				if ((EvaluatePredicate(synpred38_cs_fragment)))
				{
					alt259 = 1;
				}
				else if ((true))
				{
					alt259 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 259, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA259_0==120))
			{
				int LA259_2 = input.LA(2);

				if ((EvaluatePredicate(synpred38_cs_fragment)))
				{
					alt259 = 1;
				}
				else if ((true))
				{
					alt259 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 259, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA259_0==103||LA259_0==106||LA259_0==109||LA259_0==114||LA259_0==119||LA259_0==129||LA259_0==138||LA259_0==146||LA259_0==151||LA259_0==169||LA259_0==173||LA259_0==177||(LA259_0>=185 && LA259_0<=186)||LA259_0==189))
			{
				int LA259_3 = input.LA(2);

				if ((EvaluatePredicate(synpred38_cs_fragment)))
				{
					alt259 = 1;
				}
				else if ((true))
				{
					alt259 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 259, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA259_0==132))
			{
				int LA259_4 = input.LA(2);

				if ((EvaluatePredicate(synpred38_cs_fragment)))
				{
					alt259 = 1;
				}
				else if ((true))
				{
					alt259 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 259, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA259_0==192) && (EvaluatePredicate(synpred38_cs_fragment)))
			{
				alt259 = 1;
			}
			else if ((LA259_0==Character_literal||LA259_0==FALSE||LA259_0==Hex_number||(LA259_0>=MINUS && LA259_0<=NUMBER)||LA259_0==Real_literal||LA259_0==STRINGLITERAL||LA259_0==TRUE||LA259_0==Verbatim_string_literal||LA259_0==61||LA259_0==66||(LA259_0>=68 && LA259_0<=69)||(LA259_0>=71 && LA259_0<=72)||LA259_0==75||LA259_0==102||LA259_0==110||(LA259_0>=115 && LA259_0<=116)||LA259_0==150||LA259_0==174||LA259_0==180||LA259_0==184||LA259_0==187||LA259_0==202))
			{
				alt259 = 2;
			}
			else if ((LA259_0==IDENTIFIER||LA259_0==95||(LA259_0>=97 && LA259_0<=98)||(LA259_0>=100 && LA259_0<=101)||LA259_0==105||LA259_0==117||LA259_0==122||LA259_0==126||LA259_0==135||LA259_0==141||(LA259_0>=143 && LA259_0<=144)||(LA259_0>=147 && LA259_0<=148)||LA259_0==152||LA259_0==154||LA259_0==157||LA259_0==160||LA259_0==162||LA259_0==167||(LA259_0>=171 && LA259_0<=172)||LA259_0==183||LA259_0==194||LA259_0==196))
			{
				int LA259_25 = input.LA(2);

				if ((EvaluatePredicate(synpred38_cs_fragment)))
				{
					alt259 = 1;
				}
				else if ((true))
				{
					alt259 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 259, 25, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 259, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(259); }
			switch (alt259)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:964:2: ( local_variable_declaration )=> local_variable_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(964, 34);
				PushFollow(Follow._local_variable_declaration_in_for_initializer7110);
				local_variable_declaration996=local_variable_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declaration996.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:965:4: statement_expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(965, 4);
				PushFollow(Follow._statement_expression_list_in_for_initializer7115);
				statement_expression_list997=statement_expression_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement_expression_list997.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_initializer", 276);
			LeaveRule("for_initializer", 276);
			LeaveRule_for_initializer();
	        if (state.backtracking > 0) { Memoize(input, 276, for_initializer_StartIndex); }

	    }
	 	DebugLocation(966, 1);
		} finally { DebugExitRule(GrammarFileName, "for_initializer"); }
		return retval;

	}
	// $ANTLR end "for_initializer"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_for_condition() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_for_condition() {}

	// $ANTLR start "for_condition"
	// .\\cs.g:967:1: for_condition : boolean_expression ;
	[GrammarRule("for_condition")]
	private AstParserRuleReturnScope<object, IToken> for_condition()
	{
		EnterRule_for_condition();
		EnterRule("for_condition", 277);
		TraceIn("for_condition", 277);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int for_condition_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> boolean_expression998 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "for_condition");
		DebugLocation(967, 20);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 277)) { return retval; }

			// .\\cs.g:967:14: ( boolean_expression )
			DebugEnterAlt(1);
			// .\\cs.g:968:2: boolean_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(968, 2);
			PushFollow(Follow._boolean_expression_in_for_condition7125);
			boolean_expression998=boolean_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolean_expression998.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_condition", 277);
			LeaveRule("for_condition", 277);
			LeaveRule_for_condition();
	        if (state.backtracking > 0) { Memoize(input, 277, for_condition_StartIndex); }

	    }
	 	DebugLocation(968, 20);
		} finally { DebugExitRule(GrammarFileName, "for_condition"); }
		return retval;

	}
	// $ANTLR end "for_condition"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_for_iterator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_for_iterator() {}

	// $ANTLR start "for_iterator"
	// .\\cs.g:969:1: for_iterator : statement_expression_list ;
	[GrammarRule("for_iterator")]
	private AstParserRuleReturnScope<object, IToken> for_iterator()
	{
		EnterRule_for_iterator();
		EnterRule("for_iterator", 278);
		TraceIn("for_iterator", 278);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int for_iterator_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> statement_expression_list999 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "for_iterator");
		DebugLocation(969, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 278)) { return retval; }

			// .\\cs.g:969:13: ( statement_expression_list )
			DebugEnterAlt(1);
			// .\\cs.g:970:2: statement_expression_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(970, 2);
			PushFollow(Follow._statement_expression_list_in_for_iterator7133);
			statement_expression_list999=statement_expression_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement_expression_list999.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_iterator", 278);
			LeaveRule("for_iterator", 278);
			LeaveRule_for_iterator();
	        if (state.backtracking > 0) { Memoize(input, 278, for_iterator_StartIndex); }

	    }
	 	DebugLocation(970, 27);
		} finally { DebugExitRule(GrammarFileName, "for_iterator"); }
		return retval;

	}
	// $ANTLR end "for_iterator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_statement_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_statement_expression_list() {}

	// $ANTLR start "statement_expression_list"
	// .\\cs.g:971:1: statement_expression_list : statement_expression ( ',' statement_expression )* ;
	[GrammarRule("statement_expression_list")]
	private AstParserRuleReturnScope<object, IToken> statement_expression_list()
	{
		EnterRule_statement_expression_list();
		EnterRule("statement_expression_list", 279);
		TraceIn("statement_expression_list", 279);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int statement_expression_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal1001 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> statement_expression1000 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> statement_expression1002 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal1001_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "statement_expression_list");
		DebugLocation(971, 50);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 279)) { return retval; }

			// .\\cs.g:971:26: ( statement_expression ( ',' statement_expression )* )
			DebugEnterAlt(1);
			// .\\cs.g:972:2: statement_expression ( ',' statement_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(972, 2);
			PushFollow(Follow._statement_expression_in_statement_expression_list7141);
			statement_expression1000=statement_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement_expression1000.Tree);
			DebugLocation(972, 23);
			// .\\cs.g:972:23: ( ',' statement_expression )*
			try { DebugEnterSubRule(260);
			while (true)
			{
				int alt260=2;
				try { DebugEnterDecision(260, decisionCanBacktrack[260]);
				int LA260_0 = input.LA(1);

				if ((LA260_0==74))
				{
					alt260 = 1;
				}


				} finally { DebugExitDecision(260); }
				switch ( alt260 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:972:24: ',' statement_expression
					{
					DebugLocation(972, 24);
					char_literal1001=(IToken)Match(input,74,Follow._74_in_statement_expression_list7144); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1001_tree = (object)adaptor.Create(char_literal1001);
					adaptor.AddChild(root_0, char_literal1001_tree);
					}
					DebugLocation(972, 28);
					PushFollow(Follow._statement_expression_in_statement_expression_list7146);
					statement_expression1002=statement_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement_expression1002.Tree);

					}
					break;

				default:
					goto loop260;
				}
			}

			loop260:
				;

			} finally { DebugExitSubRule(260); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement_expression_list", 279);
			LeaveRule("statement_expression_list", 279);
			LeaveRule_statement_expression_list();
	        if (state.backtracking > 0) { Memoize(input, 279, statement_expression_list_StartIndex); }

	    }
	 	DebugLocation(972, 50);
		} finally { DebugExitRule(GrammarFileName, "statement_expression_list"); }
		return retval;

	}
	// $ANTLR end "statement_expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_foreach_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_foreach_statement() {}

	// $ANTLR start "foreach_statement"
	// .\\cs.g:973:1: foreach_statement : 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement ;
	[GrammarRule("foreach_statement")]
	private AstParserRuleReturnScope<object, IToken> foreach_statement()
	{
		EnterRule_foreach_statement();
		EnterRule("foreach_statement", 280);
		TraceIn("foreach_statement", 280);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int foreach_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal1003 = default(IToken);
	    IToken char_literal1004 = default(IToken);
	    IToken string_literal1007 = default(IToken);
	    IToken char_literal1009 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> local_variable_type1005 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier1006 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression1008 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> embedded_statement1010 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal1003_tree = default(object);
	    object char_literal1004_tree = default(object);
	    object string_literal1007_tree = default(object);
	    object char_literal1009_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "foreach_statement");
		DebugLocation(973, 99);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 280)) { return retval; }

			// .\\cs.g:973:18: ( 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement )
			DebugEnterAlt(1);
			// .\\cs.g:974:2: 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(974, 2);
			string_literal1003=(IToken)Match(input,131,Follow._131_in_foreach_statement7156); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1003_tree = (object)adaptor.Create(string_literal1003);
			adaptor.AddChild(root_0, string_literal1003_tree);
			}
			DebugLocation(974, 14);
			char_literal1004=(IToken)Match(input,68,Follow._68_in_foreach_statement7160); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1004_tree = (object)adaptor.Create(char_literal1004);
			adaptor.AddChild(root_0, char_literal1004_tree);
			}
			DebugLocation(974, 20);
			PushFollow(Follow._local_variable_type_in_foreach_statement7164);
			local_variable_type1005=local_variable_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_type1005.Tree);
			DebugLocation(974, 42);
			PushFollow(Follow._identifier_in_foreach_statement7168);
			identifier1006=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier1006.Tree);
			DebugLocation(974, 55);
			string_literal1007=(IToken)Match(input,137,Follow._137_in_foreach_statement7172); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1007_tree = (object)adaptor.Create(string_literal1007);
			adaptor.AddChild(root_0, string_literal1007_tree);
			}
			DebugLocation(974, 62);
			PushFollow(Follow._expression_in_foreach_statement7176);
			expression1008=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression1008.Tree);
			DebugLocation(974, 75);
			char_literal1009=(IToken)Match(input,RPAREN,Follow._RPAREN_in_foreach_statement7180); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1009_tree = (object)adaptor.Create(char_literal1009);
			adaptor.AddChild(root_0, char_literal1009_tree);
			}
			DebugLocation(974, 81);
			PushFollow(Follow._embedded_statement_in_foreach_statement7184);
			embedded_statement1010=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement1010.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("foreach_statement", 280);
			LeaveRule("foreach_statement", 280);
			LeaveRule_foreach_statement();
	        if (state.backtracking > 0) { Memoize(input, 280, foreach_statement_StartIndex); }

	    }
	 	DebugLocation(974, 99);
		} finally { DebugExitRule(GrammarFileName, "foreach_statement"); }
		return retval;

	}
	// $ANTLR end "foreach_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_jump_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_jump_statement() {}

	// $ANTLR start "jump_statement"
	// .\\cs.g:975:1: jump_statement : ( break_statement | continue_statement | goto_statement | return_statement | throw_statement );
	[GrammarRule("jump_statement")]
	private AstParserRuleReturnScope<object, IToken> jump_statement()
	{
		EnterRule_jump_statement();
		EnterRule("jump_statement", 281);
		TraceIn("jump_statement", 281);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int jump_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> break_statement1011 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> continue_statement1012 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> goto_statement1013 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> return_statement1014 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> throw_statement1015 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "jump_statement");
		DebugLocation(975, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 281)) { return retval; }

			// .\\cs.g:975:15: ( break_statement | continue_statement | goto_statement | return_statement | throw_statement )
			int alt261=5;
			try { DebugEnterDecision(261, decisionCanBacktrack[261]);
			switch (input.LA(1))
			{
			case 104:
				{
				alt261 = 1;
				}
				break;
			case 113:
				{
				alt261 = 2;
				}
				break;
			case 134:
				{
				alt261 = 3;
				}
				break;
			case 168:
				{
				alt261 = 4;
				}
				break;
			case 181:
				{
				alt261 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 261, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(261); }
			switch (alt261)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:976:2: break_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(976, 2);
				PushFollow(Follow._break_statement_in_jump_statement7192);
				break_statement1011=break_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, break_statement1011.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:977:4: continue_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(977, 4);
				PushFollow(Follow._continue_statement_in_jump_statement7197);
				continue_statement1012=continue_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, continue_statement1012.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:978:4: goto_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(978, 4);
				PushFollow(Follow._goto_statement_in_jump_statement7202);
				goto_statement1013=goto_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, goto_statement1013.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// .\\cs.g:979:4: return_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(979, 4);
				PushFollow(Follow._return_statement_in_jump_statement7207);
				return_statement1014=return_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, return_statement1014.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// .\\cs.g:980:4: throw_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(980, 4);
				PushFollow(Follow._throw_statement_in_jump_statement7212);
				throw_statement1015=throw_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, throw_statement1015.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("jump_statement", 281);
			LeaveRule("jump_statement", 281);
			LeaveRule_jump_statement();
	        if (state.backtracking > 0) { Memoize(input, 281, jump_statement_StartIndex); }

	    }
	 	DebugLocation(980, 19);
		} finally { DebugExitRule(GrammarFileName, "jump_statement"); }
		return retval;

	}
	// $ANTLR end "jump_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_break_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_break_statement() {}

	// $ANTLR start "break_statement"
	// .\\cs.g:981:1: break_statement : 'break' ';' ;
	[GrammarRule("break_statement")]
	private AstParserRuleReturnScope<object, IToken> break_statement()
	{
		EnterRule_break_statement();
		EnterRule("break_statement", 282);
		TraceIn("break_statement", 282);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int break_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal1016 = default(IToken);
	    IToken char_literal1017 = default(IToken);

	    object string_literal1016_tree = default(object);
	    object char_literal1017_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "break_statement");
		DebugLocation(981, 15);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 282)) { return retval; }

			// .\\cs.g:981:16: ( 'break' ';' )
			DebugEnterAlt(1);
			// .\\cs.g:982:2: 'break' ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(982, 2);
			string_literal1016=(IToken)Match(input,104,Follow._104_in_break_statement7220); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1016_tree = (object)adaptor.Create(string_literal1016);
			adaptor.AddChild(root_0, string_literal1016_tree);
			}
			DebugLocation(982, 12);
			char_literal1017=(IToken)Match(input,SEMI,Follow._SEMI_in_break_statement7224); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1017_tree = (object)adaptor.Create(char_literal1017);
			adaptor.AddChild(root_0, char_literal1017_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("break_statement", 282);
			LeaveRule("break_statement", 282);
			LeaveRule_break_statement();
	        if (state.backtracking > 0) { Memoize(input, 282, break_statement_StartIndex); }

	    }
	 	DebugLocation(982, 15);
		} finally { DebugExitRule(GrammarFileName, "break_statement"); }
		return retval;

	}
	// $ANTLR end "break_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_continue_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_continue_statement() {}

	// $ANTLR start "continue_statement"
	// .\\cs.g:983:1: continue_statement : 'continue' ';' ;
	[GrammarRule("continue_statement")]
	private AstParserRuleReturnScope<object, IToken> continue_statement()
	{
		EnterRule_continue_statement();
		EnterRule("continue_statement", 283);
		TraceIn("continue_statement", 283);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int continue_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal1018 = default(IToken);
	    IToken char_literal1019 = default(IToken);

	    object string_literal1018_tree = default(object);
	    object char_literal1019_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "continue_statement");
		DebugLocation(983, 18);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 283)) { return retval; }

			// .\\cs.g:983:19: ( 'continue' ';' )
			DebugEnterAlt(1);
			// .\\cs.g:984:2: 'continue' ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(984, 2);
			string_literal1018=(IToken)Match(input,113,Follow._113_in_continue_statement7232); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1018_tree = (object)adaptor.Create(string_literal1018);
			adaptor.AddChild(root_0, string_literal1018_tree);
			}
			DebugLocation(984, 15);
			char_literal1019=(IToken)Match(input,SEMI,Follow._SEMI_in_continue_statement7236); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1019_tree = (object)adaptor.Create(char_literal1019);
			adaptor.AddChild(root_0, char_literal1019_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("continue_statement", 283);
			LeaveRule("continue_statement", 283);
			LeaveRule_continue_statement();
	        if (state.backtracking > 0) { Memoize(input, 283, continue_statement_StartIndex); }

	    }
	 	DebugLocation(984, 18);
		} finally { DebugExitRule(GrammarFileName, "continue_statement"); }
		return retval;

	}
	// $ANTLR end "continue_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_goto_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_goto_statement() {}

	// $ANTLR start "goto_statement"
	// .\\cs.g:985:1: goto_statement : 'goto' ( identifier | 'case' constant_expression | 'default' ) ';' ;
	[GrammarRule("goto_statement")]
	private AstParserRuleReturnScope<object, IToken> goto_statement()
	{
		EnterRule_goto_statement();
		EnterRule("goto_statement", 284);
		TraceIn("goto_statement", 284);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int goto_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal1020 = default(IToken);
	    IToken string_literal1022 = default(IToken);
	    IToken string_literal1024 = default(IToken);
	    IToken char_literal1025 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> identifier1021 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> constant_expression1023 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal1020_tree = default(object);
	    object string_literal1022_tree = default(object);
	    object string_literal1024_tree = default(object);
	    object char_literal1025_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "goto_statement");
		DebugLocation(985, 23);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 284)) { return retval; }

			// .\\cs.g:985:15: ( 'goto' ( identifier | 'case' constant_expression | 'default' ) ';' )
			DebugEnterAlt(1);
			// .\\cs.g:986:2: 'goto' ( identifier | 'case' constant_expression | 'default' ) ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(986, 2);
			string_literal1020=(IToken)Match(input,134,Follow._134_in_goto_statement7244); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1020_tree = (object)adaptor.Create(string_literal1020);
			adaptor.AddChild(root_0, string_literal1020_tree);
			}
			DebugLocation(986, 11);
			// .\\cs.g:986:11: ( identifier | 'case' constant_expression | 'default' )
			int alt262=3;
			try { DebugEnterSubRule(262);
			try { DebugEnterDecision(262, decisionCanBacktrack[262]);
			switch (input.LA(1))
			{
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				alt262 = 1;
				}
				break;
			case 107:
				{
				alt262 = 2;
				}
				break;
			case 115:
				{
				alt262 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 262, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(262); }
			switch (alt262)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:986:13: identifier
				{
				DebugLocation(986, 13);
				PushFollow(Follow._identifier_in_goto_statement7250);
				identifier1021=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier1021.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:987:7: 'case' constant_expression
				{
				DebugLocation(987, 7);
				string_literal1022=(IToken)Match(input,107,Follow._107_in_goto_statement7258); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal1022_tree = (object)adaptor.Create(string_literal1022);
				adaptor.AddChild(root_0, string_literal1022_tree);
				}
				DebugLocation(987, 16);
				PushFollow(Follow._constant_expression_in_goto_statement7262);
				constant_expression1023=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression1023.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\cs.g:988:7: 'default'
				{
				DebugLocation(988, 7);
				string_literal1024=(IToken)Match(input,115,Follow._115_in_goto_statement7270); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal1024_tree = (object)adaptor.Create(string_literal1024);
				adaptor.AddChild(root_0, string_literal1024_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(262); }

			DebugLocation(988, 20);
			char_literal1025=(IToken)Match(input,SEMI,Follow._SEMI_in_goto_statement7275); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1025_tree = (object)adaptor.Create(char_literal1025);
			adaptor.AddChild(root_0, char_literal1025_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("goto_statement", 284);
			LeaveRule("goto_statement", 284);
			LeaveRule_goto_statement();
	        if (state.backtracking > 0) { Memoize(input, 284, goto_statement_StartIndex); }

	    }
	 	DebugLocation(988, 23);
		} finally { DebugExitRule(GrammarFileName, "goto_statement"); }
		return retval;

	}
	// $ANTLR end "goto_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_return_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_return_statement() {}

	// $ANTLR start "return_statement"
	// .\\cs.g:989:1: return_statement : 'return' ( expression )? ';' ;
	[GrammarRule("return_statement")]
	private AstParserRuleReturnScope<object, IToken> return_statement()
	{
		EnterRule_return_statement();
		EnterRule("return_statement", 285);
		TraceIn("return_statement", 285);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int return_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal1026 = default(IToken);
	    IToken char_literal1028 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression1027 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal1026_tree = default(object);
	    object char_literal1028_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "return_statement");
		DebugLocation(989, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 285)) { return retval; }

			// .\\cs.g:989:17: ( 'return' ( expression )? ';' )
			DebugEnterAlt(1);
			// .\\cs.g:990:2: 'return' ( expression )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(990, 2);
			string_literal1026=(IToken)Match(input,168,Follow._168_in_return_statement7283); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1026_tree = (object)adaptor.Create(string_literal1026);
			adaptor.AddChild(root_0, string_literal1026_tree);
			}
			DebugLocation(990, 13);
			// .\\cs.g:990:13: ( expression )?
			int alt263=2;
			try { DebugEnterSubRule(263);
			try { DebugEnterDecision(263, decisionCanBacktrack[263]);
			int LA263_0 = input.LA(1);

			if ((LA263_0==Character_literal||LA263_0==FALSE||(LA263_0>=Hex_number && LA263_0<=IDENTIFIER)||(LA263_0>=MINUS && LA263_0<=NUMBER)||LA263_0==Real_literal||LA263_0==STRINGLITERAL||LA263_0==TRUE||LA263_0==Verbatim_string_literal||LA263_0==61||LA263_0==66||(LA263_0>=68 && LA263_0<=69)||(LA263_0>=71 && LA263_0<=72)||LA263_0==75||LA263_0==95||(LA263_0>=97 && LA263_0<=98)||(LA263_0>=100 && LA263_0<=103)||(LA263_0>=105 && LA263_0<=106)||(LA263_0>=109 && LA263_0<=110)||(LA263_0>=114 && LA263_0<=117)||(LA263_0>=119 && LA263_0<=120)||LA263_0==122||LA263_0==126||LA263_0==129||LA263_0==132||LA263_0==135||LA263_0==138||LA263_0==141||(LA263_0>=143 && LA263_0<=144)||(LA263_0>=146 && LA263_0<=148)||(LA263_0>=150 && LA263_0<=152)||LA263_0==154||LA263_0==157||LA263_0==160||LA263_0==162||LA263_0==167||LA263_0==169||(LA263_0>=171 && LA263_0<=174)||LA263_0==177||LA263_0==180||(LA263_0>=183 && LA263_0<=187)||(LA263_0>=189 && LA263_0<=190)||LA263_0==194||LA263_0==196||LA263_0==202))
			{
				alt263 = 1;
			}
			} finally { DebugExitDecision(263); }
			switch (alt263)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:990:13: expression
				{
				DebugLocation(990, 13);
				PushFollow(Follow._expression_in_return_statement7287);
				expression1027=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression1027.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(263); }

			DebugLocation(990, 27);
			char_literal1028=(IToken)Match(input,SEMI,Follow._SEMI_in_return_statement7292); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1028_tree = (object)adaptor.Create(char_literal1028);
			adaptor.AddChild(root_0, char_literal1028_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("return_statement", 285);
			LeaveRule("return_statement", 285);
			LeaveRule_return_statement();
	        if (state.backtracking > 0) { Memoize(input, 285, return_statement_StartIndex); }

	    }
	 	DebugLocation(990, 30);
		} finally { DebugExitRule(GrammarFileName, "return_statement"); }
		return retval;

	}
	// $ANTLR end "return_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_throw_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_throw_statement() {}

	// $ANTLR start "throw_statement"
	// .\\cs.g:991:1: throw_statement : 'throw' ( expression )? ';' ;
	[GrammarRule("throw_statement")]
	private AstParserRuleReturnScope<object, IToken> throw_statement()
	{
		EnterRule_throw_statement();
		EnterRule("throw_statement", 286);
		TraceIn("throw_statement", 286);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int throw_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal1029 = default(IToken);
	    IToken char_literal1031 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression1030 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal1029_tree = default(object);
	    object char_literal1031_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "throw_statement");
		DebugLocation(991, 29);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 286)) { return retval; }

			// .\\cs.g:991:16: ( 'throw' ( expression )? ';' )
			DebugEnterAlt(1);
			// .\\cs.g:992:2: 'throw' ( expression )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(992, 2);
			string_literal1029=(IToken)Match(input,181,Follow._181_in_throw_statement7300); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1029_tree = (object)adaptor.Create(string_literal1029);
			adaptor.AddChild(root_0, string_literal1029_tree);
			}
			DebugLocation(992, 12);
			// .\\cs.g:992:12: ( expression )?
			int alt264=2;
			try { DebugEnterSubRule(264);
			try { DebugEnterDecision(264, decisionCanBacktrack[264]);
			int LA264_0 = input.LA(1);

			if ((LA264_0==Character_literal||LA264_0==FALSE||(LA264_0>=Hex_number && LA264_0<=IDENTIFIER)||(LA264_0>=MINUS && LA264_0<=NUMBER)||LA264_0==Real_literal||LA264_0==STRINGLITERAL||LA264_0==TRUE||LA264_0==Verbatim_string_literal||LA264_0==61||LA264_0==66||(LA264_0>=68 && LA264_0<=69)||(LA264_0>=71 && LA264_0<=72)||LA264_0==75||LA264_0==95||(LA264_0>=97 && LA264_0<=98)||(LA264_0>=100 && LA264_0<=103)||(LA264_0>=105 && LA264_0<=106)||(LA264_0>=109 && LA264_0<=110)||(LA264_0>=114 && LA264_0<=117)||(LA264_0>=119 && LA264_0<=120)||LA264_0==122||LA264_0==126||LA264_0==129||LA264_0==132||LA264_0==135||LA264_0==138||LA264_0==141||(LA264_0>=143 && LA264_0<=144)||(LA264_0>=146 && LA264_0<=148)||(LA264_0>=150 && LA264_0<=152)||LA264_0==154||LA264_0==157||LA264_0==160||LA264_0==162||LA264_0==167||LA264_0==169||(LA264_0>=171 && LA264_0<=174)||LA264_0==177||LA264_0==180||(LA264_0>=183 && LA264_0<=187)||(LA264_0>=189 && LA264_0<=190)||LA264_0==194||LA264_0==196||LA264_0==202))
			{
				alt264 = 1;
			}
			} finally { DebugExitDecision(264); }
			switch (alt264)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:992:12: expression
				{
				DebugLocation(992, 12);
				PushFollow(Follow._expression_in_throw_statement7304);
				expression1030=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression1030.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(264); }

			DebugLocation(992, 26);
			char_literal1031=(IToken)Match(input,SEMI,Follow._SEMI_in_throw_statement7309); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1031_tree = (object)adaptor.Create(char_literal1031);
			adaptor.AddChild(root_0, char_literal1031_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("throw_statement", 286);
			LeaveRule("throw_statement", 286);
			LeaveRule_throw_statement();
	        if (state.backtracking > 0) { Memoize(input, 286, throw_statement_StartIndex); }

	    }
	 	DebugLocation(992, 29);
		} finally { DebugExitRule(GrammarFileName, "throw_statement"); }
		return retval;

	}
	// $ANTLR end "throw_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_try_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_try_statement() {}

	// $ANTLR start "try_statement"
	// .\\cs.g:993:1: try_statement : 'try' block ( catch_clauses ( finally_clause )? | finally_clause ) ;
	[GrammarRule("try_statement")]
	private AstParserRuleReturnScope<object, IToken> try_statement()
	{
		EnterRule_try_statement();
		EnterRule("try_statement", 287);
		TraceIn("try_statement", 287);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int try_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal1032 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> block1033 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> catch_clauses1034 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> finally_clause1035 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> finally_clause1036 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal1032_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "try_statement");
		DebugLocation(993, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 287)) { return retval; }

			// .\\cs.g:993:14: ( 'try' block ( catch_clauses ( finally_clause )? | finally_clause ) )
			DebugEnterAlt(1);
			// .\\cs.g:994:7: 'try' block ( catch_clauses ( finally_clause )? | finally_clause )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(994, 7);
			string_literal1032=(IToken)Match(input,182,Follow._182_in_try_statement7322); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1032_tree = (object)adaptor.Create(string_literal1032);
			adaptor.AddChild(root_0, string_literal1032_tree);
			}
			DebugLocation(994, 15);
			PushFollow(Follow._block_in_try_statement7326);
			block1033=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block1033.Tree);
			DebugLocation(994, 23);
			// .\\cs.g:994:23: ( catch_clauses ( finally_clause )? | finally_clause )
			int alt266=2;
			try { DebugEnterSubRule(266);
			try { DebugEnterDecision(266, decisionCanBacktrack[266]);
			int LA266_0 = input.LA(1);

			if ((LA266_0==108))
			{
				alt266 = 1;
			}
			else if ((LA266_0==127))
			{
				alt266 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 266, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(266); }
			switch (alt266)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:994:25: catch_clauses ( finally_clause )?
				{
				DebugLocation(994, 25);
				PushFollow(Follow._catch_clauses_in_try_statement7332);
				catch_clauses1034=catch_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, catch_clauses1034.Tree);
				DebugLocation(994, 41);
				// .\\cs.g:994:41: ( finally_clause )?
				int alt265=2;
				try { DebugEnterSubRule(265);
				try { DebugEnterDecision(265, decisionCanBacktrack[265]);
				int LA265_0 = input.LA(1);

				if ((LA265_0==127))
				{
					alt265 = 1;
				}
				} finally { DebugExitDecision(265); }
				switch (alt265)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:994:41: finally_clause
					{
					DebugLocation(994, 41);
					PushFollow(Follow._finally_clause_in_try_statement7336);
					finally_clause1035=finally_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, finally_clause1035.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(265); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:995:10: finally_clause
				{
				DebugLocation(995, 10);
				PushFollow(Follow._finally_clause_in_try_statement7348);
				finally_clause1036=finally_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, finally_clause1036.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(266); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("try_statement", 287);
			LeaveRule("try_statement", 287);
			LeaveRule_try_statement();
	        if (state.backtracking > 0) { Memoize(input, 287, try_statement_StartIndex); }

	    }
	 	DebugLocation(995, 24);
		} finally { DebugExitRule(GrammarFileName, "try_statement"); }
		return retval;

	}
	// $ANTLR end "try_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_catch_clauses() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_catch_clauses() {}

	// $ANTLR start "catch_clauses"
	// .\\cs.g:997:1: catch_clauses : 'catch' ( specific_catch_clauses | general_catch_clause ) ;
	[GrammarRule("catch_clauses")]
	private AstParserRuleReturnScope<object, IToken> catch_clauses()
	{
		EnterRule_catch_clauses();
		EnterRule("catch_clauses", 288);
		TraceIn("catch_clauses", 288);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int catch_clauses_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal1037 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> specific_catch_clauses1038 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> general_catch_clause1039 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal1037_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "catch_clauses");
		DebugLocation(997, 59);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 288)) { return retval; }

			// .\\cs.g:997:14: ( 'catch' ( specific_catch_clauses | general_catch_clause ) )
			DebugEnterAlt(1);
			// .\\cs.g:998:2: 'catch' ( specific_catch_clauses | general_catch_clause )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(998, 2);
			string_literal1037=(IToken)Match(input,108,Follow._108_in_catch_clauses7357); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1037_tree = (object)adaptor.Create(string_literal1037);
			adaptor.AddChild(root_0, string_literal1037_tree);
			}
			DebugLocation(998, 12);
			// .\\cs.g:998:12: ( specific_catch_clauses | general_catch_clause )
			int alt267=2;
			try { DebugEnterSubRule(267);
			try { DebugEnterDecision(267, decisionCanBacktrack[267]);
			int LA267_0 = input.LA(1);

			if ((LA267_0==68))
			{
				alt267 = 1;
			}
			else if ((LA267_0==SEMI||LA267_0==197))
			{
				alt267 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 267, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(267); }
			switch (alt267)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:998:13: specific_catch_clauses
				{
				DebugLocation(998, 13);
				PushFollow(Follow._specific_catch_clauses_in_catch_clauses7362);
				specific_catch_clauses1038=specific_catch_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, specific_catch_clauses1038.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:998:38: general_catch_clause
				{
				DebugLocation(998, 38);
				PushFollow(Follow._general_catch_clause_in_catch_clauses7366);
				general_catch_clause1039=general_catch_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, general_catch_clause1039.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(267); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catch_clauses", 288);
			LeaveRule("catch_clauses", 288);
			LeaveRule_catch_clauses();
	        if (state.backtracking > 0) { Memoize(input, 288, catch_clauses_StartIndex); }

	    }
	 	DebugLocation(998, 59);
		} finally { DebugExitRule(GrammarFileName, "catch_clauses"); }
		return retval;

	}
	// $ANTLR end "catch_clauses"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_specific_catch_clauses() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_specific_catch_clauses() {}

	// $ANTLR start "specific_catch_clauses"
	// .\\cs.g:999:1: specific_catch_clauses : specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )* ;
	[GrammarRule("specific_catch_clauses")]
	private AstParserRuleReturnScope<object, IToken> specific_catch_clauses()
	{
		EnterRule_specific_catch_clauses();
		EnterRule("specific_catch_clauses", 289);
		TraceIn("specific_catch_clauses", 289);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int specific_catch_clauses_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal1041 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> specific_catch_clause1040 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> specific_catch_clause1042 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> general_catch_clause1043 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal1041_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "specific_catch_clauses");
		DebugLocation(999, 84);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 289)) { return retval; }

			// .\\cs.g:999:23: ( specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )* )
			DebugEnterAlt(1);
			// .\\cs.g:1000:2: specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1000, 2);
			PushFollow(Follow._specific_catch_clause_in_specific_catch_clauses7375);
			specific_catch_clause1040=specific_catch_clause();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, specific_catch_clause1040.Tree);
			DebugLocation(1000, 26);
			// .\\cs.g:1000:26: ( 'catch' ( specific_catch_clause | general_catch_clause ) )*
			try { DebugEnterSubRule(269);
			while (true)
			{
				int alt269=2;
				try { DebugEnterDecision(269, decisionCanBacktrack[269]);
				int LA269_0 = input.LA(1);

				if ((LA269_0==108))
				{
					alt269 = 1;
				}


				} finally { DebugExitDecision(269); }
				switch ( alt269 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:1000:27: 'catch' ( specific_catch_clause | general_catch_clause )
					{
					DebugLocation(1000, 27);
					string_literal1041=(IToken)Match(input,108,Follow._108_in_specific_catch_clauses7380); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal1041_tree = (object)adaptor.Create(string_literal1041);
					adaptor.AddChild(root_0, string_literal1041_tree);
					}
					DebugLocation(1000, 37);
					// .\\cs.g:1000:37: ( specific_catch_clause | general_catch_clause )
					int alt268=2;
					try { DebugEnterSubRule(268);
					try { DebugEnterDecision(268, decisionCanBacktrack[268]);
					int LA268_0 = input.LA(1);

					if ((LA268_0==68))
					{
						alt268 = 1;
					}
					else if ((LA268_0==SEMI||LA268_0==197))
					{
						alt268 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 268, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(268); }
					switch (alt268)
					{
					case 1:
						DebugEnterAlt(1);
						// .\\cs.g:1000:38: specific_catch_clause
						{
						DebugLocation(1000, 38);
						PushFollow(Follow._specific_catch_clause_in_specific_catch_clauses7385);
						specific_catch_clause1042=specific_catch_clause();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, specific_catch_clause1042.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// .\\cs.g:1000:62: general_catch_clause
						{
						DebugLocation(1000, 62);
						PushFollow(Follow._general_catch_clause_in_specific_catch_clauses7389);
						general_catch_clause1043=general_catch_clause();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, general_catch_clause1043.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(268); }


					}
					break;

				default:
					goto loop269;
				}
			}

			loop269:
				;

			} finally { DebugExitSubRule(269); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("specific_catch_clauses", 289);
			LeaveRule("specific_catch_clauses", 289);
			LeaveRule_specific_catch_clauses();
	        if (state.backtracking > 0) { Memoize(input, 289, specific_catch_clauses_StartIndex); }

	    }
	 	DebugLocation(1000, 84);
		} finally { DebugExitRule(GrammarFileName, "specific_catch_clauses"); }
		return retval;

	}
	// $ANTLR end "specific_catch_clauses"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_specific_catch_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_specific_catch_clause() {}

	// $ANTLR start "specific_catch_clause"
	// .\\cs.g:1001:1: specific_catch_clause : '(' class_type ( identifier )? ')' block ;
	[GrammarRule("specific_catch_clause")]
	private AstParserRuleReturnScope<object, IToken> specific_catch_clause()
	{
		EnterRule_specific_catch_clause();
		EnterRule("specific_catch_clause", 290);
		TraceIn("specific_catch_clause", 290);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int specific_catch_clause_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal1044 = default(IToken);
	    IToken char_literal1047 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> class_type1045 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> identifier1046 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> block1048 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal1044_tree = default(object);
	    object char_literal1047_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "specific_catch_clause");
		DebugLocation(1001, 46);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 290)) { return retval; }

			// .\\cs.g:1001:22: ( '(' class_type ( identifier )? ')' block )
			DebugEnterAlt(1);
			// .\\cs.g:1002:2: '(' class_type ( identifier )? ')' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1002, 2);
			char_literal1044=(IToken)Match(input,68,Follow._68_in_specific_catch_clause7399); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1044_tree = (object)adaptor.Create(char_literal1044);
			adaptor.AddChild(root_0, char_literal1044_tree);
			}
			DebugLocation(1002, 8);
			PushFollow(Follow._class_type_in_specific_catch_clause7403);
			class_type1045=class_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, class_type1045.Tree);
			DebugLocation(1002, 21);
			// .\\cs.g:1002:21: ( identifier )?
			int alt270=2;
			try { DebugEnterSubRule(270);
			try { DebugEnterDecision(270, decisionCanBacktrack[270]);
			int LA270_0 = input.LA(1);

			if ((LA270_0==IDENTIFIER||LA270_0==95||(LA270_0>=97 && LA270_0<=98)||(LA270_0>=100 && LA270_0<=101)||LA270_0==105||LA270_0==117||LA270_0==120||LA270_0==122||LA270_0==126||LA270_0==132||LA270_0==135||LA270_0==141||(LA270_0>=143 && LA270_0<=144)||(LA270_0>=147 && LA270_0<=148)||LA270_0==152||LA270_0==154||LA270_0==157||LA270_0==160||LA270_0==162||LA270_0==167||(LA270_0>=171 && LA270_0<=172)||LA270_0==183||LA270_0==190||LA270_0==194||LA270_0==196))
			{
				alt270 = 1;
			}
			} finally { DebugExitDecision(270); }
			switch (alt270)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:1002:21: identifier
				{
				DebugLocation(1002, 21);
				PushFollow(Follow._identifier_in_specific_catch_clause7407);
				identifier1046=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier1046.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(270); }

			DebugLocation(1002, 35);
			char_literal1047=(IToken)Match(input,RPAREN,Follow._RPAREN_in_specific_catch_clause7412); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1047_tree = (object)adaptor.Create(char_literal1047);
			adaptor.AddChild(root_0, char_literal1047_tree);
			}
			DebugLocation(1002, 41);
			PushFollow(Follow._block_in_specific_catch_clause7416);
			block1048=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block1048.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("specific_catch_clause", 290);
			LeaveRule("specific_catch_clause", 290);
			LeaveRule_specific_catch_clause();
	        if (state.backtracking > 0) { Memoize(input, 290, specific_catch_clause_StartIndex); }

	    }
	 	DebugLocation(1002, 46);
		} finally { DebugExitRule(GrammarFileName, "specific_catch_clause"); }
		return retval;

	}
	// $ANTLR end "specific_catch_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_general_catch_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_general_catch_clause() {}

	// $ANTLR start "general_catch_clause"
	// .\\cs.g:1003:1: general_catch_clause : block ;
	[GrammarRule("general_catch_clause")]
	private AstParserRuleReturnScope<object, IToken> general_catch_clause()
	{
		EnterRule_general_catch_clause();
		EnterRule("general_catch_clause", 291);
		TraceIn("general_catch_clause", 291);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int general_catch_clause_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> block1049 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "general_catch_clause");
		DebugLocation(1003, 7);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 291)) { return retval; }

			// .\\cs.g:1003:21: ( block )
			DebugEnterAlt(1);
			// .\\cs.g:1004:2: block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1004, 2);
			PushFollow(Follow._block_in_general_catch_clause7424);
			block1049=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block1049.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("general_catch_clause", 291);
			LeaveRule("general_catch_clause", 291);
			LeaveRule_general_catch_clause();
	        if (state.backtracking > 0) { Memoize(input, 291, general_catch_clause_StartIndex); }

	    }
	 	DebugLocation(1004, 7);
		} finally { DebugExitRule(GrammarFileName, "general_catch_clause"); }
		return retval;

	}
	// $ANTLR end "general_catch_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_finally_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_finally_clause() {}

	// $ANTLR start "finally_clause"
	// .\\cs.g:1005:1: finally_clause : 'finally' block ;
	[GrammarRule("finally_clause")]
	private AstParserRuleReturnScope<object, IToken> finally_clause()
	{
		EnterRule_finally_clause();
		EnterRule("finally_clause", 292);
		TraceIn("finally_clause", 292);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int finally_clause_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal1050 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> block1051 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal1050_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "finally_clause");
		DebugLocation(1005, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 292)) { return retval; }

			// .\\cs.g:1005:15: ( 'finally' block )
			DebugEnterAlt(1);
			// .\\cs.g:1006:2: 'finally' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1006, 2);
			string_literal1050=(IToken)Match(input,127,Follow._127_in_finally_clause7432); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1050_tree = (object)adaptor.Create(string_literal1050);
			adaptor.AddChild(root_0, string_literal1050_tree);
			}
			DebugLocation(1006, 14);
			PushFollow(Follow._block_in_finally_clause7436);
			block1051=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block1051.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("finally_clause", 292);
			LeaveRule("finally_clause", 292);
			LeaveRule_finally_clause();
	        if (state.backtracking > 0) { Memoize(input, 292, finally_clause_StartIndex); }

	    }
	 	DebugLocation(1006, 19);
		} finally { DebugExitRule(GrammarFileName, "finally_clause"); }
		return retval;

	}
	// $ANTLR end "finally_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_checked_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_checked_statement() {}

	// $ANTLR start "checked_statement"
	// .\\cs.g:1007:1: checked_statement : 'checked' block ;
	[GrammarRule("checked_statement")]
	private AstParserRuleReturnScope<object, IToken> checked_statement()
	{
		EnterRule_checked_statement();
		EnterRule("checked_statement", 293);
		TraceIn("checked_statement", 293);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int checked_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal1052 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> block1053 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal1052_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "checked_statement");
		DebugLocation(1007, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 293)) { return retval; }

			// .\\cs.g:1007:18: ( 'checked' block )
			DebugEnterAlt(1);
			// .\\cs.g:1008:2: 'checked' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1008, 2);
			string_literal1052=(IToken)Match(input,110,Follow._110_in_checked_statement7444); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1052_tree = (object)adaptor.Create(string_literal1052);
			adaptor.AddChild(root_0, string_literal1052_tree);
			}
			DebugLocation(1008, 14);
			PushFollow(Follow._block_in_checked_statement7448);
			block1053=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block1053.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("checked_statement", 293);
			LeaveRule("checked_statement", 293);
			LeaveRule_checked_statement();
	        if (state.backtracking > 0) { Memoize(input, 293, checked_statement_StartIndex); }

	    }
	 	DebugLocation(1008, 19);
		} finally { DebugExitRule(GrammarFileName, "checked_statement"); }
		return retval;

	}
	// $ANTLR end "checked_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_unchecked_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_unchecked_statement() {}

	// $ANTLR start "unchecked_statement"
	// .\\cs.g:1009:1: unchecked_statement : 'unchecked' block ;
	[GrammarRule("unchecked_statement")]
	private AstParserRuleReturnScope<object, IToken> unchecked_statement()
	{
		EnterRule_unchecked_statement();
		EnterRule("unchecked_statement", 294);
		TraceIn("unchecked_statement", 294);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int unchecked_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal1054 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> block1055 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal1054_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "unchecked_statement");
		DebugLocation(1009, 21);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 294)) { return retval; }

			// .\\cs.g:1009:20: ( 'unchecked' block )
			DebugEnterAlt(1);
			// .\\cs.g:1010:2: 'unchecked' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1010, 2);
			string_literal1054=(IToken)Match(input,187,Follow._187_in_unchecked_statement7456); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1054_tree = (object)adaptor.Create(string_literal1054);
			adaptor.AddChild(root_0, string_literal1054_tree);
			}
			DebugLocation(1010, 16);
			PushFollow(Follow._block_in_unchecked_statement7460);
			block1055=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block1055.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unchecked_statement", 294);
			LeaveRule("unchecked_statement", 294);
			LeaveRule_unchecked_statement();
	        if (state.backtracking > 0) { Memoize(input, 294, unchecked_statement_StartIndex); }

	    }
	 	DebugLocation(1010, 21);
		} finally { DebugExitRule(GrammarFileName, "unchecked_statement"); }
		return retval;

	}
	// $ANTLR end "unchecked_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_lock_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_lock_statement() {}

	// $ANTLR start "lock_statement"
	// .\\cs.g:1011:1: lock_statement : 'lock' '(' expression ')' embedded_statement ;
	[GrammarRule("lock_statement")]
	private AstParserRuleReturnScope<object, IToken> lock_statement()
	{
		EnterRule_lock_statement();
		EnterRule("lock_statement", 295);
		TraceIn("lock_statement", 295);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int lock_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal1056 = default(IToken);
	    IToken char_literal1057 = default(IToken);
	    IToken char_literal1059 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression1058 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> embedded_statement1060 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal1056_tree = default(object);
	    object char_literal1057_tree = default(object);
	    object char_literal1059_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "lock_statement");
		DebugLocation(1011, 53);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 295)) { return retval; }

			// .\\cs.g:1011:15: ( 'lock' '(' expression ')' embedded_statement )
			DebugEnterAlt(1);
			// .\\cs.g:1012:2: 'lock' '(' expression ')' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1012, 2);
			string_literal1056=(IToken)Match(input,145,Follow._145_in_lock_statement7468); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1056_tree = (object)adaptor.Create(string_literal1056);
			adaptor.AddChild(root_0, string_literal1056_tree);
			}
			DebugLocation(1012, 11);
			char_literal1057=(IToken)Match(input,68,Follow._68_in_lock_statement7472); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1057_tree = (object)adaptor.Create(char_literal1057);
			adaptor.AddChild(root_0, char_literal1057_tree);
			}
			DebugLocation(1012, 16);
			PushFollow(Follow._expression_in_lock_statement7475);
			expression1058=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression1058.Tree);
			DebugLocation(1012, 29);
			char_literal1059=(IToken)Match(input,RPAREN,Follow._RPAREN_in_lock_statement7479); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1059_tree = (object)adaptor.Create(char_literal1059);
			adaptor.AddChild(root_0, char_literal1059_tree);
			}
			DebugLocation(1012, 35);
			PushFollow(Follow._embedded_statement_in_lock_statement7483);
			embedded_statement1060=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement1060.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lock_statement", 295);
			LeaveRule("lock_statement", 295);
			LeaveRule_lock_statement();
	        if (state.backtracking > 0) { Memoize(input, 295, lock_statement_StartIndex); }

	    }
	 	DebugLocation(1012, 53);
		} finally { DebugExitRule(GrammarFileName, "lock_statement"); }
		return retval;

	}
	// $ANTLR end "lock_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_using_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_using_statement() {}

	// $ANTLR start "using_statement"
	// .\\cs.g:1013:1: using_statement : 'using' '(' resource_acquisition ')' embedded_statement ;
	[GrammarRule("using_statement")]
	private AstParserRuleReturnScope<object, IToken> using_statement()
	{
		EnterRule_using_statement();
		EnterRule("using_statement", 296);
		TraceIn("using_statement", 296);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int using_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal1061 = default(IToken);
	    IToken char_literal1062 = default(IToken);
	    IToken char_literal1064 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> resource_acquisition1063 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> embedded_statement1065 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal1061_tree = default(object);
	    object char_literal1062_tree = default(object);
	    object char_literal1064_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "using_statement");
		DebugLocation(1013, 67);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 296)) { return retval; }

			// .\\cs.g:1013:16: ( 'using' '(' resource_acquisition ')' embedded_statement )
			DebugEnterAlt(1);
			// .\\cs.g:1014:2: 'using' '(' resource_acquisition ')' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1014, 2);
			string_literal1061=(IToken)Match(input,USING,Follow._USING_in_using_statement7491); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1061_tree = (object)adaptor.Create(string_literal1061);
			adaptor.AddChild(root_0, string_literal1061_tree);
			}
			DebugLocation(1014, 12);
			char_literal1062=(IToken)Match(input,68,Follow._68_in_using_statement7495); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1062_tree = (object)adaptor.Create(char_literal1062);
			adaptor.AddChild(root_0, char_literal1062_tree);
			}
			DebugLocation(1014, 19);
			PushFollow(Follow._resource_acquisition_in_using_statement7500);
			resource_acquisition1063=resource_acquisition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, resource_acquisition1063.Tree);
			DebugLocation(1014, 42);
			char_literal1064=(IToken)Match(input,RPAREN,Follow._RPAREN_in_using_statement7504); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1064_tree = (object)adaptor.Create(char_literal1064);
			adaptor.AddChild(root_0, char_literal1064_tree);
			}
			DebugLocation(1014, 49);
			PushFollow(Follow._embedded_statement_in_using_statement7509);
			embedded_statement1065=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement1065.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("using_statement", 296);
			LeaveRule("using_statement", 296);
			LeaveRule_using_statement();
	        if (state.backtracking > 0) { Memoize(input, 296, using_statement_StartIndex); }

	    }
	 	DebugLocation(1014, 67);
		} finally { DebugExitRule(GrammarFileName, "using_statement"); }
		return retval;

	}
	// $ANTLR end "using_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_resource_acquisition() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_resource_acquisition() {}

	// $ANTLR start "resource_acquisition"
	// .\\cs.g:1015:1: resource_acquisition : ( ( local_variable_declaration )=> local_variable_declaration | expression );
	[GrammarRule("resource_acquisition")]
	private AstParserRuleReturnScope<object, IToken> resource_acquisition()
	{
		EnterRule_resource_acquisition();
		EnterRule("resource_acquisition", 297);
		TraceIn("resource_acquisition", 297);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int resource_acquisition_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> local_variable_declaration1066 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression1067 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "resource_acquisition");
		DebugLocation(1015, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 297)) { return retval; }

			// .\\cs.g:1015:21: ( ( local_variable_declaration )=> local_variable_declaration | expression )
			int alt271=2;
			try { DebugEnterDecision(271, decisionCanBacktrack[271]);
			int LA271_0 = input.LA(1);

			if ((LA271_0==190))
			{
				int LA271_1 = input.LA(2);

				if ((EvaluatePredicate(synpred39_cs_fragment)))
				{
					alt271 = 1;
				}
				else if ((true))
				{
					alt271 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 271, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA271_0==120))
			{
				int LA271_2 = input.LA(2);

				if ((EvaluatePredicate(synpred39_cs_fragment)))
				{
					alt271 = 1;
				}
				else if ((true))
				{
					alt271 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 271, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA271_0==103||LA271_0==106||LA271_0==109||LA271_0==114||LA271_0==119||LA271_0==129||LA271_0==138||LA271_0==146||LA271_0==151||LA271_0==169||LA271_0==173||LA271_0==177||(LA271_0>=185 && LA271_0<=186)||LA271_0==189))
			{
				int LA271_3 = input.LA(2);

				if ((EvaluatePredicate(synpred39_cs_fragment)))
				{
					alt271 = 1;
				}
				else if ((true))
				{
					alt271 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 271, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA271_0==132))
			{
				int LA271_4 = input.LA(2);

				if ((EvaluatePredicate(synpred39_cs_fragment)))
				{
					alt271 = 1;
				}
				else if ((true))
				{
					alt271 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 271, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA271_0==192) && (EvaluatePredicate(synpred39_cs_fragment)))
			{
				alt271 = 1;
			}
			else if ((LA271_0==Character_literal||LA271_0==FALSE||LA271_0==Hex_number||(LA271_0>=MINUS && LA271_0<=NUMBER)||LA271_0==Real_literal||LA271_0==STRINGLITERAL||LA271_0==TRUE||LA271_0==Verbatim_string_literal||LA271_0==61||LA271_0==66||(LA271_0>=68 && LA271_0<=69)||(LA271_0>=71 && LA271_0<=72)||LA271_0==75||LA271_0==102||LA271_0==110||(LA271_0>=115 && LA271_0<=116)||LA271_0==150||LA271_0==174||LA271_0==180||LA271_0==184||LA271_0==187||LA271_0==202))
			{
				alt271 = 2;
			}
			else if ((LA271_0==IDENTIFIER||LA271_0==95||(LA271_0>=97 && LA271_0<=98)||(LA271_0>=100 && LA271_0<=101)||LA271_0==105||LA271_0==117||LA271_0==122||LA271_0==126||LA271_0==135||LA271_0==141||(LA271_0>=143 && LA271_0<=144)||(LA271_0>=147 && LA271_0<=148)||LA271_0==152||LA271_0==154||LA271_0==157||LA271_0==160||LA271_0==162||LA271_0==167||(LA271_0>=171 && LA271_0<=172)||LA271_0==183||LA271_0==194||LA271_0==196))
			{
				int LA271_25 = input.LA(2);

				if ((EvaluatePredicate(synpred39_cs_fragment)))
				{
					alt271 = 1;
				}
				else if ((true))
				{
					alt271 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 271, 25, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 271, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(271); }
			switch (alt271)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:1016:2: ( local_variable_declaration )=> local_variable_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1016, 34);
				PushFollow(Follow._local_variable_declaration_in_resource_acquisition7523);
				local_variable_declaration1066=local_variable_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declaration1066.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:1017:4: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1017, 4);
				PushFollow(Follow._expression_in_resource_acquisition7528);
				expression1067=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression1067.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("resource_acquisition", 297);
			LeaveRule("resource_acquisition", 297);
			LeaveRule_resource_acquisition();
	        if (state.backtracking > 0) { Memoize(input, 297, resource_acquisition_StartIndex); }

	    }
	 	DebugLocation(1017, 14);
		} finally { DebugExitRule(GrammarFileName, "resource_acquisition"); }
		return retval;

	}
	// $ANTLR end "resource_acquisition"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_yield_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_yield_statement() {}

	// $ANTLR start "yield_statement"
	// .\\cs.g:1018:1: yield_statement : 'yield' ( 'return' expression ';' | 'break' ';' ) ;
	[GrammarRule("yield_statement")]
	private AstParserRuleReturnScope<object, IToken> yield_statement()
	{
		EnterRule_yield_statement();
		EnterRule("yield_statement", 298);
		TraceIn("yield_statement", 298);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int yield_statement_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal1068 = default(IToken);
	    IToken string_literal1069 = default(IToken);
	    IToken char_literal1071 = default(IToken);
	    IToken string_literal1072 = default(IToken);
	    IToken char_literal1073 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression1070 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal1068_tree = default(object);
	    object string_literal1069_tree = default(object);
	    object char_literal1071_tree = default(object);
	    object string_literal1072_tree = default(object);
	    object char_literal1073_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "yield_statement");
		DebugLocation(1018, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 298)) { return retval; }

			// .\\cs.g:1018:16: ( 'yield' ( 'return' expression ';' | 'break' ';' ) )
			DebugEnterAlt(1);
			// .\\cs.g:1019:2: 'yield' ( 'return' expression ';' | 'break' ';' )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1019, 2);
			string_literal1068=(IToken)Match(input,196,Follow._196_in_yield_statement7536); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1068_tree = (object)adaptor.Create(string_literal1068);
			adaptor.AddChild(root_0, string_literal1068_tree);
			}
			DebugLocation(1019, 12);
			// .\\cs.g:1019:12: ( 'return' expression ';' | 'break' ';' )
			int alt272=2;
			try { DebugEnterSubRule(272);
			try { DebugEnterDecision(272, decisionCanBacktrack[272]);
			int LA272_0 = input.LA(1);

			if ((LA272_0==168))
			{
				alt272 = 1;
			}
			else if ((LA272_0==104))
			{
				alt272 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 272, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(272); }
			switch (alt272)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:1019:13: 'return' expression ';'
				{
				DebugLocation(1019, 13);
				string_literal1069=(IToken)Match(input,168,Follow._168_in_yield_statement7541); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal1069_tree = (object)adaptor.Create(string_literal1069);
				adaptor.AddChild(root_0, string_literal1069_tree);
				}
				DebugLocation(1019, 24);
				PushFollow(Follow._expression_in_yield_statement7545);
				expression1070=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression1070.Tree);
				DebugLocation(1019, 37);
				char_literal1071=(IToken)Match(input,SEMI,Follow._SEMI_in_yield_statement7549); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal1071_tree = (object)adaptor.Create(char_literal1071);
				adaptor.AddChild(root_0, char_literal1071_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:1020:14: 'break' ';'
				{
				DebugLocation(1020, 14);
				string_literal1072=(IToken)Match(input,104,Follow._104_in_yield_statement7564); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal1072_tree = (object)adaptor.Create(string_literal1072);
				adaptor.AddChild(root_0, string_literal1072_tree);
				}
				DebugLocation(1020, 24);
				char_literal1073=(IToken)Match(input,SEMI,Follow._SEMI_in_yield_statement7568); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal1073_tree = (object)adaptor.Create(char_literal1073);
				adaptor.AddChild(root_0, char_literal1073_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(272); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("yield_statement", 298);
			LeaveRule("yield_statement", 298);
			LeaveRule_yield_statement();
	        if (state.backtracking > 0) { Memoize(input, 298, yield_statement_StartIndex); }

	    }
	 	DebugLocation(1020, 28);
		} finally { DebugExitRule(GrammarFileName, "yield_statement"); }
		return retval;

	}
	// $ANTLR end "yield_statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_predefined_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_predefined_type() {}

	// $ANTLR start "predefined_type"
	// .\\cs.g:1026:1: predefined_type : ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' );
	[GrammarRule("predefined_type")]
	private AstParserRuleReturnScope<object, IToken> predefined_type()
	{
		EnterRule_predefined_type();
		EnterRule("predefined_type", 299);
		TraceIn("predefined_type", 299);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int predefined_type_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set1074 = default(IToken);

	    object set1074_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "predefined_type");
		DebugLocation(1026, 56);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 299)) { return retval; }

			// .\\cs.g:1026:16: ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' )
			DebugEnterAlt(1);
			// .\\cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1026, 16);

			set1074=(IToken)input.LT(1);
			if (input.LA(1)==103||input.LA(1)==106||input.LA(1)==109||input.LA(1)==114||input.LA(1)==119||input.LA(1)==129||input.LA(1)==138||input.LA(1)==146||input.LA(1)==151||input.LA(1)==169||input.LA(1)==173||input.LA(1)==177||(input.LA(1)>=185 && input.LA(1)<=186)||input.LA(1)==189)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1074));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("predefined_type", 299);
			LeaveRule("predefined_type", 299);
			LeaveRule_predefined_type();
	        if (state.backtracking > 0) { Memoize(input, 299, predefined_type_StartIndex); }

	    }
	 	DebugLocation(1028, 56);
		} finally { DebugExitRule(GrammarFileName, "predefined_type"); }
		return retval;

	}
	// $ANTLR end "predefined_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_identifier() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_identifier() {}

	// $ANTLR start "identifier"
	// .\\cs.g:1030:1: identifier : ( IDENTIFIER | 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' );
	[GrammarRule("identifier")]
	private AstParserRuleReturnScope<object, IToken> identifier()
	{
		EnterRule_identifier();
		EnterRule("identifier", 300);
		TraceIn("identifier", 300);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int identifier_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set1075 = default(IToken);

	    object set1075_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "identifier");
		DebugLocation(1030, 206);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 300)) { return retval; }

			// .\\cs.g:1030:11: ( IDENTIFIER | 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' )
			DebugEnterAlt(1);
			// .\\cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1030, 11);

			set1075=(IToken)input.LT(1);
			if (input.LA(1)==IDENTIFIER||input.LA(1)==95||(input.LA(1)>=97 && input.LA(1)<=98)||(input.LA(1)>=100 && input.LA(1)<=101)||input.LA(1)==105||input.LA(1)==117||input.LA(1)==120||input.LA(1)==122||input.LA(1)==126||input.LA(1)==132||input.LA(1)==135||input.LA(1)==141||(input.LA(1)>=143 && input.LA(1)<=144)||(input.LA(1)>=147 && input.LA(1)<=148)||input.LA(1)==152||input.LA(1)==154||input.LA(1)==157||input.LA(1)==160||input.LA(1)==162||input.LA(1)==167||(input.LA(1)>=171 && input.LA(1)<=172)||input.LA(1)==183||input.LA(1)==190||input.LA(1)==194||input.LA(1)==196)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1075));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("identifier", 300);
			LeaveRule("identifier", 300);
			LeaveRule_identifier();
	        if (state.backtracking > 0) { Memoize(input, 300, identifier_StartIndex); }

	    }
	 	DebugLocation(1032, 206);
		} finally { DebugExitRule(GrammarFileName, "identifier"); }
		return retval;

	}
	// $ANTLR end "identifier"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_keyword() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_keyword() {}

	// $ANTLR start "keyword"
	// .\\cs.g:1034:1: keyword : ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' );
	[GrammarRule("keyword")]
	private AstParserRuleReturnScope<object, IToken> keyword()
	{
		EnterRule_keyword();
		EnterRule("keyword", 301);
		TraceIn("keyword", 301);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int keyword_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set1076 = default(IToken);

	    object set1076_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "keyword");
		DebugLocation(1034, 801);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 301)) { return retval; }

			// .\\cs.g:1034:8: ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' )
			DebugEnterAlt(1);
			// .\\cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1034, 8);

			set1076=(IToken)input.LT(1);
			if (input.LA(1)==ENUM||input.LA(1)==FALSE||input.LA(1)==IF||input.LA(1)==NULL||input.LA(1)==TRUE||input.LA(1)==USING||input.LA(1)==96||input.LA(1)==99||(input.LA(1)>=102 && input.LA(1)<=104)||(input.LA(1)>=106 && input.LA(1)<=116)||(input.LA(1)>=118 && input.LA(1)<=119)||input.LA(1)==121||(input.LA(1)>=123 && input.LA(1)<=125)||(input.LA(1)>=127 && input.LA(1)<=131)||input.LA(1)==134||(input.LA(1)>=136 && input.LA(1)<=140)||input.LA(1)==142||(input.LA(1)>=145 && input.LA(1)<=146)||(input.LA(1)>=149 && input.LA(1)<=151)||input.LA(1)==153||(input.LA(1)>=155 && input.LA(1)<=156)||input.LA(1)==158||input.LA(1)==161||(input.LA(1)>=163 && input.LA(1)<=166)||(input.LA(1)>=168 && input.LA(1)<=170)||(input.LA(1)>=173 && input.LA(1)<=182)||(input.LA(1)>=184 && input.LA(1)<=189)||(input.LA(1)>=191 && input.LA(1)<=193))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1076));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("keyword", 301);
			LeaveRule("keyword", 301);
			LeaveRule_keyword();
	        if (state.backtracking > 0) { Memoize(input, 301, keyword_StartIndex); }

	    }
	 	DebugLocation(1035, 801);
		} finally { DebugExitRule(GrammarFileName, "keyword"); }
		return retval;

	}
	// $ANTLR end "keyword"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_also_keyword() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_also_keyword() {}

	// $ANTLR start "also_keyword"
	// .\\cs.g:1037:1: also_keyword : ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'event' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' );
	[GrammarRule("also_keyword")]
	private AstParserRuleReturnScope<object, IToken> also_keyword()
	{
		EnterRule_also_keyword();
		EnterRule("also_keyword", 302);
		TraceIn("also_keyword", 302);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int also_keyword_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set1077 = default(IToken);

	    object set1077_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "also_keyword");
		DebugLocation(1037, 94);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 302)) { return retval; }

			// .\\cs.g:1037:13: ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'event' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' )
			DebugEnterAlt(1);
			// .\\cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1037, 13);

			set1077=(IToken)input.LT(1);
			if (input.LA(1)==95||(input.LA(1)>=97 && input.LA(1)<=98)||(input.LA(1)>=100 && input.LA(1)<=101)||input.LA(1)==105||input.LA(1)==117||input.LA(1)==120||(input.LA(1)>=122 && input.LA(1)<=123)||input.LA(1)==126||input.LA(1)==132||input.LA(1)==135||input.LA(1)==141||(input.LA(1)>=143 && input.LA(1)<=144)||(input.LA(1)>=147 && input.LA(1)<=148)||input.LA(1)==152||input.LA(1)==154||input.LA(1)==157||input.LA(1)==160||input.LA(1)==162||input.LA(1)==167||(input.LA(1)>=171 && input.LA(1)<=172)||input.LA(1)==183||input.LA(1)==190||input.LA(1)==194||input.LA(1)==196)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1077));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("also_keyword", 302);
			LeaveRule("also_keyword", 302);
			LeaveRule_also_keyword();
	        if (state.backtracking > 0) { Memoize(input, 302, also_keyword_StartIndex); }

	    }
	 	DebugLocation(1040, 94);
		} finally { DebugExitRule(GrammarFileName, "also_keyword"); }
		return retval;

	}
	// $ANTLR end "also_keyword"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_literal() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_literal() {}

	// $ANTLR start "literal"
	// .\\cs.g:1042:1: literal : ( Real_literal | NUMBER | Hex_number | Character_literal | STRINGLITERAL | Verbatim_string_literal | TRUE | FALSE | NULL );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<object, IToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 303);
		TraceIn("literal", 303);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int literal_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken set1078 = default(IToken);

	    object set1078_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(1042, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 303)) { return retval; }

			// .\\cs.g:1042:8: ( Real_literal | NUMBER | Hex_number | Character_literal | STRINGLITERAL | Verbatim_string_literal | TRUE | FALSE | NULL )
			DebugEnterAlt(1);
			// .\\cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1042, 8);

			set1078=(IToken)input.LT(1);
			if (input.LA(1)==Character_literal||input.LA(1)==FALSE||input.LA(1)==Hex_number||(input.LA(1)>=NULL && input.LA(1)<=NUMBER)||input.LA(1)==Real_literal||input.LA(1)==STRINGLITERAL||input.LA(1)==TRUE||input.LA(1)==Verbatim_string_literal)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1078));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 303);
			LeaveRule("literal", 303);
			LeaveRule_literal();
	        if (state.backtracking > 0) { Memoize(input, 303, literal_StartIndex); }

	    }
	 	DebugLocation(1052, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_assignment_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_assignment_list() {}

	// $ANTLR start "assignment_list"
	// .\\cs.g:1323:1: assignment_list : ( assignment ';' )+ ;
	[GrammarRule("assignment_list")]
	private AstParserRuleReturnScope<object, IToken> assignment_list()
	{
		EnterRule_assignment_list();
		EnterRule("assignment_list", 304);
		TraceIn("assignment_list", 304);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int assignment_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal1080 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> assignment1079 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal1080_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "assignment_list");
		DebugLocation(1323, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 304)) { return retval; }

			// .\\cs.g:1323:16: ( ( assignment ';' )+ )
			DebugEnterAlt(1);
			// .\\cs.g:1324:2: ( assignment ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1324, 2);
			// .\\cs.g:1324:2: ( assignment ';' )+
			int cnt273=0;
			try { DebugEnterSubRule(273);
			while (true)
			{
				int alt273=2;
				try { DebugEnterDecision(273, decisionCanBacktrack[273]);
				int LA273_0 = input.LA(1);

				if ((LA273_0==Character_literal||LA273_0==FALSE||(LA273_0>=Hex_number && LA273_0<=IDENTIFIER)||(LA273_0>=MINUS && LA273_0<=NUMBER)||LA273_0==Real_literal||LA273_0==STRINGLITERAL||LA273_0==TRUE||LA273_0==Verbatim_string_literal||LA273_0==61||LA273_0==66||(LA273_0>=68 && LA273_0<=69)||(LA273_0>=71 && LA273_0<=72)||LA273_0==75||LA273_0==95||(LA273_0>=97 && LA273_0<=98)||(LA273_0>=100 && LA273_0<=103)||(LA273_0>=105 && LA273_0<=106)||(LA273_0>=109 && LA273_0<=110)||(LA273_0>=114 && LA273_0<=117)||(LA273_0>=119 && LA273_0<=120)||LA273_0==122||LA273_0==126||LA273_0==129||LA273_0==132||LA273_0==135||LA273_0==138||LA273_0==141||(LA273_0>=143 && LA273_0<=144)||(LA273_0>=146 && LA273_0<=148)||(LA273_0>=150 && LA273_0<=152)||LA273_0==154||LA273_0==157||LA273_0==160||LA273_0==162||LA273_0==167||LA273_0==169||(LA273_0>=171 && LA273_0<=174)||LA273_0==177||LA273_0==180||(LA273_0>=183 && LA273_0<=187)||(LA273_0>=189 && LA273_0<=190)||LA273_0==194||LA273_0==196||LA273_0==202))
				{
					alt273 = 1;
				}


				} finally { DebugExitDecision(273); }
				switch (alt273)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:1324:3: assignment ';'
					{
					DebugLocation(1324, 3);
					PushFollow(Follow._assignment_in_assignment_list10264);
					assignment1079=assignment();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment1079.Tree);
					DebugLocation(1324, 14);
					char_literal1080=(IToken)Match(input,SEMI,Follow._SEMI_in_assignment_list10266); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1080_tree = (object)adaptor.Create(char_literal1080);
					adaptor.AddChild(root_0, char_literal1080_tree);
					}

					}
					break;

				default:
					if (cnt273 >= 1)
						goto loop273;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee273 = new EarlyExitException( 273, input );
					DebugRecognitionException(eee273);
					throw eee273;
				}
				cnt273++;
			}
			loop273:
				;

			} finally { DebugExitSubRule(273); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment_list", 304);
			LeaveRule("assignment_list", 304);
			LeaveRule_assignment_list();
	        if (state.backtracking > 0) { Memoize(input, 304, assignment_list_StartIndex); }

	    }
	 	DebugLocation(1324, 19);
		} finally { DebugExitRule(GrammarFileName, "assignment_list"); }
		return retval;

	}
	// $ANTLR end "assignment_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_field_declarations() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_field_declarations() {}

	// $ANTLR start "field_declarations"
	// .\\cs.g:1325:1: field_declarations : ( ( attributes )? ( modifiers )? type field_declaration )+ ;
	[GrammarRule("field_declarations")]
	private AstParserRuleReturnScope<object, IToken> field_declarations()
	{
		EnterRule_field_declarations();
		EnterRule("field_declarations", 305);
		TraceIn("field_declarations", 305);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int field_declarations_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> attributes1081 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> modifiers1082 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type1083 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> field_declaration1084 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "field_declarations");
		DebugLocation(1325, 56);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 305)) { return retval; }

			// .\\cs.g:1325:19: ( ( ( attributes )? ( modifiers )? type field_declaration )+ )
			DebugEnterAlt(1);
			// .\\cs.g:1326:2: ( ( attributes )? ( modifiers )? type field_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1326, 2);
			// .\\cs.g:1326:2: ( ( attributes )? ( modifiers )? type field_declaration )+
			int cnt276=0;
			try { DebugEnterSubRule(276);
			while (true)
			{
				int alt276=2;
				try { DebugEnterDecision(276, decisionCanBacktrack[276]);
				int LA276_0 = input.LA(1);

				if ((LA276_0==IDENTIFIER||LA276_0==91||(LA276_0>=95 && LA276_0<=98)||(LA276_0>=100 && LA276_0<=101)||LA276_0==103||(LA276_0>=105 && LA276_0<=106)||LA276_0==109||LA276_0==114||LA276_0==117||(LA276_0>=119 && LA276_0<=120)||LA276_0==122||(LA276_0>=125 && LA276_0<=126)||LA276_0==129||LA276_0==132||LA276_0==135||LA276_0==138||(LA276_0>=140 && LA276_0<=141)||(LA276_0>=143 && LA276_0<=144)||(LA276_0>=146 && LA276_0<=148)||(LA276_0>=150 && LA276_0<=152)||LA276_0==154||(LA276_0>=156 && LA276_0<=157)||(LA276_0>=160 && LA276_0<=165)||LA276_0==167||(LA276_0>=169 && LA276_0<=173)||(LA276_0>=176 && LA276_0<=177)||LA276_0==183||(LA276_0>=185 && LA276_0<=186)||(LA276_0>=188 && LA276_0<=194)||LA276_0==196))
				{
					alt276 = 1;
				}


				} finally { DebugExitDecision(276); }
				switch (alt276)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:1326:3: ( attributes )? ( modifiers )? type field_declaration
					{
					DebugLocation(1326, 3);
					// .\\cs.g:1326:3: ( attributes )?
					int alt274=2;
					try { DebugEnterSubRule(274);
					try { DebugEnterDecision(274, decisionCanBacktrack[274]);
					int LA274_0 = input.LA(1);

					if ((LA274_0==91))
					{
						alt274 = 1;
					}
					} finally { DebugExitDecision(274); }
					switch (alt274)
					{
					case 1:
						DebugEnterAlt(1);
						// .\\cs.g:1326:3: attributes
						{
						DebugLocation(1326, 3);
						PushFollow(Follow._attributes_in_field_declarations10277);
						attributes1081=attributes();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, attributes1081.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(274); }

					DebugLocation(1326, 17);
					// .\\cs.g:1326:17: ( modifiers )?
					int alt275=2;
					try { DebugEnterSubRule(275);
					try { DebugEnterDecision(275, decisionCanBacktrack[275]);
					int LA275_0 = input.LA(1);

					if ((LA275_0==96||LA275_0==125||LA275_0==140||LA275_0==150||LA275_0==156||LA275_0==161||(LA275_0>=163 && LA275_0<=165)||LA275_0==170||LA275_0==176||LA275_0==188||LA275_0==191||LA275_0==193))
					{
						alt275 = 1;
					}
					} finally { DebugExitDecision(275); }
					switch (alt275)
					{
					case 1:
						DebugEnterAlt(1);
						// .\\cs.g:1326:17: modifiers
						{
						DebugLocation(1326, 17);
						PushFollow(Follow._modifiers_in_field_declarations10282);
						modifiers1082=modifiers();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers1082.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(275); }

					DebugLocation(1326, 30);
					PushFollow(Follow._type_in_field_declarations10287);
					type1083=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type1083.Tree);
					DebugLocation(1326, 37);
					PushFollow(Follow._field_declaration_in_field_declarations10291);
					field_declaration1084=field_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, field_declaration1084.Tree);

					}
					break;

				default:
					if (cnt276 >= 1)
						goto loop276;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee276 = new EarlyExitException( 276, input );
					DebugRecognitionException(eee276);
					throw eee276;
				}
				cnt276++;
			}
			loop276:
				;

			} finally { DebugExitSubRule(276); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("field_declarations", 305);
			LeaveRule("field_declarations", 305);
			LeaveRule_field_declarations();
	        if (state.backtracking > 0) { Memoize(input, 305, field_declarations_StartIndex); }

	    }
	 	DebugLocation(1326, 56);
		} finally { DebugExitRule(GrammarFileName, "field_declarations"); }
		return retval;

	}
	// $ANTLR end "field_declarations"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_property_declaration_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_property_declaration_list() {}

	// $ANTLR start "property_declaration_list"
	// .\\cs.g:1327:1: property_declaration_list : ( ( attributes )? ( modifiers )? type property_declaration )+ ;
	[GrammarRule("property_declaration_list")]
	private AstParserRuleReturnScope<object, IToken> property_declaration_list()
	{
		EnterRule_property_declaration_list();
		EnterRule("property_declaration_list", 306);
		TraceIn("property_declaration_list", 306);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int property_declaration_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> attributes1085 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> modifiers1086 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type1087 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> property_declaration1088 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "property_declaration_list");
		DebugLocation(1327, 59);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 306)) { return retval; }

			// .\\cs.g:1327:26: ( ( ( attributes )? ( modifiers )? type property_declaration )+ )
			DebugEnterAlt(1);
			// .\\cs.g:1328:2: ( ( attributes )? ( modifiers )? type property_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1328, 2);
			// .\\cs.g:1328:2: ( ( attributes )? ( modifiers )? type property_declaration )+
			int cnt279=0;
			try { DebugEnterSubRule(279);
			while (true)
			{
				int alt279=2;
				try { DebugEnterDecision(279, decisionCanBacktrack[279]);
				int LA279_0 = input.LA(1);

				if ((LA279_0==IDENTIFIER||LA279_0==91||(LA279_0>=95 && LA279_0<=98)||(LA279_0>=100 && LA279_0<=101)||LA279_0==103||(LA279_0>=105 && LA279_0<=106)||LA279_0==109||LA279_0==114||LA279_0==117||(LA279_0>=119 && LA279_0<=120)||LA279_0==122||(LA279_0>=125 && LA279_0<=126)||LA279_0==129||LA279_0==132||LA279_0==135||LA279_0==138||(LA279_0>=140 && LA279_0<=141)||(LA279_0>=143 && LA279_0<=144)||(LA279_0>=146 && LA279_0<=148)||(LA279_0>=150 && LA279_0<=152)||LA279_0==154||(LA279_0>=156 && LA279_0<=157)||(LA279_0>=160 && LA279_0<=165)||LA279_0==167||(LA279_0>=169 && LA279_0<=173)||(LA279_0>=176 && LA279_0<=177)||LA279_0==183||(LA279_0>=185 && LA279_0<=186)||(LA279_0>=188 && LA279_0<=194)||LA279_0==196))
				{
					alt279 = 1;
				}


				} finally { DebugExitDecision(279); }
				switch (alt279)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:1328:3: ( attributes )? ( modifiers )? type property_declaration
					{
					DebugLocation(1328, 3);
					// .\\cs.g:1328:3: ( attributes )?
					int alt277=2;
					try { DebugEnterSubRule(277);
					try { DebugEnterDecision(277, decisionCanBacktrack[277]);
					int LA277_0 = input.LA(1);

					if ((LA277_0==91))
					{
						alt277 = 1;
					}
					} finally { DebugExitDecision(277); }
					switch (alt277)
					{
					case 1:
						DebugEnterAlt(1);
						// .\\cs.g:1328:3: attributes
						{
						DebugLocation(1328, 3);
						PushFollow(Follow._attributes_in_property_declaration_list10302);
						attributes1085=attributes();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, attributes1085.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(277); }

					DebugLocation(1328, 17);
					// .\\cs.g:1328:17: ( modifiers )?
					int alt278=2;
					try { DebugEnterSubRule(278);
					try { DebugEnterDecision(278, decisionCanBacktrack[278]);
					int LA278_0 = input.LA(1);

					if ((LA278_0==96||LA278_0==125||LA278_0==140||LA278_0==150||LA278_0==156||LA278_0==161||(LA278_0>=163 && LA278_0<=165)||LA278_0==170||LA278_0==176||LA278_0==188||LA278_0==191||LA278_0==193))
					{
						alt278 = 1;
					}
					} finally { DebugExitDecision(278); }
					switch (alt278)
					{
					case 1:
						DebugEnterAlt(1);
						// .\\cs.g:1328:17: modifiers
						{
						DebugLocation(1328, 17);
						PushFollow(Follow._modifiers_in_property_declaration_list10307);
						modifiers1086=modifiers();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers1086.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(278); }

					DebugLocation(1328, 30);
					PushFollow(Follow._type_in_property_declaration_list10312);
					type1087=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type1087.Tree);
					DebugLocation(1328, 37);
					PushFollow(Follow._property_declaration_in_property_declaration_list10316);
					property_declaration1088=property_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, property_declaration1088.Tree);

					}
					break;

				default:
					if (cnt279 >= 1)
						goto loop279;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee279 = new EarlyExitException( 279, input );
					DebugRecognitionException(eee279);
					throw eee279;
				}
				cnt279++;
			}
			loop279:
				;

			} finally { DebugExitSubRule(279); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("property_declaration_list", 306);
			LeaveRule("property_declaration_list", 306);
			LeaveRule_property_declaration_list();
	        if (state.backtracking > 0) { Memoize(input, 306, property_declaration_list_StartIndex); }

	    }
	 	DebugLocation(1328, 59);
		} finally { DebugExitRule(GrammarFileName, "property_declaration_list"); }
		return retval;

	}
	// $ANTLR end "property_declaration_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_constant_declarations() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_constant_declarations() {}

	// $ANTLR start "constant_declarations"
	// .\\cs.g:1329:1: constant_declarations : ( constant_declaration )+ ;
	[GrammarRule("constant_declarations")]
	private AstParserRuleReturnScope<object, IToken> constant_declarations()
	{
		EnterRule_constant_declarations();
		EnterRule("constant_declarations", 307);
		TraceIn("constant_declarations", 307);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int constant_declarations_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> constant_declaration1089 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "constant_declarations");
		DebugLocation(1329, 22);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 307)) { return retval; }

			// .\\cs.g:1329:22: ( ( constant_declaration )+ )
			DebugEnterAlt(1);
			// .\\cs.g:1330:2: ( constant_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1330, 2);
			// .\\cs.g:1330:2: ( constant_declaration )+
			int cnt280=0;
			try { DebugEnterSubRule(280);
			while (true)
			{
				int alt280=2;
				try { DebugEnterDecision(280, decisionCanBacktrack[280]);
				int LA280_0 = input.LA(1);

				if ((LA280_0==112))
				{
					alt280 = 1;
				}


				} finally { DebugExitDecision(280); }
				switch (alt280)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:1330:2: constant_declaration
					{
					DebugLocation(1330, 2);
					PushFollow(Follow._constant_declaration_in_constant_declarations10326);
					constant_declaration1089=constant_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declaration1089.Tree);

					}
					break;

				default:
					if (cnt280 >= 1)
						goto loop280;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee280 = new EarlyExitException( 280, input );
					DebugRecognitionException(eee280);
					throw eee280;
				}
				cnt280++;
			}
			loop280:
				;

			} finally { DebugExitSubRule(280); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_declarations", 307);
			LeaveRule("constant_declarations", 307);
			LeaveRule_constant_declarations();
	        if (state.backtracking > 0) { Memoize(input, 307, constant_declarations_StartIndex); }

	    }
	 	DebugLocation(1330, 22);
		} finally { DebugExitRule(GrammarFileName, "constant_declarations"); }
		return retval;

	}
	// $ANTLR end "constant_declarations"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_literals() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_literals() {}

	// $ANTLR start "literals"
	// .\\cs.g:1331:1: literals : ( literal )+ ;
	[GrammarRule("literals")]
	private AstParserRuleReturnScope<object, IToken> literals()
	{
		EnterRule_literals();
		EnterRule("literals", 308);
		TraceIn("literals", 308);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int literals_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> literal1090 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "literals");
		DebugLocation(1331, 10);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 308)) { return retval; }

			// .\\cs.g:1331:9: ( ( literal )+ )
			DebugEnterAlt(1);
			// .\\cs.g:1332:2: ( literal )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1332, 2);
			// .\\cs.g:1332:2: ( literal )+
			int cnt281=0;
			try { DebugEnterSubRule(281);
			while (true)
			{
				int alt281=2;
				try { DebugEnterDecision(281, decisionCanBacktrack[281]);
				int LA281_0 = input.LA(1);

				if ((LA281_0==Character_literal||LA281_0==FALSE||LA281_0==Hex_number||(LA281_0>=NULL && LA281_0<=NUMBER)||LA281_0==Real_literal||LA281_0==STRINGLITERAL||LA281_0==TRUE||LA281_0==Verbatim_string_literal))
				{
					alt281 = 1;
				}


				} finally { DebugExitDecision(281); }
				switch (alt281)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:1332:2: literal
					{
					DebugLocation(1332, 2);
					PushFollow(Follow._literal_in_literals10334);
					literal1090=literal();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, literal1090.Tree);

					}
					break;

				default:
					if (cnt281 >= 1)
						goto loop281;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee281 = new EarlyExitException( 281, input );
					DebugRecognitionException(eee281);
					throw eee281;
				}
				cnt281++;
			}
			loop281:
				;

			} finally { DebugExitSubRule(281); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literals", 308);
			LeaveRule("literals", 308);
			LeaveRule_literals();
	        if (state.backtracking > 0) { Memoize(input, 308, literals_StartIndex); }

	    }
	 	DebugLocation(1332, 10);
		} finally { DebugExitRule(GrammarFileName, "literals"); }
		return retval;

	}
	// $ANTLR end "literals"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_delegate_declaration_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_delegate_declaration_list() {}

	// $ANTLR start "delegate_declaration_list"
	// .\\cs.g:1333:1: delegate_declaration_list : ( ( attributes )? ( modifiers )? delegate_declaration )+ ;
	[GrammarRule("delegate_declaration_list")]
	private AstParserRuleReturnScope<object, IToken> delegate_declaration_list()
	{
		EnterRule_delegate_declaration_list();
		EnterRule("delegate_declaration_list", 309);
		TraceIn("delegate_declaration_list", 309);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int delegate_declaration_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> attributes1091 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> modifiers1092 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> delegate_declaration1093 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "delegate_declaration_list");
		DebugLocation(1333, 52);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 309)) { return retval; }

			// .\\cs.g:1333:26: ( ( ( attributes )? ( modifiers )? delegate_declaration )+ )
			DebugEnterAlt(1);
			// .\\cs.g:1334:2: ( ( attributes )? ( modifiers )? delegate_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1334, 2);
			// .\\cs.g:1334:2: ( ( attributes )? ( modifiers )? delegate_declaration )+
			int cnt284=0;
			try { DebugEnterSubRule(284);
			while (true)
			{
				int alt284=2;
				try { DebugEnterDecision(284, decisionCanBacktrack[284]);
				int LA284_0 = input.LA(1);

				if ((LA284_0==91||LA284_0==96||LA284_0==116||LA284_0==125||LA284_0==140||LA284_0==150||LA284_0==156||LA284_0==161||(LA284_0>=163 && LA284_0<=165)||LA284_0==170||LA284_0==176||LA284_0==188||LA284_0==191||LA284_0==193))
				{
					alt284 = 1;
				}


				} finally { DebugExitDecision(284); }
				switch (alt284)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:1334:3: ( attributes )? ( modifiers )? delegate_declaration
					{
					DebugLocation(1334, 3);
					// .\\cs.g:1334:3: ( attributes )?
					int alt282=2;
					try { DebugEnterSubRule(282);
					try { DebugEnterDecision(282, decisionCanBacktrack[282]);
					int LA282_0 = input.LA(1);

					if ((LA282_0==91))
					{
						alt282 = 1;
					}
					} finally { DebugExitDecision(282); }
					switch (alt282)
					{
					case 1:
						DebugEnterAlt(1);
						// .\\cs.g:1334:3: attributes
						{
						DebugLocation(1334, 3);
						PushFollow(Follow._attributes_in_delegate_declaration_list10344);
						attributes1091=attributes();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, attributes1091.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(282); }

					DebugLocation(1334, 17);
					// .\\cs.g:1334:17: ( modifiers )?
					int alt283=2;
					try { DebugEnterSubRule(283);
					try { DebugEnterDecision(283, decisionCanBacktrack[283]);
					int LA283_0 = input.LA(1);

					if ((LA283_0==96||LA283_0==125||LA283_0==140||LA283_0==150||LA283_0==156||LA283_0==161||(LA283_0>=163 && LA283_0<=165)||LA283_0==170||LA283_0==176||LA283_0==188||LA283_0==191||LA283_0==193))
					{
						alt283 = 1;
					}
					} finally { DebugExitDecision(283); }
					switch (alt283)
					{
					case 1:
						DebugEnterAlt(1);
						// .\\cs.g:1334:17: modifiers
						{
						DebugLocation(1334, 17);
						PushFollow(Follow._modifiers_in_delegate_declaration_list10349);
						modifiers1092=modifiers();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers1092.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(283); }

					DebugLocation(1334, 30);
					PushFollow(Follow._delegate_declaration_in_delegate_declaration_list10354);
					delegate_declaration1093=delegate_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, delegate_declaration1093.Tree);

					}
					break;

				default:
					if (cnt284 >= 1)
						goto loop284;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee284 = new EarlyExitException( 284, input );
					DebugRecognitionException(eee284);
					throw eee284;
				}
				cnt284++;
			}
			loop284:
				;

			} finally { DebugExitSubRule(284); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("delegate_declaration_list", 309);
			LeaveRule("delegate_declaration_list", 309);
			LeaveRule_delegate_declaration_list();
	        if (state.backtracking > 0) { Memoize(input, 309, delegate_declaration_list_StartIndex); }

	    }
	 	DebugLocation(1334, 52);
		} finally { DebugExitRule(GrammarFileName, "delegate_declaration_list"); }
		return retval;

	}
	// $ANTLR end "delegate_declaration_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_local_variable_declaration_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_local_variable_declaration_list() {}

	// $ANTLR start "local_variable_declaration_list"
	// .\\cs.g:1335:1: local_variable_declaration_list : ( local_variable_declaration ';' )+ ;
	[GrammarRule("local_variable_declaration_list")]
	private AstParserRuleReturnScope<object, IToken> local_variable_declaration_list()
	{
		EnterRule_local_variable_declaration_list();
		EnterRule("local_variable_declaration_list", 310);
		TraceIn("local_variable_declaration_list", 310);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int local_variable_declaration_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal1095 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> local_variable_declaration1094 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal1095_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "local_variable_declaration_list");
		DebugLocation(1335, 35);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 310)) { return retval; }

			// .\\cs.g:1335:32: ( ( local_variable_declaration ';' )+ )
			DebugEnterAlt(1);
			// .\\cs.g:1336:2: ( local_variable_declaration ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1336, 2);
			// .\\cs.g:1336:2: ( local_variable_declaration ';' )+
			int cnt285=0;
			try { DebugEnterSubRule(285);
			while (true)
			{
				int alt285=2;
				try { DebugEnterDecision(285, decisionCanBacktrack[285]);
				int LA285_0 = input.LA(1);

				if ((LA285_0==IDENTIFIER||LA285_0==95||(LA285_0>=97 && LA285_0<=98)||(LA285_0>=100 && LA285_0<=101)||LA285_0==103||(LA285_0>=105 && LA285_0<=106)||LA285_0==109||LA285_0==114||LA285_0==117||(LA285_0>=119 && LA285_0<=120)||LA285_0==122||LA285_0==126||LA285_0==129||LA285_0==132||LA285_0==135||LA285_0==138||LA285_0==141||(LA285_0>=143 && LA285_0<=144)||(LA285_0>=146 && LA285_0<=148)||(LA285_0>=151 && LA285_0<=152)||LA285_0==154||LA285_0==157||LA285_0==160||LA285_0==162||LA285_0==167||LA285_0==169||(LA285_0>=171 && LA285_0<=173)||LA285_0==177||LA285_0==183||(LA285_0>=185 && LA285_0<=186)||(LA285_0>=189 && LA285_0<=190)||LA285_0==192||LA285_0==194||LA285_0==196))
				{
					alt285 = 1;
				}


				} finally { DebugExitDecision(285); }
				switch (alt285)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:1336:3: local_variable_declaration ';'
					{
					DebugLocation(1336, 3);
					PushFollow(Follow._local_variable_declaration_in_local_variable_declaration_list10365);
					local_variable_declaration1094=local_variable_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declaration1094.Tree);
					DebugLocation(1336, 30);
					char_literal1095=(IToken)Match(input,SEMI,Follow._SEMI_in_local_variable_declaration_list10367); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1095_tree = (object)adaptor.Create(char_literal1095);
					adaptor.AddChild(root_0, char_literal1095_tree);
					}

					}
					break;

				default:
					if (cnt285 >= 1)
						goto loop285;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee285 = new EarlyExitException( 285, input );
					DebugRecognitionException(eee285);
					throw eee285;
				}
				cnt285++;
			}
			loop285:
				;

			} finally { DebugExitSubRule(285); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_declaration_list", 310);
			LeaveRule("local_variable_declaration_list", 310);
			LeaveRule_local_variable_declaration_list();
	        if (state.backtracking > 0) { Memoize(input, 310, local_variable_declaration_list_StartIndex); }

	    }
	 	DebugLocation(1336, 35);
		} finally { DebugExitRule(GrammarFileName, "local_variable_declaration_list"); }
		return retval;

	}
	// $ANTLR end "local_variable_declaration_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_local_variable_initializer_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_local_variable_initializer_list() {}

	// $ANTLR start "local_variable_initializer_list"
	// .\\cs.g:1337:1: local_variable_initializer_list : ( local_variable_initializer ';' )+ ;
	[GrammarRule("local_variable_initializer_list")]
	private AstParserRuleReturnScope<object, IToken> local_variable_initializer_list()
	{
		EnterRule_local_variable_initializer_list();
		EnterRule("local_variable_initializer_list", 311);
		TraceIn("local_variable_initializer_list", 311);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int local_variable_initializer_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal1097 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> local_variable_initializer1096 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal1097_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "local_variable_initializer_list");
		DebugLocation(1337, 35);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 311)) { return retval; }

			// .\\cs.g:1337:32: ( ( local_variable_initializer ';' )+ )
			DebugEnterAlt(1);
			// .\\cs.g:1338:2: ( local_variable_initializer ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1338, 2);
			// .\\cs.g:1338:2: ( local_variable_initializer ';' )+
			int cnt286=0;
			try { DebugEnterSubRule(286);
			while (true)
			{
				int alt286=2;
				try { DebugEnterDecision(286, decisionCanBacktrack[286]);
				int LA286_0 = input.LA(1);

				if ((LA286_0==Character_literal||LA286_0==FALSE||(LA286_0>=Hex_number && LA286_0<=IDENTIFIER)||(LA286_0>=MINUS && LA286_0<=NUMBER)||LA286_0==Real_literal||LA286_0==STRINGLITERAL||LA286_0==TRUE||LA286_0==Verbatim_string_literal||LA286_0==61||LA286_0==66||(LA286_0>=68 && LA286_0<=69)||(LA286_0>=71 && LA286_0<=72)||LA286_0==75||LA286_0==95||(LA286_0>=97 && LA286_0<=98)||(LA286_0>=100 && LA286_0<=103)||(LA286_0>=105 && LA286_0<=106)||(LA286_0>=109 && LA286_0<=110)||(LA286_0>=114 && LA286_0<=117)||(LA286_0>=119 && LA286_0<=120)||LA286_0==122||LA286_0==126||LA286_0==129||LA286_0==132||LA286_0==135||LA286_0==138||LA286_0==141||(LA286_0>=143 && LA286_0<=144)||(LA286_0>=146 && LA286_0<=148)||(LA286_0>=150 && LA286_0<=152)||LA286_0==154||LA286_0==157||LA286_0==160||LA286_0==162||LA286_0==167||LA286_0==169||(LA286_0>=171 && LA286_0<=175)||LA286_0==177||LA286_0==180||(LA286_0>=183 && LA286_0<=187)||(LA286_0>=189 && LA286_0<=190)||LA286_0==194||(LA286_0>=196 && LA286_0<=197)||LA286_0==202))
				{
					alt286 = 1;
				}


				} finally { DebugExitDecision(286); }
				switch (alt286)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:1338:3: local_variable_initializer ';'
					{
					DebugLocation(1338, 3);
					PushFollow(Follow._local_variable_initializer_in_local_variable_initializer_list10378);
					local_variable_initializer1096=local_variable_initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_initializer1096.Tree);
					DebugLocation(1338, 30);
					char_literal1097=(IToken)Match(input,SEMI,Follow._SEMI_in_local_variable_initializer_list10380); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1097_tree = (object)adaptor.Create(char_literal1097);
					adaptor.AddChild(root_0, char_literal1097_tree);
					}

					}
					break;

				default:
					if (cnt286 >= 1)
						goto loop286;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee286 = new EarlyExitException( 286, input );
					DebugRecognitionException(eee286);
					throw eee286;
				}
				cnt286++;
			}
			loop286:
				;

			} finally { DebugExitSubRule(286); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_initializer_list", 311);
			LeaveRule("local_variable_initializer_list", 311);
			LeaveRule_local_variable_initializer_list();
	        if (state.backtracking > 0) { Memoize(input, 311, local_variable_initializer_list_StartIndex); }

	    }
	 	DebugLocation(1338, 35);
		} finally { DebugExitRule(GrammarFileName, "local_variable_initializer_list"); }
		return retval;

	}
	// $ANTLR end "local_variable_initializer_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list_test() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list_test() {}

	// $ANTLR start "expression_list_test"
	// .\\cs.g:1339:1: expression_list_test : ( expression ';' )+ ;
	[GrammarRule("expression_list_test")]
	private AstParserRuleReturnScope<object, IToken> expression_list_test()
	{
		EnterRule_expression_list_test();
		EnterRule("expression_list_test", 312);
		TraceIn("expression_list_test", 312);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int expression_list_test_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal1099 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression1098 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal1099_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "expression_list_test");
		DebugLocation(1339, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 312)) { return retval; }

			// .\\cs.g:1339:21: ( ( expression ';' )+ )
			DebugEnterAlt(1);
			// .\\cs.g:1340:2: ( expression ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1340, 2);
			// .\\cs.g:1340:2: ( expression ';' )+
			int cnt287=0;
			try { DebugEnterSubRule(287);
			while (true)
			{
				int alt287=2;
				try { DebugEnterDecision(287, decisionCanBacktrack[287]);
				int LA287_0 = input.LA(1);

				if ((LA287_0==Character_literal||LA287_0==FALSE||(LA287_0>=Hex_number && LA287_0<=IDENTIFIER)||(LA287_0>=MINUS && LA287_0<=NUMBER)||LA287_0==Real_literal||LA287_0==STRINGLITERAL||LA287_0==TRUE||LA287_0==Verbatim_string_literal||LA287_0==61||LA287_0==66||(LA287_0>=68 && LA287_0<=69)||(LA287_0>=71 && LA287_0<=72)||LA287_0==75||LA287_0==95||(LA287_0>=97 && LA287_0<=98)||(LA287_0>=100 && LA287_0<=103)||(LA287_0>=105 && LA287_0<=106)||(LA287_0>=109 && LA287_0<=110)||(LA287_0>=114 && LA287_0<=117)||(LA287_0>=119 && LA287_0<=120)||LA287_0==122||LA287_0==126||LA287_0==129||LA287_0==132||LA287_0==135||LA287_0==138||LA287_0==141||(LA287_0>=143 && LA287_0<=144)||(LA287_0>=146 && LA287_0<=148)||(LA287_0>=150 && LA287_0<=152)||LA287_0==154||LA287_0==157||LA287_0==160||LA287_0==162||LA287_0==167||LA287_0==169||(LA287_0>=171 && LA287_0<=174)||LA287_0==177||LA287_0==180||(LA287_0>=183 && LA287_0<=187)||(LA287_0>=189 && LA287_0<=190)||LA287_0==194||LA287_0==196||LA287_0==202))
				{
					alt287 = 1;
				}


				} finally { DebugExitDecision(287); }
				switch (alt287)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:1340:3: expression ';'
					{
					DebugLocation(1340, 3);
					PushFollow(Follow._expression_in_expression_list_test10391);
					expression1098=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression1098.Tree);
					DebugLocation(1340, 14);
					char_literal1099=(IToken)Match(input,SEMI,Follow._SEMI_in_expression_list_test10393); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1099_tree = (object)adaptor.Create(char_literal1099);
					adaptor.AddChild(root_0, char_literal1099_tree);
					}

					}
					break;

				default:
					if (cnt287 >= 1)
						goto loop287;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee287 = new EarlyExitException( 287, input );
					DebugRecognitionException(eee287);
					throw eee287;
				}
				cnt287++;
			}
			loop287:
				;

			} finally { DebugExitSubRule(287); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_test", 312);
			LeaveRule("expression_list_test", 312);
			LeaveRule_expression_list_test();
	        if (state.backtracking > 0) { Memoize(input, 312, expression_list_test_StartIndex); }

	    }
	 	DebugLocation(1340, 19);
		} finally { DebugExitRule(GrammarFileName, "expression_list_test"); }
		return retval;

	}
	// $ANTLR end "expression_list_test"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_unary_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_unary_expression_list() {}

	// $ANTLR start "unary_expression_list"
	// .\\cs.g:1341:1: unary_expression_list : ( unary_expression ';' )+ ;
	[GrammarRule("unary_expression_list")]
	private AstParserRuleReturnScope<object, IToken> unary_expression_list()
	{
		EnterRule_unary_expression_list();
		EnterRule("unary_expression_list", 313);
		TraceIn("unary_expression_list", 313);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int unary_expression_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal1101 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> unary_expression1100 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal1101_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "unary_expression_list");
		DebugLocation(1341, 25);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 313)) { return retval; }

			// .\\cs.g:1341:22: ( ( unary_expression ';' )+ )
			DebugEnterAlt(1);
			// .\\cs.g:1342:2: ( unary_expression ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1342, 2);
			// .\\cs.g:1342:2: ( unary_expression ';' )+
			int cnt288=0;
			try { DebugEnterSubRule(288);
			while (true)
			{
				int alt288=2;
				try { DebugEnterDecision(288, decisionCanBacktrack[288]);
				int LA288_0 = input.LA(1);

				if ((LA288_0==Character_literal||LA288_0==FALSE||(LA288_0>=Hex_number && LA288_0<=IDENTIFIER)||(LA288_0>=MINUS && LA288_0<=NUMBER)||LA288_0==Real_literal||LA288_0==STRINGLITERAL||LA288_0==TRUE||LA288_0==Verbatim_string_literal||LA288_0==61||LA288_0==66||(LA288_0>=68 && LA288_0<=69)||(LA288_0>=71 && LA288_0<=72)||LA288_0==75||LA288_0==95||(LA288_0>=97 && LA288_0<=98)||(LA288_0>=100 && LA288_0<=103)||(LA288_0>=105 && LA288_0<=106)||(LA288_0>=109 && LA288_0<=110)||(LA288_0>=114 && LA288_0<=117)||(LA288_0>=119 && LA288_0<=120)||LA288_0==122||LA288_0==126||LA288_0==129||LA288_0==132||LA288_0==135||LA288_0==138||LA288_0==141||(LA288_0>=143 && LA288_0<=144)||(LA288_0>=146 && LA288_0<=148)||(LA288_0>=150 && LA288_0<=152)||LA288_0==154||LA288_0==157||LA288_0==160||LA288_0==162||LA288_0==167||LA288_0==169||(LA288_0>=171 && LA288_0<=174)||LA288_0==177||LA288_0==180||(LA288_0>=183 && LA288_0<=187)||(LA288_0>=189 && LA288_0<=190)||LA288_0==194||LA288_0==196||LA288_0==202))
				{
					alt288 = 1;
				}


				} finally { DebugExitDecision(288); }
				switch (alt288)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:1342:3: unary_expression ';'
					{
					DebugLocation(1342, 3);
					PushFollow(Follow._unary_expression_in_unary_expression_list10404);
					unary_expression1100=unary_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression1100.Tree);
					DebugLocation(1342, 20);
					char_literal1101=(IToken)Match(input,SEMI,Follow._SEMI_in_unary_expression_list10406); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1101_tree = (object)adaptor.Create(char_literal1101);
					adaptor.AddChild(root_0, char_literal1101_tree);
					}

					}
					break;

				default:
					if (cnt288 >= 1)
						goto loop288;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee288 = new EarlyExitException( 288, input );
					DebugRecognitionException(eee288);
					throw eee288;
				}
				cnt288++;
			}
			loop288:
				;

			} finally { DebugExitSubRule(288); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_expression_list", 313);
			LeaveRule("unary_expression_list", 313);
			LeaveRule_unary_expression_list();
	        if (state.backtracking > 0) { Memoize(input, 313, unary_expression_list_StartIndex); }

	    }
	 	DebugLocation(1342, 25);
		} finally { DebugExitRule(GrammarFileName, "unary_expression_list"); }
		return retval;

	}
	// $ANTLR end "unary_expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_invocation_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_invocation_expression_list() {}

	// $ANTLR start "invocation_expression_list"
	// .\\cs.g:1343:1: invocation_expression_list : ( invocation_expression ';' )+ ;
	[GrammarRule("invocation_expression_list")]
	private AstParserRuleReturnScope<object, IToken> invocation_expression_list()
	{
		EnterRule_invocation_expression_list();
		EnterRule("invocation_expression_list", 314);
		TraceIn("invocation_expression_list", 314);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int invocation_expression_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal1103 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> invocation_expression1102 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal1103_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "invocation_expression_list");
		DebugLocation(1343, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 314)) { return retval; }

			// .\\cs.g:1343:27: ( ( invocation_expression ';' )+ )
			DebugEnterAlt(1);
			// .\\cs.g:1344:2: ( invocation_expression ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1344, 2);
			// .\\cs.g:1344:2: ( invocation_expression ';' )+
			int cnt289=0;
			try { DebugEnterSubRule(289);
			while (true)
			{
				int alt289=2;
				try { DebugEnterDecision(289, decisionCanBacktrack[289]);
				int LA289_0 = input.LA(1);

				if ((LA289_0==IDENTIFIER||LA289_0==95||(LA289_0>=97 && LA289_0<=98)||(LA289_0>=100 && LA289_0<=103)||(LA289_0>=105 && LA289_0<=106)||LA289_0==109||LA289_0==114||LA289_0==117||(LA289_0>=119 && LA289_0<=120)||LA289_0==122||LA289_0==126||LA289_0==129||LA289_0==132||LA289_0==135||LA289_0==138||LA289_0==141||(LA289_0>=143 && LA289_0<=144)||(LA289_0>=146 && LA289_0<=148)||(LA289_0>=151 && LA289_0<=152)||LA289_0==154||LA289_0==157||LA289_0==160||LA289_0==162||LA289_0==167||LA289_0==169||(LA289_0>=171 && LA289_0<=173)||LA289_0==177||LA289_0==180||(LA289_0>=183 && LA289_0<=186)||(LA289_0>=189 && LA289_0<=190)||LA289_0==194||LA289_0==196))
				{
					alt289 = 1;
				}


				} finally { DebugExitDecision(289); }
				switch (alt289)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:1344:3: invocation_expression ';'
					{
					DebugLocation(1344, 3);
					PushFollow(Follow._invocation_expression_in_invocation_expression_list10417);
					invocation_expression1102=invocation_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, invocation_expression1102.Tree);
					DebugLocation(1344, 25);
					char_literal1103=(IToken)Match(input,SEMI,Follow._SEMI_in_invocation_expression_list10419); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1103_tree = (object)adaptor.Create(char_literal1103);
					adaptor.AddChild(root_0, char_literal1103_tree);
					}

					}
					break;

				default:
					if (cnt289 >= 1)
						goto loop289;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee289 = new EarlyExitException( 289, input );
					DebugRecognitionException(eee289);
					throw eee289;
				}
				cnt289++;
			}
			loop289:
				;

			} finally { DebugExitSubRule(289); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("invocation_expression_list", 314);
			LeaveRule("invocation_expression_list", 314);
			LeaveRule_invocation_expression_list();
	        if (state.backtracking > 0) { Memoize(input, 314, invocation_expression_list_StartIndex); }

	    }
	 	DebugLocation(1344, 30);
		} finally { DebugExitRule(GrammarFileName, "invocation_expression_list"); }
		return retval;

	}
	// $ANTLR end "invocation_expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_primary_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_primary_expression_list() {}

	// $ANTLR start "primary_expression_list"
	// .\\cs.g:1345:1: primary_expression_list : ( primary_expression ';' )+ ;
	[GrammarRule("primary_expression_list")]
	private AstParserRuleReturnScope<object, IToken> primary_expression_list()
	{
		EnterRule_primary_expression_list();
		EnterRule("primary_expression_list", 315);
		TraceIn("primary_expression_list", 315);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int primary_expression_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal1105 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> primary_expression1104 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal1105_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "primary_expression_list");
		DebugLocation(1345, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 315)) { return retval; }

			// .\\cs.g:1345:24: ( ( primary_expression ';' )+ )
			DebugEnterAlt(1);
			// .\\cs.g:1346:2: ( primary_expression ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1346, 2);
			// .\\cs.g:1346:2: ( primary_expression ';' )+
			int cnt290=0;
			try { DebugEnterSubRule(290);
			while (true)
			{
				int alt290=2;
				try { DebugEnterDecision(290, decisionCanBacktrack[290]);
				int LA290_0 = input.LA(1);

				if ((LA290_0==Character_literal||LA290_0==FALSE||(LA290_0>=Hex_number && LA290_0<=IDENTIFIER)||(LA290_0>=NULL && LA290_0<=NUMBER)||LA290_0==Real_literal||LA290_0==STRINGLITERAL||LA290_0==TRUE||LA290_0==Verbatim_string_literal||LA290_0==68||LA290_0==95||(LA290_0>=97 && LA290_0<=98)||(LA290_0>=100 && LA290_0<=103)||(LA290_0>=105 && LA290_0<=106)||(LA290_0>=109 && LA290_0<=110)||(LA290_0>=114 && LA290_0<=117)||(LA290_0>=119 && LA290_0<=120)||LA290_0==122||LA290_0==126||LA290_0==129||LA290_0==132||LA290_0==135||LA290_0==138||LA290_0==141||(LA290_0>=143 && LA290_0<=144)||(LA290_0>=146 && LA290_0<=148)||(LA290_0>=150 && LA290_0<=152)||LA290_0==154||LA290_0==157||LA290_0==160||LA290_0==162||LA290_0==167||LA290_0==169||(LA290_0>=171 && LA290_0<=174)||LA290_0==177||LA290_0==180||(LA290_0>=183 && LA290_0<=187)||(LA290_0>=189 && LA290_0<=190)||LA290_0==194||LA290_0==196))
				{
					alt290 = 1;
				}


				} finally { DebugExitDecision(290); }
				switch (alt290)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:1346:3: primary_expression ';'
					{
					DebugLocation(1346, 3);
					PushFollow(Follow._primary_expression_in_primary_expression_list10430);
					primary_expression1104=primary_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression1104.Tree);
					DebugLocation(1346, 22);
					char_literal1105=(IToken)Match(input,SEMI,Follow._SEMI_in_primary_expression_list10432); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1105_tree = (object)adaptor.Create(char_literal1105);
					adaptor.AddChild(root_0, char_literal1105_tree);
					}

					}
					break;

				default:
					if (cnt290 >= 1)
						goto loop290;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee290 = new EarlyExitException( 290, input );
					DebugRecognitionException(eee290);
					throw eee290;
				}
				cnt290++;
			}
			loop290:
				;

			} finally { DebugExitSubRule(290); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expression_list", 315);
			LeaveRule("primary_expression_list", 315);
			LeaveRule_primary_expression_list();
	        if (state.backtracking > 0) { Memoize(input, 315, primary_expression_list_StartIndex); }

	    }
	 	DebugLocation(1346, 27);
		} finally { DebugExitRule(GrammarFileName, "primary_expression_list"); }
		return retval;

	}
	// $ANTLR end "primary_expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_non_assignment_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_non_assignment_expression_list() {}

	// $ANTLR start "non_assignment_expression_list"
	// .\\cs.g:1347:1: non_assignment_expression_list : ( non_assignment_expression ';' )+ ;
	[GrammarRule("non_assignment_expression_list")]
	private AstParserRuleReturnScope<object, IToken> non_assignment_expression_list()
	{
		EnterRule_non_assignment_expression_list();
		EnterRule("non_assignment_expression_list", 316);
		TraceIn("non_assignment_expression_list", 316);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int non_assignment_expression_list_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken char_literal1107 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> non_assignment_expression1106 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal1107_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "non_assignment_expression_list");
		DebugLocation(1347, 34);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 316)) { return retval; }

			// .\\cs.g:1347:31: ( ( non_assignment_expression ';' )+ )
			DebugEnterAlt(1);
			// .\\cs.g:1348:2: ( non_assignment_expression ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1348, 2);
			// .\\cs.g:1348:2: ( non_assignment_expression ';' )+
			int cnt291=0;
			try { DebugEnterSubRule(291);
			while (true)
			{
				int alt291=2;
				try { DebugEnterDecision(291, decisionCanBacktrack[291]);
				int LA291_0 = input.LA(1);

				if ((LA291_0==Character_literal||LA291_0==FALSE||(LA291_0>=Hex_number && LA291_0<=IDENTIFIER)||(LA291_0>=MINUS && LA291_0<=NUMBER)||LA291_0==Real_literal||LA291_0==STRINGLITERAL||LA291_0==TRUE||LA291_0==Verbatim_string_literal||LA291_0==61||LA291_0==66||(LA291_0>=68 && LA291_0<=69)||(LA291_0>=71 && LA291_0<=72)||LA291_0==75||LA291_0==95||(LA291_0>=97 && LA291_0<=98)||(LA291_0>=100 && LA291_0<=103)||(LA291_0>=105 && LA291_0<=106)||(LA291_0>=109 && LA291_0<=110)||(LA291_0>=114 && LA291_0<=117)||(LA291_0>=119 && LA291_0<=120)||LA291_0==122||LA291_0==126||LA291_0==129||LA291_0==132||LA291_0==135||LA291_0==138||LA291_0==141||(LA291_0>=143 && LA291_0<=144)||(LA291_0>=146 && LA291_0<=148)||(LA291_0>=150 && LA291_0<=152)||LA291_0==154||LA291_0==157||LA291_0==160||LA291_0==162||LA291_0==167||LA291_0==169||(LA291_0>=171 && LA291_0<=174)||LA291_0==177||LA291_0==180||(LA291_0>=183 && LA291_0<=187)||(LA291_0>=189 && LA291_0<=190)||LA291_0==194||LA291_0==196||LA291_0==202))
				{
					alt291 = 1;
				}


				} finally { DebugExitDecision(291); }
				switch (alt291)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:1348:3: non_assignment_expression ';'
					{
					DebugLocation(1348, 3);
					PushFollow(Follow._non_assignment_expression_in_non_assignment_expression_list10443);
					non_assignment_expression1106=non_assignment_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, non_assignment_expression1106.Tree);
					DebugLocation(1348, 29);
					char_literal1107=(IToken)Match(input,SEMI,Follow._SEMI_in_non_assignment_expression_list10445); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1107_tree = (object)adaptor.Create(char_literal1107);
					adaptor.AddChild(root_0, char_literal1107_tree);
					}

					}
					break;

				default:
					if (cnt291 >= 1)
						goto loop291;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee291 = new EarlyExitException( 291, input );
					DebugRecognitionException(eee291);
					throw eee291;
				}
				cnt291++;
			}
			loop291:
				;

			} finally { DebugExitSubRule(291); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("non_assignment_expression_list", 316);
			LeaveRule("non_assignment_expression_list", 316);
			LeaveRule_non_assignment_expression_list();
	        if (state.backtracking > 0) { Memoize(input, 316, non_assignment_expression_list_StartIndex); }

	    }
	 	DebugLocation(1348, 34);
		} finally { DebugExitRule(GrammarFileName, "non_assignment_expression_list"); }
		return retval;

	}
	// $ANTLR end "non_assignment_expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_method_declarations() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_method_declarations() {}

	// $ANTLR start "method_declarations"
	// .\\cs.g:1349:1: method_declarations : ( ( modifiers )? ( 'void' | type ) method_declaration )+ ;
	[GrammarRule("method_declarations")]
	private AstParserRuleReturnScope<object, IToken> method_declarations()
	{
		EnterRule_method_declarations();
		EnterRule("method_declarations", 317);
		TraceIn("method_declarations", 317);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int method_declarations_StartIndex = input.Index;

	    object root_0 = default(object);

	    IToken string_literal1109 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> modifiers1108 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type1110 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> method_declaration1111 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal1109_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "method_declarations");
		DebugLocation(1349, 50);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 317)) { return retval; }

			// .\\cs.g:1349:20: ( ( ( modifiers )? ( 'void' | type ) method_declaration )+ )
			DebugEnterAlt(1);
			// .\\cs.g:1350:2: ( ( modifiers )? ( 'void' | type ) method_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1350, 2);
			// .\\cs.g:1350:2: ( ( modifiers )? ( 'void' | type ) method_declaration )+
			int cnt294=0;
			try { DebugEnterSubRule(294);
			while (true)
			{
				int alt294=2;
				try { DebugEnterDecision(294, decisionCanBacktrack[294]);
				int LA294_0 = input.LA(1);

				if ((LA294_0==IDENTIFIER||(LA294_0>=95 && LA294_0<=98)||(LA294_0>=100 && LA294_0<=101)||LA294_0==103||(LA294_0>=105 && LA294_0<=106)||LA294_0==109||LA294_0==114||LA294_0==117||(LA294_0>=119 && LA294_0<=120)||LA294_0==122||(LA294_0>=125 && LA294_0<=126)||LA294_0==129||LA294_0==132||LA294_0==135||LA294_0==138||(LA294_0>=140 && LA294_0<=141)||(LA294_0>=143 && LA294_0<=144)||(LA294_0>=146 && LA294_0<=148)||(LA294_0>=150 && LA294_0<=152)||LA294_0==154||(LA294_0>=156 && LA294_0<=157)||(LA294_0>=160 && LA294_0<=165)||LA294_0==167||(LA294_0>=169 && LA294_0<=173)||(LA294_0>=176 && LA294_0<=177)||LA294_0==183||(LA294_0>=185 && LA294_0<=186)||(LA294_0>=188 && LA294_0<=194)||LA294_0==196))
				{
					alt294 = 1;
				}


				} finally { DebugExitDecision(294); }
				switch (alt294)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\cs.g:1350:3: ( modifiers )? ( 'void' | type ) method_declaration
					{
					DebugLocation(1350, 3);
					// .\\cs.g:1350:3: ( modifiers )?
					int alt292=2;
					try { DebugEnterSubRule(292);
					try { DebugEnterDecision(292, decisionCanBacktrack[292]);
					int LA292_0 = input.LA(1);

					if ((LA292_0==96||LA292_0==125||LA292_0==140||LA292_0==150||LA292_0==156||LA292_0==161||(LA292_0>=163 && LA292_0<=165)||LA292_0==170||LA292_0==176||LA292_0==188||LA292_0==191||LA292_0==193))
					{
						alt292 = 1;
					}
					} finally { DebugExitDecision(292); }
					switch (alt292)
					{
					case 1:
						DebugEnterAlt(1);
						// .\\cs.g:1350:3: modifiers
						{
						DebugLocation(1350, 3);
						PushFollow(Follow._modifiers_in_method_declarations10456);
						modifiers1108=modifiers();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers1108.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(292); }

					DebugLocation(1350, 14);
					// .\\cs.g:1350:14: ( 'void' | type )
					int alt293=2;
					try { DebugEnterSubRule(293);
					try { DebugEnterDecision(293, decisionCanBacktrack[293]);
					int LA293_0 = input.LA(1);

					if ((LA293_0==192))
					{
						int LA293_1 = input.LA(2);

						if ((LA293_1==Character_literal||LA293_1==FALSE||(LA293_1>=Hex_number && LA293_1<=IDENTIFIER)||(LA293_1>=NULL && LA293_1<=NUMBER)||LA293_1==Real_literal||LA293_1==STRINGLITERAL||LA293_1==TRUE||LA293_1==Verbatim_string_literal||LA293_1==95||(LA293_1>=97 && LA293_1<=98)||(LA293_1>=100 && LA293_1<=101)||LA293_1==103||(LA293_1>=105 && LA293_1<=106)||LA293_1==109||LA293_1==114||LA293_1==117||(LA293_1>=119 && LA293_1<=120)||LA293_1==122||LA293_1==126||LA293_1==129||LA293_1==132||LA293_1==135||LA293_1==138||LA293_1==141||(LA293_1>=143 && LA293_1<=144)||(LA293_1>=146 && LA293_1<=148)||(LA293_1>=151 && LA293_1<=152)||LA293_1==154||LA293_1==157||LA293_1==160||LA293_1==162||LA293_1==167||LA293_1==169||(LA293_1>=171 && LA293_1<=173)||LA293_1==177||LA293_1==183||(LA293_1>=185 && LA293_1<=186)||(LA293_1>=189 && LA293_1<=190)||LA293_1==194||LA293_1==196))
						{
							alt293 = 1;
						}
						else if ((LA293_1==69))
						{
							alt293 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 293, 1, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA293_0==IDENTIFIER||LA293_0==95||(LA293_0>=97 && LA293_0<=98)||(LA293_0>=100 && LA293_0<=101)||LA293_0==103||(LA293_0>=105 && LA293_0<=106)||LA293_0==109||LA293_0==114||LA293_0==117||(LA293_0>=119 && LA293_0<=120)||LA293_0==122||LA293_0==126||LA293_0==129||LA293_0==132||LA293_0==135||LA293_0==138||LA293_0==141||(LA293_0>=143 && LA293_0<=144)||(LA293_0>=146 && LA293_0<=148)||(LA293_0>=151 && LA293_0<=152)||LA293_0==154||LA293_0==157||LA293_0==160||LA293_0==162||LA293_0==167||LA293_0==169||(LA293_0>=171 && LA293_0<=173)||LA293_0==177||LA293_0==183||(LA293_0>=185 && LA293_0<=186)||(LA293_0>=189 && LA293_0<=190)||LA293_0==194||LA293_0==196))
					{
						alt293 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 293, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(293); }
					switch (alt293)
					{
					case 1:
						DebugEnterAlt(1);
						// .\\cs.g:1350:15: 'void'
						{
						DebugLocation(1350, 15);
						string_literal1109=(IToken)Match(input,192,Follow._192_in_method_declarations10460); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal1109_tree = (object)adaptor.Create(string_literal1109);
						adaptor.AddChild(root_0, string_literal1109_tree);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// .\\cs.g:1350:24: type
						{
						DebugLocation(1350, 24);
						PushFollow(Follow._type_in_method_declarations10464);
						type1110=type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, type1110.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(293); }

					DebugLocation(1350, 30);
					PushFollow(Follow._method_declaration_in_method_declarations10467);
					method_declaration1111=method_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration1111.Tree);

					}
					break;

				default:
					if (cnt294 >= 1)
						goto loop294;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee294 = new EarlyExitException( 294, input );
					DebugRecognitionException(eee294);
					throw eee294;
				}
				cnt294++;
			}
			loop294:
				;

			} finally { DebugExitSubRule(294); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("method_declarations", 317);
			LeaveRule("method_declarations", 317);
			LeaveRule_method_declarations();
	        if (state.backtracking > 0) { Memoize(input, 317, method_declarations_StartIndex); }

	    }
	 	DebugLocation(1350, 50);
		} finally { DebugExitRule(GrammarFileName, "method_declarations"); }
		return retval;

	}
	// $ANTLR end "method_declarations"
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred1_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred1_cs_fragment() {}

	// $ANTLR start synpred1_cs
	public void synpred1_cs_fragment()
	{
		EnterRule_synpred1_cs_fragment();
		EnterRule("synpred1_cs_fragment", 318);
		TraceIn("synpred1_cs_fragment", 318);
		try
		{
			// .\\cs.g:61:2: ( 'partial' )
			DebugEnterAlt(1);
			// .\\cs.g:61:3: 'partial'
			{
			DebugLocation(61, 3);
			Match(input,159,Follow._159_in_synpred1_cs269); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_cs_fragment", 318);
			LeaveRule("synpred1_cs_fragment", 318);
			LeaveRule_synpred1_cs_fragment();
		}
	}
	// $ANTLR end synpred1_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred2_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred2_cs_fragment() {}

	// $ANTLR start synpred2_cs
	public void synpred2_cs_fragment()
	{
		EnterRule_synpred2_cs_fragment();
		EnterRule("synpred2_cs_fragment", 319);
		TraceIn("synpred2_cs_fragment", 319);
		try
		{
			// .\\cs.g:92:11: ( member_name '(' )
			DebugEnterAlt(1);
			// .\\cs.g:92:12: member_name '('
			{
			DebugLocation(92, 12);
			PushFollow(Follow._member_name_in_synpred2_cs533);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(92, 26);
			Match(input,68,Follow._68_in_synpred2_cs537); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_cs_fragment", 319);
			LeaveRule("synpred2_cs_fragment", 319);
			LeaveRule_synpred2_cs_fragment();
		}
	}
	// $ANTLR end synpred2_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred3_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred3_cs_fragment() {}

	// $ANTLR start synpred3_cs
	public void synpred3_cs_fragment()
	{
		EnterRule_synpred3_cs_fragment();
		EnterRule("synpred3_cs_fragment", 320);
		TraceIn("synpred3_cs_fragment", 320);
		try
		{
			// .\\cs.g:93:8: ( member_name '{' )
			DebugEnterAlt(1);
			// .\\cs.g:93:9: member_name '{'
			{
			DebugLocation(93, 9);
			PushFollow(Follow._member_name_in_synpred3_cs552);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(93, 23);
			Match(input,197,Follow._197_in_synpred3_cs556); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_cs_fragment", 320);
			LeaveRule("synpred3_cs_fragment", 320);
			LeaveRule_synpred3_cs_fragment();
		}
	}
	// $ANTLR end synpred3_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred4_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred4_cs_fragment() {}

	// $ANTLR start synpred4_cs
	public void synpred4_cs_fragment()
	{
		EnterRule_synpred4_cs_fragment();
		EnterRule("synpred4_cs_fragment", 321);
		TraceIn("synpred4_cs_fragment", 321);
		try
		{
			// .\\cs.g:94:8: ( member_name '.' 'this' )
			DebugEnterAlt(1);
			// .\\cs.g:94:9: member_name '.' 'this'
			{
			DebugLocation(94, 9);
			PushFollow(Follow._member_name_in_synpred4_cs571);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(94, 23);
			Match(input,DOT,Follow._DOT_in_synpred4_cs575); if (state.failed) return;
			DebugLocation(94, 29);
			Match(input,180,Follow._180_in_synpred4_cs579); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_cs_fragment", 321);
			LeaveRule("synpred4_cs_fragment", 321);
			LeaveRule_synpred4_cs_fragment();
		}
	}
	// $ANTLR end synpred4_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred5_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred5_cs_fragment() {}

	// $ANTLR start synpred5_cs
	public void synpred5_cs_fragment()
	{
		EnterRule_synpred5_cs_fragment();
		EnterRule("synpred5_cs_fragment", 322);
		TraceIn("synpred5_cs_fragment", 322);
		try
		{
			// .\\cs.g:112:2: ( 'this' brackets )
			DebugEnterAlt(1);
			// .\\cs.g:112:3: 'this' brackets
			{
			DebugLocation(112, 3);
			Match(input,180,Follow._180_in_synpred5_cs699); if (state.failed) return;
			DebugLocation(112, 13);
			PushFollow(Follow._brackets_in_synpred5_cs704);
			brackets();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred5_cs_fragment", 322);
			LeaveRule("synpred5_cs_fragment", 322);
			LeaveRule_synpred5_cs_fragment();
		}
	}
	// $ANTLR end synpred5_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred6_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred6_cs_fragment() {}

	// $ANTLR start synpred6_cs
	public void synpred6_cs_fragment()
	{
		EnterRule_synpred6_cs_fragment();
		EnterRule("synpred6_cs_fragment", 323);
		TraceIn("synpred6_cs_fragment", 323);
		try
		{
			// .\\cs.g:113:4: ( 'base' brackets )
			DebugEnterAlt(1);
			// .\\cs.g:113:5: 'base' brackets
			{
			DebugLocation(113, 5);
			Match(input,102,Follow._102_in_synpred6_cs724); if (state.failed) return;
			DebugLocation(113, 14);
			PushFollow(Follow._brackets_in_synpred6_cs728);
			brackets();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred6_cs_fragment", 323);
			LeaveRule("synpred6_cs_fragment", 323);
			LeaveRule_synpred6_cs_fragment();
		}
	}
	// $ANTLR end synpred6_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred7_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred7_cs_fragment() {}

	// $ANTLR start synpred7_cs
	public void synpred7_cs_fragment()
	{
		EnterRule_synpred7_cs_fragment();
		EnterRule("synpred7_cs_fragment", 324);
		TraceIn("synpred7_cs_fragment", 324);
		try
		{
			// .\\cs.g:115:14: ( object_creation_expression ( '.' | '->' | '[' ) )
			DebugEnterAlt(1);
			// .\\cs.g:115:15: object_creation_expression ( '.' | '->' | '[' )
			{
			DebugLocation(115, 15);
			PushFollow(Follow._object_creation_expression_in_synpred7_cs764);
			object_creation_expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(115, 44);
			if (input.LA(1)==DOT||input.LA(1)==PTR||input.LA(1)==91)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred7_cs_fragment", 324);
			LeaveRule("synpred7_cs_fragment", 324);
			LeaveRule_synpred7_cs_fragment();
		}
	}
	// $ANTLR end synpred7_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred8_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred8_cs_fragment() {}

	// $ANTLR start synpred8_cs
	public void synpred8_cs_fragment()
	{
		EnterRule_synpred8_cs_fragment();
		EnterRule("synpred8_cs_fragment", 325);
		TraceIn("synpred8_cs_fragment", 325);
		try
		{
			// .\\cs.g:119:7: ( delegate_creation_expression )
			DebugEnterAlt(1);
			// .\\cs.g:119:8: delegate_creation_expression
			{
			DebugLocation(119, 8);
			PushFollow(Follow._delegate_creation_expression_in_synpred8_cs812);
			delegate_creation_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred8_cs_fragment", 325);
			LeaveRule("synpred8_cs_fragment", 325);
			LeaveRule_synpred8_cs_fragment();
		}
	}
	// $ANTLR end synpred8_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred9_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred9_cs_fragment() {}

	// $ANTLR start synpred9_cs
	public void synpred9_cs_fragment()
	{
		EnterRule_synpred9_cs_fragment();
		EnterRule("synpred9_cs_fragment", 326);
		TraceIn("synpred9_cs_fragment", 326);
		try
		{
			// .\\cs.g:131:4: ( identifier '<' )
			DebugEnterAlt(1);
			// .\\cs.g:131:5: identifier '<'
			{
			DebugLocation(131, 5);
			PushFollow(Follow._identifier_in_synpred9_cs937);
			identifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(131, 19);
			Match(input,81,Follow._81_in_synpred9_cs942); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred9_cs_fragment", 326);
			LeaveRule("synpred9_cs_fragment", 326);
			LeaveRule_synpred9_cs_fragment();
		}
	}
	// $ANTLR end synpred9_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred10_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred10_cs_fragment() {}

	// $ANTLR start synpred10_cs
	public void synpred10_cs_fragment()
	{
		EnterRule_synpred10_cs_fragment();
		EnterRule("synpred10_cs_fragment", 327);
		TraceIn("synpred10_cs_fragment", 327);
		try
		{
			// .\\cs.g:169:4: ( '(' type ')' )
			DebugEnterAlt(1);
			// .\\cs.g:169:5: '(' type ')'
			{
			DebugLocation(169, 5);
			Match(input,68,Follow._68_in_synpred10_cs1194); if (state.failed) return;
			DebugLocation(169, 11);
			PushFollow(Follow._type_in_synpred10_cs1198);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(169, 18);
			Match(input,RPAREN,Follow._RPAREN_in_synpred10_cs1202); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred10_cs_fragment", 327);
			LeaveRule("synpred10_cs_fragment", 327);
			LeaveRule_synpred10_cs_fragment();
		}
	}
	// $ANTLR end synpred10_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred11_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred11_cs_fragment() {}

	// $ANTLR start synpred11_cs
	public void synpred11_cs_fragment()
	{
		EnterRule_synpred11_cs_fragment();
		EnterRule("synpred11_cs_fragment", 328);
		TraceIn("synpred11_cs_fragment", 328);
		try
		{
			// .\\cs.g:197:2: ( array_creation_expression )
			DebugEnterAlt(1);
			// .\\cs.g:197:3: array_creation_expression
			{
			DebugLocation(197, 3);
			PushFollow(Follow._array_creation_expression_in_synpred11_cs1444);
			array_creation_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred11_cs_fragment", 328);
			LeaveRule("synpred11_cs_fragment", 328);
			LeaveRule_synpred11_cs_fragment();
		}
	}
	// $ANTLR end synpred11_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred12_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred12_cs_fragment() {}

	// $ANTLR start synpred12_cs
	public void synpred12_cs_fragment()
	{
		EnterRule_synpred12_cs_fragment();
		EnterRule("synpred12_cs_fragment", 329);
		TraceIn("synpred12_cs_fragment", 329);
		try
		{
			// .\\cs.g:206:11: ( arguments ( '[' | '.' | '->' ) )
			DebugEnterAlt(1);
			// .\\cs.g:206:12: arguments ( '[' | '.' | '->' )
			{
			DebugLocation(206, 12);
			PushFollow(Follow._arguments_in_synpred12_cs1524);
			arguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(206, 24);
			if (input.LA(1)==DOT||input.LA(1)==PTR||input.LA(1)==91)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred12_cs_fragment", 329);
			LeaveRule("synpred12_cs_fragment", 329);
			LeaveRule_synpred12_cs_fragment();
		}
	}
	// $ANTLR end synpred12_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred13_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred13_cs_fragment() {}

	// $ANTLR start synpred13_cs
	public void synpred13_cs_fragment()
	{
		EnterRule_synpred13_cs_fragment();
		EnterRule("synpred13_cs_fragment", 330);
		TraceIn("synpred13_cs_fragment", 330);
		try
		{
			// .\\cs.g:277:20: ( unbound_type_name )
			DebugEnterAlt(1);
			// .\\cs.g:277:21: unbound_type_name
			{
			DebugLocation(277, 21);
			PushFollow(Follow._unbound_type_name_in_synpred13_cs2054);
			unbound_type_name();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred13_cs_fragment", 330);
			LeaveRule("synpred13_cs_fragment", 330);
			LeaveRule_synpred13_cs_fragment();
		}
	}
	// $ANTLR end synpred13_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred14_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred14_cs_fragment() {}

	// $ANTLR start synpred14_cs
	public void synpred14_cs_fragment()
	{
		EnterRule_synpred14_cs_fragment();
		EnterRule("synpred14_cs_fragment", 331);
		TraceIn("synpred14_cs_fragment", 331);
		try
		{
			// .\\cs.g:287:5: ( generic_dimension_specifier '.' )
			DebugEnterAlt(1);
			// .\\cs.g:287:6: generic_dimension_specifier '.'
			{
			DebugLocation(287, 6);
			PushFollow(Follow._generic_dimension_specifier_in_synpred14_cs2112);
			generic_dimension_specifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(287, 36);
			Match(input,DOT,Follow._DOT_in_synpred14_cs2116); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred14_cs_fragment", 331);
			LeaveRule("synpred14_cs_fragment", 331);
			LeaveRule_synpred14_cs_fragment();
		}
	}
	// $ANTLR end synpred14_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred15_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred15_cs_fragment() {}

	// $ANTLR start synpred15_cs
	public void synpred15_cs_fragment()
	{
		EnterRule_synpred15_cs_fragment();
		EnterRule("synpred15_cs_fragment", 332);
		TraceIn("synpred15_cs_fragment", 332);
		try
		{
			// .\\cs.g:310:2: ( identifier '<' )
			DebugEnterAlt(1);
			// .\\cs.g:310:3: identifier '<'
			{
			DebugLocation(310, 3);
			PushFollow(Follow._identifier_in_synpred15_cs2248);
			identifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(310, 16);
			Match(input,81,Follow._81_in_synpred15_cs2252); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred15_cs_fragment", 332);
			LeaveRule("synpred15_cs_fragment", 332);
			LeaveRule_synpred15_cs_fragment();
		}
	}
	// $ANTLR end synpred15_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred16_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred16_cs_fragment() {}

	// $ANTLR start synpred16_cs
	public void synpred16_cs_fragment()
	{
		EnterRule_synpred16_cs_fragment();
		EnterRule("synpred16_cs_fragment", 333);
		TraceIn("synpred16_cs_fragment", 333);
		try
		{
			// .\\cs.g:318:4: ( identifier '<' )
			DebugEnterAlt(1);
			// .\\cs.g:318:5: identifier '<'
			{
			DebugLocation(318, 5);
			PushFollow(Follow._identifier_in_synpred16_cs2297);
			identifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(318, 19);
			Match(input,81,Follow._81_in_synpred16_cs2302); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred16_cs_fragment", 333);
			LeaveRule("synpred16_cs_fragment", 333);
			LeaveRule_synpred16_cs_fragment();
		}
	}
	// $ANTLR end synpred16_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred17_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred17_cs_fragment() {}

	// $ANTLR start synpred17_cs
	public void synpred17_cs_fragment()
	{
		EnterRule_synpred17_cs_fragment();
		EnterRule("synpred17_cs_fragment", 334);
		TraceIn("synpred17_cs_fragment", 334);
		try
		{
			// .\\cs.g:335:4: ( ( predefined_type | type_name ) rank_specifiers )
			DebugEnterAlt(1);
			// .\\cs.g:335:5: ( predefined_type | type_name ) rank_specifiers
			{
			DebugLocation(335, 5);
			// .\\cs.g:335:5: ( predefined_type | type_name )
			int alt295=2;
			try { DebugEnterSubRule(295);
			try { DebugEnterDecision(295, decisionCanBacktrack[295]);
			int LA295_0 = input.LA(1);

			if ((LA295_0==103||LA295_0==106||LA295_0==109||LA295_0==114||LA295_0==119||LA295_0==129||LA295_0==138||LA295_0==146||LA295_0==151||LA295_0==169||LA295_0==173||LA295_0==177||(LA295_0>=185 && LA295_0<=186)||LA295_0==189))
			{
				alt295 = 1;
			}
			else if ((LA295_0==IDENTIFIER||LA295_0==95||(LA295_0>=97 && LA295_0<=98)||(LA295_0>=100 && LA295_0<=101)||LA295_0==105||LA295_0==117||LA295_0==120||LA295_0==122||LA295_0==126||LA295_0==132||LA295_0==135||LA295_0==141||(LA295_0>=143 && LA295_0<=144)||(LA295_0>=147 && LA295_0<=148)||LA295_0==152||LA295_0==154||LA295_0==157||LA295_0==160||LA295_0==162||LA295_0==167||(LA295_0>=171 && LA295_0<=172)||LA295_0==183||LA295_0==190||LA295_0==194||LA295_0==196))
			{
				alt295 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 295, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(295); }
			switch (alt295)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:335:6: predefined_type
				{
				DebugLocation(335, 6);
				PushFollow(Follow._predefined_type_in_synpred17_cs2395);
				predefined_type();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:335:24: type_name
				{
				DebugLocation(335, 24);
				PushFollow(Follow._type_name_in_synpred17_cs2399);
				type_name();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(295); }

			DebugLocation(335, 36);
			PushFollow(Follow._rank_specifiers_in_synpred17_cs2403);
			rank_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred17_cs_fragment", 334);
			LeaveRule("synpred17_cs_fragment", 334);
			LeaveRule_synpred17_cs_fragment();
		}
	}
	// $ANTLR end synpred17_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred18_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred18_cs_fragment() {}

	// $ANTLR start synpred18_cs
	public void synpred18_cs_fragment()
	{
		EnterRule_synpred18_cs_fragment();
		EnterRule("synpred18_cs_fragment", 335);
		TraceIn("synpred18_cs_fragment", 335);
		try
		{
			// .\\cs.g:336:4: ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )
			DebugEnterAlt(1);
			// .\\cs.g:336:5: ( predefined_type | type_name ) ( ( '*' )+ | '?' )
			{
			DebugLocation(336, 5);
			// .\\cs.g:336:5: ( predefined_type | type_name )
			int alt296=2;
			try { DebugEnterSubRule(296);
			try { DebugEnterDecision(296, decisionCanBacktrack[296]);
			int LA296_0 = input.LA(1);

			if ((LA296_0==103||LA296_0==106||LA296_0==109||LA296_0==114||LA296_0==119||LA296_0==129||LA296_0==138||LA296_0==146||LA296_0==151||LA296_0==169||LA296_0==173||LA296_0==177||(LA296_0>=185 && LA296_0<=186)||LA296_0==189))
			{
				alt296 = 1;
			}
			else if ((LA296_0==IDENTIFIER||LA296_0==95||(LA296_0>=97 && LA296_0<=98)||(LA296_0>=100 && LA296_0<=101)||LA296_0==105||LA296_0==117||LA296_0==120||LA296_0==122||LA296_0==126||LA296_0==132||LA296_0==135||LA296_0==141||(LA296_0>=143 && LA296_0<=144)||(LA296_0>=147 && LA296_0<=148)||LA296_0==152||LA296_0==154||LA296_0==157||LA296_0==160||LA296_0==162||LA296_0==167||(LA296_0>=171 && LA296_0<=172)||LA296_0==183||LA296_0==190||LA296_0==194||LA296_0==196))
			{
				alt296 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 296, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(296); }
			switch (alt296)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:336:6: predefined_type
				{
				DebugLocation(336, 6);
				PushFollow(Follow._predefined_type_in_synpred18_cs2430);
				predefined_type();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:336:24: type_name
				{
				DebugLocation(336, 24);
				PushFollow(Follow._type_name_in_synpred18_cs2434);
				type_name();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(296); }

			DebugLocation(336, 36);
			// .\\cs.g:336:36: ( ( '*' )+ | '?' )
			int alt298=2;
			try { DebugEnterSubRule(298);
			try { DebugEnterDecision(298, decisionCanBacktrack[298]);
			int LA298_0 = input.LA(1);

			if ((LA298_0==69))
			{
				alt298 = 1;
			}
			else if ((LA298_0==89))
			{
				alt298 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 298, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(298); }
			switch (alt298)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\cs.g:336:37: ( '*' )+
				{
				DebugLocation(336, 37);
				// .\\cs.g:336:37: ( '*' )+
				int cnt297=0;
				try { DebugEnterSubRule(297);
				while (true)
				{
					int alt297=2;
					try { DebugEnterDecision(297, decisionCanBacktrack[297]);
					int LA297_0 = input.LA(1);

					if ((LA297_0==69))
					{
						alt297 = 1;
					}


					} finally { DebugExitDecision(297); }
					switch (alt297)
					{
					case 1:
						DebugEnterAlt(1);
						// .\\cs.g:336:37: '*'
						{
						DebugLocation(336, 37);
						Match(input,69,Follow._69_in_synpred18_cs2439); if (state.failed) return;

						}
						break;

					default:
						if (cnt297 >= 1)
							goto loop297;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee297 = new EarlyExitException( 297, input );
						DebugRecognitionException(eee297);
						throw eee297;
					}
					cnt297++;
				}
				loop297:
					;

				} finally { DebugExitSubRule(297); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\cs.g:336:44: '?'
				{
				DebugLocation(336, 44);
				Match(input,89,Follow._89_in_synpred18_cs2444); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(298); }


			}

		}
		finally
		{
			TraceOut("synpred18_cs_fragment", 335);
			LeaveRule("synpred18_cs_fragment", 335);
			LeaveRule_synpred18_cs_fragment();
		}
	}
	// $ANTLR end synpred18_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred19_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred19_cs_fragment() {}

	// $ANTLR start synpred19_cs
	public void synpred19_cs_fragment()
	{
		EnterRule_synpred19_cs_fragment();
		EnterRule("synpred19_cs_fragment", 336);
		TraceIn("synpred19_cs_fragment", 336);
		try
		{
			// .\\cs.g:372:2: ( unary_expression assignment_operator )
			DebugEnterAlt(1);
			// .\\cs.g:372:3: unary_expression assignment_operator
			{
			DebugLocation(372, 3);
			PushFollow(Follow._unary_expression_in_synpred19_cs2626);
			unary_expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(372, 22);
			PushFollow(Follow._assignment_operator_in_synpred19_cs2630);
			assignment_operator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred19_cs_fragment", 336);
			LeaveRule("synpred19_cs_fragment", 336);
			LeaveRule_synpred19_cs_fragment();
		}
	}
	// $ANTLR end synpred19_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred20_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred20_cs_fragment() {}

	// $ANTLR start synpred20_cs
	public void synpred20_cs_fragment()
	{
		EnterRule_synpred20_cs_fragment();
		EnterRule("synpred20_cs_fragment", 337);
		TraceIn("synpred20_cs_fragment", 337);
		try
		{
			// .\\cs.g:381:2: ( cast_expression )
			DebugEnterAlt(1);
			// .\\cs.g:381:3: cast_expression
			{
			DebugLocation(381, 3);
			PushFollow(Follow._cast_expression_in_synpred20_cs2688);
			cast_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred20_cs_fragment", 337);
			LeaveRule("synpred20_cs_fragment", 337);
			LeaveRule_synpred20_cs_fragment();
		}
	}
	// $ANTLR end synpred20_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred21_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred21_cs_fragment() {}

	// $ANTLR start synpred21_cs
	public void synpred21_cs_fragment()
	{
		EnterRule_synpred21_cs_fragment();
		EnterRule("synpred21_cs_fragment", 338);
		TraceIn("synpred21_cs_fragment", 338);
		try
		{
			// .\\cs.g:407:2: ( anonymous_function_signature '=>' )
			DebugEnterAlt(1);
			// .\\cs.g:407:3: anonymous_function_signature '=>'
			{
			DebugLocation(407, 3);
			PushFollow(Follow._anonymous_function_signature_in_synpred21_cs2904);
			anonymous_function_signature();
			PopFollow();
			if (state.failed) return;
			DebugLocation(407, 34);
			Match(input,87,Follow._87_in_synpred21_cs2908); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred21_cs_fragment", 338);
			LeaveRule("synpred21_cs_fragment", 338);
			LeaveRule_synpred21_cs_fragment();
		}
	}
	// $ANTLR end synpred21_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred22_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred22_cs_fragment() {}

	// $ANTLR start synpred22_cs
	public void synpred22_cs_fragment()
	{
		EnterRule_synpred22_cs_fragment();
		EnterRule("synpred22_cs_fragment", 339);
		TraceIn("synpred22_cs_fragment", 339);
		try
		{
			// .\\cs.g:408:4: ( query_expression )
			DebugEnterAlt(1);
			// .\\cs.g:408:5: query_expression
			{
			DebugLocation(408, 5);
			PushFollow(Follow._query_expression_in_synpred22_cs2919);
			query_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred22_cs_fragment", 339);
			LeaveRule("synpred22_cs_fragment", 339);
			LeaveRule_synpred22_cs_fragment();
		}
	}
	// $ANTLR end synpred22_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred23_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred23_cs_fragment() {}

	// $ANTLR start synpred23_cs
	public void synpred23_cs_fragment()
	{
		EnterRule_synpred23_cs_fragment();
		EnterRule("synpred23_cs_fragment", 340);
		TraceIn("synpred23_cs_fragment", 340);
		try
		{
			// .\\cs.g:472:50: ( 'into' )
			DebugEnterAlt(1);
			// .\\cs.g:472:51: 'into'
			{
			DebugLocation(472, 51);
			Match(input,141,Follow._141_in_synpred23_cs3342); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred23_cs_fragment", 340);
			LeaveRule("synpred23_cs_fragment", 340);
			LeaveRule_synpred23_cs_fragment();
		}
	}
	// $ANTLR end synpred23_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred24_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred24_cs_fragment() {}

	// $ANTLR start synpred24_cs
	public void synpred24_cs_fragment()
	{
		EnterRule_synpred24_cs_fragment();
		EnterRule("synpred24_cs_fragment", 341);
		TraceIn("synpred24_cs_fragment", 341);
		try
		{
			// .\\cs.g:539:32: ( ',' identifier '=' )
			DebugEnterAlt(1);
			// .\\cs.g:539:33: ',' identifier '='
			{
			DebugLocation(539, 33);
			Match(input,74,Follow._74_in_synpred24_cs3844); if (state.failed) return;
			DebugLocation(539, 39);
			PushFollow(Follow._identifier_in_synpred24_cs3848);
			identifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(539, 52);
			Match(input,85,Follow._85_in_synpred24_cs3852); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred24_cs_fragment", 341);
			LeaveRule("synpred24_cs_fragment", 341);
			LeaveRule_synpred24_cs_fragment();
		}
	}
	// $ANTLR end synpred24_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred25_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred25_cs_fragment() {}

	// $ANTLR start synpred25_cs
	public void synpred25_cs_fragment()
	{
		EnterRule_synpred25_cs_fragment();
		EnterRule("synpred25_cs_fragment", 342);
		TraceIn("synpred25_cs_fragment", 342);
		try
		{
			// .\\cs.g:620:4: ( member_name '{' )
			DebugEnterAlt(1);
			// .\\cs.g:620:5: member_name '{'
			{
			DebugLocation(620, 5);
			PushFollow(Follow._member_name_in_synpred25_cs4370);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(620, 19);
			Match(input,197,Follow._197_in_synpred25_cs4374); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred25_cs_fragment", 342);
			LeaveRule("synpred25_cs_fragment", 342);
			LeaveRule_synpred25_cs_fragment();
		}
	}
	// $ANTLR end synpred25_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred26_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred26_cs_fragment() {}

	// $ANTLR start synpred26_cs
	public void synpred26_cs_fragment()
	{
		EnterRule_synpred26_cs_fragment();
		EnterRule("synpred26_cs_fragment", 343);
		TraceIn("synpred26_cs_fragment", 343);
		try
		{
			// .\\cs.g:727:14: ( member_name '(' )
			DebugEnterAlt(1);
			// .\\cs.g:727:15: member_name '('
			{
			DebugLocation(727, 15);
			PushFollow(Follow._member_name_in_synpred26_cs5235);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(727, 29);
			Match(input,68,Follow._68_in_synpred26_cs5239); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred26_cs_fragment", 343);
			LeaveRule("synpred26_cs_fragment", 343);
			LeaveRule_synpred26_cs_fragment();
		}
	}
	// $ANTLR end synpred26_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred27_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred27_cs_fragment() {}

	// $ANTLR start synpred27_cs
	public void synpred27_cs_fragment()
	{
		EnterRule_synpred27_cs_fragment();
		EnterRule("synpred27_cs_fragment", 344);
		TraceIn("synpred27_cs_fragment", 344);
		try
		{
			// .\\cs.g:728:14: ( member_name '{' )
			DebugEnterAlt(1);
			// .\\cs.g:728:15: member_name '{'
			{
			DebugLocation(728, 15);
			PushFollow(Follow._member_name_in_synpred27_cs5260);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(728, 29);
			Match(input,197,Follow._197_in_synpred27_cs5264); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred27_cs_fragment", 344);
			LeaveRule("synpred27_cs_fragment", 344);
			LeaveRule_synpred27_cs_fragment();
		}
	}
	// $ANTLR end synpred27_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred28_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred28_cs_fragment() {}

	// $ANTLR start synpred28_cs
	public void synpred28_cs_fragment()
	{
		EnterRule_synpred28_cs_fragment();
		EnterRule("synpred28_cs_fragment", 345);
		TraceIn("synpred28_cs_fragment", 345);
		try
		{
			// .\\cs.g:779:11: ( member_name '(' )
			DebugEnterAlt(1);
			// .\\cs.g:779:12: member_name '('
			{
			DebugLocation(779, 12);
			PushFollow(Follow._member_name_in_synpred28_cs5708);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(779, 26);
			Match(input,68,Follow._68_in_synpred28_cs5712); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred28_cs_fragment", 345);
			LeaveRule("synpred28_cs_fragment", 345);
			LeaveRule_synpred28_cs_fragment();
		}
	}
	// $ANTLR end synpred28_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred29_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred29_cs_fragment() {}

	// $ANTLR start synpred29_cs
	public void synpred29_cs_fragment()
	{
		EnterRule_synpred29_cs_fragment();
		EnterRule("synpred29_cs_fragment", 346);
		TraceIn("synpred29_cs_fragment", 346);
		try
		{
			// .\\cs.g:780:8: ( member_name '{' )
			DebugEnterAlt(1);
			// .\\cs.g:780:9: member_name '{'
			{
			DebugLocation(780, 9);
			PushFollow(Follow._member_name_in_synpred29_cs5727);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(780, 23);
			Match(input,197,Follow._197_in_synpred29_cs5731); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred29_cs_fragment", 346);
			LeaveRule("synpred29_cs_fragment", 346);
			LeaveRule_synpred29_cs_fragment();
		}
	}
	// $ANTLR end synpred29_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred30_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred30_cs_fragment() {}

	// $ANTLR start synpred30_cs
	public void synpred30_cs_fragment()
	{
		EnterRule_synpred30_cs_fragment();
		EnterRule("synpred30_cs_fragment", 347);
		TraceIn("synpred30_cs_fragment", 347);
		try
		{
			// .\\cs.g:781:8: ( member_name '.' 'this' )
			DebugEnterAlt(1);
			// .\\cs.g:781:9: member_name '.' 'this'
			{
			DebugLocation(781, 9);
			PushFollow(Follow._member_name_in_synpred30_cs5746);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(781, 23);
			Match(input,DOT,Follow._DOT_in_synpred30_cs5750); if (state.failed) return;
			DebugLocation(781, 29);
			Match(input,180,Follow._180_in_synpred30_cs5754); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred30_cs_fragment", 347);
			LeaveRule("synpred30_cs_fragment", 347);
			LeaveRule_synpred30_cs_fragment();
		}
	}
	// $ANTLR end synpred30_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred31_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred31_cs_fragment() {}

	// $ANTLR start synpred31_cs
	public void synpred31_cs_fragment()
	{
		EnterRule_synpred31_cs_fragment();
		EnterRule("synpred31_cs_fragment", 348);
		TraceIn("synpred31_cs_fragment", 348);
		try
		{
			// .\\cs.g:853:23: ( arguments ( '[' | '.' | '->' ) )
			DebugEnterAlt(1);
			// .\\cs.g:853:24: arguments ( '[' | '.' | '->' )
			{
			DebugLocation(853, 24);
			PushFollow(Follow._arguments_in_synpred31_cs6300);
			arguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(853, 36);
			if (input.LA(1)==DOT||input.LA(1)==PTR||input.LA(1)==91)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred31_cs_fragment", 348);
			LeaveRule("synpred31_cs_fragment", 348);
			LeaveRule_synpred31_cs_fragment();
		}
	}
	// $ANTLR end synpred31_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred32_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred32_cs_fragment() {}

	// $ANTLR start synpred32_cs
	public void synpred32_cs_fragment()
	{
		EnterRule_synpred32_cs_fragment();
		EnterRule("synpred32_cs_fragment", 349);
		TraceIn("synpred32_cs_fragment", 349);
		try
		{
			// .\\cs.g:857:4: ( identifier '<' )
			DebugEnterAlt(1);
			// .\\cs.g:857:5: identifier '<'
			{
			DebugLocation(857, 5);
			PushFollow(Follow._identifier_in_synpred32_cs6351);
			identifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(857, 19);
			Match(input,81,Follow._81_in_synpred32_cs6356); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred32_cs_fragment", 349);
			LeaveRule("synpred32_cs_fragment", 349);
			LeaveRule_synpred32_cs_fragment();
		}
	}
	// $ANTLR end synpred32_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred33_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred33_cs_fragment() {}

	// $ANTLR start synpred33_cs
	public void synpred33_cs_fragment()
	{
		EnterRule_synpred33_cs_fragment();
		EnterRule("synpred33_cs_fragment", 350);
		TraceIn("synpred33_cs_fragment", 350);
		try
		{
			// .\\cs.g:870:2: ( declaration_statement )
			DebugEnterAlt(1);
			// .\\cs.g:870:3: declaration_statement
			{
			DebugLocation(870, 3);
			PushFollow(Follow._declaration_statement_in_synpred33_cs6437);
			declaration_statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred33_cs_fragment", 350);
			LeaveRule("synpred33_cs_fragment", 350);
			LeaveRule_synpred33_cs_fragment();
		}
	}
	// $ANTLR end synpred33_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred34_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred34_cs_fragment() {}

	// $ANTLR start synpred34_cs
	public void synpred34_cs_fragment()
	{
		EnterRule_synpred34_cs_fragment();
		EnterRule("synpred34_cs_fragment", 351);
		TraceIn("synpred34_cs_fragment", 351);
		try
		{
			// .\\cs.g:871:4: ( identifier ':' )
			DebugEnterAlt(1);
			// .\\cs.g:871:5: identifier ':'
			{
			DebugLocation(871, 5);
			PushFollow(Follow._identifier_in_synpred34_cs6448);
			identifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(871, 18);
			Match(input,79,Follow._79_in_synpred34_cs6452); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred34_cs_fragment", 351);
			LeaveRule("synpred34_cs_fragment", 351);
			LeaveRule_synpred34_cs_fragment();
		}
	}
	// $ANTLR end synpred34_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred35_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred35_cs_fragment() {}

	// $ANTLR start synpred35_cs
	public void synpred35_cs_fragment()
	{
		EnterRule_synpred35_cs_fragment();
		EnterRule("synpred35_cs_fragment", 352);
		TraceIn("synpred35_cs_fragment", 352);
		try
		{
			// .\\cs.g:908:2: ( 'var' )
			DebugEnterAlt(1);
			// .\\cs.g:908:3: 'var'
			{
			DebugLocation(908, 3);
			Match(input,190,Follow._190_in_synpred35_cs6676); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred35_cs_fragment", 352);
			LeaveRule("synpred35_cs_fragment", 352);
			LeaveRule_synpred35_cs_fragment();
		}
	}
	// $ANTLR end synpred35_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred36_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred36_cs_fragment() {}

	// $ANTLR start synpred36_cs
	public void synpred36_cs_fragment()
	{
		EnterRule_synpred36_cs_fragment();
		EnterRule("synpred36_cs_fragment", 353);
		TraceIn("synpred36_cs_fragment", 353);
		try
		{
			// .\\cs.g:909:4: ( 'dynamic' )
			DebugEnterAlt(1);
			// .\\cs.g:909:5: 'dynamic'
			{
			DebugLocation(909, 5);
			Match(input,120,Follow._120_in_synpred36_cs6687); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred36_cs_fragment", 353);
			LeaveRule("synpred36_cs_fragment", 353);
			LeaveRule_synpred36_cs_fragment();
		}
	}
	// $ANTLR end synpred36_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred37_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred37_cs_fragment() {}

	// $ANTLR start synpred37_cs
	public void synpred37_cs_fragment()
	{
		EnterRule_synpred37_cs_fragment();
		EnterRule("synpred37_cs_fragment", 354);
		TraceIn("synpred37_cs_fragment", 354);
		try
		{
			// .\\cs.g:935:62: ( 'else' )
			DebugEnterAlt(1);
			// .\\cs.g:935:63: 'else'
			{
			DebugLocation(935, 63);
			Match(input,121,Follow._121_in_synpred37_cs6854); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred37_cs_fragment", 354);
			LeaveRule("synpred37_cs_fragment", 354);
			LeaveRule_synpred37_cs_fragment();
		}
	}
	// $ANTLR end synpred37_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred38_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred38_cs_fragment() {}

	// $ANTLR start synpred38_cs
	public void synpred38_cs_fragment()
	{
		EnterRule_synpred38_cs_fragment();
		EnterRule("synpred38_cs_fragment", 355);
		TraceIn("synpred38_cs_fragment", 355);
		try
		{
			// .\\cs.g:964:2: ( local_variable_declaration )
			DebugEnterAlt(1);
			// .\\cs.g:964:3: local_variable_declaration
			{
			DebugLocation(964, 3);
			PushFollow(Follow._local_variable_declaration_in_synpred38_cs7105);
			local_variable_declaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred38_cs_fragment", 355);
			LeaveRule("synpred38_cs_fragment", 355);
			LeaveRule_synpred38_cs_fragment();
		}
	}
	// $ANTLR end synpred38_cs
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred39_cs_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred39_cs_fragment() {}

	// $ANTLR start synpred39_cs
	public void synpred39_cs_fragment()
	{
		EnterRule_synpred39_cs_fragment();
		EnterRule("synpred39_cs_fragment", 356);
		TraceIn("synpred39_cs_fragment", 356);
		try
		{
			// .\\cs.g:1016:2: ( local_variable_declaration )
			DebugEnterAlt(1);
			// .\\cs.g:1016:3: local_variable_declaration
			{
			DebugLocation(1016, 3);
			PushFollow(Follow._local_variable_declaration_in_synpred39_cs7518);
			local_variable_declaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred39_cs_fragment", 356);
			LeaveRule("synpred39_cs_fragment", 356);
			LeaveRule_synpred39_cs_fragment();
		}
	}
	// $ANTLR end synpred39_cs
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA50 dfa50;
	private DFA71 dfa71;
	private DFA72 dfa72;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa50 = new DFA50( this );
		dfa71 = new DFA71( this, SpecialStateTransition71 );
		dfa72 = new DFA72( this, SpecialStateTransition72 );
	}

	private class DFA50 : DFA
	{
		private const string DFA50_eotS =
			"\x5\xFFFF";
		private const string DFA50_eofS =
			"\x1\x2\x3\xFFFF\x1\x2";
		private const string DFA50_minS =
			"\x1\xA\x1\x5\x2\xFFFF\x1\xA";
		private const string DFA50_maxS =
			"\x1\xC9\x1\xCA\x2\xFFFF\x1\xC9";
		private const string DFA50_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2\x1\xFFFF";
		private const string DFA50_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA50_transitionS =
			{
				"\x1\x3\xA\xFFFF\x1\x2\x5\xFFFF\x1\x2\x6\xFFFF\x1\x2\xA\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x2\x2\xFFFF\x1\x2\xB\xFFFF\x6\x2\x1\x3\xB\x2\x1\xFFFF\x6\x2"+
				"\x1\xFFFF\x3\x2\x1\x1\x4\x2\x1\xFFFF\x5\x2\x3\xFFFF\x1\x2\xB\xFFFF\x1"+
				"\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x5\xFFFF\x4\x2\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\x2\x3\xFFFF\x2"+
				"\x2\xA\xFFFF\x1\x2\x6\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x6\x2",
				"\x1\x3\xE\xFFFF\x1\x3\x5\xFFFF\x2\x3\x6\xFFFF\x3\x3\xB\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x2\x1\x3\x10\xFFFF"+
				"\x1\x4\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF\x4\x3\x1\xFFFF\x2\x3\x2"+
				"\xFFFF\x2\x3\x3\xFFFF\x4\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3\x3\xFFFF\x1"+
				"\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF\x3\x3\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x4\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x5\x3\x1\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\x3",
				"",
				"",
				"\x1\x3\xA\xFFFF\x1\x2\x5\xFFFF\x1\x2\x6\xFFFF\x1\x2\xA\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\xB\xFFFF\x6\x2\x1\x3\xB\x2\x1\xFFFF\x6"+
				"\x2\x1\xFFFF\x3\x2\x1\x1\x4\x2\x1\xFFFF\x5\x2\x3\xFFFF\x1\x2\xB\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x5\xFFFF\x4\x2\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1"+
				"\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\x2\x3\xFFFF"+
				"\x2\x2\xA\xFFFF\x1\x2\x6\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x6\x2"
			};

		private static readonly short[] DFA50_eot = DFA.UnpackEncodedString(DFA50_eotS);
		private static readonly short[] DFA50_eof = DFA.UnpackEncodedString(DFA50_eofS);
		private static readonly char[] DFA50_min = DFA.UnpackEncodedStringToUnsignedChars(DFA50_minS);
		private static readonly char[] DFA50_max = DFA.UnpackEncodedStringToUnsignedChars(DFA50_maxS);
		private static readonly short[] DFA50_accept = DFA.UnpackEncodedString(DFA50_acceptS);
		private static readonly short[] DFA50_special = DFA.UnpackEncodedString(DFA50_specialS);
		private static readonly short[][] DFA50_transition;

		static DFA50()
		{
			int numStates = DFA50_transitionS.Length;
			DFA50_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA50_transition[i] = DFA.UnpackEncodedString(DFA50_transitionS[i]);
			}
		}

		public DFA50( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 50;
			this.eot = DFA50_eot;
			this.eof = DFA50_eof;
			this.min = DFA50_min;
			this.max = DFA50_max;
			this.accept = DFA50_accept;
			this.special = DFA50_special;
			this.transition = DFA50_transition;
		}

		public override string Description { get { return "204:6: ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA71 : DFA
	{
		private const string DFA71_eotS =
			"\xE\xFFFF";
		private const string DFA71_eofS =
			"\xE\xFFFF";
		private const string DFA71_minS =
			"\x1\x1B\x1\xA\x1\xFFFF\x1\x2F\x1\x1B\x1\x15\x1\x1B\x1\xFFFF\x1\xA\x2"+
			"\xFFFF\x1\xA\x2\x15";
		private const string DFA71_maxS =
			"\x1\xC4\x1\x5B\x1\xFFFF\x1\x45\x3\xC4\x1\xFFFF\x1\x5B\x2\xFFFF\x1\x5B"+
			"\x2\xC4";
		private const string DFA71_acceptS =
			"\x2\xFFFF\x1\x2\x4\xFFFF\x1\x3\x1\xFFFF\x2\x1\x3\xFFFF";
		private const string DFA71_specialS =
			"\x5\xFFFF\x1\x1\x6\xFFFF\x1\x2\x1\x0}>";
		private static readonly string[] DFA71_transitionS =
			{
				"\x1\x1\x43\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1\xFFFF\x2\x1\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\x2\x2\xFFFF\x1\x2\x4\xFFFF\x1\x2\x2\xFFFF\x1\x1\x1"+
				"\xFFFF\x1\x2\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF\x1\x1\x2\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x1\x2\xFFFF\x1\x1\x2\xFFFF\x1\x2\x2\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1"+
				"\xFFFF\x1\x2\x2\x1\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1"+
				"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x1\x4\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x2\x1\x1\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x1\x1\xFFFF\x2\x2\x2\xFFFF\x1"+
				"\x2\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1",
				"\x1\x6\x24\xFFFF\x1\x2\x15\xFFFF\x1\x2\xA\xFFFF\x1\x4\x1\x5\x7\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2",
				"",
				"\x1\x7\x15\xFFFF\x1\x2",
				"\x1\x8\x43\xFFFF\x1\x8\x1\xFFFF\x2\x8\x1\xFFFF\x2\x8\x3\xFFFF\x1\x8"+
				"\xB\xFFFF\x1\x8\x2\xFFFF\x1\x8\x1\xFFFF\x1\x8\x3\xFFFF\x1\x8\x5\xFFFF"+
				"\x1\x8\x2\xFFFF\x1\x8\x5\xFFFF\x1\x8\x1\xFFFF\x2\x8\x2\xFFFF\x2\x8\x3"+
				"\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x1\x8\x2\xFFFF\x1\x8\x1\xFFFF\x1"+
				"\x8\x4\xFFFF\x1\x8\x3\xFFFF\x2\x8\xA\xFFFF\x1\x8\x6\xFFFF\x1\x8\x3\xFFFF"+
				"\x1\x8\x1\xFFFF\x1\x8",
				"\x1\xA\x5\xFFFF\x1\x2\x2E\xFFFF\x1\x9\x14\xFFFF\x1\x2\x1\xFFFF\x2\x2"+
				"\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x4\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x3\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2",
				"\x1\xB\x43\xFFFF\x1\xB\x1\xFFFF\x2\xB\x1\xFFFF\x2\xB\x3\xFFFF\x1\xB"+
				"\xB\xFFFF\x1\xB\x2\xFFFF\x1\xB\x1\xFFFF\x1\xB\x3\xFFFF\x1\xB\x5\xFFFF"+
				"\x1\xB\x2\xFFFF\x1\xB\x5\xFFFF\x1\xB\x1\xFFFF\x2\xB\x2\xFFFF\x2\xB\x3"+
				"\xFFFF\x1\xB\x1\xFFFF\x1\xB\x2\xFFFF\x1\xB\x2\xFFFF\x1\xB\x1\xFFFF\x1"+
				"\xB\x4\xFFFF\x1\xB\x3\xFFFF\x2\xB\xA\xFFFF\x1\xB\x6\xFFFF\x1\xB\x3\xFFFF"+
				"\x1\xB\x1\xFFFF\x1\xB",
				"",
				"\x1\x6\x24\xFFFF\x1\x2\x15\xFFFF\x1\x2\xB\xFFFF\x1\xC\x7\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2",
				"",
				"",
				"\x1\x6\x24\xFFFF\x1\x2\x15\xFFFF\x1\x2\xB\xFFFF\x1\xD\x7\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2",
				"\x1\xA\x5\xFFFF\x1\x2\x2E\xFFFF\x1\x9\x14\xFFFF\x1\x2\x1\xFFFF\x2\x2"+
				"\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x4\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x3\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2",
				"\x1\xA\x5\xFFFF\x1\x2\x2E\xFFFF\x1\x9\x14\xFFFF\x1\x2\x1\xFFFF\x2\x2"+
				"\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x4\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x3\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2"
			};

		private static readonly short[] DFA71_eot = DFA.UnpackEncodedString(DFA71_eotS);
		private static readonly short[] DFA71_eof = DFA.UnpackEncodedString(DFA71_eofS);
		private static readonly char[] DFA71_min = DFA.UnpackEncodedStringToUnsignedChars(DFA71_minS);
		private static readonly char[] DFA71_max = DFA.UnpackEncodedStringToUnsignedChars(DFA71_maxS);
		private static readonly short[] DFA71_accept = DFA.UnpackEncodedString(DFA71_acceptS);
		private static readonly short[] DFA71_special = DFA.UnpackEncodedString(DFA71_specialS);
		private static readonly short[][] DFA71_transition;

		static DFA71()
		{
			int numStates = DFA71_transitionS.Length;
			DFA71_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA71_transition[i] = DFA.UnpackEncodedString(DFA71_transitionS[i]);
			}
		}

		public DFA71( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 71;
			this.eot = DFA71_eot;
			this.eof = DFA71_eof;
			this.min = DFA71_min;
			this.max = DFA71_max;
			this.accept = DFA71_accept;
			this.special = DFA71_special;
			this.transition = DFA71_transition;
		}

		public override string Description { get { return "277:19: ( ( unbound_type_name )=> unbound_type_name | type | 'void' )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition71(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA71_13 = input.LA(1);


				int index71_13 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA71_13==74) && (EvaluatePredicate(synpred13_cs_fragment))) {s = 9;}

				else if ((LA71_13==GT) && (EvaluatePredicate(synpred13_cs_fragment))) {s = 10;}

				else if ((LA71_13==IDENTIFIER||LA71_13==95||(LA71_13>=97 && LA71_13<=98)||(LA71_13>=100 && LA71_13<=101)||LA71_13==103||(LA71_13>=105 && LA71_13<=106)||LA71_13==109||LA71_13==114||LA71_13==117||(LA71_13>=119 && LA71_13<=120)||LA71_13==122||LA71_13==126||LA71_13==129||LA71_13==132||LA71_13==135||LA71_13==138||LA71_13==141||(LA71_13>=143 && LA71_13<=144)||(LA71_13>=146 && LA71_13<=148)||(LA71_13>=151 && LA71_13<=152)||LA71_13==154||LA71_13==157||LA71_13==160||LA71_13==162||LA71_13==167||LA71_13==169||(LA71_13>=171 && LA71_13<=173)||LA71_13==177||LA71_13==183||(LA71_13>=185 && LA71_13<=186)||(LA71_13>=189 && LA71_13<=190)||LA71_13==192||LA71_13==194||LA71_13==196)) {s = 2;}


				input.Seek(index71_13);
				if (s >= 0) return s;
				break;

			case 1:
				int LA71_5 = input.LA(1);


				int index71_5 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA71_5==74) && (EvaluatePredicate(synpred13_cs_fragment))) {s = 9;}

				else if ((LA71_5==GT) && (EvaluatePredicate(synpred13_cs_fragment))) {s = 10;}

				else if ((LA71_5==IDENTIFIER||LA71_5==95||(LA71_5>=97 && LA71_5<=98)||(LA71_5>=100 && LA71_5<=101)||LA71_5==103||(LA71_5>=105 && LA71_5<=106)||LA71_5==109||LA71_5==114||LA71_5==117||(LA71_5>=119 && LA71_5<=120)||LA71_5==122||LA71_5==126||LA71_5==129||LA71_5==132||LA71_5==135||LA71_5==138||LA71_5==141||(LA71_5>=143 && LA71_5<=144)||(LA71_5>=146 && LA71_5<=148)||(LA71_5>=151 && LA71_5<=152)||LA71_5==154||LA71_5==157||LA71_5==160||LA71_5==162||LA71_5==167||LA71_5==169||(LA71_5>=171 && LA71_5<=173)||LA71_5==177||LA71_5==183||(LA71_5>=185 && LA71_5<=186)||(LA71_5>=189 && LA71_5<=190)||LA71_5==192||LA71_5==194||LA71_5==196)) {s = 2;}


				input.Seek(index71_5);
				if (s >= 0) return s;
				break;

			case 2:
				int LA71_12 = input.LA(1);


				int index71_12 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA71_12==74) && (EvaluatePredicate(synpred13_cs_fragment))) {s = 9;}

				else if ((LA71_12==GT) && (EvaluatePredicate(synpred13_cs_fragment))) {s = 10;}

				else if ((LA71_12==IDENTIFIER||LA71_12==95||(LA71_12>=97 && LA71_12<=98)||(LA71_12>=100 && LA71_12<=101)||LA71_12==103||(LA71_12>=105 && LA71_12<=106)||LA71_12==109||LA71_12==114||LA71_12==117||(LA71_12>=119 && LA71_12<=120)||LA71_12==122||LA71_12==126||LA71_12==129||LA71_12==132||LA71_12==135||LA71_12==138||LA71_12==141||(LA71_12>=143 && LA71_12<=144)||(LA71_12>=146 && LA71_12<=148)||(LA71_12>=151 && LA71_12<=152)||LA71_12==154||LA71_12==157||LA71_12==160||LA71_12==162||LA71_12==167||LA71_12==169||(LA71_12>=171 && LA71_12<=173)||LA71_12==177||LA71_12==183||(LA71_12>=185 && LA71_12<=186)||(LA71_12>=189 && LA71_12<=190)||LA71_12==192||LA71_12==194||LA71_12==196)) {s = 2;}


				input.Seek(index71_12);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 71, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA72 : DFA
	{
		private const string DFA72_eotS =
			"\x7\xFFFF";
		private const string DFA72_eofS =
			"\x4\xFFFF\x1\x5\x2\xFFFF";
		private const string DFA72_minS =
			"\x1\xA\x1\x15\x1\xFFFF\x1\x15\x1\xA\x2\xFFFF";
		private const string DFA72_maxS =
			"\x1\x51\x1\x4A\x1\xFFFF\x1\x4A\x1\x2F\x2\xFFFF";
		private const string DFA72_acceptS =
			"\x2\xFFFF\x1\x2\x2\xFFFF\x1\x3\x1\x1";
		private const string DFA72_specialS =
			"\x4\xFFFF\x1\x0\x2\xFFFF}>";
		private static readonly string[] DFA72_transitionS =
			{
				"\x1\x2\x46\xFFFF\x1\x1",
				"\x1\x4\x34\xFFFF\x1\x3",
				"",
				"\x1\x4\x34\xFFFF\x1\x3",
				"\x1\x6\x24\xFFFF\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA72_eot = DFA.UnpackEncodedString(DFA72_eotS);
		private static readonly short[] DFA72_eof = DFA.UnpackEncodedString(DFA72_eofS);
		private static readonly char[] DFA72_min = DFA.UnpackEncodedStringToUnsignedChars(DFA72_minS);
		private static readonly char[] DFA72_max = DFA.UnpackEncodedStringToUnsignedChars(DFA72_maxS);
		private static readonly short[] DFA72_accept = DFA.UnpackEncodedString(DFA72_acceptS);
		private static readonly short[] DFA72_special = DFA.UnpackEncodedString(DFA72_specialS);
		private static readonly short[][] DFA72_transition;

		static DFA72()
		{
			int numStates = DFA72_transitionS.Length;
			DFA72_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA72_transition[i] = DFA.UnpackEncodedString(DFA72_transitionS[i]);
			}
		}

		public DFA72( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 72;
			this.eot = DFA72_eot;
			this.eof = DFA72_eof;
			this.min = DFA72_min;
			this.max = DFA72_max;
			this.accept = DFA72_accept;
			this.special = DFA72_special;
			this.transition = DFA72_transition;
		}

		public override string Description { get { return "()* loopback of 287:3: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition72(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA72_4 = input.LA(1);


				int index72_4 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA72_4==EOF||LA72_4==RPAREN)) {s = 5;}

				else if ((LA72_4==DOT) && (EvaluatePredicate(synpred14_cs_fragment))) {s = 6;}


				input.Seek(index72_4);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 72, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _namespace_body_in_compilation_unit72 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_namespace_declaration81 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _qualified_identifier_in_namespace_declaration85 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _namespace_block_in_namespace_declaration89 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _SEMI_in_namespace_declaration93 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_namespace_block102 = new BitSet(new ulong[]{0x200000000020000UL,0x2010800108000000UL,0x9005043A90601800UL,0x202UL});
		public static readonly BitSet _namespace_body_in_namespace_block106 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_namespace_block111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _extern_alias_directives_in_namespace_body120 = new BitSet(new ulong[]{0x200000000020002UL,0x2010800108000000UL,0x9005043A90601800UL,0x2UL});
		public static readonly BitSet _using_directives_in_namespace_body125 = new BitSet(new ulong[]{0x20002UL,0x2010800108000000UL,0x9005043A90601800UL,0x2UL});
		public static readonly BitSet _global_attributes_in_namespace_body130 = new BitSet(new ulong[]{0x20002UL,0x2010800108000000UL,0x9005043A90601800UL,0x2UL});
		public static readonly BitSet _namespace_member_declarations_in_namespace_body135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _extern_alias_directive_in_extern_alias_directives144 = new BitSet(new ulong[]{0x2UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_extern_alias_directive153 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _98_in_extern_alias_directive157 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_extern_alias_directive161 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_extern_alias_directive164 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _using_directive_in_using_directives172 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _using_alias_directive_in_using_directive182 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _using_namespace_directive_in_using_directive187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USING_in_using_alias_directive196 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_using_alias_directive200 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_using_alias_directive204 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _namespace_or_type_name_in_using_alias_directive208 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_using_alias_directive212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USING_in_using_namespace_directive220 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _namespace_name_in_using_namespace_directive224 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_using_namespace_directive228 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_member_declaration_in_namespace_member_declarations236 = new BitSet(new ulong[]{0x20002UL,0x2010800108000000UL,0x9005043A90601800UL,0x2UL});
		public static readonly BitSet _namespace_declaration_in_namespace_member_declaration245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attributes_in_namespace_member_declaration250 = new BitSet(new ulong[]{0x20000UL,0x2010800100000000UL,0x9005043A90401800UL,0x2UL});
		public static readonly BitSet _modifiers_in_namespace_member_declaration255 = new BitSet(new ulong[]{0x20000UL,0x10800000000000UL,0x4000080000800UL});
		public static readonly BitSet _type_declaration_in_namespace_member_declaration260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_type_declaration274 = new BitSet(new ulong[]{0x0UL,0x800000000000UL,0x4000000000800UL});
		public static readonly BitSet _class_declaration_in_type_declaration279 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_type_declaration291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_declaration_in_type_declaration303 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_declaration_in_type_declaration309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_type_declaration314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_declaration_in_type_declaration319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_declaration_in_type_declaration324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _delegate_declaration_in_type_declaration329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_qualified_identifier338 = new BitSet(new ulong[]{0x402UL});
		public static readonly BitSet _DOT_in_qualified_identifier341 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_qualified_identifier343 = new BitSet(new ulong[]{0x402UL});
		public static readonly BitSet _namespace_or_type_name_in_namespace_name354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_modifiers363 = new BitSet(new ulong[]{0x2UL,0x2000000100000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _attributes_in_class_member_declaration435 = new BitSet(new ulong[]{0x8020000UL,0x7DB5A6B780000000UL,0xF6873EBFB5DDBD92UL,0x417UL});
		public static readonly BitSet _modifiers_in_class_member_declaration441 = new BitSet(new ulong[]{0x8020000UL,0x5DB5A6B680000000UL,0x66863A85A59DAD92UL,0x415UL});
		public static readonly BitSet _112_in_class_member_declaration447 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_class_member_declaration451 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _constant_declarators_in_class_member_declaration455 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_class_member_declaration459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _event_declaration_in_class_member_declaration464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_class_member_declaration471 = new BitSet(new ulong[]{0x42900180C100020UL,0x45A4A6B680000000UL,0x66863A85259DAC92UL,0x14UL});
		public static readonly BitSet _method_declaration_in_class_member_declaration474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_declaration_in_class_member_declaration485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_declaration_in_class_member_declaration496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_class_member_declaration507 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_declaration_in_class_member_declaration513 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _192_in_class_member_declaration519 = new BitSet(new ulong[]{0x42900180C100020UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x14UL});
		public static readonly BitSet _method_declaration_in_class_member_declaration523 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_class_member_declaration528 = new BitSet(new ulong[]{0x42900180C100020UL,0x45A426B680000000UL,0x66923A85279DA492UL,0x14UL});
		public static readonly BitSet _method_declaration_in_class_member_declaration542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _property_declaration_in_class_member_declaration561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_class_member_declaration584 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _DOT_in_class_member_declaration586 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _indexer_declaration_in_class_member_declaration588 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_declaration_in_class_member_declaration597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _field_declaration_in_class_member_declaration610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operator_declaration_in_class_member_declaration628 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_declaration_in_class_member_declaration646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_class_member_declaration653 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_declaration_in_class_member_declaration659 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _delegate_declaration_in_class_member_declaration666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_operator_declaration_in_class_member_declaration672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constructor_declaration_in_class_member_declaration677 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _destructor_declaration_in_class_member_declaration683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_primary_expression709 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _brackets_in_primary_expression713 = new BitSet(new ulong[]{0x200000000402UL,0x8000010UL});
		public static readonly BitSet _primary_expression_part_in_primary_expression717 = new BitSet(new ulong[]{0x200000000402UL,0x8000010UL});
		public static readonly BitSet _180_in_primary_expression733 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _brackets_in_primary_expression737 = new BitSet(new ulong[]{0x200000000402UL,0x8000010UL});
		public static readonly BitSet _primary_expression_part_in_primary_expression741 = new BitSet(new ulong[]{0x200000000402UL,0x8000010UL});
		public static readonly BitSet _primary_expression_start_in_primary_expression747 = new BitSet(new ulong[]{0x200000000402UL,0x8000010UL});
		public static readonly BitSet _primary_expression_part_in_primary_expression751 = new BitSet(new ulong[]{0x200000000402UL,0x8000010UL});
		public static readonly BitSet _150_in_primary_expression757 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x35UL});
		public static readonly BitSet _object_creation_expression_in_primary_expression785 = new BitSet(new ulong[]{0x200000000400UL,0x8000010UL});
		public static readonly BitSet _primary_expression_part_in_primary_expression789 = new BitSet(new ulong[]{0x200000000402UL,0x8000010UL});
		public static readonly BitSet _delegate_creation_expression_in_primary_expression817 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _object_creation_expression_in_primary_expression825 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymous_object_creation_expression_in_primary_expression833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sizeof_expression_in_primary_expression846 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _checked_expression_in_primary_expression857 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unchecked_expression_in_primary_expression876 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _default_value_expression_in_primary_expression893 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymous_method_expression_in_primary_expression906 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _predefined_type_in_primary_expression_start919 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_primary_expression_start947 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _generic_argument_list_in_primary_expression_start951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_primary_expression_start956 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_primary_expression_start959 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_primary_expression_start963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_primary_expression_start970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_primary_expression_start976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _paren_expression_in_primary_expression_start981 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeof_expression_in_primary_expression_start986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primary_expression_start1004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _access_identifier_in_primary_expression_part1015 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _brackets_or_arguments_in_primary_expression_part1020 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _access_operator_in_access_identifier1028 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _type_or_generic_in_access_identifier1032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _brackets_in_brackets_or_arguments1054 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_brackets_or_arguments1058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_brackets1066 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6900009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_list_in_brackets1070 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_brackets1075 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_paren_expression1085 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_paren_expression1089 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_paren_expression1093 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_arguments1102 = new BitSet(new ulong[]{0x2429801C0C100020UL,0x45BC66F6800009B4UL,0x6F927AC52DDDA492UL,0x414UL});
		public static readonly BitSet _argument_list_in_arguments1106 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_arguments1111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _argument_in_argument_list1120 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_argument_list1123 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927AC52DDDA492UL,0x414UL});
		public static readonly BitSet _argument_in_argument_list1125 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _argument_name_in_argument1135 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927AC52DDDA492UL,0x414UL});
		public static readonly BitSet _argument_value_in_argument1139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _argument_value_in_argument1144 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_argument_name1151 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_argument_name1155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_argument_value1163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ref_variable_reference_in_argument_value1169 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_argument_value1175 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _variable_reference_in_argument_value1179 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_ref_variable_reference1187 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _68_in_ref_variable_reference1209 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_ref_variable_reference1213 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_ref_variable_reference1217 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927AC525DDA492UL,0x414UL});
		public static readonly BitSet _ref_variable_reference_in_ref_variable_reference1222 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_reference_in_ref_variable_reference1226 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_reference_in_ref_variable_reference1262 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_variable_reference1272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rank_specifier_in_rank_specifiers1280 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_rank_specifier1298 = new BitSet(new ulong[]{0x0UL,0x10000400UL});
		public static readonly BitSet _dim_separators_in_rank_specifier1302 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_rank_specifier1307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _74_in_dim_separators1316 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _type_name_in_delegate_creation_expression1329 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_delegate_creation_expression1333 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _type_name_in_delegate_creation_expression1337 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_delegate_creation_expression1341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymous_object_initializer_in_anonymous_object_creation_expression1352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_anonymous_object_initializer1361 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000400UL,0x408018852519A090UL,0x214UL});
		public static readonly BitSet _member_declarator_list_in_anonymous_object_initializer1365 = new BitSet(new ulong[]{0x0UL,0x400UL,0x0UL,0x200UL});
		public static readonly BitSet _74_in_anonymous_object_initializer1370 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_anonymous_object_initializer1375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_declarator_in_member_declarator_list1383 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_member_declarator_list1387 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _member_declarator_in_member_declarator_list1389 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _identifier_in_member_declarator1401 = new BitSet(new ulong[]{0x400UL,0x220000UL});
		public static readonly BitSet _generic_argument_list_in_member_declarator1406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_member_declarator1416 = new BitSet(new ulong[]{0x42900180C100020UL,0x45BC66F680000010UL,0x6F927A8525DDA492UL,0x14UL});
		public static readonly BitSet _primary_or_array_creation_expression_in_member_declarator1420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_member_declarator1430 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_member_declarator1434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _array_creation_expression_in_primary_or_array_creation_expression1449 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_expression_in_primary_or_array_creation_expression1454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_array_creation_expression1465 = new BitSet(new ulong[]{0x8000000UL,0x45A426B688000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_array_creation_expression1473 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x0UL,0x20UL});
		public static readonly BitSet _91_in_array_creation_expression1478 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_list_in_array_creation_expression1482 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_array_creation_expression1486 = new BitSet(new ulong[]{0x200000000402UL,0x8000010UL,0x0UL,0x20UL});
		public static readonly BitSet _rank_specifiers_in_array_creation_expression1498 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _array_initializer_in_array_creation_expression1503 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_array_creation_expression1539 = new BitSet(new ulong[]{0x200000000400UL,0x8000000UL});
		public static readonly BitSet _invocation_part_in_array_creation_expression1543 = new BitSet(new ulong[]{0x200000000400UL,0x8000010UL});
		public static readonly BitSet _invocation_part_in_array_creation_expression1555 = new BitSet(new ulong[]{0x200000000400UL,0x8000010UL});
		public static readonly BitSet _arguments_in_array_creation_expression1561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _array_initializer_in_array_creation_expression1583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rank_specifier_in_array_creation_expression1597 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _array_initializer_in_array_creation_expression1606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_array_initializer1627 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F680000DB4UL,0x6F927A8525DDA492UL,0x634UL});
		public static readonly BitSet _variable_initializer_list_in_array_initializer1631 = new BitSet(new ulong[]{0x0UL,0x400UL,0x0UL,0x200UL});
		public static readonly BitSet _74_in_array_initializer1636 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_array_initializer1641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_initializer_in_variable_initializer_list1649 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_variable_initializer_list1652 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x434UL});
		public static readonly BitSet _variable_initializer_in_variable_initializer_list1654 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _expression_in_variable_initializer1664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _array_initializer_in_variable_initializer1668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _174_in_sizeof_expression1676 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_sizeof_expression1680 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _unmanaged_type_in_sizeof_expression1684 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_sizeof_expression1688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_checked_expression1696 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_checked_expression1700 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_checked_expression1704 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_checked_expression1708 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _187_in_unchecked_expression1717 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_unchecked_expression1721 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_unchecked_expression1725 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_unchecked_expression1729 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_default_value_expression1738 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_default_value_expression1742 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_default_value_expression1746 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_default_value_expression1750 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_anonymous_method_expression1758 = new BitSet(new ulong[]{0x4000000000000UL,0x10UL,0x0UL,0x20UL});
		public static readonly BitSet _explicit_anonymous_function_signature_in_anonymous_method_expression1762 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_anonymous_method_expression1767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_explicit_anonymous_function_signature1774 = new BitSet(new ulong[]{0x800008000000UL,0x45A426B680000000UL,0x66823AC52D9DA492UL,0x15UL});
		public static readonly BitSet _explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature1778 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_explicit_anonymous_function_signature1783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list1791 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_explicit_anonymous_function_parameter_list1796 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823AC52D9DA492UL,0x15UL});
		public static readonly BitSet _explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list1800 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter1811 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_explicit_anonymous_function_parameter1816 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_explicit_anonymous_function_parameter1820 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_object_creation_expression1844 = new BitSet(new ulong[]{0x0UL,0x10UL,0x0UL,0x20UL});
		public static readonly BitSet _68_in_object_creation_expression1853 = new BitSet(new ulong[]{0x2429801C0C100020UL,0x45BC66F6800009B4UL,0x6F927AC52DDDA492UL,0x414UL});
		public static readonly BitSet _argument_list_in_object_creation_expression1857 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_object_creation_expression1862 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _object_or_collection_initializer_in_object_creation_expression1866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _object_or_collection_initializer_in_object_creation_expression1877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_object_or_collection_initializer1889 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F680000DB4UL,0x6F927A8525DDA492UL,0x634UL});
		public static readonly BitSet _object_initializer_in_object_or_collection_initializer1893 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collection_initializer_in_object_or_collection_initializer1900 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _element_initializer_list_in_collection_initializer1910 = new BitSet(new ulong[]{0x0UL,0x400UL,0x0UL,0x200UL});
		public static readonly BitSet _74_in_collection_initializer1914 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_collection_initializer1919 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _element_initializer_in_element_initializer_list1928 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_element_initializer_list1932 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x434UL});
		public static readonly BitSet _element_initializer_in_element_initializer_list1934 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _non_assignment_expression_in_element_initializer1945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_element_initializer1951 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_list_in_element_initializer1955 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_element_initializer1959 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_initializer_list_in_object_initializer1974 = new BitSet(new ulong[]{0x0UL,0x400UL,0x0UL,0x200UL});
		public static readonly BitSet _74_in_object_initializer1979 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_object_initializer1984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_initializer_in_member_initializer_list1993 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_member_initializer_list1997 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _member_initializer_in_member_initializer_list1999 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_member_initializer2009 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_member_initializer2013 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x434UL});
		public static readonly BitSet _initializer_value_in_member_initializer2017 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_initializer_value2026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _object_or_collection_initializer_in_initializer_value2032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _184_in_typeof_expression2044 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_typeof_expression2048 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _unbound_type_name_in_typeof_expression2059 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _type_in_typeof_expression2070 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _192_in_typeof_expression2082 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_typeof_expression2087 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unbound_type_name_start_in_unbound_type_name2102 = new BitSet(new ulong[]{0x400UL,0x20000UL});
		public static readonly BitSet _generic_dimension_specifier_in_unbound_type_name2121 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _unbound_type_name_part_in_unbound_type_name2125 = new BitSet(new ulong[]{0x400UL,0x20000UL});
		public static readonly BitSet _unbound_type_name_part_in_unbound_type_name2132 = new BitSet(new ulong[]{0x400UL,0x20000UL});
		public static readonly BitSet _generic_dimension_specifier_in_unbound_type_name2142 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_unbound_type_name_start2152 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_unbound_type_name_start2155 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_unbound_type_name_start2157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_unbound_type_name_part2166 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_unbound_type_name_part2170 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_generic_dimension_specifier2178 = new BitSet(new ulong[]{0x200000UL,0x400UL});
		public static readonly BitSet _commas_in_generic_dimension_specifier2182 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _GT_in_generic_dimension_specifier2187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _74_in_commas2196 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _namespace_or_type_name_in_type_name2212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_or_generic_in_namespace_or_type_name2221 = new BitSet(new ulong[]{0x402UL,0x10000UL});
		public static readonly BitSet _80_in_namespace_or_type_name2226 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _type_or_generic_in_namespace_or_type_name2228 = new BitSet(new ulong[]{0x402UL});
		public static readonly BitSet _DOT_in_namespace_or_type_name2233 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _type_or_generic_in_namespace_or_type_name2237 = new BitSet(new ulong[]{0x402UL});
		public static readonly BitSet _identifier_in_type_or_generic2257 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _generic_argument_list_in_type_or_generic2261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_type_or_generic2266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qid_start_in_qid2277 = new BitSet(new ulong[]{0x200000000402UL});
		public static readonly BitSet _qid_part_in_qid2281 = new BitSet(new ulong[]{0x200000000402UL});
		public static readonly BitSet _predefined_type_in_qid_start2291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_qid_start2307 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _generic_argument_list_in_qid_start2311 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_qid_start2318 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_qid_start2323 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_qid_start2327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_qid_start2334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _access_identifier_in_qid_part2348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_generic_argument_list2358 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_arguments_in_generic_argument_list2362 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _GT_in_generic_argument_list2366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_type_arguments2375 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_type_arguments2378 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_type_arguments2380 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _predefined_type_in_type2409 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _type_name_in_type2413 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _rank_specifiers_in_type2418 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _69_in_type2422 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _predefined_type_in_type2451 = new BitSet(new ulong[]{0x0UL,0x2000020UL});
		public static readonly BitSet _type_name_in_type2455 = new BitSet(new ulong[]{0x0UL,0x2000020UL});
		public static readonly BitSet _69_in_type2461 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _89_in_type2466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _predefined_type_in_type2473 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_type2477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _192_in_type2483 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_type2485 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _predefined_type_in_non_nullable_type2496 = new BitSet(new ulong[]{0x2UL,0x8000020UL});
		public static readonly BitSet _type_name_in_non_nullable_type2500 = new BitSet(new ulong[]{0x2UL,0x8000020UL});
		public static readonly BitSet _rank_specifiers_in_non_nullable_type2509 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _69_in_non_nullable_type2513 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _69_in_non_nullable_type2522 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _192_in_non_nullable_type2534 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_non_nullable_type2538 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _type_in_non_array_type2549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_array_type2556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_unmanaged_type2563 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_class_type2570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_pointer_type2577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_block2589 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_block2594 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FF67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x63DUL});
		public static readonly BitSet _statement_list_in_block2598 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_block2603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_statement_list2610 = new BitSet(new ulong[]{0x262D001C1C100022UL,0x45FF67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43DUL});
		public static readonly BitSet _assignment_in_expression2635 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _non_assignment_expression_in_expression2641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list2650 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_expression_list2654 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_expression_list2658 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _unary_expression_in_assignment2668 = new BitSet(new ulong[]{0x200000UL,0x40285249UL,0x0UL,0x80UL});
		public static readonly BitSet _assignment_operator_in_assignment2672 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_assignment2676 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cast_expression_in_unary_expression2693 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_or_array_creation_expression_in_unary_expression2698 = new BitSet(new ulong[]{0x2UL,0x900UL});
		public static readonly BitSet _72_in_unary_expression2702 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _75_in_unary_expression2707 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_unary_expression2713 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_unary_expression2717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUS_in_unary_expression2723 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_unary_expression2727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_unary_expression2733 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_unary_expression2737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _202_in_unary_expression2743 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_unary_expression2747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pre_increment_expression_in_unary_expression2753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pre_decrement_expression_in_unary_expression2759 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_indirection_expression_in_unary_expression2765 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addressof_expression_in_unary_expression2770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_cast_expression2780 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_cast_expression2784 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_cast_expression2788 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_cast_expression2792 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_assignment_operator2800 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_assignment_operator2804 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _76_in_assignment_operator2808 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _70_in_assignment_operator2812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_assignment_operator2816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_assignment_operator2820 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _67_in_assignment_operator2824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _199_in_assignment_operator2828 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_assignment_operator2832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_assignment_operator2836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_assignment_operator2840 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_assignment_operator2842 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _72_in_pre_increment_expression2851 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_pre_increment_expression2855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_pre_decrement_expression2864 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_pre_decrement_expression2868 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _69_in_pointer_indirection_expression2876 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_pointer_indirection_expression2880 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_addressof_expression2888 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_addressof_expression2892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expression_in_non_assignment_expression2913 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_expression_in_non_assignment_expression2924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_expression_in_non_assignment_expression2930 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_multiplicative_expression2944 = new BitSet(new ulong[]{0x8000000000000002UL,0x2020UL});
		public static readonly BitSet _set_in_multiplicative_expression2949 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_multiplicative_expression2959 = new BitSet(new ulong[]{0x8000000000000002UL,0x2020UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression2969 = new BitSet(new ulong[]{0x400000002UL,0x80UL});
		public static readonly BitSet _set_in_additive_expression2972 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression2980 = new BitSet(new ulong[]{0x400000002UL,0x80UL});
		public static readonly BitSet _additive_expression_in_shift_expression2991 = new BitSet(new ulong[]{0x200002UL,0x40000UL});
		public static readonly BitSet _82_in_shift_expression2995 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _GT_in_shift_expression2997 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _GT_in_shift_expression2999 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _additive_expression_in_shift_expression3002 = new BitSet(new ulong[]{0x200002UL,0x40000UL});
		public static readonly BitSet _shift_expression_in_relational_expression3012 = new BitSet(new ulong[]{0x200002UL,0x801120000UL,0x4000UL});
		public static readonly BitSet _set_in_relational_expression3019 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _shift_expression_in_relational_expression3029 = new BitSet(new ulong[]{0x200002UL,0x801120000UL,0x4000UL});
		public static readonly BitSet _set_in_relational_expression3038 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _non_nullable_type_in_relational_expression3046 = new BitSet(new ulong[]{0x200002UL,0x801120000UL,0x4000UL});
		public static readonly BitSet _relational_expression_in_equality_expression3060 = new BitSet(new ulong[]{0x4000000000000002UL,0x400000UL});
		public static readonly BitSet _set_in_equality_expression3067 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _relational_expression_in_equality_expression3075 = new BitSet(new ulong[]{0x4000000000000002UL,0x400000UL});
		public static readonly BitSet _equality_expression_in_and_expression3085 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _66_in_and_expression3088 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _equality_expression_in_and_expression3092 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression3102 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_exclusive_or_expression3105 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression3109 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression3119 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _198_in_inclusive_or_expression3124 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression3128 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _inclusive_or_expression_in_conditional_and_expression3138 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _65_in_conditional_and_expression3143 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _inclusive_or_expression_in_conditional_and_expression3147 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _conditional_and_expression_in_conditional_or_expression3157 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _200_in_conditional_or_expression3161 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _conditional_and_expression_in_conditional_or_expression3165 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _conditional_or_expression_in_null_coalescing_expression3176 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_null_coalescing_expression3181 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _conditional_or_expression_in_null_coalescing_expression3185 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _null_coalescing_expression_in_conditional_expression3195 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _89_in_conditional_expression3200 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_conditional_expression3204 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_conditional_expression3208 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_conditional_expression3212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymous_function_signature_in_lambda_expression3232 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_lambda_expression3236 = new BitSet(new ulong[]{0x242D001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x434UL});
		public static readonly BitSet _anonymous_function_body_in_lambda_expression3240 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_anonymous_function_signature3247 = new BitSet(new ulong[]{0x800008000000UL,0x45A426B680000000UL,0x66823AC52D9DA492UL,0x15UL});
		public static readonly BitSet _explicit_anonymous_function_parameter_list_in_anonymous_function_signature3250 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _implicit_anonymous_function_parameter_list_in_anonymous_function_signature3256 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_anonymous_function_signature3260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _implicit_anonymous_function_parameter_list_in_anonymous_function_signature3265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3274 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_implicit_anonymous_function_parameter_list3279 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3283 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _identifier_in_implicit_anonymous_function_parameter3293 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_anonymous_function_body3300 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_anonymous_function_body3305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _from_clause_in_query_expression3317 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80004018090UL,0x4UL});
		public static readonly BitSet _query_body_in_query_expression3321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_body_clauses_in_query_body3331 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000080UL});
		public static readonly BitSet _select_or_group_clause_in_query_body3336 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _query_continuation_in_query_body3347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_query_continuation3357 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_query_continuation3361 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80004018090UL,0x4UL});
		public static readonly BitSet _query_body_in_query_continuation3365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_body_clause_in_query_body_clauses3372 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4018010UL,0x4UL});
		public static readonly BitSet _from_clause_in_query_body_clause3381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _let_clause_in_query_body_clause3386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _where_clause_in_query_body_clause3391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _join_clause_in_query_body_clause3396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_clause_in_query_body_clause3401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_from_clause3408 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_from_clause3412 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_from_clause3417 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_from_clause3421 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_from_clause3425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_join_clause3433 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_join_clause3437 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_join_clause3442 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_join_clause3446 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_join_clause3450 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_join_clause3454 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_join_clause3458 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_join_clause3462 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_join_clause3466 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_join_clause3469 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_join_clause3471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_let_clause3481 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_let_clause3485 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_let_clause3489 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_let_clause3493 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_orderby_clause3500 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _ordering_list_in_orderby_clause3504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ordering_in_ordering_list3512 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_ordering_list3517 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _ordering_in_ordering_list3521 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _expression_in_ordering3531 = new BitSet(new ulong[]{0x0UL,0x20001000000000UL});
		public static readonly BitSet _ordering_direction_in_ordering3536 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_clause_in_select_or_group_clause3558 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _group_clause_in_select_or_group_clause3563 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _171_in_select_clause3571 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_select_clause3575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_group_clause3583 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_group_clause3587 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_group_clause3591 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_group_clause3595 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _194_in_where_clause3603 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _boolean_expression_in_where_clause3607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_boolean_expression3615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_attribute_in_global_attributes3627 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_global_attribute3637 = new BitSet(new ulong[]{0x0UL,0x2000000000UL,0x100000UL});
		public static readonly BitSet _global_attribute_target_specifier_in_global_attribute3641 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _attribute_list_in_global_attribute3645 = new BitSet(new ulong[]{0x0UL,0x10000400UL});
		public static readonly BitSet _74_in_global_attribute3649 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_global_attribute3654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_attribute_target_in_global_attribute_target_specifier3663 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_global_attribute_target_specifier3667 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_sections_in_attributes3689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_section_in_attribute_sections3698 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_attribute_section3708 = new BitSet(new ulong[]{0x8000000UL,0x4D20023680000000UL,0x408019852519A090UL,0x14UL});
		public static readonly BitSet _attribute_target_specifier_in_attribute_section3712 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _attribute_list_in_attribute_section3717 = new BitSet(new ulong[]{0x0UL,0x10000400UL});
		public static readonly BitSet _74_in_attribute_section3721 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_attribute_section3726 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_target_in_attribute_target_specifier3735 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_attribute_target_specifier3739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_attribute_list3781 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_attribute_list3784 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _attribute_in_attribute_list3786 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _type_name_in_attribute3798 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _attribute_arguments_in_attribute3802 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_attribute_arguments3813 = new BitSet(new ulong[]{0x2429801C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _RPAREN_in_attribute_arguments3818 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _positional_argument_in_attribute_arguments3838 = new BitSet(new ulong[]{0x800008000000UL,0x4520023680000400UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _named_argument_in_attribute_arguments3857 = new BitSet(new ulong[]{0x800008000000UL,0x4520023680000400UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _74_in_attribute_arguments3873 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _positional_argument_in_attribute_arguments3875 = new BitSet(new ulong[]{0x800008000000UL,0x4520023680000400UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _RPAREN_in_attribute_arguments3886 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _positional_argument_in_positional_argument_list3900 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_positional_argument_list3903 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _positional_argument_in_positional_argument_list3905 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _attribute_argument_expression_in_positional_argument3916 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _named_argument_in_named_argument_list3925 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_named_argument_list3928 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _named_argument_in_named_argument_list3930 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _identifier_in_named_argument3941 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_named_argument3945 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _attribute_argument_expression_in_named_argument3949 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_attribute_argument_expression3958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_class_declaration3971 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _type_or_generic_in_class_declaration3974 = new BitSet(new ulong[]{0x0UL,0x8000UL,0x0UL,0x24UL});
		public static readonly BitSet _class_base_in_class_declaration3978 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x24UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_class_declaration3983 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _class_body_in_class_declaration3988 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _SEMI_in_class_declaration3992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_class_base4005 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _interface_type_list_in_class_base4009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_interface_type_list4019 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_interface_type_list4022 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_interface_type_list4026 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _197_in_class_body4037 = new BitSet(new ulong[]{0x8020000UL,0x7DB5A6B788000000UL,0xF6873EBFB5DDBD92UL,0x617UL});
		public static readonly BitSet _class_member_declarations_in_class_body4041 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_class_body4046 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_member_declaration_in_class_member_declarations4054 = new BitSet(new ulong[]{0x8020002UL,0x7DB5A6B788000000UL,0xF6873EBFB5DDBD92UL,0x417UL});
		public static readonly BitSet _112_in_constant_declaration4065 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_constant_declaration4069 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _constant_declarators_in_constant_declaration4073 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_constant_declaration4077 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_declarator_in_constant_declarators4085 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_constant_declarators4088 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _constant_declarator_in_constant_declarators4090 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _identifier_in_constant_declarator4100 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_constant_declarator4105 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _constant_expression_in_constant_declarator4109 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_constant_expression4119 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_declarators_in_field_declaration4128 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_field_declaration4132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_declarator_in_variable_declarators4140 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_variable_declarators4143 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _variable_declarator_in_variable_declarators4147 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _type_name_in_variable_declarator4157 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_variable_declarator4160 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x434UL});
		public static readonly BitSet _variable_initializer_in_variable_declarator4164 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _method_header_in_method_declaration4178 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _method_body_in_method_declaration4182 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_method_header4190 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_method_header4193 = new BitSet(new ulong[]{0x800008000000UL,0x45A426B688000000UL,0x66923AC56D9DA492UL,0x15UL});
		public static readonly BitSet _formal_parameter_list_in_method_header4197 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_method_header4202 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_method_header4206 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_method_body4215 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qid_in_member_name4223 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_property_declaration4235 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_property_declaration4239 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x101A00001020UL});
		public static readonly BitSet _accessor_declarations_in_property_declaration4243 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_property_declaration4247 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attributes_in_accessor_declarations4255 = new BitSet(new ulong[]{0x0UL,0x0UL,0x101A00001020UL});
		public static readonly BitSet _get_accessor_declaration_in_accessor_declarations4261 = new BitSet(new ulong[]{0x2UL,0x8000000UL,0x101A00001000UL});
		public static readonly BitSet _attributes_in_accessor_declarations4265 = new BitSet(new ulong[]{0x2UL,0x0UL,0x101A00001000UL});
		public static readonly BitSet _set_accessor_declaration_in_accessor_declarations4270 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_accessor_declaration_in_accessor_declarations4277 = new BitSet(new ulong[]{0x2UL,0x8000000UL,0x1A00001020UL});
		public static readonly BitSet _attributes_in_accessor_declarations4281 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1A00001020UL});
		public static readonly BitSet _get_accessor_declaration_in_accessor_declarations4286 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _accessor_modifier_in_get_accessor_declaration4296 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_get_accessor_declaration4301 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _accessor_body_in_get_accessor_declaration4305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _accessor_modifier_in_set_accessor_declaration4313 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_set_accessor_declaration4318 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _accessor_body_in_set_accessor_declaration4322 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_accessor_body4350 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_event_declaration4360 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_event_declaration4364 = new BitSet(new ulong[]{0x42900180C100020UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x14UL});
		public static readonly BitSet _member_name_in_event_declaration4379 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_event_declaration4383 = new BitSet(new ulong[]{0x0UL,0x208000000UL,0x8000000000UL});
		public static readonly BitSet _event_accessor_declarations_in_event_declaration4387 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_event_declaration4391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_declarators_in_event_declaration4397 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_event_declaration4401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_event_modifiers4413 = new BitSet(new ulong[]{0x2UL,0x2000000100000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _attributes_in_event_accessor_declarations4422 = new BitSet(new ulong[]{0x0UL,0x200000000UL,0x8000000000UL});
		public static readonly BitSet _add_accessor_declaration_in_event_accessor_declarations4429 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x8000000000UL});
		public static readonly BitSet _attributes_in_event_accessor_declarations4433 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _remove_accessor_declaration_in_event_accessor_declarations4438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _remove_accessor_declaration_in_event_accessor_declarations4459 = new BitSet(new ulong[]{0x0UL,0x208000000UL});
		public static readonly BitSet _attributes_in_event_accessor_declarations4463 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _add_accessor_declaration_in_event_accessor_declarations4468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _97_in_add_accessor_declaration4478 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_add_accessor_declaration4482 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_remove_accessor_declaration4490 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_remove_accessor_declaration4494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ENUM_in_enum_declaration4506 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_enum_declaration4510 = new BitSet(new ulong[]{0x0UL,0x8000UL,0x0UL,0x20UL});
		public static readonly BitSet _enum_base_in_enum_declaration4514 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _enum_body_in_enum_declaration4519 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _SEMI_in_enum_declaration4523 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_enum_base4532 = new BitSet(new ulong[]{0x0UL,0x240000000000UL,0x2600220000040400UL});
		public static readonly BitSet _integral_type_in_enum_base4536 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_enum_body4544 = new BitSet(new ulong[]{0x8000000UL,0x4520023688000000UL,0x408018852519A090UL,0x214UL});
		public static readonly BitSet _enum_member_declarations_in_enum_body4547 = new BitSet(new ulong[]{0x0UL,0x400UL,0x0UL,0x200UL});
		public static readonly BitSet _74_in_enum_body4549 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_enum_body4556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_member_declaration_in_enum_member_declarations4564 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_enum_member_declarations4567 = new BitSet(new ulong[]{0x8000000UL,0x4520023688000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _enum_member_declaration_in_enum_member_declarations4569 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _attributes_in_enum_member_declaration4579 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_enum_member_declaration4584 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_enum_member_declaration4589 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_enum_member_declaration4593 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_delegate_declaration4650 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _return_type_in_delegate_declaration4654 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_delegate_declaration4658 = new BitSet(new ulong[]{0x0UL,0x20010UL});
		public static readonly BitSet _variant_generic_parameter_list_in_delegate_declaration4661 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_delegate_declaration4669 = new BitSet(new ulong[]{0x800008000000UL,0x45A426B688000000UL,0x66923AC56D9DA492UL,0x15UL});
		public static readonly BitSet _formal_parameter_list_in_delegate_declaration4673 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_delegate_declaration4678 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_delegate_declaration4682 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_delegate_declaration4687 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_delegate_modifiers4695 = new BitSet(new ulong[]{0x2UL,0x2000000100000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _81_in_variant_generic_parameter_list4705 = new BitSet(new ulong[]{0x8000000UL,0x4520023688000000UL,0x408018852D19A290UL,0x14UL});
		public static readonly BitSet _variant_type_parameters_in_variant_generic_parameter_list4709 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _GT_in_variant_generic_parameter_list4713 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variant_type_variable_name_in_variant_type_parameters4721 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_variant_type_parameters4724 = new BitSet(new ulong[]{0x8000000UL,0x4520023688000000UL,0x408018852D19A290UL,0x14UL});
		public static readonly BitSet _variant_type_variable_name_in_variant_type_parameters4726 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _attributes_in_variant_type_variable_name4736 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852D19A290UL,0x14UL});
		public static readonly BitSet _variance_annotation_in_variant_type_variable_name4741 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _type_variable_name_in_variant_type_variable_name4746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_parameter_constraints_clause_in_type_parameter_constraints_clauses4767 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_type_parameter_constraints_clauses4772 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _type_parameter_constraints_clause_in_type_parameter_constraints_clauses4776 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _194_in_type_parameter_constraints_clause4786 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _type_variable_name_in_type_parameter_constraints_clause4790 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_type_parameter_constraints_clause4794 = new BitSet(new ulong[]{0x8000000UL,0x4520823680000000UL,0x408418852559A090UL,0x14UL});
		public static readonly BitSet _type_parameter_constraint_list_in_type_parameter_constraints_clause4798 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_type_parameter_constraint_list4861 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_type_parameter_constraint_list4872 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _secondary_constraint_list_in_type_parameter_constraint_list4876 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_type_parameter_constraint_list4883 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _constructor_constraint_in_type_parameter_constraint_list4887 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _secondary_constraint_list_in_type_parameter_constraint_list4894 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_type_parameter_constraint_list4899 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _constructor_constraint_in_type_parameter_constraint_list4903 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constructor_constraint_in_type_parameter_constraint_list4910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _secondary_constraint_in_secondary_constraint_list4922 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_secondary_constraint_list4925 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _secondary_constraint_in_secondary_constraint_list4927 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _type_name_in_secondary_constraint4937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_type_variable_name4947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_constructor_constraint4955 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_constructor_constraint4959 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_constructor_constraint4963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_return_type4971 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _192_in_return_type4977 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formal_parameter_in_formal_parameter_list4984 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_formal_parameter_list4987 = new BitSet(new ulong[]{0x8000000UL,0x45A426B688000000UL,0x66923AC56D9DA492UL,0x15UL});
		public static readonly BitSet _formal_parameter_in_formal_parameter_list4989 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _attributes_in_formal_parameter4999 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66923AC56D9DA492UL,0x15UL});
		public static readonly BitSet _fixed_parameter_in_formal_parameter5005 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_array_in_formal_parameter5009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _95_in_formal_parameter5016 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fixed_parameter_in_fixed_parameters5024 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_fixed_parameters5029 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66923AC52D9DA492UL,0x15UL});
		public static readonly BitSet _fixed_parameter_in_fixed_parameters5033 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _parameter_modifier_in_fixed_parameter5044 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_fixed_parameter5049 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_fixed_parameter5053 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _default_argument_in_fixed_parameter5057 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_default_argument5067 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_default_argument5069 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_parameter_array5092 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_parameter_array5096 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_parameter_array5100 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _139_in_interface_declaration5110 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_interface_declaration5114 = new BitSet(new ulong[]{0x0UL,0x28000UL,0x0UL,0x24UL});
		public static readonly BitSet _variant_generic_parameter_list_in_interface_declaration5118 = new BitSet(new ulong[]{0x0UL,0x8000UL,0x0UL,0x24UL});
		public static readonly BitSet _interface_base_in_interface_declaration5127 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x24UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_interface_declaration5132 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _interface_body_in_interface_declaration5137 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _SEMI_in_interface_declaration5141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_interface_modifiers5151 = new BitSet(new ulong[]{0x2UL,0x2000000100000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _79_in_interface_base5164 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _interface_type_list_in_interface_base5166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_interface_body5174 = new BitSet(new ulong[]{0x8000000UL,0x6DA426B788000000UL,0xF6833EBF35DDB492UL,0x217UL});
		public static readonly BitSet _interface_member_declarations_in_interface_body5178 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_interface_body5183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_member_declaration_in_interface_member_declarations5191 = new BitSet(new ulong[]{0x8000002UL,0x6DA426B788000000UL,0xF6833EBF35DDB492UL,0x17UL});
		public static readonly BitSet _attributes_in_interface_member_declaration5200 = new BitSet(new ulong[]{0x8000000UL,0x6DA426B780000000UL,0xF6833EBF35DDB492UL,0x17UL});
		public static readonly BitSet _modifiers_in_interface_member_declaration5206 = new BitSet(new ulong[]{0x8000000UL,0x4DA426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _192_in_interface_member_declaration5212 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _interface_method_declaration_in_interface_member_declaration5216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_event_declaration_in_interface_member_declaration5222 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_interface_member_declaration5228 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x409018852519A090UL,0x14UL});
		public static readonly BitSet _interface_method_declaration_in_interface_member_declaration5244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_property_declaration_in_interface_member_declaration5269 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_indexer_declaration_in_interface_member_declaration5279 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_interface_property_declaration5296 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_interface_property_declaration5300 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x100000000020UL});
		public static readonly BitSet _interface_accessor_declarations_in_interface_property_declaration5304 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_interface_property_declaration5308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_interface_method_declaration5316 = new BitSet(new ulong[]{0x0UL,0x20010UL});
		public static readonly BitSet _generic_argument_list_in_interface_method_declaration5320 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_interface_method_declaration5328 = new BitSet(new ulong[]{0x800008000000UL,0x45A426B688000000UL,0x66923AC56D9DA492UL,0x15UL});
		public static readonly BitSet _formal_parameter_list_in_interface_method_declaration5332 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_interface_method_declaration5337 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_interface_method_declaration5341 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_interface_method_declaration5346 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_interface_event_declaration5357 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_interface_event_declaration5361 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_interface_event_declaration5365 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_interface_event_declaration5369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_interface_indexer_declaration5381 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_interface_indexer_declaration5385 = new BitSet(new ulong[]{0x8000000UL,0x45A426B688000000UL,0x66923AC56D9DA492UL,0x15UL});
		public static readonly BitSet _formal_parameter_list_in_interface_indexer_declaration5389 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_interface_indexer_declaration5393 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_interface_indexer_declaration5397 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x100000000020UL});
		public static readonly BitSet _interface_accessor_declarations_in_interface_indexer_declaration5401 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_interface_indexer_declaration5405 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attributes_in_interface_accessor_declarations5413 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000020UL});
		public static readonly BitSet _interface_get_accessor_declaration_in_interface_accessor_declarations5422 = new BitSet(new ulong[]{0x2UL,0x8000000UL,0x100000000000UL});
		public static readonly BitSet _attributes_in_interface_accessor_declarations5426 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _interface_set_accessor_declaration_in_interface_accessor_declarations5431 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_set_accessor_declaration_in_interface_accessor_declarations5438 = new BitSet(new ulong[]{0x2UL,0x8000000UL,0x20UL});
		public static readonly BitSet _attributes_in_interface_accessor_declarations5442 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20UL});
		public static readonly BitSet _interface_get_accessor_declaration_in_interface_accessor_declarations5447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _133_in_interface_get_accessor_declaration5457 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_interface_get_accessor_declaration5461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_interface_set_accessor_declaration5471 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_interface_set_accessor_declaration5475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_method_modifiers5485 = new BitSet(new ulong[]{0x2UL,0x2000000100000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _178_in_struct_declaration5497 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _type_or_generic_in_struct_declaration5501 = new BitSet(new ulong[]{0x0UL,0x8000UL,0x0UL,0x24UL});
		public static readonly BitSet _struct_interfaces_in_struct_declaration5505 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x24UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_struct_declaration5510 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _struct_body_in_struct_declaration5515 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _SEMI_in_struct_declaration5519 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_modifier_in_struct_modifiers5528 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000001A00401000UL});
		public static readonly BitSet _79_in_struct_interfaces5565 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _interface_type_list_in_struct_interfaces5569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_struct_body5576 = new BitSet(new ulong[]{0x8020000UL,0x7DB5A6B788000000UL,0xF6873EBFB5DDBD92UL,0x217UL});
		public static readonly BitSet _struct_member_declarations_in_struct_body5580 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_struct_body5585 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_member_declaration_in_struct_member_declarations5592 = new BitSet(new ulong[]{0x8020002UL,0x7DB5A6B788000000UL,0xF6873EBFB5DDBD92UL,0x17UL});
		public static readonly BitSet _attributes_in_struct_member_declaration5601 = new BitSet(new ulong[]{0x8020000UL,0x7DB5A6B780000000UL,0xF6873EBFB5DDBD92UL,0x17UL});
		public static readonly BitSet _modifiers_in_struct_member_declaration5608 = new BitSet(new ulong[]{0x8020000UL,0x5DB5A6B680000000UL,0x66863A85A59DAD92UL,0x15UL});
		public static readonly BitSet _112_in_struct_member_declaration5614 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_struct_member_declaration5618 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _constant_declarators_in_struct_member_declaration5622 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_struct_member_declaration5626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _event_declaration_in_struct_member_declaration5631 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_struct_member_declaration5638 = new BitSet(new ulong[]{0x42900180C100020UL,0x45A4A6B680000000UL,0x66863A85259DAC92UL,0x14UL});
		public static readonly BitSet _method_declaration_in_struct_member_declaration5641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_declaration_in_struct_member_declaration5652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_declaration_in_struct_member_declaration5663 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_struct_member_declaration5674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_declaration_in_struct_member_declaration5681 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_declaration_in_struct_member_declaration5687 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _192_in_struct_member_declaration5694 = new BitSet(new ulong[]{0x42900180C100020UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x14UL});
		public static readonly BitSet _method_declaration_in_struct_member_declaration5698 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_struct_member_declaration5703 = new BitSet(new ulong[]{0x42900180C100020UL,0x45A426B680000000UL,0x66923A85279DA492UL,0x14UL});
		public static readonly BitSet _method_declaration_in_struct_member_declaration5717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _property_declaration_in_struct_member_declaration5736 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_struct_member_declaration5759 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _DOT_in_struct_member_declaration5761 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _indexer_declaration_in_struct_member_declaration5763 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_declaration_in_struct_member_declaration5772 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _field_declaration_in_struct_member_declaration5785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operator_declaration_in_struct_member_declaration5803 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_struct_member_declaration5821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_declaration_in_struct_member_declaration5827 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _delegate_declaration_in_struct_member_declaration5834 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_operator_declaration_in_struct_member_declaration5840 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constructor_declaration_in_struct_member_declaration5845 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_declarator_in_indexer_declaration5862 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_indexer_declaration5866 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x101A00001020UL});
		public static readonly BitSet _accessor_declarations_in_indexer_declaration5870 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_indexer_declaration5874 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_indexer_declarator5884 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_indexer_declarator5888 = new BitSet(new ulong[]{0x8000000UL,0x45A426B688000000UL,0x66923AC56D9DA492UL,0x15UL});
		public static readonly BitSet _formal_parameter_list_in_indexer_declarator5892 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_indexer_declarator5896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operator_declarator_in_operator_declaration5907 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _operator_body_in_operator_declaration5911 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _153_in_operator_declarator5919 = new BitSet(new ulong[]{0xE020000400300000UL,0x215629A4UL,0x0UL,0x440UL});
		public static readonly BitSet _set_in_operator_declarator5927 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_operator_declarator5937 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_operator_declarator5941 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_operator_declarator5945 = new BitSet(new ulong[]{0x800000000000UL,0x400UL});
		public static readonly BitSet _binary_operator_declarator_in_operator_declarator5948 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_operator_declarator_in_operator_declarator5952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _overloadable_unary_operator_in_operator_declarator5959 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _unary_operator_declarator_in_operator_declarator5963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _overloadable_binary_operator_in_operator_declarator5969 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _binary_operator_declarator_in_operator_declarator5973 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RPAREN_in_unary_operator_declarator5985 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _74_in_binary_operator_declarator6028 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_binary_operator_declarator6032 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_binary_operator_declarator6036 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_binary_operator_declarator6040 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _69_in_overloadable_binary_operator6051 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _77_in_overloadable_binary_operator6055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_overloadable_binary_operator6059 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_overloadable_binary_operator6063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _198_in_overloadable_binary_operator6067 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_overloadable_binary_operator6071 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_overloadable_binary_operator6075 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_overloadable_binary_operator6079 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _GT_in_overloadable_binary_operator6081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_overloadable_binary_operator6085 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _62_in_overloadable_binary_operator6089 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_overloadable_binary_operator6093 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_overloadable_binary_operator6097 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_overloadable_binary_operator6101 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_overloadable_binary_operator6105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_operator_declarator_in_conversion_operator_declaration6115 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _operator_body_in_conversion_operator_declaration6119 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_conversion_operator_declarator6127 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000UL});
		public static readonly BitSet _153_in_conversion_operator_declarator6136 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_conversion_operator_declarator6140 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_conversion_operator_declarator6144 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_conversion_operator_declarator6148 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_conversion_operator_declarator6152 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_conversion_operator_declarator6156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_operator_body6164 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constructor_declarator_in_constructor_declaration6174 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _constructor_body_in_constructor_declaration6178 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_constructor_declarator6186 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_constructor_declarator6190 = new BitSet(new ulong[]{0x800008000000UL,0x45A426B688000000UL,0x66923AC56D9DA492UL,0x15UL});
		public static readonly BitSet _formal_parameter_list_in_constructor_declarator6194 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_constructor_declarator6199 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _constructor_initializer_in_constructor_declarator6203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_constructor_initializer6212 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x10000000000000UL});
		public static readonly BitSet _set_in_constructor_initializer6216 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_constructor_initializer6226 = new BitSet(new ulong[]{0x2429801C0C100020UL,0x45BC66F6800009B4UL,0x6F927AC52DDDA492UL,0x414UL});
		public static readonly BitSet _argument_list_in_constructor_initializer6230 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_constructor_initializer6235 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_constructor_body6243 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _202_in_destructor_declaration6259 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_destructor_declaration6262 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_destructor_declaration6266 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_destructor_declaration6270 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _destructor_body_in_destructor_declaration6275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_destructor_body6283 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _invocation_start_in_invocation_expression6293 = new BitSet(new ulong[]{0x200000000400UL,0x8000010UL});
		public static readonly BitSet _arguments_in_invocation_expression6315 = new BitSet(new ulong[]{0x200000000400UL,0x8000000UL});
		public static readonly BitSet _invocation_part_in_invocation_expression6319 = new BitSet(new ulong[]{0x200000000400UL,0x8000010UL});
		public static readonly BitSet _invocation_part_in_invocation_expression6330 = new BitSet(new ulong[]{0x200000000400UL,0x8000010UL});
		public static readonly BitSet _arguments_in_invocation_expression6336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _predefined_type_in_invocation_start6344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_invocation_start6361 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _generic_argument_list_in_invocation_start6365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_invocation_start6370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_invocation_start6376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_invocation_start6381 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_invocation_start6386 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_invocation_start6390 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeof_expression_in_invocation_start6397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _access_identifier_in_invocation_part6420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _brackets_in_invocation_part6425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_statement_in_statement6442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _labeled_statement_in_statement6457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _embedded_statement_in_statement6462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_embedded_statement6472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selection_statement_in_embedded_statement6477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _iteration_statement_in_embedded_statement6483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _jump_statement_in_embedded_statement6489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _try_statement_in_embedded_statement6496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _checked_statement_in_embedded_statement6501 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unchecked_statement_in_embedded_statement6506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lock_statement_in_embedded_statement6511 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _using_statement_in_embedded_statement6516 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _yield_statement_in_embedded_statement6522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unsafe_statement_in_embedded_statement6528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fixed_statement_in_embedded_statement6533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_statement_in_embedded_statement6538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_fixed_statement6548 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_fixed_statement6552 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _pointer_type_in_fixed_statement6556 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _fixed_pointer_declarators_in_fixed_statement6558 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_fixed_statement6562 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_fixed_statement6566 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fixed_pointer_declarator_in_fixed_pointer_declarators6574 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_fixed_pointer_declarators6579 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _fixed_pointer_declarator_in_fixed_pointer_declarators6583 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _identifier_in_fixed_pointer_declarator6593 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_fixed_pointer_declarator6597 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _fixed_pointer_initializer_in_fixed_pointer_declarator6601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_fixed_pointer_initializer6611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _188_in_unsafe_statement6618 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_unsafe_statement6622 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_labeled_statement6629 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_labeled_statement6633 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FF67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43DUL});
		public static readonly BitSet _statement_in_labeled_statement6637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_declaration_in_declaration_statement6646 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _local_constant_declaration_in_declaration_statement6652 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_declaration_statement6655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_type_in_local_variable_declaration6663 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _local_variable_declarators_in_local_variable_declaration6667 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _190_in_local_variable_type6681 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_local_variable_type6692 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_local_variable_type6697 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_declarator_in_local_variable_declarators6705 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_local_variable_declarators6708 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _local_variable_declarator_in_local_variable_declarators6710 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _identifier_in_local_variable_declarator6720 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_local_variable_declarator6723 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F92FA8525DDA492UL,0x434UL});
		public static readonly BitSet _local_variable_initializer_in_local_variable_declarator6727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_local_variable_initializer6738 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _array_initializer_in_local_variable_initializer6743 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stackalloc_initializer_in_local_variable_initializer6749 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _175_in_stackalloc_initializer6756 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _unmanaged_type_in_stackalloc_initializer6760 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_stackalloc_initializer6764 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_stackalloc_initializer6768 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_stackalloc_initializer6772 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_local_constant_declaration6780 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_local_constant_declaration6784 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _constant_declarators_in_local_constant_declaration6788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_statement6796 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_expression_statement6800 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_statement_expression6810 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _if_statement_in_selection_statement6819 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switch_statement_in_selection_statement6824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_if_statement6834 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_if_statement6838 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _boolean_expression_in_if_statement6842 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_if_statement6846 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_if_statement6850 = new BitSet(new ulong[]{0x2UL,0x200000000000000UL});
		public static readonly BitSet _else_statement_in_if_statement6859 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_else_statement6870 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_else_statement6874 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _179_in_switch_statement6882 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_switch_statement6886 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_switch_statement6890 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_switch_statement6894 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _switch_block_in_switch_statement6898 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_switch_block6906 = new BitSet(new ulong[]{0x0UL,0x8080000000000UL,0x0UL,0x200UL});
		public static readonly BitSet _switch_sections_in_switch_block6910 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_switch_block6915 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switch_section_in_switch_sections6923 = new BitSet(new ulong[]{0x2UL,0x8080000000000UL});
		public static readonly BitSet _switch_labels_in_switch_section6932 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FF67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43DUL});
		public static readonly BitSet _statement_list_in_switch_section6936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switch_label_in_switch_labels6944 = new BitSet(new ulong[]{0x2UL,0x8080000000000UL});
		public static readonly BitSet _107_in_switch_label6954 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _constant_expression_in_switch_label6958 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_switch_label6962 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_switch_label6969 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_switch_label6973 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _while_statement_in_iteration_statement6982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _do_statement_in_iteration_statement6987 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_statement_in_iteration_statement6992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _foreach_statement_in_iteration_statement6997 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _195_in_while_statement7005 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_while_statement7009 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _boolean_expression_in_while_statement7013 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_while_statement7017 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_while_statement7021 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_do_statement7029 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_do_statement7033 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x8UL});
		public static readonly BitSet _195_in_do_statement7037 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_do_statement7041 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _boolean_expression_in_do_statement7045 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_do_statement7049 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_do_statement7053 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_for_statement7061 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_for_statement7065 = new BitSet(new ulong[]{0x242D001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x415UL});
		public static readonly BitSet _for_initializer_in_for_statement7069 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_for_statement7074 = new BitSet(new ulong[]{0x242D001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _for_condition_in_for_statement7078 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_for_statement7083 = new BitSet(new ulong[]{0x2429801C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _for_iterator_in_for_statement7087 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_for_statement7092 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_for_statement7096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_declaration_in_for_initializer7110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_expression_list_in_for_initializer7115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _boolean_expression_in_for_condition7125 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_expression_list_in_for_iterator7133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_expression_in_statement_expression_list7141 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_statement_expression_list7144 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _statement_expression_in_statement_expression_list7146 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _131_in_foreach_statement7156 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_foreach_statement7160 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _local_variable_type_in_foreach_statement7164 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_foreach_statement7168 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_foreach_statement7172 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_foreach_statement7176 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_foreach_statement7180 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_foreach_statement7184 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _break_statement_in_jump_statement7192 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _continue_statement_in_jump_statement7197 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _goto_statement_in_jump_statement7202 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _return_statement_in_jump_statement7207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _throw_statement_in_jump_statement7212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_break_statement7220 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_break_statement7224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_continue_statement7232 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_continue_statement7236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_goto_statement7244 = new BitSet(new ulong[]{0x8000000UL,0x45280A3680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_goto_statement7250 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _107_in_goto_statement7258 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _constant_expression_in_goto_statement7262 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _115_in_goto_statement7270 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_goto_statement7275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_return_statement7283 = new BitSet(new ulong[]{0x242D001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_return_statement7287 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_return_statement7292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _181_in_throw_statement7300 = new BitSet(new ulong[]{0x242D001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_throw_statement7304 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_throw_statement7309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _182_in_try_statement7322 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_try_statement7326 = new BitSet(new ulong[]{0x0UL,0x8000100000000000UL});
		public static readonly BitSet _catch_clauses_in_try_statement7332 = new BitSet(new ulong[]{0x2UL,0x8000000000000000UL});
		public static readonly BitSet _finally_clause_in_try_statement7336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _finally_clause_in_try_statement7348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_catch_clauses7357 = new BitSet(new ulong[]{0x4000000000000UL,0x10UL,0x0UL,0x20UL});
		public static readonly BitSet _specific_catch_clauses_in_catch_clauses7362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _general_catch_clause_in_catch_clauses7366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _specific_catch_clause_in_specific_catch_clauses7375 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _108_in_specific_catch_clauses7380 = new BitSet(new ulong[]{0x4000000000000UL,0x10UL,0x0UL,0x20UL});
		public static readonly BitSet _specific_catch_clause_in_specific_catch_clauses7385 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _general_catch_clause_in_specific_catch_clauses7389 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _68_in_specific_catch_clause7399 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _class_type_in_specific_catch_clause7403 = new BitSet(new ulong[]{0x800008000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_specific_catch_clause7407 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_specific_catch_clause7412 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_specific_catch_clause7416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_general_catch_clause7424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_finally_clause7432 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_finally_clause7436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_checked_statement7444 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_checked_statement7448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _187_in_unchecked_statement7456 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_unchecked_statement7460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_lock_statement7468 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_lock_statement7472 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_lock_statement7475 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_lock_statement7479 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_lock_statement7483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USING_in_using_statement7491 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_using_statement7495 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x415UL});
		public static readonly BitSet _resource_acquisition_in_using_statement7500 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_using_statement7504 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_using_statement7509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_declaration_in_resource_acquisition7523 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_resource_acquisition7528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _196_in_yield_statement7536 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x10000000000UL});
		public static readonly BitSet _168_in_yield_statement7541 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_yield_statement7545 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_yield_statement7549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_yield_statement7564 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_yield_statement7568 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_in_assignment_list10264 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_assignment_list10266 = new BitSet(new ulong[]{0x2429001C0C100022UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _attributes_in_field_declarations10277 = new BitSet(new ulong[]{0x8000000UL,0x65A426B780000000UL,0xF6833EBF35DDB492UL,0x17UL});
		public static readonly BitSet _modifiers_in_field_declarations10282 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_field_declarations10287 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _field_declaration_in_field_declarations10291 = new BitSet(new ulong[]{0x8000002UL,0x65A426B788000000UL,0xF6833EBF35DDB492UL,0x17UL});
		public static readonly BitSet _attributes_in_property_declaration_list10302 = new BitSet(new ulong[]{0x8000000UL,0x65A426B780000000UL,0xF6833EBF35DDB492UL,0x17UL});
		public static readonly BitSet _modifiers_in_property_declaration_list10307 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_property_declaration_list10312 = new BitSet(new ulong[]{0x42900180C100020UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x14UL});
		public static readonly BitSet _property_declaration_in_property_declaration_list10316 = new BitSet(new ulong[]{0x8000002UL,0x65A426B788000000UL,0xF6833EBF35DDB492UL,0x17UL});
		public static readonly BitSet _constant_declaration_in_constant_declarations10326 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _literal_in_literals10334 = new BitSet(new ulong[]{0x429001804100022UL});
		public static readonly BitSet _attributes_in_delegate_declaration_list10344 = new BitSet(new ulong[]{0x0UL,0x2010000100000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _modifiers_in_delegate_declaration_list10349 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _delegate_declaration_in_delegate_declaration_list10354 = new BitSet(new ulong[]{0x2UL,0x2010000108000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _local_variable_declaration_in_local_variable_declaration_list10365 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_local_variable_declaration_list10367 = new BitSet(new ulong[]{0x8000002UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _local_variable_initializer_in_local_variable_initializer_list10378 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_local_variable_initializer_list10380 = new BitSet(new ulong[]{0x2429001C0C100022UL,0x45BC66F6800009B4UL,0x6F92FA8525DDA492UL,0x434UL});
		public static readonly BitSet _expression_in_expression_list_test10391 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_expression_list_test10393 = new BitSet(new ulong[]{0x2429001C0C100022UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_unary_expression_list10404 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_unary_expression_list10406 = new BitSet(new ulong[]{0x2429001C0C100022UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _invocation_expression_in_invocation_expression_list10417 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_invocation_expression_list10419 = new BitSet(new ulong[]{0x8000002UL,0x45A426F680000000UL,0x67923A85259DA492UL,0x14UL});
		public static readonly BitSet _primary_expression_in_primary_expression_list10430 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_primary_expression_list10432 = new BitSet(new ulong[]{0x42900180C100022UL,0x45BC66F680000010UL,0x6F927A8525DDA492UL,0x14UL});
		public static readonly BitSet _non_assignment_expression_in_non_assignment_expression_list10443 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_non_assignment_expression_list10445 = new BitSet(new ulong[]{0x2429001C0C100022UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _modifiers_in_method_declarations10456 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _192_in_method_declarations10460 = new BitSet(new ulong[]{0x42900180C100020UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x14UL});
		public static readonly BitSet _type_in_method_declarations10464 = new BitSet(new ulong[]{0x42900180C100020UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x14UL});
		public static readonly BitSet _method_declaration_in_method_declarations10467 = new BitSet(new ulong[]{0x8000002UL,0x65A426B780000000UL,0xF6833EBF35DDB492UL,0x17UL});
		public static readonly BitSet _159_in_synpred1_cs269 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred2_cs533 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_synpred2_cs537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred3_cs552 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_synpred3_cs556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred4_cs571 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _DOT_in_synpred4_cs575 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _180_in_synpred4_cs579 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_synpred5_cs699 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _brackets_in_synpred5_cs704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_synpred6_cs724 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _brackets_in_synpred6_cs728 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _object_creation_expression_in_synpred7_cs764 = new BitSet(new ulong[]{0x200000000400UL,0x8000000UL});
		public static readonly BitSet _set_in_synpred7_cs768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _delegate_creation_expression_in_synpred8_cs812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_synpred9_cs937 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_synpred9_cs942 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_synpred10_cs1194 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_synpred10_cs1198 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_synpred10_cs1202 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _array_creation_expression_in_synpred11_cs1444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_synpred12_cs1524 = new BitSet(new ulong[]{0x200000000400UL,0x8000000UL});
		public static readonly BitSet _set_in_synpred12_cs1528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unbound_type_name_in_synpred13_cs2054 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _generic_dimension_specifier_in_synpred14_cs2112 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _DOT_in_synpred14_cs2116 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_synpred15_cs2248 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_synpred15_cs2252 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_synpred16_cs2297 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_synpred16_cs2302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _predefined_type_in_synpred17_cs2395 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _type_name_in_synpred17_cs2399 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _rank_specifiers_in_synpred17_cs2403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _predefined_type_in_synpred18_cs2430 = new BitSet(new ulong[]{0x0UL,0x2000020UL});
		public static readonly BitSet _type_name_in_synpred18_cs2434 = new BitSet(new ulong[]{0x0UL,0x2000020UL});
		public static readonly BitSet _69_in_synpred18_cs2439 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _89_in_synpred18_cs2444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_synpred19_cs2626 = new BitSet(new ulong[]{0x200000UL,0x40285249UL,0x0UL,0x80UL});
		public static readonly BitSet _assignment_operator_in_synpred19_cs2630 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cast_expression_in_synpred20_cs2688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymous_function_signature_in_synpred21_cs2904 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_synpred21_cs2908 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_expression_in_synpred22_cs2919 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_synpred23_cs3342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _74_in_synpred24_cs3844 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_synpred24_cs3848 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_synpred24_cs3852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred25_cs4370 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_synpred25_cs4374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred26_cs5235 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_synpred26_cs5239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred27_cs5260 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_synpred27_cs5264 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred28_cs5708 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_synpred28_cs5712 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred29_cs5727 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_synpred29_cs5731 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred30_cs5746 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _DOT_in_synpred30_cs5750 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _180_in_synpred30_cs5754 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_synpred31_cs6300 = new BitSet(new ulong[]{0x200000000400UL,0x8000000UL});
		public static readonly BitSet _set_in_synpred31_cs6304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_synpred32_cs6351 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_synpred32_cs6356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_statement_in_synpred33_cs6437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_synpred34_cs6448 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_synpred34_cs6452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _190_in_synpred35_cs6676 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_synpred36_cs6687 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_synpred37_cs6854 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_declaration_in_synpred38_cs7105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_declaration_in_synpred39_cs7518 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
