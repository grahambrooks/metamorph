/** \file
 *  This C++ header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : CSharp.g
 *     -                            On : 2012-09-04 22:52:43
 *     -                for the parser : CSharpParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
 * The parser 
CSharpParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram. 
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_CSharpParser_H
#define _CSharpParser_H
/* =============================================================================
 * Standard antlr3 C++ runtime definitions
 */
#include    <antlr3.hpp>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */


            #include "CSharpLexer.hpp"
        



#ifdef	WIN32
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

	namespace  CodeR  {


typedef CSharpParserTraits CSharpParserImplTraits;

 struct synpred1_CSharp {}; 
 struct synpred2_CSharp {}; 
 struct synpred3_CSharp {}; 
 struct synpred4_CSharp {}; 
 struct synpred5_CSharp {}; 
 struct synpred6_CSharp {}; 
 struct synpred7_CSharp {}; 
 struct synpred8_CSharp {}; 
 struct synpred9_CSharp {}; 
 struct synpred10_CSharp {}; 
 struct synpred11_CSharp {}; 
 struct synpred12_CSharp {}; 
 struct synpred13_CSharp {}; 
 struct synpred14_CSharp {}; 
 struct synpred15_CSharp {}; 
 struct synpred16_CSharp {}; 
 struct synpred17_CSharp {}; 
 struct synpred18_CSharp {}; 
 struct synpred19_CSharp {}; 
 struct synpred20_CSharp {}; 
 struct synpred21_CSharp {}; 
 struct synpred22_CSharp {}; 
 struct synpred23_CSharp {}; 
 struct synpred24_CSharp {}; 
 struct synpred25_CSharp {}; 
 struct synpred26_CSharp {}; 
 struct synpred27_CSharp {}; 
 struct synpred28_CSharp {}; 
 struct synpred29_CSharp {}; 
 struct synpred30_CSharp {}; 
 struct synpred31_CSharp {}; 
 struct synpred32_CSharp {}; 
 struct synpred33_CSharp {}; 
 struct synpred34_CSharp {}; 
 struct synpred35_CSharp {}; 
 struct synpred36_CSharp {}; 
 struct synpred37_CSharp {}; 
 struct synpred38_CSharp {}; 
 struct synpred39_CSharp {}; 

struct CSharpParser_compilation_unit_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_compilation_unit_return()
    {
    }

    CSharpParser_compilation_unit_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_compilation_unit_return( const CSharpParser_compilation_unit_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_compilation_unit_return&
    operator=( const CSharpParser_compilation_unit_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_namespace_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_namespace_declaration_return()
    {
    }

    CSharpParser_namespace_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_namespace_declaration_return( const CSharpParser_namespace_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_namespace_declaration_return&
    operator=( const CSharpParser_namespace_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_namespace_block_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_namespace_block_return()
    {
    }

    CSharpParser_namespace_block_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_namespace_block_return( const CSharpParser_namespace_block_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_namespace_block_return&
    operator=( const CSharpParser_namespace_block_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_namespace_body_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_namespace_body_return()
    {
    }

    CSharpParser_namespace_body_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_namespace_body_return( const CSharpParser_namespace_body_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_namespace_body_return&
    operator=( const CSharpParser_namespace_body_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_extern_alias_directives_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_extern_alias_directives_return()
    {
    }

    CSharpParser_extern_alias_directives_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_extern_alias_directives_return( const CSharpParser_extern_alias_directives_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_extern_alias_directives_return&
    operator=( const CSharpParser_extern_alias_directives_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_extern_alias_directive_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_extern_alias_directive_return()
    {
    }

    CSharpParser_extern_alias_directive_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_extern_alias_directive_return( const CSharpParser_extern_alias_directive_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_extern_alias_directive_return&
    operator=( const CSharpParser_extern_alias_directive_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_using_directives_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_using_directives_return()
    {
    }

    CSharpParser_using_directives_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_using_directives_return( const CSharpParser_using_directives_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_using_directives_return&
    operator=( const CSharpParser_using_directives_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_using_directive_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_using_directive_return()
    {
    }

    CSharpParser_using_directive_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_using_directive_return( const CSharpParser_using_directive_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_using_directive_return&
    operator=( const CSharpParser_using_directive_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_using_alias_directive_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_using_alias_directive_return()
    {
    }

    CSharpParser_using_alias_directive_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_using_alias_directive_return( const CSharpParser_using_alias_directive_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_using_alias_directive_return&
    operator=( const CSharpParser_using_alias_directive_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_using_namespace_directive_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_using_namespace_directive_return()
    {
    }

    CSharpParser_using_namespace_directive_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_using_namespace_directive_return( const CSharpParser_using_namespace_directive_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_using_namespace_directive_return&
    operator=( const CSharpParser_using_namespace_directive_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_namespace_member_declarations_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_namespace_member_declarations_return()
    {
    }

    CSharpParser_namespace_member_declarations_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_namespace_member_declarations_return( const CSharpParser_namespace_member_declarations_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_namespace_member_declarations_return&
    operator=( const CSharpParser_namespace_member_declarations_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_namespace_member_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_namespace_member_declaration_return()
    {
    }

    CSharpParser_namespace_member_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_namespace_member_declaration_return( const CSharpParser_namespace_member_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_namespace_member_declaration_return&
    operator=( const CSharpParser_namespace_member_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_type_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_type_declaration_return()
    {
    }

    CSharpParser_type_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_type_declaration_return( const CSharpParser_type_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_type_declaration_return&
    operator=( const CSharpParser_type_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_qualified_identifier_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_qualified_identifier_return()
    {
    }

    CSharpParser_qualified_identifier_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_qualified_identifier_return( const CSharpParser_qualified_identifier_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_qualified_identifier_return&
    operator=( const CSharpParser_qualified_identifier_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_namespace_name_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_namespace_name_return()
    {
    }

    CSharpParser_namespace_name_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_namespace_name_return( const CSharpParser_namespace_name_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_namespace_name_return&
    operator=( const CSharpParser_namespace_name_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_modifiers_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_modifiers_return()
    {
    }

    CSharpParser_modifiers_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_modifiers_return( const CSharpParser_modifiers_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_modifiers_return&
    operator=( const CSharpParser_modifiers_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_modifier_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_modifier_return()
    {
    }

    CSharpParser_modifier_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_modifier_return( const CSharpParser_modifier_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_modifier_return&
    operator=( const CSharpParser_modifier_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_class_member_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_class_member_declaration_return()
    {
    }

    CSharpParser_class_member_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_class_member_declaration_return( const CSharpParser_class_member_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_class_member_declaration_return&
    operator=( const CSharpParser_class_member_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_primary_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_primary_expression_return()
    {
    }

    CSharpParser_primary_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_primary_expression_return( const CSharpParser_primary_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_primary_expression_return&
    operator=( const CSharpParser_primary_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_primary_expression_start_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_primary_expression_start_return()
    {
    }

    CSharpParser_primary_expression_start_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_primary_expression_start_return( const CSharpParser_primary_expression_start_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_primary_expression_start_return&
    operator=( const CSharpParser_primary_expression_start_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_primary_expression_part_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_primary_expression_part_return()
    {
    }

    CSharpParser_primary_expression_part_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_primary_expression_part_return( const CSharpParser_primary_expression_part_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_primary_expression_part_return&
    operator=( const CSharpParser_primary_expression_part_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_access_identifier_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_access_identifier_return()
    {
    }

    CSharpParser_access_identifier_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_access_identifier_return( const CSharpParser_access_identifier_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_access_identifier_return&
    operator=( const CSharpParser_access_identifier_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_access_operator_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_access_operator_return()
    {
    }

    CSharpParser_access_operator_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_access_operator_return( const CSharpParser_access_operator_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_access_operator_return&
    operator=( const CSharpParser_access_operator_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_brackets_or_arguments_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_brackets_or_arguments_return()
    {
    }

    CSharpParser_brackets_or_arguments_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_brackets_or_arguments_return( const CSharpParser_brackets_or_arguments_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_brackets_or_arguments_return&
    operator=( const CSharpParser_brackets_or_arguments_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_brackets_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_brackets_return()
    {
    }

    CSharpParser_brackets_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_brackets_return( const CSharpParser_brackets_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_brackets_return&
    operator=( const CSharpParser_brackets_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_paren_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_paren_expression_return()
    {
    }

    CSharpParser_paren_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_paren_expression_return( const CSharpParser_paren_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_paren_expression_return&
    operator=( const CSharpParser_paren_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_arguments_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_arguments_return()
    {
    }

    CSharpParser_arguments_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_arguments_return( const CSharpParser_arguments_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_arguments_return&
    operator=( const CSharpParser_arguments_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_argument_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_argument_list_return()
    {
    }

    CSharpParser_argument_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_argument_list_return( const CSharpParser_argument_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_argument_list_return&
    operator=( const CSharpParser_argument_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_argument_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_argument_return()
    {
    }

    CSharpParser_argument_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_argument_return( const CSharpParser_argument_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_argument_return&
    operator=( const CSharpParser_argument_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_argument_name_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_argument_name_return()
    {
    }

    CSharpParser_argument_name_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_argument_name_return( const CSharpParser_argument_name_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_argument_name_return&
    operator=( const CSharpParser_argument_name_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_argument_value_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_argument_value_return()
    {
    }

    CSharpParser_argument_value_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_argument_value_return( const CSharpParser_argument_value_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_argument_value_return&
    operator=( const CSharpParser_argument_value_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_ref_variable_reference_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_ref_variable_reference_return()
    {
    }

    CSharpParser_ref_variable_reference_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_ref_variable_reference_return( const CSharpParser_ref_variable_reference_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_ref_variable_reference_return&
    operator=( const CSharpParser_ref_variable_reference_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_variable_reference_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_variable_reference_return()
    {
    }

    CSharpParser_variable_reference_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_variable_reference_return( const CSharpParser_variable_reference_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_variable_reference_return&
    operator=( const CSharpParser_variable_reference_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_rank_specifiers_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_rank_specifiers_return()
    {
    }

    CSharpParser_rank_specifiers_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_rank_specifiers_return( const CSharpParser_rank_specifiers_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_rank_specifiers_return&
    operator=( const CSharpParser_rank_specifiers_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_rank_specifier_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_rank_specifier_return()
    {
    }

    CSharpParser_rank_specifier_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_rank_specifier_return( const CSharpParser_rank_specifier_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_rank_specifier_return&
    operator=( const CSharpParser_rank_specifier_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_dim_separators_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_dim_separators_return()
    {
    }

    CSharpParser_dim_separators_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_dim_separators_return( const CSharpParser_dim_separators_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_dim_separators_return&
    operator=( const CSharpParser_dim_separators_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_delegate_creation_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_delegate_creation_expression_return()
    {
    }

    CSharpParser_delegate_creation_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_delegate_creation_expression_return( const CSharpParser_delegate_creation_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_delegate_creation_expression_return&
    operator=( const CSharpParser_delegate_creation_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_anonymous_object_creation_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_anonymous_object_creation_expression_return()
    {
    }

    CSharpParser_anonymous_object_creation_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_anonymous_object_creation_expression_return( const CSharpParser_anonymous_object_creation_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_anonymous_object_creation_expression_return&
    operator=( const CSharpParser_anonymous_object_creation_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_anonymous_object_initializer_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_anonymous_object_initializer_return()
    {
    }

    CSharpParser_anonymous_object_initializer_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_anonymous_object_initializer_return( const CSharpParser_anonymous_object_initializer_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_anonymous_object_initializer_return&
    operator=( const CSharpParser_anonymous_object_initializer_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_member_declarator_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_member_declarator_list_return()
    {
    }

    CSharpParser_member_declarator_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_member_declarator_list_return( const CSharpParser_member_declarator_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_member_declarator_list_return&
    operator=( const CSharpParser_member_declarator_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_member_declarator_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_member_declarator_return()
    {
    }

    CSharpParser_member_declarator_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_member_declarator_return( const CSharpParser_member_declarator_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_member_declarator_return&
    operator=( const CSharpParser_member_declarator_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_primary_or_array_creation_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_primary_or_array_creation_expression_return()
    {
    }

    CSharpParser_primary_or_array_creation_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_primary_or_array_creation_expression_return( const CSharpParser_primary_or_array_creation_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_primary_or_array_creation_expression_return&
    operator=( const CSharpParser_primary_or_array_creation_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_array_creation_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_array_creation_expression_return()
    {
    }

    CSharpParser_array_creation_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_array_creation_expression_return( const CSharpParser_array_creation_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_array_creation_expression_return&
    operator=( const CSharpParser_array_creation_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_array_initializer_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_array_initializer_return()
    {
    }

    CSharpParser_array_initializer_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_array_initializer_return( const CSharpParser_array_initializer_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_array_initializer_return&
    operator=( const CSharpParser_array_initializer_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_variable_initializer_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_variable_initializer_list_return()
    {
    }

    CSharpParser_variable_initializer_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_variable_initializer_list_return( const CSharpParser_variable_initializer_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_variable_initializer_list_return&
    operator=( const CSharpParser_variable_initializer_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_variable_initializer_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_variable_initializer_return()
    {
    }

    CSharpParser_variable_initializer_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_variable_initializer_return( const CSharpParser_variable_initializer_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_variable_initializer_return&
    operator=( const CSharpParser_variable_initializer_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_sizeof_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_sizeof_expression_return()
    {
    }

    CSharpParser_sizeof_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_sizeof_expression_return( const CSharpParser_sizeof_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_sizeof_expression_return&
    operator=( const CSharpParser_sizeof_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_checked_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_checked_expression_return()
    {
    }

    CSharpParser_checked_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_checked_expression_return( const CSharpParser_checked_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_checked_expression_return&
    operator=( const CSharpParser_checked_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_unchecked_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_unchecked_expression_return()
    {
    }

    CSharpParser_unchecked_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_unchecked_expression_return( const CSharpParser_unchecked_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_unchecked_expression_return&
    operator=( const CSharpParser_unchecked_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_default_value_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_default_value_expression_return()
    {
    }

    CSharpParser_default_value_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_default_value_expression_return( const CSharpParser_default_value_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_default_value_expression_return&
    operator=( const CSharpParser_default_value_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_anonymous_method_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_anonymous_method_expression_return()
    {
    }

    CSharpParser_anonymous_method_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_anonymous_method_expression_return( const CSharpParser_anonymous_method_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_anonymous_method_expression_return&
    operator=( const CSharpParser_anonymous_method_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_explicit_anonymous_function_signature_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_explicit_anonymous_function_signature_return()
    {
    }

    CSharpParser_explicit_anonymous_function_signature_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_explicit_anonymous_function_signature_return( const CSharpParser_explicit_anonymous_function_signature_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_explicit_anonymous_function_signature_return&
    operator=( const CSharpParser_explicit_anonymous_function_signature_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_explicit_anonymous_function_parameter_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_explicit_anonymous_function_parameter_list_return()
    {
    }

    CSharpParser_explicit_anonymous_function_parameter_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_explicit_anonymous_function_parameter_list_return( const CSharpParser_explicit_anonymous_function_parameter_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_explicit_anonymous_function_parameter_list_return&
    operator=( const CSharpParser_explicit_anonymous_function_parameter_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_explicit_anonymous_function_parameter_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_explicit_anonymous_function_parameter_return()
    {
    }

    CSharpParser_explicit_anonymous_function_parameter_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_explicit_anonymous_function_parameter_return( const CSharpParser_explicit_anonymous_function_parameter_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_explicit_anonymous_function_parameter_return&
    operator=( const CSharpParser_explicit_anonymous_function_parameter_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_anonymous_function_parameter_modifier_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_anonymous_function_parameter_modifier_return()
    {
    }

    CSharpParser_anonymous_function_parameter_modifier_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_anonymous_function_parameter_modifier_return( const CSharpParser_anonymous_function_parameter_modifier_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_anonymous_function_parameter_modifier_return&
    operator=( const CSharpParser_anonymous_function_parameter_modifier_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_object_creation_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_object_creation_expression_return()
    {
    }

    CSharpParser_object_creation_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_object_creation_expression_return( const CSharpParser_object_creation_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_object_creation_expression_return&
    operator=( const CSharpParser_object_creation_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_object_or_collection_initializer_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_object_or_collection_initializer_return()
    {
    }

    CSharpParser_object_or_collection_initializer_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_object_or_collection_initializer_return( const CSharpParser_object_or_collection_initializer_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_object_or_collection_initializer_return&
    operator=( const CSharpParser_object_or_collection_initializer_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_collection_initializer_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_collection_initializer_return()
    {
    }

    CSharpParser_collection_initializer_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_collection_initializer_return( const CSharpParser_collection_initializer_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_collection_initializer_return&
    operator=( const CSharpParser_collection_initializer_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_element_initializer_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_element_initializer_list_return()
    {
    }

    CSharpParser_element_initializer_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_element_initializer_list_return( const CSharpParser_element_initializer_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_element_initializer_list_return&
    operator=( const CSharpParser_element_initializer_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_element_initializer_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_element_initializer_return()
    {
    }

    CSharpParser_element_initializer_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_element_initializer_return( const CSharpParser_element_initializer_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_element_initializer_return&
    operator=( const CSharpParser_element_initializer_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_object_initializer_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_object_initializer_return()
    {
    }

    CSharpParser_object_initializer_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_object_initializer_return( const CSharpParser_object_initializer_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_object_initializer_return&
    operator=( const CSharpParser_object_initializer_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_member_initializer_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_member_initializer_list_return()
    {
    }

    CSharpParser_member_initializer_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_member_initializer_list_return( const CSharpParser_member_initializer_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_member_initializer_list_return&
    operator=( const CSharpParser_member_initializer_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_member_initializer_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_member_initializer_return()
    {
    }

    CSharpParser_member_initializer_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_member_initializer_return( const CSharpParser_member_initializer_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_member_initializer_return&
    operator=( const CSharpParser_member_initializer_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_initializer_value_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_initializer_value_return()
    {
    }

    CSharpParser_initializer_value_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_initializer_value_return( const CSharpParser_initializer_value_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_initializer_value_return&
    operator=( const CSharpParser_initializer_value_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_typeof_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_typeof_expression_return()
    {
    }

    CSharpParser_typeof_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_typeof_expression_return( const CSharpParser_typeof_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_typeof_expression_return&
    operator=( const CSharpParser_typeof_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_unbound_type_name_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_unbound_type_name_return()
    {
    }

    CSharpParser_unbound_type_name_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_unbound_type_name_return( const CSharpParser_unbound_type_name_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_unbound_type_name_return&
    operator=( const CSharpParser_unbound_type_name_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_unbound_type_name_start_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_unbound_type_name_start_return()
    {
    }

    CSharpParser_unbound_type_name_start_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_unbound_type_name_start_return( const CSharpParser_unbound_type_name_start_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_unbound_type_name_start_return&
    operator=( const CSharpParser_unbound_type_name_start_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_unbound_type_name_part_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_unbound_type_name_part_return()
    {
    }

    CSharpParser_unbound_type_name_part_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_unbound_type_name_part_return( const CSharpParser_unbound_type_name_part_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_unbound_type_name_part_return&
    operator=( const CSharpParser_unbound_type_name_part_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_generic_dimension_specifier_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_generic_dimension_specifier_return()
    {
    }

    CSharpParser_generic_dimension_specifier_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_generic_dimension_specifier_return( const CSharpParser_generic_dimension_specifier_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_generic_dimension_specifier_return&
    operator=( const CSharpParser_generic_dimension_specifier_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_commas_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_commas_return()
    {
    }

    CSharpParser_commas_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_commas_return( const CSharpParser_commas_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_commas_return&
    operator=( const CSharpParser_commas_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_type_name_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_type_name_return()
    {
    }

    CSharpParser_type_name_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_type_name_return( const CSharpParser_type_name_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_type_name_return&
    operator=( const CSharpParser_type_name_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_namespace_or_type_name_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_namespace_or_type_name_return()
    {
    }

    CSharpParser_namespace_or_type_name_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_namespace_or_type_name_return( const CSharpParser_namespace_or_type_name_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_namespace_or_type_name_return&
    operator=( const CSharpParser_namespace_or_type_name_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_type_or_generic_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_type_or_generic_return()
    {
    }

    CSharpParser_type_or_generic_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_type_or_generic_return( const CSharpParser_type_or_generic_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_type_or_generic_return&
    operator=( const CSharpParser_type_or_generic_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_qid_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_qid_return()
    {
    }

    CSharpParser_qid_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_qid_return( const CSharpParser_qid_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_qid_return&
    operator=( const CSharpParser_qid_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_qid_start_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_qid_start_return()
    {
    }

    CSharpParser_qid_start_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_qid_start_return( const CSharpParser_qid_start_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_qid_start_return&
    operator=( const CSharpParser_qid_start_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_qid_part_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_qid_part_return()
    {
    }

    CSharpParser_qid_part_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_qid_part_return( const CSharpParser_qid_part_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_qid_part_return&
    operator=( const CSharpParser_qid_part_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_generic_argument_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_generic_argument_list_return()
    {
    }

    CSharpParser_generic_argument_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_generic_argument_list_return( const CSharpParser_generic_argument_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_generic_argument_list_return&
    operator=( const CSharpParser_generic_argument_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_type_arguments_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_type_arguments_return()
    {
    }

    CSharpParser_type_arguments_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_type_arguments_return( const CSharpParser_type_arguments_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_type_arguments_return&
    operator=( const CSharpParser_type_arguments_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_type_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_type_return()
    {
    }

    CSharpParser_type_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_type_return( const CSharpParser_type_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_type_return&
    operator=( const CSharpParser_type_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_non_nullable_type_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_non_nullable_type_return()
    {
    }

    CSharpParser_non_nullable_type_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_non_nullable_type_return( const CSharpParser_non_nullable_type_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_non_nullable_type_return&
    operator=( const CSharpParser_non_nullable_type_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_non_array_type_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_non_array_type_return()
    {
    }

    CSharpParser_non_array_type_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_non_array_type_return( const CSharpParser_non_array_type_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_non_array_type_return&
    operator=( const CSharpParser_non_array_type_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_array_type_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_array_type_return()
    {
    }

    CSharpParser_array_type_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_array_type_return( const CSharpParser_array_type_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_array_type_return&
    operator=( const CSharpParser_array_type_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_unmanaged_type_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_unmanaged_type_return()
    {
    }

    CSharpParser_unmanaged_type_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_unmanaged_type_return( const CSharpParser_unmanaged_type_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_unmanaged_type_return&
    operator=( const CSharpParser_unmanaged_type_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_class_type_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_class_type_return()
    {
    }

    CSharpParser_class_type_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_class_type_return( const CSharpParser_class_type_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_class_type_return&
    operator=( const CSharpParser_class_type_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_pointer_type_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_pointer_type_return()
    {
    }

    CSharpParser_pointer_type_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_pointer_type_return( const CSharpParser_pointer_type_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_pointer_type_return&
    operator=( const CSharpParser_pointer_type_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_block_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_block_return()
    {
    }

    CSharpParser_block_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_block_return( const CSharpParser_block_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_block_return&
    operator=( const CSharpParser_block_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_statement_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_statement_list_return()
    {
    }

    CSharpParser_statement_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_statement_list_return( const CSharpParser_statement_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_statement_list_return&
    operator=( const CSharpParser_statement_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_expression_return()
    {
    }

    CSharpParser_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_expression_return( const CSharpParser_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_expression_return&
    operator=( const CSharpParser_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_expression_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_expression_list_return()
    {
    }

    CSharpParser_expression_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_expression_list_return( const CSharpParser_expression_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_expression_list_return&
    operator=( const CSharpParser_expression_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_assignment_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_assignment_return()
    {
    }

    CSharpParser_assignment_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_assignment_return( const CSharpParser_assignment_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_assignment_return&
    operator=( const CSharpParser_assignment_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_unary_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_unary_expression_return()
    {
    }

    CSharpParser_unary_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_unary_expression_return( const CSharpParser_unary_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_unary_expression_return&
    operator=( const CSharpParser_unary_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_cast_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_cast_expression_return()
    {
    }

    CSharpParser_cast_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_cast_expression_return( const CSharpParser_cast_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_cast_expression_return&
    operator=( const CSharpParser_cast_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_assignment_operator_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_assignment_operator_return()
    {
    }

    CSharpParser_assignment_operator_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_assignment_operator_return( const CSharpParser_assignment_operator_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_assignment_operator_return&
    operator=( const CSharpParser_assignment_operator_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_pre_increment_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_pre_increment_expression_return()
    {
    }

    CSharpParser_pre_increment_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_pre_increment_expression_return( const CSharpParser_pre_increment_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_pre_increment_expression_return&
    operator=( const CSharpParser_pre_increment_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_pre_decrement_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_pre_decrement_expression_return()
    {
    }

    CSharpParser_pre_decrement_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_pre_decrement_expression_return( const CSharpParser_pre_decrement_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_pre_decrement_expression_return&
    operator=( const CSharpParser_pre_decrement_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_pointer_indirection_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_pointer_indirection_expression_return()
    {
    }

    CSharpParser_pointer_indirection_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_pointer_indirection_expression_return( const CSharpParser_pointer_indirection_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_pointer_indirection_expression_return&
    operator=( const CSharpParser_pointer_indirection_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_addressof_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_addressof_expression_return()
    {
    }

    CSharpParser_addressof_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_addressof_expression_return( const CSharpParser_addressof_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_addressof_expression_return&
    operator=( const CSharpParser_addressof_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_non_assignment_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_non_assignment_expression_return()
    {
    }

    CSharpParser_non_assignment_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_non_assignment_expression_return( const CSharpParser_non_assignment_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_non_assignment_expression_return&
    operator=( const CSharpParser_non_assignment_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_multiplicative_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_multiplicative_expression_return()
    {
    }

    CSharpParser_multiplicative_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_multiplicative_expression_return( const CSharpParser_multiplicative_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_multiplicative_expression_return&
    operator=( const CSharpParser_multiplicative_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_additive_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_additive_expression_return()
    {
    }

    CSharpParser_additive_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_additive_expression_return( const CSharpParser_additive_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_additive_expression_return&
    operator=( const CSharpParser_additive_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_shift_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_shift_expression_return()
    {
    }

    CSharpParser_shift_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_shift_expression_return( const CSharpParser_shift_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_shift_expression_return&
    operator=( const CSharpParser_shift_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_relational_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_relational_expression_return()
    {
    }

    CSharpParser_relational_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_relational_expression_return( const CSharpParser_relational_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_relational_expression_return&
    operator=( const CSharpParser_relational_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_equality_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_equality_expression_return()
    {
    }

    CSharpParser_equality_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_equality_expression_return( const CSharpParser_equality_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_equality_expression_return&
    operator=( const CSharpParser_equality_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_and_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_and_expression_return()
    {
    }

    CSharpParser_and_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_and_expression_return( const CSharpParser_and_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_and_expression_return&
    operator=( const CSharpParser_and_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_exclusive_or_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_exclusive_or_expression_return()
    {
    }

    CSharpParser_exclusive_or_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_exclusive_or_expression_return( const CSharpParser_exclusive_or_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_exclusive_or_expression_return&
    operator=( const CSharpParser_exclusive_or_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_inclusive_or_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_inclusive_or_expression_return()
    {
    }

    CSharpParser_inclusive_or_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_inclusive_or_expression_return( const CSharpParser_inclusive_or_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_inclusive_or_expression_return&
    operator=( const CSharpParser_inclusive_or_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_conditional_and_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_conditional_and_expression_return()
    {
    }

    CSharpParser_conditional_and_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_conditional_and_expression_return( const CSharpParser_conditional_and_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_conditional_and_expression_return&
    operator=( const CSharpParser_conditional_and_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_conditional_or_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_conditional_or_expression_return()
    {
    }

    CSharpParser_conditional_or_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_conditional_or_expression_return( const CSharpParser_conditional_or_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_conditional_or_expression_return&
    operator=( const CSharpParser_conditional_or_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_null_coalescing_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_null_coalescing_expression_return()
    {
    }

    CSharpParser_null_coalescing_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_null_coalescing_expression_return( const CSharpParser_null_coalescing_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_null_coalescing_expression_return&
    operator=( const CSharpParser_null_coalescing_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_conditional_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_conditional_expression_return()
    {
    }

    CSharpParser_conditional_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_conditional_expression_return( const CSharpParser_conditional_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_conditional_expression_return&
    operator=( const CSharpParser_conditional_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_lambda_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_lambda_expression_return()
    {
    }

    CSharpParser_lambda_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_lambda_expression_return( const CSharpParser_lambda_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_lambda_expression_return&
    operator=( const CSharpParser_lambda_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_anonymous_function_signature_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_anonymous_function_signature_return()
    {
    }

    CSharpParser_anonymous_function_signature_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_anonymous_function_signature_return( const CSharpParser_anonymous_function_signature_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_anonymous_function_signature_return&
    operator=( const CSharpParser_anonymous_function_signature_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_implicit_anonymous_function_parameter_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_implicit_anonymous_function_parameter_list_return()
    {
    }

    CSharpParser_implicit_anonymous_function_parameter_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_implicit_anonymous_function_parameter_list_return( const CSharpParser_implicit_anonymous_function_parameter_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_implicit_anonymous_function_parameter_list_return&
    operator=( const CSharpParser_implicit_anonymous_function_parameter_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_implicit_anonymous_function_parameter_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_implicit_anonymous_function_parameter_return()
    {
    }

    CSharpParser_implicit_anonymous_function_parameter_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_implicit_anonymous_function_parameter_return( const CSharpParser_implicit_anonymous_function_parameter_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_implicit_anonymous_function_parameter_return&
    operator=( const CSharpParser_implicit_anonymous_function_parameter_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_anonymous_function_body_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_anonymous_function_body_return()
    {
    }

    CSharpParser_anonymous_function_body_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_anonymous_function_body_return( const CSharpParser_anonymous_function_body_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_anonymous_function_body_return&
    operator=( const CSharpParser_anonymous_function_body_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_query_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_query_expression_return()
    {
    }

    CSharpParser_query_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_query_expression_return( const CSharpParser_query_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_query_expression_return&
    operator=( const CSharpParser_query_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_query_body_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_query_body_return()
    {
    }

    CSharpParser_query_body_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_query_body_return( const CSharpParser_query_body_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_query_body_return&
    operator=( const CSharpParser_query_body_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_query_continuation_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_query_continuation_return()
    {
    }

    CSharpParser_query_continuation_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_query_continuation_return( const CSharpParser_query_continuation_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_query_continuation_return&
    operator=( const CSharpParser_query_continuation_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_query_body_clauses_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_query_body_clauses_return()
    {
    }

    CSharpParser_query_body_clauses_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_query_body_clauses_return( const CSharpParser_query_body_clauses_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_query_body_clauses_return&
    operator=( const CSharpParser_query_body_clauses_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_query_body_clause_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_query_body_clause_return()
    {
    }

    CSharpParser_query_body_clause_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_query_body_clause_return( const CSharpParser_query_body_clause_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_query_body_clause_return&
    operator=( const CSharpParser_query_body_clause_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_from_clause_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_from_clause_return()
    {
    }

    CSharpParser_from_clause_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_from_clause_return( const CSharpParser_from_clause_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_from_clause_return&
    operator=( const CSharpParser_from_clause_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_join_clause_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_join_clause_return()
    {
    }

    CSharpParser_join_clause_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_join_clause_return( const CSharpParser_join_clause_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_join_clause_return&
    operator=( const CSharpParser_join_clause_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_let_clause_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_let_clause_return()
    {
    }

    CSharpParser_let_clause_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_let_clause_return( const CSharpParser_let_clause_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_let_clause_return&
    operator=( const CSharpParser_let_clause_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_orderby_clause_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_orderby_clause_return()
    {
    }

    CSharpParser_orderby_clause_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_orderby_clause_return( const CSharpParser_orderby_clause_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_orderby_clause_return&
    operator=( const CSharpParser_orderby_clause_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_ordering_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_ordering_list_return()
    {
    }

    CSharpParser_ordering_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_ordering_list_return( const CSharpParser_ordering_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_ordering_list_return&
    operator=( const CSharpParser_ordering_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_ordering_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_ordering_return()
    {
    }

    CSharpParser_ordering_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_ordering_return( const CSharpParser_ordering_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_ordering_return&
    operator=( const CSharpParser_ordering_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_ordering_direction_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_ordering_direction_return()
    {
    }

    CSharpParser_ordering_direction_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_ordering_direction_return( const CSharpParser_ordering_direction_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_ordering_direction_return&
    operator=( const CSharpParser_ordering_direction_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_select_or_group_clause_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_select_or_group_clause_return()
    {
    }

    CSharpParser_select_or_group_clause_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_select_or_group_clause_return( const CSharpParser_select_or_group_clause_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_select_or_group_clause_return&
    operator=( const CSharpParser_select_or_group_clause_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_select_clause_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_select_clause_return()
    {
    }

    CSharpParser_select_clause_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_select_clause_return( const CSharpParser_select_clause_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_select_clause_return&
    operator=( const CSharpParser_select_clause_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_group_clause_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_group_clause_return()
    {
    }

    CSharpParser_group_clause_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_group_clause_return( const CSharpParser_group_clause_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_group_clause_return&
    operator=( const CSharpParser_group_clause_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_where_clause_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_where_clause_return()
    {
    }

    CSharpParser_where_clause_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_where_clause_return( const CSharpParser_where_clause_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_where_clause_return&
    operator=( const CSharpParser_where_clause_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_boolean_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_boolean_expression_return()
    {
    }

    CSharpParser_boolean_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_boolean_expression_return( const CSharpParser_boolean_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_boolean_expression_return&
    operator=( const CSharpParser_boolean_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_global_attributes_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_global_attributes_return()
    {
    }

    CSharpParser_global_attributes_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_global_attributes_return( const CSharpParser_global_attributes_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_global_attributes_return&
    operator=( const CSharpParser_global_attributes_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_global_attribute_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_global_attribute_return()
    {
    }

    CSharpParser_global_attribute_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_global_attribute_return( const CSharpParser_global_attribute_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_global_attribute_return&
    operator=( const CSharpParser_global_attribute_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_global_attribute_target_specifier_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_global_attribute_target_specifier_return()
    {
    }

    CSharpParser_global_attribute_target_specifier_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_global_attribute_target_specifier_return( const CSharpParser_global_attribute_target_specifier_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_global_attribute_target_specifier_return&
    operator=( const CSharpParser_global_attribute_target_specifier_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_global_attribute_target_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_global_attribute_target_return()
    {
    }

    CSharpParser_global_attribute_target_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_global_attribute_target_return( const CSharpParser_global_attribute_target_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_global_attribute_target_return&
    operator=( const CSharpParser_global_attribute_target_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_attributes_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_attributes_return()
    {
    }

    CSharpParser_attributes_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_attributes_return( const CSharpParser_attributes_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_attributes_return&
    operator=( const CSharpParser_attributes_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_attribute_sections_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_attribute_sections_return()
    {
    }

    CSharpParser_attribute_sections_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_attribute_sections_return( const CSharpParser_attribute_sections_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_attribute_sections_return&
    operator=( const CSharpParser_attribute_sections_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_attribute_section_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_attribute_section_return()
    {
    }

    CSharpParser_attribute_section_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_attribute_section_return( const CSharpParser_attribute_section_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_attribute_section_return&
    operator=( const CSharpParser_attribute_section_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_attribute_target_specifier_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_attribute_target_specifier_return()
    {
    }

    CSharpParser_attribute_target_specifier_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_attribute_target_specifier_return( const CSharpParser_attribute_target_specifier_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_attribute_target_specifier_return&
    operator=( const CSharpParser_attribute_target_specifier_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_attribute_target_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_attribute_target_return()
    {
    }

    CSharpParser_attribute_target_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_attribute_target_return( const CSharpParser_attribute_target_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_attribute_target_return&
    operator=( const CSharpParser_attribute_target_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_attribute_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_attribute_list_return()
    {
    }

    CSharpParser_attribute_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_attribute_list_return( const CSharpParser_attribute_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_attribute_list_return&
    operator=( const CSharpParser_attribute_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_attribute_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_attribute_return()
    {
    }

    CSharpParser_attribute_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_attribute_return( const CSharpParser_attribute_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_attribute_return&
    operator=( const CSharpParser_attribute_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_attribute_arguments_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_attribute_arguments_return()
    {
    }

    CSharpParser_attribute_arguments_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_attribute_arguments_return( const CSharpParser_attribute_arguments_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_attribute_arguments_return&
    operator=( const CSharpParser_attribute_arguments_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_positional_argument_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_positional_argument_list_return()
    {
    }

    CSharpParser_positional_argument_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_positional_argument_list_return( const CSharpParser_positional_argument_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_positional_argument_list_return&
    operator=( const CSharpParser_positional_argument_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_positional_argument_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_positional_argument_return()
    {
    }

    CSharpParser_positional_argument_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_positional_argument_return( const CSharpParser_positional_argument_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_positional_argument_return&
    operator=( const CSharpParser_positional_argument_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_named_argument_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_named_argument_list_return()
    {
    }

    CSharpParser_named_argument_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_named_argument_list_return( const CSharpParser_named_argument_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_named_argument_list_return&
    operator=( const CSharpParser_named_argument_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_named_argument_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_named_argument_return()
    {
    }

    CSharpParser_named_argument_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_named_argument_return( const CSharpParser_named_argument_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_named_argument_return&
    operator=( const CSharpParser_named_argument_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_attribute_argument_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_attribute_argument_expression_return()
    {
    }

    CSharpParser_attribute_argument_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_attribute_argument_expression_return( const CSharpParser_attribute_argument_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_attribute_argument_expression_return&
    operator=( const CSharpParser_attribute_argument_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_class_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_class_declaration_return()
    {
    }

    CSharpParser_class_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_class_declaration_return( const CSharpParser_class_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_class_declaration_return&
    operator=( const CSharpParser_class_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_class_base_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_class_base_return()
    {
    }

    CSharpParser_class_base_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_class_base_return( const CSharpParser_class_base_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_class_base_return&
    operator=( const CSharpParser_class_base_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_interface_type_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_interface_type_list_return()
    {
    }

    CSharpParser_interface_type_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_interface_type_list_return( const CSharpParser_interface_type_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_interface_type_list_return&
    operator=( const CSharpParser_interface_type_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_class_body_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_class_body_return()
    {
    }

    CSharpParser_class_body_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_class_body_return( const CSharpParser_class_body_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_class_body_return&
    operator=( const CSharpParser_class_body_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_class_member_declarations_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_class_member_declarations_return()
    {
    }

    CSharpParser_class_member_declarations_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_class_member_declarations_return( const CSharpParser_class_member_declarations_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_class_member_declarations_return&
    operator=( const CSharpParser_class_member_declarations_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_constant_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_constant_declaration_return()
    {
    }

    CSharpParser_constant_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_constant_declaration_return( const CSharpParser_constant_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_constant_declaration_return&
    operator=( const CSharpParser_constant_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_constant_declarators_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_constant_declarators_return()
    {
    }

    CSharpParser_constant_declarators_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_constant_declarators_return( const CSharpParser_constant_declarators_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_constant_declarators_return&
    operator=( const CSharpParser_constant_declarators_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_constant_declarator_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_constant_declarator_return()
    {
    }

    CSharpParser_constant_declarator_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_constant_declarator_return( const CSharpParser_constant_declarator_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_constant_declarator_return&
    operator=( const CSharpParser_constant_declarator_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_constant_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_constant_expression_return()
    {
    }

    CSharpParser_constant_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_constant_expression_return( const CSharpParser_constant_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_constant_expression_return&
    operator=( const CSharpParser_constant_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_field_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_field_declaration_return()
    {
    }

    CSharpParser_field_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_field_declaration_return( const CSharpParser_field_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_field_declaration_return&
    operator=( const CSharpParser_field_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_variable_declarators_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_variable_declarators_return()
    {
    }

    CSharpParser_variable_declarators_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_variable_declarators_return( const CSharpParser_variable_declarators_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_variable_declarators_return&
    operator=( const CSharpParser_variable_declarators_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_variable_declarator_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_variable_declarator_return()
    {
    }

    CSharpParser_variable_declarator_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_variable_declarator_return( const CSharpParser_variable_declarator_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_variable_declarator_return&
    operator=( const CSharpParser_variable_declarator_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_method_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_method_declaration_return()
    {
    }

    CSharpParser_method_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_method_declaration_return( const CSharpParser_method_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_method_declaration_return&
    operator=( const CSharpParser_method_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_method_header_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_method_header_return()
    {
    }

    CSharpParser_method_header_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_method_header_return( const CSharpParser_method_header_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_method_header_return&
    operator=( const CSharpParser_method_header_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_method_body_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_method_body_return()
    {
    }

    CSharpParser_method_body_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_method_body_return( const CSharpParser_method_body_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_method_body_return&
    operator=( const CSharpParser_method_body_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_member_name_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_member_name_return()
    {
    }

    CSharpParser_member_name_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_member_name_return( const CSharpParser_member_name_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_member_name_return&
    operator=( const CSharpParser_member_name_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_property_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_property_declaration_return()
    {
    }

    CSharpParser_property_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_property_declaration_return( const CSharpParser_property_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_property_declaration_return&
    operator=( const CSharpParser_property_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_accessor_declarations_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_accessor_declarations_return()
    {
    }

    CSharpParser_accessor_declarations_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_accessor_declarations_return( const CSharpParser_accessor_declarations_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_accessor_declarations_return&
    operator=( const CSharpParser_accessor_declarations_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_get_accessor_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_get_accessor_declaration_return()
    {
    }

    CSharpParser_get_accessor_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_get_accessor_declaration_return( const CSharpParser_get_accessor_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_get_accessor_declaration_return&
    operator=( const CSharpParser_get_accessor_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_set_accessor_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_set_accessor_declaration_return()
    {
    }

    CSharpParser_set_accessor_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_set_accessor_declaration_return( const CSharpParser_set_accessor_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_set_accessor_declaration_return&
    operator=( const CSharpParser_set_accessor_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_accessor_modifier_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_accessor_modifier_return()
    {
    }

    CSharpParser_accessor_modifier_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_accessor_modifier_return( const CSharpParser_accessor_modifier_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_accessor_modifier_return&
    operator=( const CSharpParser_accessor_modifier_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_accessor_body_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_accessor_body_return()
    {
    }

    CSharpParser_accessor_body_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_accessor_body_return( const CSharpParser_accessor_body_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_accessor_body_return&
    operator=( const CSharpParser_accessor_body_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_event_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_event_declaration_return()
    {
    }

    CSharpParser_event_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_event_declaration_return( const CSharpParser_event_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_event_declaration_return&
    operator=( const CSharpParser_event_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_event_modifiers_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_event_modifiers_return()
    {
    }

    CSharpParser_event_modifiers_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_event_modifiers_return( const CSharpParser_event_modifiers_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_event_modifiers_return&
    operator=( const CSharpParser_event_modifiers_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_event_accessor_declarations_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_event_accessor_declarations_return()
    {
    }

    CSharpParser_event_accessor_declarations_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_event_accessor_declarations_return( const CSharpParser_event_accessor_declarations_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_event_accessor_declarations_return&
    operator=( const CSharpParser_event_accessor_declarations_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_add_accessor_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_add_accessor_declaration_return()
    {
    }

    CSharpParser_add_accessor_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_add_accessor_declaration_return( const CSharpParser_add_accessor_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_add_accessor_declaration_return&
    operator=( const CSharpParser_add_accessor_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_remove_accessor_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_remove_accessor_declaration_return()
    {
    }

    CSharpParser_remove_accessor_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_remove_accessor_declaration_return( const CSharpParser_remove_accessor_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_remove_accessor_declaration_return&
    operator=( const CSharpParser_remove_accessor_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_enum_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_enum_declaration_return()
    {
    }

    CSharpParser_enum_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_enum_declaration_return( const CSharpParser_enum_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_enum_declaration_return&
    operator=( const CSharpParser_enum_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_enum_base_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_enum_base_return()
    {
    }

    CSharpParser_enum_base_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_enum_base_return( const CSharpParser_enum_base_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_enum_base_return&
    operator=( const CSharpParser_enum_base_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_enum_body_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_enum_body_return()
    {
    }

    CSharpParser_enum_body_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_enum_body_return( const CSharpParser_enum_body_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_enum_body_return&
    operator=( const CSharpParser_enum_body_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_enum_member_declarations_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_enum_member_declarations_return()
    {
    }

    CSharpParser_enum_member_declarations_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_enum_member_declarations_return( const CSharpParser_enum_member_declarations_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_enum_member_declarations_return&
    operator=( const CSharpParser_enum_member_declarations_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_enum_member_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_enum_member_declaration_return()
    {
    }

    CSharpParser_enum_member_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_enum_member_declaration_return( const CSharpParser_enum_member_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_enum_member_declaration_return&
    operator=( const CSharpParser_enum_member_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_integral_type_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_integral_type_return()
    {
    }

    CSharpParser_integral_type_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_integral_type_return( const CSharpParser_integral_type_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_integral_type_return&
    operator=( const CSharpParser_integral_type_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_delegate_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_delegate_declaration_return()
    {
    }

    CSharpParser_delegate_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_delegate_declaration_return( const CSharpParser_delegate_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_delegate_declaration_return&
    operator=( const CSharpParser_delegate_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_delegate_modifiers_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_delegate_modifiers_return()
    {
    }

    CSharpParser_delegate_modifiers_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_delegate_modifiers_return( const CSharpParser_delegate_modifiers_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_delegate_modifiers_return&
    operator=( const CSharpParser_delegate_modifiers_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_variant_generic_parameter_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_variant_generic_parameter_list_return()
    {
    }

    CSharpParser_variant_generic_parameter_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_variant_generic_parameter_list_return( const CSharpParser_variant_generic_parameter_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_variant_generic_parameter_list_return&
    operator=( const CSharpParser_variant_generic_parameter_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_variant_type_parameters_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_variant_type_parameters_return()
    {
    }

    CSharpParser_variant_type_parameters_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_variant_type_parameters_return( const CSharpParser_variant_type_parameters_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_variant_type_parameters_return&
    operator=( const CSharpParser_variant_type_parameters_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_variant_type_variable_name_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_variant_type_variable_name_return()
    {
    }

    CSharpParser_variant_type_variable_name_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_variant_type_variable_name_return( const CSharpParser_variant_type_variable_name_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_variant_type_variable_name_return&
    operator=( const CSharpParser_variant_type_variable_name_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_variance_annotation_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_variance_annotation_return()
    {
    }

    CSharpParser_variance_annotation_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_variance_annotation_return( const CSharpParser_variance_annotation_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_variance_annotation_return&
    operator=( const CSharpParser_variance_annotation_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_type_parameter_constraints_clauses_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_type_parameter_constraints_clauses_return()
    {
    }

    CSharpParser_type_parameter_constraints_clauses_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_type_parameter_constraints_clauses_return( const CSharpParser_type_parameter_constraints_clauses_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_type_parameter_constraints_clauses_return&
    operator=( const CSharpParser_type_parameter_constraints_clauses_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_type_parameter_constraints_clause_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_type_parameter_constraints_clause_return()
    {
    }

    CSharpParser_type_parameter_constraints_clause_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_type_parameter_constraints_clause_return( const CSharpParser_type_parameter_constraints_clause_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_type_parameter_constraints_clause_return&
    operator=( const CSharpParser_type_parameter_constraints_clause_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_type_parameter_constraint_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_type_parameter_constraint_list_return()
    {
    }

    CSharpParser_type_parameter_constraint_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_type_parameter_constraint_list_return( const CSharpParser_type_parameter_constraint_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_type_parameter_constraint_list_return&
    operator=( const CSharpParser_type_parameter_constraint_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_secondary_constraint_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_secondary_constraint_list_return()
    {
    }

    CSharpParser_secondary_constraint_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_secondary_constraint_list_return( const CSharpParser_secondary_constraint_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_secondary_constraint_list_return&
    operator=( const CSharpParser_secondary_constraint_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_secondary_constraint_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_secondary_constraint_return()
    {
    }

    CSharpParser_secondary_constraint_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_secondary_constraint_return( const CSharpParser_secondary_constraint_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_secondary_constraint_return&
    operator=( const CSharpParser_secondary_constraint_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_type_variable_name_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_type_variable_name_return()
    {
    }

    CSharpParser_type_variable_name_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_type_variable_name_return( const CSharpParser_type_variable_name_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_type_variable_name_return&
    operator=( const CSharpParser_type_variable_name_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_constructor_constraint_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_constructor_constraint_return()
    {
    }

    CSharpParser_constructor_constraint_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_constructor_constraint_return( const CSharpParser_constructor_constraint_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_constructor_constraint_return&
    operator=( const CSharpParser_constructor_constraint_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_return_type_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_return_type_return()
    {
    }

    CSharpParser_return_type_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_return_type_return( const CSharpParser_return_type_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_return_type_return&
    operator=( const CSharpParser_return_type_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_formal_parameter_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_formal_parameter_list_return()
    {
    }

    CSharpParser_formal_parameter_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_formal_parameter_list_return( const CSharpParser_formal_parameter_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_formal_parameter_list_return&
    operator=( const CSharpParser_formal_parameter_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_formal_parameter_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_formal_parameter_return()
    {
    }

    CSharpParser_formal_parameter_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_formal_parameter_return( const CSharpParser_formal_parameter_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_formal_parameter_return&
    operator=( const CSharpParser_formal_parameter_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_fixed_parameters_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_fixed_parameters_return()
    {
    }

    CSharpParser_fixed_parameters_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_fixed_parameters_return( const CSharpParser_fixed_parameters_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_fixed_parameters_return&
    operator=( const CSharpParser_fixed_parameters_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_fixed_parameter_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_fixed_parameter_return()
    {
    }

    CSharpParser_fixed_parameter_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_fixed_parameter_return( const CSharpParser_fixed_parameter_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_fixed_parameter_return&
    operator=( const CSharpParser_fixed_parameter_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_default_argument_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_default_argument_return()
    {
    }

    CSharpParser_default_argument_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_default_argument_return( const CSharpParser_default_argument_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_default_argument_return&
    operator=( const CSharpParser_default_argument_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_parameter_modifier_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_parameter_modifier_return()
    {
    }

    CSharpParser_parameter_modifier_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_parameter_modifier_return( const CSharpParser_parameter_modifier_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_parameter_modifier_return&
    operator=( const CSharpParser_parameter_modifier_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_parameter_array_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_parameter_array_return()
    {
    }

    CSharpParser_parameter_array_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_parameter_array_return( const CSharpParser_parameter_array_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_parameter_array_return&
    operator=( const CSharpParser_parameter_array_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_interface_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_interface_declaration_return()
    {
    }

    CSharpParser_interface_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_interface_declaration_return( const CSharpParser_interface_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_interface_declaration_return&
    operator=( const CSharpParser_interface_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_interface_modifiers_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_interface_modifiers_return()
    {
    }

    CSharpParser_interface_modifiers_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_interface_modifiers_return( const CSharpParser_interface_modifiers_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_interface_modifiers_return&
    operator=( const CSharpParser_interface_modifiers_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_interface_base_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_interface_base_return()
    {
    }

    CSharpParser_interface_base_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_interface_base_return( const CSharpParser_interface_base_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_interface_base_return&
    operator=( const CSharpParser_interface_base_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_interface_body_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_interface_body_return()
    {
    }

    CSharpParser_interface_body_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_interface_body_return( const CSharpParser_interface_body_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_interface_body_return&
    operator=( const CSharpParser_interface_body_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_interface_member_declarations_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_interface_member_declarations_return()
    {
    }

    CSharpParser_interface_member_declarations_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_interface_member_declarations_return( const CSharpParser_interface_member_declarations_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_interface_member_declarations_return&
    operator=( const CSharpParser_interface_member_declarations_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_interface_member_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_interface_member_declaration_return()
    {
    }

    CSharpParser_interface_member_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_interface_member_declaration_return( const CSharpParser_interface_member_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_interface_member_declaration_return&
    operator=( const CSharpParser_interface_member_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_interface_property_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_interface_property_declaration_return()
    {
    }

    CSharpParser_interface_property_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_interface_property_declaration_return( const CSharpParser_interface_property_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_interface_property_declaration_return&
    operator=( const CSharpParser_interface_property_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_interface_method_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_interface_method_declaration_return()
    {
    }

    CSharpParser_interface_method_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_interface_method_declaration_return( const CSharpParser_interface_method_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_interface_method_declaration_return&
    operator=( const CSharpParser_interface_method_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_interface_event_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_interface_event_declaration_return()
    {
    }

    CSharpParser_interface_event_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_interface_event_declaration_return( const CSharpParser_interface_event_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_interface_event_declaration_return&
    operator=( const CSharpParser_interface_event_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_interface_indexer_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_interface_indexer_declaration_return()
    {
    }

    CSharpParser_interface_indexer_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_interface_indexer_declaration_return( const CSharpParser_interface_indexer_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_interface_indexer_declaration_return&
    operator=( const CSharpParser_interface_indexer_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_interface_accessor_declarations_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_interface_accessor_declarations_return()
    {
    }

    CSharpParser_interface_accessor_declarations_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_interface_accessor_declarations_return( const CSharpParser_interface_accessor_declarations_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_interface_accessor_declarations_return&
    operator=( const CSharpParser_interface_accessor_declarations_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_interface_get_accessor_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_interface_get_accessor_declaration_return()
    {
    }

    CSharpParser_interface_get_accessor_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_interface_get_accessor_declaration_return( const CSharpParser_interface_get_accessor_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_interface_get_accessor_declaration_return&
    operator=( const CSharpParser_interface_get_accessor_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_interface_set_accessor_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_interface_set_accessor_declaration_return()
    {
    }

    CSharpParser_interface_set_accessor_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_interface_set_accessor_declaration_return( const CSharpParser_interface_set_accessor_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_interface_set_accessor_declaration_return&
    operator=( const CSharpParser_interface_set_accessor_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_method_modifiers_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_method_modifiers_return()
    {
    }

    CSharpParser_method_modifiers_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_method_modifiers_return( const CSharpParser_method_modifiers_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_method_modifiers_return&
    operator=( const CSharpParser_method_modifiers_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_struct_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_struct_declaration_return()
    {
    }

    CSharpParser_struct_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_struct_declaration_return( const CSharpParser_struct_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_struct_declaration_return&
    operator=( const CSharpParser_struct_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_struct_modifiers_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_struct_modifiers_return()
    {
    }

    CSharpParser_struct_modifiers_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_struct_modifiers_return( const CSharpParser_struct_modifiers_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_struct_modifiers_return&
    operator=( const CSharpParser_struct_modifiers_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_struct_modifier_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_struct_modifier_return()
    {
    }

    CSharpParser_struct_modifier_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_struct_modifier_return( const CSharpParser_struct_modifier_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_struct_modifier_return&
    operator=( const CSharpParser_struct_modifier_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_struct_interfaces_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_struct_interfaces_return()
    {
    }

    CSharpParser_struct_interfaces_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_struct_interfaces_return( const CSharpParser_struct_interfaces_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_struct_interfaces_return&
    operator=( const CSharpParser_struct_interfaces_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_struct_body_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_struct_body_return()
    {
    }

    CSharpParser_struct_body_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_struct_body_return( const CSharpParser_struct_body_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_struct_body_return&
    operator=( const CSharpParser_struct_body_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_struct_member_declarations_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_struct_member_declarations_return()
    {
    }

    CSharpParser_struct_member_declarations_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_struct_member_declarations_return( const CSharpParser_struct_member_declarations_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_struct_member_declarations_return&
    operator=( const CSharpParser_struct_member_declarations_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_struct_member_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_struct_member_declaration_return()
    {
    }

    CSharpParser_struct_member_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_struct_member_declaration_return( const CSharpParser_struct_member_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_struct_member_declaration_return&
    operator=( const CSharpParser_struct_member_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_indexer_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_indexer_declaration_return()
    {
    }

    CSharpParser_indexer_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_indexer_declaration_return( const CSharpParser_indexer_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_indexer_declaration_return&
    operator=( const CSharpParser_indexer_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_indexer_declarator_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_indexer_declarator_return()
    {
    }

    CSharpParser_indexer_declarator_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_indexer_declarator_return( const CSharpParser_indexer_declarator_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_indexer_declarator_return&
    operator=( const CSharpParser_indexer_declarator_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_operator_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_operator_declaration_return()
    {
    }

    CSharpParser_operator_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_operator_declaration_return( const CSharpParser_operator_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_operator_declaration_return&
    operator=( const CSharpParser_operator_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_operator_declarator_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_operator_declarator_return()
    {
    }

    CSharpParser_operator_declarator_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_operator_declarator_return( const CSharpParser_operator_declarator_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_operator_declarator_return&
    operator=( const CSharpParser_operator_declarator_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_unary_operator_declarator_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_unary_operator_declarator_return()
    {
    }

    CSharpParser_unary_operator_declarator_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_unary_operator_declarator_return( const CSharpParser_unary_operator_declarator_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_unary_operator_declarator_return&
    operator=( const CSharpParser_unary_operator_declarator_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_overloadable_unary_operator_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_overloadable_unary_operator_return()
    {
    }

    CSharpParser_overloadable_unary_operator_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_overloadable_unary_operator_return( const CSharpParser_overloadable_unary_operator_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_overloadable_unary_operator_return&
    operator=( const CSharpParser_overloadable_unary_operator_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_binary_operator_declarator_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_binary_operator_declarator_return()
    {
    }

    CSharpParser_binary_operator_declarator_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_binary_operator_declarator_return( const CSharpParser_binary_operator_declarator_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_binary_operator_declarator_return&
    operator=( const CSharpParser_binary_operator_declarator_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_overloadable_binary_operator_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_overloadable_binary_operator_return()
    {
    }

    CSharpParser_overloadable_binary_operator_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_overloadable_binary_operator_return( const CSharpParser_overloadable_binary_operator_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_overloadable_binary_operator_return&
    operator=( const CSharpParser_overloadable_binary_operator_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_conversion_operator_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_conversion_operator_declaration_return()
    {
    }

    CSharpParser_conversion_operator_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_conversion_operator_declaration_return( const CSharpParser_conversion_operator_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_conversion_operator_declaration_return&
    operator=( const CSharpParser_conversion_operator_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_conversion_operator_declarator_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_conversion_operator_declarator_return()
    {
    }

    CSharpParser_conversion_operator_declarator_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_conversion_operator_declarator_return( const CSharpParser_conversion_operator_declarator_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_conversion_operator_declarator_return&
    operator=( const CSharpParser_conversion_operator_declarator_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_operator_body_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_operator_body_return()
    {
    }

    CSharpParser_operator_body_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_operator_body_return( const CSharpParser_operator_body_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_operator_body_return&
    operator=( const CSharpParser_operator_body_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_constructor_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_constructor_declaration_return()
    {
    }

    CSharpParser_constructor_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_constructor_declaration_return( const CSharpParser_constructor_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_constructor_declaration_return&
    operator=( const CSharpParser_constructor_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_constructor_declarator_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_constructor_declarator_return()
    {
    }

    CSharpParser_constructor_declarator_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_constructor_declarator_return( const CSharpParser_constructor_declarator_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_constructor_declarator_return&
    operator=( const CSharpParser_constructor_declarator_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_constructor_initializer_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_constructor_initializer_return()
    {
    }

    CSharpParser_constructor_initializer_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_constructor_initializer_return( const CSharpParser_constructor_initializer_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_constructor_initializer_return&
    operator=( const CSharpParser_constructor_initializer_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_constructor_body_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_constructor_body_return()
    {
    }

    CSharpParser_constructor_body_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_constructor_body_return( const CSharpParser_constructor_body_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_constructor_body_return&
    operator=( const CSharpParser_constructor_body_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_destructor_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_destructor_declaration_return()
    {
    }

    CSharpParser_destructor_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_destructor_declaration_return( const CSharpParser_destructor_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_destructor_declaration_return&
    operator=( const CSharpParser_destructor_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_destructor_body_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_destructor_body_return()
    {
    }

    CSharpParser_destructor_body_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_destructor_body_return( const CSharpParser_destructor_body_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_destructor_body_return&
    operator=( const CSharpParser_destructor_body_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_invocation_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_invocation_expression_return()
    {
    }

    CSharpParser_invocation_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_invocation_expression_return( const CSharpParser_invocation_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_invocation_expression_return&
    operator=( const CSharpParser_invocation_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_invocation_start_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_invocation_start_return()
    {
    }

    CSharpParser_invocation_start_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_invocation_start_return( const CSharpParser_invocation_start_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_invocation_start_return&
    operator=( const CSharpParser_invocation_start_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_invocation_part_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_invocation_part_return()
    {
    }

    CSharpParser_invocation_part_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_invocation_part_return( const CSharpParser_invocation_part_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_invocation_part_return&
    operator=( const CSharpParser_invocation_part_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_statement_return()
    {
    }

    CSharpParser_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_statement_return( const CSharpParser_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_statement_return&
    operator=( const CSharpParser_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_embedded_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_embedded_statement_return()
    {
    }

    CSharpParser_embedded_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_embedded_statement_return( const CSharpParser_embedded_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_embedded_statement_return&
    operator=( const CSharpParser_embedded_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_fixed_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_fixed_statement_return()
    {
    }

    CSharpParser_fixed_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_fixed_statement_return( const CSharpParser_fixed_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_fixed_statement_return&
    operator=( const CSharpParser_fixed_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_fixed_pointer_declarators_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_fixed_pointer_declarators_return()
    {
    }

    CSharpParser_fixed_pointer_declarators_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_fixed_pointer_declarators_return( const CSharpParser_fixed_pointer_declarators_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_fixed_pointer_declarators_return&
    operator=( const CSharpParser_fixed_pointer_declarators_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_fixed_pointer_declarator_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_fixed_pointer_declarator_return()
    {
    }

    CSharpParser_fixed_pointer_declarator_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_fixed_pointer_declarator_return( const CSharpParser_fixed_pointer_declarator_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_fixed_pointer_declarator_return&
    operator=( const CSharpParser_fixed_pointer_declarator_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_fixed_pointer_initializer_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_fixed_pointer_initializer_return()
    {
    }

    CSharpParser_fixed_pointer_initializer_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_fixed_pointer_initializer_return( const CSharpParser_fixed_pointer_initializer_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_fixed_pointer_initializer_return&
    operator=( const CSharpParser_fixed_pointer_initializer_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_unsafe_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_unsafe_statement_return()
    {
    }

    CSharpParser_unsafe_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_unsafe_statement_return( const CSharpParser_unsafe_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_unsafe_statement_return&
    operator=( const CSharpParser_unsafe_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_labeled_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_labeled_statement_return()
    {
    }

    CSharpParser_labeled_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_labeled_statement_return( const CSharpParser_labeled_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_labeled_statement_return&
    operator=( const CSharpParser_labeled_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_declaration_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_declaration_statement_return()
    {
    }

    CSharpParser_declaration_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_declaration_statement_return( const CSharpParser_declaration_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_declaration_statement_return&
    operator=( const CSharpParser_declaration_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_local_variable_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_local_variable_declaration_return()
    {
    }

    CSharpParser_local_variable_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_local_variable_declaration_return( const CSharpParser_local_variable_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_local_variable_declaration_return&
    operator=( const CSharpParser_local_variable_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_local_variable_type_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_local_variable_type_return()
    {
    }

    CSharpParser_local_variable_type_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_local_variable_type_return( const CSharpParser_local_variable_type_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_local_variable_type_return&
    operator=( const CSharpParser_local_variable_type_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_local_variable_declarators_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_local_variable_declarators_return()
    {
    }

    CSharpParser_local_variable_declarators_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_local_variable_declarators_return( const CSharpParser_local_variable_declarators_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_local_variable_declarators_return&
    operator=( const CSharpParser_local_variable_declarators_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_local_variable_declarator_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_local_variable_declarator_return()
    {
    }

    CSharpParser_local_variable_declarator_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_local_variable_declarator_return( const CSharpParser_local_variable_declarator_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_local_variable_declarator_return&
    operator=( const CSharpParser_local_variable_declarator_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_local_variable_initializer_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_local_variable_initializer_return()
    {
    }

    CSharpParser_local_variable_initializer_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_local_variable_initializer_return( const CSharpParser_local_variable_initializer_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_local_variable_initializer_return&
    operator=( const CSharpParser_local_variable_initializer_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_stackalloc_initializer_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_stackalloc_initializer_return()
    {
    }

    CSharpParser_stackalloc_initializer_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_stackalloc_initializer_return( const CSharpParser_stackalloc_initializer_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_stackalloc_initializer_return&
    operator=( const CSharpParser_stackalloc_initializer_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_local_constant_declaration_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_local_constant_declaration_return()
    {
    }

    CSharpParser_local_constant_declaration_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_local_constant_declaration_return( const CSharpParser_local_constant_declaration_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_local_constant_declaration_return&
    operator=( const CSharpParser_local_constant_declaration_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_expression_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_expression_statement_return()
    {
    }

    CSharpParser_expression_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_expression_statement_return( const CSharpParser_expression_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_expression_statement_return&
    operator=( const CSharpParser_expression_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_statement_expression_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_statement_expression_return()
    {
    }

    CSharpParser_statement_expression_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_statement_expression_return( const CSharpParser_statement_expression_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_statement_expression_return&
    operator=( const CSharpParser_statement_expression_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_selection_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_selection_statement_return()
    {
    }

    CSharpParser_selection_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_selection_statement_return( const CSharpParser_selection_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_selection_statement_return&
    operator=( const CSharpParser_selection_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_if_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_if_statement_return()
    {
    }

    CSharpParser_if_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_if_statement_return( const CSharpParser_if_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_if_statement_return&
    operator=( const CSharpParser_if_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_else_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_else_statement_return()
    {
    }

    CSharpParser_else_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_else_statement_return( const CSharpParser_else_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_else_statement_return&
    operator=( const CSharpParser_else_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_switch_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_switch_statement_return()
    {
    }

    CSharpParser_switch_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_switch_statement_return( const CSharpParser_switch_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_switch_statement_return&
    operator=( const CSharpParser_switch_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_switch_block_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_switch_block_return()
    {
    }

    CSharpParser_switch_block_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_switch_block_return( const CSharpParser_switch_block_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_switch_block_return&
    operator=( const CSharpParser_switch_block_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_switch_sections_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_switch_sections_return()
    {
    }

    CSharpParser_switch_sections_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_switch_sections_return( const CSharpParser_switch_sections_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_switch_sections_return&
    operator=( const CSharpParser_switch_sections_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_switch_section_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_switch_section_return()
    {
    }

    CSharpParser_switch_section_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_switch_section_return( const CSharpParser_switch_section_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_switch_section_return&
    operator=( const CSharpParser_switch_section_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_switch_labels_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_switch_labels_return()
    {
    }

    CSharpParser_switch_labels_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_switch_labels_return( const CSharpParser_switch_labels_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_switch_labels_return&
    operator=( const CSharpParser_switch_labels_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_switch_label_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_switch_label_return()
    {
    }

    CSharpParser_switch_label_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_switch_label_return( const CSharpParser_switch_label_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_switch_label_return&
    operator=( const CSharpParser_switch_label_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_iteration_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_iteration_statement_return()
    {
    }

    CSharpParser_iteration_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_iteration_statement_return( const CSharpParser_iteration_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_iteration_statement_return&
    operator=( const CSharpParser_iteration_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_while_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_while_statement_return()
    {
    }

    CSharpParser_while_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_while_statement_return( const CSharpParser_while_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_while_statement_return&
    operator=( const CSharpParser_while_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_do_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_do_statement_return()
    {
    }

    CSharpParser_do_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_do_statement_return( const CSharpParser_do_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_do_statement_return&
    operator=( const CSharpParser_do_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_for_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_for_statement_return()
    {
    }

    CSharpParser_for_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_for_statement_return( const CSharpParser_for_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_for_statement_return&
    operator=( const CSharpParser_for_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_for_initializer_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_for_initializer_return()
    {
    }

    CSharpParser_for_initializer_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_for_initializer_return( const CSharpParser_for_initializer_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_for_initializer_return&
    operator=( const CSharpParser_for_initializer_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_for_condition_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_for_condition_return()
    {
    }

    CSharpParser_for_condition_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_for_condition_return( const CSharpParser_for_condition_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_for_condition_return&
    operator=( const CSharpParser_for_condition_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_for_iterator_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_for_iterator_return()
    {
    }

    CSharpParser_for_iterator_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_for_iterator_return( const CSharpParser_for_iterator_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_for_iterator_return&
    operator=( const CSharpParser_for_iterator_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_statement_expression_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_statement_expression_list_return()
    {
    }

    CSharpParser_statement_expression_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_statement_expression_list_return( const CSharpParser_statement_expression_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_statement_expression_list_return&
    operator=( const CSharpParser_statement_expression_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_foreach_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_foreach_statement_return()
    {
    }

    CSharpParser_foreach_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_foreach_statement_return( const CSharpParser_foreach_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_foreach_statement_return&
    operator=( const CSharpParser_foreach_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_jump_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_jump_statement_return()
    {
    }

    CSharpParser_jump_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_jump_statement_return( const CSharpParser_jump_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_jump_statement_return&
    operator=( const CSharpParser_jump_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_break_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_break_statement_return()
    {
    }

    CSharpParser_break_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_break_statement_return( const CSharpParser_break_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_break_statement_return&
    operator=( const CSharpParser_break_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_continue_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_continue_statement_return()
    {
    }

    CSharpParser_continue_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_continue_statement_return( const CSharpParser_continue_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_continue_statement_return&
    operator=( const CSharpParser_continue_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_goto_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_goto_statement_return()
    {
    }

    CSharpParser_goto_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_goto_statement_return( const CSharpParser_goto_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_goto_statement_return&
    operator=( const CSharpParser_goto_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_return_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_return_statement_return()
    {
    }

    CSharpParser_return_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_return_statement_return( const CSharpParser_return_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_return_statement_return&
    operator=( const CSharpParser_return_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_throw_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_throw_statement_return()
    {
    }

    CSharpParser_throw_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_throw_statement_return( const CSharpParser_throw_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_throw_statement_return&
    operator=( const CSharpParser_throw_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_try_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_try_statement_return()
    {
    }

    CSharpParser_try_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_try_statement_return( const CSharpParser_try_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_try_statement_return&
    operator=( const CSharpParser_try_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_catch_clauses_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_catch_clauses_return()
    {
    }

    CSharpParser_catch_clauses_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_catch_clauses_return( const CSharpParser_catch_clauses_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_catch_clauses_return&
    operator=( const CSharpParser_catch_clauses_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_specific_catch_clauses_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_specific_catch_clauses_return()
    {
    }

    CSharpParser_specific_catch_clauses_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_specific_catch_clauses_return( const CSharpParser_specific_catch_clauses_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_specific_catch_clauses_return&
    operator=( const CSharpParser_specific_catch_clauses_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_specific_catch_clause_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_specific_catch_clause_return()
    {
    }

    CSharpParser_specific_catch_clause_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_specific_catch_clause_return( const CSharpParser_specific_catch_clause_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_specific_catch_clause_return&
    operator=( const CSharpParser_specific_catch_clause_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_general_catch_clause_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_general_catch_clause_return()
    {
    }

    CSharpParser_general_catch_clause_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_general_catch_clause_return( const CSharpParser_general_catch_clause_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_general_catch_clause_return&
    operator=( const CSharpParser_general_catch_clause_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_finally_clause_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_finally_clause_return()
    {
    }

    CSharpParser_finally_clause_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_finally_clause_return( const CSharpParser_finally_clause_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_finally_clause_return&
    operator=( const CSharpParser_finally_clause_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_checked_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_checked_statement_return()
    {
    }

    CSharpParser_checked_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_checked_statement_return( const CSharpParser_checked_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_checked_statement_return&
    operator=( const CSharpParser_checked_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_unchecked_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_unchecked_statement_return()
    {
    }

    CSharpParser_unchecked_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_unchecked_statement_return( const CSharpParser_unchecked_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_unchecked_statement_return&
    operator=( const CSharpParser_unchecked_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_lock_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_lock_statement_return()
    {
    }

    CSharpParser_lock_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_lock_statement_return( const CSharpParser_lock_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_lock_statement_return&
    operator=( const CSharpParser_lock_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_using_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_using_statement_return()
    {
    }

    CSharpParser_using_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_using_statement_return( const CSharpParser_using_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_using_statement_return&
    operator=( const CSharpParser_using_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_resource_acquisition_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_resource_acquisition_return()
    {
    }

    CSharpParser_resource_acquisition_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_resource_acquisition_return( const CSharpParser_resource_acquisition_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_resource_acquisition_return&
    operator=( const CSharpParser_resource_acquisition_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_yield_statement_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_yield_statement_return()
    {
    }

    CSharpParser_yield_statement_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_yield_statement_return( const CSharpParser_yield_statement_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_yield_statement_return&
    operator=( const CSharpParser_yield_statement_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_predefined_type_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_predefined_type_return()
    {
    }

    CSharpParser_predefined_type_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_predefined_type_return( const CSharpParser_predefined_type_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_predefined_type_return&
    operator=( const CSharpParser_predefined_type_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_identifier_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_identifier_return()
    {
    }

    CSharpParser_identifier_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_identifier_return( const CSharpParser_identifier_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_identifier_return&
    operator=( const CSharpParser_identifier_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_keyword_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_keyword_return()
    {
    }

    CSharpParser_keyword_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_keyword_return( const CSharpParser_keyword_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_keyword_return&
    operator=( const CSharpParser_keyword_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_also_keyword_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_also_keyword_return()
    {
    }

    CSharpParser_also_keyword_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_also_keyword_return( const CSharpParser_also_keyword_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_also_keyword_return&
    operator=( const CSharpParser_also_keyword_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_literal_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_literal_return()
    {
    }

    CSharpParser_literal_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_literal_return( const CSharpParser_literal_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_literal_return&
    operator=( const CSharpParser_literal_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_assignment_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_assignment_list_return()
    {
    }

    CSharpParser_assignment_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_assignment_list_return( const CSharpParser_assignment_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_assignment_list_return&
    operator=( const CSharpParser_assignment_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_field_declarations_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_field_declarations_return()
    {
    }

    CSharpParser_field_declarations_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_field_declarations_return( const CSharpParser_field_declarations_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_field_declarations_return&
    operator=( const CSharpParser_field_declarations_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_property_declaration_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_property_declaration_list_return()
    {
    }

    CSharpParser_property_declaration_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_property_declaration_list_return( const CSharpParser_property_declaration_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_property_declaration_list_return&
    operator=( const CSharpParser_property_declaration_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_constant_declarations_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_constant_declarations_return()
    {
    }

    CSharpParser_constant_declarations_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_constant_declarations_return( const CSharpParser_constant_declarations_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_constant_declarations_return&
    operator=( const CSharpParser_constant_declarations_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_literals_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_literals_return()
    {
    }

    CSharpParser_literals_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_literals_return( const CSharpParser_literals_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_literals_return&
    operator=( const CSharpParser_literals_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_delegate_declaration_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_delegate_declaration_list_return()
    {
    }

    CSharpParser_delegate_declaration_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_delegate_declaration_list_return( const CSharpParser_delegate_declaration_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_delegate_declaration_list_return&
    operator=( const CSharpParser_delegate_declaration_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_local_variable_declaration_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_local_variable_declaration_list_return()
    {
    }

    CSharpParser_local_variable_declaration_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_local_variable_declaration_list_return( const CSharpParser_local_variable_declaration_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_local_variable_declaration_list_return&
    operator=( const CSharpParser_local_variable_declaration_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_local_variable_initializer_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_local_variable_initializer_list_return()
    {
    }

    CSharpParser_local_variable_initializer_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_local_variable_initializer_list_return( const CSharpParser_local_variable_initializer_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_local_variable_initializer_list_return&
    operator=( const CSharpParser_local_variable_initializer_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_expression_list_test_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_expression_list_test_return()
    {
    }

    CSharpParser_expression_list_test_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_expression_list_test_return( const CSharpParser_expression_list_test_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_expression_list_test_return&
    operator=( const CSharpParser_expression_list_test_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_unary_expression_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_unary_expression_list_return()
    {
    }

    CSharpParser_unary_expression_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_unary_expression_list_return( const CSharpParser_unary_expression_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_unary_expression_list_return&
    operator=( const CSharpParser_unary_expression_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_invocation_expression_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_invocation_expression_list_return()
    {
    }

    CSharpParser_invocation_expression_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_invocation_expression_list_return( const CSharpParser_invocation_expression_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_invocation_expression_list_return&
    operator=( const CSharpParser_invocation_expression_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_primary_expression_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_primary_expression_list_return()
    {
    }

    CSharpParser_primary_expression_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_primary_expression_list_return( const CSharpParser_primary_expression_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_primary_expression_list_return&
    operator=( const CSharpParser_primary_expression_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_non_assignment_expression_list_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_non_assignment_expression_list_return()
    {
    }

    CSharpParser_non_assignment_expression_list_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_non_assignment_expression_list_return( const CSharpParser_non_assignment_expression_list_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_non_assignment_expression_list_return&
    operator=( const CSharpParser_non_assignment_expression_list_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct CSharpParser_method_declarations_return : public CSharpParserImplTraits::RuleReturnValueType
{
public:
	typedef CSharpParserImplTraits::RuleReturnValueType BaseType;
    TreeType*	tree;


    
    CSharpParser_method_declarations_return()
    {
    }

    CSharpParser_method_declarations_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    CSharpParser_method_declarations_return( const CSharpParser_method_declarations_return& n )
    : BaseType(n)
    {
    }

    CSharpParser_method_declarations_return&
    operator=( const CSharpParser_method_declarations_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





class CSharpParserTokens
{
public:
	/** Symbolic definitions of all the tokens that the 
parser
 will work with.
	 * \{
	 *
	 * Antlr will define EOF, but we can't use that as it it is too common in
	 * in C header files and that would be confusing. There is no way to filter this out at the moment
	 * so we just undef it here for now. That isn't the value we get back from C recognizers
	 * anyway. We are looking for ANTLR_TOKEN_EOF.
	 */
	enum Tokens 
	{
		EOF_TOKEN = CSharpParserImplTraits::CommonTokenType::TOKEN_EOF
		, T__64 = 64 
		, T__65 = 65 
		, T__66 = 66 
		, T__67 = 67 
		, T__68 = 68 
		, T__69 = 69 
		, T__70 = 70 
		, T__71 = 71 
		, T__72 = 72 
		, T__73 = 73 
		, T__74 = 74 
		, T__75 = 75 
		, T__76 = 76 
		, T__77 = 77 
		, T__78 = 78 
		, T__79 = 79 
		, T__80 = 80 
		, T__81 = 81 
		, T__82 = 82 
		, T__83 = 83 
		, T__84 = 84 
		, T__85 = 85 
		, T__86 = 86 
		, T__87 = 87 
		, T__88 = 88 
		, T__89 = 89 
		, T__90 = 90 
		, T__91 = 91 
		, T__92 = 92 
		, T__93 = 93 
		, T__94 = 94 
		, T__95 = 95 
		, T__96 = 96 
		, T__97 = 97 
		, T__98 = 98 
		, T__99 = 99 
		, T__100 = 100 
		, T__101 = 101 
		, T__102 = 102 
		, T__103 = 103 
		, T__104 = 104 
		, T__105 = 105 
		, T__106 = 106 
		, T__107 = 107 
		, T__108 = 108 
		, T__109 = 109 
		, T__110 = 110 
		, T__111 = 111 
		, T__112 = 112 
		, T__113 = 113 
		, T__114 = 114 
		, T__115 = 115 
		, T__116 = 116 
		, T__117 = 117 
		, T__118 = 118 
		, T__119 = 119 
		, T__120 = 120 
		, T__121 = 121 
		, T__122 = 122 
		, T__123 = 123 
		, T__124 = 124 
		, T__125 = 125 
		, T__126 = 126 
		, T__127 = 127 
		, T__128 = 128 
		, T__129 = 129 
		, T__130 = 130 
		, T__131 = 131 
		, T__132 = 132 
		, T__133 = 133 
		, T__134 = 134 
		, T__135 = 135 
		, T__136 = 136 
		, T__137 = 137 
		, T__138 = 138 
		, T__139 = 139 
		, T__140 = 140 
		, T__141 = 141 
		, T__142 = 142 
		, T__143 = 143 
		, T__144 = 144 
		, T__145 = 145 
		, T__146 = 146 
		, T__147 = 147 
		, T__148 = 148 
		, T__149 = 149 
		, T__150 = 150 
		, T__151 = 151 
		, T__152 = 152 
		, T__153 = 153 
		, T__154 = 154 
		, T__155 = 155 
		, T__156 = 156 
		, T__157 = 157 
		, T__158 = 158 
		, T__159 = 159 
		, T__160 = 160 
		, T__161 = 161 
		, T__162 = 162 
		, T__163 = 163 
		, T__164 = 164 
		, T__165 = 165 
		, T__166 = 166 
		, T__167 = 167 
		, T__168 = 168 
		, T__169 = 169 
		, T__170 = 170 
		, T__171 = 171 
		, T__172 = 172 
		, T__173 = 173 
		, T__174 = 174 
		, T__175 = 175 
		, T__176 = 176 
		, T__177 = 177 
		, T__178 = 178 
		, T__179 = 179 
		, T__180 = 180 
		, T__181 = 181 
		, T__182 = 182 
		, T__183 = 183 
		, T__184 = 184 
		, T__185 = 185 
		, T__186 = 186 
		, T__187 = 187 
		, T__188 = 188 
		, T__189 = 189 
		, T__190 = 190 
		, T__191 = 191 
		, T__192 = 192 
		, T__193 = 193 
		, T__194 = 194 
		, T__195 = 195 
		, T__196 = 196 
		, T__197 = 197 
		, T__198 = 198 
		, T__199 = 199 
		, T__200 = 200 
		, T__201 = 201 
		, T__202 = 202 
		, T__203 = 203 
		, T__204 = 204 
		, CATCH = 4 
		, CLASS_DECL = 5 
		, COMMENT = 6 
		, Character_literal = 7 
		, DECIMAL_DIGIT = 8 
		, DEFINE = 9 
		, DEFINE_TOKEN = 10 
		, DOC_LINE_COMMENT = 11 
		, DOT = 12 
		, Decimal_digits = 13 
		, Decimal_integer_literal = 14 
		, ELIF = 15 
		, ELSE_TOKEN = 16 
		, ENDIF = 17 
		, ENDIF_TOKEN = 18 
		, ENUM = 19 
		, EscapeSequence = 20 
		, Exponent_part = 21 
		, FALSE = 22 
		, GT = 23 
		, GooBall = 24 
		, GooBallIdentifier = 25 
		, HEX_DIGIT = 26 
		, HEX_DIGITS = 27 
		, Hex_number = 28 
		, IDENTIFIER = 29 
		, IF = 30 
		, IF_TOKEN = 31 
		, INTEGER_TYPE_SUFFIX = 32 
		, IdentifierPart = 33 
		, IdentifierStart = 34 
		, LINE_COMMENT = 35 
		, LT_NULL = 36 
		, MINUS = 37 
		, NUMBER = 38 
		, PP_AND_EXPRESSION = 39 
		, PP_CONDITIONAL = 40 
		, PP_EQUALITY_EXPRESSION = 41 
		, PP_EXPRESSION = 42 
		, PP_OR_EXPRESSION = 43 
		, PP_PRIMARY_EXPRESSION = 44 
		, PP_UNARY_EXPRESSION = 45 
		, PREPROCESSOR_DIRECTIVE = 46 
		, PTR = 47 
		, Pragma = 48 
		, RPAREN = 49 
		, Real_literal = 50 
		, Real_type_suffix = 51 
		, SEMI = 52 
		, STRINGLITERAL = 53 
		, Sign = 54 
		, TRUE = 55 
		, TS = 56 
		, UNDEF = 57 
		, UNDEF_TOKEN = 58 
		, USING = 59 
		, VARIABLE_DECL = 60 
		, Verbatim_string_literal = 61 
		, Verbatim_string_literal_character = 62 
		, WS = 63 
	};

};

/** Context tracking structure for 
CSharpParser

 */
class CSharpParser : public 
CSharpParserImplTraits::BaseParserType
, public CSharpParserTokens
{
public:
	typedef CSharpParserImplTraits ImplTraits;
	typedef CSharpParser ComponentType;
	typedef ComponentType::StreamType StreamType;
	typedef 
CSharpParserImplTraits::BaseParserType
 BaseType;
	typedef ImplTraits::RecognizerSharedStateType<StreamType> RecognizerSharedStateType;
	typedef StreamType InputType;
	static const bool IsFiltered = false;


private:	
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
public:
    CSharpParser(InputType* instream);
    CSharpParser(InputType* instream, RecognizerSharedStateType* state);

    void init(InputType* instream  );

     
     CSharpParser_compilation_unit_return
     compilation_unit (); 
     
     CSharpParser_namespace_declaration_return
     namespace_declaration (); 
     
     CSharpParser_namespace_block_return
     namespace_block (); 
     
     CSharpParser_namespace_body_return
     namespace_body (bool bGlobal); 
     
     CSharpParser_extern_alias_directives_return
     extern_alias_directives (); 
     
     CSharpParser_extern_alias_directive_return
     extern_alias_directive (); 
     
     CSharpParser_using_directives_return
     using_directives (); 
     
     CSharpParser_using_directive_return
     using_directive (); 
     
     CSharpParser_using_alias_directive_return
     using_alias_directive (); 
     
     CSharpParser_using_namespace_directive_return
     using_namespace_directive (); 
     
     CSharpParser_namespace_member_declarations_return
     namespace_member_declarations (); 
     
     CSharpParser_namespace_member_declaration_return
     namespace_member_declaration (); 
     
     CSharpParser_type_declaration_return
     type_declaration (); 
     
     CSharpParser_qualified_identifier_return
     qualified_identifier (); 
     
     CSharpParser_namespace_name_return
     namespace_name (); 
     
     CSharpParser_modifiers_return
     modifiers (); 
     
     CSharpParser_modifier_return
     modifier (); 
     
     CSharpParser_class_member_declaration_return
     class_member_declaration (); 
     
     CSharpParser_primary_expression_return
     primary_expression (); 
     
     CSharpParser_primary_expression_start_return
     primary_expression_start (); 
     
     CSharpParser_primary_expression_part_return
     primary_expression_part (); 
     
     CSharpParser_access_identifier_return
     access_identifier (); 
     
     CSharpParser_access_operator_return
     access_operator (); 
     
     CSharpParser_brackets_or_arguments_return
     brackets_or_arguments (); 
     
     CSharpParser_brackets_return
     brackets (); 
     
     CSharpParser_paren_expression_return
     paren_expression (); 
     
     CSharpParser_arguments_return
     arguments (); 
     
     CSharpParser_argument_list_return
     argument_list (); 
     
     CSharpParser_argument_return
     argument (); 
     
     CSharpParser_argument_name_return
     argument_name (); 
     
     CSharpParser_argument_value_return
     argument_value (); 
     
     CSharpParser_ref_variable_reference_return
     ref_variable_reference (); 
     
     CSharpParser_variable_reference_return
     variable_reference (); 
     
     CSharpParser_rank_specifiers_return
     rank_specifiers (); 
     
     CSharpParser_rank_specifier_return
     rank_specifier (); 
     
     CSharpParser_dim_separators_return
     dim_separators (); 
     
     CSharpParser_delegate_creation_expression_return
     delegate_creation_expression (); 
     
     CSharpParser_anonymous_object_creation_expression_return
     anonymous_object_creation_expression (); 
     
     CSharpParser_anonymous_object_initializer_return
     anonymous_object_initializer (); 
     
     CSharpParser_member_declarator_list_return
     member_declarator_list (); 
     
     CSharpParser_member_declarator_return
     member_declarator (); 
     
     CSharpParser_primary_or_array_creation_expression_return
     primary_or_array_creation_expression (); 
     
     CSharpParser_array_creation_expression_return
     array_creation_expression (); 
     
     CSharpParser_array_initializer_return
     array_initializer (); 
     
     CSharpParser_variable_initializer_list_return
     variable_initializer_list (); 
     
     CSharpParser_variable_initializer_return
     variable_initializer (); 
     
     CSharpParser_sizeof_expression_return
     sizeof_expression (); 
     
     CSharpParser_checked_expression_return
     checked_expression (); 
     
     CSharpParser_unchecked_expression_return
     unchecked_expression (); 
     
     CSharpParser_default_value_expression_return
     default_value_expression (); 
     
     CSharpParser_anonymous_method_expression_return
     anonymous_method_expression (); 
     
     CSharpParser_explicit_anonymous_function_signature_return
     explicit_anonymous_function_signature (); 
     
     CSharpParser_explicit_anonymous_function_parameter_list_return
     explicit_anonymous_function_parameter_list (); 
     
     CSharpParser_explicit_anonymous_function_parameter_return
     explicit_anonymous_function_parameter (); 
     
     CSharpParser_anonymous_function_parameter_modifier_return
     anonymous_function_parameter_modifier (); 
     
     CSharpParser_object_creation_expression_return
     object_creation_expression (); 
     
     CSharpParser_object_or_collection_initializer_return
     object_or_collection_initializer (); 
     
     CSharpParser_collection_initializer_return
     collection_initializer (); 
     
     CSharpParser_element_initializer_list_return
     element_initializer_list (); 
     
     CSharpParser_element_initializer_return
     element_initializer (); 
     
     CSharpParser_object_initializer_return
     object_initializer (); 
     
     CSharpParser_member_initializer_list_return
     member_initializer_list (); 
     
     CSharpParser_member_initializer_return
     member_initializer (); 
     
     CSharpParser_initializer_value_return
     initializer_value (); 
     
     CSharpParser_typeof_expression_return
     typeof_expression (); 
     
     CSharpParser_unbound_type_name_return
     unbound_type_name (); 
     
     CSharpParser_unbound_type_name_start_return
     unbound_type_name_start (); 
     
     CSharpParser_unbound_type_name_part_return
     unbound_type_name_part (); 
     
     CSharpParser_generic_dimension_specifier_return
     generic_dimension_specifier (); 
     
     CSharpParser_commas_return
     commas (); 
     
     CSharpParser_type_name_return
     type_name (); 
     
     CSharpParser_namespace_or_type_name_return
     namespace_or_type_name (); 
     
     CSharpParser_type_or_generic_return
     type_or_generic (); 
     
     CSharpParser_qid_return
     qid (); 
     
     CSharpParser_qid_start_return
     qid_start (); 
     
     CSharpParser_qid_part_return
     qid_part (); 
     
     CSharpParser_generic_argument_list_return
     generic_argument_list (); 
     
     CSharpParser_type_arguments_return
     type_arguments (); 
     
     CSharpParser_type_return
     type (); 
     
     CSharpParser_non_nullable_type_return
     non_nullable_type (); 
     
     CSharpParser_non_array_type_return
     non_array_type (); 
     
     CSharpParser_array_type_return
     array_type (); 
     
     CSharpParser_unmanaged_type_return
     unmanaged_type (); 
     
     CSharpParser_class_type_return
     class_type (); 
     
     CSharpParser_pointer_type_return
     pointer_type (); 
     
     CSharpParser_block_return
     block (); 
     
     CSharpParser_statement_list_return
     statement_list (); 
     
     CSharpParser_expression_return
     expression (); 
     
     CSharpParser_expression_list_return
     expression_list (); 
     
     CSharpParser_assignment_return
     assignment (); 
     
     CSharpParser_unary_expression_return
     unary_expression (); 
     
     CSharpParser_cast_expression_return
     cast_expression (); 
     
     CSharpParser_assignment_operator_return
     assignment_operator (); 
     
     CSharpParser_pre_increment_expression_return
     pre_increment_expression (); 
     
     CSharpParser_pre_decrement_expression_return
     pre_decrement_expression (); 
     
     CSharpParser_pointer_indirection_expression_return
     pointer_indirection_expression (); 
     
     CSharpParser_addressof_expression_return
     addressof_expression (); 
     
     CSharpParser_non_assignment_expression_return
     non_assignment_expression (); 
     
     CSharpParser_multiplicative_expression_return
     multiplicative_expression (); 
     
     CSharpParser_additive_expression_return
     additive_expression (); 
     
     CSharpParser_shift_expression_return
     shift_expression (); 
     
     CSharpParser_relational_expression_return
     relational_expression (); 
     
     CSharpParser_equality_expression_return
     equality_expression (); 
     
     CSharpParser_and_expression_return
     and_expression (); 
     
     CSharpParser_exclusive_or_expression_return
     exclusive_or_expression (); 
     
     CSharpParser_inclusive_or_expression_return
     inclusive_or_expression (); 
     
     CSharpParser_conditional_and_expression_return
     conditional_and_expression (); 
     
     CSharpParser_conditional_or_expression_return
     conditional_or_expression (); 
     
     CSharpParser_null_coalescing_expression_return
     null_coalescing_expression (); 
     
     CSharpParser_conditional_expression_return
     conditional_expression (); 
     
     CSharpParser_lambda_expression_return
     lambda_expression (); 
     
     CSharpParser_anonymous_function_signature_return
     anonymous_function_signature (); 
     
     CSharpParser_implicit_anonymous_function_parameter_list_return
     implicit_anonymous_function_parameter_list (); 
     
     CSharpParser_implicit_anonymous_function_parameter_return
     implicit_anonymous_function_parameter (); 
     
     CSharpParser_anonymous_function_body_return
     anonymous_function_body (); 
     
     CSharpParser_query_expression_return
     query_expression (); 
     
     CSharpParser_query_body_return
     query_body (); 
     
     CSharpParser_query_continuation_return
     query_continuation (); 
     
     CSharpParser_query_body_clauses_return
     query_body_clauses (); 
     
     CSharpParser_query_body_clause_return
     query_body_clause (); 
     
     CSharpParser_from_clause_return
     from_clause (); 
     
     CSharpParser_join_clause_return
     join_clause (); 
     
     CSharpParser_let_clause_return
     let_clause (); 
     
     CSharpParser_orderby_clause_return
     orderby_clause (); 
     
     CSharpParser_ordering_list_return
     ordering_list (); 
     
     CSharpParser_ordering_return
     ordering (); 
     
     CSharpParser_ordering_direction_return
     ordering_direction (); 
     
     CSharpParser_select_or_group_clause_return
     select_or_group_clause (); 
     
     CSharpParser_select_clause_return
     select_clause (); 
     
     CSharpParser_group_clause_return
     group_clause (); 
     
     CSharpParser_where_clause_return
     where_clause (); 
     
     CSharpParser_boolean_expression_return
     boolean_expression (); 
     
     CSharpParser_global_attributes_return
     global_attributes (); 
     
     CSharpParser_global_attribute_return
     global_attribute (); 
     
     CSharpParser_global_attribute_target_specifier_return
     global_attribute_target_specifier (); 
     
     CSharpParser_global_attribute_target_return
     global_attribute_target (); 
     
     CSharpParser_attributes_return
     attributes (); 
     
     CSharpParser_attribute_sections_return
     attribute_sections (); 
     
     CSharpParser_attribute_section_return
     attribute_section (); 
     
     CSharpParser_attribute_target_specifier_return
     attribute_target_specifier (); 
     
     CSharpParser_attribute_target_return
     attribute_target (); 
     
     CSharpParser_attribute_list_return
     attribute_list (); 
     
     CSharpParser_attribute_return
     attribute (); 
     
     CSharpParser_attribute_arguments_return
     attribute_arguments (); 
     
     CSharpParser_positional_argument_list_return
     positional_argument_list (); 
     
     CSharpParser_positional_argument_return
     positional_argument (); 
     
     CSharpParser_named_argument_list_return
     named_argument_list (); 
     
     CSharpParser_named_argument_return
     named_argument (); 
     
     CSharpParser_attribute_argument_expression_return
     attribute_argument_expression (); 
     
     CSharpParser_class_declaration_return
     class_declaration (); 
     
     CSharpParser_class_base_return
     class_base (); 
     
     CSharpParser_interface_type_list_return
     interface_type_list (); 
     
     CSharpParser_class_body_return
     class_body (); 
     
     CSharpParser_class_member_declarations_return
     class_member_declarations (); 
     
     CSharpParser_constant_declaration_return
     constant_declaration (); 
     
     CSharpParser_constant_declarators_return
     constant_declarators (); 
     
     CSharpParser_constant_declarator_return
     constant_declarator (); 
     
     CSharpParser_constant_expression_return
     constant_expression (); 
     
     CSharpParser_field_declaration_return
     field_declaration (); 
     
     CSharpParser_variable_declarators_return
     variable_declarators (); 
     
     CSharpParser_variable_declarator_return
     variable_declarator (); 
     
     CSharpParser_method_declaration_return
     method_declaration (); 
     
     CSharpParser_method_header_return
     method_header (); 
     
     CSharpParser_method_body_return
     method_body (); 
     
     CSharpParser_member_name_return
     member_name (); 
     
     CSharpParser_property_declaration_return
     property_declaration (); 
     
     CSharpParser_accessor_declarations_return
     accessor_declarations (); 
     
     CSharpParser_get_accessor_declaration_return
     get_accessor_declaration (); 
     
     CSharpParser_set_accessor_declaration_return
     set_accessor_declaration (); 
     
     CSharpParser_accessor_modifier_return
     accessor_modifier (); 
     
     CSharpParser_accessor_body_return
     accessor_body (); 
     
     CSharpParser_event_declaration_return
     event_declaration (); 
     
     CSharpParser_event_modifiers_return
     event_modifiers (); 
     
     CSharpParser_event_accessor_declarations_return
     event_accessor_declarations (); 
     
     CSharpParser_add_accessor_declaration_return
     add_accessor_declaration (); 
     
     CSharpParser_remove_accessor_declaration_return
     remove_accessor_declaration (); 
     
     CSharpParser_enum_declaration_return
     enum_declaration (); 
     
     CSharpParser_enum_base_return
     enum_base (); 
     
     CSharpParser_enum_body_return
     enum_body (); 
     
     CSharpParser_enum_member_declarations_return
     enum_member_declarations (); 
     
     CSharpParser_enum_member_declaration_return
     enum_member_declaration (); 
     
     CSharpParser_integral_type_return
     integral_type (); 
     
     CSharpParser_delegate_declaration_return
     delegate_declaration (); 
     
     CSharpParser_delegate_modifiers_return
     delegate_modifiers (); 
     
     CSharpParser_variant_generic_parameter_list_return
     variant_generic_parameter_list (); 
     
     CSharpParser_variant_type_parameters_return
     variant_type_parameters (); 
     
     CSharpParser_variant_type_variable_name_return
     variant_type_variable_name (); 
     
     CSharpParser_variance_annotation_return
     variance_annotation (); 
     
     CSharpParser_type_parameter_constraints_clauses_return
     type_parameter_constraints_clauses (); 
     
     CSharpParser_type_parameter_constraints_clause_return
     type_parameter_constraints_clause (); 
     
     CSharpParser_type_parameter_constraint_list_return
     type_parameter_constraint_list (); 
     
     CSharpParser_secondary_constraint_list_return
     secondary_constraint_list (); 
     
     CSharpParser_secondary_constraint_return
     secondary_constraint (); 
     
     CSharpParser_type_variable_name_return
     type_variable_name (); 
     
     CSharpParser_constructor_constraint_return
     constructor_constraint (); 
     
     CSharpParser_return_type_return
     return_type (); 
     
     CSharpParser_formal_parameter_list_return
     formal_parameter_list (); 
     
     CSharpParser_formal_parameter_return
     formal_parameter (); 
     
     CSharpParser_fixed_parameters_return
     fixed_parameters (); 
     
     CSharpParser_fixed_parameter_return
     fixed_parameter (); 
     
     CSharpParser_default_argument_return
     default_argument (); 
     
     CSharpParser_parameter_modifier_return
     parameter_modifier (); 
     
     CSharpParser_parameter_array_return
     parameter_array (); 
     
     CSharpParser_interface_declaration_return
     interface_declaration (); 
     
     CSharpParser_interface_modifiers_return
     interface_modifiers (); 
     
     CSharpParser_interface_base_return
     interface_base (); 
     
     CSharpParser_interface_body_return
     interface_body (); 
     
     CSharpParser_interface_member_declarations_return
     interface_member_declarations (); 
     
     CSharpParser_interface_member_declaration_return
     interface_member_declaration (); 
     
     CSharpParser_interface_property_declaration_return
     interface_property_declaration (); 
     
     CSharpParser_interface_method_declaration_return
     interface_method_declaration (); 
     
     CSharpParser_interface_event_declaration_return
     interface_event_declaration (); 
     
     CSharpParser_interface_indexer_declaration_return
     interface_indexer_declaration (); 
     
     CSharpParser_interface_accessor_declarations_return
     interface_accessor_declarations (); 
     
     CSharpParser_interface_get_accessor_declaration_return
     interface_get_accessor_declaration (); 
     
     CSharpParser_interface_set_accessor_declaration_return
     interface_set_accessor_declaration (); 
     
     CSharpParser_method_modifiers_return
     method_modifiers (); 
     
     CSharpParser_struct_declaration_return
     struct_declaration (); 
     
     CSharpParser_struct_modifiers_return
     struct_modifiers (); 
     
     CSharpParser_struct_modifier_return
     struct_modifier (); 
     
     CSharpParser_struct_interfaces_return
     struct_interfaces (); 
     
     CSharpParser_struct_body_return
     struct_body (); 
     
     CSharpParser_struct_member_declarations_return
     struct_member_declarations (); 
     
     CSharpParser_struct_member_declaration_return
     struct_member_declaration (); 
     
     CSharpParser_indexer_declaration_return
     indexer_declaration (); 
     
     CSharpParser_indexer_declarator_return
     indexer_declarator (); 
     
     CSharpParser_operator_declaration_return
     operator_declaration (); 
     
     CSharpParser_operator_declarator_return
     operator_declarator (); 
     
     CSharpParser_unary_operator_declarator_return
     unary_operator_declarator (); 
     
     CSharpParser_overloadable_unary_operator_return
     overloadable_unary_operator (); 
     
     CSharpParser_binary_operator_declarator_return
     binary_operator_declarator (); 
     
     CSharpParser_overloadable_binary_operator_return
     overloadable_binary_operator (); 
     
     CSharpParser_conversion_operator_declaration_return
     conversion_operator_declaration (); 
     
     CSharpParser_conversion_operator_declarator_return
     conversion_operator_declarator (); 
     
     CSharpParser_operator_body_return
     operator_body (); 
     
     CSharpParser_constructor_declaration_return
     constructor_declaration (); 
     
     CSharpParser_constructor_declarator_return
     constructor_declarator (); 
     
     CSharpParser_constructor_initializer_return
     constructor_initializer (); 
     
     CSharpParser_constructor_body_return
     constructor_body (); 
     
     CSharpParser_destructor_declaration_return
     destructor_declaration (); 
     
     CSharpParser_destructor_body_return
     destructor_body (); 
     
     CSharpParser_invocation_expression_return
     invocation_expression (); 
     
     CSharpParser_invocation_start_return
     invocation_start (); 
     
     CSharpParser_invocation_part_return
     invocation_part (); 
     
     CSharpParser_statement_return
     statement (); 
     
     CSharpParser_embedded_statement_return
     embedded_statement (); 
     
     CSharpParser_fixed_statement_return
     fixed_statement (); 
     
     CSharpParser_fixed_pointer_declarators_return
     fixed_pointer_declarators (); 
     
     CSharpParser_fixed_pointer_declarator_return
     fixed_pointer_declarator (); 
     
     CSharpParser_fixed_pointer_initializer_return
     fixed_pointer_initializer (); 
     
     CSharpParser_unsafe_statement_return
     unsafe_statement (); 
     
     CSharpParser_labeled_statement_return
     labeled_statement (); 
     
     CSharpParser_declaration_statement_return
     declaration_statement (); 
     
     CSharpParser_local_variable_declaration_return
     local_variable_declaration (); 
     
     CSharpParser_local_variable_type_return
     local_variable_type (); 
     
     CSharpParser_local_variable_declarators_return
     local_variable_declarators (); 
     
     CSharpParser_local_variable_declarator_return
     local_variable_declarator (); 
     
     CSharpParser_local_variable_initializer_return
     local_variable_initializer (); 
     
     CSharpParser_stackalloc_initializer_return
     stackalloc_initializer (); 
     
     CSharpParser_local_constant_declaration_return
     local_constant_declaration (); 
     
     CSharpParser_expression_statement_return
     expression_statement (); 
     
     CSharpParser_statement_expression_return
     statement_expression (); 
     
     CSharpParser_selection_statement_return
     selection_statement (); 
     
     CSharpParser_if_statement_return
     if_statement (); 
     
     CSharpParser_else_statement_return
     else_statement (); 
     
     CSharpParser_switch_statement_return
     switch_statement (); 
     
     CSharpParser_switch_block_return
     switch_block (); 
     
     CSharpParser_switch_sections_return
     switch_sections (); 
     
     CSharpParser_switch_section_return
     switch_section (); 
     
     CSharpParser_switch_labels_return
     switch_labels (); 
     
     CSharpParser_switch_label_return
     switch_label (); 
     
     CSharpParser_iteration_statement_return
     iteration_statement (); 
     
     CSharpParser_while_statement_return
     while_statement (); 
     
     CSharpParser_do_statement_return
     do_statement (); 
     
     CSharpParser_for_statement_return
     for_statement (); 
     
     CSharpParser_for_initializer_return
     for_initializer (); 
     
     CSharpParser_for_condition_return
     for_condition (); 
     
     CSharpParser_for_iterator_return
     for_iterator (); 
     
     CSharpParser_statement_expression_list_return
     statement_expression_list (); 
     
     CSharpParser_foreach_statement_return
     foreach_statement (); 
     
     CSharpParser_jump_statement_return
     jump_statement (); 
     
     CSharpParser_break_statement_return
     break_statement (); 
     
     CSharpParser_continue_statement_return
     continue_statement (); 
     
     CSharpParser_goto_statement_return
     goto_statement (); 
     
     CSharpParser_return_statement_return
     return_statement (); 
     
     CSharpParser_throw_statement_return
     throw_statement (); 
     
     CSharpParser_try_statement_return
     try_statement (); 
     
     CSharpParser_catch_clauses_return
     catch_clauses (); 
     
     CSharpParser_specific_catch_clauses_return
     specific_catch_clauses (); 
     
     CSharpParser_specific_catch_clause_return
     specific_catch_clause (); 
     
     CSharpParser_general_catch_clause_return
     general_catch_clause (); 
     
     CSharpParser_finally_clause_return
     finally_clause (); 
     
     CSharpParser_checked_statement_return
     checked_statement (); 
     
     CSharpParser_unchecked_statement_return
     unchecked_statement (); 
     
     CSharpParser_lock_statement_return
     lock_statement (); 
     
     CSharpParser_using_statement_return
     using_statement (); 
     
     CSharpParser_resource_acquisition_return
     resource_acquisition (); 
     
     CSharpParser_yield_statement_return
     yield_statement (); 
     
     CSharpParser_predefined_type_return
     predefined_type (); 
     
     CSharpParser_identifier_return
     identifier (); 
     
     CSharpParser_keyword_return
     keyword (); 
     
     CSharpParser_also_keyword_return
     also_keyword (); 
     
     CSharpParser_literal_return
     literal (); 
     
     CSharpParser_assignment_list_return
     assignment_list (); 
     
     CSharpParser_field_declarations_return
     field_declarations (); 
     
     CSharpParser_property_declaration_list_return
     property_declaration_list (); 
     
     CSharpParser_constant_declarations_return
     constant_declarations (); 
     
     CSharpParser_literals_return
     literals (); 
     
     CSharpParser_delegate_declaration_list_return
     delegate_declaration_list (); 
     
     CSharpParser_local_variable_declaration_list_return
     local_variable_declaration_list (); 
     
     CSharpParser_local_variable_initializer_list_return
     local_variable_initializer_list (); 
     
     CSharpParser_expression_list_test_return
     expression_list_test (); 
     
     CSharpParser_unary_expression_list_return
     unary_expression_list (); 
     
     CSharpParser_invocation_expression_list_return
     invocation_expression_list (); 
     
     CSharpParser_primary_expression_list_return
     primary_expression_list (); 
     
     CSharpParser_non_assignment_expression_list_return
     non_assignment_expression_list (); 
     
     CSharpParser_method_declarations_return
     method_declarations (); 







































      
     bool
     msynpred( antlr3::ClassForwarder< synpred1_CSharp > );
        void msynpred1_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred2_CSharp > );
        void msynpred2_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred3_CSharp > );
        void msynpred3_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred4_CSharp > );
        void msynpred4_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred5_CSharp > );
        void msynpred5_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred6_CSharp > );
        void msynpred6_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred7_CSharp > );
        void msynpred7_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred8_CSharp > );
        void msynpred8_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred9_CSharp > );
        void msynpred9_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred10_CSharp > );
        void msynpred10_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred11_CSharp > );
        void msynpred11_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred12_CSharp > );
        void msynpred12_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred13_CSharp > );
        void msynpred13_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred14_CSharp > );
        void msynpred14_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred15_CSharp > );
        void msynpred15_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred16_CSharp > );
        void msynpred16_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred17_CSharp > );
        void msynpred17_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred18_CSharp > );
        void msynpred18_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred19_CSharp > );
        void msynpred19_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred20_CSharp > );
        void msynpred20_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred21_CSharp > );
        void msynpred21_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred22_CSharp > );
        void msynpred22_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred23_CSharp > );
        void msynpred23_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred24_CSharp > );
        void msynpred24_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred25_CSharp > );
        void msynpred25_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred26_CSharp > );
        void msynpred26_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred27_CSharp > );
        void msynpred27_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred28_CSharp > );
        void msynpred28_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred29_CSharp > );
        void msynpred29_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred30_CSharp > );
        void msynpred30_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred31_CSharp > );
        void msynpred31_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred32_CSharp > );
        void msynpred32_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred33_CSharp > );
        void msynpred33_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred34_CSharp > );
        void msynpred34_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred35_CSharp > );
        void msynpred35_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred36_CSharp > );
        void msynpred36_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred37_CSharp > );
        void msynpred37_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred38_CSharp > );
        void msynpred38_CSharp_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred39_CSharp > );
        void msynpred39_CSharp_fragment ();
    // Delegated rules

    const char *    getGrammarFileName();
    void            reset();
    ~CSharpParser();

};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//

/* End of token definitions for CSharpParser
 * =============================================================================
 */
/** } */

	}


#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
