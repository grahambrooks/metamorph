/** \file
 *  This C++ source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : CSharp.g
 *     -                            On : 2012-09-04 22:52:43
 *     -                for the parser : CSharpParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
using namespace antlr3;
#include    "CSharpParser.hpp"
/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

	namespace  CodeR  {

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8*   CSharpParserTokenNames[201+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "CATCH",
        (ANTLR_UINT8*) "CLASS_DECL",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "Character_literal",
        (ANTLR_UINT8*) "DECIMAL_DIGIT",
        (ANTLR_UINT8*) "DEFINE",
        (ANTLR_UINT8*) "DEFINE_TOKEN",
        (ANTLR_UINT8*) "DOC_LINE_COMMENT",
        (ANTLR_UINT8*) "DOT",
        (ANTLR_UINT8*) "Decimal_digits",
        (ANTLR_UINT8*) "Decimal_integer_literal",
        (ANTLR_UINT8*) "ELIF",
        (ANTLR_UINT8*) "ELSE_TOKEN",
        (ANTLR_UINT8*) "ENDIF",
        (ANTLR_UINT8*) "ENDIF_TOKEN",
        (ANTLR_UINT8*) "ENUM",
        (ANTLR_UINT8*) "EscapeSequence",
        (ANTLR_UINT8*) "Exponent_part",
        (ANTLR_UINT8*) "FALSE",
        (ANTLR_UINT8*) "GT",
        (ANTLR_UINT8*) "GooBall",
        (ANTLR_UINT8*) "GooBallIdentifier",
        (ANTLR_UINT8*) "HEX_DIGIT",
        (ANTLR_UINT8*) "HEX_DIGITS",
        (ANTLR_UINT8*) "Hex_number",
        (ANTLR_UINT8*) "IDENTIFIER",
        (ANTLR_UINT8*) "IF",
        (ANTLR_UINT8*) "IF_TOKEN",
        (ANTLR_UINT8*) "INTEGER_TYPE_SUFFIX",
        (ANTLR_UINT8*) "IdentifierPart",
        (ANTLR_UINT8*) "IdentifierStart",
        (ANTLR_UINT8*) "LINE_COMMENT",
        (ANTLR_UINT8*) "LT_NULL",
        (ANTLR_UINT8*) "MINUS",
        (ANTLR_UINT8*) "NUMBER",
        (ANTLR_UINT8*) "PP_AND_EXPRESSION",
        (ANTLR_UINT8*) "PP_CONDITIONAL",
        (ANTLR_UINT8*) "PP_EQUALITY_EXPRESSION",
        (ANTLR_UINT8*) "PP_EXPRESSION",
        (ANTLR_UINT8*) "PP_OR_EXPRESSION",
        (ANTLR_UINT8*) "PP_PRIMARY_EXPRESSION",
        (ANTLR_UINT8*) "PP_UNARY_EXPRESSION",
        (ANTLR_UINT8*) "PREPROCESSOR_DIRECTIVE",
        (ANTLR_UINT8*) "PTR",
        (ANTLR_UINT8*) "Pragma",
        (ANTLR_UINT8*) "RPAREN",
        (ANTLR_UINT8*) "Real_literal",
        (ANTLR_UINT8*) "Real_type_suffix",
        (ANTLR_UINT8*) "SEMI",
        (ANTLR_UINT8*) "STRINGLITERAL",
        (ANTLR_UINT8*) "Sign",
        (ANTLR_UINT8*) "TRUE",
        (ANTLR_UINT8*) "TS",
        (ANTLR_UINT8*) "UNDEF",
        (ANTLR_UINT8*) "UNDEF_TOKEN",
        (ANTLR_UINT8*) "USING",
        (ANTLR_UINT8*) "VARIABLE_DECL",
        (ANTLR_UINT8*) "Verbatim_string_literal",
        (ANTLR_UINT8*) "Verbatim_string_literal_character",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'!'",
        (ANTLR_UINT8*) "'!='",
        (ANTLR_UINT8*) "'%'",
        (ANTLR_UINT8*) "'%='",
        (ANTLR_UINT8*) "'&&'",
        (ANTLR_UINT8*) "'&'",
        (ANTLR_UINT8*) "'&='",
        (ANTLR_UINT8*) "'('",
        (ANTLR_UINT8*) "'*'",
        (ANTLR_UINT8*) "'*='",
        (ANTLR_UINT8*) "'+'",
        (ANTLR_UINT8*) "'++'",
        (ANTLR_UINT8*) "'+='",
        (ANTLR_UINT8*) "','",
        (ANTLR_UINT8*) "'--'",
        (ANTLR_UINT8*) "'-='",
        (ANTLR_UINT8*) "'/'",
        (ANTLR_UINT8*) "'/='",
        (ANTLR_UINT8*) "':'",
        (ANTLR_UINT8*) "'::'",
        (ANTLR_UINT8*) "'<'",
        (ANTLR_UINT8*) "'<<'",
        (ANTLR_UINT8*) "'<<='",
        (ANTLR_UINT8*) "'<='",
        (ANTLR_UINT8*) "'='",
        (ANTLR_UINT8*) "'=='",
        (ANTLR_UINT8*) "'=>'",
        (ANTLR_UINT8*) "'>='",
        (ANTLR_UINT8*) "'?'",
        (ANTLR_UINT8*) "'??'",
        (ANTLR_UINT8*) "'['",
        (ANTLR_UINT8*) "']'",
        (ANTLR_UINT8*) "'^'",
        (ANTLR_UINT8*) "'^='",
        (ANTLR_UINT8*) "'__arglist'",
        (ANTLR_UINT8*) "'abstract'",
        (ANTLR_UINT8*) "'add'",
        (ANTLR_UINT8*) "'alias'",
        (ANTLR_UINT8*) "'as'",
        (ANTLR_UINT8*) "'ascending'",
        (ANTLR_UINT8*) "'assembly'",
        (ANTLR_UINT8*) "'base'",
        (ANTLR_UINT8*) "'bool'",
        (ANTLR_UINT8*) "'break'",
        (ANTLR_UINT8*) "'by'",
        (ANTLR_UINT8*) "'byte'",
        (ANTLR_UINT8*) "'case'",
        (ANTLR_UINT8*) "'char'",
        (ANTLR_UINT8*) "'checked'",
        (ANTLR_UINT8*) "'class'",
        (ANTLR_UINT8*) "'const'",
        (ANTLR_UINT8*) "'continue'",
        (ANTLR_UINT8*) "'decimal'",
        (ANTLR_UINT8*) "'default'",
        (ANTLR_UINT8*) "'delegate'",
        (ANTLR_UINT8*) "'descending'",
        (ANTLR_UINT8*) "'do'",
        (ANTLR_UINT8*) "'double'",
        (ANTLR_UINT8*) "'dynamic'",
        (ANTLR_UINT8*) "'else'",
        (ANTLR_UINT8*) "'equals'",
        (ANTLR_UINT8*) "'event'",
        (ANTLR_UINT8*) "'explicit'",
        (ANTLR_UINT8*) "'extern'",
        (ANTLR_UINT8*) "'field'",
        (ANTLR_UINT8*) "'finally'",
        (ANTLR_UINT8*) "'fixed'",
        (ANTLR_UINT8*) "'float'",
        (ANTLR_UINT8*) "'for'",
        (ANTLR_UINT8*) "'foreach'",
        (ANTLR_UINT8*) "'from'",
        (ANTLR_UINT8*) "'get'",
        (ANTLR_UINT8*) "'goto'",
        (ANTLR_UINT8*) "'group'",
        (ANTLR_UINT8*) "'implicit'",
        (ANTLR_UINT8*) "'in'",
        (ANTLR_UINT8*) "'int'",
        (ANTLR_UINT8*) "'interface'",
        (ANTLR_UINT8*) "'internal'",
        (ANTLR_UINT8*) "'into'",
        (ANTLR_UINT8*) "'is'",
        (ANTLR_UINT8*) "'join'",
        (ANTLR_UINT8*) "'let'",
        (ANTLR_UINT8*) "'lock'",
        (ANTLR_UINT8*) "'long'",
        (ANTLR_UINT8*) "'method'",
        (ANTLR_UINT8*) "'module'",
        (ANTLR_UINT8*) "'namespace'",
        (ANTLR_UINT8*) "'new'",
        (ANTLR_UINT8*) "'object'",
        (ANTLR_UINT8*) "'on'",
        (ANTLR_UINT8*) "'operator'",
        (ANTLR_UINT8*) "'orderby'",
        (ANTLR_UINT8*) "'out'",
        (ANTLR_UINT8*) "'override'",
        (ANTLR_UINT8*) "'param'",
        (ANTLR_UINT8*) "'params'",
        (ANTLR_UINT8*) "'partial'",
        (ANTLR_UINT8*) "'pragma'",
        (ANTLR_UINT8*) "'private'",
        (ANTLR_UINT8*) "'property'",
        (ANTLR_UINT8*) "'protected'",
        (ANTLR_UINT8*) "'public'",
        (ANTLR_UINT8*) "'readonly'",
        (ANTLR_UINT8*) "'ref'",
        (ANTLR_UINT8*) "'remove'",
        (ANTLR_UINT8*) "'return'",
        (ANTLR_UINT8*) "'sbyte'",
        (ANTLR_UINT8*) "'sealed'",
        (ANTLR_UINT8*) "'select'",
        (ANTLR_UINT8*) "'set'",
        (ANTLR_UINT8*) "'short'",
        (ANTLR_UINT8*) "'sizeof'",
        (ANTLR_UINT8*) "'stackalloc'",
        (ANTLR_UINT8*) "'static'",
        (ANTLR_UINT8*) "'string'",
        (ANTLR_UINT8*) "'struct'",
        (ANTLR_UINT8*) "'switch'",
        (ANTLR_UINT8*) "'this'",
        (ANTLR_UINT8*) "'throw'",
        (ANTLR_UINT8*) "'try'",
        (ANTLR_UINT8*) "'type'",
        (ANTLR_UINT8*) "'typeof'",
        (ANTLR_UINT8*) "'uint'",
        (ANTLR_UINT8*) "'ulong'",
        (ANTLR_UINT8*) "'unchecked'",
        (ANTLR_UINT8*) "'unsafe'",
        (ANTLR_UINT8*) "'ushort'",
        (ANTLR_UINT8*) "'var'",
        (ANTLR_UINT8*) "'virtual'",
        (ANTLR_UINT8*) "'void'",
        (ANTLR_UINT8*) "'volatile'",
        (ANTLR_UINT8*) "'where'",
        (ANTLR_UINT8*) "'while'",
        (ANTLR_UINT8*) "'yield'",
        (ANTLR_UINT8*) "'{'",
        (ANTLR_UINT8*) "'|'",
        (ANTLR_UINT8*) "'|='",
        (ANTLR_UINT8*) "'||'",
        (ANTLR_UINT8*) "'}'",
        (ANTLR_UINT8*) "'~'"
       };


/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "CSharp.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* CSharpParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new CSharpParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
CSharpParser::CSharpParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new CSharpParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
CSharpParser::CSharpParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void CSharpParser::init(StreamType* instream)
{
    /* Create a LIST for recording rule memos.
     */
     typedef RecognizerSharedStateType::RuleMemoType RuleMemoType;
     this->setRuleMemo( new RuleMemoType(15) );	/* 16 bit depth is enough for 32768 rules! */

	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( CSharpParserTokenNames );


}

void
CSharpParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
CSharpParser::~CSharpParser()
 {
ctx->vectors->close(ctx->vectors);
/* We created the adaptor so we must free it
 */
ADAPTOR->free(ADAPTOR);

	if(this->getRuleMemo() != NULL)
	{
		delete this->getRuleMemo();
		this->setRuleMemo(NULL);
	}
}

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return CSharpParserTokenNames;
}


    	protected bool is_class_modifier()
    	{
    		return false;
    	}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_namespace_body_in_compilation_unit132_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_namespace_body_in_compilation_unit132( FOLLOW_namespace_body_in_compilation_unit132_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_151_in_namespace_declaration144_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_151_in_namespace_declaration144( FOLLOW_151_in_namespace_declaration144_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_qualified_identifier_in_namespace_declaration148_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_qualified_identifier_in_namespace_declaration148( FOLLOW_qualified_identifier_in_namespace_declaration148_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_namespace_block_in_namespace_declaration152_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_namespace_block_in_namespace_declaration152( FOLLOW_namespace_block_in_namespace_declaration152_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_namespace_declaration156_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_namespace_declaration156( FOLLOW_SEMI_in_namespace_declaration156_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_199_in_namespace_block168_bits[]	= { ANTLR_UINT64_LIT(0x0800000000080000), ANTLR_UINT64_LIT(0x8042000840000000), ANTLR_UINT64_LIT(0x401410EA41806000), ANTLR_UINT64_LIT(0x000000000000080A) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_199_in_namespace_block168( FOLLOW_199_in_namespace_block168_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_namespace_body_in_namespace_block172_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_namespace_body_in_namespace_block172( FOLLOW_namespace_body_in_namespace_block172_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_203_in_namespace_block177_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_203_in_namespace_block177( FOLLOW_203_in_namespace_block177_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_extern_alias_directives_in_namespace_body189_bits[]	= { ANTLR_UINT64_LIT(0x0800000000080002), ANTLR_UINT64_LIT(0x8042000840000000), ANTLR_UINT64_LIT(0x401410EA41806000), ANTLR_UINT64_LIT(0x000000000000000A) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_extern_alias_directives_in_namespace_body189( FOLLOW_extern_alias_directives_in_namespace_body189_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_using_directives_in_namespace_body194_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080002), ANTLR_UINT64_LIT(0x8042000840000000), ANTLR_UINT64_LIT(0x401410EA41806000), ANTLR_UINT64_LIT(0x000000000000000A) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_using_directives_in_namespace_body194( FOLLOW_using_directives_in_namespace_body194_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_global_attributes_in_namespace_body199_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080002), ANTLR_UINT64_LIT(0x8042000840000000), ANTLR_UINT64_LIT(0x401410EA41806000), ANTLR_UINT64_LIT(0x000000000000000A) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_global_attributes_in_namespace_body199( FOLLOW_global_attributes_in_namespace_body199_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_namespace_member_declarations_in_namespace_body204_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_namespace_member_declarations_in_namespace_body204( FOLLOW_namespace_member_declarations_in_namespace_body204_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_extern_alias_directive_in_extern_alias_directives216_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x8000000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_extern_alias_directive_in_extern_alias_directives216( FOLLOW_extern_alias_directive_in_extern_alias_directives216_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_127_in_extern_alias_directive228_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_127_in_extern_alias_directive228( FOLLOW_127_in_extern_alias_directive228_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_101_in_extern_alias_directive232_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_101_in_extern_alias_directive232( FOLLOW_101_in_extern_alias_directive232_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_extern_alias_directive236_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_extern_alias_directive236( FOLLOW_identifier_in_extern_alias_directive236_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_extern_alias_directive239_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_extern_alias_directive239( FOLLOW_SEMI_in_extern_alias_directive239_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_using_directive_in_using_directives250_bits[]	= { ANTLR_UINT64_LIT(0x0800000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_using_directive_in_using_directives250( FOLLOW_using_directive_in_using_directives250_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_using_alias_directive_in_using_directive267_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_using_alias_directive_in_using_directive267( FOLLOW_using_alias_directive_in_using_directive267_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_using_namespace_directive_in_using_directive273_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_using_namespace_directive_in_using_directive273( FOLLOW_using_namespace_directive_in_using_directive273_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_USING_in_using_alias_directive288_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_USING_in_using_alias_directive288( FOLLOW_USING_in_using_alias_directive288_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_using_alias_directive292_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_using_alias_directive292( FOLLOW_identifier_in_using_alias_directive292_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_88_in_using_alias_directive296_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_88_in_using_alias_directive296( FOLLOW_88_in_using_alias_directive296_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_namespace_or_type_name_in_using_alias_directive300_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_namespace_or_type_name_in_using_alias_directive300( FOLLOW_namespace_or_type_name_in_using_alias_directive300_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_using_alias_directive304_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_using_alias_directive304( FOLLOW_SEMI_in_using_alias_directive304_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_USING_in_using_namespace_directive315_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_USING_in_using_namespace_directive315( FOLLOW_USING_in_using_namespace_directive315_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_namespace_name_in_using_namespace_directive319_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_namespace_name_in_using_namespace_directive319( FOLLOW_namespace_name_in_using_namespace_directive319_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_using_namespace_directive323_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_using_namespace_directive323( FOLLOW_SEMI_in_using_namespace_directive323_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_namespace_member_declaration_in_namespace_member_declarations334_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080002), ANTLR_UINT64_LIT(0x8042000840000000), ANTLR_UINT64_LIT(0x401410EA41806000), ANTLR_UINT64_LIT(0x000000000000000A) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_namespace_member_declaration_in_namespace_member_declarations334( FOLLOW_namespace_member_declaration_in_namespace_member_declarations334_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_namespace_declaration_in_namespace_member_declaration346_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_namespace_declaration_in_namespace_member_declaration346( FOLLOW_namespace_declaration_in_namespace_member_declaration346_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attributes_in_namespace_member_declaration351_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000), ANTLR_UINT64_LIT(0x8042000800000000), ANTLR_UINT64_LIT(0x401410EA41006000), ANTLR_UINT64_LIT(0x000000000000000A) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attributes_in_namespace_member_declaration351( FOLLOW_attributes_in_namespace_member_declaration351_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_modifiers_in_namespace_member_declaration356_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000), ANTLR_UINT64_LIT(0x0042000000000000), ANTLR_UINT64_LIT(0x0010000200002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_modifiers_in_namespace_member_declaration356( FOLLOW_modifiers_in_namespace_member_declaration356_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_declaration_in_namespace_member_declaration361_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_declaration_in_namespace_member_declaration361( FOLLOW_type_declaration_in_namespace_member_declaration361_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_161_in_type_declaration378_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0010000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_161_in_type_declaration378( FOLLOW_161_in_type_declaration378_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_class_declaration_in_type_declaration388_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_class_declaration_in_type_declaration388( FOLLOW_class_declaration_in_type_declaration388_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_struct_declaration_in_type_declaration398_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_struct_declaration_in_type_declaration398( FOLLOW_struct_declaration_in_type_declaration398_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_declaration_in_type_declaration408_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_declaration_in_type_declaration408( FOLLOW_interface_declaration_in_type_declaration408_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_class_declaration_in_type_declaration421_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_class_declaration_in_type_declaration421( FOLLOW_class_declaration_in_type_declaration421_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_struct_declaration_in_type_declaration426_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_struct_declaration_in_type_declaration426( FOLLOW_struct_declaration_in_type_declaration426_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_declaration_in_type_declaration431_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_declaration_in_type_declaration431( FOLLOW_interface_declaration_in_type_declaration431_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_enum_declaration_in_type_declaration436_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_enum_declaration_in_type_declaration436( FOLLOW_enum_declaration_in_type_declaration436_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_delegate_declaration_in_type_declaration441_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_delegate_declaration_in_type_declaration441( FOLLOW_delegate_declaration_in_type_declaration441_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_qualified_identifier453_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_qualified_identifier453( FOLLOW_identifier_in_qualified_identifier453_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_DOT_in_qualified_identifier456_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_DOT_in_qualified_identifier456( FOLLOW_DOT_in_qualified_identifier456_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_qualified_identifier458_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_qualified_identifier458( FOLLOW_identifier_in_qualified_identifier458_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_namespace_or_type_name_in_namespace_name471_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_namespace_or_type_name_in_namespace_name471( FOLLOW_namespace_or_type_name_in_namespace_name471_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_modifier_in_modifiers482_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x8000000800000000), ANTLR_UINT64_LIT(0x400410E841004000), ANTLR_UINT64_LIT(0x000000000000000A) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_modifier_in_modifiers482( FOLLOW_modifier_in_modifiers482_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attributes_in_class_member_declaration570_bits[]	= { ANTLR_UINT64_LIT(0x0000000020080000), ANTLR_UINT64_LIT(0xF6D6B5BC00000000), ANTLR_UINT64_LIT(0xDA1CFAFED776F649), ANTLR_UINT64_LIT(0x000000000000105F) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attributes_in_class_member_declaration570( FOLLOW_attributes_in_class_member_declaration570_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_modifiers_in_class_member_declaration575_bits[]	= { ANTLR_UINT64_LIT(0x0000000020080000), ANTLR_UINT64_LIT(0x76D6B5B400000000), ANTLR_UINT64_LIT(0x9A18EA169676B649), ANTLR_UINT64_LIT(0x0000000000001055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_modifiers_in_class_member_declaration575( FOLLOW_modifiers_in_class_member_declaration575_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_114_in_class_member_declaration585_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_114_in_class_member_declaration585( FOLLOW_114_in_class_member_declaration585_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_class_member_declaration589_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_class_member_declaration589( FOLLOW_type_in_class_member_declaration589_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_constant_declarators_in_class_member_declaration593_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_constant_declarators_in_class_member_declaration593( FOLLOW_constant_declarators_in_class_member_declaration593_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_class_member_declaration597_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_class_member_declaration597( FOLLOW_SEMI_in_class_member_declaration597_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_event_declaration_in_class_member_declaration603_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_event_declaration_in_class_member_declaration603( FOLLOW_event_declaration_in_class_member_declaration603_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_161_in_class_member_declaration611_bits[]	= { ANTLR_UINT64_LIT(0x20A4005030400080), ANTLR_UINT64_LIT(0x1692B5B400000000), ANTLR_UINT64_LIT(0x9A18EA149676B249), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_161_in_class_member_declaration611( FOLLOW_161_in_class_member_declaration611_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_method_declaration_in_class_member_declaration622_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_method_declaration_in_class_member_declaration622( FOLLOW_method_declaration_in_class_member_declaration622_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_declaration_in_class_member_declaration630_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_declaration_in_class_member_declaration630( FOLLOW_interface_declaration_in_class_member_declaration630_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_class_declaration_in_class_member_declaration638_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_class_declaration_in_class_member_declaration638( FOLLOW_class_declaration_in_class_member_declaration638_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_struct_declaration_in_class_member_declaration645_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_struct_declaration_in_class_member_declaration645( FOLLOW_struct_declaration_in_class_member_declaration645_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_declaration_in_class_member_declaration656_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_declaration_in_class_member_declaration656( FOLLOW_interface_declaration_in_class_member_declaration656_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_194_in_class_member_declaration663_bits[]	= { ANTLR_UINT64_LIT(0x20A4005030400080), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_194_in_class_member_declaration663( FOLLOW_194_in_class_member_declaration663_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_method_declaration_in_class_member_declaration667_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_method_declaration_in_class_member_declaration667( FOLLOW_method_declaration_in_class_member_declaration667_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_class_member_declaration673_bits[]	= { ANTLR_UINT64_LIT(0x20A4005030400080), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A48EA149E769249), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_class_member_declaration673( FOLLOW_type_in_class_member_declaration673_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_method_declaration_in_class_member_declaration696_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_method_declaration_in_class_member_declaration696( FOLLOW_method_declaration_in_class_member_declaration696_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_property_declaration_in_class_member_declaration718_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_property_declaration_in_class_member_declaration718( FOLLOW_property_declaration_in_class_member_declaration718_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_name_in_class_member_declaration740_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_name_in_class_member_declaration740( FOLLOW_type_name_in_class_member_declaration740_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_DOT_in_class_member_declaration742_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0040000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_DOT_in_class_member_declaration742( FOLLOW_DOT_in_class_member_declaration742_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_indexer_declaration_in_class_member_declaration744_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_indexer_declaration_in_class_member_declaration744( FOLLOW_indexer_declaration_in_class_member_declaration744_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_indexer_declaration_in_class_member_declaration755_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_indexer_declaration_in_class_member_declaration755( FOLLOW_indexer_declaration_in_class_member_declaration755_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_field_declaration_in_class_member_declaration764_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_field_declaration_in_class_member_declaration764( FOLLOW_field_declaration_in_class_member_declaration764_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_operator_declaration_in_class_member_declaration778_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_operator_declaration_in_class_member_declaration778( FOLLOW_operator_declaration_in_class_member_declaration778_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_class_declaration_in_class_member_declaration793_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_class_declaration_in_class_member_declaration793( FOLLOW_class_declaration_in_class_member_declaration793_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_struct_declaration_in_class_member_declaration801_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_struct_declaration_in_class_member_declaration801( FOLLOW_struct_declaration_in_class_member_declaration801_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_enum_declaration_in_class_member_declaration808_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_enum_declaration_in_class_member_declaration808( FOLLOW_enum_declaration_in_class_member_declaration808_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_delegate_declaration_in_class_member_declaration816_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_delegate_declaration_in_class_member_declaration816( FOLLOW_delegate_declaration_in_class_member_declaration816_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_conversion_operator_declaration_in_class_member_declaration823_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_conversion_operator_declaration_in_class_member_declaration823( FOLLOW_conversion_operator_declaration_in_class_member_declaration823_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_constructor_declaration_in_class_member_declaration829_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_constructor_declaration_in_class_member_declaration829( FOLLOW_constructor_declaration_in_class_member_declaration829_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_destructor_declaration_in_class_member_declaration836_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_destructor_declaration_in_class_member_declaration836( FOLLOW_destructor_declaration_in_class_member_declaration836_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_182_in_primary_expression860_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_182_in_primary_expression860( FOLLOW_182_in_primary_expression860_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_brackets_in_primary_expression864_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001002), ANTLR_UINT64_LIT(0x0000000040000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_brackets_in_primary_expression864( FOLLOW_brackets_in_primary_expression864_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_primary_expression_part_in_primary_expression868_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001002), ANTLR_UINT64_LIT(0x0000000040000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_primary_expression_part_in_primary_expression868( FOLLOW_primary_expression_part_in_primary_expression868_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_182_in_primary_expression882_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_182_in_primary_expression882( FOLLOW_182_in_primary_expression882_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_brackets_in_primary_expression886_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001002), ANTLR_UINT64_LIT(0x0000000040000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_brackets_in_primary_expression886( FOLLOW_brackets_in_primary_expression886_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_primary_expression_part_in_primary_expression890_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001002), ANTLR_UINT64_LIT(0x0000000040000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_primary_expression_part_in_primary_expression890( FOLLOW_primary_expression_part_in_primary_expression890_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_primary_expression_start_in_primary_expression896_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001002), ANTLR_UINT64_LIT(0x0000000040000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_primary_expression_start_in_primary_expression896( FOLLOW_primary_expression_start_in_primary_expression896_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_primary_expression_part_in_primary_expression898_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001002), ANTLR_UINT64_LIT(0x0000000040000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_primary_expression_part_in_primary_expression898( FOLLOW_primary_expression_part_in_primary_expression898_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_152_in_primary_expression904_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x00000000000000D5) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_152_in_primary_expression904( FOLLOW_152_in_primary_expression904_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_object_creation_expression_in_primary_expression931_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001000), ANTLR_UINT64_LIT(0x0000000040000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_object_creation_expression_in_primary_expression931( FOLLOW_object_creation_expression_in_primary_expression931_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_primary_expression_part_in_primary_expression935_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001002), ANTLR_UINT64_LIT(0x0000000040000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_primary_expression_part_in_primary_expression935( FOLLOW_primary_expression_part_in_primary_expression935_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_delegate_creation_expression_in_primary_expression960_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_delegate_creation_expression_in_primary_expression960( FOLLOW_delegate_creation_expression_in_primary_expression960_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_object_creation_expression_in_primary_expression967_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_object_creation_expression_in_primary_expression967( FOLLOW_object_creation_expression_in_primary_expression967_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_anonymous_object_creation_expression_in_primary_expression974_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_anonymous_object_creation_expression_in_primary_expression974( FOLLOW_anonymous_object_creation_expression_in_primary_expression974_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_sizeof_expression_in_primary_expression991_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_sizeof_expression_in_primary_expression991( FOLLOW_sizeof_expression_in_primary_expression991_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_checked_expression_in_primary_expression1002_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_checked_expression_in_primary_expression1002( FOLLOW_checked_expression_in_primary_expression1002_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unchecked_expression_in_primary_expression1021_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unchecked_expression_in_primary_expression1021( FOLLOW_unchecked_expression_in_primary_expression1021_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_default_value_expression_in_primary_expression1038_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_default_value_expression_in_primary_expression1038( FOLLOW_default_value_expression_in_primary_expression1038_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_anonymous_method_expression_in_primary_expression1051_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_anonymous_method_expression_in_primary_expression1051( FOLLOW_anonymous_method_expression_in_primary_expression1051_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_predefined_type_in_primary_expression_start1065_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_predefined_type_in_primary_expression_start1065( FOLLOW_predefined_type_in_primary_expression_start1065_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_primary_expression_start1093_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000100000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_primary_expression_start1093( FOLLOW_identifier_in_primary_expression_start1093_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_generic_argument_list_in_primary_expression_start1097_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_generic_argument_list_in_primary_expression_start1097( FOLLOW_generic_argument_list_in_primary_expression_start1097_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_primary_expression_start1102_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000080000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_primary_expression_start1102( FOLLOW_identifier_in_primary_expression_start1102_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_83_in_primary_expression_start1105_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_83_in_primary_expression_start1105( FOLLOW_83_in_primary_expression_start1105_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_primary_expression_start1109_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_primary_expression_start1109( FOLLOW_identifier_in_primary_expression_start1109_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_182_in_primary_expression_start1116_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_182_in_primary_expression_start1116( FOLLOW_182_in_primary_expression_start1116_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_105_in_primary_expression_start1122_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_105_in_primary_expression_start1122( FOLLOW_105_in_primary_expression_start1122_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_paren_expression_in_primary_expression_start1127_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_paren_expression_in_primary_expression_start1127( FOLLOW_paren_expression_in_primary_expression_start1127_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_typeof_expression_in_primary_expression_start1132_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_typeof_expression_in_primary_expression_start1132( FOLLOW_typeof_expression_in_primary_expression_start1132_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_literal_in_primary_expression_start1150_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_literal_in_primary_expression_start1150( FOLLOW_literal_in_primary_expression_start1150_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_access_identifier_in_primary_expression_part1161_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_access_identifier_in_primary_expression_part1161( FOLLOW_access_identifier_in_primary_expression_part1161_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_brackets_or_arguments_in_primary_expression_part1166_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_brackets_or_arguments_in_primary_expression_part1166( FOLLOW_brackets_or_arguments_in_primary_expression_part1166_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_access_operator_in_access_identifier1177_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_access_operator_in_access_identifier1177( FOLLOW_access_operator_in_access_identifier1177_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_or_generic_in_access_identifier1181_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_or_generic_in_access_identifier1181( FOLLOW_type_or_generic_in_access_identifier1181_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_brackets_in_brackets_or_arguments1209_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_brackets_in_brackets_or_arguments1209( FOLLOW_brackets_in_brackets_or_arguments1209_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_arguments_in_brackets_or_arguments1214_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_arguments_in_brackets_or_arguments1214( FOLLOW_arguments_in_brackets_or_arguments1214_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_94_in_brackets1225_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B480004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_94_in_brackets1225( FOLLOW_94_in_brackets1225_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_brackets1229_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000080000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_list_in_brackets1229( FOLLOW_expression_list_in_brackets1229_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_95_in_brackets1234_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_95_in_brackets1234( FOLLOW_95_in_brackets1234_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_paren_expression1245_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_paren_expression1245( FOLLOW_71_in_paren_expression1245_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_paren_expression1249_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_paren_expression1249( FOLLOW_expression_in_paren_expression1249_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_paren_expression1253_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_paren_expression1253( FOLLOW_RPAREN_in_paren_expression1253_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_arguments1264_bits[]	= { ANTLR_UINT64_LIT(0x20A6007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EB14B7769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_arguments1264( FOLLOW_71_in_arguments1264_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_argument_list_in_arguments1268_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_argument_list_in_arguments1268( FOLLOW_argument_list_in_arguments1268_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_arguments1273_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_arguments1273( FOLLOW_RPAREN_in_arguments1273_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_argument_in_argument_list1284_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_argument_in_argument_list1284( FOLLOW_argument_in_argument_list1284_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_argument_list1287_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EB14B7769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_argument_list1287( FOLLOW_77_in_argument_list1287_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_argument_in_argument_list1289_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_argument_in_argument_list1289( FOLLOW_argument_in_argument_list1289_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_argument_name_in_argument1307_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EB14B7769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_argument_name_in_argument1307( FOLLOW_argument_name_in_argument1307_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_argument_value_in_argument1309_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_argument_value_in_argument1309( FOLLOW_argument_value_in_argument1309_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_argument_value_in_argument1314_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_argument_value_in_argument1314( FOLLOW_argument_value_in_argument1314_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_argument_name1325_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_argument_name1325( FOLLOW_identifier_in_argument_name1325_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_82_in_argument_name1327_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_82_in_argument_name1327( FOLLOW_82_in_argument_name1327_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_argument_value1338_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_argument_value1338( FOLLOW_expression_in_argument_value1338_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_ref_variable_reference_in_argument_value1343_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_ref_variable_reference_in_argument_value1343( FOLLOW_ref_variable_reference_in_argument_value1343_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_157_in_argument_value1349_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_157_in_argument_value1349( FOLLOW_157_in_argument_value1349_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_variable_reference_in_argument_value1353_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_variable_reference_in_argument_value1353( FOLLOW_variable_reference_in_argument_value1353_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_168_in_ref_variable_reference1364_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_168_in_ref_variable_reference1364( FOLLOW_168_in_ref_variable_reference1364_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_ref_variable_reference1390_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_ref_variable_reference1390( FOLLOW_71_in_ref_variable_reference1390_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_ref_variable_reference1394_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_ref_variable_reference1394( FOLLOW_type_in_ref_variable_reference1394_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_ref_variable_reference1398_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EB1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_ref_variable_reference1398( FOLLOW_RPAREN_in_ref_variable_reference1398_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_ref_variable_reference_in_ref_variable_reference1403_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_ref_variable_reference_in_ref_variable_reference1403( FOLLOW_ref_variable_reference_in_ref_variable_reference1403_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_variable_reference_in_ref_variable_reference1407_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_variable_reference_in_ref_variable_reference1407( FOLLOW_variable_reference_in_ref_variable_reference1407_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_variable_reference_in_ref_variable_reference1443_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_variable_reference_in_ref_variable_reference1443( FOLLOW_variable_reference_in_ref_variable_reference1443_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_variable_reference1460_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_variable_reference1460( FOLLOW_expression_in_variable_reference1460_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_rank_specifier_in_rank_specifiers1470_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000040000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_rank_specifier_in_rank_specifiers1470( FOLLOW_rank_specifier_in_rank_specifiers1470_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_94_in_rank_specifier1482_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000080002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_94_in_rank_specifier1482( FOLLOW_94_in_rank_specifier1482_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_dim_separators_in_rank_specifier1486_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000080000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_dim_separators_in_rank_specifier1486( FOLLOW_dim_separators_in_rank_specifier1486_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_95_in_rank_specifier1491_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_95_in_rank_specifier1491( FOLLOW_95_in_rank_specifier1491_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_dim_separators1502_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_dim_separators1502( FOLLOW_77_in_dim_separators1502_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_name_in_delegate_creation_expression1514_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_name_in_delegate_creation_expression1514( FOLLOW_type_name_in_delegate_creation_expression1514_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_delegate_creation_expression1518_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_delegate_creation_expression1518( FOLLOW_71_in_delegate_creation_expression1518_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_name_in_delegate_creation_expression1522_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_name_in_delegate_creation_expression1522( FOLLOW_type_name_in_delegate_creation_expression1522_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_delegate_creation_expression1526_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_delegate_creation_expression1526( FOLLOW_RPAREN_in_delegate_creation_expression1526_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression1537_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression1537( FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression1537_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_199_in_anonymous_object_initializer1548_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400002000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000851) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_199_in_anonymous_object_initializer1548( FOLLOW_199_in_anonymous_object_initializer1548_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_member_declarator_list_in_anonymous_object_initializer1552_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_member_declarator_list_in_anonymous_object_initializer1552( FOLLOW_member_declarator_list_in_anonymous_object_initializer1552_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_anonymous_object_initializer1557_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_anonymous_object_initializer1557( FOLLOW_77_in_anonymous_object_initializer1557_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_203_in_anonymous_object_initializer1562_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_203_in_anonymous_object_initializer1562( FOLLOW_203_in_anonymous_object_initializer1562_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_member_declarator_in_member_declarator_list1573_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_member_declarator_in_member_declarator_list1573( FOLLOW_member_declarator_in_member_declarator_list1573_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_member_declarator_list1577_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_member_declarator_list1577( FOLLOW_77_in_member_declarator_list1577_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_member_declarator_in_member_declarator_list1579_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_member_declarator_in_member_declarator_list1579( FOLLOW_member_declarator_in_member_declarator_list1579_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_member_declarator1592_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000), ANTLR_UINT64_LIT(0x0000000001100000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_member_declarator1592( FOLLOW_identifier_in_member_declarator1592_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_generic_argument_list_in_member_declarator1603_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_generic_argument_list_in_member_declarator1603( FOLLOW_generic_argument_list_in_member_declarator1603_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_DOT_in_member_declarator1611_bits[]	= { ANTLR_UINT64_LIT(0x20A4005030400080), ANTLR_UINT64_LIT(0x16F1B7B400000080), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_DOT_in_member_declarator1611( FOLLOW_DOT_in_member_declarator1611_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_primary_or_array_creation_expression_in_member_declarator1615_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_primary_or_array_creation_expression_in_member_declarator1615( FOLLOW_primary_or_array_creation_expression_in_member_declarator1615_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_88_in_member_declarator1623_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_88_in_member_declarator1623( FOLLOW_88_in_member_declarator1623_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_member_declarator1627_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_member_declarator1627( FOLLOW_expression_in_member_declarator1627_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_array_creation_expression_in_primary_or_array_creation_expression1649_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_array_creation_expression_in_primary_or_array_creation_expression1649( FOLLOW_array_creation_expression_in_primary_or_array_creation_expression1649_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_primary_expression_in_primary_or_array_creation_expression1654_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_primary_expression_in_primary_or_array_creation_expression1654( FOLLOW_primary_expression_in_primary_or_array_creation_expression1654_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_152_in_array_creation_expression1667_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B440000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_152_in_array_creation_expression1667( FOLLOW_152_in_array_creation_expression1667_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_array_creation_expression1679_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_array_creation_expression1679( FOLLOW_type_in_array_creation_expression1679_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_94_in_array_creation_expression1692_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_94_in_array_creation_expression1692( FOLLOW_94_in_array_creation_expression1692_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_array_creation_expression1696_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000080000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_list_in_array_creation_expression1696( FOLLOW_expression_list_in_array_creation_expression1696_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_95_in_array_creation_expression1700_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001002), ANTLR_UINT64_LIT(0x0000000040000080), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_95_in_array_creation_expression1700( FOLLOW_95_in_array_creation_expression1700_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_rank_specifiers_in_array_creation_expression1717_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_rank_specifiers_in_array_creation_expression1717( FOLLOW_rank_specifiers_in_array_creation_expression1717_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_array_initializer_in_array_creation_expression1722_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_array_initializer_in_array_creation_expression1722( FOLLOW_array_initializer_in_array_creation_expression1722_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_arguments_in_array_creation_expression1769_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_arguments_in_array_creation_expression1769( FOLLOW_arguments_in_array_creation_expression1769_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_invocation_part_in_array_creation_expression1773_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001000), ANTLR_UINT64_LIT(0x0000000040000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_invocation_part_in_array_creation_expression1773( FOLLOW_invocation_part_in_array_creation_expression1773_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_invocation_part_in_array_creation_expression1787_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001000), ANTLR_UINT64_LIT(0x0000000040000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_invocation_part_in_array_creation_expression1787( FOLLOW_invocation_part_in_array_creation_expression1787_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_arguments_in_array_creation_expression1801_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_arguments_in_array_creation_expression1801( FOLLOW_arguments_in_array_creation_expression1801_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_array_initializer_in_array_creation_expression1825_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_array_initializer_in_array_creation_expression1825( FOLLOW_array_initializer_in_array_creation_expression1825_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_rank_specifier_in_array_creation_expression1839_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_rank_specifier_in_array_creation_expression1839( FOLLOW_rank_specifier_in_array_creation_expression1839_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_array_initializer_in_array_creation_expression1855_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_array_initializer_in_array_creation_expression1855( FOLLOW_array_initializer_in_array_creation_expression1855_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_199_in_array_initializer1881_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400006DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x00000000000018D1) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_199_in_array_initializer1881( FOLLOW_199_in_array_initializer1881_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_variable_initializer_list_in_array_initializer1885_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_variable_initializer_list_in_array_initializer1885( FOLLOW_variable_initializer_list_in_array_initializer1885_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_array_initializer1890_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_array_initializer1890( FOLLOW_77_in_array_initializer1890_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_203_in_array_initializer1895_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_203_in_array_initializer1895( FOLLOW_203_in_array_initializer1895_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_variable_initializer_in_variable_initializer_list1906_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_variable_initializer_in_variable_initializer_list1906( FOLLOW_variable_initializer_in_variable_initializer_list1906_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_variable_initializer_list1909_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x00000000000010D1) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_variable_initializer_list1909( FOLLOW_77_in_variable_initializer_list1909_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_variable_initializer_in_variable_initializer_list1911_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_variable_initializer_in_variable_initializer_list1911( FOLLOW_variable_initializer_in_variable_initializer_list1911_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_variable_initializer1924_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_variable_initializer1924( FOLLOW_expression_in_variable_initializer1924_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_array_initializer_in_variable_initializer1928_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_array_initializer_in_variable_initializer1928( FOLLOW_array_initializer_in_variable_initializer1928_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_176_in_sizeof_expression1939_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_176_in_sizeof_expression1939( FOLLOW_176_in_sizeof_expression1939_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_sizeof_expression1943_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_sizeof_expression1943( FOLLOW_71_in_sizeof_expression1943_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unmanaged_type_in_sizeof_expression1947_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unmanaged_type_in_sizeof_expression1947( FOLLOW_unmanaged_type_in_sizeof_expression1947_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_sizeof_expression1951_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_sizeof_expression1951( FOLLOW_RPAREN_in_sizeof_expression1951_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_112_in_checked_expression1962_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_112_in_checked_expression1962( FOLLOW_112_in_checked_expression1962_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_checked_expression1966_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_checked_expression1966( FOLLOW_71_in_checked_expression1966_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_checked_expression1970_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_checked_expression1970( FOLLOW_expression_in_checked_expression1970_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_checked_expression1974_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_checked_expression1974( FOLLOW_RPAREN_in_checked_expression1974_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_189_in_unchecked_expression1985_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_189_in_unchecked_expression1985( FOLLOW_189_in_unchecked_expression1985_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_unchecked_expression1989_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_unchecked_expression1989( FOLLOW_71_in_unchecked_expression1989_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_unchecked_expression1993_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_unchecked_expression1993( FOLLOW_expression_in_unchecked_expression1993_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_unchecked_expression1997_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_unchecked_expression1997( FOLLOW_RPAREN_in_unchecked_expression1997_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_117_in_default_value_expression2008_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_117_in_default_value_expression2008( FOLLOW_117_in_default_value_expression2008_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_default_value_expression2012_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_default_value_expression2012( FOLLOW_71_in_default_value_expression2012_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_default_value_expression2016_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_default_value_expression2016( FOLLOW_type_in_default_value_expression2016_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_default_value_expression2020_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_default_value_expression2020( FOLLOW_RPAREN_in_default_value_expression2020_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_118_in_anonymous_method_expression2031_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000080), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_118_in_anonymous_method_expression2031( FOLLOW_118_in_anonymous_method_expression2031_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression2035_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression2035( FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression2035_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_block_in_anonymous_method_expression2040_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_block_in_anonymous_method_expression2040( FOLLOW_block_in_anonymous_method_expression2040_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_explicit_anonymous_function_signature2051_bits[]	= { ANTLR_UINT64_LIT(0x0002000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EB14B6769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_explicit_anonymous_function_signature2051( FOLLOW_71_in_explicit_anonymous_function_signature2051_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature2055_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature2055( FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature2055_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_explicit_anonymous_function_signature2060_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_explicit_anonymous_function_signature2060( FOLLOW_RPAREN_in_explicit_anonymous_function_signature2060_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2071_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2071( FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2071_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_explicit_anonymous_function_parameter_list2076_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EB14B6769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_explicit_anonymous_function_parameter_list2076( FOLLOW_77_in_explicit_anonymous_function_parameter_list2076_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2080_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2080( FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2080_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter2093_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter2093( FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter2093_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_explicit_anonymous_function_parameter2098_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_explicit_anonymous_function_parameter2098( FOLLOW_type_in_explicit_anonymous_function_parameter2098_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_explicit_anonymous_function_parameter2102_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_explicit_anonymous_function_parameter2102( FOLLOW_identifier_in_explicit_anonymous_function_parameter2102_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_object_creation_expression2132_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_object_creation_expression2132( FOLLOW_type_in_object_creation_expression2132_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_object_creation_expression2144_bits[]	= { ANTLR_UINT64_LIT(0x20A6007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EB14B7769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_object_creation_expression2144( FOLLOW_71_in_object_creation_expression2144_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_argument_list_in_object_creation_expression2148_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_argument_list_in_object_creation_expression2148( FOLLOW_argument_list_in_object_creation_expression2148_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_object_creation_expression2153_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_object_creation_expression2153( FOLLOW_RPAREN_in_object_creation_expression2153_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_object_or_collection_initializer_in_object_creation_expression2157_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_object_or_collection_initializer_in_object_creation_expression2157( FOLLOW_object_or_collection_initializer_in_object_creation_expression2157_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_object_or_collection_initializer_in_object_creation_expression2166_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_object_or_collection_initializer_in_object_creation_expression2166( FOLLOW_object_or_collection_initializer_in_object_creation_expression2166_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_199_in_object_or_collection_initializer2182_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400006DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x00000000000018D1) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_199_in_object_or_collection_initializer2182( FOLLOW_199_in_object_or_collection_initializer2182_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_object_initializer_in_object_or_collection_initializer2186_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_object_initializer_in_object_or_collection_initializer2186( FOLLOW_object_initializer_in_object_or_collection_initializer2186_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_collection_initializer_in_object_or_collection_initializer2192_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_collection_initializer_in_object_or_collection_initializer2192( FOLLOW_collection_initializer_in_object_or_collection_initializer2192_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_element_initializer_list_in_collection_initializer2206_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_element_initializer_list_in_collection_initializer2206( FOLLOW_element_initializer_list_in_collection_initializer2206_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_collection_initializer2210_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_collection_initializer2210( FOLLOW_77_in_collection_initializer2210_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_203_in_collection_initializer2215_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_203_in_collection_initializer2215( FOLLOW_203_in_collection_initializer2215_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_element_initializer_in_element_initializer_list2226_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_element_initializer_in_element_initializer_list2226( FOLLOW_element_initializer_in_element_initializer_list2226_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_element_initializer_list2230_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x00000000000010D1) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_element_initializer_list2230( FOLLOW_77_in_element_initializer_list2230_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_element_initializer_in_element_initializer_list2232_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_element_initializer_in_element_initializer_list2232( FOLLOW_element_initializer_in_element_initializer_list2232_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_non_assignment_expression_in_element_initializer2245_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_non_assignment_expression_in_element_initializer2245( FOLLOW_non_assignment_expression_in_element_initializer2245_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_199_in_element_initializer2251_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_199_in_element_initializer2251( FOLLOW_199_in_element_initializer2251_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_element_initializer2255_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_list_in_element_initializer2255( FOLLOW_expression_list_in_element_initializer2255_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_203_in_element_initializer2259_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_203_in_element_initializer2259( FOLLOW_203_in_element_initializer2259_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_member_initializer_list_in_object_initializer2276_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_member_initializer_list_in_object_initializer2276( FOLLOW_member_initializer_list_in_object_initializer2276_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_object_initializer2281_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_object_initializer2281( FOLLOW_77_in_object_initializer2281_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_203_in_object_initializer2286_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_203_in_object_initializer2286( FOLLOW_203_in_object_initializer2286_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_member_initializer_in_member_initializer_list2297_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_member_initializer_in_member_initializer_list2297( FOLLOW_member_initializer_in_member_initializer_list2297_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_member_initializer_list2301_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_member_initializer_list2301( FOLLOW_77_in_member_initializer_list2301_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_member_initializer_in_member_initializer_list2303_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_member_initializer_in_member_initializer_list2303( FOLLOW_member_initializer_in_member_initializer_list2303_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_member_initializer2316_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_member_initializer2316( FOLLOW_identifier_in_member_initializer2316_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_88_in_member_initializer2320_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x00000000000010D1) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_88_in_member_initializer2320( FOLLOW_88_in_member_initializer2320_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_initializer_value_in_member_initializer2324_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_initializer_value_in_member_initializer2324( FOLLOW_initializer_value_in_member_initializer2324_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_initializer_value2335_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_initializer_value2335( FOLLOW_expression_in_initializer_value2335_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_object_or_collection_initializer_in_initializer_value2341_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_object_or_collection_initializer_in_initializer_value2341( FOLLOW_object_or_collection_initializer_in_initializer_value2341_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_186_in_typeof_expression2354_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_186_in_typeof_expression2354( FOLLOW_186_in_typeof_expression2354_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_typeof_expression2358_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_typeof_expression2358( FOLLOW_71_in_typeof_expression2358_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unbound_type_name_in_typeof_expression2369_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unbound_type_name_in_typeof_expression2369( FOLLOW_unbound_type_name_in_typeof_expression2369_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_typeof_expression2380_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_typeof_expression2380( FOLLOW_type_in_typeof_expression2380_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_194_in_typeof_expression2392_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_194_in_typeof_expression2392( FOLLOW_194_in_typeof_expression2392_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_typeof_expression2397_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_typeof_expression2397( FOLLOW_RPAREN_in_typeof_expression2397_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unbound_type_name_start_in_unbound_type_name2412_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000), ANTLR_UINT64_LIT(0x0000000000100000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unbound_type_name_start_in_unbound_type_name2412( FOLLOW_unbound_type_name_start_in_unbound_type_name2412_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_generic_dimension_specifier_in_unbound_type_name2431_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_generic_dimension_specifier_in_unbound_type_name2431( FOLLOW_generic_dimension_specifier_in_unbound_type_name2431_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unbound_type_name_part_in_unbound_type_name2435_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000), ANTLR_UINT64_LIT(0x0000000000100000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unbound_type_name_part_in_unbound_type_name2435( FOLLOW_unbound_type_name_part_in_unbound_type_name2435_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unbound_type_name_part_in_unbound_type_name2442_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000), ANTLR_UINT64_LIT(0x0000000000100000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unbound_type_name_part_in_unbound_type_name2442( FOLLOW_unbound_type_name_part_in_unbound_type_name2442_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_generic_dimension_specifier_in_unbound_type_name2452_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_generic_dimension_specifier_in_unbound_type_name2452( FOLLOW_generic_dimension_specifier_in_unbound_type_name2452_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_unbound_type_name_start2462_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000080000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_unbound_type_name_start2462( FOLLOW_identifier_in_unbound_type_name_start2462_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_83_in_unbound_type_name_start2465_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_83_in_unbound_type_name_start2465( FOLLOW_83_in_unbound_type_name_start2465_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_unbound_type_name_start2467_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_unbound_type_name_start2467( FOLLOW_identifier_in_unbound_type_name_start2467_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_DOT_in_unbound_type_name_part2476_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_DOT_in_unbound_type_name_part2476( FOLLOW_DOT_in_unbound_type_name_part2476_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_unbound_type_name_part2480_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_unbound_type_name_part2480( FOLLOW_identifier_in_unbound_type_name_part2480_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_84_in_generic_dimension_specifier2488_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_84_in_generic_dimension_specifier2488( FOLLOW_84_in_generic_dimension_specifier2488_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_commas_in_generic_dimension_specifier2492_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_commas_in_generic_dimension_specifier2492( FOLLOW_commas_in_generic_dimension_specifier2492_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_GT_in_generic_dimension_specifier2497_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_GT_in_generic_dimension_specifier2497( FOLLOW_GT_in_generic_dimension_specifier2497_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_commas2506_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_commas2506( FOLLOW_77_in_commas2506_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_namespace_or_type_name_in_type_name2522_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_namespace_or_type_name_in_type_name2522( FOLLOW_namespace_or_type_name_in_type_name2522_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_or_generic_in_namespace_or_type_name2531_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001002), ANTLR_UINT64_LIT(0x0000000000080000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_or_generic_in_namespace_or_type_name2531( FOLLOW_type_or_generic_in_namespace_or_type_name2531_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_83_in_namespace_or_type_name2536_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_83_in_namespace_or_type_name2536( FOLLOW_83_in_namespace_or_type_name2536_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_or_generic_in_namespace_or_type_name2538_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_or_generic_in_namespace_or_type_name2538( FOLLOW_type_or_generic_in_namespace_or_type_name2538_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_DOT_in_namespace_or_type_name2543_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_DOT_in_namespace_or_type_name2543( FOLLOW_DOT_in_namespace_or_type_name2543_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_or_generic_in_namespace_or_type_name2547_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_or_generic_in_namespace_or_type_name2547( FOLLOW_type_or_generic_in_namespace_or_type_name2547_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_type_or_generic2567_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000100000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_type_or_generic2567( FOLLOW_identifier_in_type_or_generic2567_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_generic_argument_list_in_type_or_generic2571_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_generic_argument_list_in_type_or_generic2571( FOLLOW_generic_argument_list_in_type_or_generic2571_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_type_or_generic2576_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_type_or_generic2576( FOLLOW_identifier_in_type_or_generic2576_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_qid_start_in_qid2587_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_qid_start_in_qid2587( FOLLOW_qid_start_in_qid2587_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_qid_part_in_qid2591_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_qid_part_in_qid2591( FOLLOW_qid_part_in_qid2591_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_predefined_type_in_qid_start2601_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_predefined_type_in_qid_start2601( FOLLOW_predefined_type_in_qid_start2601_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_qid_start2617_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000100000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_qid_start2617( FOLLOW_identifier_in_qid_start2617_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_generic_argument_list_in_qid_start2621_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_generic_argument_list_in_qid_start2621( FOLLOW_generic_argument_list_in_qid_start2621_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_qid_start2628_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000080000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_qid_start2628( FOLLOW_identifier_in_qid_start2628_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_83_in_qid_start2633_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_83_in_qid_start2633( FOLLOW_83_in_qid_start2633_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_qid_start2637_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_qid_start2637( FOLLOW_identifier_in_qid_start2637_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_literal_in_qid_start2644_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_literal_in_qid_start2644( FOLLOW_literal_in_qid_start2644_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_access_identifier_in_qid_part2658_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_access_identifier_in_qid_part2658( FOLLOW_access_identifier_in_qid_part2658_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_84_in_generic_argument_list2668_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_84_in_generic_argument_list2668( FOLLOW_84_in_generic_argument_list2668_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_arguments_in_generic_argument_list2672_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_arguments_in_generic_argument_list2672( FOLLOW_type_arguments_in_generic_argument_list2672_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_GT_in_generic_argument_list2676_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_GT_in_generic_argument_list2676( FOLLOW_GT_in_generic_argument_list2676_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_type_arguments2685_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_type_arguments2685( FOLLOW_type_in_type_arguments2685_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_type_arguments2688_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_type_arguments2688( FOLLOW_77_in_type_arguments2688_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_type_arguments2690_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_type_arguments2690( FOLLOW_type_in_type_arguments2690_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_predefined_type_in_type2719_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_predefined_type_in_type2719( FOLLOW_predefined_type_in_type2719_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_name_in_type2723_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_name_in_type2723( FOLLOW_type_name_in_type2723_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_rank_specifiers_in_type2728_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000100) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_rank_specifiers_in_type2728( FOLLOW_rank_specifiers_in_type2728_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_72_in_type2732_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000100) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_72_in_type2732( FOLLOW_72_in_type2732_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_predefined_type_in_type2761_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000100) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_predefined_type_in_type2761( FOLLOW_predefined_type_in_type2761_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_name_in_type2765_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000100) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_name_in_type2765( FOLLOW_type_name_in_type2765_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_72_in_type2771_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000100) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_72_in_type2771( FOLLOW_72_in_type2771_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_92_in_type2776_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_92_in_type2776( FOLLOW_92_in_type2776_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_predefined_type_in_type2783_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_predefined_type_in_type2783( FOLLOW_predefined_type_in_type2783_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_name_in_type2787_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_name_in_type2787( FOLLOW_type_name_in_type2787_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_194_in_type2793_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_194_in_type2793( FOLLOW_194_in_type2793_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_72_in_type2795_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000100) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_72_in_type2795( FOLLOW_72_in_type2795_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_predefined_type_in_non_nullable_type2806_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000040000100) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_predefined_type_in_non_nullable_type2806( FOLLOW_predefined_type_in_non_nullable_type2806_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_name_in_non_nullable_type2810_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000040000100) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_name_in_non_nullable_type2810( FOLLOW_type_name_in_non_nullable_type2810_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_rank_specifiers_in_non_nullable_type2819_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000100) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_rank_specifiers_in_non_nullable_type2819( FOLLOW_rank_specifiers_in_non_nullable_type2819_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_72_in_non_nullable_type2823_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000100) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_72_in_non_nullable_type2823( FOLLOW_72_in_non_nullable_type2823_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_72_in_non_nullable_type2832_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000100) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_72_in_non_nullable_type2832( FOLLOW_72_in_non_nullable_type2832_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_194_in_non_nullable_type2844_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_194_in_non_nullable_type2844( FOLLOW_194_in_non_nullable_type2844_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_72_in_non_nullable_type2848_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000100) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_72_in_non_nullable_type2848( FOLLOW_72_in_non_nullable_type2848_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_non_array_type2859_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_non_array_type2859( FOLLOW_type_in_non_array_type2859_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_array_type2866_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_array_type2866( FOLLOW_type_in_array_type2866_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_unmanaged_type2873_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_unmanaged_type2873( FOLLOW_type_in_unmanaged_type2873_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_class_type2880_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_class_type2880( FOLLOW_type_in_class_type2880_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_pointer_type2887_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_pointer_type2887( FOLLOW_type_in_pointer_type2887_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_block2899_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_block2899( FOLLOW_SEMI_in_block2899_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_199_in_block2904_bits[]	= { ANTLR_UINT64_LIT(0x28B4007070400080), ANTLR_UINT64_LIT(0x17FDBFB400004DA1), ANTLR_UINT64_LIT(0xFFE9EE14977E937D), ANTLR_UINT64_LIT(0x00000000000018F5) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_199_in_block2904( FOLLOW_199_in_block2904_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_statement_list_in_block2908_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_statement_list_in_block2908( FOLLOW_statement_list_in_block2908_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_203_in_block2913_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_203_in_block2913( FOLLOW_203_in_block2913_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_statement_in_statement_list2920_bits[]	= { ANTLR_UINT64_LIT(0x28B4007070400082), ANTLR_UINT64_LIT(0x17FDBFB400004DA1), ANTLR_UINT64_LIT(0xFFE9EE14977E937D), ANTLR_UINT64_LIT(0x00000000000010F5) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_statement_in_statement_list2920( FOLLOW_statement_in_statement_list2920_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_assignment_in_expression2945_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_assignment_in_expression2945( FOLLOW_assignment_in_expression2945_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_non_assignment_expression_in_expression2950_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_non_assignment_expression_in_expression2950( FOLLOW_non_assignment_expression_in_expression2950_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression_list2960_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_expression_list2960( FOLLOW_expression_in_expression_list2960_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_expression_list2964_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_expression_list2964( FOLLOW_77_in_expression_list2964_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression_list2968_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_expression_list2968( FOLLOW_expression_in_expression_list2968_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_assignment2985_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000), ANTLR_UINT64_LIT(0x0000000201429248), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unary_expression_in_assignment2985( FOLLOW_unary_expression_in_assignment2985_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_assignment_operator_in_assignment2989_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_assignment_operator_in_assignment2989( FOLLOW_assignment_operator_in_assignment2989_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_assignment2993_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_assignment2993( FOLLOW_expression_in_assignment2993_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_cast_expression_in_unary_expression3010_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_cast_expression_in_unary_expression3010( FOLLOW_cast_expression_in_unary_expression3010_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_primary_or_array_creation_expression_in_unary_expression3015_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000004800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_primary_or_array_creation_expression_in_unary_expression3015( FOLLOW_primary_or_array_creation_expression_in_unary_expression3015_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_75_in_unary_expression3019_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000004000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_75_in_unary_expression3019( FOLLOW_75_in_unary_expression3019_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_78_in_unary_expression3024_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_78_in_unary_expression3024( FOLLOW_78_in_unary_expression3024_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_74_in_unary_expression3030_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_74_in_unary_expression3030( FOLLOW_74_in_unary_expression3030_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression3034_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression3034( FOLLOW_unary_expression_in_unary_expression3034_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_unary_expression3040_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_MINUS_in_unary_expression3040( FOLLOW_MINUS_in_unary_expression3040_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression3044_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression3044( FOLLOW_unary_expression_in_unary_expression3044_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_64_in_unary_expression3050_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_64_in_unary_expression3050( FOLLOW_64_in_unary_expression3050_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression3054_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression3054( FOLLOW_unary_expression_in_unary_expression3054_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_204_in_unary_expression3060_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_204_in_unary_expression3060( FOLLOW_204_in_unary_expression3060_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression3064_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression3064( FOLLOW_unary_expression_in_unary_expression3064_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_pre_increment_expression_in_unary_expression3070_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_pre_increment_expression_in_unary_expression3070( FOLLOW_pre_increment_expression_in_unary_expression3070_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_pre_decrement_expression_in_unary_expression3076_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_pre_decrement_expression_in_unary_expression3076( FOLLOW_pre_decrement_expression_in_unary_expression3076_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_pointer_indirection_expression_in_unary_expression3082_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_pointer_indirection_expression_in_unary_expression3082( FOLLOW_pointer_indirection_expression_in_unary_expression3082_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_addressof_expression_in_unary_expression3087_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_addressof_expression_in_unary_expression3087( FOLLOW_addressof_expression_in_unary_expression3087_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_cast_expression3097_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_cast_expression3097( FOLLOW_71_in_cast_expression3097_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_cast_expression3101_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_cast_expression3101( FOLLOW_type_in_cast_expression3101_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_cast_expression3105_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_cast_expression3105( FOLLOW_RPAREN_in_cast_expression3105_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_cast_expression3109_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unary_expression_in_cast_expression3109( FOLLOW_unary_expression_in_cast_expression3109_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_88_in_assignment_operator3117_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_88_in_assignment_operator3117( FOLLOW_88_in_assignment_operator3117_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_76_in_assignment_operator3121_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_76_in_assignment_operator3121( FOLLOW_76_in_assignment_operator3121_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_79_in_assignment_operator3125_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_79_in_assignment_operator3125( FOLLOW_79_in_assignment_operator3125_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_73_in_assignment_operator3129_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_73_in_assignment_operator3129( FOLLOW_73_in_assignment_operator3129_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_81_in_assignment_operator3133_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_81_in_assignment_operator3133( FOLLOW_81_in_assignment_operator3133_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_67_in_assignment_operator3137_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_67_in_assignment_operator3137( FOLLOW_67_in_assignment_operator3137_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_70_in_assignment_operator3141_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_70_in_assignment_operator3141( FOLLOW_70_in_assignment_operator3141_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_201_in_assignment_operator3145_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_201_in_assignment_operator3145( FOLLOW_201_in_assignment_operator3145_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_97_in_assignment_operator3149_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_97_in_assignment_operator3149( FOLLOW_97_in_assignment_operator3149_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_86_in_assignment_operator3153_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_86_in_assignment_operator3153( FOLLOW_86_in_assignment_operator3153_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_GT_in_assignment_operator3157_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000008000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_GT_in_assignment_operator3157( FOLLOW_GT_in_assignment_operator3157_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_91_in_assignment_operator3159_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_91_in_assignment_operator3159( FOLLOW_91_in_assignment_operator3159_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_75_in_pre_increment_expression3168_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_75_in_pre_increment_expression3168( FOLLOW_75_in_pre_increment_expression3168_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_pre_increment_expression3172_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unary_expression_in_pre_increment_expression3172( FOLLOW_unary_expression_in_pre_increment_expression3172_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_78_in_pre_decrement_expression3181_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_78_in_pre_decrement_expression3181( FOLLOW_78_in_pre_decrement_expression3181_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_pre_decrement_expression3185_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unary_expression_in_pre_decrement_expression3185( FOLLOW_unary_expression_in_pre_decrement_expression3185_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_72_in_pointer_indirection_expression3193_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_72_in_pointer_indirection_expression3193( FOLLOW_72_in_pointer_indirection_expression3193_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_pointer_indirection_expression3197_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unary_expression_in_pointer_indirection_expression3197( FOLLOW_unary_expression_in_pointer_indirection_expression3197_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_69_in_addressof_expression3205_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_69_in_addressof_expression3205( FOLLOW_69_in_addressof_expression3205_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_addressof_expression3209_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unary_expression_in_addressof_expression3209( FOLLOW_unary_expression_in_addressof_expression3209_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_lambda_expression_in_non_assignment_expression3230_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_lambda_expression_in_non_assignment_expression3230( FOLLOW_lambda_expression_in_non_assignment_expression3230_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_query_expression_in_non_assignment_expression3241_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_query_expression_in_non_assignment_expression3241( FOLLOW_query_expression_in_non_assignment_expression3241_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_conditional_expression_in_non_assignment_expression3247_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_conditional_expression_in_non_assignment_expression3247( FOLLOW_conditional_expression_in_non_assignment_expression3247_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_multiplicative_expression3261_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000010104) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unary_expression_in_multiplicative_expression3261( FOLLOW_unary_expression_in_multiplicative_expression3261_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_set_in_multiplicative_expression3266_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_set_in_multiplicative_expression3266( FOLLOW_set_in_multiplicative_expression3266_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_multiplicative_expression3276_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000010104) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unary_expression_in_multiplicative_expression3276( FOLLOW_unary_expression_in_multiplicative_expression3276_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_multiplicative_expression_in_additive_expression3286_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000002), ANTLR_UINT64_LIT(0x0000000000000400) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_multiplicative_expression_in_additive_expression3286( FOLLOW_multiplicative_expression_in_additive_expression3286_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_set_in_additive_expression3289_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_set_in_additive_expression3289( FOLLOW_set_in_additive_expression3289_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_multiplicative_expression_in_additive_expression3297_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000002), ANTLR_UINT64_LIT(0x0000000000000400) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_multiplicative_expression_in_additive_expression3297( FOLLOW_multiplicative_expression_in_additive_expression3297_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_additive_expression_in_shift_expression3308_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800002), ANTLR_UINT64_LIT(0x0000000000200000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_additive_expression_in_shift_expression3308( FOLLOW_additive_expression_in_shift_expression3308_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_85_in_shift_expression3312_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_85_in_shift_expression3312( FOLLOW_85_in_shift_expression3312_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_GT_in_shift_expression3314_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_GT_in_shift_expression3314( FOLLOW_GT_in_shift_expression3314_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_GT_in_shift_expression3316_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_GT_in_shift_expression3316( FOLLOW_GT_in_shift_expression3316_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_additive_expression_in_shift_expression3319_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800002), ANTLR_UINT64_LIT(0x0000000000200000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_additive_expression_in_shift_expression3319( FOLLOW_additive_expression_in_shift_expression3319_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_shift_expression_in_relational_expression3329_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800002), ANTLR_UINT64_LIT(0x0000004008900000), ANTLR_UINT64_LIT(0x0000000000010000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_shift_expression_in_relational_expression3329( FOLLOW_shift_expression_in_relational_expression3329_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_set_in_relational_expression3336_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_set_in_relational_expression3336( FOLLOW_set_in_relational_expression3336_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_shift_expression_in_relational_expression3346_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800002), ANTLR_UINT64_LIT(0x0000004008900000), ANTLR_UINT64_LIT(0x0000000000010000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_shift_expression_in_relational_expression3346( FOLLOW_shift_expression_in_relational_expression3346_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_set_in_relational_expression3355_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_set_in_relational_expression3355( FOLLOW_set_in_relational_expression3355_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_non_nullable_type_in_relational_expression3363_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800002), ANTLR_UINT64_LIT(0x0000004008900000), ANTLR_UINT64_LIT(0x0000000000010000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_non_nullable_type_in_relational_expression3363( FOLLOW_non_nullable_type_in_relational_expression3363_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_relational_expression_in_equality_expression3377_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000002000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_relational_expression_in_equality_expression3377( FOLLOW_relational_expression_in_equality_expression3377_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_set_in_equality_expression3384_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_set_in_equality_expression3384( FOLLOW_set_in_equality_expression3384_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_relational_expression_in_equality_expression3392_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000002000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_relational_expression_in_equality_expression3392( FOLLOW_relational_expression_in_equality_expression3392_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_equality_expression_in_and_expression3402_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000020) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_equality_expression_in_and_expression3402( FOLLOW_equality_expression_in_and_expression3402_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_69_in_and_expression3405_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_69_in_and_expression3405( FOLLOW_69_in_and_expression3405_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_equality_expression_in_and_expression3409_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000020) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_equality_expression_in_and_expression3409( FOLLOW_equality_expression_in_and_expression3409_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_and_expression_in_exclusive_or_expression3419_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000100000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_and_expression_in_exclusive_or_expression3419( FOLLOW_and_expression_in_exclusive_or_expression3419_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_96_in_exclusive_or_expression3422_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_96_in_exclusive_or_expression3422( FOLLOW_96_in_exclusive_or_expression3422_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_and_expression_in_exclusive_or_expression3426_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000100000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_and_expression_in_exclusive_or_expression3426( FOLLOW_and_expression_in_exclusive_or_expression3426_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_exclusive_or_expression_in_inclusive_or_expression3436_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_exclusive_or_expression_in_inclusive_or_expression3436( FOLLOW_exclusive_or_expression_in_inclusive_or_expression3436_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_200_in_inclusive_or_expression3441_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_200_in_inclusive_or_expression3441( FOLLOW_200_in_inclusive_or_expression3441_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_exclusive_or_expression_in_inclusive_or_expression3445_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_exclusive_or_expression_in_inclusive_or_expression3445( FOLLOW_exclusive_or_expression_in_inclusive_or_expression3445_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_inclusive_or_expression_in_conditional_and_expression3455_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_inclusive_or_expression_in_conditional_and_expression3455( FOLLOW_inclusive_or_expression_in_conditional_and_expression3455_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_68_in_conditional_and_expression3460_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_68_in_conditional_and_expression3460( FOLLOW_68_in_conditional_and_expression3460_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_inclusive_or_expression_in_conditional_and_expression3464_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_inclusive_or_expression_in_conditional_and_expression3464( FOLLOW_inclusive_or_expression_in_conditional_and_expression3464_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_conditional_and_expression_in_conditional_or_expression3474_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_conditional_and_expression_in_conditional_or_expression3474( FOLLOW_conditional_and_expression_in_conditional_or_expression3474_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_202_in_conditional_or_expression3478_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_202_in_conditional_or_expression3478( FOLLOW_202_in_conditional_or_expression3478_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_conditional_and_expression_in_conditional_or_expression3482_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_conditional_and_expression_in_conditional_or_expression3482( FOLLOW_conditional_and_expression_in_conditional_or_expression3482_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_conditional_or_expression_in_null_coalescing_expression3493_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000020000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_conditional_or_expression_in_null_coalescing_expression3493( FOLLOW_conditional_or_expression_in_null_coalescing_expression3493_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_93_in_null_coalescing_expression3498_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_93_in_null_coalescing_expression3498( FOLLOW_93_in_null_coalescing_expression3498_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_conditional_or_expression_in_null_coalescing_expression3502_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000020000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_conditional_or_expression_in_null_coalescing_expression3502( FOLLOW_conditional_or_expression_in_null_coalescing_expression3502_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_null_coalescing_expression_in_conditional_expression3512_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000010000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_null_coalescing_expression_in_conditional_expression3512( FOLLOW_null_coalescing_expression_in_conditional_expression3512_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_92_in_conditional_expression3517_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_92_in_conditional_expression3517( FOLLOW_92_in_conditional_expression3517_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_conditional_expression3521_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_conditional_expression3521( FOLLOW_expression_in_conditional_expression3521_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_82_in_conditional_expression3525_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_82_in_conditional_expression3525( FOLLOW_82_in_conditional_expression3525_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_conditional_expression3529_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_conditional_expression3529( FOLLOW_expression_in_conditional_expression3529_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_anonymous_function_signature_in_lambda_expression3549_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000004000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_anonymous_function_signature_in_lambda_expression3549( FOLLOW_anonymous_function_signature_in_lambda_expression3549_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_90_in_lambda_expression3553_bits[]	= { ANTLR_UINT64_LIT(0x20B4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x00000000000010D1) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_90_in_lambda_expression3553( FOLLOW_90_in_lambda_expression3553_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_anonymous_function_body_in_lambda_expression3557_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_anonymous_function_body_in_lambda_expression3557( FOLLOW_anonymous_function_body_in_lambda_expression3557_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_anonymous_function_signature3564_bits[]	= { ANTLR_UINT64_LIT(0x0002000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EB14B6769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_anonymous_function_signature3564( FOLLOW_71_in_anonymous_function_signature3564_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_explicit_anonymous_function_parameter_list_in_anonymous_function_signature3567_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_explicit_anonymous_function_parameter_list_in_anonymous_function_signature3567( FOLLOW_explicit_anonymous_function_parameter_list_in_anonymous_function_signature3567_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature3573_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature3573( FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature3573_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_anonymous_function_signature3577_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_anonymous_function_signature3577( FOLLOW_RPAREN_in_anonymous_function_signature3577_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature3582_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature3582( FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature3582_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3591_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3591( FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3591_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_implicit_anonymous_function_parameter_list3596_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_implicit_anonymous_function_parameter_list3596( FOLLOW_77_in_implicit_anonymous_function_parameter_list3596_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3600_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3600( FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3600_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_implicit_anonymous_function_parameter3610_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_implicit_anonymous_function_parameter3610( FOLLOW_identifier_in_implicit_anonymous_function_parameter3610_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_anonymous_function_body3617_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_anonymous_function_body3617( FOLLOW_expression_in_anonymous_function_body3617_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_block_in_anonymous_function_body3622_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_block_in_anonymous_function_body3622( FOLLOW_block_in_anonymous_function_body3622_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_from_clause_in_query_expression3634_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000200010060240), ANTLR_UINT64_LIT(0x0000000000000010) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_from_clause_in_query_expression3634( FOLLOW_from_clause_in_query_expression3634_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_query_body_in_query_expression3638_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_query_body_in_query_expression3638( FOLLOW_query_body_in_query_expression3638_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_query_body_clauses_in_query_body3648_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000200000000200) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_query_body_clauses_in_query_body3648( FOLLOW_query_body_clauses_in_query_body3648_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_select_or_group_clause_in_query_body3653_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_select_or_group_clause_in_query_body3653( FOLLOW_select_or_group_clause_in_query_body3653_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_query_continuation_in_query_body3664_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_query_continuation_in_query_body3664( FOLLOW_query_continuation_in_query_body3664_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_143_in_query_continuation3674_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_143_in_query_continuation3674( FOLLOW_143_in_query_continuation3674_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_query_continuation3678_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000200010060240), ANTLR_UINT64_LIT(0x0000000000000010) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_query_continuation3678( FOLLOW_identifier_in_query_continuation3678_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_query_body_in_query_continuation3682_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_query_body_in_query_continuation3682( FOLLOW_query_body_in_query_continuation3682_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_query_body_clause_in_query_body_clauses3689_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010060040), ANTLR_UINT64_LIT(0x0000000000000010) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_query_body_clause_in_query_body_clauses3689( FOLLOW_query_body_clause_in_query_body_clauses3689_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_from_clause_in_query_body_clause3698_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_from_clause_in_query_body_clause3698( FOLLOW_from_clause_in_query_body_clause3698_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_let_clause_in_query_body_clause3703_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_let_clause_in_query_body_clause3703( FOLLOW_let_clause_in_query_body_clause3703_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_where_clause_in_query_body_clause3708_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_where_clause_in_query_body_clause3708( FOLLOW_where_clause_in_query_body_clause3708_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_join_clause_in_query_body_clause3713_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_join_clause_in_query_body_clause3713( FOLLOW_join_clause_in_query_body_clause3713_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_orderby_clause_in_query_body_clause3718_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_orderby_clause_in_query_body_clause3718( FOLLOW_orderby_clause_in_query_body_clause3718_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_134_in_from_clause3725_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_134_in_from_clause3725( FOLLOW_134_in_from_clause3725_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_from_clause3729_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_from_clause3729( FOLLOW_type_in_from_clause3729_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_from_clause3734_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_from_clause3734( FOLLOW_identifier_in_from_clause3734_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_139_in_from_clause3738_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_139_in_from_clause3738( FOLLOW_139_in_from_clause3738_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_from_clause3742_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_from_clause3742( FOLLOW_expression_in_from_clause3742_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_145_in_join_clause3750_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_145_in_join_clause3750( FOLLOW_145_in_join_clause3750_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_join_clause3754_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_join_clause3754( FOLLOW_type_in_join_clause3754_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_join_clause3759_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_join_clause3759( FOLLOW_identifier_in_join_clause3759_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_139_in_join_clause3763_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_139_in_join_clause3763( FOLLOW_139_in_join_clause3763_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_join_clause3767_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000004000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_join_clause3767( FOLLOW_expression_in_join_clause3767_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_154_in_join_clause3771_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_154_in_join_clause3771( FOLLOW_154_in_join_clause3771_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_join_clause3775_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_join_clause3775( FOLLOW_expression_in_join_clause3775_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_124_in_join_clause3779_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_124_in_join_clause3779( FOLLOW_124_in_join_clause3779_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_join_clause3783_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_join_clause3783( FOLLOW_expression_in_join_clause3783_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_143_in_join_clause3786_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_143_in_join_clause3786( FOLLOW_143_in_join_clause3786_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_join_clause3788_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_join_clause3788( FOLLOW_identifier_in_join_clause3788_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_146_in_let_clause3798_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_146_in_let_clause3798( FOLLOW_146_in_let_clause3798_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_let_clause3802_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_let_clause3802( FOLLOW_identifier_in_let_clause3802_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_88_in_let_clause3806_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_88_in_let_clause3806( FOLLOW_88_in_let_clause3806_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_let_clause3810_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_let_clause3810( FOLLOW_expression_in_let_clause3810_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_156_in_orderby_clause3817_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_156_in_orderby_clause3817( FOLLOW_156_in_orderby_clause3817_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_ordering_list_in_orderby_clause3821_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_ordering_list_in_orderby_clause3821( FOLLOW_ordering_list_in_orderby_clause3821_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_ordering_in_ordering_list3829_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_ordering_in_ordering_list3829( FOLLOW_ordering_in_ordering_list3829_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_ordering_list3834_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_ordering_list3834( FOLLOW_77_in_ordering_list3834_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_ordering_in_ordering_list3838_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_ordering_in_ordering_list3838( FOLLOW_ordering_in_ordering_list3838_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_ordering3848_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0080008000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_ordering3848( FOLLOW_expression_in_ordering3848_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_ordering_direction_in_ordering3853_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_ordering_direction_in_ordering3853( FOLLOW_ordering_direction_in_ordering3853_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_select_clause_in_select_or_group_clause3875_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_select_clause_in_select_or_group_clause3875( FOLLOW_select_clause_in_select_or_group_clause3875_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_group_clause_in_select_or_group_clause3880_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_group_clause_in_select_or_group_clause3880( FOLLOW_group_clause_in_select_or_group_clause3880_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_173_in_select_clause3888_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_173_in_select_clause3888( FOLLOW_173_in_select_clause3888_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_select_clause3892_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_select_clause3892( FOLLOW_expression_in_select_clause3892_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_137_in_group_clause3900_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_137_in_group_clause3900( FOLLOW_137_in_group_clause3900_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_group_clause3904_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000100000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_group_clause3904( FOLLOW_expression_in_group_clause3904_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_108_in_group_clause3908_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_108_in_group_clause3908( FOLLOW_108_in_group_clause3908_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_group_clause3912_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_group_clause3912( FOLLOW_expression_in_group_clause3912_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_196_in_where_clause3920_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_196_in_where_clause3920( FOLLOW_196_in_where_clause3920_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_boolean_expression_in_where_clause3924_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_boolean_expression_in_where_clause3924( FOLLOW_boolean_expression_in_where_clause3924_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_boolean_expression3932_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_boolean_expression3932( FOLLOW_expression_in_boolean_expression3932_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_global_attribute_in_global_attributes3944_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000040000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_global_attribute_in_global_attributes3944( FOLLOW_global_attribute_in_global_attributes3944_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_94_in_global_attribute3954_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000010000000000), ANTLR_UINT64_LIT(0x0000000000400000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_94_in_global_attribute3954( FOLLOW_94_in_global_attribute3954_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_global_attribute_target_specifier_in_global_attribute3958_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_global_attribute_target_specifier_in_global_attribute3958( FOLLOW_global_attribute_target_specifier_in_global_attribute3958_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attribute_list_in_global_attribute3962_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000080002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attribute_list_in_global_attribute3962( FOLLOW_attribute_list_in_global_attribute3962_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_global_attribute3966_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000080000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_global_attribute3966( FOLLOW_77_in_global_attribute3966_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_95_in_global_attribute3971_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_95_in_global_attribute3971( FOLLOW_95_in_global_attribute3971_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_global_attribute_target_in_global_attribute_target_specifier3980_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_global_attribute_target_in_global_attribute_target_specifier3980( FOLLOW_global_attribute_target_in_global_attribute_target_specifier3980_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_82_in_global_attribute_target_specifier3984_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_82_in_global_attribute_target_specifier3984( FOLLOW_82_in_global_attribute_target_specifier3984_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attribute_sections_in_attributes4006_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attribute_sections_in_attributes4006( FOLLOW_attribute_sections_in_attributes4006_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attribute_section_in_attribute_sections4015_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000040000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attribute_section_in_attribute_sections4015( FOLLOW_attribute_section_in_attribute_sections4015_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_94_in_attribute_section4025_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x348011B400000000), ANTLR_UINT64_LIT(0x0200661494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_94_in_attribute_section4025( FOLLOW_94_in_attribute_section4025_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attribute_target_specifier_in_attribute_section4029_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attribute_target_specifier_in_attribute_section4029( FOLLOW_attribute_target_specifier_in_attribute_section4029_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attribute_list_in_attribute_section4034_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000080002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attribute_list_in_attribute_section4034( FOLLOW_attribute_list_in_attribute_section4034_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_attribute_section4038_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000080000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_attribute_section4038( FOLLOW_77_in_attribute_section4038_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_95_in_attribute_section4043_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_95_in_attribute_section4043( FOLLOW_95_in_attribute_section4043_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attribute_target_in_attribute_target_specifier4052_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attribute_target_in_attribute_target_specifier4052( FOLLOW_attribute_target_in_attribute_target_specifier4052_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_82_in_attribute_target_specifier4056_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_82_in_attribute_target_specifier4056( FOLLOW_82_in_attribute_target_specifier4056_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attribute_in_attribute_list4098_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attribute_in_attribute_list4098( FOLLOW_attribute_in_attribute_list4098_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_attribute_list4101_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_attribute_list4101( FOLLOW_77_in_attribute_list4101_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attribute_in_attribute_list4103_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attribute_in_attribute_list4103( FOLLOW_attribute_in_attribute_list4103_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_name_in_attribute4115_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_name_in_attribute4115( FOLLOW_type_name_in_attribute4115_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attribute_arguments_in_attribute4119_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attribute_arguments_in_attribute4119( FOLLOW_attribute_arguments_in_attribute4119_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_attribute_arguments4130_bits[]	= { ANTLR_UINT64_LIT(0x20A6007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_attribute_arguments4130( FOLLOW_71_in_attribute_arguments4130_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_attribute_arguments4135_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_attribute_arguments4135( FOLLOW_RPAREN_in_attribute_arguments4135_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_positional_argument_in_attribute_arguments4155_bits[]	= { ANTLR_UINT64_LIT(0x0002000020000000), ANTLR_UINT64_LIT(0x148011B400002000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_positional_argument_in_attribute_arguments4155( FOLLOW_positional_argument_in_attribute_arguments4155_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_named_argument_in_attribute_arguments4174_bits[]	= { ANTLR_UINT64_LIT(0x0002000020000000), ANTLR_UINT64_LIT(0x148011B400002000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_named_argument_in_attribute_arguments4174( FOLLOW_named_argument_in_attribute_arguments4174_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_attribute_arguments4190_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_attribute_arguments4190( FOLLOW_77_in_attribute_arguments4190_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_positional_argument_in_attribute_arguments4192_bits[]	= { ANTLR_UINT64_LIT(0x0002000020000000), ANTLR_UINT64_LIT(0x148011B400002000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_positional_argument_in_attribute_arguments4192( FOLLOW_positional_argument_in_attribute_arguments4192_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_attribute_arguments4203_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_attribute_arguments4203( FOLLOW_RPAREN_in_attribute_arguments4203_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_positional_argument_in_positional_argument_list4217_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_positional_argument_in_positional_argument_list4217( FOLLOW_positional_argument_in_positional_argument_list4217_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_positional_argument_list4220_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_positional_argument_list4220( FOLLOW_77_in_positional_argument_list4220_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_positional_argument_in_positional_argument_list4222_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_positional_argument_in_positional_argument_list4222( FOLLOW_positional_argument_in_positional_argument_list4222_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attribute_argument_expression_in_positional_argument4233_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attribute_argument_expression_in_positional_argument4233( FOLLOW_attribute_argument_expression_in_positional_argument4233_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_named_argument_in_named_argument_list4242_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_named_argument_in_named_argument_list4242( FOLLOW_named_argument_in_named_argument_list4242_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_named_argument_list4245_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_named_argument_list4245( FOLLOW_77_in_named_argument_list4245_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_named_argument_in_named_argument_list4247_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_named_argument_in_named_argument_list4247( FOLLOW_named_argument_in_named_argument_list4247_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_named_argument4258_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_named_argument4258( FOLLOW_identifier_in_named_argument4258_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_88_in_named_argument4262_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_88_in_named_argument4262( FOLLOW_88_in_named_argument4262_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attribute_argument_expression_in_named_argument4266_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attribute_argument_expression_in_named_argument4266( FOLLOW_attribute_argument_expression_in_named_argument4266_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_attribute_argument_expression4275_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_attribute_argument_expression4275( FOLLOW_expression_in_attribute_argument_expression4275_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_113_in_class_declaration4289_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_113_in_class_declaration4289( FOLLOW_113_in_class_declaration4289_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_or_generic_in_class_declaration4292_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000090) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_or_generic_in_class_declaration4292( FOLLOW_type_or_generic_in_class_declaration4292_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_class_base_in_class_declaration4296_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000090) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_class_base_in_class_declaration4296( FOLLOW_class_base_in_class_declaration4296_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_parameter_constraints_clauses_in_class_declaration4301_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_parameter_constraints_clauses_in_class_declaration4301( FOLLOW_type_parameter_constraints_clauses_in_class_declaration4301_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_class_body_in_class_declaration4306_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_class_body_in_class_declaration4306( FOLLOW_class_body_in_class_declaration4306_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_class_declaration4310_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_class_declaration4310( FOLLOW_SEMI_in_class_declaration4310_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_82_in_class_base4351_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_82_in_class_base4351( FOLLOW_82_in_class_base4351_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_type_list_in_class_base4355_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_type_list_in_class_base4355( FOLLOW_interface_type_list_in_class_base4355_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_interface_type_list4365_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_interface_type_list4365( FOLLOW_type_in_interface_type_list4365_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_interface_type_list4368_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_interface_type_list4368( FOLLOW_77_in_interface_type_list4368_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_interface_type_list4372_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_interface_type_list4372( FOLLOW_type_in_interface_type_list4372_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_199_in_class_body4383_bits[]	= { ANTLR_UINT64_LIT(0x0000000020080000), ANTLR_UINT64_LIT(0xF6D6B5BC40000000), ANTLR_UINT64_LIT(0xDA1CFAFED776F649), ANTLR_UINT64_LIT(0x000000000000185F) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_199_in_class_body4383( FOLLOW_199_in_class_body4383_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_class_member_declarations_in_class_body4387_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_class_member_declarations_in_class_body4387( FOLLOW_class_member_declarations_in_class_body4387_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_203_in_class_body4392_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_203_in_class_body4392( FOLLOW_203_in_class_body4392_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_class_member_declaration_in_class_member_declarations4400_bits[]	= { ANTLR_UINT64_LIT(0x0000000020080002), ANTLR_UINT64_LIT(0xF6D6B5BC40000000), ANTLR_UINT64_LIT(0xDA1CFAFED776F649), ANTLR_UINT64_LIT(0x000000000000105F) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_class_member_declaration_in_class_member_declarations4400( FOLLOW_class_member_declaration_in_class_member_declarations4400_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_114_in_constant_declaration4411_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_114_in_constant_declaration4411( FOLLOW_114_in_constant_declaration4411_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_constant_declaration4415_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_constant_declaration4415( FOLLOW_type_in_constant_declaration4415_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_constant_declarators_in_constant_declaration4419_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_constant_declarators_in_constant_declaration4419( FOLLOW_constant_declarators_in_constant_declaration4419_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_constant_declaration4423_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_constant_declaration4423( FOLLOW_SEMI_in_constant_declaration4423_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_constant_declarator_in_constant_declarators4431_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_constant_declarator_in_constant_declarators4431( FOLLOW_constant_declarator_in_constant_declarators4431_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_constant_declarators4434_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_constant_declarators4434( FOLLOW_77_in_constant_declarators4434_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_constant_declarator_in_constant_declarators4436_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_constant_declarator_in_constant_declarators4436( FOLLOW_constant_declarator_in_constant_declarators4436_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_constant_declarator4446_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000001000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_constant_declarator4446( FOLLOW_identifier_in_constant_declarator4446_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_88_in_constant_declarator4451_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_88_in_constant_declarator4451( FOLLOW_88_in_constant_declarator4451_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_constant_expression_in_constant_declarator4455_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_constant_expression_in_constant_declarator4455( FOLLOW_constant_expression_in_constant_declarator4455_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_constant_expression4465_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_constant_expression4465( FOLLOW_expression_in_constant_expression4465_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_variable_declarators_in_field_declaration4474_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_variable_declarators_in_field_declaration4474( FOLLOW_variable_declarators_in_field_declaration4474_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_field_declaration4478_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_field_declaration4478( FOLLOW_SEMI_in_field_declaration4478_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_variable_declarator_in_variable_declarators4486_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_variable_declarator_in_variable_declarators4486( FOLLOW_variable_declarator_in_variable_declarators4486_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_variable_declarators4489_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_variable_declarators4489( FOLLOW_77_in_variable_declarators4489_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_variable_declarator_in_variable_declarators4493_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_variable_declarator_in_variable_declarators4493( FOLLOW_variable_declarator_in_variable_declarators4493_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_name_in_variable_declarator4503_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000001000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_name_in_variable_declarator4503( FOLLOW_type_name_in_variable_declarator4503_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_88_in_variable_declarator4506_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x00000000000010D1) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_88_in_variable_declarator4506( FOLLOW_88_in_variable_declarator4506_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_variable_initializer_in_variable_declarator4510_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_variable_initializer_in_variable_declarator4510( FOLLOW_variable_initializer_in_variable_declarator4510_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_method_header_in_method_declaration4524_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_method_header_in_method_declaration4524( FOLLOW_method_header_in_method_declaration4524_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_method_body_in_method_declaration4528_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_method_body_in_method_declaration4528( FOLLOW_method_body_in_method_declaration4528_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_member_name_in_method_header4536_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_member_name_in_method_header4536( FOLLOW_member_name_in_method_header4536_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_method_header4539_bits[]	= { ANTLR_UINT64_LIT(0x0002000020000000), ANTLR_UINT64_LIT(0x1690B5B440000000), ANTLR_UINT64_LIT(0x9A48EB15B6769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_method_header4539( FOLLOW_71_in_method_header4539_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_formal_parameter_list_in_method_header4543_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_formal_parameter_list_in_method_header4543( FOLLOW_formal_parameter_list_in_method_header4543_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_method_header4548_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_method_header4548( FOLLOW_RPAREN_in_method_header4548_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_parameter_constraints_clauses_in_method_header4552_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_parameter_constraints_clauses_in_method_header4552( FOLLOW_type_parameter_constraints_clauses_in_method_header4552_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_block_in_method_body4561_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_block_in_method_body4561( FOLLOW_block_in_method_body4561_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_qid_in_member_name4569_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_qid_in_member_name4569( FOLLOW_qid_in_member_name4569_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_member_name_in_property_declaration4581_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_member_name_in_property_declaration4581( FOLLOW_member_name_in_property_declaration4581_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_199_in_property_declaration4585_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000406800004080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_199_in_property_declaration4585( FOLLOW_199_in_property_declaration4585_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_accessor_declarations_in_property_declaration4589_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_accessor_declarations_in_property_declaration4589( FOLLOW_accessor_declarations_in_property_declaration4589_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_203_in_property_declaration4593_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_203_in_property_declaration4593( FOLLOW_203_in_property_declaration4593_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attributes_in_accessor_declarations4601_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000406800004080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attributes_in_accessor_declarations4601( FOLLOW_attributes_in_accessor_declarations4601_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_get_accessor_declaration_in_accessor_declarations4607_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000406800004000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_get_accessor_declaration_in_accessor_declarations4607( FOLLOW_get_accessor_declaration_in_accessor_declarations4607_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attributes_in_accessor_declarations4611_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000406800004000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attributes_in_accessor_declarations4611( FOLLOW_attributes_in_accessor_declarations4611_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_set_accessor_declaration_in_accessor_declarations4616_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_set_accessor_declaration_in_accessor_declarations4616( FOLLOW_set_accessor_declaration_in_accessor_declarations4616_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_set_accessor_declaration_in_accessor_declarations4623_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000006800004080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_set_accessor_declaration_in_accessor_declarations4623( FOLLOW_set_accessor_declaration_in_accessor_declarations4623_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attributes_in_accessor_declarations4627_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000006800004080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attributes_in_accessor_declarations4627( FOLLOW_attributes_in_accessor_declarations4627_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_get_accessor_declaration_in_accessor_declarations4632_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_get_accessor_declaration_in_accessor_declarations4632( FOLLOW_get_accessor_declaration_in_accessor_declarations4632_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_accessor_modifier_in_get_accessor_declaration4642_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_accessor_modifier_in_get_accessor_declaration4642( FOLLOW_accessor_modifier_in_get_accessor_declaration4642_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_135_in_get_accessor_declaration4647_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_135_in_get_accessor_declaration4647( FOLLOW_135_in_get_accessor_declaration4647_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_accessor_body_in_get_accessor_declaration4651_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_accessor_body_in_get_accessor_declaration4651( FOLLOW_accessor_body_in_get_accessor_declaration4651_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_accessor_modifier_in_set_accessor_declaration4659_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_accessor_modifier_in_set_accessor_declaration4659( FOLLOW_accessor_modifier_in_set_accessor_declaration4659_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_174_in_set_accessor_declaration4664_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_174_in_set_accessor_declaration4664( FOLLOW_174_in_set_accessor_declaration4664_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_accessor_body_in_set_accessor_declaration4668_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_accessor_body_in_set_accessor_declaration4668( FOLLOW_accessor_body_in_set_accessor_declaration4668_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_block_in_accessor_body4696_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_block_in_accessor_body4696( FOLLOW_block_in_accessor_body4696_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_125_in_event_declaration4706_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_125_in_event_declaration4706( FOLLOW_125_in_event_declaration4706_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_event_declaration4710_bits[]	= { ANTLR_UINT64_LIT(0x20A4005030400080), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_event_declaration4710( FOLLOW_type_in_event_declaration4710_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_member_name_in_event_declaration4725_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_member_name_in_event_declaration4725( FOLLOW_member_name_in_event_declaration4725_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_199_in_event_declaration4729_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000001040000000), ANTLR_UINT64_LIT(0x0000020000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_199_in_event_declaration4729( FOLLOW_199_in_event_declaration4729_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_event_accessor_declarations_in_event_declaration4733_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_event_accessor_declarations_in_event_declaration4733( FOLLOW_event_accessor_declarations_in_event_declaration4733_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_203_in_event_declaration4737_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_203_in_event_declaration4737( FOLLOW_203_in_event_declaration4737_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_variable_declarators_in_event_declaration4743_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_variable_declarators_in_event_declaration4743( FOLLOW_variable_declarators_in_event_declaration4743_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_event_declaration4747_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_event_declaration4747( FOLLOW_SEMI_in_event_declaration4747_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_modifier_in_event_modifiers4759_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x8000000800000000), ANTLR_UINT64_LIT(0x400410E841004000), ANTLR_UINT64_LIT(0x000000000000000A) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_modifier_in_event_modifiers4759( FOLLOW_modifier_in_event_modifiers4759_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attributes_in_event_accessor_declarations4768_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000001000000000), ANTLR_UINT64_LIT(0x0000020000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attributes_in_event_accessor_declarations4768( FOLLOW_attributes_in_event_accessor_declarations4768_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_add_accessor_declaration_in_event_accessor_declarations4775_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000020000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_add_accessor_declaration_in_event_accessor_declarations4775( FOLLOW_add_accessor_declaration_in_event_accessor_declarations4775_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attributes_in_event_accessor_declarations4779_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000020000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attributes_in_event_accessor_declarations4779( FOLLOW_attributes_in_event_accessor_declarations4779_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_remove_accessor_declaration_in_event_accessor_declarations4784_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_remove_accessor_declaration_in_event_accessor_declarations4784( FOLLOW_remove_accessor_declaration_in_event_accessor_declarations4784_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_remove_accessor_declaration_in_event_accessor_declarations4805_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000001040000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_remove_accessor_declaration_in_event_accessor_declarations4805( FOLLOW_remove_accessor_declaration_in_event_accessor_declarations4805_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attributes_in_event_accessor_declarations4809_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000001000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attributes_in_event_accessor_declarations4809( FOLLOW_attributes_in_event_accessor_declarations4809_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_add_accessor_declaration_in_event_accessor_declarations4814_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_add_accessor_declaration_in_event_accessor_declarations4814( FOLLOW_add_accessor_declaration_in_event_accessor_declarations4814_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_100_in_add_accessor_declaration4824_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_100_in_add_accessor_declaration4824( FOLLOW_100_in_add_accessor_declaration4824_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_block_in_add_accessor_declaration4828_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_block_in_add_accessor_declaration4828( FOLLOW_block_in_add_accessor_declaration4828_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_169_in_remove_accessor_declaration4836_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_169_in_remove_accessor_declaration4836( FOLLOW_169_in_remove_accessor_declaration4836_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_block_in_remove_accessor_declaration4840_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_block_in_remove_accessor_declaration4840( FOLLOW_block_in_remove_accessor_declaration4840_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_ENUM_in_enum_declaration4852_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_ENUM_in_enum_declaration4852( FOLLOW_ENUM_in_enum_declaration4852_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_enum_declaration4856_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_enum_declaration4856( FOLLOW_identifier_in_enum_declaration4856_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_enum_base_in_enum_declaration4860_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_enum_base_in_enum_declaration4860( FOLLOW_enum_base_in_enum_declaration4860_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_enum_body_in_enum_declaration4865_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_enum_body_in_enum_declaration4865( FOLLOW_enum_body_in_enum_declaration4865_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_enum_declaration4869_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_enum_declaration4869( FOLLOW_SEMI_in_enum_declaration4869_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_82_in_enum_base4878_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000A00000000000), ANTLR_UINT64_LIT(0x9800880000101000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_82_in_enum_base4878( FOLLOW_82_in_enum_base4878_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_integral_type_in_enum_base4882_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_integral_type_in_enum_base4882( FOLLOW_integral_type_in_enum_base4882_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_199_in_enum_body4890_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B440000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000851) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_199_in_enum_body4890( FOLLOW_199_in_enum_body4890_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_enum_member_declarations_in_enum_body4893_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_enum_member_declarations_in_enum_body4893( FOLLOW_enum_member_declarations_in_enum_body4893_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_enum_body4895_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_enum_body4895( FOLLOW_77_in_enum_body4895_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_203_in_enum_body4902_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_203_in_enum_body4902( FOLLOW_203_in_enum_body4902_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_enum_member_declaration_in_enum_member_declarations4910_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_enum_member_declaration_in_enum_member_declarations4910( FOLLOW_enum_member_declaration_in_enum_member_declarations4910_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_enum_member_declarations4913_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B440000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_enum_member_declarations4913( FOLLOW_77_in_enum_member_declarations4913_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_enum_member_declaration_in_enum_member_declarations4915_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_enum_member_declaration_in_enum_member_declarations4915( FOLLOW_enum_member_declaration_in_enum_member_declarations4915_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attributes_in_enum_member_declaration4925_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attributes_in_enum_member_declaration4925( FOLLOW_attributes_in_enum_member_declaration4925_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_enum_member_declaration4930_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000001000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_enum_member_declaration4930( FOLLOW_identifier_in_enum_member_declaration4930_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_88_in_enum_member_declaration4935_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_88_in_enum_member_declaration4935( FOLLOW_88_in_enum_member_declaration4935_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_enum_member_declaration4939_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_enum_member_declaration4939( FOLLOW_expression_in_enum_member_declaration4939_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_118_in_delegate_declaration4996_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_118_in_delegate_declaration4996( FOLLOW_118_in_delegate_declaration4996_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_return_type_in_delegate_declaration5000_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_return_type_in_delegate_declaration5000( FOLLOW_return_type_in_delegate_declaration5000_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_delegate_declaration5004_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000100080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_delegate_declaration5004( FOLLOW_identifier_in_delegate_declaration5004_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_variant_generic_parameter_list_in_delegate_declaration5007_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_variant_generic_parameter_list_in_delegate_declaration5007( FOLLOW_variant_generic_parameter_list_in_delegate_declaration5007_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_delegate_declaration5015_bits[]	= { ANTLR_UINT64_LIT(0x0002000020000000), ANTLR_UINT64_LIT(0x1690B5B440000000), ANTLR_UINT64_LIT(0x9A48EB15B6769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_delegate_declaration5015( FOLLOW_71_in_delegate_declaration5015_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_formal_parameter_list_in_delegate_declaration5019_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_formal_parameter_list_in_delegate_declaration5019( FOLLOW_formal_parameter_list_in_delegate_declaration5019_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_delegate_declaration5024_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_delegate_declaration5024( FOLLOW_RPAREN_in_delegate_declaration5024_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration5028_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration5028( FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration5028_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_delegate_declaration5033_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_delegate_declaration5033( FOLLOW_SEMI_in_delegate_declaration5033_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_modifier_in_delegate_modifiers5041_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x8000000800000000), ANTLR_UINT64_LIT(0x400410E841004000), ANTLR_UINT64_LIT(0x000000000000000A) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_modifier_in_delegate_modifiers5041( FOLLOW_modifier_in_delegate_modifiers5041_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_84_in_variant_generic_parameter_list5051_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B440000000), ANTLR_UINT64_LIT(0x02006214B4668A41), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_84_in_variant_generic_parameter_list5051( FOLLOW_84_in_variant_generic_parameter_list5051_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_variant_type_parameters_in_variant_generic_parameter_list5055_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_variant_type_parameters_in_variant_generic_parameter_list5055( FOLLOW_variant_type_parameters_in_variant_generic_parameter_list5055_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_GT_in_variant_generic_parameter_list5059_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_GT_in_variant_generic_parameter_list5059( FOLLOW_GT_in_variant_generic_parameter_list5059_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_variant_type_variable_name_in_variant_type_parameters5067_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_variant_type_variable_name_in_variant_type_parameters5067( FOLLOW_variant_type_variable_name_in_variant_type_parameters5067_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_variant_type_parameters5070_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B440000000), ANTLR_UINT64_LIT(0x02006214B4668A41), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_variant_type_parameters5070( FOLLOW_77_in_variant_type_parameters5070_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_variant_type_variable_name_in_variant_type_parameters5072_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_variant_type_variable_name_in_variant_type_parameters5072( FOLLOW_variant_type_variable_name_in_variant_type_parameters5072_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attributes_in_variant_type_variable_name5082_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x02006214B4668A41), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attributes_in_variant_type_variable_name5082( FOLLOW_attributes_in_variant_type_variable_name5082_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_variance_annotation_in_variant_type_variable_name5087_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_variance_annotation_in_variant_type_variable_name5087( FOLLOW_variance_annotation_in_variant_type_variable_name5087_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_variable_name_in_variant_type_variable_name5092_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_variable_name_in_variant_type_variable_name5092( FOLLOW_type_variable_name_in_variant_type_variable_name5092_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses5113_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses5113( FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses5113_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_type_parameter_constraints_clauses5118_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_type_parameter_constraints_clauses5118( FOLLOW_77_in_type_parameter_constraints_clauses5118_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses5122_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses5122( FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses5122_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_196_in_type_parameter_constraints_clause5132_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_196_in_type_parameter_constraints_clause5132( FOLLOW_196_in_type_parameter_constraints_clause5132_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_variable_name_in_type_parameter_constraints_clause5136_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_variable_name_in_type_parameter_constraints_clause5136( FOLLOW_type_variable_name_in_type_parameter_constraints_clause5136_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_82_in_type_parameter_constraints_clause5140_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148211B400000000), ANTLR_UINT64_LIT(0x0210621495668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_82_in_type_parameter_constraints_clause5140( FOLLOW_82_in_type_parameter_constraints_clause5140_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_parameter_constraint_list_in_type_parameter_constraints_clause5144_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_parameter_constraint_list_in_type_parameter_constraints_clause5144( FOLLOW_type_parameter_constraint_list_in_type_parameter_constraints_clause5144_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_set_in_type_parameter_constraint_list5207_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_set_in_type_parameter_constraint_list5207( FOLLOW_set_in_type_parameter_constraint_list5207_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_type_parameter_constraint_list5218_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_type_parameter_constraint_list5218( FOLLOW_77_in_type_parameter_constraint_list5218_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list5222_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list5222( FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list5222_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_type_parameter_constraint_list5229_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_type_parameter_constraint_list5229( FOLLOW_77_in_type_parameter_constraint_list5229_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_constructor_constraint_in_type_parameter_constraint_list5233_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_constructor_constraint_in_type_parameter_constraint_list5233( FOLLOW_constructor_constraint_in_type_parameter_constraint_list5233_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list5240_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list5240( FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list5240_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_type_parameter_constraint_list5245_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_type_parameter_constraint_list5245( FOLLOW_77_in_type_parameter_constraint_list5245_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_constructor_constraint_in_type_parameter_constraint_list5249_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_constructor_constraint_in_type_parameter_constraint_list5249( FOLLOW_constructor_constraint_in_type_parameter_constraint_list5249_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_constructor_constraint_in_type_parameter_constraint_list5256_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_constructor_constraint_in_type_parameter_constraint_list5256( FOLLOW_constructor_constraint_in_type_parameter_constraint_list5256_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_secondary_constraint_in_secondary_constraint_list5268_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_secondary_constraint_in_secondary_constraint_list5268( FOLLOW_secondary_constraint_in_secondary_constraint_list5268_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_secondary_constraint_list5271_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_secondary_constraint_list5271( FOLLOW_77_in_secondary_constraint_list5271_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_secondary_constraint_in_secondary_constraint_list5273_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_secondary_constraint_in_secondary_constraint_list5273( FOLLOW_secondary_constraint_in_secondary_constraint_list5273_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_name_in_secondary_constraint5283_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_name_in_secondary_constraint5283( FOLLOW_type_name_in_secondary_constraint5283_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_type_variable_name5293_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_type_variable_name5293( FOLLOW_identifier_in_type_variable_name5293_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_152_in_constructor_constraint5301_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_152_in_constructor_constraint5301( FOLLOW_152_in_constructor_constraint5301_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_constructor_constraint5305_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_constructor_constraint5305( FOLLOW_71_in_constructor_constraint5305_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_constructor_constraint5309_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_constructor_constraint5309( FOLLOW_RPAREN_in_constructor_constraint5309_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_return_type5317_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_return_type5317( FOLLOW_type_in_return_type5317_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_194_in_return_type5323_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_194_in_return_type5323( FOLLOW_194_in_return_type5323_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_formal_parameter_in_formal_parameter_list5330_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_formal_parameter_in_formal_parameter_list5330( FOLLOW_formal_parameter_in_formal_parameter_list5330_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_formal_parameter_list5333_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B440000000), ANTLR_UINT64_LIT(0x9A48EB15B6769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_formal_parameter_list5333( FOLLOW_77_in_formal_parameter_list5333_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_formal_parameter_in_formal_parameter_list5335_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_formal_parameter_in_formal_parameter_list5335( FOLLOW_formal_parameter_in_formal_parameter_list5335_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attributes_in_formal_parameter5345_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A48EB15B6769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attributes_in_formal_parameter5345( FOLLOW_attributes_in_formal_parameter5345_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_fixed_parameter_in_formal_parameter5351_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_fixed_parameter_in_formal_parameter5351( FOLLOW_fixed_parameter_in_formal_parameter5351_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_parameter_array_in_formal_parameter5355_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_parameter_array_in_formal_parameter5355( FOLLOW_parameter_array_in_formal_parameter5355_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_98_in_formal_parameter5362_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_98_in_formal_parameter5362( FOLLOW_98_in_formal_parameter5362_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_fixed_parameter_in_fixed_parameters5370_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_fixed_parameter_in_fixed_parameters5370( FOLLOW_fixed_parameter_in_fixed_parameters5370_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_fixed_parameters5375_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A48EB14B6769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_fixed_parameters5375( FOLLOW_77_in_fixed_parameters5375_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_fixed_parameter_in_fixed_parameters5379_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_fixed_parameter_in_fixed_parameters5379( FOLLOW_fixed_parameter_in_fixed_parameters5379_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_parameter_modifier_in_fixed_parameter5390_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_parameter_modifier_in_fixed_parameter5390( FOLLOW_parameter_modifier_in_fixed_parameter5390_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_fixed_parameter5395_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_fixed_parameter5395( FOLLOW_type_in_fixed_parameter5395_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_fixed_parameter5399_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000001000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_fixed_parameter5399( FOLLOW_identifier_in_fixed_parameter5399_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_default_argument_in_fixed_parameter5403_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_default_argument_in_fixed_parameter5403( FOLLOW_default_argument_in_fixed_parameter5403_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_88_in_default_argument5413_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_88_in_default_argument5413( FOLLOW_88_in_default_argument5413_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_default_argument5415_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_default_argument5415( FOLLOW_expression_in_default_argument5415_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_160_in_parameter_array5438_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_160_in_parameter_array5438( FOLLOW_160_in_parameter_array5438_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_parameter_array5442_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_parameter_array5442( FOLLOW_type_in_parameter_array5442_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_parameter_array5446_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_parameter_array5446( FOLLOW_identifier_in_parameter_array5446_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_141_in_interface_declaration5456_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_141_in_interface_declaration5456( FOLLOW_141_in_interface_declaration5456_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_interface_declaration5460_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000140000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000090) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_interface_declaration5460( FOLLOW_identifier_in_interface_declaration5460_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_variant_generic_parameter_list_in_interface_declaration5464_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000090) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_variant_generic_parameter_list_in_interface_declaration5464( FOLLOW_variant_generic_parameter_list_in_interface_declaration5464_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_base_in_interface_declaration5473_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000090) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_base_in_interface_declaration5473( FOLLOW_interface_base_in_interface_declaration5473_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_parameter_constraints_clauses_in_interface_declaration5478_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_parameter_constraints_clauses_in_interface_declaration5478( FOLLOW_type_parameter_constraints_clauses_in_interface_declaration5478_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_body_in_interface_declaration5483_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_body_in_interface_declaration5483( FOLLOW_interface_body_in_interface_declaration5483_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_interface_declaration5487_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_interface_declaration5487( FOLLOW_SEMI_in_interface_declaration5487_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_modifier_in_interface_modifiers5497_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x8000000800000000), ANTLR_UINT64_LIT(0x400410E841004000), ANTLR_UINT64_LIT(0x000000000000000A) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_modifier_in_interface_modifiers5497( FOLLOW_modifier_in_interface_modifiers5497_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_82_in_interface_base5510_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_82_in_interface_base5510( FOLLOW_82_in_interface_base5510_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_type_list_in_interface_base5512_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_type_list_in_interface_base5512( FOLLOW_interface_type_list_in_interface_base5512_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_199_in_interface_body5520_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0xB690B5BC40000000), ANTLR_UINT64_LIT(0xDA0CFAFCD776D249), ANTLR_UINT64_LIT(0x000000000000085F) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_199_in_interface_body5520( FOLLOW_199_in_interface_body5520_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_member_declarations_in_interface_body5524_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_member_declarations_in_interface_body5524( FOLLOW_interface_member_declarations_in_interface_body5524_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_203_in_interface_body5529_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_203_in_interface_body5529( FOLLOW_203_in_interface_body5529_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_member_declaration_in_interface_member_declarations5537_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000002), ANTLR_UINT64_LIT(0xB690B5BC40000000), ANTLR_UINT64_LIT(0xDA0CFAFCD776D249), ANTLR_UINT64_LIT(0x000000000000005F) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_member_declaration_in_interface_member_declarations5537( FOLLOW_interface_member_declaration_in_interface_member_declarations5537_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attributes_in_interface_member_declaration5546_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0xB690B5BC00000000), ANTLR_UINT64_LIT(0xDA0CFAFCD776D249), ANTLR_UINT64_LIT(0x000000000000005F) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attributes_in_interface_member_declaration5546( FOLLOW_attributes_in_interface_member_declaration5546_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_modifiers_in_interface_member_declaration5552_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x3690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_modifiers_in_interface_member_declaration5552( FOLLOW_modifiers_in_interface_member_declaration5552_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_194_in_interface_member_declaration5558_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_194_in_interface_member_declaration5558( FOLLOW_194_in_interface_member_declaration5558_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_method_declaration_in_interface_member_declaration5562_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_method_declaration_in_interface_member_declaration5562( FOLLOW_interface_method_declaration_in_interface_member_declaration5562_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_event_declaration_in_interface_member_declaration5568_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_event_declaration_in_interface_member_declaration5568( FOLLOW_interface_event_declaration_in_interface_member_declaration5568_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_interface_member_declaration5574_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0240621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_interface_member_declaration5574( FOLLOW_type_in_interface_member_declaration5574_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_method_declaration_in_interface_member_declaration5590_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_method_declaration_in_interface_member_declaration5590( FOLLOW_interface_method_declaration_in_interface_member_declaration5590_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_property_declaration_in_interface_member_declaration5615_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_property_declaration_in_interface_member_declaration5615( FOLLOW_interface_property_declaration_in_interface_member_declaration5615_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_indexer_declaration_in_interface_member_declaration5625_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_indexer_declaration_in_interface_member_declaration5625( FOLLOW_interface_indexer_declaration_in_interface_member_declaration5625_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_interface_property_declaration5642_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_interface_property_declaration5642( FOLLOW_identifier_in_interface_property_declaration5642_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_199_in_interface_property_declaration5646_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000400000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_199_in_interface_property_declaration5646( FOLLOW_199_in_interface_property_declaration5646_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_accessor_declarations_in_interface_property_declaration5650_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_accessor_declarations_in_interface_property_declaration5650( FOLLOW_interface_accessor_declarations_in_interface_property_declaration5650_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_203_in_interface_property_declaration5654_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_203_in_interface_property_declaration5654( FOLLOW_203_in_interface_property_declaration5654_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_interface_method_declaration5662_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000100080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_interface_method_declaration5662( FOLLOW_identifier_in_interface_method_declaration5662_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_generic_argument_list_in_interface_method_declaration5666_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_generic_argument_list_in_interface_method_declaration5666( FOLLOW_generic_argument_list_in_interface_method_declaration5666_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_interface_method_declaration5674_bits[]	= { ANTLR_UINT64_LIT(0x0002000020000000), ANTLR_UINT64_LIT(0x1690B5B440000000), ANTLR_UINT64_LIT(0x9A48EB15B6769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_interface_method_declaration5674( FOLLOW_71_in_interface_method_declaration5674_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_formal_parameter_list_in_interface_method_declaration5678_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_formal_parameter_list_in_interface_method_declaration5678( FOLLOW_formal_parameter_list_in_interface_method_declaration5678_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_interface_method_declaration5683_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_interface_method_declaration5683( FOLLOW_RPAREN_in_interface_method_declaration5683_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration5687_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration5687( FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration5687_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_interface_method_declaration5692_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_interface_method_declaration5692( FOLLOW_SEMI_in_interface_method_declaration5692_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_125_in_interface_event_declaration5703_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_125_in_interface_event_declaration5703( FOLLOW_125_in_interface_event_declaration5703_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_interface_event_declaration5707_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_interface_event_declaration5707( FOLLOW_type_in_interface_event_declaration5707_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_interface_event_declaration5711_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_interface_event_declaration5711( FOLLOW_identifier_in_interface_event_declaration5711_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_interface_event_declaration5715_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_interface_event_declaration5715( FOLLOW_SEMI_in_interface_event_declaration5715_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_182_in_interface_indexer_declaration5727_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_182_in_interface_indexer_declaration5727( FOLLOW_182_in_interface_indexer_declaration5727_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_94_in_interface_indexer_declaration5731_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B440000000), ANTLR_UINT64_LIT(0x9A48EB15B6769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_94_in_interface_indexer_declaration5731( FOLLOW_94_in_interface_indexer_declaration5731_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_formal_parameter_list_in_interface_indexer_declaration5735_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000080000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_formal_parameter_list_in_interface_indexer_declaration5735( FOLLOW_formal_parameter_list_in_interface_indexer_declaration5735_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_95_in_interface_indexer_declaration5739_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_95_in_interface_indexer_declaration5739( FOLLOW_95_in_interface_indexer_declaration5739_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_199_in_interface_indexer_declaration5743_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000400000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_199_in_interface_indexer_declaration5743( FOLLOW_199_in_interface_indexer_declaration5743_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_accessor_declarations_in_interface_indexer_declaration5747_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_accessor_declarations_in_interface_indexer_declaration5747( FOLLOW_interface_accessor_declarations_in_interface_indexer_declaration5747_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_203_in_interface_indexer_declaration5751_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_203_in_interface_indexer_declaration5751( FOLLOW_203_in_interface_indexer_declaration5751_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attributes_in_interface_accessor_declarations5759_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attributes_in_interface_accessor_declarations5759( FOLLOW_attributes_in_interface_accessor_declarations5759_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations5768_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000400000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations5768( FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations5768_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attributes_in_interface_accessor_declarations5772_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attributes_in_interface_accessor_declarations5772( FOLLOW_attributes_in_interface_accessor_declarations5772_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations5777_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations5777( FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations5777_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations5784_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations5784( FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations5784_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attributes_in_interface_accessor_declarations5788_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attributes_in_interface_accessor_declarations5788( FOLLOW_attributes_in_interface_accessor_declarations5788_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations5793_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations5793( FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations5793_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_135_in_interface_get_accessor_declaration5803_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_135_in_interface_get_accessor_declaration5803( FOLLOW_135_in_interface_get_accessor_declaration5803_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_interface_get_accessor_declaration5807_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_interface_get_accessor_declaration5807( FOLLOW_SEMI_in_interface_get_accessor_declaration5807_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_174_in_interface_set_accessor_declaration5817_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_174_in_interface_set_accessor_declaration5817( FOLLOW_174_in_interface_set_accessor_declaration5817_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_interface_set_accessor_declaration5821_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_interface_set_accessor_declaration5821( FOLLOW_SEMI_in_interface_set_accessor_declaration5821_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_modifier_in_method_modifiers5831_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x8000000800000000), ANTLR_UINT64_LIT(0x400410E841004000), ANTLR_UINT64_LIT(0x000000000000000A) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_modifier_in_method_modifiers5831( FOLLOW_modifier_in_method_modifiers5831_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_180_in_struct_declaration5843_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_180_in_struct_declaration5843( FOLLOW_180_in_struct_declaration5843_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_or_generic_in_struct_declaration5847_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000090) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_or_generic_in_struct_declaration5847( FOLLOW_type_or_generic_in_struct_declaration5847_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_struct_interfaces_in_struct_declaration5851_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000090) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_struct_interfaces_in_struct_declaration5851( FOLLOW_struct_interfaces_in_struct_declaration5851_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_parameter_constraints_clauses_in_struct_declaration5856_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_parameter_constraints_clauses_in_struct_declaration5856( FOLLOW_type_parameter_constraints_clauses_in_struct_declaration5856_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_struct_body_in_struct_declaration5861_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_struct_body_in_struct_declaration5861( FOLLOW_struct_body_in_struct_declaration5861_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_struct_declaration5865_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_struct_declaration5865( FOLLOW_SEMI_in_struct_declaration5865_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_struct_modifier_in_struct_modifiers5874_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x4000006801004000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_struct_modifier_in_struct_modifiers5874( FOLLOW_struct_modifier_in_struct_modifiers5874_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_82_in_struct_interfaces5911_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_82_in_struct_interfaces5911( FOLLOW_82_in_struct_interfaces5911_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_type_list_in_struct_interfaces5915_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_type_list_in_struct_interfaces5915( FOLLOW_interface_type_list_in_struct_interfaces5915_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_199_in_struct_body5922_bits[]	= { ANTLR_UINT64_LIT(0x0000000020080000), ANTLR_UINT64_LIT(0xF6D6B5BC40000000), ANTLR_UINT64_LIT(0xDA1CFAFED776F649), ANTLR_UINT64_LIT(0x000000000000085F) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_199_in_struct_body5922( FOLLOW_199_in_struct_body5922_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_struct_member_declarations_in_struct_body5926_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_struct_member_declarations_in_struct_body5926( FOLLOW_struct_member_declarations_in_struct_body5926_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_203_in_struct_body5931_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_203_in_struct_body5931( FOLLOW_203_in_struct_body5931_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_struct_member_declaration_in_struct_member_declarations5938_bits[]	= { ANTLR_UINT64_LIT(0x0000000020080002), ANTLR_UINT64_LIT(0xF6D6B5BC40000000), ANTLR_UINT64_LIT(0xDA1CFAFED776F649), ANTLR_UINT64_LIT(0x000000000000005F) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_struct_member_declaration_in_struct_member_declarations5938( FOLLOW_struct_member_declaration_in_struct_member_declarations5938_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attributes_in_struct_member_declaration5949_bits[]	= { ANTLR_UINT64_LIT(0x0000000020080000), ANTLR_UINT64_LIT(0xF6D6B5BC00000000), ANTLR_UINT64_LIT(0xDA1CFAFED776F649), ANTLR_UINT64_LIT(0x000000000000005F) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attributes_in_struct_member_declaration5949( FOLLOW_attributes_in_struct_member_declaration5949_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_modifiers_in_struct_member_declaration5956_bits[]	= { ANTLR_UINT64_LIT(0x0000000020080000), ANTLR_UINT64_LIT(0x76D6B5B400000000), ANTLR_UINT64_LIT(0x9A18EA169676B649), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_modifiers_in_struct_member_declaration5956( FOLLOW_modifiers_in_struct_member_declaration5956_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_114_in_struct_member_declaration5966_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_114_in_struct_member_declaration5966( FOLLOW_114_in_struct_member_declaration5966_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_struct_member_declaration5970_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_struct_member_declaration5970( FOLLOW_type_in_struct_member_declaration5970_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_constant_declarators_in_struct_member_declaration5974_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_constant_declarators_in_struct_member_declaration5974( FOLLOW_constant_declarators_in_struct_member_declaration5974_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_struct_member_declaration5978_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_struct_member_declaration5978( FOLLOW_SEMI_in_struct_member_declaration5978_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_event_declaration_in_struct_member_declaration5984_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_event_declaration_in_struct_member_declaration5984( FOLLOW_event_declaration_in_struct_member_declaration5984_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_161_in_struct_member_declaration5992_bits[]	= { ANTLR_UINT64_LIT(0x20A4005030400080), ANTLR_UINT64_LIT(0x1692B5B400000000), ANTLR_UINT64_LIT(0x9A18EA149676B249), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_161_in_struct_member_declaration5992( FOLLOW_161_in_struct_member_declaration5992_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_method_declaration_in_struct_member_declaration6003_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_method_declaration_in_struct_member_declaration6003( FOLLOW_method_declaration_in_struct_member_declaration6003_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_declaration_in_struct_member_declaration6011_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_declaration_in_struct_member_declaration6011( FOLLOW_interface_declaration_in_struct_member_declaration6011_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_class_declaration_in_struct_member_declaration6019_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_class_declaration_in_struct_member_declaration6019( FOLLOW_class_declaration_in_struct_member_declaration6019_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_struct_declaration_in_struct_member_declaration6027_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_struct_declaration_in_struct_member_declaration6027( FOLLOW_struct_declaration_in_struct_member_declaration6027_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_interface_declaration_in_struct_member_declaration6039_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_interface_declaration_in_struct_member_declaration6039( FOLLOW_interface_declaration_in_struct_member_declaration6039_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_class_declaration_in_struct_member_declaration6046_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_class_declaration_in_struct_member_declaration6046( FOLLOW_class_declaration_in_struct_member_declaration6046_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_194_in_struct_member_declaration6054_bits[]	= { ANTLR_UINT64_LIT(0x20A4005030400080), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_194_in_struct_member_declaration6054( FOLLOW_194_in_struct_member_declaration6054_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_method_declaration_in_struct_member_declaration6058_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_method_declaration_in_struct_member_declaration6058( FOLLOW_method_declaration_in_struct_member_declaration6058_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_struct_member_declaration6064_bits[]	= { ANTLR_UINT64_LIT(0x20A4005030400080), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A48EA149E769249), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_struct_member_declaration6064( FOLLOW_type_in_struct_member_declaration6064_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_method_declaration_in_struct_member_declaration6087_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_method_declaration_in_struct_member_declaration6087( FOLLOW_method_declaration_in_struct_member_declaration6087_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_property_declaration_in_struct_member_declaration6105_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_property_declaration_in_struct_member_declaration6105( FOLLOW_property_declaration_in_struct_member_declaration6105_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_name_in_struct_member_declaration6130_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_name_in_struct_member_declaration6130( FOLLOW_type_name_in_struct_member_declaration6130_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_DOT_in_struct_member_declaration6132_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0040000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_DOT_in_struct_member_declaration6132( FOLLOW_DOT_in_struct_member_declaration6132_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_indexer_declaration_in_struct_member_declaration6134_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_indexer_declaration_in_struct_member_declaration6134( FOLLOW_indexer_declaration_in_struct_member_declaration6134_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_indexer_declaration_in_struct_member_declaration6145_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_indexer_declaration_in_struct_member_declaration6145( FOLLOW_indexer_declaration_in_struct_member_declaration6145_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_field_declaration_in_struct_member_declaration6161_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_field_declaration_in_struct_member_declaration6161( FOLLOW_field_declaration_in_struct_member_declaration6161_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_operator_declaration_in_struct_member_declaration6182_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_operator_declaration_in_struct_member_declaration6182( FOLLOW_operator_declaration_in_struct_member_declaration6182_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_struct_declaration_in_struct_member_declaration6204_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_struct_declaration_in_struct_member_declaration6204( FOLLOW_struct_declaration_in_struct_member_declaration6204_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_enum_declaration_in_struct_member_declaration6211_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_enum_declaration_in_struct_member_declaration6211( FOLLOW_enum_declaration_in_struct_member_declaration6211_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_delegate_declaration_in_struct_member_declaration6219_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_delegate_declaration_in_struct_member_declaration6219( FOLLOW_delegate_declaration_in_struct_member_declaration6219_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_conversion_operator_declaration_in_struct_member_declaration6226_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_conversion_operator_declaration_in_struct_member_declaration6226( FOLLOW_conversion_operator_declaration_in_struct_member_declaration6226_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_constructor_declaration_in_struct_member_declaration6232_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_constructor_declaration_in_struct_member_declaration6232( FOLLOW_constructor_declaration_in_struct_member_declaration6232_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_indexer_declarator_in_indexer_declaration6250_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_indexer_declarator_in_indexer_declaration6250( FOLLOW_indexer_declarator_in_indexer_declaration6250_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_199_in_indexer_declaration6254_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000406800004080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_199_in_indexer_declaration6254( FOLLOW_199_in_indexer_declaration6254_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_accessor_declarations_in_indexer_declaration6258_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_accessor_declarations_in_indexer_declaration6258( FOLLOW_accessor_declarations_in_indexer_declaration6258_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_203_in_indexer_declaration6262_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_203_in_indexer_declaration6262( FOLLOW_203_in_indexer_declaration6262_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_182_in_indexer_declarator6277_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_182_in_indexer_declarator6277( FOLLOW_182_in_indexer_declarator6277_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_94_in_indexer_declarator6281_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B440000000), ANTLR_UINT64_LIT(0x9A48EB15B6769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_94_in_indexer_declarator6281( FOLLOW_94_in_indexer_declarator6281_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_formal_parameter_list_in_indexer_declarator6285_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000080000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_formal_parameter_list_in_indexer_declarator6285( FOLLOW_formal_parameter_list_in_indexer_declarator6285_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_95_in_indexer_declarator6289_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_95_in_indexer_declarator6289( FOLLOW_95_in_indexer_declarator6289_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_operator_declarator_in_operator_declaration6302_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_operator_declarator_in_operator_declaration6302( FOLLOW_operator_declarator_in_operator_declaration6302_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_operator_body_in_operator_declaration6304_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_operator_body_in_operator_declaration6304( FOLLOW_operator_body_in_operator_declaration6304_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_155_in_operator_declarator6315_bits[]	= { ANTLR_UINT64_LIT(0x0080002000C00000), ANTLR_UINT64_LIT(0x000000010AB14D27), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001100) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_155_in_operator_declarator6315( FOLLOW_155_in_operator_declarator6315_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_set_in_operator_declarator6325_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_set_in_operator_declarator6325( FOLLOW_set_in_operator_declarator6325_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_operator_declarator6335_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_operator_declarator6335( FOLLOW_71_in_operator_declarator6335_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_operator_declarator6339_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_operator_declarator6339( FOLLOW_type_in_operator_declarator6339_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_operator_declarator6343_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_operator_declarator6343( FOLLOW_identifier_in_operator_declarator6343_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_binary_operator_declarator_in_operator_declarator6346_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_binary_operator_declarator_in_operator_declarator6346( FOLLOW_binary_operator_declarator_in_operator_declarator6346_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unary_operator_declarator_in_operator_declarator6350_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unary_operator_declarator_in_operator_declarator6350( FOLLOW_unary_operator_declarator_in_operator_declarator6350_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_overloadable_unary_operator_in_operator_declarator6359_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_overloadable_unary_operator_in_operator_declarator6359( FOLLOW_overloadable_unary_operator_in_operator_declarator6359_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unary_operator_declarator_in_operator_declarator6363_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unary_operator_declarator_in_operator_declarator6363( FOLLOW_unary_operator_declarator_in_operator_declarator6363_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_overloadable_binary_operator_in_operator_declarator6371_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_overloadable_binary_operator_in_operator_declarator6371( FOLLOW_overloadable_binary_operator_in_operator_declarator6371_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_binary_operator_declarator_in_operator_declarator6375_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_binary_operator_declarator_in_operator_declarator6375( FOLLOW_binary_operator_declarator_in_operator_declarator6375_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_unary_operator_declarator6396_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_unary_operator_declarator6396( FOLLOW_RPAREN_in_unary_operator_declarator6396_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_binary_operator_declarator6445_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_binary_operator_declarator6445( FOLLOW_77_in_binary_operator_declarator6445_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_binary_operator_declarator6449_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_binary_operator_declarator6449( FOLLOW_type_in_binary_operator_declarator6449_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_binary_operator_declarator6453_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_binary_operator_declarator6453( FOLLOW_identifier_in_binary_operator_declarator6453_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_binary_operator_declarator6457_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_binary_operator_declarator6457( FOLLOW_RPAREN_in_binary_operator_declarator6457_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_72_in_overloadable_binary_operator6471_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_72_in_overloadable_binary_operator6471( FOLLOW_72_in_overloadable_binary_operator6471_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_80_in_overloadable_binary_operator6476_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_80_in_overloadable_binary_operator6476( FOLLOW_80_in_overloadable_binary_operator6476_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_66_in_overloadable_binary_operator6481_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_66_in_overloadable_binary_operator6481( FOLLOW_66_in_overloadable_binary_operator6481_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_69_in_overloadable_binary_operator6486_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_69_in_overloadable_binary_operator6486( FOLLOW_69_in_overloadable_binary_operator6486_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_200_in_overloadable_binary_operator6491_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_200_in_overloadable_binary_operator6491( FOLLOW_200_in_overloadable_binary_operator6491_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_96_in_overloadable_binary_operator6496_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_96_in_overloadable_binary_operator6496( FOLLOW_96_in_overloadable_binary_operator6496_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_85_in_overloadable_binary_operator6501_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_85_in_overloadable_binary_operator6501( FOLLOW_85_in_overloadable_binary_operator6501_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_GT_in_overloadable_binary_operator6506_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_GT_in_overloadable_binary_operator6506( FOLLOW_GT_in_overloadable_binary_operator6506_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_GT_in_overloadable_binary_operator6508_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_GT_in_overloadable_binary_operator6508( FOLLOW_GT_in_overloadable_binary_operator6508_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_89_in_overloadable_binary_operator6513_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_89_in_overloadable_binary_operator6513( FOLLOW_89_in_overloadable_binary_operator6513_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_65_in_overloadable_binary_operator6518_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_65_in_overloadable_binary_operator6518( FOLLOW_65_in_overloadable_binary_operator6518_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_GT_in_overloadable_binary_operator6523_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_GT_in_overloadable_binary_operator6523( FOLLOW_GT_in_overloadable_binary_operator6523_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_84_in_overloadable_binary_operator6528_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_84_in_overloadable_binary_operator6528( FOLLOW_84_in_overloadable_binary_operator6528_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_91_in_overloadable_binary_operator6533_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_91_in_overloadable_binary_operator6533( FOLLOW_91_in_overloadable_binary_operator6533_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_87_in_overloadable_binary_operator6538_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_87_in_overloadable_binary_operator6538( FOLLOW_87_in_overloadable_binary_operator6538_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_conversion_operator_declarator_in_conversion_operator_declaration6550_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_conversion_operator_declarator_in_conversion_operator_declaration6550( FOLLOW_conversion_operator_declarator_in_conversion_operator_declaration6550_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_operator_body_in_conversion_operator_declaration6554_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_operator_body_in_conversion_operator_declaration6554( FOLLOW_operator_body_in_conversion_operator_declaration6554_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_set_in_conversion_operator_declarator6565_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000008000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_set_in_conversion_operator_declarator6565( FOLLOW_set_in_conversion_operator_declarator6565_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_155_in_conversion_operator_declarator6574_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_155_in_conversion_operator_declarator6574( FOLLOW_155_in_conversion_operator_declarator6574_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_conversion_operator_declarator6578_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_conversion_operator_declarator6578( FOLLOW_type_in_conversion_operator_declarator6578_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_conversion_operator_declarator6582_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_conversion_operator_declarator6582( FOLLOW_71_in_conversion_operator_declarator6582_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_conversion_operator_declarator6586_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_conversion_operator_declarator6586( FOLLOW_type_in_conversion_operator_declarator6586_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_conversion_operator_declarator6590_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_conversion_operator_declarator6590( FOLLOW_identifier_in_conversion_operator_declarator6590_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_conversion_operator_declarator6594_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_conversion_operator_declarator6594( FOLLOW_RPAREN_in_conversion_operator_declarator6594_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_block_in_operator_body6605_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_block_in_operator_body6605( FOLLOW_block_in_operator_body6605_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_constructor_declarator_in_constructor_declaration6617_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_constructor_declarator_in_constructor_declaration6617( FOLLOW_constructor_declarator_in_constructor_declaration6617_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_constructor_body_in_constructor_declaration6621_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_constructor_body_in_constructor_declaration6621( FOLLOW_constructor_body_in_constructor_declaration6621_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_constructor_declarator6632_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_constructor_declarator6632( FOLLOW_identifier_in_constructor_declarator6632_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_constructor_declarator6636_bits[]	= { ANTLR_UINT64_LIT(0x0002000020000000), ANTLR_UINT64_LIT(0x1690B5B440000000), ANTLR_UINT64_LIT(0x9A48EB15B6769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_constructor_declarator6636( FOLLOW_71_in_constructor_declarator6636_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_formal_parameter_list_in_constructor_declarator6640_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_formal_parameter_list_in_constructor_declarator6640( FOLLOW_formal_parameter_list_in_constructor_declarator6640_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_constructor_declarator6645_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000040000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_constructor_declarator6645( FOLLOW_RPAREN_in_constructor_declarator6645_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_constructor_initializer_in_constructor_declarator6649_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_constructor_initializer_in_constructor_declarator6649( FOLLOW_constructor_initializer_in_constructor_declarator6649_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_82_in_constructor_initializer6661_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000020000000000), ANTLR_UINT64_LIT(0x0040000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_82_in_constructor_initializer6661( FOLLOW_82_in_constructor_initializer6661_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_set_in_constructor_initializer6665_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_set_in_constructor_initializer6665( FOLLOW_set_in_constructor_initializer6665_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_constructor_initializer6675_bits[]	= { ANTLR_UINT64_LIT(0x20A6007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EB14B7769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_constructor_initializer6675( FOLLOW_71_in_constructor_initializer6675_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_argument_list_in_constructor_initializer6679_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_argument_list_in_constructor_initializer6679( FOLLOW_argument_list_in_constructor_initializer6679_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_constructor_initializer6684_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_constructor_initializer6684( FOLLOW_RPAREN_in_constructor_initializer6684_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_block_in_constructor_body6695_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_block_in_constructor_body6695( FOLLOW_block_in_constructor_body6695_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_204_in_destructor_declaration6713_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_204_in_destructor_declaration6713( FOLLOW_204_in_destructor_declaration6713_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_destructor_declaration6716_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_destructor_declaration6716( FOLLOW_identifier_in_destructor_declaration6716_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_destructor_declaration6720_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_destructor_declaration6720( FOLLOW_71_in_destructor_declaration6720_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_destructor_declaration6724_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_destructor_declaration6724( FOLLOW_RPAREN_in_destructor_declaration6724_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_destructor_body_in_destructor_declaration6729_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_destructor_body_in_destructor_declaration6729( FOLLOW_destructor_body_in_destructor_declaration6729_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_block_in_destructor_body6740_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_block_in_destructor_body6740( FOLLOW_block_in_destructor_body6740_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_invocation_start_in_invocation_expression6752_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001000), ANTLR_UINT64_LIT(0x0000000040000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_invocation_start_in_invocation_expression6752( FOLLOW_invocation_start_in_invocation_expression6752_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_arguments_in_invocation_expression6778_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_arguments_in_invocation_expression6778( FOLLOW_arguments_in_invocation_expression6778_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_invocation_part_in_invocation_expression6782_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001000), ANTLR_UINT64_LIT(0x0000000040000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_invocation_part_in_invocation_expression6782( FOLLOW_invocation_part_in_invocation_expression6782_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_invocation_part_in_invocation_expression6789_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001000), ANTLR_UINT64_LIT(0x0000000040000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_invocation_part_in_invocation_expression6789( FOLLOW_invocation_part_in_invocation_expression6789_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_arguments_in_invocation_expression6798_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_arguments_in_invocation_expression6798( FOLLOW_arguments_in_invocation_expression6798_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_predefined_type_in_invocation_start6808_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_predefined_type_in_invocation_start6808( FOLLOW_predefined_type_in_invocation_start6808_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_invocation_start6825_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000100000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_invocation_start6825( FOLLOW_identifier_in_invocation_start6825_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_generic_argument_list_in_invocation_start6829_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_generic_argument_list_in_invocation_start6829( FOLLOW_generic_argument_list_in_invocation_start6829_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_182_in_invocation_start6834_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_182_in_invocation_start6834( FOLLOW_182_in_invocation_start6834_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_105_in_invocation_start6840_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_105_in_invocation_start6840( FOLLOW_105_in_invocation_start6840_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_invocation_start6845_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000080000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_invocation_start6845( FOLLOW_identifier_in_invocation_start6845_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_83_in_invocation_start6850_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_83_in_invocation_start6850( FOLLOW_83_in_invocation_start6850_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_invocation_start6854_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_invocation_start6854( FOLLOW_identifier_in_invocation_start6854_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_typeof_expression_in_invocation_start6861_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_typeof_expression_in_invocation_start6861( FOLLOW_typeof_expression_in_invocation_start6861_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_access_identifier_in_invocation_part6885_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_access_identifier_in_invocation_part6885( FOLLOW_access_identifier_in_invocation_part6885_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_brackets_in_invocation_part6890_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_brackets_in_invocation_part6890( FOLLOW_brackets_in_invocation_part6890_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_declaration_statement_in_statement6907_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_declaration_statement_in_statement6907( FOLLOW_declaration_statement_in_statement6907_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_labeled_statement_in_statement6922_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_labeled_statement_in_statement6922( FOLLOW_labeled_statement_in_statement6922_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_embedded_statement_in_statement6927_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_embedded_statement_in_statement6927( FOLLOW_embedded_statement_in_statement6927_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_block_in_embedded_statement6937_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_block_in_embedded_statement6937( FOLLOW_block_in_embedded_statement6937_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_selection_statement_in_embedded_statement6942_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_selection_statement_in_embedded_statement6942( FOLLOW_selection_statement_in_embedded_statement6942_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_iteration_statement_in_embedded_statement6948_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_iteration_statement_in_embedded_statement6948( FOLLOW_iteration_statement_in_embedded_statement6948_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_jump_statement_in_embedded_statement6954_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_jump_statement_in_embedded_statement6954( FOLLOW_jump_statement_in_embedded_statement6954_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_try_statement_in_embedded_statement6961_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_try_statement_in_embedded_statement6961( FOLLOW_try_statement_in_embedded_statement6961_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_checked_statement_in_embedded_statement6966_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_checked_statement_in_embedded_statement6966( FOLLOW_checked_statement_in_embedded_statement6966_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unchecked_statement_in_embedded_statement6971_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unchecked_statement_in_embedded_statement6971( FOLLOW_unchecked_statement_in_embedded_statement6971_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_lock_statement_in_embedded_statement6976_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_lock_statement_in_embedded_statement6976( FOLLOW_lock_statement_in_embedded_statement6976_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_using_statement_in_embedded_statement6981_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_using_statement_in_embedded_statement6981( FOLLOW_using_statement_in_embedded_statement6981_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_yield_statement_in_embedded_statement6987_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_yield_statement_in_embedded_statement6987( FOLLOW_yield_statement_in_embedded_statement6987_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unsafe_statement_in_embedded_statement6993_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unsafe_statement_in_embedded_statement6993( FOLLOW_unsafe_statement_in_embedded_statement6993_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_fixed_statement_in_embedded_statement6998_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_fixed_statement_in_embedded_statement6998( FOLLOW_fixed_statement_in_embedded_statement6998_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_statement_in_embedded_statement7003_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_statement_in_embedded_statement7003( FOLLOW_expression_statement_in_embedded_statement7003_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_130_in_fixed_statement7013_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_130_in_fixed_statement7013( FOLLOW_130_in_fixed_statement7013_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_fixed_statement7017_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_fixed_statement7017( FOLLOW_71_in_fixed_statement7017_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_pointer_type_in_fixed_statement7021_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_pointer_type_in_fixed_statement7021( FOLLOW_pointer_type_in_fixed_statement7021_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_fixed_pointer_declarators_in_fixed_statement7023_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_fixed_pointer_declarators_in_fixed_statement7023( FOLLOW_fixed_pointer_declarators_in_fixed_statement7023_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_fixed_statement7027_bits[]	= { ANTLR_UINT64_LIT(0x28B4007070400080), ANTLR_UINT64_LIT(0x17F9BFB400004DA1), ANTLR_UINT64_LIT(0xFFE9EE14977E937D), ANTLR_UINT64_LIT(0x00000000000010F1) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_fixed_statement7027( FOLLOW_RPAREN_in_fixed_statement7027_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_embedded_statement_in_fixed_statement7031_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_embedded_statement_in_fixed_statement7031( FOLLOW_embedded_statement_in_fixed_statement7031_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators7039_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators7039( FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators7039_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_fixed_pointer_declarators7044_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_fixed_pointer_declarators7044( FOLLOW_77_in_fixed_pointer_declarators7044_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators7048_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators7048( FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators7048_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_fixed_pointer_declarator7058_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_fixed_pointer_declarator7058( FOLLOW_identifier_in_fixed_pointer_declarator7058_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_88_in_fixed_pointer_declarator7062_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_88_in_fixed_pointer_declarator7062( FOLLOW_88_in_fixed_pointer_declarator7062_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator7066_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator7066( FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator7066_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_fixed_pointer_initializer7076_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_fixed_pointer_initializer7076( FOLLOW_expression_in_fixed_pointer_initializer7076_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_190_in_unsafe_statement7083_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_190_in_unsafe_statement7083( FOLLOW_190_in_unsafe_statement7083_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_block_in_unsafe_statement7087_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_block_in_unsafe_statement7087( FOLLOW_block_in_unsafe_statement7087_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_labeled_statement7094_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_labeled_statement7094( FOLLOW_identifier_in_labeled_statement7094_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_82_in_labeled_statement7098_bits[]	= { ANTLR_UINT64_LIT(0x28B4007070400080), ANTLR_UINT64_LIT(0x17FDBFB400004DA1), ANTLR_UINT64_LIT(0xFFE9EE14977E937D), ANTLR_UINT64_LIT(0x00000000000010F5) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_82_in_labeled_statement7098( FOLLOW_82_in_labeled_statement7098_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_statement_in_labeled_statement7102_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_statement_in_labeled_statement7102( FOLLOW_statement_in_labeled_statement7102_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_local_variable_declaration_in_declaration_statement7117_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_local_variable_declaration_in_declaration_statement7117( FOLLOW_local_variable_declaration_in_declaration_statement7117_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_local_constant_declaration_in_declaration_statement7124_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_local_constant_declaration_in_declaration_statement7124( FOLLOW_local_constant_declaration_in_declaration_statement7124_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_declaration_statement7130_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_declaration_statement7130( FOLLOW_SEMI_in_declaration_statement7130_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_local_variable_type_in_local_variable_declaration7142_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_local_variable_type_in_local_variable_declaration7142( FOLLOW_local_variable_type_in_local_variable_declaration7142_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_local_variable_declarators_in_local_variable_declaration7146_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_local_variable_declarators_in_local_variable_declaration7146( FOLLOW_local_variable_declarators_in_local_variable_declaration7146_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_192_in_local_variable_type7174_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_192_in_local_variable_type7174( FOLLOW_192_in_local_variable_type7174_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_122_in_local_variable_type7185_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_122_in_local_variable_type7185( FOLLOW_122_in_local_variable_type7185_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_local_variable_type7190_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_local_variable_type7190( FOLLOW_type_in_local_variable_type7190_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_local_variable_declarator_in_local_variable_declarators7200_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_local_variable_declarator_in_local_variable_declarators7200( FOLLOW_local_variable_declarator_in_local_variable_declarators7200_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_local_variable_declarators7203_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_local_variable_declarators7203( FOLLOW_77_in_local_variable_declarators7203_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_local_variable_declarator_in_local_variable_declarators7205_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_local_variable_declarator_in_local_variable_declarators7205( FOLLOW_local_variable_declarator_in_local_variable_declarators7205_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_local_variable_declarator7224_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000001000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_local_variable_declarator7224( FOLLOW_identifier_in_local_variable_declarator7224_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_88_in_local_variable_declarator7227_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE4BEA1497769249), ANTLR_UINT64_LIT(0x00000000000010D1) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_88_in_local_variable_declarator7227( FOLLOW_88_in_local_variable_declarator7227_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_local_variable_initializer_in_local_variable_declarator7230_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_local_variable_initializer_in_local_variable_declarator7230( FOLLOW_local_variable_initializer_in_local_variable_declarator7230_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_local_variable_initializer7244_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_local_variable_initializer7244( FOLLOW_expression_in_local_variable_initializer7244_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_array_initializer_in_local_variable_initializer7249_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_array_initializer_in_local_variable_initializer7249( FOLLOW_array_initializer_in_local_variable_initializer7249_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_stackalloc_initializer_in_local_variable_initializer7255_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_stackalloc_initializer_in_local_variable_initializer7255( FOLLOW_stackalloc_initializer_in_local_variable_initializer7255_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_177_in_stackalloc_initializer7265_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_177_in_stackalloc_initializer7265( FOLLOW_177_in_stackalloc_initializer7265_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unmanaged_type_in_stackalloc_initializer7269_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unmanaged_type_in_stackalloc_initializer7269( FOLLOW_unmanaged_type_in_stackalloc_initializer7269_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_94_in_stackalloc_initializer7273_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_94_in_stackalloc_initializer7273( FOLLOW_94_in_stackalloc_initializer7273_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_stackalloc_initializer7277_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000080000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_stackalloc_initializer7277( FOLLOW_expression_in_stackalloc_initializer7277_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_95_in_stackalloc_initializer7281_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_95_in_stackalloc_initializer7281( FOLLOW_95_in_stackalloc_initializer7281_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_114_in_local_constant_declaration7289_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_114_in_local_constant_declaration7289( FOLLOW_114_in_local_constant_declaration7289_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_local_constant_declaration7293_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_local_constant_declaration7293( FOLLOW_type_in_local_constant_declaration7293_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_constant_declarators_in_local_constant_declaration7297_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_constant_declarators_in_local_constant_declaration7297( FOLLOW_constant_declarators_in_local_constant_declaration7297_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression_statement7305_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_expression_statement7305( FOLLOW_expression_in_expression_statement7305_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_expression_statement7309_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_expression_statement7309( FOLLOW_SEMI_in_expression_statement7309_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_statement_expression7319_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_statement_expression7319( FOLLOW_expression_in_statement_expression7319_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_if_statement_in_selection_statement7328_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_if_statement_in_selection_statement7328( FOLLOW_if_statement_in_selection_statement7328_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_switch_statement_in_selection_statement7333_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_switch_statement_in_selection_statement7333( FOLLOW_switch_statement_in_selection_statement7333_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_IF_in_if_statement7343_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_IF_in_if_statement7343( FOLLOW_IF_in_if_statement7343_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_if_statement7347_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_if_statement7347( FOLLOW_71_in_if_statement7347_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_boolean_expression_in_if_statement7351_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_boolean_expression_in_if_statement7351( FOLLOW_boolean_expression_in_if_statement7351_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_if_statement7355_bits[]	= { ANTLR_UINT64_LIT(0x28B4007070400080), ANTLR_UINT64_LIT(0x17F9BFB400004DA1), ANTLR_UINT64_LIT(0xFFE9EE14977E937D), ANTLR_UINT64_LIT(0x00000000000010F1) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_if_statement7355( FOLLOW_RPAREN_in_if_statement7355_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_embedded_statement_in_if_statement7359_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0800000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_embedded_statement_in_if_statement7359( FOLLOW_embedded_statement_in_if_statement7359_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_else_statement_in_if_statement7368_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_else_statement_in_if_statement7368( FOLLOW_else_statement_in_if_statement7368_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_123_in_else_statement7379_bits[]	= { ANTLR_UINT64_LIT(0x28B4007070400080), ANTLR_UINT64_LIT(0x17F9BFB400004DA1), ANTLR_UINT64_LIT(0xFFE9EE14977E937D), ANTLR_UINT64_LIT(0x00000000000010F1) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_123_in_else_statement7379( FOLLOW_123_in_else_statement7379_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_embedded_statement_in_else_statement7383_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_embedded_statement_in_else_statement7383( FOLLOW_embedded_statement_in_else_statement7383_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_181_in_switch_statement7391_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_181_in_switch_statement7391( FOLLOW_181_in_switch_statement7391_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_switch_statement7395_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_switch_statement7395( FOLLOW_71_in_switch_statement7395_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_switch_statement7399_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_switch_statement7399( FOLLOW_expression_in_switch_statement7399_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_switch_statement7403_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_switch_statement7403( FOLLOW_RPAREN_in_switch_statement7403_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_switch_block_in_switch_statement7407_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_switch_block_in_switch_statement7407( FOLLOW_switch_block_in_switch_statement7407_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_199_in_switch_block7415_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0020400000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_199_in_switch_block7415( FOLLOW_199_in_switch_block7415_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_switch_sections_in_switch_block7419_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_switch_sections_in_switch_block7419( FOLLOW_switch_sections_in_switch_block7419_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_203_in_switch_block7424_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_203_in_switch_block7424( FOLLOW_203_in_switch_block7424_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_switch_section_in_switch_sections7432_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0020400000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_switch_section_in_switch_sections7432( FOLLOW_switch_section_in_switch_sections7432_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_switch_labels_in_switch_section7441_bits[]	= { ANTLR_UINT64_LIT(0x28B4007070400080), ANTLR_UINT64_LIT(0x17FDBFB400004DA1), ANTLR_UINT64_LIT(0xFFE9EE14977E937D), ANTLR_UINT64_LIT(0x00000000000010F5) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_switch_labels_in_switch_section7441( FOLLOW_switch_labels_in_switch_section7441_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_statement_list_in_switch_section7445_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_statement_list_in_switch_section7445( FOLLOW_statement_list_in_switch_section7445_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_switch_label_in_switch_labels7453_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0020400000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_switch_label_in_switch_labels7453( FOLLOW_switch_label_in_switch_labels7453_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_110_in_switch_label7463_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_110_in_switch_label7463( FOLLOW_110_in_switch_label7463_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_constant_expression_in_switch_label7467_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_constant_expression_in_switch_label7467( FOLLOW_constant_expression_in_switch_label7467_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_82_in_switch_label7471_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_82_in_switch_label7471( FOLLOW_82_in_switch_label7471_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_117_in_switch_label7478_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_117_in_switch_label7478( FOLLOW_117_in_switch_label7478_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_82_in_switch_label7482_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_82_in_switch_label7482( FOLLOW_82_in_switch_label7482_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_while_statement_in_iteration_statement7491_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_while_statement_in_iteration_statement7491( FOLLOW_while_statement_in_iteration_statement7491_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_do_statement_in_iteration_statement7496_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_do_statement_in_iteration_statement7496( FOLLOW_do_statement_in_iteration_statement7496_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_for_statement_in_iteration_statement7501_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_for_statement_in_iteration_statement7501( FOLLOW_for_statement_in_iteration_statement7501_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_foreach_statement_in_iteration_statement7506_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_foreach_statement_in_iteration_statement7506( FOLLOW_foreach_statement_in_iteration_statement7506_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_197_in_while_statement7514_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_197_in_while_statement7514( FOLLOW_197_in_while_statement7514_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_while_statement7518_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_while_statement7518( FOLLOW_71_in_while_statement7518_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_boolean_expression_in_while_statement7522_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_boolean_expression_in_while_statement7522( FOLLOW_boolean_expression_in_while_statement7522_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_while_statement7526_bits[]	= { ANTLR_UINT64_LIT(0x28B4007070400080), ANTLR_UINT64_LIT(0x17F9BFB400004DA1), ANTLR_UINT64_LIT(0xFFE9EE14977E937D), ANTLR_UINT64_LIT(0x00000000000010F1) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_while_statement7526( FOLLOW_RPAREN_in_while_statement7526_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_embedded_statement_in_while_statement7530_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_embedded_statement_in_while_statement7530( FOLLOW_embedded_statement_in_while_statement7530_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_120_in_do_statement7538_bits[]	= { ANTLR_UINT64_LIT(0x28B4007070400080), ANTLR_UINT64_LIT(0x17F9BFB400004DA1), ANTLR_UINT64_LIT(0xFFE9EE14977E937D), ANTLR_UINT64_LIT(0x00000000000010F1) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_120_in_do_statement7538( FOLLOW_120_in_do_statement7538_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_embedded_statement_in_do_statement7542_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000020) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_embedded_statement_in_do_statement7542( FOLLOW_embedded_statement_in_do_statement7542_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_197_in_do_statement7546_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_197_in_do_statement7546( FOLLOW_197_in_do_statement7546_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_do_statement7550_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_do_statement7550( FOLLOW_71_in_do_statement7550_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_boolean_expression_in_do_statement7554_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_boolean_expression_in_do_statement7554( FOLLOW_boolean_expression_in_do_statement7554_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_do_statement7558_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_do_statement7558( FOLLOW_RPAREN_in_do_statement7558_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_do_statement7562_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_do_statement7562( FOLLOW_SEMI_in_do_statement7562_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_132_in_for_statement7570_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_132_in_for_statement7570( FOLLOW_132_in_for_statement7570_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_for_statement7574_bits[]	= { ANTLR_UINT64_LIT(0x20B4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_for_statement7574( FOLLOW_71_in_for_statement7574_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_for_initializer_in_for_statement7578_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_for_initializer_in_for_statement7578( FOLLOW_for_initializer_in_for_statement7578_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_for_statement7583_bits[]	= { ANTLR_UINT64_LIT(0x20B4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_for_statement7583( FOLLOW_SEMI_in_for_statement7583_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_for_condition_in_for_statement7587_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_for_condition_in_for_statement7587( FOLLOW_for_condition_in_for_statement7587_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_for_statement7592_bits[]	= { ANTLR_UINT64_LIT(0x20A6007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_for_statement7592( FOLLOW_SEMI_in_for_statement7592_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_for_iterator_in_for_statement7596_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_for_iterator_in_for_statement7596( FOLLOW_for_iterator_in_for_statement7596_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_for_statement7601_bits[]	= { ANTLR_UINT64_LIT(0x28B4007070400080), ANTLR_UINT64_LIT(0x17F9BFB400004DA1), ANTLR_UINT64_LIT(0xFFE9EE14977E937D), ANTLR_UINT64_LIT(0x00000000000010F1) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_for_statement7601( FOLLOW_RPAREN_in_for_statement7601_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_embedded_statement_in_for_statement7605_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_embedded_statement_in_for_statement7605( FOLLOW_embedded_statement_in_for_statement7605_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_local_variable_declaration_in_for_initializer7619_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_local_variable_declaration_in_for_initializer7619( FOLLOW_local_variable_declaration_in_for_initializer7619_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_statement_expression_list_in_for_initializer7624_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_statement_expression_list_in_for_initializer7624( FOLLOW_statement_expression_list_in_for_initializer7624_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_boolean_expression_in_for_condition7636_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_boolean_expression_in_for_condition7636( FOLLOW_boolean_expression_in_for_condition7636_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_statement_expression_list_in_for_iterator7648_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_statement_expression_list_in_for_iterator7648( FOLLOW_statement_expression_list_in_for_iterator7648_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_statement_expression_in_statement_expression_list7661_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_statement_expression_in_statement_expression_list7661( FOLLOW_statement_expression_in_statement_expression_list7661_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_statement_expression_list7664_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_statement_expression_list7664( FOLLOW_77_in_statement_expression_list7664_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_statement_expression_in_statement_expression_list7666_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_statement_expression_in_statement_expression_list7666( FOLLOW_statement_expression_in_statement_expression_list7666_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_133_in_foreach_statement7681_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_133_in_foreach_statement7681( FOLLOW_133_in_foreach_statement7681_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_foreach_statement7685_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_foreach_statement7685( FOLLOW_71_in_foreach_statement7685_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_local_variable_type_in_foreach_statement7689_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_local_variable_type_in_foreach_statement7689( FOLLOW_local_variable_type_in_foreach_statement7689_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_foreach_statement7693_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_foreach_statement7693( FOLLOW_identifier_in_foreach_statement7693_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_139_in_foreach_statement7697_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_139_in_foreach_statement7697( FOLLOW_139_in_foreach_statement7697_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_foreach_statement7701_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_foreach_statement7701( FOLLOW_expression_in_foreach_statement7701_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_foreach_statement7705_bits[]	= { ANTLR_UINT64_LIT(0x28B4007070400080), ANTLR_UINT64_LIT(0x17F9BFB400004DA1), ANTLR_UINT64_LIT(0xFFE9EE14977E937D), ANTLR_UINT64_LIT(0x00000000000010F1) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_foreach_statement7705( FOLLOW_RPAREN_in_foreach_statement7705_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_embedded_statement_in_foreach_statement7709_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_embedded_statement_in_foreach_statement7709( FOLLOW_embedded_statement_in_foreach_statement7709_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_break_statement_in_jump_statement7721_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_break_statement_in_jump_statement7721( FOLLOW_break_statement_in_jump_statement7721_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_continue_statement_in_jump_statement7726_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_continue_statement_in_jump_statement7726( FOLLOW_continue_statement_in_jump_statement7726_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_goto_statement_in_jump_statement7731_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_goto_statement_in_jump_statement7731( FOLLOW_goto_statement_in_jump_statement7731_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_return_statement_in_jump_statement7736_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_return_statement_in_jump_statement7736( FOLLOW_return_statement_in_jump_statement7736_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_throw_statement_in_jump_statement7741_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_throw_statement_in_jump_statement7741( FOLLOW_throw_statement_in_jump_statement7741_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_107_in_break_statement7753_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_107_in_break_statement7753( FOLLOW_107_in_break_statement7753_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_break_statement7757_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_break_statement7757( FOLLOW_SEMI_in_break_statement7757_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_115_in_continue_statement7769_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_115_in_continue_statement7769( FOLLOW_115_in_continue_statement7769_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_continue_statement7773_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_continue_statement7773( FOLLOW_SEMI_in_continue_statement7773_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_136_in_goto_statement7785_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x14A051B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_136_in_goto_statement7785( FOLLOW_136_in_goto_statement7785_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_goto_statement7794_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_goto_statement7794( FOLLOW_identifier_in_goto_statement7794_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_110_in_goto_statement7800_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_110_in_goto_statement7800( FOLLOW_110_in_goto_statement7800_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_constant_expression_in_goto_statement7804_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_constant_expression_in_goto_statement7804( FOLLOW_constant_expression_in_goto_statement7804_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_117_in_goto_statement7810_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_117_in_goto_statement7810( FOLLOW_117_in_goto_statement7810_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_goto_statement7819_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_goto_statement7819( FOLLOW_SEMI_in_goto_statement7819_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_170_in_return_statement7830_bits[]	= { ANTLR_UINT64_LIT(0x20B4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_170_in_return_statement7830( FOLLOW_170_in_return_statement7830_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_return_statement7834_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_return_statement7834( FOLLOW_expression_in_return_statement7834_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_return_statement7839_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_return_statement7839( FOLLOW_SEMI_in_return_statement7839_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_183_in_throw_statement7849_bits[]	= { ANTLR_UINT64_LIT(0x20B4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_183_in_throw_statement7849( FOLLOW_183_in_throw_statement7849_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_throw_statement7853_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_throw_statement7853( FOLLOW_expression_in_throw_statement7853_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_throw_statement7858_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_throw_statement7858( FOLLOW_SEMI_in_throw_statement7858_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_184_in_try_statement7869_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_184_in_try_statement7869( FOLLOW_184_in_try_statement7869_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_block_in_try_statement7873_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_block_in_try_statement7873( FOLLOW_block_in_try_statement7873_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_catch_clauses_in_try_statement7882_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_catch_clauses_in_try_statement7882( FOLLOW_catch_clauses_in_try_statement7882_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_finally_clause_in_try_statement7886_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_finally_clause_in_try_statement7886( FOLLOW_finally_clause_in_try_statement7886_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_finally_clause_in_try_statement7893_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_finally_clause_in_try_statement7893( FOLLOW_finally_clause_in_try_statement7893_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_CATCH_in_catch_clauses7909_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000080), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_CATCH_in_catch_clauses7909( FOLLOW_CATCH_in_catch_clauses7909_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_specific_catch_clauses_in_catch_clauses7914_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_specific_catch_clauses_in_catch_clauses7914( FOLLOW_specific_catch_clauses_in_catch_clauses7914_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_general_catch_clause_in_catch_clauses7918_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_general_catch_clause_in_catch_clauses7918( FOLLOW_general_catch_clause_in_catch_clauses7918_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_specific_catch_clause_in_specific_catch_clauses7931_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000012) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_specific_catch_clause_in_specific_catch_clauses7931( FOLLOW_specific_catch_clause_in_specific_catch_clauses7931_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_CATCH_in_specific_catch_clauses7936_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000080), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_CATCH_in_specific_catch_clauses7936( FOLLOW_CATCH_in_specific_catch_clauses7936_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_specific_catch_clause_in_specific_catch_clauses7941_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000012) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_specific_catch_clause_in_specific_catch_clauses7941( FOLLOW_specific_catch_clause_in_specific_catch_clauses7941_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_general_catch_clause_in_specific_catch_clauses7945_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000012) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_general_catch_clause_in_specific_catch_clauses7945( FOLLOW_general_catch_clause_in_specific_catch_clauses7945_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_specific_catch_clause7960_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_specific_catch_clause7960( FOLLOW_71_in_specific_catch_clause7960_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_class_type_in_specific_catch_clause7964_bits[]	= { ANTLR_UINT64_LIT(0x0002000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_class_type_in_specific_catch_clause7964( FOLLOW_class_type_in_specific_catch_clause7964_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_specific_catch_clause7968_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_specific_catch_clause7968( FOLLOW_identifier_in_specific_catch_clause7968_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_specific_catch_clause7973_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_specific_catch_clause7973( FOLLOW_RPAREN_in_specific_catch_clause7973_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_block_in_specific_catch_clause7977_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_block_in_specific_catch_clause7977( FOLLOW_block_in_specific_catch_clause7977_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_block_in_general_catch_clause7989_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_block_in_general_catch_clause7989( FOLLOW_block_in_general_catch_clause7989_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_129_in_finally_clause8001_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_129_in_finally_clause8001( FOLLOW_129_in_finally_clause8001_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_block_in_finally_clause8005_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_block_in_finally_clause8005( FOLLOW_block_in_finally_clause8005_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_112_in_checked_statement8015_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_112_in_checked_statement8015( FOLLOW_112_in_checked_statement8015_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_block_in_checked_statement8019_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_block_in_checked_statement8019( FOLLOW_block_in_checked_statement8019_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_189_in_unchecked_statement8031_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_189_in_unchecked_statement8031( FOLLOW_189_in_unchecked_statement8031_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_block_in_unchecked_statement8035_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_block_in_unchecked_statement8035( FOLLOW_block_in_unchecked_statement8035_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_147_in_lock_statement8047_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_147_in_lock_statement8047( FOLLOW_147_in_lock_statement8047_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_lock_statement8051_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_lock_statement8051( FOLLOW_71_in_lock_statement8051_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_lock_statement8054_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_lock_statement8054( FOLLOW_expression_in_lock_statement8054_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_lock_statement8058_bits[]	= { ANTLR_UINT64_LIT(0x28B4007070400080), ANTLR_UINT64_LIT(0x17F9BFB400004DA1), ANTLR_UINT64_LIT(0xFFE9EE14977E937D), ANTLR_UINT64_LIT(0x00000000000010F1) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_lock_statement8058( FOLLOW_RPAREN_in_lock_statement8058_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_embedded_statement_in_lock_statement8062_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_embedded_statement_in_lock_statement8062( FOLLOW_embedded_statement_in_lock_statement8062_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_USING_in_using_statement8074_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_USING_in_using_statement8074( FOLLOW_USING_in_using_statement8074_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_using_statement8078_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_using_statement8078( FOLLOW_71_in_using_statement8078_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_resource_acquisition_in_using_statement8083_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_resource_acquisition_in_using_statement8083( FOLLOW_resource_acquisition_in_using_statement8083_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_using_statement8087_bits[]	= { ANTLR_UINT64_LIT(0x28B4007070400080), ANTLR_UINT64_LIT(0x17F9BFB400004DA1), ANTLR_UINT64_LIT(0xFFE9EE14977E937D), ANTLR_UINT64_LIT(0x00000000000010F1) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_using_statement8087( FOLLOW_RPAREN_in_using_statement8087_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_embedded_statement_in_using_statement8092_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_embedded_statement_in_using_statement8092( FOLLOW_embedded_statement_in_using_statement8092_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_local_variable_declaration_in_resource_acquisition8110_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_local_variable_declaration_in_resource_acquisition8110( FOLLOW_local_variable_declaration_in_resource_acquisition8110_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_resource_acquisition8115_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_resource_acquisition8115( FOLLOW_expression_in_resource_acquisition8115_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_198_in_yield_statement8126_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000), ANTLR_UINT64_LIT(0x0000040000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_198_in_yield_statement8126( FOLLOW_198_in_yield_statement8126_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_170_in_yield_statement8135_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400080), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_170_in_yield_statement8135( FOLLOW_170_in_yield_statement8135_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_yield_statement8139_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_yield_statement8139( FOLLOW_expression_in_yield_statement8139_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_yield_statement8143_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_yield_statement8143( FOLLOW_SEMI_in_yield_statement8143_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_107_in_yield_statement8149_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_107_in_yield_statement8149( FOLLOW_107_in_yield_statement8149_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_yield_statement8153_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_yield_statement8153( FOLLOW_SEMI_in_yield_statement8153_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_assignment_in_assignment_list11080_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_assignment_in_assignment_list11080( FOLLOW_assignment_in_assignment_list11080_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_assignment_list11082_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400082), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_assignment_list11082( FOLLOW_SEMI_in_assignment_list11082_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attributes_in_field_declarations11096_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x9690B5BC00000000), ANTLR_UINT64_LIT(0xDA0CFAFCD776D249), ANTLR_UINT64_LIT(0x000000000000005F) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attributes_in_field_declarations11096( FOLLOW_attributes_in_field_declarations11096_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_modifiers_in_field_declarations11101_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_modifiers_in_field_declarations11101( FOLLOW_modifiers_in_field_declarations11101_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_field_declarations11106_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_field_declarations11106( FOLLOW_type_in_field_declarations11106_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_field_declaration_in_field_declarations11110_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000002), ANTLR_UINT64_LIT(0x9690B5BC40000000), ANTLR_UINT64_LIT(0xDA0CFAFCD776D249), ANTLR_UINT64_LIT(0x000000000000005F) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_field_declaration_in_field_declarations11110( FOLLOW_field_declaration_in_field_declarations11110_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attributes_in_property_declaration_list11124_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x9690B5BC00000000), ANTLR_UINT64_LIT(0xDA0CFAFCD776D249), ANTLR_UINT64_LIT(0x000000000000005F) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attributes_in_property_declaration_list11124( FOLLOW_attributes_in_property_declaration_list11124_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_modifiers_in_property_declaration_list11129_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_modifiers_in_property_declaration_list11129( FOLLOW_modifiers_in_property_declaration_list11129_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_property_declaration_list11134_bits[]	= { ANTLR_UINT64_LIT(0x20A4005030400080), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_property_declaration_list11134( FOLLOW_type_in_property_declaration_list11134_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_property_declaration_in_property_declaration_list11138_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000002), ANTLR_UINT64_LIT(0x9690B5BC40000000), ANTLR_UINT64_LIT(0xDA0CFAFCD776D249), ANTLR_UINT64_LIT(0x000000000000005F) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_property_declaration_in_property_declaration_list11138( FOLLOW_property_declaration_in_property_declaration_list11138_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_constant_declaration_in_constant_declarations11151_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0004000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_constant_declaration_in_constant_declarations11151( FOLLOW_constant_declaration_in_constant_declarations11151_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_literal_in_literals11163_bits[]	= { ANTLR_UINT64_LIT(0x20A4005010400082) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_literal_in_literals11163( FOLLOW_literal_in_literals11163_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_attributes_in_delegate_declaration_list11176_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8040000800000000), ANTLR_UINT64_LIT(0x400410E841004000), ANTLR_UINT64_LIT(0x000000000000000A) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_attributes_in_delegate_declaration_list11176( FOLLOW_attributes_in_delegate_declaration_list11176_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_modifiers_in_delegate_declaration_list11181_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0040000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_modifiers_in_delegate_declaration_list11181( FOLLOW_modifiers_in_delegate_declaration_list11181_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_delegate_declaration_in_delegate_declaration_list11186_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x8040000840000000), ANTLR_UINT64_LIT(0x400410E841004000), ANTLR_UINT64_LIT(0x000000000000000A) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_delegate_declaration_in_delegate_declaration_list11186( FOLLOW_delegate_declaration_in_delegate_declaration_list11186_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_local_variable_declaration_in_local_variable_declaration_list11200_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_local_variable_declaration_in_local_variable_declaration_list11200( FOLLOW_local_variable_declaration_in_local_variable_declaration_list11200_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_local_variable_declaration_list11202_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000002), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_local_variable_declaration_list11202( FOLLOW_SEMI_in_local_variable_declaration_list11202_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_local_variable_initializer_in_local_variable_initializer_list11216_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_local_variable_initializer_in_local_variable_initializer_list11216( FOLLOW_local_variable_initializer_in_local_variable_initializer_list11216_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_local_variable_initializer_list11218_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400082), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE4BEA1497769249), ANTLR_UINT64_LIT(0x00000000000010D1) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_local_variable_initializer_list11218( FOLLOW_SEMI_in_local_variable_initializer_list11218_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression_list_test11233_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_expression_in_expression_list_test11233( FOLLOW_expression_in_expression_list_test11233_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_expression_list_test11235_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400082), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_expression_list_test11235( FOLLOW_SEMI_in_expression_list_test11235_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression_list11249_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression_list11249( FOLLOW_unary_expression_in_unary_expression_list11249_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_unary_expression_list11251_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400082), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_unary_expression_list11251( FOLLOW_SEMI_in_unary_expression_list11251_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_invocation_expression_in_invocation_expression_list11265_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_invocation_expression_in_invocation_expression_list11265( FOLLOW_invocation_expression_in_invocation_expression_list11265_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_invocation_expression_list11267_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000002), ANTLR_UINT64_LIT(0x1690B7B400000000), ANTLR_UINT64_LIT(0x9E48EA1496769249), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_invocation_expression_list11267( FOLLOW_SEMI_in_invocation_expression_list11267_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_primary_expression_in_primary_expression_list11281_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_primary_expression_in_primary_expression_list11281( FOLLOW_primary_expression_in_primary_expression_list11281_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_primary_expression_list11283_bits[]	= { ANTLR_UINT64_LIT(0x20A4005030400082), ANTLR_UINT64_LIT(0x16F1B7B400000080), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_primary_expression_list11283( FOLLOW_SEMI_in_primary_expression_list11283_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_non_assignment_expression_in_non_assignment_expression_list11297_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_non_assignment_expression_in_non_assignment_expression_list11297( FOLLOW_non_assignment_expression_in_non_assignment_expression_list11297_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_non_assignment_expression_list11299_bits[]	= { ANTLR_UINT64_LIT(0x20A4007030400082), ANTLR_UINT64_LIT(0x16F1B7B400004DA1), ANTLR_UINT64_LIT(0xBE49EA1497769249), ANTLR_UINT64_LIT(0x0000000000001051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_SEMI_in_non_assignment_expression_list11299( FOLLOW_SEMI_in_non_assignment_expression_list11299_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_modifiers_in_method_declarations11313_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_modifiers_in_method_declarations11313( FOLLOW_modifiers_in_method_declarations11313_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_194_in_method_declarations11317_bits[]	= { ANTLR_UINT64_LIT(0x20A4005030400080), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_194_in_method_declarations11317( FOLLOW_194_in_method_declarations11317_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_method_declarations11321_bits[]	= { ANTLR_UINT64_LIT(0x20A4005030400080), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_method_declarations11321( FOLLOW_type_in_method_declarations11321_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_method_declaration_in_method_declarations11324_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000002), ANTLR_UINT64_LIT(0x9690B5BC00000000), ANTLR_UINT64_LIT(0xDA0CFAFCD776D249), ANTLR_UINT64_LIT(0x000000000000005F) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_method_declaration_in_method_declarations11324( FOLLOW_method_declaration_in_method_declarations11324_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_161_in_synpred1_CSharp373_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_161_in_synpred1_CSharp373( FOLLOW_161_in_synpred1_CSharp373_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_member_name_in_synpred2_CSharp687_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_member_name_in_synpred2_CSharp687( FOLLOW_member_name_in_synpred2_CSharp687_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_synpred2_CSharp691_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_synpred2_CSharp691( FOLLOW_71_in_synpred2_CSharp691_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_member_name_in_synpred3_CSharp709_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_member_name_in_synpred3_CSharp709( FOLLOW_member_name_in_synpred3_CSharp709_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_199_in_synpred3_CSharp713_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_199_in_synpred3_CSharp713( FOLLOW_199_in_synpred3_CSharp713_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_member_name_in_synpred4_CSharp727_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_member_name_in_synpred4_CSharp727( FOLLOW_member_name_in_synpred4_CSharp727_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_DOT_in_synpred4_CSharp731_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0040000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_DOT_in_synpred4_CSharp731( FOLLOW_DOT_in_synpred4_CSharp731_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_182_in_synpred4_CSharp735_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_182_in_synpred4_CSharp735( FOLLOW_182_in_synpred4_CSharp735_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_182_in_synpred5_CSharp853_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_182_in_synpred5_CSharp853( FOLLOW_182_in_synpred5_CSharp853_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_brackets_in_synpred5_CSharp855_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_brackets_in_synpred5_CSharp855( FOLLOW_brackets_in_synpred5_CSharp855_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_105_in_synpred6_CSharp875_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_105_in_synpred6_CSharp875( FOLLOW_105_in_synpred6_CSharp875_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_brackets_in_synpred6_CSharp877_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_brackets_in_synpred6_CSharp877( FOLLOW_brackets_in_synpred6_CSharp877_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_object_creation_expression_in_synpred7_CSharp916_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_object_creation_expression_in_synpred7_CSharp916( FOLLOW_object_creation_expression_in_synpred7_CSharp916_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_set_in_synpred7_CSharp920_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_set_in_synpred7_CSharp920( FOLLOW_set_in_synpred7_CSharp920_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_delegate_creation_expression_in_synpred8_CSharp955_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_delegate_creation_expression_in_synpred8_CSharp955( FOLLOW_delegate_creation_expression_in_synpred8_CSharp955_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_synpred9_CSharp1083_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000100000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_synpred9_CSharp1083( FOLLOW_identifier_in_synpred9_CSharp1083_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_84_in_synpred9_CSharp1088_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_84_in_synpred9_CSharp1088( FOLLOW_84_in_synpred9_CSharp1088_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_synpred10_CSharp1375_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x1690B5B400000000), ANTLR_UINT64_LIT(0x9A08EA1496769249), ANTLR_UINT64_LIT(0x0000000000000055) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_synpred10_CSharp1375( FOLLOW_71_in_synpred10_CSharp1375_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_in_synpred10_CSharp1379_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_in_synpred10_CSharp1379( FOLLOW_type_in_synpred10_CSharp1379_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_synpred10_CSharp1383_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_RPAREN_in_synpred10_CSharp1383( FOLLOW_RPAREN_in_synpred10_CSharp1383_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_array_creation_expression_in_synpred11_CSharp1644_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_array_creation_expression_in_synpred11_CSharp1644( FOLLOW_array_creation_expression_in_synpred11_CSharp1644_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_arguments_in_synpred12_CSharp1754_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_arguments_in_synpred12_CSharp1754( FOLLOW_arguments_in_synpred12_CSharp1754_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_set_in_synpred12_CSharp1758_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_set_in_synpred12_CSharp1758( FOLLOW_set_in_synpred12_CSharp1758_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unbound_type_name_in_synpred13_CSharp2364_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unbound_type_name_in_synpred13_CSharp2364( FOLLOW_unbound_type_name_in_synpred13_CSharp2364_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_generic_dimension_specifier_in_synpred14_CSharp2422_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_generic_dimension_specifier_in_synpred14_CSharp2422( FOLLOW_generic_dimension_specifier_in_synpred14_CSharp2422_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_DOT_in_synpred14_CSharp2426_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_DOT_in_synpred14_CSharp2426( FOLLOW_DOT_in_synpred14_CSharp2426_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_synpred15_CSharp2558_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000100000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_synpred15_CSharp2558( FOLLOW_identifier_in_synpred15_CSharp2558_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_84_in_synpred15_CSharp2562_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_84_in_synpred15_CSharp2562( FOLLOW_84_in_synpred15_CSharp2562_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_synpred16_CSharp2607_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000100000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_synpred16_CSharp2607( FOLLOW_identifier_in_synpred16_CSharp2607_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_84_in_synpred16_CSharp2612_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_84_in_synpred16_CSharp2612( FOLLOW_84_in_synpred16_CSharp2612_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_predefined_type_in_synpred17_CSharp2705_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_predefined_type_in_synpred17_CSharp2705( FOLLOW_predefined_type_in_synpred17_CSharp2705_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_name_in_synpred17_CSharp2709_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_name_in_synpred17_CSharp2709( FOLLOW_type_name_in_synpred17_CSharp2709_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_rank_specifiers_in_synpred17_CSharp2713_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_rank_specifiers_in_synpred17_CSharp2713( FOLLOW_rank_specifiers_in_synpred17_CSharp2713_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_predefined_type_in_synpred18_CSharp2740_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000100) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_predefined_type_in_synpred18_CSharp2740( FOLLOW_predefined_type_in_synpred18_CSharp2740_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_type_name_in_synpred18_CSharp2744_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000100) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_type_name_in_synpred18_CSharp2744( FOLLOW_type_name_in_synpred18_CSharp2744_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_72_in_synpred18_CSharp2749_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000100) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_72_in_synpred18_CSharp2749( FOLLOW_72_in_synpred18_CSharp2749_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_92_in_synpred18_CSharp2754_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_92_in_synpred18_CSharp2754( FOLLOW_92_in_synpred18_CSharp2754_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_synpred19_CSharp2936_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000), ANTLR_UINT64_LIT(0x0000000201429248), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_unary_expression_in_synpred19_CSharp2936( FOLLOW_unary_expression_in_synpred19_CSharp2936_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_assignment_operator_in_synpred19_CSharp2940_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_assignment_operator_in_synpred19_CSharp2940( FOLLOW_assignment_operator_in_synpred19_CSharp2940_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_cast_expression_in_synpred20_CSharp3005_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_cast_expression_in_synpred20_CSharp3005( FOLLOW_cast_expression_in_synpred20_CSharp3005_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_anonymous_function_signature_in_synpred21_CSharp3221_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000004000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_anonymous_function_signature_in_synpred21_CSharp3221( FOLLOW_anonymous_function_signature_in_synpred21_CSharp3221_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_90_in_synpred21_CSharp3225_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_90_in_synpred21_CSharp3225( FOLLOW_90_in_synpred21_CSharp3225_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_query_expression_in_synpred22_CSharp3236_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_query_expression_in_synpred22_CSharp3236( FOLLOW_query_expression_in_synpred22_CSharp3236_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_143_in_synpred23_CSharp3659_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_143_in_synpred23_CSharp3659( FOLLOW_143_in_synpred23_CSharp3659_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_77_in_synpred24_CSharp4161_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000), ANTLR_UINT64_LIT(0x148011B400000000), ANTLR_UINT64_LIT(0x0200621494668241), ANTLR_UINT64_LIT(0x0000000000000051) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_77_in_synpred24_CSharp4161( FOLLOW_77_in_synpred24_CSharp4161_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_synpred24_CSharp4165_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_synpred24_CSharp4165( FOLLOW_identifier_in_synpred24_CSharp4165_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_88_in_synpred24_CSharp4169_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_88_in_synpred24_CSharp4169( FOLLOW_88_in_synpred24_CSharp4169_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_member_name_in_synpred25_CSharp4716_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_member_name_in_synpred25_CSharp4716( FOLLOW_member_name_in_synpred25_CSharp4716_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_199_in_synpred25_CSharp4720_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_199_in_synpred25_CSharp4720( FOLLOW_199_in_synpred25_CSharp4720_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_member_name_in_synpred26_CSharp5581_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_member_name_in_synpred26_CSharp5581( FOLLOW_member_name_in_synpred26_CSharp5581_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_synpred26_CSharp5585_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_synpred26_CSharp5585( FOLLOW_71_in_synpred26_CSharp5585_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_member_name_in_synpred27_CSharp5606_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_member_name_in_synpred27_CSharp5606( FOLLOW_member_name_in_synpred27_CSharp5606_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_199_in_synpred27_CSharp5610_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_199_in_synpred27_CSharp5610( FOLLOW_199_in_synpred27_CSharp5610_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_member_name_in_synpred28_CSharp6078_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_member_name_in_synpred28_CSharp6078( FOLLOW_member_name_in_synpred28_CSharp6078_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_71_in_synpred28_CSharp6082_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_71_in_synpred28_CSharp6082( FOLLOW_71_in_synpred28_CSharp6082_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_member_name_in_synpred29_CSharp6096_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_member_name_in_synpred29_CSharp6096( FOLLOW_member_name_in_synpred29_CSharp6096_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_199_in_synpred29_CSharp6100_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_199_in_synpred29_CSharp6100( FOLLOW_199_in_synpred29_CSharp6100_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_member_name_in_synpred30_CSharp6117_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_member_name_in_synpred30_CSharp6117( FOLLOW_member_name_in_synpred30_CSharp6117_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_DOT_in_synpred30_CSharp6121_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0040000000000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_DOT_in_synpred30_CSharp6121( FOLLOW_DOT_in_synpred30_CSharp6121_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_182_in_synpred30_CSharp6125_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_182_in_synpred30_CSharp6125( FOLLOW_182_in_synpred30_CSharp6125_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_arguments_in_synpred31_CSharp6763_bits[]	= { ANTLR_UINT64_LIT(0x0000800000001000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_arguments_in_synpred31_CSharp6763( FOLLOW_arguments_in_synpred31_CSharp6763_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_set_in_synpred31_CSharp6767_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_set_in_synpred31_CSharp6767( FOLLOW_set_in_synpred31_CSharp6767_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_synpred32_CSharp6815_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000100000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_synpred32_CSharp6815( FOLLOW_identifier_in_synpred32_CSharp6815_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_84_in_synpred32_CSharp6820_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_84_in_synpred32_CSharp6820( FOLLOW_84_in_synpred32_CSharp6820_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_declaration_statement_in_synpred33_CSharp6902_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_declaration_statement_in_synpred33_CSharp6902( FOLLOW_declaration_statement_in_synpred33_CSharp6902_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_identifier_in_synpred34_CSharp6913_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_identifier_in_synpred34_CSharp6913( FOLLOW_identifier_in_synpred34_CSharp6913_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_82_in_synpred34_CSharp6917_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_82_in_synpred34_CSharp6917( FOLLOW_82_in_synpred34_CSharp6917_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_192_in_synpred35_CSharp7169_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_192_in_synpred35_CSharp7169( FOLLOW_192_in_synpred35_CSharp7169_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_122_in_synpred36_CSharp7180_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_122_in_synpred36_CSharp7180( FOLLOW_122_in_synpred36_CSharp7180_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_123_in_synpred37_CSharp7363_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_123_in_synpred37_CSharp7363( FOLLOW_123_in_synpred37_CSharp7363_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_local_variable_declaration_in_synpred38_CSharp7614_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_local_variable_declaration_in_synpred38_CSharp7614( FOLLOW_local_variable_declaration_in_synpred38_CSharp7614_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: CSharpParser  */
static	ANTLR_BITWORD FOLLOW_local_variable_declaration_in_synpred39_CSharp8105_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  CSharpParserImplTraits::BitsetListType FOLLOW_local_variable_declaration_in_synpred39_CSharp8105( FOLLOW_local_variable_declaration_in_synpred39_CSharp8105_bits, 1 );



/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    346:7: ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
 */
static const ANTLR_INT32 dfa50_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa50_eof[5] =
    {
	2, -1, -1, -1, 2
    };
static const ANTLR_INT32 dfa50_min[5] =
    {
	12, 7, -1, -1, 12
    };
static const ANTLR_INT32 dfa50_max[5] =
    {
	203, 204, -1, -1, 203
    };
static const ANTLR_INT32 dfa50_accept[5] =
    {
	-1, -1, 1, 2, -1
    };
static const ANTLR_INT32 dfa50_special[5] =
    {
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa50_T_empty	 =   NULL;

static const ANTLR_INT32 dfa50_T0[] =
    {
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, -1, 
	-1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 2, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, -1, 2, 
	2, 2, 1, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, -1, -1, -1, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, -1, 2, -1, -1, -1, 
	-1, -1, 2, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 2, 2, -1, -1, 2, 2, -1, 
	-1, -1, 2, -1, 2, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, 2, -1, -1, -1, 2, -1, 2, 2, 2, 2, 2, 2
    };

static const ANTLR_INT32 dfa50_T1[] =
    {
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 
	-1, -1, 3, 3, -1, -1, -1, -1, -1, -1, 3, 3, 3, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 3, -1, -1, 3, -1, 3, -1, -1, -1, -1, -1, 3, -1, -1, 
	3, -1, -1, -1, -1, 3, -1, 3, 3, -1, 3, 3, -1, 2, 3, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, 3, -1, 3, 3, -1, 
	3, 3, 3, 3, -1, 3, 3, -1, 3, 3, -1, -1, -1, 3, 3, 3, 3, -1, 3, 3, -1, 3, 
	-1, -1, -1, 3, -1, -1, 3, -1, -1, 3, -1, -1, 3, -1, -1, 3, -1, -1, 3, -1, 
	3, 3, -1, 3, 3, 3, -1, 3, 3, 3, -1, 3, -1, -1, 3, -1, -1, 3, -1, 3, -1, 
	-1, -1, -1, 3, -1, 3, -1, 3, 3, 3, 3, -1, -1, 3, -1, -1, 3, -1, -1, 3, 
	3, 3, 3, 3, -1, 3, 3, -1, -1, -1, 3, -1, 3, -1, -1, -1, -1, -1, 3
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa50_transitions[] =
{
    dfa50_T0, dfa50_T1, NULL, NULL, dfa50_T0
};


/* Declare tracking structure for Cyclic DFA 50
 */
class CSharpParserCyclicDFA50 : public CyclicDFA< CSharpParserImplTraits, CSharpParser >, public CSharpParserTokens
{
public:
	typedef CyclicDFA< CSharpParserImplTraits, CSharpParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	CSharpParserCyclicDFA50( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static CSharpParserCyclicDFA50  cdfa50(
	    50,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"346:7: ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )",
	    dfa50_eot,	    /* EOT table			    */
	    dfa50_eof,	    /* EOF table			    */
	    dfa50_min,	    /* Minimum tokens for each state    */
	    dfa50_max,	    /* Maximum tokens for each state    */
	    dfa50_accept,	/* Accept table			    */
	    dfa50_special,	/* Special transition states	    */
	    dfa50_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 50
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    467:19: ( ( unbound_type_name )=> unbound_type_name | type | 'void' )
 */
static const ANTLR_INT32 dfa71_eot[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa71_eof[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa71_min[14] =
    {
	29, 12, -1, 49, 29, 23, 29, -1, 12, -1, -1, 12, 23, 23
    };
static const ANTLR_INT32 dfa71_max[14] =
    {
	198, 94, -1, 72, 198, 198, 198, -1, 94, -1, -1, 94, 198, 198
    };
static const ANTLR_INT32 dfa71_accept[14] =
    {
	-1, -1, 2, -1, -1, -1, -1, 3, -1, 1, 1, -1, -1, -1
    };
static const ANTLR_INT32 dfa71_special[14] =
    {
	-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 2, 0
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa71_T_empty	 =   NULL;

static const ANTLR_INT32 dfa71_T0[] =
    {
	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2
    };

static const ANTLR_INT32 dfa71_T1[] =
    {
	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 5, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, 2
    };

static const ANTLR_INT32 dfa71_T2[] =
    {
	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	13, -1, -1, -1, -1, -1, -1, -1, 2, -1, 2
    };

static const ANTLR_INT32 dfa71_T3[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 
	-1, 1, 1, -1, 2, -1, 1, 2, -1, 2, -1, -1, -1, -1, 2, -1, -1, 1, -1, 2, 
	1, -1, 1, -1, -1, -1, 1, -1, -1, 2, -1, -1, 1, -1, -1, 1, -1, -1, 2, -1, 
	-1, 1, -1, 1, 1, -1, 2, 1, 1, -1, -1, 2, 1, -1, 1, -1, -1, 1, -1, -1, 1, 
	-1, 1, -1, -1, -1, -1, 1, -1, 2, -1, 1, 1, 2, -1, -1, -1, 2, -1, -1, -1, 
	-1, -1, 1, -1, 2, 2, -1, -1, 2, 1, -1, 3, -1, 1, -1, 1
    };

static const ANTLR_INT32 dfa71_T4[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, 11, 
	11, -1, 11, 11, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	11, -1, -1, 11, -1, 11, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, -1, -1, 
	11, -1, -1, -1, -1, -1, 11, -1, 11, 11, -1, -1, 11, 11, -1, -1, -1, 11, 
	-1, 11, -1, -1, 11, -1, -1, 11, -1, 11, -1, -1, -1, -1, 11, -1, -1, -1, 
	11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 
	-1, 11, -1, -1, -1, 11, -1, 11
    };

static const ANTLR_INT32 dfa71_T5[] =
    {
	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	12, -1, -1, -1, -1, -1, -1, -1, 2, -1, 2
    };

static const ANTLR_INT32 dfa71_T6[] =
    {
	10, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, 2, 2, -1, 2, 2, -1, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, 2, -1, -1, 2, -1, 2, 2, -1, 2, -1, -1, -1, 2, -1, -1, 2, -1, -1, 2, 
	-1, -1, 2, -1, -1, 2, -1, -1, 2, -1, 2, 2, -1, 2, 2, 2, -1, -1, 2, 2, -1, 
	2, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, -1, -1, 2, -1, 2, -1, 2, 2, 2, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, 2, -1, 2, 2, -1, -1, 2, 2, -1, 2, -1, 
	2, -1, 2
    };

static const ANTLR_INT32 dfa71_T7[] =
    {
	8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 8, 8, 
	-1, 8, 8, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 
	-1, 8, -1, 8, -1, -1, -1, 8, -1, -1, -1, -1, -1, 8, -1, -1, 8, -1, -1, 
	-1, -1, -1, 8, -1, 8, 8, -1, -1, 8, 8, -1, -1, -1, 8, -1, 8, -1, -1, 8, 
	-1, -1, 8, -1, 8, -1, -1, -1, -1, 8, -1, -1, -1, 8, 8, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, 8, -1, 
	8
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa71_transitions[] =
{
    dfa71_T3, dfa71_T1, NULL, dfa71_T0, dfa71_T7, dfa71_T6, dfa71_T4, NULL, 
    dfa71_T5, NULL, NULL, dfa71_T2, dfa71_T6, dfa71_T6
};


/* Declare tracking structure for Cyclic DFA 71
 */
class CSharpParserCyclicDFA71 : public CyclicDFA< CSharpParserImplTraits, CSharpParser >, public CSharpParserTokens
{
public:
	typedef CyclicDFA< CSharpParserImplTraits, CSharpParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	//to maintain C-Target compatibility, we need to make some of ctx functions look like member funcs
	CtxType*	m_ctx; 
	

public:
	CSharpParserCyclicDFA71( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		m_ctx = NULL;
		
	}

        ANTLR_UINT32 LA(ANTLR_INT32 i)
        {
        	return m_ctx->LA(i);
        }

        template<typename PredType>
        bool msynpred( PredType pred )
        {
        	return m_ctx->msynpred(pred);
        }

	const CtxType::CommonTokenType*  LT(ANTLR_INT32 k)
	{
		return m_ctx->LT(k);
	}

	ANTLR_INT32  specialStateTransition(CtxType * ctx, RecognizerType* recognizer, IntStreamType* is, ANTLR_INT32 s)
	{
	    ANTLR_INT32    _s;

	    m_ctx = ctx;
	    _s	    = s;
	    switch  (s)
	    {
	    	    case 0:

	    		{
	    		    ANTLR_UINT32 LA71_13;

	    		    ANTLR_MARKER index71_13;


	    		    LA71_13 = ctx->LA(1);

	    		     
	    		        index71_13 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (this->msynpred( antlr3::ClassForwarder<synpred13_CSharp>() )) && (LA71_13 == 77) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred13_CSharp>() )) && (LA71_13 == GT) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA71_13 == IDENTIFIER || LA71_13 == 98 || ((LA71_13 >= 100) && (LA71_13 <= 101)) || ((LA71_13 >= 103) && (LA71_13 <= 104)) || LA71_13 == 106 || ((LA71_13 >= 108) && (LA71_13 <= 109)) || LA71_13 == 111 || LA71_13 == 116 || LA71_13 == 119 || ((LA71_13 >= 121) && (LA71_13 <= 122)) || LA71_13 == 124 || LA71_13 == 128 || LA71_13 == 131 || LA71_13 == 134 || LA71_13 == 137 || LA71_13 == 140 || LA71_13 == 143 || ((LA71_13 >= 145) && (LA71_13 <= 146)) || ((LA71_13 >= 148) && (LA71_13 <= 150)) || ((LA71_13 >= 153) && (LA71_13 <= 154)) || LA71_13 == 156 || LA71_13 == 159 || LA71_13 == 162 || LA71_13 == 164 || LA71_13 == 169 || LA71_13 == 171 || ((LA71_13 >= 173) && (LA71_13 <= 175)) || LA71_13 == 179 || LA71_13 == 185 || ((LA71_13 >= 187) && (LA71_13 <= 188)) || ((LA71_13 >= 191) && (LA71_13 <= 192)) || LA71_13 == 194 || LA71_13 == 196 || LA71_13 == 198) )
	    		    {
	    		        s = 2;
	    		    }

	    			 
	    				ctx->seek(index71_13);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 1:

	    		{
	    		    ANTLR_UINT32 LA71_5;

	    		    ANTLR_MARKER index71_5;


	    		    LA71_5 = ctx->LA(1);

	    		     
	    		        index71_5 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (this->msynpred( antlr3::ClassForwarder<synpred13_CSharp>() )) && (LA71_5 == 77) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred13_CSharp>() )) && (LA71_5 == GT) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA71_5 == IDENTIFIER || LA71_5 == 98 || ((LA71_5 >= 100) && (LA71_5 <= 101)) || ((LA71_5 >= 103) && (LA71_5 <= 104)) || LA71_5 == 106 || ((LA71_5 >= 108) && (LA71_5 <= 109)) || LA71_5 == 111 || LA71_5 == 116 || LA71_5 == 119 || ((LA71_5 >= 121) && (LA71_5 <= 122)) || LA71_5 == 124 || LA71_5 == 128 || LA71_5 == 131 || LA71_5 == 134 || LA71_5 == 137 || LA71_5 == 140 || LA71_5 == 143 || ((LA71_5 >= 145) && (LA71_5 <= 146)) || ((LA71_5 >= 148) && (LA71_5 <= 150)) || ((LA71_5 >= 153) && (LA71_5 <= 154)) || LA71_5 == 156 || LA71_5 == 159 || LA71_5 == 162 || LA71_5 == 164 || LA71_5 == 169 || LA71_5 == 171 || ((LA71_5 >= 173) && (LA71_5 <= 175)) || LA71_5 == 179 || LA71_5 == 185 || ((LA71_5 >= 187) && (LA71_5 <= 188)) || ((LA71_5 >= 191) && (LA71_5 <= 192)) || LA71_5 == 194 || LA71_5 == 196 || LA71_5 == 198) )
	    		    {
	    		        s = 2;
	    		    }

	    			 
	    				ctx->seek(index71_5);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 2:

	    		{
	    		    ANTLR_UINT32 LA71_12;

	    		    ANTLR_MARKER index71_12;


	    		    LA71_12 = ctx->LA(1);

	    		     
	    		        index71_12 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (this->msynpred( antlr3::ClassForwarder<synpred13_CSharp>() )) && (LA71_12 == 77) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred13_CSharp>() )) && (LA71_12 == GT) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA71_12 == IDENTIFIER || LA71_12 == 98 || ((LA71_12 >= 100) && (LA71_12 <= 101)) || ((LA71_12 >= 103) && (LA71_12 <= 104)) || LA71_12 == 106 || ((LA71_12 >= 108) && (LA71_12 <= 109)) || LA71_12 == 111 || LA71_12 == 116 || LA71_12 == 119 || ((LA71_12 >= 121) && (LA71_12 <= 122)) || LA71_12 == 124 || LA71_12 == 128 || LA71_12 == 131 || LA71_12 == 134 || LA71_12 == 137 || LA71_12 == 140 || LA71_12 == 143 || ((LA71_12 >= 145) && (LA71_12 <= 146)) || ((LA71_12 >= 148) && (LA71_12 <= 150)) || ((LA71_12 >= 153) && (LA71_12 <= 154)) || LA71_12 == 156 || LA71_12 == 159 || LA71_12 == 162 || LA71_12 == 164 || LA71_12 == 169 || LA71_12 == 171 || ((LA71_12 >= 173) && (LA71_12 <= 175)) || LA71_12 == 179 || LA71_12 == 185 || ((LA71_12 >= 187) && (LA71_12 <= 188)) || ((LA71_12 >= 191) && (LA71_12 <= 192)) || LA71_12 == 194 || LA71_12 == 196 || LA71_12 == 198) )
	    		    {
	    		        s = 2;
	    		    }

	    			 
	    				ctx->seek(index71_12);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;
	    }
	    if ( ctx->get_backtracking() > 0)
	    {
		 ctx->set_failedflag( true );
		return	-1;
	    }
	    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( recognizer, "467:19: ( ( unbound_type_name )=> unbound_type_name | type | 'void' )" );
	    ex->set_decisionNum( 71 );
	    ex->set_state(_s);
	    return -1;
	}
};

static CSharpParserCyclicDFA71  cdfa71(
	    71,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"467:19: ( ( unbound_type_name )=> unbound_type_name | type | 'void' )",
	    dfa71_eot,	    /* EOT table			    */
	    dfa71_eof,	    /* EOF table			    */
	    dfa71_min,	    /* Minimum tokens for each state    */
	    dfa71_max,	    /* Maximum tokens for each state    */
	    dfa71_accept,	/* Accept table			    */
	    dfa71_special,	/* Special transition states	    */
	    dfa71_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 71
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 477:3: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*
 */
static const ANTLR_INT32 dfa72_eot[7] =
    {
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa72_eof[7] =
    {
	-1, -1, -1, -1, 5, -1, -1
    };
static const ANTLR_INT32 dfa72_min[7] =
    {
	12, 23, -1, 23, 12, -1, -1
    };
static const ANTLR_INT32 dfa72_max[7] =
    {
	84, 77, -1, 77, 49, -1, -1
    };
static const ANTLR_INT32 dfa72_accept[7] =
    {
	-1, -1, 2, -1, -1, 3, 1
    };
static const ANTLR_INT32 dfa72_special[7] =
    {
	-1, -1, -1, -1, 0, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa72_T_empty	 =   NULL;

static const ANTLR_INT32 dfa72_T0[] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	3
    };

static const ANTLR_INT32 dfa72_T1[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	1
    };

static const ANTLR_INT32 dfa72_T2[] =
    {
	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 5
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa72_transitions[] =
{
    dfa72_T1, dfa72_T0, NULL, dfa72_T0, dfa72_T2, NULL, NULL
};


/* Declare tracking structure for Cyclic DFA 72
 */
class CSharpParserCyclicDFA72 : public CyclicDFA< CSharpParserImplTraits, CSharpParser >, public CSharpParserTokens
{
public:
	typedef CyclicDFA< CSharpParserImplTraits, CSharpParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	//to maintain C-Target compatibility, we need to make some of ctx functions look like member funcs
	CtxType*	m_ctx; 
	

public:
	CSharpParserCyclicDFA72( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		m_ctx = NULL;
		
	}

        ANTLR_UINT32 LA(ANTLR_INT32 i)
        {
        	return m_ctx->LA(i);
        }

        template<typename PredType>
        bool msynpred( PredType pred )
        {
        	return m_ctx->msynpred(pred);
        }

	const CtxType::CommonTokenType*  LT(ANTLR_INT32 k)
	{
		return m_ctx->LT(k);
	}

	ANTLR_INT32  specialStateTransition(CtxType * ctx, RecognizerType* recognizer, IntStreamType* is, ANTLR_INT32 s)
	{
	    ANTLR_INT32    _s;

	    m_ctx = ctx;
	    _s	    = s;
	    switch  (s)
	    {
	    	    case 0:

	    		{
	    		    ANTLR_UINT32 LA72_4;

	    		    ANTLR_MARKER index72_4;


	    		    LA72_4 = ctx->LA(1);

	    		     
	    		        index72_4 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA72_4 == EOF || LA72_4 == RPAREN) )
	    		    {
	    		        s = 5;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred14_CSharp>() )) && (LA72_4 == DOT) )
	    		    {
	    		        s = 6;
	    		    }

	    			 
	    				ctx->seek(index72_4);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;
	    }
	    if ( ctx->get_backtracking() > 0)
	    {
		 ctx->set_failedflag( true );
		return	-1;
	    }
	    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( recognizer, "()* loopback of 477:3: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*" );
	    ex->set_decisionNum( 72 );
	    ex->set_state(_s);
	    return -1;
	}
};

static CSharpParserCyclicDFA72  cdfa72(
	    72,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"()* loopback of 477:3: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*",
	    dfa72_eot,	    /* EOT table			    */
	    dfa72_eof,	    /* EOF table			    */
	    dfa72_min,	    /* Minimum tokens for each state    */
	    dfa72_max,	    /* Maximum tokens for each state    */
	    dfa72_accept,	/* Accept table			    */
	    dfa72_special,	/* Special transition states	    */
	    dfa72_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 72
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */

/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start compilation_unit
 * CSharp.g:73:1: compilation_unit : namespace_body[true] ;
 */
CSharpParser_compilation_unit_return
CSharpParser::compilation_unit()
{
    CSharpParser_compilation_unit_return retval(this);

    ANTLR_MARKER compilation_unit_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_namespace_body_return namespace_body1;
    typedef	CSharpParser_namespace_body_return RETURN_TYPE_namespace_body1;


    /* Initialize rule variables
     */
    compilation_unit_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(1)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    namespace_body1.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:74:2: ( namespace_body[true] )
        // CSharp.g:74:4: namespace_body[true]
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_namespace_body_in_compilation_unit132);
            namespace_body1=namespace_body(true);

            this->followPop();
            if  (this->hasException())
            {
                goto rulecompilation_unitEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, namespace_body1.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulecompilation_unitEx; /* Prevent compiler warnings */
    rulecompilation_unitEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(1, compilation_unit_StartIndex); }

    return retval;
}
/* $ANTLR end compilation_unit */

/**
 * $ANTLR start namespace_declaration
 * CSharp.g:77:1: namespace_declaration : 'namespace' qualified_identifier namespace_block ( ';' )? ;
 */
CSharpParser_namespace_declaration_return
CSharpParser::namespace_declaration()
{
    CSharpParser_namespace_declaration_return retval(this);

    ANTLR_MARKER namespace_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal2;
    const CommonTokenType*    char_literal5;
    CSharpParser_qualified_identifier_return qualified_identifier3;
    typedef	CSharpParser_qualified_identifier_return RETURN_TYPE_qualified_identifier3;

    CSharpParser_namespace_block_return namespace_block4;
    typedef	CSharpParser_namespace_block_return RETURN_TYPE_namespace_block4;

    ImplTraits::TreeType* string_literal2_tree;
    ImplTraits::TreeType* char_literal5_tree;

    /* Initialize rule variables
     */
    namespace_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(2)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal2       = NULL;
    char_literal5       = NULL;
    qualified_identifier3.tree = NULL;

    namespace_block4.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal2_tree   = NULL;
    char_literal5_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:78:2: ( 'namespace' qualified_identifier namespace_block ( ';' )? )
        // CSharp.g:78:4: 'namespace' qualified_identifier namespace_block ( ';' )?
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal2 =  this->matchToken(151, &FOLLOW_151_in_namespace_declaration144);
            if  (this->hasException())
            {
                goto rulenamespace_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal2_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal2));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal2_tree);
            }

            this->followPush(FOLLOW_qualified_identifier_in_namespace_declaration148);
            qualified_identifier3=qualified_identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto rulenamespace_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, qualified_identifier3.tree);

            this->followPush(FOLLOW_namespace_block_in_namespace_declaration152);
            namespace_block4=namespace_block();

            this->followPop();
            if  (this->hasException())
            {
                goto rulenamespace_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, namespace_block4.tree);

            // CSharp.g:78:59: ( ';' )?
            {
                int alt1=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt1=1;
                    	}
                        break;
                }

                switch (alt1)
                {
            	case 1:
            	    // CSharp.g:78:59: ';'
            	    {
            	        char_literal5 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_namespace_declaration156);
            	        if  (this->hasException())
            	        {
            	            goto rulenamespace_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal5_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal5));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal5_tree);
            	        }

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulenamespace_declarationEx; /* Prevent compiler warnings */
    rulenamespace_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(2, namespace_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end namespace_declaration */

/**
 * $ANTLR start namespace_block
 * CSharp.g:81:1: namespace_block : '{' namespace_body[false] '}' ;
 */
CSharpParser_namespace_block_return
CSharpParser::namespace_block()
{
    CSharpParser_namespace_block_return retval(this);

    ANTLR_MARKER namespace_block_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal6;
    const CommonTokenType*    char_literal8;
    CSharpParser_namespace_body_return namespace_body7;
    typedef	CSharpParser_namespace_body_return RETURN_TYPE_namespace_body7;

    ImplTraits::TreeType* char_literal6_tree;
    ImplTraits::TreeType* char_literal8_tree;

    /* Initialize rule variables
     */
    namespace_block_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(3)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal6       = NULL;
    char_literal8       = NULL;
    namespace_body7.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal6_tree   = NULL;
    char_literal8_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:82:2: ( '{' namespace_body[false] '}' )
        // CSharp.g:82:4: '{' namespace_body[false] '}'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal6 =  this->matchToken(199, &FOLLOW_199_in_namespace_block168);
            if  (this->hasException())
            {
                goto rulenamespace_blockEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal6_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal6));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal6_tree);
            }

            this->followPush(FOLLOW_namespace_body_in_namespace_block172);
            namespace_body7=namespace_body(false);

            this->followPop();
            if  (this->hasException())
            {
                goto rulenamespace_blockEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, namespace_body7.tree);

            char_literal8 =  this->matchToken(203, &FOLLOW_203_in_namespace_block177);
            if  (this->hasException())
            {
                goto rulenamespace_blockEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal8_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal8));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal8_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulenamespace_blockEx; /* Prevent compiler warnings */
    rulenamespace_blockEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(3, namespace_block_StartIndex); }

    return retval;
}
/* $ANTLR end namespace_block */

/**
 * $ANTLR start namespace_body
 * CSharp.g:85:1: namespace_body[bool bGlobal] : ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )? ;
 */
CSharpParser_namespace_body_return
CSharpParser::namespace_body(bool bGlobal)
{
    CSharpParser_namespace_body_return retval(this);

    ANTLR_MARKER namespace_body_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_extern_alias_directives_return extern_alias_directives9;
    typedef	CSharpParser_extern_alias_directives_return RETURN_TYPE_extern_alias_directives9;

    CSharpParser_using_directives_return using_directives10;
    typedef	CSharpParser_using_directives_return RETURN_TYPE_using_directives10;

    CSharpParser_global_attributes_return global_attributes11;
    typedef	CSharpParser_global_attributes_return RETURN_TYPE_global_attributes11;

    CSharpParser_namespace_member_declarations_return namespace_member_declarations12;
    typedef	CSharpParser_namespace_member_declarations_return RETURN_TYPE_namespace_member_declarations12;


    /* Initialize rule variables
     */
    namespace_body_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(4)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    extern_alias_directives9.tree = NULL;

    using_directives10.tree = NULL;

    global_attributes11.tree = NULL;

    namespace_member_declarations12.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:86:2: ( ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )? )
        // CSharp.g:86:4: ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )?
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:86:4: ( extern_alias_directives )?
            {
                int alt2=2;
                switch ( this->LA(1) )
                {
                    case 127:
                    	{
                    		switch ( this->LA(2) )
                    		{
                    		    case 101:
                    		    	{
                    		    		alt2=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt2)
                {
            	case 1:
            	    // CSharp.g:86:4: extern_alias_directives
            	    {
            	        this->followPush(FOLLOW_extern_alias_directives_in_namespace_body189);
            	        extern_alias_directives9=extern_alias_directives();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulenamespace_bodyEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, extern_alias_directives9.tree);

            	    }
            	    break;

                }
            }

            // CSharp.g:86:31: ( using_directives )?
            {
                int alt3=2;
                switch ( this->LA(1) )
                {
                    case USING:
                    	{
                    		alt3=1;
                    	}
                        break;
                }

                switch (alt3)
                {
            	case 1:
            	    // CSharp.g:86:31: using_directives
            	    {
            	        this->followPush(FOLLOW_using_directives_in_namespace_body194);
            	        using_directives10=using_directives();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulenamespace_bodyEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, using_directives10.tree);

            	    }
            	    break;

                }
            }

            // CSharp.g:86:51: ( global_attributes )?
            {
                int alt4=2;
                switch ( this->LA(1) )
                {
                    case 94:
                    	{
                    		switch ( this->LA(2) )
                    		{
                    		    case 104:
                    		    case 150:
                    		    	{
                    		    		switch ( this->LA(3) )
                    		    		{
                    		    		    case 82:
                    		    		    	{
                    		    		    		alt4=1;
                    		    		    	}
                    		    		        break;
                    		    		}

                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt4)
                {
            	case 1:
            	    // CSharp.g:86:51: global_attributes
            	    {
            	        this->followPush(FOLLOW_global_attributes_in_namespace_body199);
            	        global_attributes11=global_attributes();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulenamespace_bodyEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, global_attributes11.tree);

            	    }
            	    break;

                }
            }

            // CSharp.g:86:72: ( namespace_member_declarations )?
            {
                int alt5=2;
                switch ( this->LA(1) )
                {
                    case ENUM:
                    case 94:
                    case 99:
                    case 113:
                    case 118:
                    case 127:
                    case 141:
                    case 142:
                    case 151:
                    case 152:
                    case 158:
                    case 161:
                    case 163:
                    case 165:
                    case 166:
                    case 167:
                    case 172:
                    case 178:
                    case 180:
                    case 190:
                    case 193:
                    case 195:
                    	{
                    		alt5=1;
                    	}
                        break;
                }

                switch (alt5)
                {
            	case 1:
            	    // CSharp.g:86:72: namespace_member_declarations
            	    {
            	        this->followPush(FOLLOW_namespace_member_declarations_in_namespace_body204);
            	        namespace_member_declarations12=namespace_member_declarations();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulenamespace_bodyEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, namespace_member_declarations12.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulenamespace_bodyEx; /* Prevent compiler warnings */
    rulenamespace_bodyEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(4, namespace_body_StartIndex); }

    return retval;
}
/* $ANTLR end namespace_body */

/**
 * $ANTLR start extern_alias_directives
 * CSharp.g:89:1: extern_alias_directives : ( extern_alias_directive )+ ;
 */
CSharpParser_extern_alias_directives_return
CSharpParser::extern_alias_directives()
{
    CSharpParser_extern_alias_directives_return retval(this);

    ANTLR_MARKER extern_alias_directives_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_extern_alias_directive_return extern_alias_directive13;
    typedef	CSharpParser_extern_alias_directive_return RETURN_TYPE_extern_alias_directive13;


    /* Initialize rule variables
     */
    extern_alias_directives_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(5)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    extern_alias_directive13.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:90:2: ( ( extern_alias_directive )+ )
        // CSharp.g:90:4: ( extern_alias_directive )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:90:4: ( extern_alias_directive )+
            {
                int cnt6=0;

                for (;;)
                {
                    int alt6=2;
            	switch ( this->LA(1) )
            	{
            	case 127:
            		{
            			switch ( this->LA(2) )
            			{
            			case 101:
            				{
            					alt6=1;
            				}
            			    break;

            			}

            		}
            	    break;

            	}

            	switch (alt6)
            	{
            	    case 1:
            	        // CSharp.g:90:4: extern_alias_directive
            	        {
            	            this->followPush(FOLLOW_extern_alias_directive_in_extern_alias_directives216);
            	            extern_alias_directive13=extern_alias_directive();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleextern_alias_directivesEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, extern_alias_directive13.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt6 >= 1 )
            		{
            		    goto loop6;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleextern_alias_directivesEx;
            	}
            	cnt6++;
                }
                loop6: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleextern_alias_directivesEx; /* Prevent compiler warnings */
    ruleextern_alias_directivesEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(5, extern_alias_directives_StartIndex); }

    return retval;
}
/* $ANTLR end extern_alias_directives */

/**
 * $ANTLR start extern_alias_directive
 * CSharp.g:93:1: extern_alias_directive : 'extern' 'alias' identifier ';' ;
 */
CSharpParser_extern_alias_directive_return
CSharpParser::extern_alias_directive()
{
    CSharpParser_extern_alias_directive_return retval(this);

    ANTLR_MARKER extern_alias_directive_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal14;
    const CommonTokenType*    string_literal15;
    const CommonTokenType*    char_literal17;
    CSharpParser_identifier_return identifier16;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier16;

    ImplTraits::TreeType* string_literal14_tree;
    ImplTraits::TreeType* string_literal15_tree;
    ImplTraits::TreeType* char_literal17_tree;

    /* Initialize rule variables
     */
    extern_alias_directive_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(6)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal14       = NULL;
    string_literal15       = NULL;
    char_literal17       = NULL;
    identifier16.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal14_tree   = NULL;
    string_literal15_tree   = NULL;
    char_literal17_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:94:2: ( 'extern' 'alias' identifier ';' )
        // CSharp.g:94:4: 'extern' 'alias' identifier ';'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal14 =  this->matchToken(127, &FOLLOW_127_in_extern_alias_directive228);
            if  (this->hasException())
            {
                goto ruleextern_alias_directiveEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal14_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal14));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal14_tree);
            }

            string_literal15 =  this->matchToken(101, &FOLLOW_101_in_extern_alias_directive232);
            if  (this->hasException())
            {
                goto ruleextern_alias_directiveEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal15_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal15));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal15_tree);
            }

            this->followPush(FOLLOW_identifier_in_extern_alias_directive236);
            identifier16=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleextern_alias_directiveEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier16.tree);

            char_literal17 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_extern_alias_directive239);
            if  (this->hasException())
            {
                goto ruleextern_alias_directiveEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal17_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal17));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal17_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleextern_alias_directiveEx; /* Prevent compiler warnings */
    ruleextern_alias_directiveEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(6, extern_alias_directive_StartIndex); }

    return retval;
}
/* $ANTLR end extern_alias_directive */

/**
 * $ANTLR start using_directives
 * CSharp.g:97:1: using_directives : ( using_directive )+ ;
 */
CSharpParser_using_directives_return
CSharpParser::using_directives()
{
    CSharpParser_using_directives_return retval(this);

    ANTLR_MARKER using_directives_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_using_directive_return using_directive18;
    typedef	CSharpParser_using_directive_return RETURN_TYPE_using_directive18;


    /* Initialize rule variables
     */
    using_directives_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(7)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    using_directive18.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:98:2: ( ( using_directive )+ )
        // CSharp.g:98:4: ( using_directive )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:98:4: ( using_directive )+
            {
                int cnt7=0;

                for (;;)
                {
                    int alt7=2;
            	switch ( this->LA(1) )
            	{
            	case USING:
            		{
            			alt7=1;
            		}
            	    break;

            	}

            	switch (alt7)
            	{
            	    case 1:
            	        // CSharp.g:98:4: using_directive
            	        {
            	            this->followPush(FOLLOW_using_directive_in_using_directives250);
            	            using_directive18=using_directive();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleusing_directivesEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, using_directive18.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt7 >= 1 )
            		{
            		    goto loop7;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleusing_directivesEx;
            	}
            	cnt7++;
                }
                loop7: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleusing_directivesEx; /* Prevent compiler warnings */
    ruleusing_directivesEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(7, using_directives_StartIndex); }

    return retval;
}
/* $ANTLR end using_directives */

/**
 * $ANTLR start using_directive
 * CSharp.g:101:1: using_directive : ( using_alias_directive | using_namespace_directive ) ;
 */
CSharpParser_using_directive_return
CSharpParser::using_directive()
{
    CSharpParser_using_directive_return retval(this);

    ANTLR_MARKER using_directive_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_using_alias_directive_return using_alias_directive19;
    typedef	CSharpParser_using_alias_directive_return RETURN_TYPE_using_alias_directive19;

    CSharpParser_using_namespace_directive_return using_namespace_directive20;
    typedef	CSharpParser_using_namespace_directive_return RETURN_TYPE_using_namespace_directive20;


    /* Initialize rule variables
     */
    using_directive_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(8)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    using_alias_directive19.tree = NULL;

    using_namespace_directive20.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:102:2: ( ( using_alias_directive | using_namespace_directive ) )
        // CSharp.g:102:4: ( using_alias_directive | using_namespace_directive )
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:102:4: ( using_alias_directive | using_namespace_directive )
            {
                int alt8=2;
                switch ( this->LA(1) )
                {
                case USING:
                	{
                		switch ( this->LA(2) )
                		{
                		case IDENTIFIER:
                		case 98:
                		case 100:
                		case 101:
                		case 103:
                		case 104:
                		case 108:
                		case 119:
                		case 122:
                		case 124:
                		case 128:
                		case 134:
                		case 137:
                		case 143:
                		case 145:
                		case 146:
                		case 149:
                		case 150:
                		case 154:
                		case 156:
                		case 159:
                		case 162:
                		case 164:
                		case 169:
                		case 173:
                		case 174:
                		case 185:
                		case 192:
                		case 196:
                		case 198:
                			{
                				switch ( this->LA(3) )
                				{
                				case 88:
                					{
                						alt8=1;
                					}
                				    break;
                				case DOT:
                				case SEMI:
                				case 83:
                				case 84:
                					{
                						alt8=2;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return retval;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 8 );
                				    ex->set_state( 2 );


                				    goto ruleusing_directiveEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return retval;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 8 );
                		    ex->set_state( 1 );


                		    goto ruleusing_directiveEx;

                		}

                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 8 );
                    ex->set_state( 0 );


                    goto ruleusing_directiveEx;

                }

                switch (alt8)
                {
            	case 1:
            	    // CSharp.g:103:4: using_alias_directive
            	    {
            	        this->followPush(FOLLOW_using_alias_directive_in_using_directive267);
            	        using_alias_directive19=using_alias_directive();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleusing_directiveEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, using_alias_directive19.tree);

            	    }
            	    break;
            	case 2:
            	    // CSharp.g:104:5: using_namespace_directive
            	    {
            	        this->followPush(FOLLOW_using_namespace_directive_in_using_directive273);
            	        using_namespace_directive20=using_namespace_directive();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleusing_directiveEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, using_namespace_directive20.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleusing_directiveEx; /* Prevent compiler warnings */
    ruleusing_directiveEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(8, using_directive_StartIndex); }

    return retval;
}
/* $ANTLR end using_directive */

/**
 * $ANTLR start using_alias_directive
 * CSharp.g:108:1: using_alias_directive : 'using' identifier '=' namespace_or_type_name ';' ;
 */
CSharpParser_using_alias_directive_return
CSharpParser::using_alias_directive()
{
    CSharpParser_using_alias_directive_return retval(this);

    ANTLR_MARKER using_alias_directive_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal21;
    const CommonTokenType*    char_literal23;
    const CommonTokenType*    char_literal25;
    CSharpParser_identifier_return identifier22;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier22;

    CSharpParser_namespace_or_type_name_return namespace_or_type_name24;
    typedef	CSharpParser_namespace_or_type_name_return RETURN_TYPE_namespace_or_type_name24;

    ImplTraits::TreeType* string_literal21_tree;
    ImplTraits::TreeType* char_literal23_tree;
    ImplTraits::TreeType* char_literal25_tree;

    /* Initialize rule variables
     */
    using_alias_directive_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(9)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal21       = NULL;
    char_literal23       = NULL;
    char_literal25       = NULL;
    identifier22.tree = NULL;

    namespace_or_type_name24.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal21_tree   = NULL;
    char_literal23_tree   = NULL;
    char_literal25_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:109:2: ( 'using' identifier '=' namespace_or_type_name ';' )
        // CSharp.g:109:4: 'using' identifier '=' namespace_or_type_name ';'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal21 =  this->matchToken(USING, &FOLLOW_USING_in_using_alias_directive288);
            if  (this->hasException())
            {
                goto ruleusing_alias_directiveEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal21_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal21));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal21_tree);
            }

            this->followPush(FOLLOW_identifier_in_using_alias_directive292);
            identifier22=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleusing_alias_directiveEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier22.tree);

            char_literal23 =  this->matchToken(88, &FOLLOW_88_in_using_alias_directive296);
            if  (this->hasException())
            {
                goto ruleusing_alias_directiveEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal23_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal23));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal23_tree);
            }

            this->followPush(FOLLOW_namespace_or_type_name_in_using_alias_directive300);
            namespace_or_type_name24=namespace_or_type_name();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleusing_alias_directiveEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, namespace_or_type_name24.tree);

            char_literal25 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_using_alias_directive304);
            if  (this->hasException())
            {
                goto ruleusing_alias_directiveEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal25_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal25));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal25_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleusing_alias_directiveEx; /* Prevent compiler warnings */
    ruleusing_alias_directiveEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(9, using_alias_directive_StartIndex); }

    return retval;
}
/* $ANTLR end using_alias_directive */

/**
 * $ANTLR start using_namespace_directive
 * CSharp.g:112:1: using_namespace_directive : 'using' namespace_name ';' ;
 */
CSharpParser_using_namespace_directive_return
CSharpParser::using_namespace_directive()
{
    CSharpParser_using_namespace_directive_return retval(this);

    ANTLR_MARKER using_namespace_directive_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal26;
    const CommonTokenType*    char_literal28;
    CSharpParser_namespace_name_return namespace_name27;
    typedef	CSharpParser_namespace_name_return RETURN_TYPE_namespace_name27;

    ImplTraits::TreeType* string_literal26_tree;
    ImplTraits::TreeType* char_literal28_tree;

    /* Initialize rule variables
     */
    using_namespace_directive_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(10)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal26       = NULL;
    char_literal28       = NULL;
    namespace_name27.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal26_tree   = NULL;
    char_literal28_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:113:2: ( 'using' namespace_name ';' )
        // CSharp.g:113:4: 'using' namespace_name ';'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal26 =  this->matchToken(USING, &FOLLOW_USING_in_using_namespace_directive315);
            if  (this->hasException())
            {
                goto ruleusing_namespace_directiveEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal26_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal26));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal26_tree);
            }

            this->followPush(FOLLOW_namespace_name_in_using_namespace_directive319);
            namespace_name27=namespace_name();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleusing_namespace_directiveEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, namespace_name27.tree);

            char_literal28 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_using_namespace_directive323);
            if  (this->hasException())
            {
                goto ruleusing_namespace_directiveEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal28_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal28));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal28_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleusing_namespace_directiveEx; /* Prevent compiler warnings */
    ruleusing_namespace_directiveEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(10, using_namespace_directive_StartIndex); }

    return retval;
}
/* $ANTLR end using_namespace_directive */

/**
 * $ANTLR start namespace_member_declarations
 * CSharp.g:116:1: namespace_member_declarations : ( namespace_member_declaration )+ ;
 */
CSharpParser_namespace_member_declarations_return
CSharpParser::namespace_member_declarations()
{
    CSharpParser_namespace_member_declarations_return retval(this);

    ANTLR_MARKER namespace_member_declarations_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_namespace_member_declaration_return namespace_member_declaration29;
    typedef	CSharpParser_namespace_member_declaration_return RETURN_TYPE_namespace_member_declaration29;


    /* Initialize rule variables
     */
    namespace_member_declarations_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(11)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    namespace_member_declaration29.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:117:2: ( ( namespace_member_declaration )+ )
        // CSharp.g:117:4: ( namespace_member_declaration )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:117:4: ( namespace_member_declaration )+
            {
                int cnt9=0;

                for (;;)
                {
                    int alt9=2;
            	switch ( this->LA(1) )
            	{
            	case ENUM:
            	case 94:
            	case 99:
            	case 113:
            	case 118:
            	case 127:
            	case 141:
            	case 142:
            	case 151:
            	case 152:
            	case 158:
            	case 161:
            	case 163:
            	case 165:
            	case 166:
            	case 167:
            	case 172:
            	case 178:
            	case 180:
            	case 190:
            	case 193:
            	case 195:
            		{
            			alt9=1;
            		}
            	    break;

            	}

            	switch (alt9)
            	{
            	    case 1:
            	        // CSharp.g:117:4: namespace_member_declaration
            	        {
            	            this->followPush(FOLLOW_namespace_member_declaration_in_namespace_member_declarations334);
            	            namespace_member_declaration29=namespace_member_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulenamespace_member_declarationsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, namespace_member_declaration29.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt9 >= 1 )
            		{
            		    goto loop9;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulenamespace_member_declarationsEx;
            	}
            	cnt9++;
                }
                loop9: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulenamespace_member_declarationsEx; /* Prevent compiler warnings */
    rulenamespace_member_declarationsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(11, namespace_member_declarations_StartIndex); }

    return retval;
}
/* $ANTLR end namespace_member_declarations */

/**
 * $ANTLR start namespace_member_declaration
 * CSharp.g:120:1: namespace_member_declaration : ( namespace_declaration | ( attributes )? ( modifiers )? type_declaration );
 */
CSharpParser_namespace_member_declaration_return
CSharpParser::namespace_member_declaration()
{
    CSharpParser_namespace_member_declaration_return retval(this);

    ANTLR_MARKER namespace_member_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_namespace_declaration_return namespace_declaration30;
    typedef	CSharpParser_namespace_declaration_return RETURN_TYPE_namespace_declaration30;

    CSharpParser_attributes_return attributes31;
    typedef	CSharpParser_attributes_return RETURN_TYPE_attributes31;

    CSharpParser_modifiers_return modifiers32;
    typedef	CSharpParser_modifiers_return RETURN_TYPE_modifiers32;

    CSharpParser_type_declaration_return type_declaration33;
    typedef	CSharpParser_type_declaration_return RETURN_TYPE_type_declaration33;


    /* Initialize rule variables
     */
    namespace_member_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(12)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    namespace_declaration30.tree = NULL;

    attributes31.tree = NULL;

    modifiers32.tree = NULL;

    type_declaration33.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:121:2: ( namespace_declaration | ( attributes )? ( modifiers )? type_declaration )

            ANTLR_UINT32 alt12;

            alt12=2;

            switch ( this->LA(1) )
            {
            case 151:
            	{
            		alt12=1;
            	}
                break;
            case ENUM:
            case 94:
            case 99:
            case 113:
            case 118:
            case 127:
            case 141:
            case 142:
            case 152:
            case 158:
            case 161:
            case 163:
            case 165:
            case 166:
            case 167:
            case 172:
            case 178:
            case 180:
            case 190:
            case 193:
            case 195:
            	{
            		alt12=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 12 );
                ex->set_state( 0 );


                goto rulenamespace_member_declarationEx;

            }

            switch (alt12)
            {
        	case 1:
        	    // CSharp.g:121:4: namespace_declaration
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_namespace_declaration_in_namespace_member_declaration346);
        	        namespace_declaration30=namespace_declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenamespace_member_declarationEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, namespace_declaration30.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:122:4: ( attributes )? ( modifiers )? type_declaration
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        // CSharp.g:122:4: ( attributes )?
        	        {
        	            int alt10=2;
        	            switch ( this->LA(1) )
        	            {
        	                case 94:
        	                	{
        	                		alt10=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt10)
        	            {
        	        	case 1:
        	        	    // CSharp.g:122:4: attributes
        	        	    {
        	        	        this->followPush(FOLLOW_attributes_in_namespace_member_declaration351);
        	        	        attributes31=attributes();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulenamespace_member_declarationEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attributes31.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // CSharp.g:122:18: ( modifiers )?
        	        {
        	            int alt11=2;
        	            switch ( this->LA(1) )
        	            {
        	                case 99:
        	                case 127:
        	                case 142:
        	                case 152:
        	                case 158:
        	                case 163:
        	                case 165:
        	                case 166:
        	                case 167:
        	                case 172:
        	                case 178:
        	                case 190:
        	                case 193:
        	                case 195:
        	                	{
        	                		alt11=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt11)
        	            {
        	        	case 1:
        	        	    // CSharp.g:122:18: modifiers
        	        	    {
        	        	        this->followPush(FOLLOW_modifiers_in_namespace_member_declaration356);
        	        	        modifiers32=modifiers();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulenamespace_member_declarationEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, modifiers32.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_type_declaration_in_namespace_member_declaration361);
        	        type_declaration33=type_declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenamespace_member_declarationEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_declaration33.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulenamespace_member_declarationEx; /* Prevent compiler warnings */
    rulenamespace_member_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(12, namespace_member_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end namespace_member_declaration */

/**
 * $ANTLR start type_declaration
 * CSharp.g:125:1: type_declaration : ( ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration ) | class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration );
 */
CSharpParser_type_declaration_return
CSharpParser::type_declaration()
{
    CSharpParser_type_declaration_return retval(this);

    ANTLR_MARKER type_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal34;
    CSharpParser_class_declaration_return class_declaration35;
    typedef	CSharpParser_class_declaration_return RETURN_TYPE_class_declaration35;

    CSharpParser_struct_declaration_return struct_declaration36;
    typedef	CSharpParser_struct_declaration_return RETURN_TYPE_struct_declaration36;

    CSharpParser_interface_declaration_return interface_declaration37;
    typedef	CSharpParser_interface_declaration_return RETURN_TYPE_interface_declaration37;

    CSharpParser_class_declaration_return class_declaration38;
    typedef	CSharpParser_class_declaration_return RETURN_TYPE_class_declaration38;

    CSharpParser_struct_declaration_return struct_declaration39;
    typedef	CSharpParser_struct_declaration_return RETURN_TYPE_struct_declaration39;

    CSharpParser_interface_declaration_return interface_declaration40;
    typedef	CSharpParser_interface_declaration_return RETURN_TYPE_interface_declaration40;

    CSharpParser_enum_declaration_return enum_declaration41;
    typedef	CSharpParser_enum_declaration_return RETURN_TYPE_enum_declaration41;

    CSharpParser_delegate_declaration_return delegate_declaration42;
    typedef	CSharpParser_delegate_declaration_return RETURN_TYPE_delegate_declaration42;

    ImplTraits::TreeType* string_literal34_tree;

    /* Initialize rule variables
     */
    type_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(13)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal34       = NULL;
    class_declaration35.tree = NULL;

    struct_declaration36.tree = NULL;

    interface_declaration37.tree = NULL;

    class_declaration38.tree = NULL;

    struct_declaration39.tree = NULL;

    interface_declaration40.tree = NULL;

    enum_declaration41.tree = NULL;

    delegate_declaration42.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal34_tree   = NULL;


    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:126:2: ( ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration ) | class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration )

            ANTLR_UINT32 alt14;

            alt14=6;

            {
                int LA14_0 = this->LA(1);
                if ( (this->msynpred( antlr3::ClassForwarder<synpred1_CSharp>() )) && (LA14_0 == 161))
                {
                    alt14=1;
                }
                else if ( (LA14_0 == 113))
                {
                    alt14=2;
                }
                else if ( (LA14_0 == 180))
                {
                    alt14=3;
                }
                else if ( (LA14_0 == 141))
                {
                    alt14=4;
                }
                else if ( (LA14_0 == ENUM))
                {
                    alt14=5;
                }
                else if ( (LA14_0 == 118))
                {
                    alt14=6;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 14 );
                    ex->set_state( 0 );


                    goto ruletype_declarationEx;

                }
            }
            switch (alt14)
            {
        	case 1:
        	    // CSharp.g:126:4: ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration )
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal34 =  this->matchToken(161, &FOLLOW_161_in_type_declaration378);
        	        if  (this->hasException())
        	        {
        	            goto ruletype_declarationEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal34_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal34));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal34_tree);
        	        }

        	        // CSharp.g:126:29: ( class_declaration | struct_declaration | interface_declaration )
        	        {
        	            int alt13=3;
        	            switch ( this->LA(1) )
        	            {
        	            case 113:
        	            	{
        	            		alt13=1;
        	            	}
        	                break;
        	            case 180:
        	            	{
        	            		alt13=2;
        	            	}
        	                break;
        	            case 141:
        	            	{
        	            		alt13=3;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 13 );
        	                ex->set_state( 0 );


        	                goto ruletype_declarationEx;

        	            }

        	            switch (alt13)
        	            {
        	        	case 1:
        	        	    // CSharp.g:127:7: class_declaration
        	        	    {
        	        	        this->followPush(FOLLOW_class_declaration_in_type_declaration388);
        	        	        class_declaration35=class_declaration();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruletype_declarationEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, class_declaration35.tree);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // CSharp.g:128:9: struct_declaration
        	        	    {
        	        	        this->followPush(FOLLOW_struct_declaration_in_type_declaration398);
        	        	        struct_declaration36=struct_declaration();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruletype_declarationEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, struct_declaration36.tree);

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // CSharp.g:129:9: interface_declaration
        	        	    {
        	        	        this->followPush(FOLLOW_interface_declaration_in_type_declaration408);
        	        	        interface_declaration37=interface_declaration();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruletype_declarationEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_declaration37.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:131:4: class_declaration
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_class_declaration_in_type_declaration421);
        	        class_declaration38=class_declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletype_declarationEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, class_declaration38.tree);

        	    }
        	    break;
        	case 3:
        	    // CSharp.g:132:4: struct_declaration
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_struct_declaration_in_type_declaration426);
        	        struct_declaration39=struct_declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletype_declarationEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, struct_declaration39.tree);

        	    }
        	    break;
        	case 4:
        	    // CSharp.g:133:4: interface_declaration
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_interface_declaration_in_type_declaration431);
        	        interface_declaration40=interface_declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletype_declarationEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_declaration40.tree);

        	    }
        	    break;
        	case 5:
        	    // CSharp.g:134:4: enum_declaration
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_enum_declaration_in_type_declaration436);
        	        enum_declaration41=enum_declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletype_declarationEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, enum_declaration41.tree);

        	    }
        	    break;
        	case 6:
        	    // CSharp.g:135:4: delegate_declaration
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_delegate_declaration_in_type_declaration441);
        	        delegate_declaration42=delegate_declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletype_declarationEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, delegate_declaration42.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruletype_declarationEx; /* Prevent compiler warnings */
    ruletype_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(13, type_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end type_declaration */

/**
 * $ANTLR start qualified_identifier
 * CSharp.g:139:1: qualified_identifier : identifier ( '.' identifier )* ;
 */
CSharpParser_qualified_identifier_return
CSharpParser::qualified_identifier()
{
    CSharpParser_qualified_identifier_return retval(this);

    ANTLR_MARKER qualified_identifier_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal44;
    CSharpParser_identifier_return identifier43;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier43;

    CSharpParser_identifier_return identifier45;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier45;

    ImplTraits::TreeType* char_literal44_tree;

    /* Initialize rule variables
     */
    qualified_identifier_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(14)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal44       = NULL;
    identifier43.tree = NULL;

    identifier45.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal44_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:140:2: ( identifier ( '.' identifier )* )
        // CSharp.g:140:4: identifier ( '.' identifier )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_identifier_in_qualified_identifier453);
            identifier43=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto rulequalified_identifierEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier43.tree);

            // CSharp.g:140:15: ( '.' identifier )*

            for (;;)
            {
                int alt15=2;
                switch ( this->LA(1) )
                {
                case DOT:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    // CSharp.g:140:16: '.' identifier
            	    {
            	        char_literal44 =  this->matchToken(DOT, &FOLLOW_DOT_in_qualified_identifier456);
            	        if  (this->hasException())
            	        {
            	            goto rulequalified_identifierEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal44_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal44));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal44_tree);
            	        }

            	        this->followPush(FOLLOW_identifier_in_qualified_identifier458);
            	        identifier45=identifier();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequalified_identifierEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier45.tree);

            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulequalified_identifierEx; /* Prevent compiler warnings */
    rulequalified_identifierEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(14, qualified_identifier_StartIndex); }

    return retval;
}
/* $ANTLR end qualified_identifier */

/**
 * $ANTLR start namespace_name
 * CSharp.g:143:1: namespace_name : namespace_or_type_name ;
 */
CSharpParser_namespace_name_return
CSharpParser::namespace_name()
{
    CSharpParser_namespace_name_return retval(this);

    ANTLR_MARKER namespace_name_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_namespace_or_type_name_return namespace_or_type_name46;
    typedef	CSharpParser_namespace_or_type_name_return RETURN_TYPE_namespace_or_type_name46;


    /* Initialize rule variables
     */
    namespace_name_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(15)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    namespace_or_type_name46.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:144:2: ( namespace_or_type_name )
        // CSharp.g:144:4: namespace_or_type_name
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_namespace_or_type_name_in_namespace_name471);
            namespace_or_type_name46=namespace_or_type_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulenamespace_nameEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, namespace_or_type_name46.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulenamespace_nameEx; /* Prevent compiler warnings */
    rulenamespace_nameEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(15, namespace_name_StartIndex); }

    return retval;
}
/* $ANTLR end namespace_name */

/**
 * $ANTLR start modifiers
 * CSharp.g:147:1: modifiers : ( modifier )+ ;
 */
CSharpParser_modifiers_return
CSharpParser::modifiers()
{
    CSharpParser_modifiers_return retval(this);

    ANTLR_MARKER modifiers_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_modifier_return modifier47;
    typedef	CSharpParser_modifier_return RETURN_TYPE_modifier47;


    /* Initialize rule variables
     */
    modifiers_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(16)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    modifier47.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:148:2: ( ( modifier )+ )
        // CSharp.g:148:4: ( modifier )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:148:4: ( modifier )+
            {
                int cnt16=0;

                for (;;)
                {
                    int alt16=2;
            	switch ( this->LA(1) )
            	{
            	case 99:
            	case 127:
            	case 142:
            	case 152:
            	case 158:
            	case 163:
            	case 165:
            	case 166:
            	case 167:
            	case 172:
            	case 178:
            	case 190:
            	case 193:
            	case 195:
            		{
            			alt16=1;
            		}
            	    break;

            	}

            	switch (alt16)
            	{
            	    case 1:
            	        // CSharp.g:148:4: modifier
            	        {
            	            this->followPush(FOLLOW_modifier_in_modifiers482);
            	            modifier47=modifier();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemodifiersEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, modifier47.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt16 >= 1 )
            		{
            		    goto loop16;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulemodifiersEx;
            	}
            	cnt16++;
                }
                loop16: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulemodifiersEx; /* Prevent compiler warnings */
    rulemodifiersEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(16, modifiers_StartIndex); }

    return retval;
}
/* $ANTLR end modifiers */

/**
 * $ANTLR start modifier
 * CSharp.g:151:1: modifier : ( 'new' | 'public' | 'protected' | 'private' | 'internal' | 'unsafe' | 'abstract' | 'sealed' | 'static' | 'readonly' | 'volatile' | 'extern' | 'virtual' | 'override' );
 */
CSharpParser_modifier_return
CSharpParser::modifier()
{
    CSharpParser_modifier_return retval(this);

    ANTLR_MARKER modifier_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set48;

    ImplTraits::TreeType* set48_tree;

    /* Initialize rule variables
     */
    modifier_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(17)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set48       = NULL;
    retval.call_start_placeholder(); 


    set48_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:152:2: ( 'new' | 'public' | 'protected' | 'private' | 'internal' | 'unsafe' | 'abstract' | 'sealed' | 'static' | 'readonly' | 'volatile' | 'extern' | 'virtual' | 'override' )
        // CSharp.g:
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            set48=(const CommonTokenType*) this->LT(1);

            if ( this->LA(1) == 99 || this->LA(1) == 127 || this->LA(1) == 142 || this->LA(1) == 152 || this->LA(1) == 158 || this->LA(1) == 163 || ((this->LA(1) >= 165) && (this->LA(1) <= 167)) || this->LA(1) == 172 || this->LA(1) == 178 || this->LA(1) == 190 || this->LA(1) == 193 || this->LA(1) == 195 )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set48))
                );
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulemodifierEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemodifierEx; /* Prevent compiler warnings */
    rulemodifierEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(17, modifier_StartIndex); }

    return retval;
}
/* $ANTLR end modifier */

/**
 * $ANTLR start class_member_declaration
 * CSharp.g:168:1: class_member_declaration : ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration ) ;
 */
CSharpParser_class_member_declaration_return
CSharpParser::class_member_declaration()
{
    CSharpParser_class_member_declaration_return retval(this);

    ANTLR_MARKER class_member_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal50;
    const CommonTokenType*    char_literal53;
    const CommonTokenType*    string_literal55;
    const CommonTokenType*    string_literal61;
    const CommonTokenType*    char_literal67;
    CSharpParser_modifiers_return m;
    typedef	CSharpParser_modifiers_return RETURN_TYPE_m;

    CSharpParser_attributes_return attributes49;
    typedef	CSharpParser_attributes_return RETURN_TYPE_attributes49;

    CSharpParser_type_return type51;
    typedef	CSharpParser_type_return RETURN_TYPE_type51;

    CSharpParser_constant_declarators_return constant_declarators52;
    typedef	CSharpParser_constant_declarators_return RETURN_TYPE_constant_declarators52;

    CSharpParser_event_declaration_return event_declaration54;
    typedef	CSharpParser_event_declaration_return RETURN_TYPE_event_declaration54;

    CSharpParser_method_declaration_return method_declaration56;
    typedef	CSharpParser_method_declaration_return RETURN_TYPE_method_declaration56;

    CSharpParser_interface_declaration_return interface_declaration57;
    typedef	CSharpParser_interface_declaration_return RETURN_TYPE_interface_declaration57;

    CSharpParser_class_declaration_return class_declaration58;
    typedef	CSharpParser_class_declaration_return RETURN_TYPE_class_declaration58;

    CSharpParser_struct_declaration_return struct_declaration59;
    typedef	CSharpParser_struct_declaration_return RETURN_TYPE_struct_declaration59;

    CSharpParser_interface_declaration_return interface_declaration60;
    typedef	CSharpParser_interface_declaration_return RETURN_TYPE_interface_declaration60;

    CSharpParser_method_declaration_return method_declaration62;
    typedef	CSharpParser_method_declaration_return RETURN_TYPE_method_declaration62;

    CSharpParser_type_return type63;
    typedef	CSharpParser_type_return RETURN_TYPE_type63;

    CSharpParser_method_declaration_return method_declaration64;
    typedef	CSharpParser_method_declaration_return RETURN_TYPE_method_declaration64;

    CSharpParser_property_declaration_return property_declaration65;
    typedef	CSharpParser_property_declaration_return RETURN_TYPE_property_declaration65;

    CSharpParser_type_name_return type_name66;
    typedef	CSharpParser_type_name_return RETURN_TYPE_type_name66;

    CSharpParser_indexer_declaration_return indexer_declaration68;
    typedef	CSharpParser_indexer_declaration_return RETURN_TYPE_indexer_declaration68;

    CSharpParser_indexer_declaration_return indexer_declaration69;
    typedef	CSharpParser_indexer_declaration_return RETURN_TYPE_indexer_declaration69;

    CSharpParser_field_declaration_return field_declaration70;
    typedef	CSharpParser_field_declaration_return RETURN_TYPE_field_declaration70;

    CSharpParser_operator_declaration_return operator_declaration71;
    typedef	CSharpParser_operator_declaration_return RETURN_TYPE_operator_declaration71;

    CSharpParser_class_declaration_return class_declaration72;
    typedef	CSharpParser_class_declaration_return RETURN_TYPE_class_declaration72;

    CSharpParser_struct_declaration_return struct_declaration73;
    typedef	CSharpParser_struct_declaration_return RETURN_TYPE_struct_declaration73;

    CSharpParser_enum_declaration_return enum_declaration74;
    typedef	CSharpParser_enum_declaration_return RETURN_TYPE_enum_declaration74;

    CSharpParser_delegate_declaration_return delegate_declaration75;
    typedef	CSharpParser_delegate_declaration_return RETURN_TYPE_delegate_declaration75;

    CSharpParser_conversion_operator_declaration_return conversion_operator_declaration76;
    typedef	CSharpParser_conversion_operator_declaration_return RETURN_TYPE_conversion_operator_declaration76;

    CSharpParser_constructor_declaration_return constructor_declaration77;
    typedef	CSharpParser_constructor_declaration_return RETURN_TYPE_constructor_declaration77;

    CSharpParser_destructor_declaration_return destructor_declaration78;
    typedef	CSharpParser_destructor_declaration_return RETURN_TYPE_destructor_declaration78;

    ImplTraits::TreeType* string_literal50_tree;
    ImplTraits::TreeType* char_literal53_tree;
    ImplTraits::TreeType* string_literal55_tree;
    ImplTraits::TreeType* string_literal61_tree;
    ImplTraits::TreeType* char_literal67_tree;

    /* Initialize rule variables
     */
    class_member_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(18)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal50       = NULL;
    char_literal53       = NULL;
    string_literal55       = NULL;
    string_literal61       = NULL;
    char_literal67       = NULL;
    m.tree = NULL;

    attributes49.tree = NULL;

    type51.tree = NULL;

    constant_declarators52.tree = NULL;

    event_declaration54.tree = NULL;

    method_declaration56.tree = NULL;

    interface_declaration57.tree = NULL;

    class_declaration58.tree = NULL;

    struct_declaration59.tree = NULL;

    interface_declaration60.tree = NULL;

    method_declaration62.tree = NULL;

    type63.tree = NULL;

    method_declaration64.tree = NULL;

    property_declaration65.tree = NULL;

    type_name66.tree = NULL;

    indexer_declaration68.tree = NULL;

    indexer_declaration69.tree = NULL;

    field_declaration70.tree = NULL;

    operator_declaration71.tree = NULL;

    class_declaration72.tree = NULL;

    struct_declaration73.tree = NULL;

    enum_declaration74.tree = NULL;

    delegate_declaration75.tree = NULL;

    conversion_operator_declaration76.tree = NULL;

    constructor_declaration77.tree = NULL;

    destructor_declaration78.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal50_tree   = NULL;
    char_literal53_tree   = NULL;
    string_literal55_tree   = NULL;
    string_literal61_tree   = NULL;
    char_literal67_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:169:2: ( ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration ) )
        // CSharp.g:169:4: ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration )
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:169:4: ( attributes )?
            {
                int alt17=2;
                switch ( this->LA(1) )
                {
                    case 94:
                    	{
                    		alt17=1;
                    	}
                        break;
                }

                switch (alt17)
                {
            	case 1:
            	    // CSharp.g:169:4: attributes
            	    {
            	        this->followPush(FOLLOW_attributes_in_class_member_declaration570);
            	        attributes49=attributes();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attributes49.tree);

            	    }
            	    break;

                }
            }

            // CSharp.g:169:17: (m= modifiers )?
            {
                int alt18=2;
                switch ( this->LA(1) )
                {
                    case 99:
                    case 127:
                    case 142:
                    case 152:
                    case 158:
                    case 163:
                    case 165:
                    case 166:
                    case 167:
                    case 172:
                    case 178:
                    case 190:
                    case 193:
                    case 195:
                    	{
                    		alt18=1;
                    	}
                        break;
                }

                switch (alt18)
                {
            	case 1:
            	    // CSharp.g:169:17: m= modifiers
            	    {
            	        this->followPush(FOLLOW_modifiers_in_class_member_declaration575);
            	        m=modifiers();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, m.tree);

            	    }
            	    break;

                }
            }

            // CSharp.g:170:3: ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration )
            {
                int alt21=13;
                switch ( this->LA(1) )
                {
                case 114:
                	{
                		alt21=1;
                	}
                    break;
                case 125:
                	{
                		alt21=2;
                	}
                    break;
                case 161:
                	{
                		alt21=3;
                	}
                    break;
                case 141:
                	{
                		alt21=4;
                	}
                    break;
                case 194:
                	{
                		switch ( this->LA(2) )
                		{
                		case Character_literal:
                		case FALSE:
                		case Hex_number:
                		case IDENTIFIER:
                		case LT_NULL:
                		case NUMBER:
                		case Real_literal:
                		case STRINGLITERAL:
                		case TRUE:
                		case Verbatim_string_literal:
                		case 98:
                		case 100:
                		case 101:
                		case 103:
                		case 104:
                		case 106:
                		case 108:
                		case 109:
                		case 111:
                		case 116:
                		case 119:
                		case 121:
                		case 122:
                		case 124:
                		case 128:
                		case 131:
                		case 134:
                		case 137:
                		case 140:
                		case 143:
                		case 145:
                		case 146:
                		case 148:
                		case 149:
                		case 150:
                		case 153:
                		case 154:
                		case 156:
                		case 159:
                		case 162:
                		case 164:
                		case 169:
                		case 171:
                		case 173:
                		case 174:
                		case 175:
                		case 179:
                		case 185:
                		case 187:
                		case 188:
                		case 191:
                		case 192:
                		case 196:
                		case 198:
                			{
                				alt21=5;
                			}
                		    break;
                		case 72:
                			{
                				alt21=6;
                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return retval;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 21 );
                		    ex->set_state( 5 );


                		    goto ruleclass_member_declarationEx;

                		}

                	}
                    break;
                case 106:
                case 109:
                case 111:
                case 116:
                case 121:
                case 131:
                case 140:
                case 148:
                case 153:
                case 171:
                case 175:
                case 179:
                case 187:
                case 188:
                case 191:
                	{
                		alt21=6;
                	}
                    break;
                case IDENTIFIER:
                case 98:
                case 100:
                case 101:
                case 103:
                case 104:
                case 108:
                case 119:
                case 122:
                case 124:
                case 128:
                case 134:
                case 137:
                case 143:
                case 145:
                case 146:
                case 149:
                case 150:
                case 154:
                case 156:
                case 159:
                case 162:
                case 164:
                case 169:
                case 173:
                case 174:
                case 185:
                case 192:
                case 196:
                case 198:
                	{
                		switch ( this->LA(2) )
                		{
                		case Character_literal:
                		case DOT:
                		case FALSE:
                		case Hex_number:
                		case IDENTIFIER:
                		case LT_NULL:
                		case NUMBER:
                		case Real_literal:
                		case STRINGLITERAL:
                		case TRUE:
                		case Verbatim_string_literal:
                		case 72:
                		case 83:
                		case 84:
                		case 92:
                		case 94:
                		case 98:
                		case 100:
                		case 101:
                		case 103:
                		case 104:
                		case 106:
                		case 108:
                		case 109:
                		case 111:
                		case 116:
                		case 119:
                		case 121:
                		case 122:
                		case 124:
                		case 128:
                		case 131:
                		case 134:
                		case 137:
                		case 140:
                		case 143:
                		case 145:
                		case 146:
                		case 148:
                		case 149:
                		case 150:
                		case 153:
                		case 154:
                		case 155:
                		case 156:
                		case 159:
                		case 162:
                		case 164:
                		case 169:
                		case 171:
                		case 173:
                		case 174:
                		case 175:
                		case 179:
                		case 182:
                		case 185:
                		case 187:
                		case 188:
                		case 191:
                		case 192:
                		case 196:
                		case 198:
                			{
                				alt21=6;
                			}
                		    break;
                		case 71:
                			{
                				alt21=12;
                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return retval;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 21 );
                		    ex->set_state( 7 );


                		    goto ruleclass_member_declarationEx;

                		}

                	}
                    break;
                case 113:
                	{
                		alt21=7;
                	}
                    break;
                case 180:
                	{
                		alt21=8;
                	}
                    break;
                case ENUM:
                	{
                		alt21=9;
                	}
                    break;
                case 118:
                	{
                		alt21=10;
                	}
                    break;
                case 126:
                case 138:
                	{
                		alt21=11;
                	}
                    break;
                case 204:
                	{
                		alt21=13;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 21 );
                    ex->set_state( 0 );


                    goto ruleclass_member_declarationEx;

                }

                switch (alt21)
                {
            	case 1:
            	    // CSharp.g:171:4: 'const' type constant_declarators ';'
            	    {
            	        string_literal50 =  this->matchToken(114, &FOLLOW_114_in_class_member_declaration585);
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        string_literal50_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal50));
            	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal50_tree);
            	        }

            	        this->followPush(FOLLOW_type_in_class_member_declaration589);
            	        type51=type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type51.tree);

            	        this->followPush(FOLLOW_constant_declarators_in_class_member_declaration593);
            	        constant_declarators52=constant_declarators();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constant_declarators52.tree);

            	        char_literal53 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_class_member_declaration597);
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal53_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal53));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal53_tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // CSharp.g:172:5: event_declaration
            	    {
            	        this->followPush(FOLLOW_event_declaration_in_class_member_declaration603);
            	        event_declaration54=event_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, event_declaration54.tree);

            	    }
            	    break;
            	case 3:
            	    // CSharp.g:173:5: 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration )
            	    {
            	        string_literal55 =  this->matchToken(161, &FOLLOW_161_in_class_member_declaration611);
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        string_literal55_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal55));
            	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal55_tree);
            	        }

            	        // CSharp.g:174:4: ( method_declaration | interface_declaration | class_declaration | struct_declaration )
            	        {
            	            int alt19=4;
            	            switch ( this->LA(1) )
            	            {
            	            case Character_literal:
            	            case FALSE:
            	            case Hex_number:
            	            case IDENTIFIER:
            	            case LT_NULL:
            	            case NUMBER:
            	            case Real_literal:
            	            case STRINGLITERAL:
            	            case TRUE:
            	            case Verbatim_string_literal:
            	            case 98:
            	            case 100:
            	            case 101:
            	            case 103:
            	            case 104:
            	            case 106:
            	            case 108:
            	            case 109:
            	            case 111:
            	            case 116:
            	            case 119:
            	            case 121:
            	            case 122:
            	            case 124:
            	            case 128:
            	            case 131:
            	            case 134:
            	            case 137:
            	            case 140:
            	            case 143:
            	            case 145:
            	            case 146:
            	            case 148:
            	            case 149:
            	            case 150:
            	            case 153:
            	            case 154:
            	            case 156:
            	            case 159:
            	            case 162:
            	            case 164:
            	            case 169:
            	            case 171:
            	            case 173:
            	            case 174:
            	            case 175:
            	            case 179:
            	            case 185:
            	            case 187:
            	            case 188:
            	            case 191:
            	            case 192:
            	            case 196:
            	            case 198:
            	            	{
            	            		alt19=1;
            	            	}
            	                break;
            	            case 141:
            	            	{
            	            		alt19=2;
            	            	}
            	                break;
            	            case 113:
            	            	{
            	            		alt19=3;
            	            	}
            	                break;
            	            case 180:
            	            	{
            	            		alt19=4;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 19 );
            	                ex->set_state( 0 );


            	                goto ruleclass_member_declarationEx;

            	            }

            	            switch (alt19)
            	            {
            	        	case 1:
            	        	    // CSharp.g:175:5: method_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_method_declaration_in_class_member_declaration622);
            	        	        method_declaration56=method_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleclass_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, method_declaration56.tree);

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CSharp.g:176:6: interface_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_interface_declaration_in_class_member_declaration630);
            	        	        interface_declaration57=interface_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleclass_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_declaration57.tree);

            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // CSharp.g:177:6: class_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_class_declaration_in_class_member_declaration638);
            	        	        class_declaration58=class_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleclass_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, class_declaration58.tree);

            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // CSharp.g:178:6: struct_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_struct_declaration_in_class_member_declaration645);
            	        	        struct_declaration59=struct_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleclass_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, struct_declaration59.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 4:
            	    // CSharp.g:180:5: interface_declaration
            	    {
            	        this->followPush(FOLLOW_interface_declaration_in_class_member_declaration656);
            	        interface_declaration60=interface_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_declaration60.tree);

            	    }
            	    break;
            	case 5:
            	    // CSharp.g:181:5: 'void' method_declaration
            	    {
            	        string_literal61 =  this->matchToken(194, &FOLLOW_194_in_class_member_declaration663);
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        string_literal61_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal61));
            	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal61_tree);
            	        }

            	        this->followPush(FOLLOW_method_declaration_in_class_member_declaration667);
            	        method_declaration62=method_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, method_declaration62.tree);

            	    }
            	    break;
            	case 6:
            	    // CSharp.g:182:5: type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
            	    {
            	        this->followPush(FOLLOW_type_in_class_member_declaration673);
            	        type63=type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type63.tree);

            	        // CSharp.g:183:5: ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
            	        {
            	            int alt20=6;
            	            switch ( this->LA(1) )
            	            {
            	            case 106:
            	            case 109:
            	            case 111:
            	            case 116:
            	            case 121:
            	            case 131:
            	            case 140:
            	            case 148:
            	            case 153:
            	            case 171:
            	            case 175:
            	            case 179:
            	            case 187:
            	            case 188:
            	            case 191:
            	            	{
            	            		{
            	            		    int LA20_1 = this->LA(2);
            	            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred2_CSharp>() )))
            	            		    {
            	            		        alt20=1;
            	            		    }
            	            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred3_CSharp>() )))
            	            		    {
            	            		        alt20=2;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (this->get_backtracking()>0)
            	            		        {
            	            		            this->set_failedflag( true );
            	            		            return retval;
            	            		        }


            	            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            		        ex->set_decisionNum( 20 );
            	            		        ex->set_state( 1 );


            	            		        goto ruleclass_member_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case IDENTIFIER:
            	            case 98:
            	            case 100:
            	            case 101:
            	            case 103:
            	            case 104:
            	            case 108:
            	            case 119:
            	            case 122:
            	            case 124:
            	            case 128:
            	            case 134:
            	            case 137:
            	            case 143:
            	            case 145:
            	            case 146:
            	            case 149:
            	            case 150:
            	            case 154:
            	            case 156:
            	            case 159:
            	            case 162:
            	            case 164:
            	            case 169:
            	            case 173:
            	            case 174:
            	            case 185:
            	            case 192:
            	            case 196:
            	            case 198:
            	            	{
            	            		{
            	            		    int LA20_2 = this->LA(2);
            	            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred2_CSharp>() )))
            	            		    {
            	            		        alt20=1;
            	            		    }
            	            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred3_CSharp>() )))
            	            		    {
            	            		        alt20=2;
            	            		    }
            	            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_CSharp>() )))
            	            		    {
            	            		        alt20=3;
            	            		    }
            	            		    else if ( (true))
            	            		    {
            	            		        alt20=5;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (this->get_backtracking()>0)
            	            		        {
            	            		            this->set_failedflag( true );
            	            		            return retval;
            	            		        }


            	            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            		        ex->set_decisionNum( 20 );
            	            		        ex->set_state( 2 );


            	            		        goto ruleclass_member_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case Character_literal:
            	            case FALSE:
            	            case Hex_number:
            	            case LT_NULL:
            	            case NUMBER:
            	            case Real_literal:
            	            case STRINGLITERAL:
            	            case TRUE:
            	            case Verbatim_string_literal:
            	            	{
            	            		{
            	            		    int LA20_3 = this->LA(2);
            	            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred2_CSharp>() )))
            	            		    {
            	            		        alt20=1;
            	            		    }
            	            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred3_CSharp>() )))
            	            		    {
            	            		        alt20=2;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (this->get_backtracking()>0)
            	            		        {
            	            		            this->set_failedflag( true );
            	            		            return retval;
            	            		        }


            	            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            		        ex->set_decisionNum( 20 );
            	            		        ex->set_state( 3 );


            	            		        goto ruleclass_member_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 182:
            	            	{
            	            		alt20=4;
            	            	}
            	                break;
            	            case 155:
            	            	{
            	            		alt20=6;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 20 );
            	                ex->set_state( 0 );


            	                goto ruleclass_member_declarationEx;

            	            }

            	            switch (alt20)
            	            {
            	        	case 1:
            	        	    // CSharp.g:184:6: ( member_name '(' )=> method_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_method_declaration_in_class_member_declaration696);
            	        	        method_declaration64=method_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleclass_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, method_declaration64.tree);

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CSharp.g:185:11: ( member_name '{' )=> property_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_property_declaration_in_class_member_declaration718);
            	        	        property_declaration65=property_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleclass_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, property_declaration65.tree);

            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // CSharp.g:186:7: ( member_name '.' 'this' )=> type_name '.' indexer_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_type_name_in_class_member_declaration740);
            	        	        type_name66=type_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleclass_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_name66.tree);

            	        	        char_literal67 =  this->matchToken(DOT, &FOLLOW_DOT_in_class_member_declaration742);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleclass_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        char_literal67_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal67));
            	        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal67_tree);
            	        	        }

            	        	        this->followPush(FOLLOW_indexer_declaration_in_class_member_declaration744);
            	        	        indexer_declaration68=indexer_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleclass_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, indexer_declaration68.tree);

            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // CSharp.g:187:10: indexer_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_indexer_declaration_in_class_member_declaration755);
            	        	        indexer_declaration69=indexer_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleclass_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, indexer_declaration69.tree);

            	        	    }
            	        	    break;
            	        	case 5:
            	        	    // CSharp.g:188:7: field_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_field_declaration_in_class_member_declaration764);
            	        	        field_declaration70=field_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleclass_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, field_declaration70.tree);

            	        	    }
            	        	    break;
            	        	case 6:
            	        	    // CSharp.g:189:7: operator_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_operator_declaration_in_class_member_declaration778);
            	        	        operator_declaration71=operator_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleclass_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, operator_declaration71.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 7:
            	    // CSharp.g:193:5: class_declaration
            	    {
            	        this->followPush(FOLLOW_class_declaration_in_class_member_declaration793);
            	        class_declaration72=class_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, class_declaration72.tree);

            	    }
            	    break;
            	case 8:
            	    // CSharp.g:194:5: struct_declaration
            	    {
            	        this->followPush(FOLLOW_struct_declaration_in_class_member_declaration801);
            	        struct_declaration73=struct_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, struct_declaration73.tree);

            	    }
            	    break;
            	case 9:
            	    // CSharp.g:195:5: enum_declaration
            	    {
            	        this->followPush(FOLLOW_enum_declaration_in_class_member_declaration808);
            	        enum_declaration74=enum_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, enum_declaration74.tree);

            	    }
            	    break;
            	case 10:
            	    // CSharp.g:196:5: delegate_declaration
            	    {
            	        this->followPush(FOLLOW_delegate_declaration_in_class_member_declaration816);
            	        delegate_declaration75=delegate_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, delegate_declaration75.tree);

            	    }
            	    break;
            	case 11:
            	    // CSharp.g:197:5: conversion_operator_declaration
            	    {
            	        this->followPush(FOLLOW_conversion_operator_declaration_in_class_member_declaration823);
            	        conversion_operator_declaration76=conversion_operator_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, conversion_operator_declaration76.tree);

            	    }
            	    break;
            	case 12:
            	    // CSharp.g:198:5: constructor_declaration
            	    {
            	        this->followPush(FOLLOW_constructor_declaration_in_class_member_declaration829);
            	        constructor_declaration77=constructor_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constructor_declaration77.tree);

            	    }
            	    break;
            	case 13:
            	    // CSharp.g:199:5: destructor_declaration
            	    {
            	        this->followPush(FOLLOW_destructor_declaration_in_class_member_declaration836);
            	        destructor_declaration78=destructor_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, destructor_declaration78.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleclass_member_declarationEx; /* Prevent compiler warnings */
    ruleclass_member_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(18, class_member_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end class_member_declaration */

/**
 * $ANTLR start primary_expression
 * CSharp.g:203:1: primary_expression : ( ( 'this' brackets )=> 'this' brackets ( primary_expression_part )* | ( 'base' brackets )=> 'this' brackets ( primary_expression_part )* | primary_expression_start ( primary_expression_part )* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression );
 */
CSharpParser_primary_expression_return
CSharpParser::primary_expression()
{
    CSharpParser_primary_expression_return retval(this);

    ANTLR_MARKER primary_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal79;
    const CommonTokenType*    string_literal82;
    const CommonTokenType*    string_literal87;
    CSharpParser_brackets_return brackets80;
    typedef	CSharpParser_brackets_return RETURN_TYPE_brackets80;

    CSharpParser_primary_expression_part_return primary_expression_part81;
    typedef	CSharpParser_primary_expression_part_return RETURN_TYPE_primary_expression_part81;

    CSharpParser_brackets_return brackets83;
    typedef	CSharpParser_brackets_return RETURN_TYPE_brackets83;

    CSharpParser_primary_expression_part_return primary_expression_part84;
    typedef	CSharpParser_primary_expression_part_return RETURN_TYPE_primary_expression_part84;

    CSharpParser_primary_expression_start_return primary_expression_start85;
    typedef	CSharpParser_primary_expression_start_return RETURN_TYPE_primary_expression_start85;

    CSharpParser_primary_expression_part_return primary_expression_part86;
    typedef	CSharpParser_primary_expression_part_return RETURN_TYPE_primary_expression_part86;

    CSharpParser_object_creation_expression_return object_creation_expression88;
    typedef	CSharpParser_object_creation_expression_return RETURN_TYPE_object_creation_expression88;

    CSharpParser_primary_expression_part_return primary_expression_part89;
    typedef	CSharpParser_primary_expression_part_return RETURN_TYPE_primary_expression_part89;

    CSharpParser_delegate_creation_expression_return delegate_creation_expression90;
    typedef	CSharpParser_delegate_creation_expression_return RETURN_TYPE_delegate_creation_expression90;

    CSharpParser_object_creation_expression_return object_creation_expression91;
    typedef	CSharpParser_object_creation_expression_return RETURN_TYPE_object_creation_expression91;

    CSharpParser_anonymous_object_creation_expression_return anonymous_object_creation_expression92;
    typedef	CSharpParser_anonymous_object_creation_expression_return RETURN_TYPE_anonymous_object_creation_expression92;

    CSharpParser_sizeof_expression_return sizeof_expression93;
    typedef	CSharpParser_sizeof_expression_return RETURN_TYPE_sizeof_expression93;

    CSharpParser_checked_expression_return checked_expression94;
    typedef	CSharpParser_checked_expression_return RETURN_TYPE_checked_expression94;

    CSharpParser_unchecked_expression_return unchecked_expression95;
    typedef	CSharpParser_unchecked_expression_return RETURN_TYPE_unchecked_expression95;

    CSharpParser_default_value_expression_return default_value_expression96;
    typedef	CSharpParser_default_value_expression_return RETURN_TYPE_default_value_expression96;

    CSharpParser_anonymous_method_expression_return anonymous_method_expression97;
    typedef	CSharpParser_anonymous_method_expression_return RETURN_TYPE_anonymous_method_expression97;

    ImplTraits::TreeType* string_literal79_tree;
    ImplTraits::TreeType* string_literal82_tree;
    ImplTraits::TreeType* string_literal87_tree;

    /* Initialize rule variables
     */
    primary_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(19)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal79       = NULL;
    string_literal82       = NULL;
    string_literal87       = NULL;
    brackets80.tree = NULL;

    primary_expression_part81.tree = NULL;

    brackets83.tree = NULL;

    primary_expression_part84.tree = NULL;

    primary_expression_start85.tree = NULL;

    primary_expression_part86.tree = NULL;

    object_creation_expression88.tree = NULL;

    primary_expression_part89.tree = NULL;

    delegate_creation_expression90.tree = NULL;

    object_creation_expression91.tree = NULL;

    anonymous_object_creation_expression92.tree = NULL;

    sizeof_expression93.tree = NULL;

    checked_expression94.tree = NULL;

    unchecked_expression95.tree = NULL;

    default_value_expression96.tree = NULL;

    anonymous_method_expression97.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal79_tree   = NULL;
    string_literal82_tree   = NULL;
    string_literal87_tree   = NULL;


    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:204:2: ( ( 'this' brackets )=> 'this' brackets ( primary_expression_part )* | ( 'base' brackets )=> 'this' brackets ( primary_expression_part )* | primary_expression_start ( primary_expression_part )* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression )

            ANTLR_UINT32 alt27;

            alt27=9;

            switch ( this->LA(1) )
            {
            case 182:
            	{
            		{
            		    int LA27_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred5_CSharp>() )))
            		    {
            		        alt27=1;
            		    }
            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred6_CSharp>() )))
            		    {
            		        alt27=2;
            		    }
            		    else if ( (true))
            		    {
            		        alt27=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 27 );
            		        ex->set_state( 1 );


            		        goto ruleprimary_expressionEx;

            		    }
            		}
            	}
                break;
            case Character_literal:
            case FALSE:
            case Hex_number:
            case IDENTIFIER:
            case LT_NULL:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            case 71:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 109:
            case 111:
            case 116:
            case 119:
            case 121:
            case 122:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 153:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 179:
            case 185:
            case 186:
            case 187:
            case 188:
            case 191:
            case 192:
            case 196:
            case 198:
            	{
            		alt27=3;
            	}
                break;
            case 152:
            	{
            		alt27=4;
            	}
                break;
            case 176:
            	{
            		alt27=5;
            	}
                break;
            case 112:
            	{
            		alt27=6;
            	}
                break;
            case 189:
            	{
            		alt27=7;
            	}
                break;
            case 117:
            	{
            		alt27=8;
            	}
                break;
            case 118:
            	{
            		alt27=9;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 27 );
                ex->set_state( 0 );


                goto ruleprimary_expressionEx;

            }

            switch (alt27)
            {
        	case 1:
        	    // CSharp.g:204:4: ( 'this' brackets )=> 'this' brackets ( primary_expression_part )*
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal79 =  this->matchToken(182, &FOLLOW_182_in_primary_expression860);
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal79_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal79));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal79_tree);
        	        }

        	        this->followPush(FOLLOW_brackets_in_primary_expression864);
        	        brackets80=brackets();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, brackets80.tree);

        	        // CSharp.g:204:45: ( primary_expression_part )*

        	        for (;;)
        	        {
        	            int alt22=2;
        	            switch ( this->LA(1) )
        	            {
        	            case DOT:
        	            case PTR:
        	            case 71:
        	            case 94:
        	            	{
        	            		alt22=1;
        	            	}
        	                break;

        	            }

        	            switch (alt22)
        	            {
        	        	case 1:
        	        	    // CSharp.g:204:45: primary_expression_part
        	        	    {
        	        	        this->followPush(FOLLOW_primary_expression_part_in_primary_expression868);
        	        	        primary_expression_part81=primary_expression_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleprimary_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, primary_expression_part81.tree);

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop22;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop22: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 2:
        	    // CSharp.g:205:4: ( 'base' brackets )=> 'this' brackets ( primary_expression_part )*
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal82 =  this->matchToken(182, &FOLLOW_182_in_primary_expression882);
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal82_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal82));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal82_tree);
        	        }

        	        this->followPush(FOLLOW_brackets_in_primary_expression886);
        	        brackets83=brackets();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, brackets83.tree);

        	        // CSharp.g:205:45: ( primary_expression_part )*

        	        for (;;)
        	        {
        	            int alt23=2;
        	            switch ( this->LA(1) )
        	            {
        	            case DOT:
        	            case PTR:
        	            case 71:
        	            case 94:
        	            	{
        	            		alt23=1;
        	            	}
        	                break;

        	            }

        	            switch (alt23)
        	            {
        	        	case 1:
        	        	    // CSharp.g:205:45: primary_expression_part
        	        	    {
        	        	        this->followPush(FOLLOW_primary_expression_part_in_primary_expression890);
        	        	        primary_expression_part84=primary_expression_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleprimary_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, primary_expression_part84.tree);

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop23;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop23: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 3:
        	    // CSharp.g:206:4: primary_expression_start ( primary_expression_part )*
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_primary_expression_start_in_primary_expression896);
        	        primary_expression_start85=primary_expression_start();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, primary_expression_start85.tree);

        	        // CSharp.g:206:29: ( primary_expression_part )*

        	        for (;;)
        	        {
        	            int alt24=2;
        	            switch ( this->LA(1) )
        	            {
        	            case DOT:
        	            case PTR:
        	            case 71:
        	            case 94:
        	            	{
        	            		alt24=1;
        	            	}
        	                break;

        	            }

        	            switch (alt24)
        	            {
        	        	case 1:
        	        	    // CSharp.g:206:29: primary_expression_part
        	        	    {
        	        	        this->followPush(FOLLOW_primary_expression_part_in_primary_expression898);
        	        	        primary_expression_part86=primary_expression_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleprimary_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, primary_expression_part86.tree);

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop24;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop24: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 4:
        	    // CSharp.g:207:4: 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression )
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal87 =  this->matchToken(152, &FOLLOW_152_in_primary_expression904);
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal87_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal87));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal87_tree);
        	        }

        	        // CSharp.g:208:4: ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression )
        	        {
        	            int alt26=4;
        	            switch ( this->LA(1) )
        	            {
        	            case 106:
        	            case 109:
        	            case 111:
        	            case 116:
        	            case 121:
        	            case 131:
        	            case 140:
        	            case 148:
        	            case 153:
        	            case 171:
        	            case 175:
        	            case 179:
        	            case 187:
        	            case 188:
        	            case 191:
        	            	{
        	            		{
        	            		    int LA26_1 = this->LA(2);
        	            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred7_CSharp>() )))
        	            		    {
        	            		        alt26=1;
        	            		    }
        	            		    else if ( (true))
        	            		    {
        	            		        alt26=3;
        	            		    }
        	            		    else
        	            		    {
        	            		        if (this->get_backtracking()>0)
        	            		        {
        	            		            this->set_failedflag( true );
        	            		            return retval;
        	            		        }


        	            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            		        ex->set_decisionNum( 26 );
        	            		        ex->set_state( 1 );


        	            		        goto ruleprimary_expressionEx;

        	            		    }
        	            		}
        	            	}
        	                break;
        	            case IDENTIFIER:
        	            case 98:
        	            case 100:
        	            case 101:
        	            case 103:
        	            case 104:
        	            case 108:
        	            case 119:
        	            case 122:
        	            case 124:
        	            case 128:
        	            case 134:
        	            case 137:
        	            case 143:
        	            case 145:
        	            case 146:
        	            case 149:
        	            case 150:
        	            case 154:
        	            case 156:
        	            case 159:
        	            case 162:
        	            case 164:
        	            case 169:
        	            case 173:
        	            case 174:
        	            case 185:
        	            case 192:
        	            case 196:
        	            case 198:
        	            	{
        	            		{
        	            		    int LA26_2 = this->LA(2);
        	            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred7_CSharp>() )))
        	            		    {
        	            		        alt26=1;
        	            		    }
        	            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred8_CSharp>() )))
        	            		    {
        	            		        alt26=2;
        	            		    }
        	            		    else if ( (true))
        	            		    {
        	            		        alt26=3;
        	            		    }
        	            		    else
        	            		    {
        	            		        if (this->get_backtracking()>0)
        	            		        {
        	            		            this->set_failedflag( true );
        	            		            return retval;
        	            		        }


        	            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            		        ex->set_decisionNum( 26 );
        	            		        ex->set_state( 2 );


        	            		        goto ruleprimary_expressionEx;

        	            		    }
        	            		}
        	            	}
        	                break;
        	            case 194:
        	            	{
        	            		{
        	            		    int LA26_3 = this->LA(2);
        	            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred7_CSharp>() )))
        	            		    {
        	            		        alt26=1;
        	            		    }
        	            		    else if ( (true))
        	            		    {
        	            		        alt26=3;
        	            		    }
        	            		    else
        	            		    {
        	            		        if (this->get_backtracking()>0)
        	            		        {
        	            		            this->set_failedflag( true );
        	            		            return retval;
        	            		        }


        	            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            		        ex->set_decisionNum( 26 );
        	            		        ex->set_state( 3 );


        	            		        goto ruleprimary_expressionEx;

        	            		    }
        	            		}
        	            	}
        	                break;
        	            case 199:
        	            	{
        	            		alt26=4;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 26 );
        	                ex->set_state( 0 );


        	                goto ruleprimary_expressionEx;

        	            }

        	            switch (alt26)
        	            {
        	        	case 1:
        	        	    // CSharp.g:209:5: ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+
        	        	    {
        	        	        this->followPush(FOLLOW_object_creation_expression_in_primary_expression931);
        	        	        object_creation_expression88=object_creation_expression();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleprimary_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, object_creation_expression88.tree);

        	        	        // CSharp.g:209:83: ( primary_expression_part )+
        	        	        {
        	        	            int cnt25=0;

        	        	            for (;;)
        	        	            {
        	        	                int alt25=2;
        	        	        	switch ( this->LA(1) )
        	        	        	{
        	        	        	case DOT:
        	        	        	case PTR:
        	        	        	case 71:
        	        	        	case 94:
        	        	        		{
        	        	        			alt25=1;
        	        	        		}
        	        	        	    break;

        	        	        	}

        	        	        	switch (alt25)
        	        	        	{
        	        	        	    case 1:
        	        	        	        // CSharp.g:209:83: primary_expression_part
        	        	        	        {
        	        	        	            this->followPush(FOLLOW_primary_expression_part_in_primary_expression935);
        	        	        	            primary_expression_part89=primary_expression_part();

        	        	        	            this->followPop();
        	        	        	            if  (this->hasException())
        	        	        	            {
        	        	        	                goto ruleprimary_expressionEx;
        	        	        	            }
        	        	        	            if (this->hasFailed())
        	        	        	            {
        	        	        	                return retval;
        	        	        	            }

        	        	        	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, primary_expression_part89.tree);

        	        	        	        }
        	        	        	        break;

        	        	        	    default:

        	        	        		if ( cnt25 >= 1 )
        	        	        		{
        	        	        		    goto loop25;
        	        	        		}
        	        	        		if (this->get_backtracking()>0)
        	        	        		{
        	        	        		    this->set_failedflag( true );
        	        	        		    return retval;
        	        	        		}

        	        	        		/* mismatchedSetEx()
        	        	        		 */
        	        	        		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        	        	        		goto ruleprimary_expressionEx;
        	        	        	}
        	        	        	cnt25++;
        	        	            }
        	        	            loop25: ;	/* Jump to here if this rule does not match */
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // CSharp.g:212:6: ( delegate_creation_expression )=> delegate_creation_expression
        	        	    {
        	        	        this->followPush(FOLLOW_delegate_creation_expression_in_primary_expression960);
        	        	        delegate_creation_expression90=delegate_creation_expression();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleprimary_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, delegate_creation_expression90.tree);

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // CSharp.g:213:6: object_creation_expression
        	        	    {
        	        	        this->followPush(FOLLOW_object_creation_expression_in_primary_expression967);
        	        	        object_creation_expression91=object_creation_expression();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleprimary_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, object_creation_expression91.tree);

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // CSharp.g:214:6: anonymous_object_creation_expression
        	        	    {
        	        	        this->followPush(FOLLOW_anonymous_object_creation_expression_in_primary_expression974);
        	        	        anonymous_object_creation_expression92=anonymous_object_creation_expression();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleprimary_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, anonymous_object_creation_expression92.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 5:
        	    // CSharp.g:216:4: sizeof_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_sizeof_expression_in_primary_expression991);
        	        sizeof_expression93=sizeof_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, sizeof_expression93.tree);

        	    }
        	    break;
        	case 6:
        	    // CSharp.g:217:4: checked_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_checked_expression_in_primary_expression1002);
        	        checked_expression94=checked_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, checked_expression94.tree);

        	    }
        	    break;
        	case 7:
        	    // CSharp.g:218:4: unchecked_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_unchecked_expression_in_primary_expression1021);
        	        unchecked_expression95=unchecked_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unchecked_expression95.tree);

        	    }
        	    break;
        	case 8:
        	    // CSharp.g:219:4: default_value_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_default_value_expression_in_primary_expression1038);
        	        default_value_expression96=default_value_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, default_value_expression96.tree);

        	    }
        	    break;
        	case 9:
        	    // CSharp.g:220:4: anonymous_method_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_anonymous_method_expression_in_primary_expression1051);
        	        anonymous_method_expression97=anonymous_method_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, anonymous_method_expression97.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleprimary_expressionEx; /* Prevent compiler warnings */
    ruleprimary_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(19, primary_expression_StartIndex); }

    return retval;
}
/* $ANTLR end primary_expression */

/**
 * $ANTLR start primary_expression_start
 * CSharp.g:223:1: primary_expression_start : ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | 'this' | 'base' | paren_expression | typeof_expression | literal );
 */
CSharpParser_primary_expression_start_return
CSharpParser::primary_expression_start()
{
    CSharpParser_primary_expression_start_return retval(this);

    ANTLR_MARKER primary_expression_start_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal102;
    const CommonTokenType*    string_literal104;
    const CommonTokenType*    string_literal105;
    CSharpParser_predefined_type_return predefined_type98;
    typedef	CSharpParser_predefined_type_return RETURN_TYPE_predefined_type98;

    CSharpParser_identifier_return identifier99;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier99;

    CSharpParser_generic_argument_list_return generic_argument_list100;
    typedef	CSharpParser_generic_argument_list_return RETURN_TYPE_generic_argument_list100;

    CSharpParser_identifier_return identifier101;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier101;

    CSharpParser_identifier_return identifier103;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier103;

    CSharpParser_paren_expression_return paren_expression106;
    typedef	CSharpParser_paren_expression_return RETURN_TYPE_paren_expression106;

    CSharpParser_typeof_expression_return typeof_expression107;
    typedef	CSharpParser_typeof_expression_return RETURN_TYPE_typeof_expression107;

    CSharpParser_literal_return literal108;
    typedef	CSharpParser_literal_return RETURN_TYPE_literal108;

    ImplTraits::TreeType* string_literal102_tree;
    ImplTraits::TreeType* string_literal104_tree;
    ImplTraits::TreeType* string_literal105_tree;

    /* Initialize rule variables
     */
    primary_expression_start_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(20)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal102       = NULL;
    string_literal104       = NULL;
    string_literal105       = NULL;
    predefined_type98.tree = NULL;

    identifier99.tree = NULL;

    generic_argument_list100.tree = NULL;

    identifier101.tree = NULL;

    identifier103.tree = NULL;

    paren_expression106.tree = NULL;

    typeof_expression107.tree = NULL;

    literal108.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal102_tree   = NULL;
    string_literal104_tree   = NULL;
    string_literal105_tree   = NULL;


    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:224:2: ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | 'this' | 'base' | paren_expression | typeof_expression | literal )

            ANTLR_UINT32 alt29;

            alt29=8;

            switch ( this->LA(1) )
            {
            case 106:
            case 109:
            case 111:
            case 116:
            case 121:
            case 131:
            case 140:
            case 148:
            case 153:
            case 171:
            case 175:
            case 179:
            case 187:
            case 188:
            case 191:
            	{
            		alt29=1;
            	}
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 134:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
            	{
            		{
            		    int LA29_2 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred9_CSharp>() )))
            		    {
            		        alt29=2;
            		    }
            		    else if ( (true))
            		    {
            		        alt29=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 29 );
            		        ex->set_state( 2 );


            		        goto ruleprimary_expression_startEx;

            		    }
            		}
            	}
                break;
            case 182:
            	{
            		alt29=4;
            	}
                break;
            case 105:
            	{
            		alt29=5;
            	}
                break;
            case 71:
            	{
            		alt29=6;
            	}
                break;
            case 186:
            	{
            		alt29=7;
            	}
                break;
            case Character_literal:
            case FALSE:
            case Hex_number:
            case LT_NULL:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            	{
            		alt29=8;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 29 );
                ex->set_state( 0 );


                goto ruleprimary_expression_startEx;

            }

            switch (alt29)
            {
        	case 1:
        	    // CSharp.g:224:4: predefined_type
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_predefined_type_in_primary_expression_start1065);
        	        predefined_type98=predefined_type();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expression_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, predefined_type98.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:225:4: ( identifier '<' )=> identifier generic_argument_list
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_identifier_in_primary_expression_start1093);
        	        identifier99=identifier();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expression_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier99.tree);

        	        this->followPush(FOLLOW_generic_argument_list_in_primary_expression_start1097);
        	        generic_argument_list100=generic_argument_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expression_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, generic_argument_list100.tree);

        	    }
        	    break;
        	case 3:
        	    // CSharp.g:226:4: identifier ( '::' identifier )?
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_identifier_in_primary_expression_start1102);
        	        identifier101=identifier();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expression_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier101.tree);

        	        // CSharp.g:226:15: ( '::' identifier )?
        	        {
        	            int alt28=2;
        	            switch ( this->LA(1) )
        	            {
        	                case 83:
        	                	{
        	                		alt28=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt28)
        	            {
        	        	case 1:
        	        	    // CSharp.g:226:16: '::' identifier
        	        	    {
        	        	        string_literal102 =  this->matchToken(83, &FOLLOW_83_in_primary_expression_start1105);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleprimary_expression_startEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        string_literal102_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal102));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal102_tree);
        	        	        }

        	        	        this->followPush(FOLLOW_identifier_in_primary_expression_start1109);
        	        	        identifier103=identifier();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleprimary_expression_startEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier103.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 4:
        	    // CSharp.g:227:4: 'this'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal104 =  this->matchToken(182, &FOLLOW_182_in_primary_expression_start1116);
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expression_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal104_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal104));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal104_tree);
        	        }

        	    }
        	    break;
        	case 5:
        	    // CSharp.g:228:4: 'base'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal105 =  this->matchToken(105, &FOLLOW_105_in_primary_expression_start1122);
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expression_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal105_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal105));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal105_tree);
        	        }

        	    }
        	    break;
        	case 6:
        	    // CSharp.g:229:4: paren_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_paren_expression_in_primary_expression_start1127);
        	        paren_expression106=paren_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expression_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, paren_expression106.tree);

        	    }
        	    break;
        	case 7:
        	    // CSharp.g:230:4: typeof_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_typeof_expression_in_primary_expression_start1132);
        	        typeof_expression107=typeof_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expression_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, typeof_expression107.tree);

        	    }
        	    break;
        	case 8:
        	    // CSharp.g:231:4: literal
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_literal_in_primary_expression_start1150);
        	        literal108=literal();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expression_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, literal108.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleprimary_expression_startEx; /* Prevent compiler warnings */
    ruleprimary_expression_startEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(20, primary_expression_start_StartIndex); }

    return retval;
}
/* $ANTLR end primary_expression_start */

/**
 * $ANTLR start primary_expression_part
 * CSharp.g:234:1: primary_expression_part : ( access_identifier | brackets_or_arguments );
 */
CSharpParser_primary_expression_part_return
CSharpParser::primary_expression_part()
{
    CSharpParser_primary_expression_part_return retval(this);

    ANTLR_MARKER primary_expression_part_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_access_identifier_return access_identifier109;
    typedef	CSharpParser_access_identifier_return RETURN_TYPE_access_identifier109;

    CSharpParser_brackets_or_arguments_return brackets_or_arguments110;
    typedef	CSharpParser_brackets_or_arguments_return RETURN_TYPE_brackets_or_arguments110;


    /* Initialize rule variables
     */
    primary_expression_part_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(21)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    access_identifier109.tree = NULL;

    brackets_or_arguments110.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:235:2: ( access_identifier | brackets_or_arguments )

            ANTLR_UINT32 alt30;

            alt30=2;

            switch ( this->LA(1) )
            {
            case DOT:
            case PTR:
            	{
            		alt30=1;
            	}
                break;
            case 71:
            case 94:
            	{
            		alt30=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 30 );
                ex->set_state( 0 );


                goto ruleprimary_expression_partEx;

            }

            switch (alt30)
            {
        	case 1:
        	    // CSharp.g:235:4: access_identifier
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_access_identifier_in_primary_expression_part1161);
        	        access_identifier109=access_identifier();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expression_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, access_identifier109.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:236:4: brackets_or_arguments
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_brackets_or_arguments_in_primary_expression_part1166);
        	        brackets_or_arguments110=brackets_or_arguments();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_expression_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, brackets_or_arguments110.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleprimary_expression_partEx; /* Prevent compiler warnings */
    ruleprimary_expression_partEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(21, primary_expression_part_StartIndex); }

    return retval;
}
/* $ANTLR end primary_expression_part */

/**
 * $ANTLR start access_identifier
 * CSharp.g:239:1: access_identifier : access_operator type_or_generic ;
 */
CSharpParser_access_identifier_return
CSharpParser::access_identifier()
{
    CSharpParser_access_identifier_return retval(this);

    ANTLR_MARKER access_identifier_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_access_operator_return access_operator111;
    typedef	CSharpParser_access_operator_return RETURN_TYPE_access_operator111;

    CSharpParser_type_or_generic_return type_or_generic112;
    typedef	CSharpParser_type_or_generic_return RETURN_TYPE_type_or_generic112;


    /* Initialize rule variables
     */
    access_identifier_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(22)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    access_operator111.tree = NULL;

    type_or_generic112.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:240:2: ( access_operator type_or_generic )
        // CSharp.g:240:4: access_operator type_or_generic
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_access_operator_in_access_identifier1177);
            access_operator111=access_operator();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleaccess_identifierEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, access_operator111.tree);

            this->followPush(FOLLOW_type_or_generic_in_access_identifier1181);
            type_or_generic112=type_or_generic();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleaccess_identifierEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_or_generic112.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleaccess_identifierEx; /* Prevent compiler warnings */
    ruleaccess_identifierEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(22, access_identifier_StartIndex); }

    return retval;
}
/* $ANTLR end access_identifier */

/**
 * $ANTLR start access_operator
 * CSharp.g:243:1: access_operator : ( '.' | '->' );
 */
CSharpParser_access_operator_return
CSharpParser::access_operator()
{
    CSharpParser_access_operator_return retval(this);

    ANTLR_MARKER access_operator_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set113;

    ImplTraits::TreeType* set113_tree;

    /* Initialize rule variables
     */
    access_operator_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(23)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set113       = NULL;
    retval.call_start_placeholder(); 


    set113_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:244:2: ( '.' | '->' )
        // CSharp.g:
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            set113=(const CommonTokenType*) this->LT(1);

            if ( this->LA(1) == DOT || this->LA(1) == PTR )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set113))
                );
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruleaccess_operatorEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleaccess_operatorEx; /* Prevent compiler warnings */
    ruleaccess_operatorEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(23, access_operator_StartIndex); }

    return retval;
}
/* $ANTLR end access_operator */

/**
 * $ANTLR start brackets_or_arguments
 * CSharp.g:248:1: brackets_or_arguments : ( brackets | arguments );
 */
CSharpParser_brackets_or_arguments_return
CSharpParser::brackets_or_arguments()
{
    CSharpParser_brackets_or_arguments_return retval(this);

    ANTLR_MARKER brackets_or_arguments_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_brackets_return brackets114;
    typedef	CSharpParser_brackets_return RETURN_TYPE_brackets114;

    CSharpParser_arguments_return arguments115;
    typedef	CSharpParser_arguments_return RETURN_TYPE_arguments115;


    /* Initialize rule variables
     */
    brackets_or_arguments_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(24)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    brackets114.tree = NULL;

    arguments115.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:249:2: ( brackets | arguments )

            ANTLR_UINT32 alt31;

            alt31=2;

            switch ( this->LA(1) )
            {
            case 94:
            	{
            		alt31=1;
            	}
                break;
            case 71:
            	{
            		alt31=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 31 );
                ex->set_state( 0 );


                goto rulebrackets_or_argumentsEx;

            }

            switch (alt31)
            {
        	case 1:
        	    // CSharp.g:249:4: brackets
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_brackets_in_brackets_or_arguments1209);
        	        brackets114=brackets();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulebrackets_or_argumentsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, brackets114.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:250:4: arguments
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_arguments_in_brackets_or_arguments1214);
        	        arguments115=arguments();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulebrackets_or_argumentsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, arguments115.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulebrackets_or_argumentsEx; /* Prevent compiler warnings */
    rulebrackets_or_argumentsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(24, brackets_or_arguments_StartIndex); }

    return retval;
}
/* $ANTLR end brackets_or_arguments */

/**
 * $ANTLR start brackets
 * CSharp.g:253:1: brackets : '[' ( expression_list )? ']' ;
 */
CSharpParser_brackets_return
CSharpParser::brackets()
{
    CSharpParser_brackets_return retval(this);

    ANTLR_MARKER brackets_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal116;
    const CommonTokenType*    char_literal118;
    CSharpParser_expression_list_return expression_list117;
    typedef	CSharpParser_expression_list_return RETURN_TYPE_expression_list117;

    ImplTraits::TreeType* char_literal116_tree;
    ImplTraits::TreeType* char_literal118_tree;

    /* Initialize rule variables
     */
    brackets_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(25)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal116       = NULL;
    char_literal118       = NULL;
    expression_list117.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal116_tree   = NULL;
    char_literal118_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:254:2: ( '[' ( expression_list )? ']' )
        // CSharp.g:254:4: '[' ( expression_list )? ']'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal116 =  this->matchToken(94, &FOLLOW_94_in_brackets1225);
            if  (this->hasException())
            {
                goto rulebracketsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal116_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal116));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal116_tree);
            }

            // CSharp.g:254:10: ( expression_list )?
            {
                int alt32=2;
                switch ( this->LA(1) )
                {
                    case Character_literal:
                    case FALSE:
                    case Hex_number:
                    case IDENTIFIER:
                    case LT_NULL:
                    case MINUS:
                    case NUMBER:
                    case Real_literal:
                    case STRINGLITERAL:
                    case TRUE:
                    case Verbatim_string_literal:
                    case 64:
                    case 69:
                    case 71:
                    case 72:
                    case 74:
                    case 75:
                    case 78:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 108:
                    case 109:
                    case 111:
                    case 112:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 121:
                    case 122:
                    case 124:
                    case 128:
                    case 131:
                    case 134:
                    case 137:
                    case 140:
                    case 143:
                    case 145:
                    case 146:
                    case 148:
                    case 149:
                    case 150:
                    case 152:
                    case 153:
                    case 154:
                    case 156:
                    case 159:
                    case 162:
                    case 164:
                    case 169:
                    case 171:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 179:
                    case 182:
                    case 185:
                    case 186:
                    case 187:
                    case 188:
                    case 189:
                    case 191:
                    case 192:
                    case 196:
                    case 198:
                    case 204:
                    	{
                    		alt32=1;
                    	}
                        break;
                }

                switch (alt32)
                {
            	case 1:
            	    // CSharp.g:254:10: expression_list
            	    {
            	        this->followPush(FOLLOW_expression_list_in_brackets1229);
            	        expression_list117=expression_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulebracketsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression_list117.tree);

            	    }
            	    break;

                }
            }

            char_literal118 =  this->matchToken(95, &FOLLOW_95_in_brackets1234);
            if  (this->hasException())
            {
                goto rulebracketsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal118_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal118));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal118_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulebracketsEx; /* Prevent compiler warnings */
    rulebracketsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(25, brackets_StartIndex); }

    return retval;
}
/* $ANTLR end brackets */

/**
 * $ANTLR start paren_expression
 * CSharp.g:257:1: paren_expression : '(' expression ')' ;
 */
CSharpParser_paren_expression_return
CSharpParser::paren_expression()
{
    CSharpParser_paren_expression_return retval(this);

    ANTLR_MARKER paren_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal119;
    const CommonTokenType*    char_literal121;
    CSharpParser_expression_return expression120;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression120;

    ImplTraits::TreeType* char_literal119_tree;
    ImplTraits::TreeType* char_literal121_tree;

    /* Initialize rule variables
     */
    paren_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(26)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal119       = NULL;
    char_literal121       = NULL;
    expression120.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal119_tree   = NULL;
    char_literal121_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:258:2: ( '(' expression ')' )
        // CSharp.g:258:4: '(' expression ')'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal119 =  this->matchToken(71, &FOLLOW_71_in_paren_expression1245);
            if  (this->hasException())
            {
                goto ruleparen_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal119_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal119));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal119_tree);
            }

            this->followPush(FOLLOW_expression_in_paren_expression1249);
            expression120=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleparen_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression120.tree);

            char_literal121 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_paren_expression1253);
            if  (this->hasException())
            {
                goto ruleparen_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal121_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal121));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal121_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleparen_expressionEx; /* Prevent compiler warnings */
    ruleparen_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(26, paren_expression_StartIndex); }

    return retval;
}
/* $ANTLR end paren_expression */

/**
 * $ANTLR start arguments
 * CSharp.g:261:1: arguments : '(' ( argument_list )? ')' ;
 */
CSharpParser_arguments_return
CSharpParser::arguments()
{
    CSharpParser_arguments_return retval(this);

    ANTLR_MARKER arguments_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal122;
    const CommonTokenType*    char_literal124;
    CSharpParser_argument_list_return argument_list123;
    typedef	CSharpParser_argument_list_return RETURN_TYPE_argument_list123;

    ImplTraits::TreeType* char_literal122_tree;
    ImplTraits::TreeType* char_literal124_tree;

    /* Initialize rule variables
     */
    arguments_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(27)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal122       = NULL;
    char_literal124       = NULL;
    argument_list123.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal122_tree   = NULL;
    char_literal124_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:262:2: ( '(' ( argument_list )? ')' )
        // CSharp.g:262:4: '(' ( argument_list )? ')'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal122 =  this->matchToken(71, &FOLLOW_71_in_arguments1264);
            if  (this->hasException())
            {
                goto ruleargumentsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal122_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal122));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal122_tree);
            }

            // CSharp.g:262:10: ( argument_list )?
            {
                int alt33=2;
                switch ( this->LA(1) )
                {
                    case Character_literal:
                    case FALSE:
                    case Hex_number:
                    case IDENTIFIER:
                    case LT_NULL:
                    case MINUS:
                    case NUMBER:
                    case Real_literal:
                    case STRINGLITERAL:
                    case TRUE:
                    case Verbatim_string_literal:
                    case 64:
                    case 69:
                    case 71:
                    case 72:
                    case 74:
                    case 75:
                    case 78:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 108:
                    case 109:
                    case 111:
                    case 112:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 121:
                    case 122:
                    case 124:
                    case 128:
                    case 131:
                    case 134:
                    case 137:
                    case 140:
                    case 143:
                    case 145:
                    case 146:
                    case 148:
                    case 149:
                    case 150:
                    case 152:
                    case 153:
                    case 154:
                    case 156:
                    case 157:
                    case 159:
                    case 162:
                    case 164:
                    case 168:
                    case 169:
                    case 171:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 179:
                    case 182:
                    case 185:
                    case 186:
                    case 187:
                    case 188:
                    case 189:
                    case 191:
                    case 192:
                    case 196:
                    case 198:
                    case 204:
                    	{
                    		alt33=1;
                    	}
                        break;
                }

                switch (alt33)
                {
            	case 1:
            	    // CSharp.g:262:10: argument_list
            	    {
            	        this->followPush(FOLLOW_argument_list_in_arguments1268);
            	        argument_list123=argument_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleargumentsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, argument_list123.tree);

            	    }
            	    break;

                }
            }

            char_literal124 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_arguments1273);
            if  (this->hasException())
            {
                goto ruleargumentsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal124_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal124));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal124_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleargumentsEx; /* Prevent compiler warnings */
    ruleargumentsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(27, arguments_StartIndex); }

    return retval;
}
/* $ANTLR end arguments */

/**
 * $ANTLR start argument_list
 * CSharp.g:265:1: argument_list : argument ( ',' argument )* -> ( argument )+ ;
 */
CSharpParser_argument_list_return
CSharpParser::argument_list()
{
    CSharpParser_argument_list_return retval(this);

    ANTLR_MARKER argument_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal126;
    CSharpParser_argument_return argument125;
    typedef	CSharpParser_argument_return RETURN_TYPE_argument125;

    CSharpParser_argument_return argument127;
    typedef	CSharpParser_argument_return RETURN_TYPE_argument127;

    ImplTraits::TreeType* char_literal126_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_77;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_argument;
    /* Initialize rule variables
     */
    argument_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(28)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal126       = NULL;
    argument125.tree = NULL;

    argument127.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal126_tree   = NULL;

    stream_77   = NULL;
    #define CREATE_stream_77  if (stream_77 == NULL) {stream_77 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 77"); } 
    stream_argument   = NULL;
    #define CREATE_stream_argument  if (stream_argument == NULL) {stream_argument = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule argument"); }

    retval.tree  = NULL;


 
    {
        // CSharp.g:266:2: ( argument ( ',' argument )* -> ( argument )+ )
        // CSharp.g:266:4: argument ( ',' argument )*
        {
            this->followPush(FOLLOW_argument_in_argument_list1284);
            argument125=argument();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleargument_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) { CREATE_stream_argument; stream_argument->add(stream_argument, argument125.tree, NULL); }

            // CSharp.g:266:13: ( ',' argument )*

            for (;;)
            {
                int alt34=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt34=1;
                	}
                    break;

                }

                switch (alt34)
                {
            	case 1:
            	    // CSharp.g:266:14: ',' argument
            	    {
            	        char_literal126 =  this->matchToken(77, &FOLLOW_77_in_argument_list1287);
            	        if  (this->hasException())
            	        {
            	            goto ruleargument_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) { CREATE_stream_77; stream_77->add(stream_77, char_literal126, NULL); }


            	        this->followPush(FOLLOW_argument_in_argument_list1289);
            	        argument127=argument();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleargument_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) { CREATE_stream_argument; stream_argument->add(stream_argument, argument127.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop34;	/* break out of the loop */
            	    break;
                }
            }
            loop34: ; /* Jump out to here if this rule does not match */


            /* AST REWRITE
             * elements          : argument
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( this->get_backtracking()==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 266:29: -> ( argument )+
            	{
            	    if ((stream_argument == NULL || !stream_argument->hasNext(stream_argument))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_argument->hasNext(stream_argument))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_argument == NULL ? NULL : stream_argument->nextTree(stream_argument));

            	    	}
            	    	stream_argument->reset(stream_argument);

            	    }
            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    // This is where rules clean up and exit
    //
    goto ruleargument_listEx; /* Prevent compiler warnings */
    ruleargument_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_77 != NULL) stream_77->free(stream_77);
        if (stream_argument != NULL) stream_argument->free(stream_argument);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(28, argument_list_StartIndex); }

    return retval;
}
/* $ANTLR end argument_list */

/**
 * $ANTLR start argument
 * CSharp.g:269:1: argument : ( argument_name argument_value | argument_value );
 */
CSharpParser_argument_return
CSharpParser::argument()
{
    CSharpParser_argument_return retval(this);

    ANTLR_MARKER argument_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_argument_name_return argument_name128;
    typedef	CSharpParser_argument_name_return RETURN_TYPE_argument_name128;

    CSharpParser_argument_value_return argument_value129;
    typedef	CSharpParser_argument_value_return RETURN_TYPE_argument_value129;

    CSharpParser_argument_value_return argument_value130;
    typedef	CSharpParser_argument_value_return RETURN_TYPE_argument_value130;


    /* Initialize rule variables
     */
    argument_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(29)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    argument_name128.tree = NULL;

    argument_value129.tree = NULL;

    argument_value130.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:270:2: ( argument_name argument_value | argument_value )

            ANTLR_UINT32 alt35;

            alt35=2;

            switch ( this->LA(1) )
            {
            case 134:
            	{
            		switch ( this->LA(2) )
            		{
            		case 82:
            			{
            				alt35=1;
            			}
            		    break;
            		case DOT:
            		case GT:
            		case IDENTIFIER:
            		case MINUS:
            		case PTR:
            		case RPAREN:
            		case 65:
            		case 66:
            		case 67:
            		case 68:
            		case 69:
            		case 70:
            		case 71:
            		case 72:
            		case 73:
            		case 74:
            		case 75:
            		case 76:
            		case 77:
            		case 78:
            		case 79:
            		case 80:
            		case 81:
            		case 83:
            		case 84:
            		case 85:
            		case 86:
            		case 87:
            		case 88:
            		case 89:
            		case 90:
            		case 91:
            		case 92:
            		case 93:
            		case 94:
            		case 96:
            		case 97:
            		case 98:
            		case 100:
            		case 101:
            		case 102:
            		case 103:
            		case 104:
            		case 106:
            		case 108:
            		case 109:
            		case 111:
            		case 116:
            		case 119:
            		case 121:
            		case 122:
            		case 124:
            		case 128:
            		case 131:
            		case 134:
            		case 137:
            		case 140:
            		case 143:
            		case 144:
            		case 145:
            		case 146:
            		case 148:
            		case 149:
            		case 150:
            		case 153:
            		case 154:
            		case 156:
            		case 159:
            		case 162:
            		case 164:
            		case 169:
            		case 171:
            		case 173:
            		case 174:
            		case 175:
            		case 179:
            		case 185:
            		case 187:
            		case 188:
            		case 191:
            		case 192:
            		case 194:
            		case 196:
            		case 198:
            		case 200:
            		case 201:
            		case 202:
            			{
            				alt35=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 35 );
            		    ex->set_state( 1 );


            		    goto ruleargumentEx;

            		}

            	}
                break;
            case Character_literal:
            case FALSE:
            case Hex_number:
            case LT_NULL:
            case MINUS:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            case 64:
            case 69:
            case 71:
            case 72:
            case 74:
            case 75:
            case 78:
            case 105:
            case 106:
            case 109:
            case 111:
            case 112:
            case 116:
            case 117:
            case 118:
            case 121:
            case 131:
            case 140:
            case 148:
            case 152:
            case 153:
            case 157:
            case 168:
            case 171:
            case 175:
            case 176:
            case 179:
            case 182:
            case 186:
            case 187:
            case 188:
            case 189:
            case 191:
            case 204:
            	{
            		alt35=2;
            	}
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
            	{
            		switch ( this->LA(2) )
            		{
            		case 82:
            			{
            				alt35=1;
            			}
            		    break;
            		case DOT:
            		case GT:
            		case MINUS:
            		case PTR:
            		case RPAREN:
            		case 65:
            		case 66:
            		case 67:
            		case 68:
            		case 69:
            		case 70:
            		case 71:
            		case 72:
            		case 73:
            		case 74:
            		case 75:
            		case 76:
            		case 77:
            		case 78:
            		case 79:
            		case 80:
            		case 81:
            		case 83:
            		case 84:
            		case 85:
            		case 86:
            		case 87:
            		case 88:
            		case 89:
            		case 90:
            		case 91:
            		case 92:
            		case 93:
            		case 94:
            		case 96:
            		case 97:
            		case 102:
            		case 144:
            		case 200:
            		case 201:
            		case 202:
            			{
            				alt35=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 35 );
            		    ex->set_state( 3 );


            		    goto ruleargumentEx;

            		}

            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 35 );
                ex->set_state( 0 );


                goto ruleargumentEx;

            }

            switch (alt35)
            {
        	case 1:
        	    // CSharp.g:270:4: argument_name argument_value
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_argument_name_in_argument1307);
        	        argument_name128=argument_name();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleargumentEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, argument_name128.tree);

        	        this->followPush(FOLLOW_argument_value_in_argument1309);
        	        argument_value129=argument_value();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleargumentEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, argument_value129.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:271:4: argument_value
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_argument_value_in_argument1314);
        	        argument_value130=argument_value();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleargumentEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, argument_value130.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleargumentEx; /* Prevent compiler warnings */
    ruleargumentEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(29, argument_StartIndex); }

    return retval;
}
/* $ANTLR end argument */

/**
 * $ANTLR start argument_name
 * CSharp.g:274:1: argument_name : identifier ':' ;
 */
CSharpParser_argument_name_return
CSharpParser::argument_name()
{
    CSharpParser_argument_name_return retval(this);

    ANTLR_MARKER argument_name_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal132;
    CSharpParser_identifier_return identifier131;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier131;

    ImplTraits::TreeType* char_literal132_tree;

    /* Initialize rule variables
     */
    argument_name_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(30)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal132       = NULL;
    identifier131.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal132_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:275:2: ( identifier ':' )
        // CSharp.g:275:4: identifier ':'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_identifier_in_argument_name1325);
            identifier131=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleargument_nameEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier131.tree);

            char_literal132 =  this->matchToken(82, &FOLLOW_82_in_argument_name1327);
            if  (this->hasException())
            {
                goto ruleargument_nameEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal132_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal132));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal132_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleargument_nameEx; /* Prevent compiler warnings */
    ruleargument_nameEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(30, argument_name_StartIndex); }

    return retval;
}
/* $ANTLR end argument_name */

/**
 * $ANTLR start argument_value
 * CSharp.g:278:1: argument_value : ( expression | ref_variable_reference | 'out' variable_reference );
 */
CSharpParser_argument_value_return
CSharpParser::argument_value()
{
    CSharpParser_argument_value_return retval(this);

    ANTLR_MARKER argument_value_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal135;
    CSharpParser_expression_return expression133;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression133;

    CSharpParser_ref_variable_reference_return ref_variable_reference134;
    typedef	CSharpParser_ref_variable_reference_return RETURN_TYPE_ref_variable_reference134;

    CSharpParser_variable_reference_return variable_reference136;
    typedef	CSharpParser_variable_reference_return RETURN_TYPE_variable_reference136;

    ImplTraits::TreeType* string_literal135_tree;

    /* Initialize rule variables
     */
    argument_value_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(31)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal135       = NULL;
    expression133.tree = NULL;

    ref_variable_reference134.tree = NULL;

    variable_reference136.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal135_tree   = NULL;


    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:279:2: ( expression | ref_variable_reference | 'out' variable_reference )

            ANTLR_UINT32 alt36;

            alt36=3;

            switch ( this->LA(1) )
            {
            case Character_literal:
            case FALSE:
            case Hex_number:
            case IDENTIFIER:
            case LT_NULL:
            case MINUS:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            case 64:
            case 69:
            case 71:
            case 72:
            case 74:
            case 75:
            case 78:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 109:
            case 111:
            case 112:
            case 116:
            case 117:
            case 118:
            case 119:
            case 121:
            case 122:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 152:
            case 153:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 176:
            case 179:
            case 182:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 191:
            case 192:
            case 196:
            case 198:
            case 204:
            	{
            		alt36=1;
            	}
                break;
            case 168:
            	{
            		alt36=2;
            	}
                break;
            case 157:
            	{
            		alt36=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 36 );
                ex->set_state( 0 );


                goto ruleargument_valueEx;

            }

            switch (alt36)
            {
        	case 1:
        	    // CSharp.g:279:4: expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_expression_in_argument_value1338);
        	        expression133=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleargument_valueEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression133.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:280:4: ref_variable_reference
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_ref_variable_reference_in_argument_value1343);
        	        ref_variable_reference134=ref_variable_reference();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleargument_valueEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, ref_variable_reference134.tree);

        	    }
        	    break;
        	case 3:
        	    // CSharp.g:281:4: 'out' variable_reference
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal135 =  this->matchToken(157, &FOLLOW_157_in_argument_value1349);
        	        if  (this->hasException())
        	        {
        	            goto ruleargument_valueEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal135_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal135));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal135_tree);
        	        }

        	        this->followPush(FOLLOW_variable_reference_in_argument_value1353);
        	        variable_reference136=variable_reference();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleargument_valueEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variable_reference136.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleargument_valueEx; /* Prevent compiler warnings */
    ruleargument_valueEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(31, argument_value_StartIndex); }

    return retval;
}
/* $ANTLR end argument_value */

/**
 * $ANTLR start ref_variable_reference
 * CSharp.g:284:1: ref_variable_reference : 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference ) ;
 */
CSharpParser_ref_variable_reference_return
CSharpParser::ref_variable_reference()
{
    CSharpParser_ref_variable_reference_return retval(this);

    ANTLR_MARKER ref_variable_reference_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal137;
    const CommonTokenType*    char_literal138;
    const CommonTokenType*    char_literal140;
    CSharpParser_type_return type139;
    typedef	CSharpParser_type_return RETURN_TYPE_type139;

    CSharpParser_ref_variable_reference_return ref_variable_reference141;
    typedef	CSharpParser_ref_variable_reference_return RETURN_TYPE_ref_variable_reference141;

    CSharpParser_variable_reference_return variable_reference142;
    typedef	CSharpParser_variable_reference_return RETURN_TYPE_variable_reference142;

    CSharpParser_variable_reference_return variable_reference143;
    typedef	CSharpParser_variable_reference_return RETURN_TYPE_variable_reference143;

    ImplTraits::TreeType* string_literal137_tree;
    ImplTraits::TreeType* char_literal138_tree;
    ImplTraits::TreeType* char_literal140_tree;

    /* Initialize rule variables
     */
    ref_variable_reference_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(32)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal137       = NULL;
    char_literal138       = NULL;
    char_literal140       = NULL;
    type139.tree = NULL;

    ref_variable_reference141.tree = NULL;

    variable_reference142.tree = NULL;

    variable_reference143.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal137_tree   = NULL;
    char_literal138_tree   = NULL;
    char_literal140_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:285:2: ( 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference ) )
        // CSharp.g:285:4: 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal137 =  this->matchToken(168, &FOLLOW_168_in_ref_variable_reference1364);
            if  (this->hasException())
            {
                goto ruleref_variable_referenceEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal137_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal137));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal137_tree);
            }

            // CSharp.g:286:3: ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )
            {
                int alt38=2;
                switch ( this->LA(1) )
                {
                case 71:
                	{
                		{
                		    int LA38_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred10_CSharp>() )))
                		    {
                		        alt38=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt38=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 38 );
                		        ex->set_state( 1 );


                		        goto ruleref_variable_referenceEx;

                		    }
                		}
                	}
                    break;
                case Character_literal:
                case FALSE:
                case Hex_number:
                case IDENTIFIER:
                case LT_NULL:
                case MINUS:
                case NUMBER:
                case Real_literal:
                case STRINGLITERAL:
                case TRUE:
                case Verbatim_string_literal:
                case 64:
                case 69:
                case 72:
                case 74:
                case 75:
                case 78:
                case 98:
                case 100:
                case 101:
                case 103:
                case 104:
                case 105:
                case 106:
                case 108:
                case 109:
                case 111:
                case 112:
                case 116:
                case 117:
                case 118:
                case 119:
                case 121:
                case 122:
                case 124:
                case 128:
                case 131:
                case 134:
                case 137:
                case 140:
                case 143:
                case 145:
                case 146:
                case 148:
                case 149:
                case 150:
                case 152:
                case 153:
                case 154:
                case 156:
                case 159:
                case 162:
                case 164:
                case 169:
                case 171:
                case 173:
                case 174:
                case 175:
                case 176:
                case 179:
                case 182:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 191:
                case 192:
                case 196:
                case 198:
                case 204:
                	{
                		alt38=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 38 );
                    ex->set_state( 0 );


                    goto ruleref_variable_referenceEx;

                }

                switch (alt38)
                {
            	case 1:
            	    // CSharp.g:287:4: ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference )
            	    {
            	        char_literal138 =  this->matchToken(71, &FOLLOW_71_in_ref_variable_reference1390);
            	        if  (this->hasException())
            	        {
            	            goto ruleref_variable_referenceEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal138_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal138));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal138_tree);
            	        }

            	        this->followPush(FOLLOW_type_in_ref_variable_reference1394);
            	        type139=type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleref_variable_referenceEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type139.tree);

            	        char_literal140 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_ref_variable_reference1398);
            	        if  (this->hasException())
            	        {
            	            goto ruleref_variable_referenceEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal140_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal140));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal140_tree);
            	        }

            	        // CSharp.g:287:47: ( ref_variable_reference | variable_reference )
            	        {
            	            int alt37=2;
            	            switch ( this->LA(1) )
            	            {
            	            case 168:
            	            	{
            	            		alt37=1;
            	            	}
            	                break;
            	            case Character_literal:
            	            case FALSE:
            	            case Hex_number:
            	            case IDENTIFIER:
            	            case LT_NULL:
            	            case MINUS:
            	            case NUMBER:
            	            case Real_literal:
            	            case STRINGLITERAL:
            	            case TRUE:
            	            case Verbatim_string_literal:
            	            case 64:
            	            case 69:
            	            case 71:
            	            case 72:
            	            case 74:
            	            case 75:
            	            case 78:
            	            case 98:
            	            case 100:
            	            case 101:
            	            case 103:
            	            case 104:
            	            case 105:
            	            case 106:
            	            case 108:
            	            case 109:
            	            case 111:
            	            case 112:
            	            case 116:
            	            case 117:
            	            case 118:
            	            case 119:
            	            case 121:
            	            case 122:
            	            case 124:
            	            case 128:
            	            case 131:
            	            case 134:
            	            case 137:
            	            case 140:
            	            case 143:
            	            case 145:
            	            case 146:
            	            case 148:
            	            case 149:
            	            case 150:
            	            case 152:
            	            case 153:
            	            case 154:
            	            case 156:
            	            case 159:
            	            case 162:
            	            case 164:
            	            case 169:
            	            case 171:
            	            case 173:
            	            case 174:
            	            case 175:
            	            case 176:
            	            case 179:
            	            case 182:
            	            case 185:
            	            case 186:
            	            case 187:
            	            case 188:
            	            case 189:
            	            case 191:
            	            case 192:
            	            case 196:
            	            case 198:
            	            case 204:
            	            	{
            	            		alt37=2;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 37 );
            	                ex->set_state( 0 );


            	                goto ruleref_variable_referenceEx;

            	            }

            	            switch (alt37)
            	            {
            	        	case 1:
            	        	    // CSharp.g:287:48: ref_variable_reference
            	        	    {
            	        	        this->followPush(FOLLOW_ref_variable_reference_in_ref_variable_reference1403);
            	        	        ref_variable_reference141=ref_variable_reference();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleref_variable_referenceEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, ref_variable_reference141.tree);

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CSharp.g:287:73: variable_reference
            	        	    {
            	        	        this->followPush(FOLLOW_variable_reference_in_ref_variable_reference1407);
            	        	        variable_reference142=variable_reference();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleref_variable_referenceEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variable_reference142.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // CSharp.g:289:5: variable_reference
            	    {
            	        this->followPush(FOLLOW_variable_reference_in_ref_variable_reference1443);
            	        variable_reference143=variable_reference();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleref_variable_referenceEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variable_reference143.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleref_variable_referenceEx; /* Prevent compiler warnings */
    ruleref_variable_referenceEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(32, ref_variable_reference_StartIndex); }

    return retval;
}
/* $ANTLR end ref_variable_reference */

/**
 * $ANTLR start variable_reference
 * CSharp.g:294:1: variable_reference : expression ;
 */
CSharpParser_variable_reference_return
CSharpParser::variable_reference()
{
    CSharpParser_variable_reference_return retval(this);

    ANTLR_MARKER variable_reference_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_expression_return expression144;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression144;


    /* Initialize rule variables
     */
    variable_reference_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(33)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    expression144.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:295:2: ( expression )
        // CSharp.g:295:4: expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_expression_in_variable_reference1460);
            expression144=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulevariable_referenceEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression144.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulevariable_referenceEx; /* Prevent compiler warnings */
    rulevariable_referenceEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(33, variable_reference_StartIndex); }

    return retval;
}
/* $ANTLR end variable_reference */

/**
 * $ANTLR start rank_specifiers
 * CSharp.g:297:1: rank_specifiers : ( rank_specifier )+ ;
 */
CSharpParser_rank_specifiers_return
CSharpParser::rank_specifiers()
{
    CSharpParser_rank_specifiers_return retval(this);

    ANTLR_MARKER rank_specifiers_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_rank_specifier_return rank_specifier145;
    typedef	CSharpParser_rank_specifier_return RETURN_TYPE_rank_specifier145;


    /* Initialize rule variables
     */
    rank_specifiers_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(34)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    rank_specifier145.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:298:2: ( ( rank_specifier )+ )
        // CSharp.g:298:4: ( rank_specifier )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:298:4: ( rank_specifier )+
            {
                int cnt39=0;

                for (;;)
                {
                    int alt39=2;
            	switch ( this->LA(1) )
            	{
            	case 94:
            		{
            			switch ( this->LA(2) )
            			{
            			case 77:
            			case 95:
            				{
            					alt39=1;
            				}
            			    break;

            			}

            		}
            	    break;

            	}

            	switch (alt39)
            	{
            	    case 1:
            	        // CSharp.g:298:4: rank_specifier
            	        {
            	            this->followPush(FOLLOW_rank_specifier_in_rank_specifiers1470);
            	            rank_specifier145=rank_specifier();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerank_specifiersEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, rank_specifier145.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt39 >= 1 )
            		{
            		    goto loop39;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulerank_specifiersEx;
            	}
            	cnt39++;
                }
                loop39: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulerank_specifiersEx; /* Prevent compiler warnings */
    rulerank_specifiersEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(34, rank_specifiers_StartIndex); }

    return retval;
}
/* $ANTLR end rank_specifiers */

/**
 * $ANTLR start rank_specifier
 * CSharp.g:301:1: rank_specifier : '[' ( dim_separators )? ']' ;
 */
CSharpParser_rank_specifier_return
CSharpParser::rank_specifier()
{
    CSharpParser_rank_specifier_return retval(this);

    ANTLR_MARKER rank_specifier_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal146;
    const CommonTokenType*    char_literal148;
    CSharpParser_dim_separators_return dim_separators147;
    typedef	CSharpParser_dim_separators_return RETURN_TYPE_dim_separators147;

    ImplTraits::TreeType* char_literal146_tree;
    ImplTraits::TreeType* char_literal148_tree;

    /* Initialize rule variables
     */
    rank_specifier_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(35)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal146       = NULL;
    char_literal148       = NULL;
    dim_separators147.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal146_tree   = NULL;
    char_literal148_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:302:2: ( '[' ( dim_separators )? ']' )
        // CSharp.g:302:4: '[' ( dim_separators )? ']'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal146 =  this->matchToken(94, &FOLLOW_94_in_rank_specifier1482);
            if  (this->hasException())
            {
                goto rulerank_specifierEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal146_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal146));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal146_tree);
            }

            // CSharp.g:302:10: ( dim_separators )?
            {
                int alt40=2;
                switch ( this->LA(1) )
                {
                    case 77:
                    	{
                    		alt40=1;
                    	}
                        break;
                }

                switch (alt40)
                {
            	case 1:
            	    // CSharp.g:302:10: dim_separators
            	    {
            	        this->followPush(FOLLOW_dim_separators_in_rank_specifier1486);
            	        dim_separators147=dim_separators();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulerank_specifierEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, dim_separators147.tree);

            	    }
            	    break;

                }
            }

            char_literal148 =  this->matchToken(95, &FOLLOW_95_in_rank_specifier1491);
            if  (this->hasException())
            {
                goto rulerank_specifierEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal148_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal148));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal148_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulerank_specifierEx; /* Prevent compiler warnings */
    rulerank_specifierEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(35, rank_specifier_StartIndex); }

    return retval;
}
/* $ANTLR end rank_specifier */

/**
 * $ANTLR start dim_separators
 * CSharp.g:305:1: dim_separators : ( ',' )+ ;
 */
CSharpParser_dim_separators_return
CSharpParser::dim_separators()
{
    CSharpParser_dim_separators_return retval(this);

    ANTLR_MARKER dim_separators_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal149;

    ImplTraits::TreeType* char_literal149_tree;

    /* Initialize rule variables
     */
    dim_separators_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(36)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal149       = NULL;
    retval.call_start_placeholder(); 


    char_literal149_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:306:2: ( ( ',' )+ )
        // CSharp.g:306:4: ( ',' )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:306:4: ( ',' )+
            {
                int cnt41=0;

                for (;;)
                {
                    int alt41=2;
            	switch ( this->LA(1) )
            	{
            	case 77:
            		{
            			alt41=1;
            		}
            	    break;

            	}

            	switch (alt41)
            	{
            	    case 1:
            	        // CSharp.g:306:4: ','
            	        {
            	            char_literal149 =  this->matchToken(77, &FOLLOW_77_in_dim_separators1502);
            	            if  (this->hasException())
            	            {
            	                goto ruledim_separatorsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) {
            	            char_literal149_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal149));
            	            ADAPTOR->addChild(ADAPTOR, root_0, char_literal149_tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt41 >= 1 )
            		{
            		    goto loop41;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruledim_separatorsEx;
            	}
            	cnt41++;
                }
                loop41: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruledim_separatorsEx; /* Prevent compiler warnings */
    ruledim_separatorsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(36, dim_separators_StartIndex); }

    return retval;
}
/* $ANTLR end dim_separators */

/**
 * $ANTLR start delegate_creation_expression
 * CSharp.g:309:1: delegate_creation_expression : type_name '(' type_name ')' ;
 */
CSharpParser_delegate_creation_expression_return
CSharpParser::delegate_creation_expression()
{
    CSharpParser_delegate_creation_expression_return retval(this);

    ANTLR_MARKER delegate_creation_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal151;
    const CommonTokenType*    char_literal153;
    CSharpParser_type_name_return type_name150;
    typedef	CSharpParser_type_name_return RETURN_TYPE_type_name150;

    CSharpParser_type_name_return type_name152;
    typedef	CSharpParser_type_name_return RETURN_TYPE_type_name152;

    ImplTraits::TreeType* char_literal151_tree;
    ImplTraits::TreeType* char_literal153_tree;

    /* Initialize rule variables
     */
    delegate_creation_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(37)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal151       = NULL;
    char_literal153       = NULL;
    type_name150.tree = NULL;

    type_name152.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal151_tree   = NULL;
    char_literal153_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:310:2: ( type_name '(' type_name ')' )
        // CSharp.g:310:4: type_name '(' type_name ')'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_type_name_in_delegate_creation_expression1514);
            type_name150=type_name();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledelegate_creation_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_name150.tree);

            char_literal151 =  this->matchToken(71, &FOLLOW_71_in_delegate_creation_expression1518);
            if  (this->hasException())
            {
                goto ruledelegate_creation_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal151_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal151));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal151_tree);
            }

            this->followPush(FOLLOW_type_name_in_delegate_creation_expression1522);
            type_name152=type_name();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledelegate_creation_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_name152.tree);

            char_literal153 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_delegate_creation_expression1526);
            if  (this->hasException())
            {
                goto ruledelegate_creation_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal153_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal153));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal153_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruledelegate_creation_expressionEx; /* Prevent compiler warnings */
    ruledelegate_creation_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(37, delegate_creation_expression_StartIndex); }

    return retval;
}
/* $ANTLR end delegate_creation_expression */

/**
 * $ANTLR start anonymous_object_creation_expression
 * CSharp.g:313:1: anonymous_object_creation_expression : anonymous_object_initializer ;
 */
CSharpParser_anonymous_object_creation_expression_return
CSharpParser::anonymous_object_creation_expression()
{
    CSharpParser_anonymous_object_creation_expression_return retval(this);

    ANTLR_MARKER anonymous_object_creation_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_anonymous_object_initializer_return anonymous_object_initializer154;
    typedef	CSharpParser_anonymous_object_initializer_return RETURN_TYPE_anonymous_object_initializer154;


    /* Initialize rule variables
     */
    anonymous_object_creation_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(38)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    anonymous_object_initializer154.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:314:2: ( anonymous_object_initializer )
        // CSharp.g:314:4: anonymous_object_initializer
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression1537);
            anonymous_object_initializer154=anonymous_object_initializer();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleanonymous_object_creation_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, anonymous_object_initializer154.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleanonymous_object_creation_expressionEx; /* Prevent compiler warnings */
    ruleanonymous_object_creation_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(38, anonymous_object_creation_expression_StartIndex); }

    return retval;
}
/* $ANTLR end anonymous_object_creation_expression */

/**
 * $ANTLR start anonymous_object_initializer
 * CSharp.g:317:1: anonymous_object_initializer : '{' ( member_declarator_list )? ( ',' )? '}' ;
 */
CSharpParser_anonymous_object_initializer_return
CSharpParser::anonymous_object_initializer()
{
    CSharpParser_anonymous_object_initializer_return retval(this);

    ANTLR_MARKER anonymous_object_initializer_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal155;
    const CommonTokenType*    char_literal157;
    const CommonTokenType*    char_literal158;
    CSharpParser_member_declarator_list_return member_declarator_list156;
    typedef	CSharpParser_member_declarator_list_return RETURN_TYPE_member_declarator_list156;

    ImplTraits::TreeType* char_literal155_tree;
    ImplTraits::TreeType* char_literal157_tree;
    ImplTraits::TreeType* char_literal158_tree;

    /* Initialize rule variables
     */
    anonymous_object_initializer_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(39)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal155       = NULL;
    char_literal157       = NULL;
    char_literal158       = NULL;
    member_declarator_list156.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal155_tree   = NULL;
    char_literal157_tree   = NULL;
    char_literal158_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:318:2: ( '{' ( member_declarator_list )? ( ',' )? '}' )
        // CSharp.g:318:4: '{' ( member_declarator_list )? ( ',' )? '}'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal155 =  this->matchToken(199, &FOLLOW_199_in_anonymous_object_initializer1548);
            if  (this->hasException())
            {
                goto ruleanonymous_object_initializerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal155_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal155));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal155_tree);
            }

            // CSharp.g:318:10: ( member_declarator_list )?
            {
                int alt42=2;
                switch ( this->LA(1) )
                {
                    case IDENTIFIER:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 108:
                    case 119:
                    case 122:
                    case 124:
                    case 128:
                    case 134:
                    case 137:
                    case 143:
                    case 145:
                    case 146:
                    case 149:
                    case 150:
                    case 154:
                    case 156:
                    case 159:
                    case 162:
                    case 164:
                    case 169:
                    case 173:
                    case 174:
                    case 185:
                    case 192:
                    case 196:
                    case 198:
                    	{
                    		alt42=1;
                    	}
                        break;
                }

                switch (alt42)
                {
            	case 1:
            	    // CSharp.g:318:10: member_declarator_list
            	    {
            	        this->followPush(FOLLOW_member_declarator_list_in_anonymous_object_initializer1552);
            	        member_declarator_list156=member_declarator_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleanonymous_object_initializerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, member_declarator_list156.tree);

            	    }
            	    break;

                }
            }

            // CSharp.g:318:36: ( ',' )?
            {
                int alt43=2;
                switch ( this->LA(1) )
                {
                    case 77:
                    	{
                    		alt43=1;
                    	}
                        break;
                }

                switch (alt43)
                {
            	case 1:
            	    // CSharp.g:318:36: ','
            	    {
            	        char_literal157 =  this->matchToken(77, &FOLLOW_77_in_anonymous_object_initializer1557);
            	        if  (this->hasException())
            	        {
            	            goto ruleanonymous_object_initializerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal157_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal157));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal157_tree);
            	        }

            	    }
            	    break;

                }
            }

            char_literal158 =  this->matchToken(203, &FOLLOW_203_in_anonymous_object_initializer1562);
            if  (this->hasException())
            {
                goto ruleanonymous_object_initializerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal158_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal158));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal158_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleanonymous_object_initializerEx; /* Prevent compiler warnings */
    ruleanonymous_object_initializerEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(39, anonymous_object_initializer_StartIndex); }

    return retval;
}
/* $ANTLR end anonymous_object_initializer */

/**
 * $ANTLR start member_declarator_list
 * CSharp.g:321:1: member_declarator_list : member_declarator ( ',' member_declarator )* ;
 */
CSharpParser_member_declarator_list_return
CSharpParser::member_declarator_list()
{
    CSharpParser_member_declarator_list_return retval(this);

    ANTLR_MARKER member_declarator_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal160;
    CSharpParser_member_declarator_return member_declarator159;
    typedef	CSharpParser_member_declarator_return RETURN_TYPE_member_declarator159;

    CSharpParser_member_declarator_return member_declarator161;
    typedef	CSharpParser_member_declarator_return RETURN_TYPE_member_declarator161;

    ImplTraits::TreeType* char_literal160_tree;

    /* Initialize rule variables
     */
    member_declarator_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(40)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal160       = NULL;
    member_declarator159.tree = NULL;

    member_declarator161.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal160_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:322:2: ( member_declarator ( ',' member_declarator )* )
        // CSharp.g:322:4: member_declarator ( ',' member_declarator )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_member_declarator_in_member_declarator_list1573);
            member_declarator159=member_declarator();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemember_declarator_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, member_declarator159.tree);

            // CSharp.g:322:23: ( ',' member_declarator )*

            for (;;)
            {
                int alt44=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		switch ( this->LA(2) )
                		{
                		case IDENTIFIER:
                		case 98:
                		case 100:
                		case 101:
                		case 103:
                		case 104:
                		case 108:
                		case 119:
                		case 122:
                		case 124:
                		case 128:
                		case 134:
                		case 137:
                		case 143:
                		case 145:
                		case 146:
                		case 149:
                		case 150:
                		case 154:
                		case 156:
                		case 159:
                		case 162:
                		case 164:
                		case 169:
                		case 173:
                		case 174:
                		case 185:
                		case 192:
                		case 196:
                		case 198:
                			{
                				alt44=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt44)
                {
            	case 1:
            	    // CSharp.g:322:24: ',' member_declarator
            	    {
            	        char_literal160 =  this->matchToken(77, &FOLLOW_77_in_member_declarator_list1577);
            	        if  (this->hasException())
            	        {
            	            goto rulemember_declarator_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal160_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal160));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal160_tree);
            	        }

            	        this->followPush(FOLLOW_member_declarator_in_member_declarator_list1579);
            	        member_declarator161=member_declarator();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemember_declarator_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, member_declarator161.tree);

            	    }
            	    break;

            	default:
            	    goto loop44;	/* break out of the loop */
            	    break;
                }
            }
            loop44: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemember_declarator_listEx; /* Prevent compiler warnings */
    rulemember_declarator_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(40, member_declarator_list_StartIndex); }

    return retval;
}
/* $ANTLR end member_declarator_list */

/**
 * $ANTLR start member_declarator
 * CSharp.g:325:1: member_declarator : identifier ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression ) ;
 */
CSharpParser_member_declarator_return
CSharpParser::member_declarator()
{
    CSharpParser_member_declarator_return retval(this);

    ANTLR_MARKER member_declarator_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal164;
    const CommonTokenType*    char_literal166;
    CSharpParser_identifier_return identifier162;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier162;

    CSharpParser_generic_argument_list_return generic_argument_list163;
    typedef	CSharpParser_generic_argument_list_return RETURN_TYPE_generic_argument_list163;

    CSharpParser_primary_or_array_creation_expression_return primary_or_array_creation_expression165;
    typedef	CSharpParser_primary_or_array_creation_expression_return RETURN_TYPE_primary_or_array_creation_expression165;

    CSharpParser_expression_return expression167;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression167;

    ImplTraits::TreeType* char_literal164_tree;
    ImplTraits::TreeType* char_literal166_tree;

    /* Initialize rule variables
     */
    member_declarator_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(41)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal164       = NULL;
    char_literal166       = NULL;
    identifier162.tree = NULL;

    generic_argument_list163.tree = NULL;

    primary_or_array_creation_expression165.tree = NULL;

    expression167.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal164_tree   = NULL;
    char_literal166_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:326:2: ( identifier ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression ) )
        // CSharp.g:326:4: identifier ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression )
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_identifier_in_member_declarator1592);
            identifier162=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemember_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier162.tree);

            // CSharp.g:327:4: ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression )
            {
                int alt45=3;
                switch ( this->LA(1) )
                {
                case 84:
                	{
                		alt45=1;
                	}
                    break;
                case DOT:
                	{
                		alt45=2;
                	}
                    break;
                case 88:
                	{
                		alt45=3;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 45 );
                    ex->set_state( 0 );


                    goto rulemember_declaratorEx;

                }

                switch (alt45)
                {
            	case 1:
            	    // CSharp.g:328:5: generic_argument_list
            	    {
            	        this->followPush(FOLLOW_generic_argument_list_in_member_declarator1603);
            	        generic_argument_list163=generic_argument_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemember_declaratorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, generic_argument_list163.tree);

            	    }
            	    break;
            	case 2:
            	    // CSharp.g:329:6: ( '.' primary_or_array_creation_expression )
            	    {
            	        // CSharp.g:329:6: ( '.' primary_or_array_creation_expression )
            	        // CSharp.g:329:7: '.' primary_or_array_creation_expression
            	        {
            	            char_literal164 =  this->matchToken(DOT, &FOLLOW_DOT_in_member_declarator1611);
            	            if  (this->hasException())
            	            {
            	                goto rulemember_declaratorEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) {
            	            char_literal164_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal164));
            	            ADAPTOR->addChild(ADAPTOR, root_0, char_literal164_tree);
            	            }

            	            this->followPush(FOLLOW_primary_or_array_creation_expression_in_member_declarator1615);
            	            primary_or_array_creation_expression165=primary_or_array_creation_expression();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemember_declaratorEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, primary_or_array_creation_expression165.tree);

            	        }


            	    }
            	    break;
            	case 3:
            	    // CSharp.g:330:6: '=' expression
            	    {
            	        char_literal166 =  this->matchToken(88, &FOLLOW_88_in_member_declarator1623);
            	        if  (this->hasException())
            	        {
            	            goto rulemember_declaratorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal166_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal166));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal166_tree);
            	        }

            	        this->followPush(FOLLOW_expression_in_member_declarator1627);
            	        expression167=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemember_declaratorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression167.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulemember_declaratorEx; /* Prevent compiler warnings */
    rulemember_declaratorEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(41, member_declarator_StartIndex); }

    return retval;
}
/* $ANTLR end member_declarator */

/**
 * $ANTLR start primary_or_array_creation_expression
 * CSharp.g:334:1: primary_or_array_creation_expression : ( ( array_creation_expression )=> array_creation_expression | primary_expression );
 */
CSharpParser_primary_or_array_creation_expression_return
CSharpParser::primary_or_array_creation_expression()
{
    CSharpParser_primary_or_array_creation_expression_return retval(this);

    ANTLR_MARKER primary_or_array_creation_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_array_creation_expression_return array_creation_expression168;
    typedef	CSharpParser_array_creation_expression_return RETURN_TYPE_array_creation_expression168;

    CSharpParser_primary_expression_return primary_expression169;
    typedef	CSharpParser_primary_expression_return RETURN_TYPE_primary_expression169;


    /* Initialize rule variables
     */
    primary_or_array_creation_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(42)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    array_creation_expression168.tree = NULL;

    primary_expression169.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:335:2: ( ( array_creation_expression )=> array_creation_expression | primary_expression )

            ANTLR_UINT32 alt46;

            alt46=2;

            switch ( this->LA(1) )
            {
            case 152:
            	{
            		{
            		    int LA46_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred11_CSharp>() )))
            		    {
            		        alt46=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt46=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 46 );
            		        ex->set_state( 1 );


            		        goto ruleprimary_or_array_creation_expressionEx;

            		    }
            		}
            	}
                break;
            case Character_literal:
            case FALSE:
            case Hex_number:
            case IDENTIFIER:
            case LT_NULL:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            case 71:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 109:
            case 111:
            case 112:
            case 116:
            case 117:
            case 118:
            case 119:
            case 121:
            case 122:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 153:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 176:
            case 179:
            case 182:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 191:
            case 192:
            case 196:
            case 198:
            	{
            		alt46=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 46 );
                ex->set_state( 0 );


                goto ruleprimary_or_array_creation_expressionEx;

            }

            switch (alt46)
            {
        	case 1:
        	    // CSharp.g:335:4: ( array_creation_expression )=> array_creation_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_array_creation_expression_in_primary_or_array_creation_expression1649);
        	        array_creation_expression168=array_creation_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_or_array_creation_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, array_creation_expression168.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:336:4: primary_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_primary_expression_in_primary_or_array_creation_expression1654);
        	        primary_expression169=primary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprimary_or_array_creation_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, primary_expression169.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleprimary_or_array_creation_expressionEx; /* Prevent compiler warnings */
    ruleprimary_or_array_creation_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(42, primary_or_array_creation_expression_StartIndex); }

    return retval;
}
/* $ANTLR end primary_or_array_creation_expression */

/**
 * $ANTLR start array_creation_expression
 * CSharp.g:340:1: array_creation_expression : 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) ) ;
 */
CSharpParser_array_creation_expression_return
CSharpParser::array_creation_expression()
{
    CSharpParser_array_creation_expression_return retval(this);

    ANTLR_MARKER array_creation_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal170;
    const CommonTokenType*    char_literal172;
    const CommonTokenType*    char_literal174;
    CSharpParser_type_return type171;
    typedef	CSharpParser_type_return RETURN_TYPE_type171;

    CSharpParser_expression_list_return expression_list173;
    typedef	CSharpParser_expression_list_return RETURN_TYPE_expression_list173;

    CSharpParser_rank_specifiers_return rank_specifiers175;
    typedef	CSharpParser_rank_specifiers_return RETURN_TYPE_rank_specifiers175;

    CSharpParser_array_initializer_return array_initializer176;
    typedef	CSharpParser_array_initializer_return RETURN_TYPE_array_initializer176;

    CSharpParser_arguments_return arguments177;
    typedef	CSharpParser_arguments_return RETURN_TYPE_arguments177;

    CSharpParser_invocation_part_return invocation_part178;
    typedef	CSharpParser_invocation_part_return RETURN_TYPE_invocation_part178;

    CSharpParser_invocation_part_return invocation_part179;
    typedef	CSharpParser_invocation_part_return RETURN_TYPE_invocation_part179;

    CSharpParser_arguments_return arguments180;
    typedef	CSharpParser_arguments_return RETURN_TYPE_arguments180;

    CSharpParser_array_initializer_return array_initializer181;
    typedef	CSharpParser_array_initializer_return RETURN_TYPE_array_initializer181;

    CSharpParser_rank_specifier_return rank_specifier182;
    typedef	CSharpParser_rank_specifier_return RETURN_TYPE_rank_specifier182;

    CSharpParser_array_initializer_return array_initializer183;
    typedef	CSharpParser_array_initializer_return RETURN_TYPE_array_initializer183;

    ImplTraits::TreeType* string_literal170_tree;
    ImplTraits::TreeType* char_literal172_tree;
    ImplTraits::TreeType* char_literal174_tree;

    /* Initialize rule variables
     */
    array_creation_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(43)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal170       = NULL;
    char_literal172       = NULL;
    char_literal174       = NULL;
    type171.tree = NULL;

    expression_list173.tree = NULL;

    rank_specifiers175.tree = NULL;

    array_initializer176.tree = NULL;

    arguments177.tree = NULL;

    invocation_part178.tree = NULL;

    invocation_part179.tree = NULL;

    arguments180.tree = NULL;

    array_initializer181.tree = NULL;

    rank_specifier182.tree = NULL;

    array_initializer183.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal170_tree   = NULL;
    char_literal172_tree   = NULL;
    char_literal174_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:341:2: ( 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) ) )
        // CSharp.g:341:4: 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) )
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal170 =  this->matchToken(152, &FOLLOW_152_in_array_creation_expression1667);
            if  (this->hasException())
            {
                goto rulearray_creation_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal170_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal170));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal170_tree);
            }

            // CSharp.g:342:3: ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) )
            {
                int alt52=2;
                switch ( this->LA(1) )
                {
                case IDENTIFIER:
                case 98:
                case 100:
                case 101:
                case 103:
                case 104:
                case 106:
                case 108:
                case 109:
                case 111:
                case 116:
                case 119:
                case 121:
                case 122:
                case 124:
                case 128:
                case 131:
                case 134:
                case 137:
                case 140:
                case 143:
                case 145:
                case 146:
                case 148:
                case 149:
                case 150:
                case 153:
                case 154:
                case 156:
                case 159:
                case 162:
                case 164:
                case 169:
                case 171:
                case 173:
                case 174:
                case 175:
                case 179:
                case 185:
                case 187:
                case 188:
                case 191:
                case 192:
                case 194:
                case 196:
                case 198:
                	{
                		alt52=1;
                	}
                    break;
                case 94:
                	{
                		alt52=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 52 );
                    ex->set_state( 0 );


                    goto rulearray_creation_expressionEx;

                }

                switch (alt52)
                {
            	case 1:
            	    // CSharp.g:343:4: type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer )
            	    {
            	        this->followPush(FOLLOW_type_in_array_creation_expression1679);
            	        type171=type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearray_creation_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type171.tree);

            	        // CSharp.g:344:5: ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer )
            	        {
            	            int alt51=2;
            	            switch ( this->LA(1) )
            	            {
            	            case 94:
            	            	{
            	            		alt51=1;
            	            	}
            	                break;
            	            case 199:
            	            	{
            	            		alt51=2;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 51 );
            	                ex->set_state( 0 );


            	                goto rulearray_creation_expressionEx;

            	            }

            	            switch (alt51)
            	            {
            	        	case 1:
            	        	    // CSharp.g:345:6: '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
            	        	    {
            	        	        char_literal172 =  this->matchToken(94, &FOLLOW_94_in_array_creation_expression1692);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulearray_creation_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        char_literal172_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal172));
            	        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal172_tree);
            	        	        }

            	        	        this->followPush(FOLLOW_expression_list_in_array_creation_expression1696);
            	        	        expression_list173=expression_list();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulearray_creation_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression_list173.tree);

            	        	        char_literal174 =  this->matchToken(95, &FOLLOW_95_in_array_creation_expression1700);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulearray_creation_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        char_literal174_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal174));
            	        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal174_tree);
            	        	        }

            	        	        // CSharp.g:346:7: ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
            	        	        {
            	        	            int alt50=2;
            	        	            alt50 = cdfa50.predict(this, this->get_rec(), this->get_istream(), cdfa50 );
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearray_creation_expressionEx;
            	        	            }
            	        	            if (this->hasFailed())
            	        	            {
            	        	                return retval;
            	        	            }

            	        	            switch (alt50)
            	        	            {
            	        	        	case 1:
            	        	        	    // CSharp.g:347:8: ( rank_specifiers )? ( array_initializer )?
            	        	        	    {
            	        	        	        // CSharp.g:347:8: ( rank_specifiers )?
            	        	        	        {
            	        	        	            int alt47=2;
            	        	        	            switch ( this->LA(1) )
            	        	        	            {
            	        	        	                case 94:
            	        	        	                	{
            	        	        	                		alt47=1;
            	        	        	                	}
            	        	        	                    break;
            	        	        	            }

            	        	        	            switch (alt47)
            	        	        	            {
            	        	        	        	case 1:
            	        	        	        	    // CSharp.g:347:8: rank_specifiers
            	        	        	        	    {
            	        	        	        	        this->followPush(FOLLOW_rank_specifiers_in_array_creation_expression1717);
            	        	        	        	        rank_specifiers175=rank_specifiers();

            	        	        	        	        this->followPop();
            	        	        	        	        if  (this->hasException())
            	        	        	        	        {
            	        	        	        	            goto rulearray_creation_expressionEx;
            	        	        	        	        }
            	        	        	        	        if (this->hasFailed())
            	        	        	        	        {
            	        	        	        	            return retval;
            	        	        	        	        }

            	        	        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, rank_specifiers175.tree);

            	        	        	        	    }
            	        	        	        	    break;

            	        	        	            }
            	        	        	        }

            	        	        	        // CSharp.g:347:27: ( array_initializer )?
            	        	        	        {
            	        	        	            int alt48=2;
            	        	        	            switch ( this->LA(1) )
            	        	        	            {
            	        	        	                case 199:
            	        	        	                	{
            	        	        	                		alt48=1;
            	        	        	                	}
            	        	        	                    break;
            	        	        	            }

            	        	        	            switch (alt48)
            	        	        	            {
            	        	        	        	case 1:
            	        	        	        	    // CSharp.g:347:27: array_initializer
            	        	        	        	    {
            	        	        	        	        this->followPush(FOLLOW_array_initializer_in_array_creation_expression1722);
            	        	        	        	        array_initializer176=array_initializer();

            	        	        	        	        this->followPop();
            	        	        	        	        if  (this->hasException())
            	        	        	        	        {
            	        	        	        	            goto rulearray_creation_expressionEx;
            	        	        	        	        }
            	        	        	        	        if (this->hasFailed())
            	        	        	        	        {
            	        	        	        	            return retval;
            	        	        	        	        }

            	        	        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, array_initializer176.tree);

            	        	        	        	    }
            	        	        	        	    break;

            	        	        	            }
            	        	        	        }

            	        	        	    }
            	        	        	    break;
            	        	        	case 2:
            	        	        	    // CSharp.g:349:9: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments
            	        	        	    {
            	        	        	        // CSharp.g:349:9: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )*

            	        	        	        for (;;)
            	        	        	        {
            	        	        	            int alt49=3;
            	        	        	            switch ( this->LA(1) )
            	        	        	            {
            	        	        	            case 71:
            	        	        	            	{
            	        	        	            		{
            	        	        	            		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	        	            		    */
            	        	        	            		    int LA49_1 = this->LA(2);
            	        	        	            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred12_CSharp>() )))
            	        	        	            		    {
            	        	        	            		        alt49=1;
            	        	        	            		    }

            	        	        	            		}
            	        	        	            	}
            	        	        	                break;
            	        	        	            case DOT:
            	        	        	            case PTR:
            	        	        	            case 94:
            	        	        	            	{
            	        	        	            		alt49=2;
            	        	        	            	}
            	        	        	                break;

            	        	        	            }

            	        	        	            switch (alt49)
            	        	        	            {
            	        	        	        	case 1:
            	        	        	        	    // CSharp.g:350:9: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
            	        	        	        	    {
            	        	        	        	        // CSharp.g:350:9: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
            	        	        	        	        // CSharp.g:350:10: ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part
            	        	        	        	        {
            	        	        	        	            this->followPush(FOLLOW_arguments_in_array_creation_expression1769);
            	        	        	        	            arguments177=arguments();

            	        	        	        	            this->followPop();
            	        	        	        	            if  (this->hasException())
            	        	        	        	            {
            	        	        	        	                goto rulearray_creation_expressionEx;
            	        	        	        	            }
            	        	        	        	            if (this->hasFailed())
            	        	        	        	            {
            	        	        	        	                return retval;
            	        	        	        	            }

            	        	        	        	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, arguments177.tree);

            	        	        	        	            this->followPush(FOLLOW_invocation_part_in_array_creation_expression1773);
            	        	        	        	            invocation_part178=invocation_part();

            	        	        	        	            this->followPop();
            	        	        	        	            if  (this->hasException())
            	        	        	        	            {
            	        	        	        	                goto rulearray_creation_expressionEx;
            	        	        	        	            }
            	        	        	        	            if (this->hasFailed())
            	        	        	        	            {
            	        	        	        	                return retval;
            	        	        	        	            }

            	        	        	        	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, invocation_part178.tree);

            	        	        	        	        }


            	        	        	        	    }
            	        	        	        	    break;
            	        	        	        	case 2:
            	        	        	        	    // CSharp.g:351:12: invocation_part
            	        	        	        	    {
            	        	        	        	        this->followPush(FOLLOW_invocation_part_in_array_creation_expression1787);
            	        	        	        	        invocation_part179=invocation_part();

            	        	        	        	        this->followPop();
            	        	        	        	        if  (this->hasException())
            	        	        	        	        {
            	        	        	        	            goto rulearray_creation_expressionEx;
            	        	        	        	        }
            	        	        	        	        if (this->hasFailed())
            	        	        	        	        {
            	        	        	        	            return retval;
            	        	        	        	        }

            	        	        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, invocation_part179.tree);

            	        	        	        	    }
            	        	        	        	    break;

            	        	        	        	default:
            	        	        	        	    goto loop49;	/* break out of the loop */
            	        	        	        	    break;
            	        	        	            }
            	        	        	        }
            	        	        	        loop49: ; /* Jump out to here if this rule does not match */


            	        	        	        this->followPush(FOLLOW_arguments_in_array_creation_expression1801);
            	        	        	        arguments180=arguments();

            	        	        	        this->followPop();
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto rulearray_creation_expressionEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }

            	        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, arguments180.tree);

            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CSharp.g:354:8: array_initializer
            	        	    {
            	        	        this->followPush(FOLLOW_array_initializer_in_array_creation_expression1825);
            	        	        array_initializer181=array_initializer();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulearray_creation_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, array_initializer181.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // CSharp.g:356:5: rank_specifier ( array_initializer )
            	    {
            	        this->followPush(FOLLOW_rank_specifier_in_array_creation_expression1839);
            	        rank_specifier182=rank_specifier();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearray_creation_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, rank_specifier182.tree);

            	        // CSharp.g:357:5: ( array_initializer )
            	        // CSharp.g:358:6: array_initializer
            	        {
            	            this->followPush(FOLLOW_array_initializer_in_array_creation_expression1855);
            	            array_initializer183=array_initializer();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulearray_creation_expressionEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, array_initializer183.tree);

            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulearray_creation_expressionEx; /* Prevent compiler warnings */
    rulearray_creation_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(43, array_creation_expression_StartIndex); }

    return retval;
}
/* $ANTLR end array_creation_expression */

/**
 * $ANTLR start array_initializer
 * CSharp.g:363:1: array_initializer : '{' ( variable_initializer_list )? ( ',' )? '}' ;
 */
CSharpParser_array_initializer_return
CSharpParser::array_initializer()
{
    CSharpParser_array_initializer_return retval(this);

    ANTLR_MARKER array_initializer_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal184;
    const CommonTokenType*    char_literal186;
    const CommonTokenType*    char_literal187;
    CSharpParser_variable_initializer_list_return variable_initializer_list185;
    typedef	CSharpParser_variable_initializer_list_return RETURN_TYPE_variable_initializer_list185;

    ImplTraits::TreeType* char_literal184_tree;
    ImplTraits::TreeType* char_literal186_tree;
    ImplTraits::TreeType* char_literal187_tree;

    /* Initialize rule variables
     */
    array_initializer_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(44)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal184       = NULL;
    char_literal186       = NULL;
    char_literal187       = NULL;
    variable_initializer_list185.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal184_tree   = NULL;
    char_literal186_tree   = NULL;
    char_literal187_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:364:2: ( '{' ( variable_initializer_list )? ( ',' )? '}' )
        // CSharp.g:364:4: '{' ( variable_initializer_list )? ( ',' )? '}'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal184 =  this->matchToken(199, &FOLLOW_199_in_array_initializer1881);
            if  (this->hasException())
            {
                goto rulearray_initializerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal184_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal184));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal184_tree);
            }

            // CSharp.g:364:10: ( variable_initializer_list )?
            {
                int alt53=2;
                switch ( this->LA(1) )
                {
                    case Character_literal:
                    case FALSE:
                    case Hex_number:
                    case IDENTIFIER:
                    case LT_NULL:
                    case MINUS:
                    case NUMBER:
                    case Real_literal:
                    case STRINGLITERAL:
                    case TRUE:
                    case Verbatim_string_literal:
                    case 64:
                    case 69:
                    case 71:
                    case 72:
                    case 74:
                    case 75:
                    case 78:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 108:
                    case 109:
                    case 111:
                    case 112:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 121:
                    case 122:
                    case 124:
                    case 128:
                    case 131:
                    case 134:
                    case 137:
                    case 140:
                    case 143:
                    case 145:
                    case 146:
                    case 148:
                    case 149:
                    case 150:
                    case 152:
                    case 153:
                    case 154:
                    case 156:
                    case 159:
                    case 162:
                    case 164:
                    case 169:
                    case 171:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 179:
                    case 182:
                    case 185:
                    case 186:
                    case 187:
                    case 188:
                    case 189:
                    case 191:
                    case 192:
                    case 196:
                    case 198:
                    case 199:
                    case 204:
                    	{
                    		alt53=1;
                    	}
                        break;
                }

                switch (alt53)
                {
            	case 1:
            	    // CSharp.g:364:10: variable_initializer_list
            	    {
            	        this->followPush(FOLLOW_variable_initializer_list_in_array_initializer1885);
            	        variable_initializer_list185=variable_initializer_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearray_initializerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variable_initializer_list185.tree);

            	    }
            	    break;

                }
            }

            // CSharp.g:364:39: ( ',' )?
            {
                int alt54=2;
                switch ( this->LA(1) )
                {
                    case 77:
                    	{
                    		alt54=1;
                    	}
                        break;
                }

                switch (alt54)
                {
            	case 1:
            	    // CSharp.g:364:39: ','
            	    {
            	        char_literal186 =  this->matchToken(77, &FOLLOW_77_in_array_initializer1890);
            	        if  (this->hasException())
            	        {
            	            goto rulearray_initializerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal186_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal186));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal186_tree);
            	        }

            	    }
            	    break;

                }
            }

            char_literal187 =  this->matchToken(203, &FOLLOW_203_in_array_initializer1895);
            if  (this->hasException())
            {
                goto rulearray_initializerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal187_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal187));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal187_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulearray_initializerEx; /* Prevent compiler warnings */
    rulearray_initializerEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(44, array_initializer_StartIndex); }

    return retval;
}
/* $ANTLR end array_initializer */

/**
 * $ANTLR start variable_initializer_list
 * CSharp.g:367:1: variable_initializer_list : variable_initializer ( ',' variable_initializer )* ;
 */
CSharpParser_variable_initializer_list_return
CSharpParser::variable_initializer_list()
{
    CSharpParser_variable_initializer_list_return retval(this);

    ANTLR_MARKER variable_initializer_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal189;
    CSharpParser_variable_initializer_return variable_initializer188;
    typedef	CSharpParser_variable_initializer_return RETURN_TYPE_variable_initializer188;

    CSharpParser_variable_initializer_return variable_initializer190;
    typedef	CSharpParser_variable_initializer_return RETURN_TYPE_variable_initializer190;

    ImplTraits::TreeType* char_literal189_tree;

    /* Initialize rule variables
     */
    variable_initializer_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(45)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal189       = NULL;
    variable_initializer188.tree = NULL;

    variable_initializer190.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal189_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:368:2: ( variable_initializer ( ',' variable_initializer )* )
        // CSharp.g:368:4: variable_initializer ( ',' variable_initializer )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_variable_initializer_in_variable_initializer_list1906);
            variable_initializer188=variable_initializer();

            this->followPop();
            if  (this->hasException())
            {
                goto rulevariable_initializer_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variable_initializer188.tree);

            // CSharp.g:368:25: ( ',' variable_initializer )*

            for (;;)
            {
                int alt55=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		switch ( this->LA(2) )
                		{
                		case Character_literal:
                		case FALSE:
                		case Hex_number:
                		case IDENTIFIER:
                		case LT_NULL:
                		case MINUS:
                		case NUMBER:
                		case Real_literal:
                		case STRINGLITERAL:
                		case TRUE:
                		case Verbatim_string_literal:
                		case 64:
                		case 69:
                		case 71:
                		case 72:
                		case 74:
                		case 75:
                		case 78:
                		case 98:
                		case 100:
                		case 101:
                		case 103:
                		case 104:
                		case 105:
                		case 106:
                		case 108:
                		case 109:
                		case 111:
                		case 112:
                		case 116:
                		case 117:
                		case 118:
                		case 119:
                		case 121:
                		case 122:
                		case 124:
                		case 128:
                		case 131:
                		case 134:
                		case 137:
                		case 140:
                		case 143:
                		case 145:
                		case 146:
                		case 148:
                		case 149:
                		case 150:
                		case 152:
                		case 153:
                		case 154:
                		case 156:
                		case 159:
                		case 162:
                		case 164:
                		case 169:
                		case 171:
                		case 173:
                		case 174:
                		case 175:
                		case 176:
                		case 179:
                		case 182:
                		case 185:
                		case 186:
                		case 187:
                		case 188:
                		case 189:
                		case 191:
                		case 192:
                		case 196:
                		case 198:
                		case 199:
                		case 204:
                			{
                				alt55=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt55)
                {
            	case 1:
            	    // CSharp.g:368:26: ',' variable_initializer
            	    {
            	        char_literal189 =  this->matchToken(77, &FOLLOW_77_in_variable_initializer_list1909);
            	        if  (this->hasException())
            	        {
            	            goto rulevariable_initializer_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal189_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal189));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal189_tree);
            	        }

            	        this->followPush(FOLLOW_variable_initializer_in_variable_initializer_list1911);
            	        variable_initializer190=variable_initializer();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulevariable_initializer_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variable_initializer190.tree);

            	    }
            	    break;

            	default:
            	    goto loop55;	/* break out of the loop */
            	    break;
                }
            }
            loop55: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulevariable_initializer_listEx; /* Prevent compiler warnings */
    rulevariable_initializer_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(45, variable_initializer_list_StartIndex); }

    return retval;
}
/* $ANTLR end variable_initializer_list */

/**
 * $ANTLR start variable_initializer
 * CSharp.g:371:1: variable_initializer : ( expression | array_initializer );
 */
CSharpParser_variable_initializer_return
CSharpParser::variable_initializer()
{
    CSharpParser_variable_initializer_return retval(this);

    ANTLR_MARKER variable_initializer_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_expression_return expression191;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression191;

    CSharpParser_array_initializer_return array_initializer192;
    typedef	CSharpParser_array_initializer_return RETURN_TYPE_array_initializer192;


    /* Initialize rule variables
     */
    variable_initializer_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(46)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    expression191.tree = NULL;

    array_initializer192.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:372:2: ( expression | array_initializer )

            ANTLR_UINT32 alt56;

            alt56=2;

            switch ( this->LA(1) )
            {
            case Character_literal:
            case FALSE:
            case Hex_number:
            case IDENTIFIER:
            case LT_NULL:
            case MINUS:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            case 64:
            case 69:
            case 71:
            case 72:
            case 74:
            case 75:
            case 78:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 109:
            case 111:
            case 112:
            case 116:
            case 117:
            case 118:
            case 119:
            case 121:
            case 122:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 152:
            case 153:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 176:
            case 179:
            case 182:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 191:
            case 192:
            case 196:
            case 198:
            case 204:
            	{
            		alt56=1;
            	}
                break;
            case 199:
            	{
            		alt56=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 56 );
                ex->set_state( 0 );


                goto rulevariable_initializerEx;

            }

            switch (alt56)
            {
        	case 1:
        	    // CSharp.g:372:4: expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_expression_in_variable_initializer1924);
        	        expression191=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulevariable_initializerEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression191.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:372:17: array_initializer
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_array_initializer_in_variable_initializer1928);
        	        array_initializer192=array_initializer();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulevariable_initializerEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, array_initializer192.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulevariable_initializerEx; /* Prevent compiler warnings */
    rulevariable_initializerEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(46, variable_initializer_StartIndex); }

    return retval;
}
/* $ANTLR end variable_initializer */

/**
 * $ANTLR start sizeof_expression
 * CSharp.g:375:1: sizeof_expression : 'sizeof' '(' unmanaged_type ')' ;
 */
CSharpParser_sizeof_expression_return
CSharpParser::sizeof_expression()
{
    CSharpParser_sizeof_expression_return retval(this);

    ANTLR_MARKER sizeof_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal193;
    const CommonTokenType*    char_literal194;
    const CommonTokenType*    char_literal196;
    CSharpParser_unmanaged_type_return unmanaged_type195;
    typedef	CSharpParser_unmanaged_type_return RETURN_TYPE_unmanaged_type195;

    ImplTraits::TreeType* string_literal193_tree;
    ImplTraits::TreeType* char_literal194_tree;
    ImplTraits::TreeType* char_literal196_tree;

    /* Initialize rule variables
     */
    sizeof_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(47)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal193       = NULL;
    char_literal194       = NULL;
    char_literal196       = NULL;
    unmanaged_type195.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal193_tree   = NULL;
    char_literal194_tree   = NULL;
    char_literal196_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:376:2: ( 'sizeof' '(' unmanaged_type ')' )
        // CSharp.g:376:4: 'sizeof' '(' unmanaged_type ')'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal193 =  this->matchToken(176, &FOLLOW_176_in_sizeof_expression1939);
            if  (this->hasException())
            {
                goto rulesizeof_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal193_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal193));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal193_tree);
            }

            char_literal194 =  this->matchToken(71, &FOLLOW_71_in_sizeof_expression1943);
            if  (this->hasException())
            {
                goto rulesizeof_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal194_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal194));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal194_tree);
            }

            this->followPush(FOLLOW_unmanaged_type_in_sizeof_expression1947);
            unmanaged_type195=unmanaged_type();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesizeof_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unmanaged_type195.tree);

            char_literal196 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_sizeof_expression1951);
            if  (this->hasException())
            {
                goto rulesizeof_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal196_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal196));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal196_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulesizeof_expressionEx; /* Prevent compiler warnings */
    rulesizeof_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(47, sizeof_expression_StartIndex); }

    return retval;
}
/* $ANTLR end sizeof_expression */

/**
 * $ANTLR start checked_expression
 * CSharp.g:379:1: checked_expression : 'checked' '(' expression ')' ;
 */
CSharpParser_checked_expression_return
CSharpParser::checked_expression()
{
    CSharpParser_checked_expression_return retval(this);

    ANTLR_MARKER checked_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal197;
    const CommonTokenType*    char_literal198;
    const CommonTokenType*    char_literal200;
    CSharpParser_expression_return expression199;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression199;

    ImplTraits::TreeType* string_literal197_tree;
    ImplTraits::TreeType* char_literal198_tree;
    ImplTraits::TreeType* char_literal200_tree;

    /* Initialize rule variables
     */
    checked_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(48)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal197       = NULL;
    char_literal198       = NULL;
    char_literal200       = NULL;
    expression199.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal197_tree   = NULL;
    char_literal198_tree   = NULL;
    char_literal200_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:380:2: ( 'checked' '(' expression ')' )
        // CSharp.g:380:4: 'checked' '(' expression ')'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal197 =  this->matchToken(112, &FOLLOW_112_in_checked_expression1962);
            if  (this->hasException())
            {
                goto rulechecked_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal197_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal197));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal197_tree);
            }

            char_literal198 =  this->matchToken(71, &FOLLOW_71_in_checked_expression1966);
            if  (this->hasException())
            {
                goto rulechecked_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal198_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal198));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal198_tree);
            }

            this->followPush(FOLLOW_expression_in_checked_expression1970);
            expression199=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulechecked_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression199.tree);

            char_literal200 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_checked_expression1974);
            if  (this->hasException())
            {
                goto rulechecked_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal200_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal200));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal200_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulechecked_expressionEx; /* Prevent compiler warnings */
    rulechecked_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(48, checked_expression_StartIndex); }

    return retval;
}
/* $ANTLR end checked_expression */

/**
 * $ANTLR start unchecked_expression
 * CSharp.g:383:1: unchecked_expression : 'unchecked' '(' expression ')' ;
 */
CSharpParser_unchecked_expression_return
CSharpParser::unchecked_expression()
{
    CSharpParser_unchecked_expression_return retval(this);

    ANTLR_MARKER unchecked_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal201;
    const CommonTokenType*    char_literal202;
    const CommonTokenType*    char_literal204;
    CSharpParser_expression_return expression203;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression203;

    ImplTraits::TreeType* string_literal201_tree;
    ImplTraits::TreeType* char_literal202_tree;
    ImplTraits::TreeType* char_literal204_tree;

    /* Initialize rule variables
     */
    unchecked_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(49)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal201       = NULL;
    char_literal202       = NULL;
    char_literal204       = NULL;
    expression203.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal201_tree   = NULL;
    char_literal202_tree   = NULL;
    char_literal204_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:384:2: ( 'unchecked' '(' expression ')' )
        // CSharp.g:384:4: 'unchecked' '(' expression ')'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal201 =  this->matchToken(189, &FOLLOW_189_in_unchecked_expression1985);
            if  (this->hasException())
            {
                goto ruleunchecked_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal201_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal201));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal201_tree);
            }

            char_literal202 =  this->matchToken(71, &FOLLOW_71_in_unchecked_expression1989);
            if  (this->hasException())
            {
                goto ruleunchecked_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal202_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal202));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal202_tree);
            }

            this->followPush(FOLLOW_expression_in_unchecked_expression1993);
            expression203=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunchecked_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression203.tree);

            char_literal204 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_unchecked_expression1997);
            if  (this->hasException())
            {
                goto ruleunchecked_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal204_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal204));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal204_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleunchecked_expressionEx; /* Prevent compiler warnings */
    ruleunchecked_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(49, unchecked_expression_StartIndex); }

    return retval;
}
/* $ANTLR end unchecked_expression */

/**
 * $ANTLR start default_value_expression
 * CSharp.g:387:1: default_value_expression : 'default' '(' type ')' ;
 */
CSharpParser_default_value_expression_return
CSharpParser::default_value_expression()
{
    CSharpParser_default_value_expression_return retval(this);

    ANTLR_MARKER default_value_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal205;
    const CommonTokenType*    char_literal206;
    const CommonTokenType*    char_literal208;
    CSharpParser_type_return type207;
    typedef	CSharpParser_type_return RETURN_TYPE_type207;

    ImplTraits::TreeType* string_literal205_tree;
    ImplTraits::TreeType* char_literal206_tree;
    ImplTraits::TreeType* char_literal208_tree;

    /* Initialize rule variables
     */
    default_value_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(50)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal205       = NULL;
    char_literal206       = NULL;
    char_literal208       = NULL;
    type207.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal205_tree   = NULL;
    char_literal206_tree   = NULL;
    char_literal208_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:388:2: ( 'default' '(' type ')' )
        // CSharp.g:388:4: 'default' '(' type ')'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal205 =  this->matchToken(117, &FOLLOW_117_in_default_value_expression2008);
            if  (this->hasException())
            {
                goto ruledefault_value_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal205_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal205));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal205_tree);
            }

            char_literal206 =  this->matchToken(71, &FOLLOW_71_in_default_value_expression2012);
            if  (this->hasException())
            {
                goto ruledefault_value_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal206_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal206));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal206_tree);
            }

            this->followPush(FOLLOW_type_in_default_value_expression2016);
            type207=type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledefault_value_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type207.tree);

            char_literal208 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_default_value_expression2020);
            if  (this->hasException())
            {
                goto ruledefault_value_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal208_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal208));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal208_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruledefault_value_expressionEx; /* Prevent compiler warnings */
    ruledefault_value_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(50, default_value_expression_StartIndex); }

    return retval;
}
/* $ANTLR end default_value_expression */

/**
 * $ANTLR start anonymous_method_expression
 * CSharp.g:391:1: anonymous_method_expression : 'delegate' ( explicit_anonymous_function_signature )? block ;
 */
CSharpParser_anonymous_method_expression_return
CSharpParser::anonymous_method_expression()
{
    CSharpParser_anonymous_method_expression_return retval(this);

    ANTLR_MARKER anonymous_method_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal209;
    CSharpParser_explicit_anonymous_function_signature_return explicit_anonymous_function_signature210;
    typedef	CSharpParser_explicit_anonymous_function_signature_return RETURN_TYPE_explicit_anonymous_function_signature210;

    CSharpParser_block_return block211;
    typedef	CSharpParser_block_return RETURN_TYPE_block211;

    ImplTraits::TreeType* string_literal209_tree;

    /* Initialize rule variables
     */
    anonymous_method_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(51)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal209       = NULL;
    explicit_anonymous_function_signature210.tree = NULL;

    block211.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal209_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:392:2: ( 'delegate' ( explicit_anonymous_function_signature )? block )
        // CSharp.g:392:4: 'delegate' ( explicit_anonymous_function_signature )? block
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal209 =  this->matchToken(118, &FOLLOW_118_in_anonymous_method_expression2031);
            if  (this->hasException())
            {
                goto ruleanonymous_method_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal209_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal209));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal209_tree);
            }

            // CSharp.g:392:17: ( explicit_anonymous_function_signature )?
            {
                int alt57=2;
                switch ( this->LA(1) )
                {
                    case 71:
                    	{
                    		alt57=1;
                    	}
                        break;
                }

                switch (alt57)
                {
            	case 1:
            	    // CSharp.g:392:17: explicit_anonymous_function_signature
            	    {
            	        this->followPush(FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression2035);
            	        explicit_anonymous_function_signature210=explicit_anonymous_function_signature();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleanonymous_method_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, explicit_anonymous_function_signature210.tree);

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_block_in_anonymous_method_expression2040);
            block211=block();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleanonymous_method_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block211.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleanonymous_method_expressionEx; /* Prevent compiler warnings */
    ruleanonymous_method_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(51, anonymous_method_expression_StartIndex); }

    return retval;
}
/* $ANTLR end anonymous_method_expression */

/**
 * $ANTLR start explicit_anonymous_function_signature
 * CSharp.g:395:1: explicit_anonymous_function_signature : '(' ( explicit_anonymous_function_parameter_list )? ')' ;
 */
CSharpParser_explicit_anonymous_function_signature_return
CSharpParser::explicit_anonymous_function_signature()
{
    CSharpParser_explicit_anonymous_function_signature_return retval(this);

    ANTLR_MARKER explicit_anonymous_function_signature_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal212;
    const CommonTokenType*    char_literal214;
    CSharpParser_explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list213;
    typedef	CSharpParser_explicit_anonymous_function_parameter_list_return RETURN_TYPE_explicit_anonymous_function_parameter_list213;

    ImplTraits::TreeType* char_literal212_tree;
    ImplTraits::TreeType* char_literal214_tree;

    /* Initialize rule variables
     */
    explicit_anonymous_function_signature_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(52)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal212       = NULL;
    char_literal214       = NULL;
    explicit_anonymous_function_parameter_list213.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal212_tree   = NULL;
    char_literal214_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:396:2: ( '(' ( explicit_anonymous_function_parameter_list )? ')' )
        // CSharp.g:396:4: '(' ( explicit_anonymous_function_parameter_list )? ')'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal212 =  this->matchToken(71, &FOLLOW_71_in_explicit_anonymous_function_signature2051);
            if  (this->hasException())
            {
                goto ruleexplicit_anonymous_function_signatureEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal212_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal212));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal212_tree);
            }

            // CSharp.g:396:10: ( explicit_anonymous_function_parameter_list )?
            {
                int alt58=2;
                switch ( this->LA(1) )
                {
                    case IDENTIFIER:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 106:
                    case 108:
                    case 109:
                    case 111:
                    case 116:
                    case 119:
                    case 121:
                    case 122:
                    case 124:
                    case 128:
                    case 131:
                    case 134:
                    case 137:
                    case 140:
                    case 143:
                    case 145:
                    case 146:
                    case 148:
                    case 149:
                    case 150:
                    case 153:
                    case 154:
                    case 156:
                    case 157:
                    case 159:
                    case 162:
                    case 164:
                    case 168:
                    case 169:
                    case 171:
                    case 173:
                    case 174:
                    case 175:
                    case 179:
                    case 185:
                    case 187:
                    case 188:
                    case 191:
                    case 192:
                    case 194:
                    case 196:
                    case 198:
                    	{
                    		alt58=1;
                    	}
                        break;
                }

                switch (alt58)
                {
            	case 1:
            	    // CSharp.g:396:10: explicit_anonymous_function_parameter_list
            	    {
            	        this->followPush(FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature2055);
            	        explicit_anonymous_function_parameter_list213=explicit_anonymous_function_parameter_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplicit_anonymous_function_signatureEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, explicit_anonymous_function_parameter_list213.tree);

            	    }
            	    break;

                }
            }

            char_literal214 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_explicit_anonymous_function_signature2060);
            if  (this->hasException())
            {
                goto ruleexplicit_anonymous_function_signatureEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal214_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal214));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal214_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexplicit_anonymous_function_signatureEx; /* Prevent compiler warnings */
    ruleexplicit_anonymous_function_signatureEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(52, explicit_anonymous_function_signature_StartIndex); }

    return retval;
}
/* $ANTLR end explicit_anonymous_function_signature */

/**
 * $ANTLR start explicit_anonymous_function_parameter_list
 * CSharp.g:399:1: explicit_anonymous_function_parameter_list : explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )* ;
 */
CSharpParser_explicit_anonymous_function_parameter_list_return
CSharpParser::explicit_anonymous_function_parameter_list()
{
    CSharpParser_explicit_anonymous_function_parameter_list_return retval(this);

    ANTLR_MARKER explicit_anonymous_function_parameter_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal216;
    CSharpParser_explicit_anonymous_function_parameter_return explicit_anonymous_function_parameter215;
    typedef	CSharpParser_explicit_anonymous_function_parameter_return RETURN_TYPE_explicit_anonymous_function_parameter215;

    CSharpParser_explicit_anonymous_function_parameter_return explicit_anonymous_function_parameter217;
    typedef	CSharpParser_explicit_anonymous_function_parameter_return RETURN_TYPE_explicit_anonymous_function_parameter217;

    ImplTraits::TreeType* char_literal216_tree;

    /* Initialize rule variables
     */
    explicit_anonymous_function_parameter_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(53)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal216       = NULL;
    explicit_anonymous_function_parameter215.tree = NULL;

    explicit_anonymous_function_parameter217.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal216_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:400:2: ( explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )* )
        // CSharp.g:400:4: explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2071);
            explicit_anonymous_function_parameter215=explicit_anonymous_function_parameter();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexplicit_anonymous_function_parameter_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, explicit_anonymous_function_parameter215.tree);

            // CSharp.g:400:44: ( ',' explicit_anonymous_function_parameter )*

            for (;;)
            {
                int alt59=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt59=1;
                	}
                    break;

                }

                switch (alt59)
                {
            	case 1:
            	    // CSharp.g:400:45: ',' explicit_anonymous_function_parameter
            	    {
            	        char_literal216 =  this->matchToken(77, &FOLLOW_77_in_explicit_anonymous_function_parameter_list2076);
            	        if  (this->hasException())
            	        {
            	            goto ruleexplicit_anonymous_function_parameter_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal216_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal216));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal216_tree);
            	        }

            	        this->followPush(FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2080);
            	        explicit_anonymous_function_parameter217=explicit_anonymous_function_parameter();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplicit_anonymous_function_parameter_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, explicit_anonymous_function_parameter217.tree);

            	    }
            	    break;

            	default:
            	    goto loop59;	/* break out of the loop */
            	    break;
                }
            }
            loop59: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexplicit_anonymous_function_parameter_listEx; /* Prevent compiler warnings */
    ruleexplicit_anonymous_function_parameter_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(53, explicit_anonymous_function_parameter_list_StartIndex); }

    return retval;
}
/* $ANTLR end explicit_anonymous_function_parameter_list */

/**
 * $ANTLR start explicit_anonymous_function_parameter
 * CSharp.g:403:1: explicit_anonymous_function_parameter : ( anonymous_function_parameter_modifier )? type identifier ;
 */
CSharpParser_explicit_anonymous_function_parameter_return
CSharpParser::explicit_anonymous_function_parameter()
{
    CSharpParser_explicit_anonymous_function_parameter_return retval(this);

    ANTLR_MARKER explicit_anonymous_function_parameter_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_anonymous_function_parameter_modifier_return anonymous_function_parameter_modifier218;
    typedef	CSharpParser_anonymous_function_parameter_modifier_return RETURN_TYPE_anonymous_function_parameter_modifier218;

    CSharpParser_type_return type219;
    typedef	CSharpParser_type_return RETURN_TYPE_type219;

    CSharpParser_identifier_return identifier220;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier220;


    /* Initialize rule variables
     */
    explicit_anonymous_function_parameter_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(54)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    anonymous_function_parameter_modifier218.tree = NULL;

    type219.tree = NULL;

    identifier220.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:404:2: ( ( anonymous_function_parameter_modifier )? type identifier )
        // CSharp.g:404:4: ( anonymous_function_parameter_modifier )? type identifier
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:404:4: ( anonymous_function_parameter_modifier )?
            {
                int alt60=2;
                switch ( this->LA(1) )
                {
                    case 157:
                    case 168:
                    	{
                    		alt60=1;
                    	}
                        break;
                }

                switch (alt60)
                {
            	case 1:
            	    // CSharp.g:404:4: anonymous_function_parameter_modifier
            	    {
            	        this->followPush(FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter2093);
            	        anonymous_function_parameter_modifier218=anonymous_function_parameter_modifier();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplicit_anonymous_function_parameterEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, anonymous_function_parameter_modifier218.tree);

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_type_in_explicit_anonymous_function_parameter2098);
            type219=type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexplicit_anonymous_function_parameterEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type219.tree);

            this->followPush(FOLLOW_identifier_in_explicit_anonymous_function_parameter2102);
            identifier220=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexplicit_anonymous_function_parameterEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier220.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexplicit_anonymous_function_parameterEx; /* Prevent compiler warnings */
    ruleexplicit_anonymous_function_parameterEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(54, explicit_anonymous_function_parameter_StartIndex); }

    return retval;
}
/* $ANTLR end explicit_anonymous_function_parameter */

/**
 * $ANTLR start anonymous_function_parameter_modifier
 * CSharp.g:407:1: anonymous_function_parameter_modifier : ( 'ref' | 'out' );
 */
CSharpParser_anonymous_function_parameter_modifier_return
CSharpParser::anonymous_function_parameter_modifier()
{
    CSharpParser_anonymous_function_parameter_modifier_return retval(this);

    ANTLR_MARKER anonymous_function_parameter_modifier_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set221;

    ImplTraits::TreeType* set221_tree;

    /* Initialize rule variables
     */
    anonymous_function_parameter_modifier_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(55)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set221       = NULL;
    retval.call_start_placeholder(); 


    set221_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:408:2: ( 'ref' | 'out' )
        // CSharp.g:
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            set221=(const CommonTokenType*) this->LT(1);

            if ( this->LA(1) == 157 || this->LA(1) == 168 )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set221))
                );
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruleanonymous_function_parameter_modifierEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleanonymous_function_parameter_modifierEx; /* Prevent compiler warnings */
    ruleanonymous_function_parameter_modifierEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(55, anonymous_function_parameter_modifier_StartIndex); }

    return retval;
}
/* $ANTLR end anonymous_function_parameter_modifier */

/**
 * $ANTLR start object_creation_expression
 * CSharp.g:413:1: object_creation_expression : type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) ;
 */
CSharpParser_object_creation_expression_return
CSharpParser::object_creation_expression()
{
    CSharpParser_object_creation_expression_return retval(this);

    ANTLR_MARKER object_creation_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal223;
    const CommonTokenType*    char_literal225;
    CSharpParser_type_return type222;
    typedef	CSharpParser_type_return RETURN_TYPE_type222;

    CSharpParser_argument_list_return argument_list224;
    typedef	CSharpParser_argument_list_return RETURN_TYPE_argument_list224;

    CSharpParser_object_or_collection_initializer_return object_or_collection_initializer226;
    typedef	CSharpParser_object_or_collection_initializer_return RETURN_TYPE_object_or_collection_initializer226;

    CSharpParser_object_or_collection_initializer_return object_or_collection_initializer227;
    typedef	CSharpParser_object_or_collection_initializer_return RETURN_TYPE_object_or_collection_initializer227;

    ImplTraits::TreeType* char_literal223_tree;
    ImplTraits::TreeType* char_literal225_tree;

    /* Initialize rule variables
     */
    object_creation_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(56)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal223       = NULL;
    char_literal225       = NULL;
    type222.tree = NULL;

    argument_list224.tree = NULL;

    object_or_collection_initializer226.tree = NULL;

    object_or_collection_initializer227.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal223_tree   = NULL;
    char_literal225_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:413:27: ( type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) )
        // CSharp.g:415:2: type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_type_in_object_creation_expression2132);
            type222=type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleobject_creation_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type222.tree);

            // CSharp.g:416:3: ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
            {
                int alt63=2;
                switch ( this->LA(1) )
                {
                case 71:
                	{
                		alt63=1;
                	}
                    break;
                case 199:
                	{
                		alt63=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 63 );
                    ex->set_state( 0 );


                    goto ruleobject_creation_expressionEx;

                }

                switch (alt63)
                {
            	case 1:
            	    // CSharp.g:417:4: '(' ( argument_list )? ')' ( object_or_collection_initializer )?
            	    {
            	        char_literal223 =  this->matchToken(71, &FOLLOW_71_in_object_creation_expression2144);
            	        if  (this->hasException())
            	        {
            	            goto ruleobject_creation_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal223_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal223));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal223_tree);
            	        }

            	        // CSharp.g:417:10: ( argument_list )?
            	        {
            	            int alt61=2;
            	            switch ( this->LA(1) )
            	            {
            	                case Character_literal:
            	                case FALSE:
            	                case Hex_number:
            	                case IDENTIFIER:
            	                case LT_NULL:
            	                case MINUS:
            	                case NUMBER:
            	                case Real_literal:
            	                case STRINGLITERAL:
            	                case TRUE:
            	                case Verbatim_string_literal:
            	                case 64:
            	                case 69:
            	                case 71:
            	                case 72:
            	                case 74:
            	                case 75:
            	                case 78:
            	                case 98:
            	                case 100:
            	                case 101:
            	                case 103:
            	                case 104:
            	                case 105:
            	                case 106:
            	                case 108:
            	                case 109:
            	                case 111:
            	                case 112:
            	                case 116:
            	                case 117:
            	                case 118:
            	                case 119:
            	                case 121:
            	                case 122:
            	                case 124:
            	                case 128:
            	                case 131:
            	                case 134:
            	                case 137:
            	                case 140:
            	                case 143:
            	                case 145:
            	                case 146:
            	                case 148:
            	                case 149:
            	                case 150:
            	                case 152:
            	                case 153:
            	                case 154:
            	                case 156:
            	                case 157:
            	                case 159:
            	                case 162:
            	                case 164:
            	                case 168:
            	                case 169:
            	                case 171:
            	                case 173:
            	                case 174:
            	                case 175:
            	                case 176:
            	                case 179:
            	                case 182:
            	                case 185:
            	                case 186:
            	                case 187:
            	                case 188:
            	                case 189:
            	                case 191:
            	                case 192:
            	                case 196:
            	                case 198:
            	                case 204:
            	                	{
            	                		alt61=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt61)
            	            {
            	        	case 1:
            	        	    // CSharp.g:417:10: argument_list
            	        	    {
            	        	        this->followPush(FOLLOW_argument_list_in_object_creation_expression2148);
            	        	        argument_list224=argument_list();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleobject_creation_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, argument_list224.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	        char_literal225 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_object_creation_expression2153);
            	        if  (this->hasException())
            	        {
            	            goto ruleobject_creation_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal225_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal225));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal225_tree);
            	        }

            	        // CSharp.g:417:33: ( object_or_collection_initializer )?
            	        {
            	            int alt62=2;
            	            switch ( this->LA(1) )
            	            {
            	                case 199:
            	                	{
            	                		alt62=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt62)
            	            {
            	        	case 1:
            	        	    // CSharp.g:417:33: object_or_collection_initializer
            	        	    {
            	        	        this->followPush(FOLLOW_object_or_collection_initializer_in_object_creation_expression2157);
            	        	        object_or_collection_initializer226=object_or_collection_initializer();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleobject_creation_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, object_or_collection_initializer226.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // CSharp.g:418:5: object_or_collection_initializer
            	    {
            	        this->followPush(FOLLOW_object_or_collection_initializer_in_object_creation_expression2166);
            	        object_or_collection_initializer227=object_or_collection_initializer();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleobject_creation_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, object_or_collection_initializer227.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleobject_creation_expressionEx; /* Prevent compiler warnings */
    ruleobject_creation_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(56, object_creation_expression_StartIndex); }

    return retval;
}
/* $ANTLR end object_creation_expression */

/**
 * $ANTLR start object_or_collection_initializer
 * CSharp.g:422:1: object_or_collection_initializer : '{' ( object_initializer | collection_initializer ) ;
 */
CSharpParser_object_or_collection_initializer_return
CSharpParser::object_or_collection_initializer()
{
    CSharpParser_object_or_collection_initializer_return retval(this);

    ANTLR_MARKER object_or_collection_initializer_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal228;
    CSharpParser_object_initializer_return object_initializer229;
    typedef	CSharpParser_object_initializer_return RETURN_TYPE_object_initializer229;

    CSharpParser_collection_initializer_return collection_initializer230;
    typedef	CSharpParser_collection_initializer_return RETURN_TYPE_collection_initializer230;

    ImplTraits::TreeType* char_literal228_tree;

    /* Initialize rule variables
     */
    object_or_collection_initializer_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(57)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal228       = NULL;
    object_initializer229.tree = NULL;

    collection_initializer230.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal228_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:423:2: ( '{' ( object_initializer | collection_initializer ) )
        // CSharp.g:423:4: '{' ( object_initializer | collection_initializer )
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal228 =  this->matchToken(199, &FOLLOW_199_in_object_or_collection_initializer2182);
            if  (this->hasException())
            {
                goto ruleobject_or_collection_initializerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal228_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal228));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal228_tree);
            }

            // CSharp.g:423:9: ( object_initializer | collection_initializer )
            {
                int alt64=2;
                switch ( this->LA(1) )
                {
                case 134:
                	{
                		switch ( this->LA(2) )
                		{
                		case 88:
                			{
                				alt64=1;
                			}
                		    break;
                		case DOT:
                		case GT:
                		case IDENTIFIER:
                		case MINUS:
                		case PTR:
                		case 65:
                		case 66:
                		case 68:
                		case 69:
                		case 71:
                		case 72:
                		case 74:
                		case 75:
                		case 77:
                		case 78:
                		case 80:
                		case 83:
                		case 84:
                		case 85:
                		case 87:
                		case 89:
                		case 90:
                		case 91:
                		case 92:
                		case 93:
                		case 94:
                		case 96:
                		case 98:
                		case 100:
                		case 101:
                		case 102:
                		case 103:
                		case 104:
                		case 106:
                		case 108:
                		case 109:
                		case 111:
                		case 116:
                		case 119:
                		case 121:
                		case 122:
                		case 124:
                		case 128:
                		case 131:
                		case 134:
                		case 137:
                		case 140:
                		case 143:
                		case 144:
                		case 145:
                		case 146:
                		case 148:
                		case 149:
                		case 150:
                		case 153:
                		case 154:
                		case 156:
                		case 159:
                		case 162:
                		case 164:
                		case 169:
                		case 171:
                		case 173:
                		case 174:
                		case 175:
                		case 179:
                		case 185:
                		case 187:
                		case 188:
                		case 191:
                		case 192:
                		case 194:
                		case 196:
                		case 198:
                		case 200:
                		case 202:
                		case 203:
                			{
                				alt64=2;
                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return retval;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 64 );
                		    ex->set_state( 1 );


                		    goto ruleobject_or_collection_initializerEx;

                		}

                	}
                    break;
                case 77:
                case 203:
                	{
                		alt64=1;
                	}
                    break;
                case Character_literal:
                case FALSE:
                case Hex_number:
                case LT_NULL:
                case MINUS:
                case NUMBER:
                case Real_literal:
                case STRINGLITERAL:
                case TRUE:
                case Verbatim_string_literal:
                case 64:
                case 69:
                case 71:
                case 72:
                case 74:
                case 75:
                case 78:
                case 105:
                case 106:
                case 109:
                case 111:
                case 112:
                case 116:
                case 117:
                case 118:
                case 121:
                case 131:
                case 140:
                case 148:
                case 152:
                case 153:
                case 171:
                case 175:
                case 176:
                case 179:
                case 182:
                case 186:
                case 187:
                case 188:
                case 189:
                case 191:
                case 199:
                case 204:
                	{
                		alt64=2;
                	}
                    break;
                case IDENTIFIER:
                case 98:
                case 100:
                case 101:
                case 103:
                case 104:
                case 108:
                case 119:
                case 122:
                case 124:
                case 128:
                case 137:
                case 143:
                case 145:
                case 146:
                case 149:
                case 150:
                case 154:
                case 156:
                case 159:
                case 162:
                case 164:
                case 169:
                case 173:
                case 174:
                case 185:
                case 192:
                case 196:
                case 198:
                	{
                		switch ( this->LA(2) )
                		{
                		case 88:
                			{
                				alt64=1;
                			}
                		    break;
                		case DOT:
                		case GT:
                		case MINUS:
                		case PTR:
                		case 65:
                		case 66:
                		case 68:
                		case 69:
                		case 71:
                		case 72:
                		case 74:
                		case 75:
                		case 77:
                		case 78:
                		case 80:
                		case 83:
                		case 84:
                		case 85:
                		case 87:
                		case 89:
                		case 90:
                		case 91:
                		case 92:
                		case 93:
                		case 94:
                		case 96:
                		case 102:
                		case 144:
                		case 200:
                		case 202:
                		case 203:
                			{
                				alt64=2;
                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return retval;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 64 );
                		    ex->set_state( 4 );


                		    goto ruleobject_or_collection_initializerEx;

                		}

                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 64 );
                    ex->set_state( 0 );


                    goto ruleobject_or_collection_initializerEx;

                }

                switch (alt64)
                {
            	case 1:
            	    // CSharp.g:423:10: object_initializer
            	    {
            	        this->followPush(FOLLOW_object_initializer_in_object_or_collection_initializer2186);
            	        object_initializer229=object_initializer();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleobject_or_collection_initializerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, object_initializer229.tree);

            	    }
            	    break;
            	case 2:
            	    // CSharp.g:424:4: collection_initializer
            	    {
            	        this->followPush(FOLLOW_collection_initializer_in_object_or_collection_initializer2192);
            	        collection_initializer230=collection_initializer();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleobject_or_collection_initializerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, collection_initializer230.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleobject_or_collection_initializerEx; /* Prevent compiler warnings */
    ruleobject_or_collection_initializerEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(57, object_or_collection_initializer_StartIndex); }

    return retval;
}
/* $ANTLR end object_or_collection_initializer */

/**
 * $ANTLR start collection_initializer
 * CSharp.g:428:1: collection_initializer : element_initializer_list ( ',' )? '}' ;
 */
CSharpParser_collection_initializer_return
CSharpParser::collection_initializer()
{
    CSharpParser_collection_initializer_return retval(this);

    ANTLR_MARKER collection_initializer_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal232;
    const CommonTokenType*    char_literal233;
    CSharpParser_element_initializer_list_return element_initializer_list231;
    typedef	CSharpParser_element_initializer_list_return RETURN_TYPE_element_initializer_list231;

    ImplTraits::TreeType* char_literal232_tree;
    ImplTraits::TreeType* char_literal233_tree;

    /* Initialize rule variables
     */
    collection_initializer_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(58)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal232       = NULL;
    char_literal233       = NULL;
    element_initializer_list231.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal232_tree   = NULL;
    char_literal233_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:429:2: ( element_initializer_list ( ',' )? '}' )
        // CSharp.g:429:4: element_initializer_list ( ',' )? '}'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_element_initializer_list_in_collection_initializer2206);
            element_initializer_list231=element_initializer_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecollection_initializerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, element_initializer_list231.tree);

            // CSharp.g:429:31: ( ',' )?
            {
                int alt65=2;
                switch ( this->LA(1) )
                {
                    case 77:
                    	{
                    		alt65=1;
                    	}
                        break;
                }

                switch (alt65)
                {
            	case 1:
            	    // CSharp.g:429:31: ','
            	    {
            	        char_literal232 =  this->matchToken(77, &FOLLOW_77_in_collection_initializer2210);
            	        if  (this->hasException())
            	        {
            	            goto rulecollection_initializerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal232_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal232));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal232_tree);
            	        }

            	    }
            	    break;

                }
            }

            char_literal233 =  this->matchToken(203, &FOLLOW_203_in_collection_initializer2215);
            if  (this->hasException())
            {
                goto rulecollection_initializerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal233_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal233));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal233_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulecollection_initializerEx; /* Prevent compiler warnings */
    rulecollection_initializerEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(58, collection_initializer_StartIndex); }

    return retval;
}
/* $ANTLR end collection_initializer */

/**
 * $ANTLR start element_initializer_list
 * CSharp.g:432:1: element_initializer_list : element_initializer ( ',' element_initializer )* ;
 */
CSharpParser_element_initializer_list_return
CSharpParser::element_initializer_list()
{
    CSharpParser_element_initializer_list_return retval(this);

    ANTLR_MARKER element_initializer_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal235;
    CSharpParser_element_initializer_return element_initializer234;
    typedef	CSharpParser_element_initializer_return RETURN_TYPE_element_initializer234;

    CSharpParser_element_initializer_return element_initializer236;
    typedef	CSharpParser_element_initializer_return RETURN_TYPE_element_initializer236;

    ImplTraits::TreeType* char_literal235_tree;

    /* Initialize rule variables
     */
    element_initializer_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(59)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal235       = NULL;
    element_initializer234.tree = NULL;

    element_initializer236.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal235_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:433:2: ( element_initializer ( ',' element_initializer )* )
        // CSharp.g:433:4: element_initializer ( ',' element_initializer )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_element_initializer_in_element_initializer_list2226);
            element_initializer234=element_initializer();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelement_initializer_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, element_initializer234.tree);

            // CSharp.g:433:25: ( ',' element_initializer )*

            for (;;)
            {
                int alt66=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		switch ( this->LA(2) )
                		{
                		case Character_literal:
                		case FALSE:
                		case Hex_number:
                		case IDENTIFIER:
                		case LT_NULL:
                		case MINUS:
                		case NUMBER:
                		case Real_literal:
                		case STRINGLITERAL:
                		case TRUE:
                		case Verbatim_string_literal:
                		case 64:
                		case 69:
                		case 71:
                		case 72:
                		case 74:
                		case 75:
                		case 78:
                		case 98:
                		case 100:
                		case 101:
                		case 103:
                		case 104:
                		case 105:
                		case 106:
                		case 108:
                		case 109:
                		case 111:
                		case 112:
                		case 116:
                		case 117:
                		case 118:
                		case 119:
                		case 121:
                		case 122:
                		case 124:
                		case 128:
                		case 131:
                		case 134:
                		case 137:
                		case 140:
                		case 143:
                		case 145:
                		case 146:
                		case 148:
                		case 149:
                		case 150:
                		case 152:
                		case 153:
                		case 154:
                		case 156:
                		case 159:
                		case 162:
                		case 164:
                		case 169:
                		case 171:
                		case 173:
                		case 174:
                		case 175:
                		case 176:
                		case 179:
                		case 182:
                		case 185:
                		case 186:
                		case 187:
                		case 188:
                		case 189:
                		case 191:
                		case 192:
                		case 196:
                		case 198:
                		case 199:
                		case 204:
                			{
                				alt66=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt66)
                {
            	case 1:
            	    // CSharp.g:433:26: ',' element_initializer
            	    {
            	        char_literal235 =  this->matchToken(77, &FOLLOW_77_in_element_initializer_list2230);
            	        if  (this->hasException())
            	        {
            	            goto ruleelement_initializer_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal235_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal235));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal235_tree);
            	        }

            	        this->followPush(FOLLOW_element_initializer_in_element_initializer_list2232);
            	        element_initializer236=element_initializer();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleelement_initializer_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, element_initializer236.tree);

            	    }
            	    break;

            	default:
            	    goto loop66;	/* break out of the loop */
            	    break;
                }
            }
            loop66: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleelement_initializer_listEx; /* Prevent compiler warnings */
    ruleelement_initializer_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(59, element_initializer_list_StartIndex); }

    return retval;
}
/* $ANTLR end element_initializer_list */

/**
 * $ANTLR start element_initializer
 * CSharp.g:436:1: element_initializer : ( non_assignment_expression | '{' expression_list '}' );
 */
CSharpParser_element_initializer_return
CSharpParser::element_initializer()
{
    CSharpParser_element_initializer_return retval(this);

    ANTLR_MARKER element_initializer_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal238;
    const CommonTokenType*    char_literal240;
    CSharpParser_non_assignment_expression_return non_assignment_expression237;
    typedef	CSharpParser_non_assignment_expression_return RETURN_TYPE_non_assignment_expression237;

    CSharpParser_expression_list_return expression_list239;
    typedef	CSharpParser_expression_list_return RETURN_TYPE_expression_list239;

    ImplTraits::TreeType* char_literal238_tree;
    ImplTraits::TreeType* char_literal240_tree;

    /* Initialize rule variables
     */
    element_initializer_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(60)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal238       = NULL;
    char_literal240       = NULL;
    non_assignment_expression237.tree = NULL;

    expression_list239.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal238_tree   = NULL;
    char_literal240_tree   = NULL;


    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:437:2: ( non_assignment_expression | '{' expression_list '}' )

            ANTLR_UINT32 alt67;

            alt67=2;

            switch ( this->LA(1) )
            {
            case Character_literal:
            case FALSE:
            case Hex_number:
            case IDENTIFIER:
            case LT_NULL:
            case MINUS:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            case 64:
            case 69:
            case 71:
            case 72:
            case 74:
            case 75:
            case 78:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 109:
            case 111:
            case 112:
            case 116:
            case 117:
            case 118:
            case 119:
            case 121:
            case 122:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 152:
            case 153:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 176:
            case 179:
            case 182:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 191:
            case 192:
            case 196:
            case 198:
            case 204:
            	{
            		alt67=1;
            	}
                break;
            case 199:
            	{
            		alt67=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 67 );
                ex->set_state( 0 );


                goto ruleelement_initializerEx;

            }

            switch (alt67)
            {
        	case 1:
        	    // CSharp.g:437:4: non_assignment_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_non_assignment_expression_in_element_initializer2245);
        	        non_assignment_expression237=non_assignment_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleelement_initializerEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, non_assignment_expression237.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:438:4: '{' expression_list '}'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        char_literal238 =  this->matchToken(199, &FOLLOW_199_in_element_initializer2251);
        	        if  (this->hasException())
        	        {
        	            goto ruleelement_initializerEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal238_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal238));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal238_tree);
        	        }

        	        this->followPush(FOLLOW_expression_list_in_element_initializer2255);
        	        expression_list239=expression_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleelement_initializerEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression_list239.tree);

        	        char_literal240 =  this->matchToken(203, &FOLLOW_203_in_element_initializer2259);
        	        if  (this->hasException())
        	        {
        	            goto ruleelement_initializerEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal240_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal240));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal240_tree);
        	        }

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleelement_initializerEx; /* Prevent compiler warnings */
    ruleelement_initializerEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(60, element_initializer_StartIndex); }

    return retval;
}
/* $ANTLR end element_initializer */

/**
 * $ANTLR start object_initializer
 * CSharp.g:447:1: object_initializer : ( member_initializer_list )? ( ',' )? '}' ;
 */
CSharpParser_object_initializer_return
CSharpParser::object_initializer()
{
    CSharpParser_object_initializer_return retval(this);

    ANTLR_MARKER object_initializer_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal242;
    const CommonTokenType*    char_literal243;
    CSharpParser_member_initializer_list_return member_initializer_list241;
    typedef	CSharpParser_member_initializer_list_return RETURN_TYPE_member_initializer_list241;

    ImplTraits::TreeType* char_literal242_tree;
    ImplTraits::TreeType* char_literal243_tree;

    /* Initialize rule variables
     */
    object_initializer_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(61)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal242       = NULL;
    char_literal243       = NULL;
    member_initializer_list241.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal242_tree   = NULL;
    char_literal243_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:448:2: ( ( member_initializer_list )? ( ',' )? '}' )
        // CSharp.g:448:4: ( member_initializer_list )? ( ',' )? '}'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:448:4: ( member_initializer_list )?
            {
                int alt68=2;
                switch ( this->LA(1) )
                {
                    case IDENTIFIER:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 108:
                    case 119:
                    case 122:
                    case 124:
                    case 128:
                    case 134:
                    case 137:
                    case 143:
                    case 145:
                    case 146:
                    case 149:
                    case 150:
                    case 154:
                    case 156:
                    case 159:
                    case 162:
                    case 164:
                    case 169:
                    case 173:
                    case 174:
                    case 185:
                    case 192:
                    case 196:
                    case 198:
                    	{
                    		alt68=1;
                    	}
                        break;
                }

                switch (alt68)
                {
            	case 1:
            	    // CSharp.g:448:4: member_initializer_list
            	    {
            	        this->followPush(FOLLOW_member_initializer_list_in_object_initializer2276);
            	        member_initializer_list241=member_initializer_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleobject_initializerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, member_initializer_list241.tree);

            	    }
            	    break;

                }
            }

            // CSharp.g:448:31: ( ',' )?
            {
                int alt69=2;
                switch ( this->LA(1) )
                {
                    case 77:
                    	{
                    		alt69=1;
                    	}
                        break;
                }

                switch (alt69)
                {
            	case 1:
            	    // CSharp.g:448:31: ','
            	    {
            	        char_literal242 =  this->matchToken(77, &FOLLOW_77_in_object_initializer2281);
            	        if  (this->hasException())
            	        {
            	            goto ruleobject_initializerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal242_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal242));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal242_tree);
            	        }

            	    }
            	    break;

                }
            }

            char_literal243 =  this->matchToken(203, &FOLLOW_203_in_object_initializer2286);
            if  (this->hasException())
            {
                goto ruleobject_initializerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal243_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal243));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal243_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleobject_initializerEx; /* Prevent compiler warnings */
    ruleobject_initializerEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(61, object_initializer_StartIndex); }

    return retval;
}
/* $ANTLR end object_initializer */

/**
 * $ANTLR start member_initializer_list
 * CSharp.g:451:1: member_initializer_list : member_initializer ( ',' member_initializer ) ;
 */
CSharpParser_member_initializer_list_return
CSharpParser::member_initializer_list()
{
    CSharpParser_member_initializer_list_return retval(this);

    ANTLR_MARKER member_initializer_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal245;
    CSharpParser_member_initializer_return member_initializer244;
    typedef	CSharpParser_member_initializer_return RETURN_TYPE_member_initializer244;

    CSharpParser_member_initializer_return member_initializer246;
    typedef	CSharpParser_member_initializer_return RETURN_TYPE_member_initializer246;

    ImplTraits::TreeType* char_literal245_tree;

    /* Initialize rule variables
     */
    member_initializer_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(62)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal245       = NULL;
    member_initializer244.tree = NULL;

    member_initializer246.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal245_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:452:2: ( member_initializer ( ',' member_initializer ) )
        // CSharp.g:452:4: member_initializer ( ',' member_initializer )
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_member_initializer_in_member_initializer_list2297);
            member_initializer244=member_initializer();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemember_initializer_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, member_initializer244.tree);

            // CSharp.g:452:24: ( ',' member_initializer )
            // CSharp.g:452:25: ',' member_initializer
            {
                char_literal245 =  this->matchToken(77, &FOLLOW_77_in_member_initializer_list2301);
                if  (this->hasException())
                {
                    goto rulemember_initializer_listEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) {
                char_literal245_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal245));
                ADAPTOR->addChild(ADAPTOR, root_0, char_literal245_tree);
                }

                this->followPush(FOLLOW_member_initializer_in_member_initializer_list2303);
                member_initializer246=member_initializer();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulemember_initializer_listEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, member_initializer246.tree);

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemember_initializer_listEx; /* Prevent compiler warnings */
    rulemember_initializer_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(62, member_initializer_list_StartIndex); }

    return retval;
}
/* $ANTLR end member_initializer_list */

/**
 * $ANTLR start member_initializer
 * CSharp.g:455:1: member_initializer : identifier '=' initializer_value ;
 */
CSharpParser_member_initializer_return
CSharpParser::member_initializer()
{
    CSharpParser_member_initializer_return retval(this);

    ANTLR_MARKER member_initializer_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal248;
    CSharpParser_identifier_return identifier247;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier247;

    CSharpParser_initializer_value_return initializer_value249;
    typedef	CSharpParser_initializer_value_return RETURN_TYPE_initializer_value249;

    ImplTraits::TreeType* char_literal248_tree;

    /* Initialize rule variables
     */
    member_initializer_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(63)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal248       = NULL;
    identifier247.tree = NULL;

    initializer_value249.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal248_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:456:2: ( identifier '=' initializer_value )
        // CSharp.g:456:4: identifier '=' initializer_value
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_identifier_in_member_initializer2316);
            identifier247=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemember_initializerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier247.tree);

            char_literal248 =  this->matchToken(88, &FOLLOW_88_in_member_initializer2320);
            if  (this->hasException())
            {
                goto rulemember_initializerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal248_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal248));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal248_tree);
            }

            this->followPush(FOLLOW_initializer_value_in_member_initializer2324);
            initializer_value249=initializer_value();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemember_initializerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, initializer_value249.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulemember_initializerEx; /* Prevent compiler warnings */
    rulemember_initializerEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(63, member_initializer_StartIndex); }

    return retval;
}
/* $ANTLR end member_initializer */

/**
 * $ANTLR start initializer_value
 * CSharp.g:459:1: initializer_value : ( expression | object_or_collection_initializer );
 */
CSharpParser_initializer_value_return
CSharpParser::initializer_value()
{
    CSharpParser_initializer_value_return retval(this);

    ANTLR_MARKER initializer_value_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_expression_return expression250;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression250;

    CSharpParser_object_or_collection_initializer_return object_or_collection_initializer251;
    typedef	CSharpParser_object_or_collection_initializer_return RETURN_TYPE_object_or_collection_initializer251;


    /* Initialize rule variables
     */
    initializer_value_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(64)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    expression250.tree = NULL;

    object_or_collection_initializer251.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:460:2: ( expression | object_or_collection_initializer )

            ANTLR_UINT32 alt70;

            alt70=2;

            switch ( this->LA(1) )
            {
            case Character_literal:
            case FALSE:
            case Hex_number:
            case IDENTIFIER:
            case LT_NULL:
            case MINUS:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            case 64:
            case 69:
            case 71:
            case 72:
            case 74:
            case 75:
            case 78:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 109:
            case 111:
            case 112:
            case 116:
            case 117:
            case 118:
            case 119:
            case 121:
            case 122:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 152:
            case 153:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 176:
            case 179:
            case 182:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 191:
            case 192:
            case 196:
            case 198:
            case 204:
            	{
            		alt70=1;
            	}
                break;
            case 199:
            	{
            		alt70=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 70 );
                ex->set_state( 0 );


                goto ruleinitializer_valueEx;

            }

            switch (alt70)
            {
        	case 1:
        	    // CSharp.g:460:4: expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_expression_in_initializer_value2335);
        	        expression250=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinitializer_valueEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression250.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:461:4: object_or_collection_initializer
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_object_or_collection_initializer_in_initializer_value2341);
        	        object_or_collection_initializer251=object_or_collection_initializer();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinitializer_valueEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, object_or_collection_initializer251.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleinitializer_valueEx; /* Prevent compiler warnings */
    ruleinitializer_valueEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(64, initializer_value_StartIndex); }

    return retval;
}
/* $ANTLR end initializer_value */

/**
 * $ANTLR start typeof_expression
 * CSharp.g:466:1: typeof_expression : 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')' ;
 */
CSharpParser_typeof_expression_return
CSharpParser::typeof_expression()
{
    CSharpParser_typeof_expression_return retval(this);

    ANTLR_MARKER typeof_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal252;
    const CommonTokenType*    char_literal253;
    const CommonTokenType*    string_literal256;
    const CommonTokenType*    char_literal257;
    CSharpParser_unbound_type_name_return unbound_type_name254;
    typedef	CSharpParser_unbound_type_name_return RETURN_TYPE_unbound_type_name254;

    CSharpParser_type_return type255;
    typedef	CSharpParser_type_return RETURN_TYPE_type255;

    ImplTraits::TreeType* string_literal252_tree;
    ImplTraits::TreeType* char_literal253_tree;
    ImplTraits::TreeType* string_literal256_tree;
    ImplTraits::TreeType* char_literal257_tree;

    /* Initialize rule variables
     */
    typeof_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(65)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal252       = NULL;
    char_literal253       = NULL;
    string_literal256       = NULL;
    char_literal257       = NULL;
    unbound_type_name254.tree = NULL;

    type255.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal252_tree   = NULL;
    char_literal253_tree   = NULL;
    string_literal256_tree   = NULL;
    char_literal257_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:466:18: ( 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')' )
        // CSharp.g:467:2: 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal252 =  this->matchToken(186, &FOLLOW_186_in_typeof_expression2354);
            if  (this->hasException())
            {
                goto ruletypeof_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal252_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal252));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal252_tree);
            }

            char_literal253 =  this->matchToken(71, &FOLLOW_71_in_typeof_expression2358);
            if  (this->hasException())
            {
                goto ruletypeof_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal253_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal253));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal253_tree);
            }

            // CSharp.g:467:19: ( ( unbound_type_name )=> unbound_type_name | type | 'void' )
            {
                int alt71=3;
                alt71 = cdfa71.predict(this, this->get_rec(), this->get_istream(), cdfa71 );
                if  (this->hasException())
                {
                    goto ruletypeof_expressionEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                switch (alt71)
                {
            	case 1:
            	    // CSharp.g:467:20: ( unbound_type_name )=> unbound_type_name
            	    {
            	        this->followPush(FOLLOW_unbound_type_name_in_typeof_expression2369);
            	        unbound_type_name254=unbound_type_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletypeof_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unbound_type_name254.tree);

            	    }
            	    break;
            	case 2:
            	    // CSharp.g:468:10: type
            	    {
            	        this->followPush(FOLLOW_type_in_typeof_expression2380);
            	        type255=type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletypeof_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type255.tree);

            	    }
            	    break;
            	case 3:
            	    // CSharp.g:469:10: 'void'
            	    {
            	        string_literal256 =  this->matchToken(194, &FOLLOW_194_in_typeof_expression2392);
            	        if  (this->hasException())
            	        {
            	            goto ruletypeof_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        string_literal256_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal256));
            	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal256_tree);
            	        }

            	    }
            	    break;

                }
            }

            char_literal257 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_typeof_expression2397);
            if  (this->hasException())
            {
                goto ruletypeof_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal257_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal257));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal257_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruletypeof_expressionEx; /* Prevent compiler warnings */
    ruletypeof_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(65, typeof_expression_StartIndex); }

    return retval;
}
/* $ANTLR end typeof_expression */

/**
 * $ANTLR start unbound_type_name
 * CSharp.g:474:1: unbound_type_name : unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier ;
 */
CSharpParser_unbound_type_name_return
CSharpParser::unbound_type_name()
{
    CSharpParser_unbound_type_name_return retval(this);

    ANTLR_MARKER unbound_type_name_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_unbound_type_name_start_return unbound_type_name_start258;
    typedef	CSharpParser_unbound_type_name_start_return RETURN_TYPE_unbound_type_name_start258;

    CSharpParser_generic_dimension_specifier_return generic_dimension_specifier259;
    typedef	CSharpParser_generic_dimension_specifier_return RETURN_TYPE_generic_dimension_specifier259;

    CSharpParser_unbound_type_name_part_return unbound_type_name_part260;
    typedef	CSharpParser_unbound_type_name_part_return RETURN_TYPE_unbound_type_name_part260;

    CSharpParser_unbound_type_name_part_return unbound_type_name_part261;
    typedef	CSharpParser_unbound_type_name_part_return RETURN_TYPE_unbound_type_name_part261;

    CSharpParser_generic_dimension_specifier_return generic_dimension_specifier262;
    typedef	CSharpParser_generic_dimension_specifier_return RETURN_TYPE_generic_dimension_specifier262;


    /* Initialize rule variables
     */
    unbound_type_name_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(66)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    unbound_type_name_start258.tree = NULL;

    generic_dimension_specifier259.tree = NULL;

    unbound_type_name_part260.tree = NULL;

    unbound_type_name_part261.tree = NULL;

    generic_dimension_specifier262.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:474:18: ( unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier )
        // CSharp.g:476:2: unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_unbound_type_name_start_in_unbound_type_name2412);
            unbound_type_name_start258=unbound_type_name_start();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunbound_type_nameEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unbound_type_name_start258.tree);

            // CSharp.g:477:3: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*

            for (;;)
            {
                int alt72=3;
                alt72 = cdfa72.predict(this, this->get_rec(), this->get_istream(), cdfa72 );
                if  (this->hasException())
                {
                    goto ruleunbound_type_nameEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                switch (alt72)
                {
            	case 1:
            	    // CSharp.g:477:4: ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part )
            	    {
            	        // CSharp.g:477:4: ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part )
            	        // CSharp.g:477:5: ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part
            	        {
            	            this->followPush(FOLLOW_generic_dimension_specifier_in_unbound_type_name2431);
            	            generic_dimension_specifier259=generic_dimension_specifier();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleunbound_type_nameEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, generic_dimension_specifier259.tree);

            	            this->followPush(FOLLOW_unbound_type_name_part_in_unbound_type_name2435);
            	            unbound_type_name_part260=unbound_type_name_part();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleunbound_type_nameEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unbound_type_name_part260.tree);

            	        }


            	    }
            	    break;
            	case 2:
            	    // CSharp.g:478:5: unbound_type_name_part
            	    {
            	        this->followPush(FOLLOW_unbound_type_name_part_in_unbound_type_name2442);
            	        unbound_type_name_part261=unbound_type_name_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunbound_type_nameEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unbound_type_name_part261.tree);

            	    }
            	    break;

            	default:
            	    goto loop72;	/* break out of the loop */
            	    break;
                }
            }
            loop72: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_generic_dimension_specifier_in_unbound_type_name2452);
            generic_dimension_specifier262=generic_dimension_specifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunbound_type_nameEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, generic_dimension_specifier262.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleunbound_type_nameEx; /* Prevent compiler warnings */
    ruleunbound_type_nameEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(66, unbound_type_name_StartIndex); }

    return retval;
}
/* $ANTLR end unbound_type_name */

/**
 * $ANTLR start unbound_type_name_start
 * CSharp.g:482:1: unbound_type_name_start : identifier ( '::' identifier )? ;
 */
CSharpParser_unbound_type_name_start_return
CSharpParser::unbound_type_name_start()
{
    CSharpParser_unbound_type_name_start_return retval(this);

    ANTLR_MARKER unbound_type_name_start_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal264;
    CSharpParser_identifier_return identifier263;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier263;

    CSharpParser_identifier_return identifier265;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier265;

    ImplTraits::TreeType* string_literal264_tree;

    /* Initialize rule variables
     */
    unbound_type_name_start_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(67)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal264       = NULL;
    identifier263.tree = NULL;

    identifier265.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal264_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:482:24: ( identifier ( '::' identifier )? )
        // CSharp.g:483:2: identifier ( '::' identifier )?
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_identifier_in_unbound_type_name_start2462);
            identifier263=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunbound_type_name_startEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier263.tree);

            // CSharp.g:483:13: ( '::' identifier )?
            {
                int alt73=2;
                switch ( this->LA(1) )
                {
                    case 83:
                    	{
                    		alt73=1;
                    	}
                        break;
                }

                switch (alt73)
                {
            	case 1:
            	    // CSharp.g:483:14: '::' identifier
            	    {
            	        string_literal264 =  this->matchToken(83, &FOLLOW_83_in_unbound_type_name_start2465);
            	        if  (this->hasException())
            	        {
            	            goto ruleunbound_type_name_startEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        string_literal264_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal264));
            	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal264_tree);
            	        }

            	        this->followPush(FOLLOW_identifier_in_unbound_type_name_start2467);
            	        identifier265=identifier();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunbound_type_name_startEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier265.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleunbound_type_name_startEx; /* Prevent compiler warnings */
    ruleunbound_type_name_startEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(67, unbound_type_name_start_StartIndex); }

    return retval;
}
/* $ANTLR end unbound_type_name_start */

/**
 * $ANTLR start unbound_type_name_part
 * CSharp.g:484:1: unbound_type_name_part : '.' identifier ;
 */
CSharpParser_unbound_type_name_part_return
CSharpParser::unbound_type_name_part()
{
    CSharpParser_unbound_type_name_part_return retval(this);

    ANTLR_MARKER unbound_type_name_part_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal266;
    CSharpParser_identifier_return identifier267;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier267;

    ImplTraits::TreeType* char_literal266_tree;

    /* Initialize rule variables
     */
    unbound_type_name_part_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(68)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal266       = NULL;
    identifier267.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal266_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:484:23: ( '.' identifier )
        // CSharp.g:485:2: '.' identifier
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal266 =  this->matchToken(DOT, &FOLLOW_DOT_in_unbound_type_name_part2476);
            if  (this->hasException())
            {
                goto ruleunbound_type_name_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal266_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal266));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal266_tree);
            }

            this->followPush(FOLLOW_identifier_in_unbound_type_name_part2480);
            identifier267=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunbound_type_name_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier267.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleunbound_type_name_partEx; /* Prevent compiler warnings */
    ruleunbound_type_name_partEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(68, unbound_type_name_part_StartIndex); }

    return retval;
}
/* $ANTLR end unbound_type_name_part */

/**
 * $ANTLR start generic_dimension_specifier
 * CSharp.g:486:1: generic_dimension_specifier : '<' ( commas )? '>' ;
 */
CSharpParser_generic_dimension_specifier_return
CSharpParser::generic_dimension_specifier()
{
    CSharpParser_generic_dimension_specifier_return retval(this);

    ANTLR_MARKER generic_dimension_specifier_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal268;
    const CommonTokenType*    char_literal270;
    CSharpParser_commas_return commas269;
    typedef	CSharpParser_commas_return RETURN_TYPE_commas269;

    ImplTraits::TreeType* char_literal268_tree;
    ImplTraits::TreeType* char_literal270_tree;

    /* Initialize rule variables
     */
    generic_dimension_specifier_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(69)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal268       = NULL;
    char_literal270       = NULL;
    commas269.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal268_tree   = NULL;
    char_literal270_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:486:28: ( '<' ( commas )? '>' )
        // CSharp.g:487:2: '<' ( commas )? '>'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal268 =  this->matchToken(84, &FOLLOW_84_in_generic_dimension_specifier2488);
            if  (this->hasException())
            {
                goto rulegeneric_dimension_specifierEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal268_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal268));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal268_tree);
            }

            // CSharp.g:487:8: ( commas )?
            {
                int alt74=2;
                switch ( this->LA(1) )
                {
                    case 77:
                    	{
                    		alt74=1;
                    	}
                        break;
                }

                switch (alt74)
                {
            	case 1:
            	    // CSharp.g:487:8: commas
            	    {
            	        this->followPush(FOLLOW_commas_in_generic_dimension_specifier2492);
            	        commas269=commas();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulegeneric_dimension_specifierEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, commas269.tree);

            	    }
            	    break;

                }
            }

            char_literal270 =  this->matchToken(GT, &FOLLOW_GT_in_generic_dimension_specifier2497);
            if  (this->hasException())
            {
                goto rulegeneric_dimension_specifierEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal270_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal270));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal270_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulegeneric_dimension_specifierEx; /* Prevent compiler warnings */
    rulegeneric_dimension_specifierEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(69, generic_dimension_specifier_StartIndex); }

    return retval;
}
/* $ANTLR end generic_dimension_specifier */

/**
 * $ANTLR start commas
 * CSharp.g:488:1: commas : ( ',' )+ ;
 */
CSharpParser_commas_return
CSharpParser::commas()
{
    CSharpParser_commas_return retval(this);

    ANTLR_MARKER commas_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal271;

    ImplTraits::TreeType* char_literal271_tree;

    /* Initialize rule variables
     */
    commas_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(70)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal271       = NULL;
    retval.call_start_placeholder(); 


    char_literal271_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:488:7: ( ( ',' )+ )
        // CSharp.g:489:2: ( ',' )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:489:2: ( ',' )+
            {
                int cnt75=0;

                for (;;)
                {
                    int alt75=2;
            	switch ( this->LA(1) )
            	{
            	case 77:
            		{
            			alt75=1;
            		}
            	    break;

            	}

            	switch (alt75)
            	{
            	    case 1:
            	        // CSharp.g:489:2: ','
            	        {
            	            char_literal271 =  this->matchToken(77, &FOLLOW_77_in_commas2506);
            	            if  (this->hasException())
            	            {
            	                goto rulecommasEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) {
            	            char_literal271_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal271));
            	            ADAPTOR->addChild(ADAPTOR, root_0, char_literal271_tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt75 >= 1 )
            		{
            		    goto loop75;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulecommasEx;
            	}
            	cnt75++;
                }
                loop75: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulecommasEx; /* Prevent compiler warnings */
    rulecommasEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(70, commas_StartIndex); }

    return retval;
}
/* $ANTLR end commas */

/**
 * $ANTLR start type_name
 * CSharp.g:495:1: type_name : namespace_or_type_name ;
 */
CSharpParser_type_name_return
CSharpParser::type_name()
{
    CSharpParser_type_name_return retval(this);

    ANTLR_MARKER type_name_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_namespace_or_type_name_return namespace_or_type_name272;
    typedef	CSharpParser_namespace_or_type_name_return RETURN_TYPE_namespace_or_type_name272;


    /* Initialize rule variables
     */
    type_name_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(71)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    namespace_or_type_name272.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:495:10: ( namespace_or_type_name )
        // CSharp.g:496:2: namespace_or_type_name
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_namespace_or_type_name_in_type_name2522);
            namespace_or_type_name272=namespace_or_type_name();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletype_nameEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, namespace_or_type_name272.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruletype_nameEx; /* Prevent compiler warnings */
    ruletype_nameEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(71, type_name_StartIndex); }

    return retval;
}
/* $ANTLR end type_name */

/**
 * $ANTLR start namespace_or_type_name
 * CSharp.g:497:1: namespace_or_type_name : type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )* ;
 */
CSharpParser_namespace_or_type_name_return
CSharpParser::namespace_or_type_name()
{
    CSharpParser_namespace_or_type_name_return retval(this);

    ANTLR_MARKER namespace_or_type_name_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal274;
    const CommonTokenType*    char_literal276;
    CSharpParser_type_or_generic_return type_or_generic273;
    typedef	CSharpParser_type_or_generic_return RETURN_TYPE_type_or_generic273;

    CSharpParser_type_or_generic_return type_or_generic275;
    typedef	CSharpParser_type_or_generic_return RETURN_TYPE_type_or_generic275;

    CSharpParser_type_or_generic_return type_or_generic277;
    typedef	CSharpParser_type_or_generic_return RETURN_TYPE_type_or_generic277;

    ImplTraits::TreeType* string_literal274_tree;
    ImplTraits::TreeType* char_literal276_tree;

    /* Initialize rule variables
     */
    namespace_or_type_name_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(72)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal274       = NULL;
    char_literal276       = NULL;
    type_or_generic273.tree = NULL;

    type_or_generic275.tree = NULL;

    type_or_generic277.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal274_tree   = NULL;
    char_literal276_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:497:23: ( type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )* )
        // CSharp.g:498:3: type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_type_or_generic_in_namespace_or_type_name2531);
            type_or_generic273=type_or_generic();

            this->followPop();
            if  (this->hasException())
            {
                goto rulenamespace_or_type_nameEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_or_generic273.tree);

            // CSharp.g:498:21: ( '::' type_or_generic )?
            {
                int alt76=2;
                switch ( this->LA(1) )
                {
                    case 83:
                    	{
                    		alt76=1;
                    	}
                        break;
                }

                switch (alt76)
                {
            	case 1:
            	    // CSharp.g:498:22: '::' type_or_generic
            	    {
            	        string_literal274 =  this->matchToken(83, &FOLLOW_83_in_namespace_or_type_name2536);
            	        if  (this->hasException())
            	        {
            	            goto rulenamespace_or_type_nameEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        string_literal274_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal274));
            	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal274_tree);
            	        }

            	        this->followPush(FOLLOW_type_or_generic_in_namespace_or_type_name2538);
            	        type_or_generic275=type_or_generic();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulenamespace_or_type_nameEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_or_generic275.tree);

            	    }
            	    break;

                }
            }

            // CSharp.g:498:45: ( '.' type_or_generic )*

            for (;;)
            {
                int alt77=2;
                switch ( this->LA(1) )
                {
                case DOT:
                	{
                		switch ( this->LA(2) )
                		{
                		case IDENTIFIER:
                		case 98:
                		case 100:
                		case 101:
                		case 103:
                		case 104:
                		case 108:
                		case 119:
                		case 122:
                		case 124:
                		case 128:
                		case 134:
                		case 137:
                		case 143:
                		case 145:
                		case 146:
                		case 149:
                		case 150:
                		case 154:
                		case 156:
                		case 159:
                		case 162:
                		case 164:
                		case 169:
                		case 173:
                		case 174:
                		case 185:
                		case 192:
                		case 196:
                		case 198:
                			{
                				alt77=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt77)
                {
            	case 1:
            	    // CSharp.g:498:46: '.' type_or_generic
            	    {
            	        char_literal276 =  this->matchToken(DOT, &FOLLOW_DOT_in_namespace_or_type_name2543);
            	        if  (this->hasException())
            	        {
            	            goto rulenamespace_or_type_nameEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal276_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal276));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal276_tree);
            	        }

            	        this->followPush(FOLLOW_type_or_generic_in_namespace_or_type_name2547);
            	        type_or_generic277=type_or_generic();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulenamespace_or_type_nameEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_or_generic277.tree);

            	    }
            	    break;

            	default:
            	    goto loop77;	/* break out of the loop */
            	    break;
                }
            }
            loop77: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulenamespace_or_type_nameEx; /* Prevent compiler warnings */
    rulenamespace_or_type_nameEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(72, namespace_or_type_name_StartIndex); }

    return retval;
}
/* $ANTLR end namespace_or_type_name */

/**
 * $ANTLR start type_or_generic
 * CSharp.g:499:1: type_or_generic : ( ( identifier '<' )=> identifier generic_argument_list | identifier );
 */
CSharpParser_type_or_generic_return
CSharpParser::type_or_generic()
{
    CSharpParser_type_or_generic_return retval(this);

    ANTLR_MARKER type_or_generic_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_identifier_return identifier278;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier278;

    CSharpParser_generic_argument_list_return generic_argument_list279;
    typedef	CSharpParser_generic_argument_list_return RETURN_TYPE_generic_argument_list279;

    CSharpParser_identifier_return identifier280;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier280;


    /* Initialize rule variables
     */
    type_or_generic_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(73)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    identifier278.tree = NULL;

    generic_argument_list279.tree = NULL;

    identifier280.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:499:16: ( ( identifier '<' )=> identifier generic_argument_list | identifier )

            ANTLR_UINT32 alt78;

            alt78=2;

            switch ( this->LA(1) )
            {
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 134:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
            	{
            		{
            		    int LA78_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred15_CSharp>() )))
            		    {
            		        alt78=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt78=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 78 );
            		        ex->set_state( 1 );


            		        goto ruletype_or_genericEx;

            		    }
            		}
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 78 );
                ex->set_state( 0 );


                goto ruletype_or_genericEx;

            }

            switch (alt78)
            {
        	case 1:
        	    // CSharp.g:500:2: ( identifier '<' )=> identifier generic_argument_list
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_identifier_in_type_or_generic2567);
        	        identifier278=identifier();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletype_or_genericEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier278.tree);

        	        this->followPush(FOLLOW_generic_argument_list_in_type_or_generic2571);
        	        generic_argument_list279=generic_argument_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletype_or_genericEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, generic_argument_list279.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:501:4: identifier
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_identifier_in_type_or_generic2576);
        	        identifier280=identifier();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletype_or_genericEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier280.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruletype_or_genericEx; /* Prevent compiler warnings */
    ruletype_or_genericEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(73, type_or_generic_StartIndex); }

    return retval;
}
/* $ANTLR end type_or_generic */

/**
 * $ANTLR start qid
 * CSharp.g:503:1: qid : qid_start ( qid_part )* ;
 */
CSharpParser_qid_return
CSharpParser::qid()
{
    CSharpParser_qid_return retval(this);

    ANTLR_MARKER qid_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_qid_start_return qid_start281;
    typedef	CSharpParser_qid_start_return RETURN_TYPE_qid_start281;

    CSharpParser_qid_part_return qid_part282;
    typedef	CSharpParser_qid_part_return RETURN_TYPE_qid_part282;


    /* Initialize rule variables
     */
    qid_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(74)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    qid_start281.tree = NULL;

    qid_part282.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:503:4: ( qid_start ( qid_part )* )
        // CSharp.g:504:2: qid_start ( qid_part )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_qid_start_in_qid2587);
            qid_start281=qid_start();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleqidEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, qid_start281.tree);

            // CSharp.g:504:14: ( qid_part )*

            for (;;)
            {
                int alt79=2;
                switch ( this->LA(1) )
                {
                case DOT:
                	{
                		switch ( this->LA(2) )
                		{
                		case IDENTIFIER:
                		case 98:
                		case 100:
                		case 101:
                		case 103:
                		case 104:
                		case 108:
                		case 119:
                		case 122:
                		case 124:
                		case 128:
                		case 134:
                		case 137:
                		case 143:
                		case 145:
                		case 146:
                		case 149:
                		case 150:
                		case 154:
                		case 156:
                		case 159:
                		case 162:
                		case 164:
                		case 169:
                		case 173:
                		case 174:
                		case 185:
                		case 192:
                		case 196:
                		case 198:
                			{
                				alt79=1;
                			}
                		    break;

                		}

                	}
                    break;
                case PTR:
                	{
                		alt79=1;
                	}
                    break;

                }

                switch (alt79)
                {
            	case 1:
            	    // CSharp.g:504:14: qid_part
            	    {
            	        this->followPush(FOLLOW_qid_part_in_qid2591);
            	        qid_part282=qid_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleqidEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, qid_part282.tree);

            	    }
            	    break;

            	default:
            	    goto loop79;	/* break out of the loop */
            	    break;
                }
            }
            loop79: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleqidEx; /* Prevent compiler warnings */
    ruleqidEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(74, qid_StartIndex); }

    return retval;
}
/* $ANTLR end qid */

/**
 * $ANTLR start qid_start
 * CSharp.g:506:1: qid_start : ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | literal );
 */
CSharpParser_qid_start_return
CSharpParser::qid_start()
{
    CSharpParser_qid_start_return retval(this);

    ANTLR_MARKER qid_start_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal287;
    CSharpParser_predefined_type_return predefined_type283;
    typedef	CSharpParser_predefined_type_return RETURN_TYPE_predefined_type283;

    CSharpParser_identifier_return identifier284;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier284;

    CSharpParser_generic_argument_list_return generic_argument_list285;
    typedef	CSharpParser_generic_argument_list_return RETURN_TYPE_generic_argument_list285;

    CSharpParser_identifier_return identifier286;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier286;

    CSharpParser_identifier_return identifier288;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier288;

    CSharpParser_literal_return literal289;
    typedef	CSharpParser_literal_return RETURN_TYPE_literal289;

    ImplTraits::TreeType* string_literal287_tree;

    /* Initialize rule variables
     */
    qid_start_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(75)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal287       = NULL;
    predefined_type283.tree = NULL;

    identifier284.tree = NULL;

    generic_argument_list285.tree = NULL;

    identifier286.tree = NULL;

    identifier288.tree = NULL;

    literal289.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal287_tree   = NULL;


    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:506:10: ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | literal )

            ANTLR_UINT32 alt81;

            alt81=4;

            switch ( this->LA(1) )
            {
            case 106:
            case 109:
            case 111:
            case 116:
            case 121:
            case 131:
            case 140:
            case 148:
            case 153:
            case 171:
            case 175:
            case 179:
            case 187:
            case 188:
            case 191:
            	{
            		alt81=1;
            	}
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 134:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
            	{
            		{
            		    int LA81_2 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred16_CSharp>() )) && (LA81_2 == 84))
            		    {
            		        alt81=2;
            		    }
            		    else if ( (LA81_2 == DOT || LA81_2 == PTR || LA81_2 == 71 || LA81_2 == 83 || LA81_2 == 199))
            		    {
            		        alt81=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 81 );
            		        ex->set_state( 2 );


            		        goto ruleqid_startEx;

            		    }
            		}
            	}
                break;
            case Character_literal:
            case FALSE:
            case Hex_number:
            case LT_NULL:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            	{
            		alt81=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 81 );
                ex->set_state( 0 );


                goto ruleqid_startEx;

            }

            switch (alt81)
            {
        	case 1:
        	    // CSharp.g:507:2: predefined_type
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_predefined_type_in_qid_start2601);
        	        predefined_type283=predefined_type();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleqid_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, predefined_type283.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:508:4: ( identifier '<' )=> identifier generic_argument_list
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_identifier_in_qid_start2617);
        	        identifier284=identifier();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleqid_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier284.tree);

        	        this->followPush(FOLLOW_generic_argument_list_in_qid_start2621);
        	        generic_argument_list285=generic_argument_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleqid_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, generic_argument_list285.tree);

        	    }
        	    break;
        	case 3:
        	    // CSharp.g:511:4: identifier ( '::' identifier )?
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_identifier_in_qid_start2628);
        	        identifier286=identifier();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleqid_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier286.tree);

        	        // CSharp.g:511:17: ( '::' identifier )?
        	        {
        	            int alt80=2;
        	            switch ( this->LA(1) )
        	            {
        	                case 83:
        	                	{
        	                		alt80=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt80)
        	            {
        	        	case 1:
        	        	    // CSharp.g:511:18: '::' identifier
        	        	    {
        	        	        string_literal287 =  this->matchToken(83, &FOLLOW_83_in_qid_start2633);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleqid_startEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        string_literal287_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal287));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal287_tree);
        	        	        }

        	        	        this->followPush(FOLLOW_identifier_in_qid_start2637);
        	        	        identifier288=identifier();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleqid_startEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier288.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 4:
        	    // CSharp.g:512:4: literal
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_literal_in_qid_start2644);
        	        literal289=literal();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleqid_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, literal289.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleqid_startEx; /* Prevent compiler warnings */
    ruleqid_startEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(75, qid_start_StartIndex); }

    return retval;
}
/* $ANTLR end qid_start */

/**
 * $ANTLR start qid_part
 * CSharp.g:516:1: qid_part : access_identifier ;
 */
CSharpParser_qid_part_return
CSharpParser::qid_part()
{
    CSharpParser_qid_part_return retval(this);

    ANTLR_MARKER qid_part_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_access_identifier_return access_identifier290;
    typedef	CSharpParser_access_identifier_return RETURN_TYPE_access_identifier290;


    /* Initialize rule variables
     */
    qid_part_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(76)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    access_identifier290.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:516:9: ( access_identifier )
        // CSharp.g:517:2: access_identifier
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_access_identifier_in_qid_part2658);
            access_identifier290=access_identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleqid_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, access_identifier290.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleqid_partEx; /* Prevent compiler warnings */
    ruleqid_partEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(76, qid_part_StartIndex); }

    return retval;
}
/* $ANTLR end qid_part */

/**
 * $ANTLR start generic_argument_list
 * CSharp.g:519:1: generic_argument_list : '<' type_arguments '>' ;
 */
CSharpParser_generic_argument_list_return
CSharpParser::generic_argument_list()
{
    CSharpParser_generic_argument_list_return retval(this);

    ANTLR_MARKER generic_argument_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal291;
    const CommonTokenType*    char_literal293;
    CSharpParser_type_arguments_return type_arguments292;
    typedef	CSharpParser_type_arguments_return RETURN_TYPE_type_arguments292;

    ImplTraits::TreeType* char_literal291_tree;
    ImplTraits::TreeType* char_literal293_tree;

    /* Initialize rule variables
     */
    generic_argument_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(77)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal291       = NULL;
    char_literal293       = NULL;
    type_arguments292.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal291_tree   = NULL;
    char_literal293_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:519:22: ( '<' type_arguments '>' )
        // CSharp.g:520:2: '<' type_arguments '>'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal291 =  this->matchToken(84, &FOLLOW_84_in_generic_argument_list2668);
            if  (this->hasException())
            {
                goto rulegeneric_argument_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal291_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal291));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal291_tree);
            }

            this->followPush(FOLLOW_type_arguments_in_generic_argument_list2672);
            type_arguments292=type_arguments();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegeneric_argument_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_arguments292.tree);

            char_literal293 =  this->matchToken(GT, &FOLLOW_GT_in_generic_argument_list2676);
            if  (this->hasException())
            {
                goto rulegeneric_argument_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal293_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal293));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal293_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulegeneric_argument_listEx; /* Prevent compiler warnings */
    rulegeneric_argument_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(77, generic_argument_list_StartIndex); }

    return retval;
}
/* $ANTLR end generic_argument_list */

/**
 * $ANTLR start type_arguments
 * CSharp.g:521:1: type_arguments : type ( ',' type )* ;
 */
CSharpParser_type_arguments_return
CSharpParser::type_arguments()
{
    CSharpParser_type_arguments_return retval(this);

    ANTLR_MARKER type_arguments_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal295;
    CSharpParser_type_return type294;
    typedef	CSharpParser_type_return RETURN_TYPE_type294;

    CSharpParser_type_return type296;
    typedef	CSharpParser_type_return RETURN_TYPE_type296;

    ImplTraits::TreeType* char_literal295_tree;

    /* Initialize rule variables
     */
    type_arguments_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(78)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal295       = NULL;
    type294.tree = NULL;

    type296.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal295_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:521:15: ( type ( ',' type )* )
        // CSharp.g:522:2: type ( ',' type )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_type_in_type_arguments2685);
            type294=type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletype_argumentsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type294.tree);

            // CSharp.g:522:7: ( ',' type )*

            for (;;)
            {
                int alt82=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt82=1;
                	}
                    break;

                }

                switch (alt82)
                {
            	case 1:
            	    // CSharp.g:522:8: ',' type
            	    {
            	        char_literal295 =  this->matchToken(77, &FOLLOW_77_in_type_arguments2688);
            	        if  (this->hasException())
            	        {
            	            goto ruletype_argumentsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal295_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal295));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal295_tree);
            	        }

            	        this->followPush(FOLLOW_type_in_type_arguments2690);
            	        type296=type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletype_argumentsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type296.tree);

            	    }
            	    break;

            	default:
            	    goto loop82;	/* break out of the loop */
            	    break;
                }
            }
            loop82: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruletype_argumentsEx; /* Prevent compiler warnings */
    ruletype_argumentsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(78, type_arguments_StartIndex); }

    return retval;
}
/* $ANTLR end type_arguments */

/**
 * $ANTLR start type
 * CSharp.g:524:1: type : ( ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )* | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' ) | ( predefined_type | type_name ) | 'void' ( '*' )+ );
 */
CSharpParser_type_return
CSharpParser::type()
{
    CSharpParser_type_return retval(this);

    ANTLR_MARKER type_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal300;
    const CommonTokenType*    char_literal303;
    const CommonTokenType*    char_literal304;
    const CommonTokenType*    string_literal307;
    const CommonTokenType*    char_literal308;
    CSharpParser_predefined_type_return predefined_type297;
    typedef	CSharpParser_predefined_type_return RETURN_TYPE_predefined_type297;

    CSharpParser_type_name_return type_name298;
    typedef	CSharpParser_type_name_return RETURN_TYPE_type_name298;

    CSharpParser_rank_specifiers_return rank_specifiers299;
    typedef	CSharpParser_rank_specifiers_return RETURN_TYPE_rank_specifiers299;

    CSharpParser_predefined_type_return predefined_type301;
    typedef	CSharpParser_predefined_type_return RETURN_TYPE_predefined_type301;

    CSharpParser_type_name_return type_name302;
    typedef	CSharpParser_type_name_return RETURN_TYPE_type_name302;

    CSharpParser_predefined_type_return predefined_type305;
    typedef	CSharpParser_predefined_type_return RETURN_TYPE_predefined_type305;

    CSharpParser_type_name_return type_name306;
    typedef	CSharpParser_type_name_return RETURN_TYPE_type_name306;

    ImplTraits::TreeType* char_literal300_tree;
    ImplTraits::TreeType* char_literal303_tree;
    ImplTraits::TreeType* char_literal304_tree;
    ImplTraits::TreeType* string_literal307_tree;
    ImplTraits::TreeType* char_literal308_tree;

    /* Initialize rule variables
     */
    type_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(79)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal300       = NULL;
    char_literal303       = NULL;
    char_literal304       = NULL;
    string_literal307       = NULL;
    char_literal308       = NULL;
    predefined_type297.tree = NULL;

    type_name298.tree = NULL;

    rank_specifiers299.tree = NULL;

    predefined_type301.tree = NULL;

    type_name302.tree = NULL;

    predefined_type305.tree = NULL;

    type_name306.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal300_tree   = NULL;
    char_literal303_tree   = NULL;
    char_literal304_tree   = NULL;
    string_literal307_tree   = NULL;
    char_literal308_tree   = NULL;


    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:524:5: ( ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )* | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' ) | ( predefined_type | type_name ) | 'void' ( '*' )+ )

            ANTLR_UINT32 alt90;

            alt90=4;

            switch ( this->LA(1) )
            {
            case 106:
            case 109:
            case 111:
            case 116:
            case 121:
            case 131:
            case 140:
            case 148:
            case 153:
            case 171:
            case 175:
            case 179:
            case 187:
            case 188:
            case 191:
            	{
            		{
            		    int LA90_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred17_CSharp>() )))
            		    {
            		        alt90=1;
            		    }
            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred18_CSharp>() )))
            		    {
            		        alt90=2;
            		    }
            		    else if ( (true))
            		    {
            		        alt90=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 90 );
            		        ex->set_state( 1 );


            		        goto ruletypeEx;

            		    }
            		}
            	}
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 134:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
            	{
            		{
            		    int LA90_2 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred17_CSharp>() )))
            		    {
            		        alt90=1;
            		    }
            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred18_CSharp>() )))
            		    {
            		        alt90=2;
            		    }
            		    else if ( (true))
            		    {
            		        alt90=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 90 );
            		        ex->set_state( 2 );


            		        goto ruletypeEx;

            		    }
            		}
            	}
                break;
            case 194:
            	{
            		alt90=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 90 );
                ex->set_state( 0 );


                goto ruletypeEx;

            }

            switch (alt90)
            {
        	case 1:
        	    // CSharp.g:525:4: ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )*
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        // CSharp.g:525:56: ( predefined_type | type_name )
        	        {
        	            int alt83=2;
        	            switch ( this->LA(1) )
        	            {
        	            case 106:
        	            case 109:
        	            case 111:
        	            case 116:
        	            case 121:
        	            case 131:
        	            case 140:
        	            case 148:
        	            case 153:
        	            case 171:
        	            case 175:
        	            case 179:
        	            case 187:
        	            case 188:
        	            case 191:
        	            	{
        	            		alt83=1;
        	            	}
        	                break;
        	            case IDENTIFIER:
        	            case 98:
        	            case 100:
        	            case 101:
        	            case 103:
        	            case 104:
        	            case 108:
        	            case 119:
        	            case 122:
        	            case 124:
        	            case 128:
        	            case 134:
        	            case 137:
        	            case 143:
        	            case 145:
        	            case 146:
        	            case 149:
        	            case 150:
        	            case 154:
        	            case 156:
        	            case 159:
        	            case 162:
        	            case 164:
        	            case 169:
        	            case 173:
        	            case 174:
        	            case 185:
        	            case 192:
        	            case 196:
        	            case 198:
        	            	{
        	            		alt83=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 83 );
        	                ex->set_state( 0 );


        	                goto ruletypeEx;

        	            }

        	            switch (alt83)
        	            {
        	        	case 1:
        	        	    // CSharp.g:525:57: predefined_type
        	        	    {
        	        	        this->followPush(FOLLOW_predefined_type_in_type2719);
        	        	        predefined_type297=predefined_type();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruletypeEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, predefined_type297.tree);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // CSharp.g:525:75: type_name
        	        	    {
        	        	        this->followPush(FOLLOW_type_name_in_type2723);
        	        	        type_name298=type_name();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruletypeEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_name298.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_rank_specifiers_in_type2728);
        	        rank_specifiers299=rank_specifiers();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, rank_specifiers299.tree);

        	        // CSharp.g:525:106: ( '*' )*

        	        for (;;)
        	        {
        	            int alt84=2;
        	            switch ( this->LA(1) )
        	            {
        	            case 72:
        	            	{
        	            		alt84=1;
        	            	}
        	                break;

        	            }

        	            switch (alt84)
        	            {
        	        	case 1:
        	        	    // CSharp.g:525:106: '*'
        	        	    {
        	        	        char_literal300 =  this->matchToken(72, &FOLLOW_72_in_type2732);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruletypeEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        char_literal300_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal300));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal300_tree);
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop84;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop84: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 2:
        	    // CSharp.g:526:4: ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' )
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        // CSharp.g:526:53: ( predefined_type | type_name )
        	        {
        	            int alt85=2;
        	            switch ( this->LA(1) )
        	            {
        	            case 106:
        	            case 109:
        	            case 111:
        	            case 116:
        	            case 121:
        	            case 131:
        	            case 140:
        	            case 148:
        	            case 153:
        	            case 171:
        	            case 175:
        	            case 179:
        	            case 187:
        	            case 188:
        	            case 191:
        	            	{
        	            		alt85=1;
        	            	}
        	                break;
        	            case IDENTIFIER:
        	            case 98:
        	            case 100:
        	            case 101:
        	            case 103:
        	            case 104:
        	            case 108:
        	            case 119:
        	            case 122:
        	            case 124:
        	            case 128:
        	            case 134:
        	            case 137:
        	            case 143:
        	            case 145:
        	            case 146:
        	            case 149:
        	            case 150:
        	            case 154:
        	            case 156:
        	            case 159:
        	            case 162:
        	            case 164:
        	            case 169:
        	            case 173:
        	            case 174:
        	            case 185:
        	            case 192:
        	            case 196:
        	            case 198:
        	            	{
        	            		alt85=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 85 );
        	                ex->set_state( 0 );


        	                goto ruletypeEx;

        	            }

        	            switch (alt85)
        	            {
        	        	case 1:
        	        	    // CSharp.g:526:54: predefined_type
        	        	    {
        	        	        this->followPush(FOLLOW_predefined_type_in_type2761);
        	        	        predefined_type301=predefined_type();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruletypeEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, predefined_type301.tree);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // CSharp.g:526:72: type_name
        	        	    {
        	        	        this->followPush(FOLLOW_type_name_in_type2765);
        	        	        type_name302=type_name();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruletypeEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_name302.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // CSharp.g:526:85: ( ( '*' )+ | '?' )
        	        {
        	            int alt87=2;
        	            switch ( this->LA(1) )
        	            {
        	            case 72:
        	            	{
        	            		alt87=1;
        	            	}
        	                break;
        	            case 92:
        	            	{
        	            		alt87=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 87 );
        	                ex->set_state( 0 );


        	                goto ruletypeEx;

        	            }

        	            switch (alt87)
        	            {
        	        	case 1:
        	        	    // CSharp.g:526:86: ( '*' )+
        	        	    {
        	        	        // CSharp.g:526:86: ( '*' )+
        	        	        {
        	        	            int cnt86=0;

        	        	            for (;;)
        	        	            {
        	        	                int alt86=2;
        	        	        	switch ( this->LA(1) )
        	        	        	{
        	        	        	case 72:
        	        	        		{
        	        	        			alt86=1;
        	        	        		}
        	        	        	    break;

        	        	        	}

        	        	        	switch (alt86)
        	        	        	{
        	        	        	    case 1:
        	        	        	        // CSharp.g:526:86: '*'
        	        	        	        {
        	        	        	            char_literal303 =  this->matchToken(72, &FOLLOW_72_in_type2771);
        	        	        	            if  (this->hasException())
        	        	        	            {
        	        	        	                goto ruletypeEx;
        	        	        	            }
        	        	        	            if (this->hasFailed())
        	        	        	            {
        	        	        	                return retval;
        	        	        	            }

        	        	        	            if ( this->get_backtracking()==0 ) {
        	        	        	            char_literal303_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal303));
        	        	        	            ADAPTOR->addChild(ADAPTOR, root_0, char_literal303_tree);
        	        	        	            }

        	        	        	        }
        	        	        	        break;

        	        	        	    default:

        	        	        		if ( cnt86 >= 1 )
        	        	        		{
        	        	        		    goto loop86;
        	        	        		}
        	        	        		if (this->get_backtracking()>0)
        	        	        		{
        	        	        		    this->set_failedflag( true );
        	        	        		    return retval;
        	        	        		}

        	        	        		/* mismatchedSetEx()
        	        	        		 */
        	        	        		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        	        	        		goto ruletypeEx;
        	        	        	}
        	        	        	cnt86++;
        	        	            }
        	        	            loop86: ;	/* Jump to here if this rule does not match */
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // CSharp.g:526:93: '?'
        	        	    {
        	        	        char_literal304 =  this->matchToken(92, &FOLLOW_92_in_type2776);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruletypeEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        char_literal304_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal304));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal304_tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 3:
        	    // CSharp.g:527:4: ( predefined_type | type_name )
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        // CSharp.g:527:4: ( predefined_type | type_name )
        	        {
        	            int alt88=2;
        	            switch ( this->LA(1) )
        	            {
        	            case 106:
        	            case 109:
        	            case 111:
        	            case 116:
        	            case 121:
        	            case 131:
        	            case 140:
        	            case 148:
        	            case 153:
        	            case 171:
        	            case 175:
        	            case 179:
        	            case 187:
        	            case 188:
        	            case 191:
        	            	{
        	            		alt88=1;
        	            	}
        	                break;
        	            case IDENTIFIER:
        	            case 98:
        	            case 100:
        	            case 101:
        	            case 103:
        	            case 104:
        	            case 108:
        	            case 119:
        	            case 122:
        	            case 124:
        	            case 128:
        	            case 134:
        	            case 137:
        	            case 143:
        	            case 145:
        	            case 146:
        	            case 149:
        	            case 150:
        	            case 154:
        	            case 156:
        	            case 159:
        	            case 162:
        	            case 164:
        	            case 169:
        	            case 173:
        	            case 174:
        	            case 185:
        	            case 192:
        	            case 196:
        	            case 198:
        	            	{
        	            		alt88=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 88 );
        	                ex->set_state( 0 );


        	                goto ruletypeEx;

        	            }

        	            switch (alt88)
        	            {
        	        	case 1:
        	        	    // CSharp.g:527:5: predefined_type
        	        	    {
        	        	        this->followPush(FOLLOW_predefined_type_in_type2783);
        	        	        predefined_type305=predefined_type();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruletypeEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, predefined_type305.tree);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // CSharp.g:527:23: type_name
        	        	    {
        	        	        this->followPush(FOLLOW_type_name_in_type2787);
        	        	        type_name306=type_name();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruletypeEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_name306.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 4:
        	    // CSharp.g:528:4: 'void' ( '*' )+
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal307 =  this->matchToken(194, &FOLLOW_194_in_type2793);
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal307_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal307));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal307_tree);
        	        }

        	        // CSharp.g:528:11: ( '*' )+
        	        {
        	            int cnt89=0;

        	            for (;;)
        	            {
        	                int alt89=2;
        	        	switch ( this->LA(1) )
        	        	{
        	        	case 72:
        	        		{
        	        			alt89=1;
        	        		}
        	        	    break;

        	        	}

        	        	switch (alt89)
        	        	{
        	        	    case 1:
        	        	        // CSharp.g:528:11: '*'
        	        	        {
        	        	            char_literal308 =  this->matchToken(72, &FOLLOW_72_in_type2795);
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto ruletypeEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }

        	        	            if ( this->get_backtracking()==0 ) {
        	        	            char_literal308_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal308));
        	        	            ADAPTOR->addChild(ADAPTOR, root_0, char_literal308_tree);
        	        	            }

        	        	        }
        	        	        break;

        	        	    default:

        	        		if ( cnt89 >= 1 )
        	        		{
        	        		    goto loop89;
        	        		}
        	        		if (this->get_backtracking()>0)
        	        		{
        	        		    this->set_failedflag( true );
        	        		    return retval;
        	        		}

        	        		/* mismatchedSetEx()
        	        		 */
        	        		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        	        		goto ruletypeEx;
        	        	}
        	        	cnt89++;
        	            }
        	            loop89: ;	/* Jump to here if this rule does not match */
        	        }

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruletypeEx; /* Prevent compiler warnings */
    ruletypeEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(79, type_StartIndex); }

    return retval;
}
/* $ANTLR end type */

/**
 * $ANTLR start non_nullable_type
 * CSharp.g:530:1: non_nullable_type : ( ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? ) | 'void' ( '*' )+ );
 */
CSharpParser_non_nullable_type_return
CSharpParser::non_nullable_type()
{
    CSharpParser_non_nullable_type_return retval(this);

    ANTLR_MARKER non_nullable_type_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal312;
    const CommonTokenType*    char_literal313;
    const CommonTokenType*    string_literal314;
    const CommonTokenType*    char_literal315;
    CSharpParser_predefined_type_return predefined_type309;
    typedef	CSharpParser_predefined_type_return RETURN_TYPE_predefined_type309;

    CSharpParser_type_name_return type_name310;
    typedef	CSharpParser_type_name_return RETURN_TYPE_type_name310;

    CSharpParser_rank_specifiers_return rank_specifiers311;
    typedef	CSharpParser_rank_specifiers_return RETURN_TYPE_rank_specifiers311;

    ImplTraits::TreeType* char_literal312_tree;
    ImplTraits::TreeType* char_literal313_tree;
    ImplTraits::TreeType* string_literal314_tree;
    ImplTraits::TreeType* char_literal315_tree;

    /* Initialize rule variables
     */
    non_nullable_type_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(80)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal312       = NULL;
    char_literal313       = NULL;
    string_literal314       = NULL;
    char_literal315       = NULL;
    predefined_type309.tree = NULL;

    type_name310.tree = NULL;

    rank_specifiers311.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal312_tree   = NULL;
    char_literal313_tree   = NULL;
    string_literal314_tree   = NULL;
    char_literal315_tree   = NULL;


    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:530:18: ( ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? ) | 'void' ( '*' )+ )

            ANTLR_UINT32 alt97;

            alt97=2;

            switch ( this->LA(1) )
            {
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 106:
            case 108:
            case 109:
            case 111:
            case 116:
            case 119:
            case 121:
            case 122:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 153:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 179:
            case 185:
            case 187:
            case 188:
            case 191:
            case 192:
            case 196:
            case 198:
            	{
            		alt97=1;
            	}
                break;
            case 194:
            	{
            		alt97=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 97 );
                ex->set_state( 0 );


                goto rulenon_nullable_typeEx;

            }

            switch (alt97)
            {
        	case 1:
        	    // CSharp.g:531:2: ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? )
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        // CSharp.g:531:2: ( predefined_type | type_name )
        	        {
        	            int alt91=2;
        	            switch ( this->LA(1) )
        	            {
        	            case 106:
        	            case 109:
        	            case 111:
        	            case 116:
        	            case 121:
        	            case 131:
        	            case 140:
        	            case 148:
        	            case 153:
        	            case 171:
        	            case 175:
        	            case 179:
        	            case 187:
        	            case 188:
        	            case 191:
        	            	{
        	            		alt91=1;
        	            	}
        	                break;
        	            case IDENTIFIER:
        	            case 98:
        	            case 100:
        	            case 101:
        	            case 103:
        	            case 104:
        	            case 108:
        	            case 119:
        	            case 122:
        	            case 124:
        	            case 128:
        	            case 134:
        	            case 137:
        	            case 143:
        	            case 145:
        	            case 146:
        	            case 149:
        	            case 150:
        	            case 154:
        	            case 156:
        	            case 159:
        	            case 162:
        	            case 164:
        	            case 169:
        	            case 173:
        	            case 174:
        	            case 185:
        	            case 192:
        	            case 196:
        	            case 198:
        	            	{
        	            		alt91=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 91 );
        	                ex->set_state( 0 );


        	                goto rulenon_nullable_typeEx;

        	            }

        	            switch (alt91)
        	            {
        	        	case 1:
        	        	    // CSharp.g:531:3: predefined_type
        	        	    {
        	        	        this->followPush(FOLLOW_predefined_type_in_non_nullable_type2806);
        	        	        predefined_type309=predefined_type();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulenon_nullable_typeEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, predefined_type309.tree);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // CSharp.g:531:21: type_name
        	        	    {
        	        	        this->followPush(FOLLOW_type_name_in_non_nullable_type2810);
        	        	        type_name310=type_name();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulenon_nullable_typeEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_name310.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // CSharp.g:532:3: ( rank_specifiers ( '*' )* | ( ( '*' )+ )? )
        	        {
        	            int alt95=2;
        	            switch ( this->LA(1) )
        	            {
        	            case 94:
        	            	{
        	            		alt95=1;
        	            	}
        	                break;
        	            case EOF:
        	            case GT:
        	            case IDENTIFIER:
        	            case RPAREN:
        	            case SEMI:
        	            case 65:
        	            case 68:
        	            case 69:
        	            case 72:
        	            case 77:
        	            case 82:
        	            case 84:
        	            case 87:
        	            case 89:
        	            case 91:
        	            case 92:
        	            case 93:
        	            case 95:
        	            case 96:
        	            case 98:
        	            case 100:
        	            case 101:
        	            case 102:
        	            case 103:
        	            case 104:
        	            case 108:
        	            case 119:
        	            case 122:
        	            case 124:
        	            case 128:
        	            case 134:
        	            case 137:
        	            case 143:
        	            case 144:
        	            case 145:
        	            case 146:
        	            case 149:
        	            case 150:
        	            case 154:
        	            case 156:
        	            case 159:
        	            case 162:
        	            case 164:
        	            case 169:
        	            case 173:
        	            case 174:
        	            case 185:
        	            case 192:
        	            case 196:
        	            case 198:
        	            case 200:
        	            case 202:
        	            case 203:
        	            	{
        	            		alt95=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 95 );
        	                ex->set_state( 0 );


        	                goto rulenon_nullable_typeEx;

        	            }

        	            switch (alt95)
        	            {
        	        	case 1:
        	        	    // CSharp.g:532:7: rank_specifiers ( '*' )*
        	        	    {
        	        	        this->followPush(FOLLOW_rank_specifiers_in_non_nullable_type2819);
        	        	        rank_specifiers311=rank_specifiers();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulenon_nullable_typeEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, rank_specifiers311.tree);

        	        	        // CSharp.g:532:25: ( '*' )*

        	        	        for (;;)
        	        	        {
        	        	            int alt92=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	            case 72:
        	        	            	{
        	        	            		alt92=1;
        	        	            	}
        	        	                break;

        	        	            }

        	        	            switch (alt92)
        	        	            {
        	        	        	case 1:
        	        	        	    // CSharp.g:532:25: '*'
        	        	        	    {
        	        	        	        char_literal312 =  this->matchToken(72, &FOLLOW_72_in_non_nullable_type2823);
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulenon_nullable_typeEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) {
        	        	        	        char_literal312_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal312));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal312_tree);
        	        	        	        }

        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop92;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop92: ; /* Jump out to here if this rule does not match */


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // CSharp.g:533:6: ( ( '*' )+ )?
        	        	    {
        	        	        // CSharp.g:533:6: ( ( '*' )+ )?
        	        	        {
        	        	            int alt94=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	                case 72:
        	        	                	{
        	        	                		alt94=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt94)
        	        	            {
        	        	        	case 1:
        	        	        	    // CSharp.g:533:7: ( '*' )+
        	        	        	    {
        	        	        	        // CSharp.g:533:7: ( '*' )+
        	        	        	        {
        	        	        	            int cnt93=0;

        	        	        	            for (;;)
        	        	        	            {
        	        	        	                int alt93=2;
        	        	        	        	switch ( this->LA(1) )
        	        	        	        	{
        	        	        	        	case 72:
        	        	        	        		{
        	        	        	        			alt93=1;
        	        	        	        		}
        	        	        	        	    break;

        	        	        	        	}

        	        	        	        	switch (alt93)
        	        	        	        	{
        	        	        	        	    case 1:
        	        	        	        	        // CSharp.g:533:7: '*'
        	        	        	        	        {
        	        	        	        	            char_literal313 =  this->matchToken(72, &FOLLOW_72_in_non_nullable_type2832);
        	        	        	        	            if  (this->hasException())
        	        	        	        	            {
        	        	        	        	                goto rulenon_nullable_typeEx;
        	        	        	        	            }
        	        	        	        	            if (this->hasFailed())
        	        	        	        	            {
        	        	        	        	                return retval;
        	        	        	        	            }

        	        	        	        	            if ( this->get_backtracking()==0 ) {
        	        	        	        	            char_literal313_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal313));
        	        	        	        	            ADAPTOR->addChild(ADAPTOR, root_0, char_literal313_tree);
        	        	        	        	            }

        	        	        	        	        }
        	        	        	        	        break;

        	        	        	        	    default:

        	        	        	        		if ( cnt93 >= 1 )
        	        	        	        		{
        	        	        	        		    goto loop93;
        	        	        	        		}
        	        	        	        		if (this->get_backtracking()>0)
        	        	        	        		{
        	        	        	        		    this->set_failedflag( true );
        	        	        	        		    return retval;
        	        	        	        		}

        	        	        	        		/* mismatchedSetEx()
        	        	        	        		 */
        	        	        	        		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        	        	        	        		goto rulenon_nullable_typeEx;
        	        	        	        	}
        	        	        	        	cnt93++;
        	        	        	            }
        	        	        	            loop93: ;	/* Jump to here if this rule does not match */
        	        	        	        }

        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:535:4: 'void' ( '*' )+
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal314 =  this->matchToken(194, &FOLLOW_194_in_non_nullable_type2844);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_nullable_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal314_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal314));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal314_tree);
        	        }

        	        // CSharp.g:535:13: ( '*' )+
        	        {
        	            int cnt96=0;

        	            for (;;)
        	            {
        	                int alt96=2;
        	        	switch ( this->LA(1) )
        	        	{
        	        	case 72:
        	        		{
        	        			alt96=1;
        	        		}
        	        	    break;

        	        	}

        	        	switch (alt96)
        	        	{
        	        	    case 1:
        	        	        // CSharp.g:535:13: '*'
        	        	        {
        	        	            char_literal315 =  this->matchToken(72, &FOLLOW_72_in_non_nullable_type2848);
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulenon_nullable_typeEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }

        	        	            if ( this->get_backtracking()==0 ) {
        	        	            char_literal315_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal315));
        	        	            ADAPTOR->addChild(ADAPTOR, root_0, char_literal315_tree);
        	        	            }

        	        	        }
        	        	        break;

        	        	    default:

        	        		if ( cnt96 >= 1 )
        	        		{
        	        		    goto loop96;
        	        		}
        	        		if (this->get_backtracking()>0)
        	        		{
        	        		    this->set_failedflag( true );
        	        		    return retval;
        	        		}

        	        		/* mismatchedSetEx()
        	        		 */
        	        		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        	        		goto rulenon_nullable_typeEx;
        	        	}
        	        	cnt96++;
        	            }
        	            loop96: ;	/* Jump to here if this rule does not match */
        	        }

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulenon_nullable_typeEx; /* Prevent compiler warnings */
    rulenon_nullable_typeEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(80, non_nullable_type_StartIndex); }

    return retval;
}
/* $ANTLR end non_nullable_type */

/**
 * $ANTLR start non_array_type
 * CSharp.g:537:1: non_array_type : type ;
 */
CSharpParser_non_array_type_return
CSharpParser::non_array_type()
{
    CSharpParser_non_array_type_return retval(this);

    ANTLR_MARKER non_array_type_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_type_return type316;
    typedef	CSharpParser_type_return RETURN_TYPE_type316;


    /* Initialize rule variables
     */
    non_array_type_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(81)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    type316.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:537:15: ( type )
        // CSharp.g:538:2: type
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_type_in_non_array_type2859);
            type316=type();

            this->followPop();
            if  (this->hasException())
            {
                goto rulenon_array_typeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type316.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulenon_array_typeEx; /* Prevent compiler warnings */
    rulenon_array_typeEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(81, non_array_type_StartIndex); }

    return retval;
}
/* $ANTLR end non_array_type */

/**
 * $ANTLR start array_type
 * CSharp.g:539:1: array_type : type ;
 */
CSharpParser_array_type_return
CSharpParser::array_type()
{
    CSharpParser_array_type_return retval(this);

    ANTLR_MARKER array_type_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_type_return type317;
    typedef	CSharpParser_type_return RETURN_TYPE_type317;


    /* Initialize rule variables
     */
    array_type_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(82)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    type317.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:539:11: ( type )
        // CSharp.g:540:2: type
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_type_in_array_type2866);
            type317=type();

            this->followPop();
            if  (this->hasException())
            {
                goto rulearray_typeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type317.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulearray_typeEx; /* Prevent compiler warnings */
    rulearray_typeEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(82, array_type_StartIndex); }

    return retval;
}
/* $ANTLR end array_type */

/**
 * $ANTLR start unmanaged_type
 * CSharp.g:541:1: unmanaged_type : type ;
 */
CSharpParser_unmanaged_type_return
CSharpParser::unmanaged_type()
{
    CSharpParser_unmanaged_type_return retval(this);

    ANTLR_MARKER unmanaged_type_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_type_return type318;
    typedef	CSharpParser_type_return RETURN_TYPE_type318;


    /* Initialize rule variables
     */
    unmanaged_type_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(83)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    type318.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:541:15: ( type )
        // CSharp.g:542:2: type
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_type_in_unmanaged_type2873);
            type318=type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunmanaged_typeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type318.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleunmanaged_typeEx; /* Prevent compiler warnings */
    ruleunmanaged_typeEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(83, unmanaged_type_StartIndex); }

    return retval;
}
/* $ANTLR end unmanaged_type */

/**
 * $ANTLR start class_type
 * CSharp.g:543:1: class_type : type ;
 */
CSharpParser_class_type_return
CSharpParser::class_type()
{
    CSharpParser_class_type_return retval(this);

    ANTLR_MARKER class_type_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_type_return type319;
    typedef	CSharpParser_type_return RETURN_TYPE_type319;


    /* Initialize rule variables
     */
    class_type_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(84)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    type319.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:543:11: ( type )
        // CSharp.g:544:2: type
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_type_in_class_type2880);
            type319=type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleclass_typeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type319.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleclass_typeEx; /* Prevent compiler warnings */
    ruleclass_typeEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(84, class_type_StartIndex); }

    return retval;
}
/* $ANTLR end class_type */

/**
 * $ANTLR start pointer_type
 * CSharp.g:545:1: pointer_type : type ;
 */
CSharpParser_pointer_type_return
CSharpParser::pointer_type()
{
    CSharpParser_pointer_type_return retval(this);

    ANTLR_MARKER pointer_type_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_type_return type320;
    typedef	CSharpParser_type_return RETURN_TYPE_type320;


    /* Initialize rule variables
     */
    pointer_type_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(85)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    type320.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:545:13: ( type )
        // CSharp.g:546:2: type
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_type_in_pointer_type2887);
            type320=type();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepointer_typeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type320.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulepointer_typeEx; /* Prevent compiler warnings */
    rulepointer_typeEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(85, pointer_type_StartIndex); }

    return retval;
}
/* $ANTLR end pointer_type */

/**
 * $ANTLR start block
 * CSharp.g:552:1: block : ( ';' | '{' ( statement_list )? '}' );
 */
CSharpParser_block_return
CSharpParser::block()
{
    CSharpParser_block_return retval(this);

    ANTLR_MARKER block_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal321;
    const CommonTokenType*    char_literal322;
    const CommonTokenType*    char_literal324;
    CSharpParser_statement_list_return statement_list323;
    typedef	CSharpParser_statement_list_return RETURN_TYPE_statement_list323;

    ImplTraits::TreeType* char_literal321_tree;
    ImplTraits::TreeType* char_literal322_tree;
    ImplTraits::TreeType* char_literal324_tree;

    /* Initialize rule variables
     */
    block_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(86)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal321       = NULL;
    char_literal322       = NULL;
    char_literal324       = NULL;
    statement_list323.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal321_tree   = NULL;
    char_literal322_tree   = NULL;
    char_literal324_tree   = NULL;


    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:552:6: ( ';' | '{' ( statement_list )? '}' )

            ANTLR_UINT32 alt99;

            alt99=2;

            switch ( this->LA(1) )
            {
            case SEMI:
            	{
            		alt99=1;
            	}
                break;
            case 199:
            	{
            		alt99=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 99 );
                ex->set_state( 0 );


                goto ruleblockEx;

            }

            switch (alt99)
            {
        	case 1:
        	    // CSharp.g:553:2: ';'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        char_literal321 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_block2899);
        	        if  (this->hasException())
        	        {
        	            goto ruleblockEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal321_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal321));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal321_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:554:4: '{' ( statement_list )? '}'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        char_literal322 =  this->matchToken(199, &FOLLOW_199_in_block2904);
        	        if  (this->hasException())
        	        {
        	            goto ruleblockEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal322_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal322));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal322_tree);
        	        }

        	        // CSharp.g:554:10: ( statement_list )?
        	        {
        	            int alt98=2;
        	            switch ( this->LA(1) )
        	            {
        	                case Character_literal:
        	                case FALSE:
        	                case Hex_number:
        	                case IDENTIFIER:
        	                case IF:
        	                case LT_NULL:
        	                case MINUS:
        	                case NUMBER:
        	                case Real_literal:
        	                case SEMI:
        	                case STRINGLITERAL:
        	                case TRUE:
        	                case USING:
        	                case Verbatim_string_literal:
        	                case 64:
        	                case 69:
        	                case 71:
        	                case 72:
        	                case 74:
        	                case 75:
        	                case 78:
        	                case 98:
        	                case 100:
        	                case 101:
        	                case 103:
        	                case 104:
        	                case 105:
        	                case 106:
        	                case 107:
        	                case 108:
        	                case 109:
        	                case 111:
        	                case 112:
        	                case 114:
        	                case 115:
        	                case 116:
        	                case 117:
        	                case 118:
        	                case 119:
        	                case 120:
        	                case 121:
        	                case 122:
        	                case 124:
        	                case 128:
        	                case 130:
        	                case 131:
        	                case 132:
        	                case 133:
        	                case 134:
        	                case 136:
        	                case 137:
        	                case 140:
        	                case 143:
        	                case 145:
        	                case 146:
        	                case 147:
        	                case 148:
        	                case 149:
        	                case 150:
        	                case 152:
        	                case 153:
        	                case 154:
        	                case 156:
        	                case 159:
        	                case 162:
        	                case 164:
        	                case 169:
        	                case 170:
        	                case 171:
        	                case 173:
        	                case 174:
        	                case 175:
        	                case 176:
        	                case 179:
        	                case 181:
        	                case 182:
        	                case 183:
        	                case 184:
        	                case 185:
        	                case 186:
        	                case 187:
        	                case 188:
        	                case 189:
        	                case 190:
        	                case 191:
        	                case 192:
        	                case 194:
        	                case 196:
        	                case 197:
        	                case 198:
        	                case 199:
        	                case 204:
        	                	{
        	                		alt98=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt98)
        	            {
        	        	case 1:
        	        	    // CSharp.g:554:10: statement_list
        	        	    {
        	        	        this->followPush(FOLLOW_statement_list_in_block2908);
        	        	        statement_list323=statement_list();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleblockEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, statement_list323.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        char_literal324 =  this->matchToken(203, &FOLLOW_203_in_block2913);
        	        if  (this->hasException())
        	        {
        	            goto ruleblockEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal324_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal324));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal324_tree);
        	        }

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleblockEx; /* Prevent compiler warnings */
    ruleblockEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(86, block_StartIndex); }

    return retval;
}
/* $ANTLR end block */

/**
 * $ANTLR start statement_list
 * CSharp.g:555:1: statement_list : ( statement )+ ;
 */
CSharpParser_statement_list_return
CSharpParser::statement_list()
{
    CSharpParser_statement_list_return retval(this);

    ANTLR_MARKER statement_list_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_statement_return statement325;
    typedef	CSharpParser_statement_return RETURN_TYPE_statement325;


    /* Initialize rule variables
     */
    statement_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(87)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    statement325.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:555:15: ( ( statement )+ )
        // CSharp.g:556:2: ( statement )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:556:2: ( statement )+
            {
                int cnt100=0;

                for (;;)
                {
                    int alt100=2;
            	switch ( this->LA(1) )
            	{
            	case 117:
            		{
            			switch ( this->LA(2) )
            			{
            			case 71:
            				{
            					alt100=1;
            				}
            			    break;

            			}

            		}
            	    break;
            	case Character_literal:
            	case FALSE:
            	case Hex_number:
            	case IDENTIFIER:
            	case IF:
            	case LT_NULL:
            	case MINUS:
            	case NUMBER:
            	case Real_literal:
            	case SEMI:
            	case STRINGLITERAL:
            	case TRUE:
            	case USING:
            	case Verbatim_string_literal:
            	case 64:
            	case 69:
            	case 71:
            	case 72:
            	case 74:
            	case 75:
            	case 78:
            	case 98:
            	case 100:
            	case 101:
            	case 103:
            	case 104:
            	case 105:
            	case 106:
            	case 107:
            	case 108:
            	case 109:
            	case 111:
            	case 112:
            	case 114:
            	case 115:
            	case 116:
            	case 118:
            	case 119:
            	case 120:
            	case 121:
            	case 122:
            	case 124:
            	case 128:
            	case 130:
            	case 131:
            	case 132:
            	case 133:
            	case 134:
            	case 136:
            	case 137:
            	case 140:
            	case 143:
            	case 145:
            	case 146:
            	case 147:
            	case 148:
            	case 149:
            	case 150:
            	case 152:
            	case 153:
            	case 154:
            	case 156:
            	case 159:
            	case 162:
            	case 164:
            	case 169:
            	case 170:
            	case 171:
            	case 173:
            	case 174:
            	case 175:
            	case 176:
            	case 179:
            	case 181:
            	case 182:
            	case 183:
            	case 184:
            	case 185:
            	case 186:
            	case 187:
            	case 188:
            	case 189:
            	case 190:
            	case 191:
            	case 192:
            	case 194:
            	case 196:
            	case 197:
            	case 198:
            	case 199:
            	case 204:
            		{
            			alt100=1;
            		}
            	    break;

            	}

            	switch (alt100)
            	{
            	    case 1:
            	        // CSharp.g:556:2: statement
            	        {
            	            this->followPush(FOLLOW_statement_in_statement_list2920);
            	            statement325=statement();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatement_listEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, statement325.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt100 >= 1 )
            		{
            		    goto loop100;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulestatement_listEx;
            	}
            	cnt100++;
                }
                loop100: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulestatement_listEx; /* Prevent compiler warnings */
    rulestatement_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(87, statement_list_StartIndex); }

    return retval;
}
/* $ANTLR end statement_list */

/**
 * $ANTLR start expression
 * CSharp.g:561:1: expression : ( ( unary_expression assignment_operator )=> assignment | non_assignment_expression );
 */
CSharpParser_expression_return
CSharpParser::expression()
{
    CSharpParser_expression_return retval(this);

    ANTLR_MARKER expression_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_assignment_return assignment326;
    typedef	CSharpParser_assignment_return RETURN_TYPE_assignment326;

    CSharpParser_non_assignment_expression_return non_assignment_expression327;
    typedef	CSharpParser_non_assignment_expression_return RETURN_TYPE_non_assignment_expression327;


    /* Initialize rule variables
     */
    expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(88)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    assignment326.tree = NULL;

    non_assignment_expression327.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:561:11: ( ( unary_expression assignment_operator )=> assignment | non_assignment_expression )

            ANTLR_UINT32 alt101;

            alt101=2;

            switch ( this->LA(1) )
            {
            case 71:
            	{
            		{
            		    int LA101_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 1 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case 152:
            	{
            		{
            		    int LA101_2 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 2 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case 182:
            	{
            		{
            		    int LA101_3 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 3 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case 106:
            case 109:
            case 111:
            case 116:
            case 121:
            case 131:
            case 140:
            case 148:
            case 153:
            case 171:
            case 175:
            case 179:
            case 187:
            case 188:
            case 191:
            	{
            		{
            		    int LA101_4 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 4 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case 134:
            	{
            		{
            		    int LA101_5 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 5 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case 105:
            	{
            		{
            		    int LA101_6 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 6 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case 186:
            	{
            		{
            		    int LA101_7 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 7 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case Character_literal:
            case FALSE:
            case Hex_number:
            case LT_NULL:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            	{
            		{
            		    int LA101_8 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 8 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case 176:
            	{
            		{
            		    int LA101_9 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 9 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case 112:
            	{
            		{
            		    int LA101_10 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 10 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case 189:
            	{
            		{
            		    int LA101_11 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 11 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case 117:
            	{
            		{
            		    int LA101_12 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 12 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case 118:
            	{
            		{
            		    int LA101_13 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 13 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case 74:
            	{
            		{
            		    int LA101_14 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 14 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case MINUS:
            	{
            		{
            		    int LA101_15 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 15 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case 64:
            	{
            		{
            		    int LA101_16 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 16 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case 204:
            	{
            		{
            		    int LA101_17 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 17 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case 75:
            	{
            		{
            		    int LA101_18 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 18 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case 78:
            	{
            		{
            		    int LA101_19 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 19 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case 72:
            	{
            		{
            		    int LA101_20 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 20 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case 69:
            	{
            		{
            		    int LA101_21 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 21 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
            	{
            		{
            		    int LA101_22 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_CSharp>() )))
            		    {
            		        alt101=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 22 );


            		        goto ruleexpressionEx;

            		    }
            		}
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 101 );
                ex->set_state( 0 );


                goto ruleexpressionEx;

            }

            switch (alt101)
            {
        	case 1:
        	    // CSharp.g:562:2: ( unary_expression assignment_operator )=> assignment
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_assignment_in_expression2945);
        	        assignment326=assignment();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, assignment326.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:563:4: non_assignment_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_non_assignment_expression_in_expression2950);
        	        non_assignment_expression327=non_assignment_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, non_assignment_expression327.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(88, expression_StartIndex); }

    return retval;
}
/* $ANTLR end expression */

/**
 * $ANTLR start expression_list
 * CSharp.g:565:1: expression_list : expression ( ',' expression )* -> ( expression )+ ;
 */
CSharpParser_expression_list_return
CSharpParser::expression_list()
{
    CSharpParser_expression_list_return retval(this);

    ANTLR_MARKER expression_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal329;
    CSharpParser_expression_return expression328;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression328;

    CSharpParser_expression_return expression330;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression330;

    ImplTraits::TreeType* char_literal329_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_77;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    expression_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(89)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal329       = NULL;
    expression328.tree = NULL;

    expression330.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal329_tree   = NULL;

    stream_77   = NULL;
    #define CREATE_stream_77  if (stream_77 == NULL) {stream_77 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 77"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;


 
    {
        // CSharp.g:566:2: ( expression ( ',' expression )* -> ( expression )+ )
        // CSharp.g:566:4: expression ( ',' expression )*
        {
            this->followPush(FOLLOW_expression_in_expression_list2960);
            expression328=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpression_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression328.tree, NULL); }

            // CSharp.g:566:16: ( ',' expression )*

            for (;;)
            {
                int alt102=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt102=1;
                	}
                    break;

                }

                switch (alt102)
                {
            	case 1:
            	    // CSharp.g:566:17: ',' expression
            	    {
            	        char_literal329 =  this->matchToken(77, &FOLLOW_77_in_expression_list2964);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpression_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) { CREATE_stream_77; stream_77->add(stream_77, char_literal329, NULL); }


            	        this->followPush(FOLLOW_expression_in_expression_list2968);
            	        expression330=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpression_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression330.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop102;	/* break out of the loop */
            	    break;
                }
            }
            loop102: ; /* Jump out to here if this rule does not match */


            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( this->get_backtracking()==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 566:36: -> ( expression )+
            	{
            	    if ((stream_expression == NULL || !stream_expression->hasNext(stream_expression))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_expression->hasNext(stream_expression))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	    	}
            	    	stream_expression->reset(stream_expression);

            	    }
            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexpression_listEx; /* Prevent compiler warnings */
    ruleexpression_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_77 != NULL) stream_77->free(stream_77);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(89, expression_list_StartIndex); }

    return retval;
}
/* $ANTLR end expression_list */

/**
 * $ANTLR start assignment
 * CSharp.g:569:1: assignment : unary_expression assignment_operator expression ;
 */
CSharpParser_assignment_return
CSharpParser::assignment()
{
    CSharpParser_assignment_return retval(this);

    ANTLR_MARKER assignment_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_unary_expression_return unary_expression331;
    typedef	CSharpParser_unary_expression_return RETURN_TYPE_unary_expression331;

    CSharpParser_assignment_operator_return assignment_operator332;
    typedef	CSharpParser_assignment_operator_return RETURN_TYPE_assignment_operator332;

    CSharpParser_expression_return expression333;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression333;


    /* Initialize rule variables
     */
    assignment_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(90)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    unary_expression331.tree = NULL;

    assignment_operator332.tree = NULL;

    expression333.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:569:11: ( unary_expression assignment_operator expression )
        // CSharp.g:570:2: unary_expression assignment_operator expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_unary_expression_in_assignment2985);
            unary_expression331=unary_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unary_expression331.tree);

            this->followPush(FOLLOW_assignment_operator_in_assignment2989);
            assignment_operator332=assignment_operator();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, assignment_operator332.tree);

            this->followPush(FOLLOW_expression_in_assignment2993);
            expression333=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression333.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleassignmentEx; /* Prevent compiler warnings */
    ruleassignmentEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(90, assignment_StartIndex); }

    return retval;
}
/* $ANTLR end assignment */

/**
 * $ANTLR start unary_expression
 * CSharp.g:571:1: unary_expression : ( ( cast_expression )=> cast_expression | primary_or_array_creation_expression ( '++' )? ( '--' )? | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | pre_increment_expression | pre_decrement_expression | pointer_indirection_expression | addressof_expression );
 */
CSharpParser_unary_expression_return
CSharpParser::unary_expression()
{
    CSharpParser_unary_expression_return retval(this);

    ANTLR_MARKER unary_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal336;
    const CommonTokenType*    string_literal337;
    const CommonTokenType*    char_literal338;
    const CommonTokenType*    char_literal340;
    const CommonTokenType*    char_literal342;
    const CommonTokenType*    char_literal344;
    CSharpParser_cast_expression_return cast_expression334;
    typedef	CSharpParser_cast_expression_return RETURN_TYPE_cast_expression334;

    CSharpParser_primary_or_array_creation_expression_return primary_or_array_creation_expression335;
    typedef	CSharpParser_primary_or_array_creation_expression_return RETURN_TYPE_primary_or_array_creation_expression335;

    CSharpParser_unary_expression_return unary_expression339;
    typedef	CSharpParser_unary_expression_return RETURN_TYPE_unary_expression339;

    CSharpParser_unary_expression_return unary_expression341;
    typedef	CSharpParser_unary_expression_return RETURN_TYPE_unary_expression341;

    CSharpParser_unary_expression_return unary_expression343;
    typedef	CSharpParser_unary_expression_return RETURN_TYPE_unary_expression343;

    CSharpParser_unary_expression_return unary_expression345;
    typedef	CSharpParser_unary_expression_return RETURN_TYPE_unary_expression345;

    CSharpParser_pre_increment_expression_return pre_increment_expression346;
    typedef	CSharpParser_pre_increment_expression_return RETURN_TYPE_pre_increment_expression346;

    CSharpParser_pre_decrement_expression_return pre_decrement_expression347;
    typedef	CSharpParser_pre_decrement_expression_return RETURN_TYPE_pre_decrement_expression347;

    CSharpParser_pointer_indirection_expression_return pointer_indirection_expression348;
    typedef	CSharpParser_pointer_indirection_expression_return RETURN_TYPE_pointer_indirection_expression348;

    CSharpParser_addressof_expression_return addressof_expression349;
    typedef	CSharpParser_addressof_expression_return RETURN_TYPE_addressof_expression349;

    ImplTraits::TreeType* string_literal336_tree;
    ImplTraits::TreeType* string_literal337_tree;
    ImplTraits::TreeType* char_literal338_tree;
    ImplTraits::TreeType* char_literal340_tree;
    ImplTraits::TreeType* char_literal342_tree;
    ImplTraits::TreeType* char_literal344_tree;

    /* Initialize rule variables
     */
    unary_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(91)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal336       = NULL;
    string_literal337       = NULL;
    char_literal338       = NULL;
    char_literal340       = NULL;
    char_literal342       = NULL;
    char_literal344       = NULL;
    cast_expression334.tree = NULL;

    primary_or_array_creation_expression335.tree = NULL;

    unary_expression339.tree = NULL;

    unary_expression341.tree = NULL;

    unary_expression343.tree = NULL;

    unary_expression345.tree = NULL;

    pre_increment_expression346.tree = NULL;

    pre_decrement_expression347.tree = NULL;

    pointer_indirection_expression348.tree = NULL;

    addressof_expression349.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal336_tree   = NULL;
    string_literal337_tree   = NULL;
    char_literal338_tree   = NULL;
    char_literal340_tree   = NULL;
    char_literal342_tree   = NULL;
    char_literal344_tree   = NULL;


    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:571:17: ( ( cast_expression )=> cast_expression | primary_or_array_creation_expression ( '++' )? ( '--' )? | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | pre_increment_expression | pre_decrement_expression | pointer_indirection_expression | addressof_expression )

            ANTLR_UINT32 alt105;

            alt105=10;

            switch ( this->LA(1) )
            {
            case 71:
            	{
            		{
            		    int LA105_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred20_CSharp>() )))
            		    {
            		        alt105=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt105=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 105 );
            		        ex->set_state( 1 );


            		        goto ruleunary_expressionEx;

            		    }
            		}
            	}
                break;
            case Character_literal:
            case FALSE:
            case Hex_number:
            case IDENTIFIER:
            case LT_NULL:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 109:
            case 111:
            case 112:
            case 116:
            case 117:
            case 118:
            case 119:
            case 121:
            case 122:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 152:
            case 153:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 176:
            case 179:
            case 182:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 191:
            case 192:
            case 196:
            case 198:
            	{
            		alt105=2;
            	}
                break;
            case 74:
            	{
            		alt105=3;
            	}
                break;
            case MINUS:
            	{
            		alt105=4;
            	}
                break;
            case 64:
            	{
            		alt105=5;
            	}
                break;
            case 204:
            	{
            		alt105=6;
            	}
                break;
            case 75:
            	{
            		alt105=7;
            	}
                break;
            case 78:
            	{
            		alt105=8;
            	}
                break;
            case 72:
            	{
            		alt105=9;
            	}
                break;
            case 69:
            	{
            		alt105=10;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 105 );
                ex->set_state( 0 );


                goto ruleunary_expressionEx;

            }

            switch (alt105)
            {
        	case 1:
        	    // CSharp.g:573:2: ( cast_expression )=> cast_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_cast_expression_in_unary_expression3010);
        	        cast_expression334=cast_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, cast_expression334.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:574:4: primary_or_array_creation_expression ( '++' )? ( '--' )?
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_primary_or_array_creation_expression_in_unary_expression3015);
        	        primary_or_array_creation_expression335=primary_or_array_creation_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, primary_or_array_creation_expression335.tree);

        	        // CSharp.g:574:43: ( '++' )?
        	        {
        	            int alt103=2;
        	            switch ( this->LA(1) )
        	            {
        	                case 75:
        	                	{
        	                		alt103=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt103)
        	            {
        	        	case 1:
        	        	    // CSharp.g:574:43: '++'
        	        	    {
        	        	        string_literal336 =  this->matchToken(75, &FOLLOW_75_in_unary_expression3019);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleunary_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        string_literal336_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal336));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal336_tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // CSharp.g:574:51: ( '--' )?
        	        {
        	            int alt104=2;
        	            switch ( this->LA(1) )
        	            {
        	                case 78:
        	                	{
        	                		alt104=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt104)
        	            {
        	        	case 1:
        	        	    // CSharp.g:574:51: '--'
        	        	    {
        	        	        string_literal337 =  this->matchToken(78, &FOLLOW_78_in_unary_expression3024);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleunary_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        string_literal337_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal337));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal337_tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 3:
        	    // CSharp.g:575:4: '+' unary_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        char_literal338 =  this->matchToken(74, &FOLLOW_74_in_unary_expression3030);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal338_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal338));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal338_tree);
        	        }

        	        this->followPush(FOLLOW_unary_expression_in_unary_expression3034);
        	        unary_expression339=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unary_expression339.tree);

        	    }
        	    break;
        	case 4:
        	    // CSharp.g:576:4: '-' unary_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        char_literal340 =  this->matchToken(MINUS, &FOLLOW_MINUS_in_unary_expression3040);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal340_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal340));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal340_tree);
        	        }

        	        this->followPush(FOLLOW_unary_expression_in_unary_expression3044);
        	        unary_expression341=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unary_expression341.tree);

        	    }
        	    break;
        	case 5:
        	    // CSharp.g:577:4: '!' unary_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        char_literal342 =  this->matchToken(64, &FOLLOW_64_in_unary_expression3050);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal342_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal342));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal342_tree);
        	        }

        	        this->followPush(FOLLOW_unary_expression_in_unary_expression3054);
        	        unary_expression343=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unary_expression343.tree);

        	    }
        	    break;
        	case 6:
        	    // CSharp.g:578:4: '~' unary_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        char_literal344 =  this->matchToken(204, &FOLLOW_204_in_unary_expression3060);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal344_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal344));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal344_tree);
        	        }

        	        this->followPush(FOLLOW_unary_expression_in_unary_expression3064);
        	        unary_expression345=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unary_expression345.tree);

        	    }
        	    break;
        	case 7:
        	    // CSharp.g:579:4: pre_increment_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_pre_increment_expression_in_unary_expression3070);
        	        pre_increment_expression346=pre_increment_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, pre_increment_expression346.tree);

        	    }
        	    break;
        	case 8:
        	    // CSharp.g:580:4: pre_decrement_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_pre_decrement_expression_in_unary_expression3076);
        	        pre_decrement_expression347=pre_decrement_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, pre_decrement_expression347.tree);

        	    }
        	    break;
        	case 9:
        	    // CSharp.g:581:4: pointer_indirection_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_pointer_indirection_expression_in_unary_expression3082);
        	        pointer_indirection_expression348=pointer_indirection_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, pointer_indirection_expression348.tree);

        	    }
        	    break;
        	case 10:
        	    // CSharp.g:582:4: addressof_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_addressof_expression_in_unary_expression3087);
        	        addressof_expression349=addressof_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, addressof_expression349.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleunary_expressionEx; /* Prevent compiler warnings */
    ruleunary_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(91, unary_expression_StartIndex); }

    return retval;
}
/* $ANTLR end unary_expression */

/**
 * $ANTLR start cast_expression
 * CSharp.g:584:1: cast_expression : '(' type ')' unary_expression ;
 */
CSharpParser_cast_expression_return
CSharpParser::cast_expression()
{
    CSharpParser_cast_expression_return retval(this);

    ANTLR_MARKER cast_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal350;
    const CommonTokenType*    char_literal352;
    CSharpParser_type_return type351;
    typedef	CSharpParser_type_return RETURN_TYPE_type351;

    CSharpParser_unary_expression_return unary_expression353;
    typedef	CSharpParser_unary_expression_return RETURN_TYPE_unary_expression353;

    ImplTraits::TreeType* char_literal350_tree;
    ImplTraits::TreeType* char_literal352_tree;

    /* Initialize rule variables
     */
    cast_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(92)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal350       = NULL;
    char_literal352       = NULL;
    type351.tree = NULL;

    unary_expression353.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal350_tree   = NULL;
    char_literal352_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:584:16: ( '(' type ')' unary_expression )
        // CSharp.g:585:2: '(' type ')' unary_expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal350 =  this->matchToken(71, &FOLLOW_71_in_cast_expression3097);
            if  (this->hasException())
            {
                goto rulecast_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal350_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal350));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal350_tree);
            }

            this->followPush(FOLLOW_type_in_cast_expression3101);
            type351=type();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecast_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type351.tree);

            char_literal352 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_cast_expression3105);
            if  (this->hasException())
            {
                goto rulecast_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal352_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal352));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal352_tree);
            }

            this->followPush(FOLLOW_unary_expression_in_cast_expression3109);
            unary_expression353=unary_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecast_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unary_expression353.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulecast_expressionEx; /* Prevent compiler warnings */
    rulecast_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(92, cast_expression_StartIndex); }

    return retval;
}
/* $ANTLR end cast_expression */

/**
 * $ANTLR start assignment_operator
 * CSharp.g:586:1: assignment_operator : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>' '>=' );
 */
CSharpParser_assignment_operator_return
CSharpParser::assignment_operator()
{
    CSharpParser_assignment_operator_return retval(this);

    ANTLR_MARKER assignment_operator_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal354;
    const CommonTokenType*    string_literal355;
    const CommonTokenType*    string_literal356;
    const CommonTokenType*    string_literal357;
    const CommonTokenType*    string_literal358;
    const CommonTokenType*    string_literal359;
    const CommonTokenType*    string_literal360;
    const CommonTokenType*    string_literal361;
    const CommonTokenType*    string_literal362;
    const CommonTokenType*    string_literal363;
    const CommonTokenType*    char_literal364;
    const CommonTokenType*    string_literal365;

    ImplTraits::TreeType* char_literal354_tree;
    ImplTraits::TreeType* string_literal355_tree;
    ImplTraits::TreeType* string_literal356_tree;
    ImplTraits::TreeType* string_literal357_tree;
    ImplTraits::TreeType* string_literal358_tree;
    ImplTraits::TreeType* string_literal359_tree;
    ImplTraits::TreeType* string_literal360_tree;
    ImplTraits::TreeType* string_literal361_tree;
    ImplTraits::TreeType* string_literal362_tree;
    ImplTraits::TreeType* string_literal363_tree;
    ImplTraits::TreeType* char_literal364_tree;
    ImplTraits::TreeType* string_literal365_tree;

    /* Initialize rule variables
     */
    assignment_operator_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(93)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal354       = NULL;
    string_literal355       = NULL;
    string_literal356       = NULL;
    string_literal357       = NULL;
    string_literal358       = NULL;
    string_literal359       = NULL;
    string_literal360       = NULL;
    string_literal361       = NULL;
    string_literal362       = NULL;
    string_literal363       = NULL;
    char_literal364       = NULL;
    string_literal365       = NULL;
    retval.call_start_placeholder(); 


    char_literal354_tree   = NULL;
    string_literal355_tree   = NULL;
    string_literal356_tree   = NULL;
    string_literal357_tree   = NULL;
    string_literal358_tree   = NULL;
    string_literal359_tree   = NULL;
    string_literal360_tree   = NULL;
    string_literal361_tree   = NULL;
    string_literal362_tree   = NULL;
    string_literal363_tree   = NULL;
    char_literal364_tree   = NULL;
    string_literal365_tree   = NULL;


    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:586:20: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>' '>=' )

            ANTLR_UINT32 alt106;

            alt106=11;

            switch ( this->LA(1) )
            {
            case 88:
            	{
            		alt106=1;
            	}
                break;
            case 76:
            	{
            		alt106=2;
            	}
                break;
            case 79:
            	{
            		alt106=3;
            	}
                break;
            case 73:
            	{
            		alt106=4;
            	}
                break;
            case 81:
            	{
            		alt106=5;
            	}
                break;
            case 67:
            	{
            		alt106=6;
            	}
                break;
            case 70:
            	{
            		alt106=7;
            	}
                break;
            case 201:
            	{
            		alt106=8;
            	}
                break;
            case 97:
            	{
            		alt106=9;
            	}
                break;
            case 86:
            	{
            		alt106=10;
            	}
                break;
            case GT:
            	{
            		alt106=11;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 106 );
                ex->set_state( 0 );


                goto ruleassignment_operatorEx;

            }

            switch (alt106)
            {
        	case 1:
        	    // CSharp.g:587:2: '='
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        char_literal354 =  this->matchToken(88, &FOLLOW_88_in_assignment_operator3117);
        	        if  (this->hasException())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal354_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal354));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal354_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:587:8: '+='
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal355 =  this->matchToken(76, &FOLLOW_76_in_assignment_operator3121);
        	        if  (this->hasException())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal355_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal355));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal355_tree);
        	        }

        	    }
        	    break;
        	case 3:
        	    // CSharp.g:587:15: '-='
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal356 =  this->matchToken(79, &FOLLOW_79_in_assignment_operator3125);
        	        if  (this->hasException())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal356_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal356));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal356_tree);
        	        }

        	    }
        	    break;
        	case 4:
        	    // CSharp.g:587:22: '*='
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal357 =  this->matchToken(73, &FOLLOW_73_in_assignment_operator3129);
        	        if  (this->hasException())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal357_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal357));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal357_tree);
        	        }

        	    }
        	    break;
        	case 5:
        	    // CSharp.g:587:29: '/='
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal358 =  this->matchToken(81, &FOLLOW_81_in_assignment_operator3133);
        	        if  (this->hasException())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal358_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal358));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal358_tree);
        	        }

        	    }
        	    break;
        	case 6:
        	    // CSharp.g:587:36: '%='
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal359 =  this->matchToken(67, &FOLLOW_67_in_assignment_operator3137);
        	        if  (this->hasException())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal359_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal359));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal359_tree);
        	        }

        	    }
        	    break;
        	case 7:
        	    // CSharp.g:587:43: '&='
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal360 =  this->matchToken(70, &FOLLOW_70_in_assignment_operator3141);
        	        if  (this->hasException())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal360_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal360));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal360_tree);
        	        }

        	    }
        	    break;
        	case 8:
        	    // CSharp.g:587:50: '|='
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal361 =  this->matchToken(201, &FOLLOW_201_in_assignment_operator3145);
        	        if  (this->hasException())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal361_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal361));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal361_tree);
        	        }

        	    }
        	    break;
        	case 9:
        	    // CSharp.g:587:57: '^='
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal362 =  this->matchToken(97, &FOLLOW_97_in_assignment_operator3149);
        	        if  (this->hasException())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal362_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal362));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal362_tree);
        	        }

        	    }
        	    break;
        	case 10:
        	    // CSharp.g:587:64: '<<='
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal363 =  this->matchToken(86, &FOLLOW_86_in_assignment_operator3153);
        	        if  (this->hasException())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal363_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal363));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal363_tree);
        	        }

        	    }
        	    break;
        	case 11:
        	    // CSharp.g:587:72: '>' '>='
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        char_literal364 =  this->matchToken(GT, &FOLLOW_GT_in_assignment_operator3157);
        	        if  (this->hasException())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal364_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal364));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal364_tree);
        	        }

        	        string_literal365 =  this->matchToken(91, &FOLLOW_91_in_assignment_operator3159);
        	        if  (this->hasException())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal365_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal365));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal365_tree);
        	        }

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleassignment_operatorEx; /* Prevent compiler warnings */
    ruleassignment_operatorEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(93, assignment_operator_StartIndex); }

    return retval;
}
/* $ANTLR end assignment_operator */

/**
 * $ANTLR start pre_increment_expression
 * CSharp.g:588:1: pre_increment_expression : '++' unary_expression ;
 */
CSharpParser_pre_increment_expression_return
CSharpParser::pre_increment_expression()
{
    CSharpParser_pre_increment_expression_return retval(this);

    ANTLR_MARKER pre_increment_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal366;
    CSharpParser_unary_expression_return unary_expression367;
    typedef	CSharpParser_unary_expression_return RETURN_TYPE_unary_expression367;

    ImplTraits::TreeType* string_literal366_tree;

    /* Initialize rule variables
     */
    pre_increment_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(94)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal366       = NULL;
    unary_expression367.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal366_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:588:25: ( '++' unary_expression )
        // CSharp.g:589:2: '++' unary_expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal366 =  this->matchToken(75, &FOLLOW_75_in_pre_increment_expression3168);
            if  (this->hasException())
            {
                goto rulepre_increment_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal366_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal366));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal366_tree);
            }

            this->followPush(FOLLOW_unary_expression_in_pre_increment_expression3172);
            unary_expression367=unary_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepre_increment_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unary_expression367.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulepre_increment_expressionEx; /* Prevent compiler warnings */
    rulepre_increment_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(94, pre_increment_expression_StartIndex); }

    return retval;
}
/* $ANTLR end pre_increment_expression */

/**
 * $ANTLR start pre_decrement_expression
 * CSharp.g:590:1: pre_decrement_expression : '--' unary_expression ;
 */
CSharpParser_pre_decrement_expression_return
CSharpParser::pre_decrement_expression()
{
    CSharpParser_pre_decrement_expression_return retval(this);

    ANTLR_MARKER pre_decrement_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal368;
    CSharpParser_unary_expression_return unary_expression369;
    typedef	CSharpParser_unary_expression_return RETURN_TYPE_unary_expression369;

    ImplTraits::TreeType* string_literal368_tree;

    /* Initialize rule variables
     */
    pre_decrement_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(95)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal368       = NULL;
    unary_expression369.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal368_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:590:25: ( '--' unary_expression )
        // CSharp.g:591:2: '--' unary_expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal368 =  this->matchToken(78, &FOLLOW_78_in_pre_decrement_expression3181);
            if  (this->hasException())
            {
                goto rulepre_decrement_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal368_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal368));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal368_tree);
            }

            this->followPush(FOLLOW_unary_expression_in_pre_decrement_expression3185);
            unary_expression369=unary_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepre_decrement_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unary_expression369.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulepre_decrement_expressionEx; /* Prevent compiler warnings */
    rulepre_decrement_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(95, pre_decrement_expression_StartIndex); }

    return retval;
}
/* $ANTLR end pre_decrement_expression */

/**
 * $ANTLR start pointer_indirection_expression
 * CSharp.g:592:1: pointer_indirection_expression : '*' unary_expression ;
 */
CSharpParser_pointer_indirection_expression_return
CSharpParser::pointer_indirection_expression()
{
    CSharpParser_pointer_indirection_expression_return retval(this);

    ANTLR_MARKER pointer_indirection_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal370;
    CSharpParser_unary_expression_return unary_expression371;
    typedef	CSharpParser_unary_expression_return RETURN_TYPE_unary_expression371;

    ImplTraits::TreeType* char_literal370_tree;

    /* Initialize rule variables
     */
    pointer_indirection_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(96)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal370       = NULL;
    unary_expression371.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal370_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:592:31: ( '*' unary_expression )
        // CSharp.g:593:2: '*' unary_expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal370 =  this->matchToken(72, &FOLLOW_72_in_pointer_indirection_expression3193);
            if  (this->hasException())
            {
                goto rulepointer_indirection_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal370_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal370));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal370_tree);
            }

            this->followPush(FOLLOW_unary_expression_in_pointer_indirection_expression3197);
            unary_expression371=unary_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepointer_indirection_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unary_expression371.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulepointer_indirection_expressionEx; /* Prevent compiler warnings */
    rulepointer_indirection_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(96, pointer_indirection_expression_StartIndex); }

    return retval;
}
/* $ANTLR end pointer_indirection_expression */

/**
 * $ANTLR start addressof_expression
 * CSharp.g:594:1: addressof_expression : '&' unary_expression ;
 */
CSharpParser_addressof_expression_return
CSharpParser::addressof_expression()
{
    CSharpParser_addressof_expression_return retval(this);

    ANTLR_MARKER addressof_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal372;
    CSharpParser_unary_expression_return unary_expression373;
    typedef	CSharpParser_unary_expression_return RETURN_TYPE_unary_expression373;

    ImplTraits::TreeType* char_literal372_tree;

    /* Initialize rule variables
     */
    addressof_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(97)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal372       = NULL;
    unary_expression373.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal372_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:594:21: ( '&' unary_expression )
        // CSharp.g:595:2: '&' unary_expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal372 =  this->matchToken(69, &FOLLOW_69_in_addressof_expression3205);
            if  (this->hasException())
            {
                goto ruleaddressof_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal372_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal372));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal372_tree);
            }

            this->followPush(FOLLOW_unary_expression_in_addressof_expression3209);
            unary_expression373=unary_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleaddressof_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unary_expression373.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleaddressof_expressionEx; /* Prevent compiler warnings */
    ruleaddressof_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(97, addressof_expression_StartIndex); }

    return retval;
}
/* $ANTLR end addressof_expression */

/**
 * $ANTLR start non_assignment_expression
 * CSharp.g:597:1: non_assignment_expression : ( ( anonymous_function_signature '=>' )=> lambda_expression | ( query_expression )=> query_expression | conditional_expression );
 */
CSharpParser_non_assignment_expression_return
CSharpParser::non_assignment_expression()
{
    CSharpParser_non_assignment_expression_return retval(this);

    ANTLR_MARKER non_assignment_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_lambda_expression_return lambda_expression374;
    typedef	CSharpParser_lambda_expression_return RETURN_TYPE_lambda_expression374;

    CSharpParser_query_expression_return query_expression375;
    typedef	CSharpParser_query_expression_return RETURN_TYPE_query_expression375;

    CSharpParser_conditional_expression_return conditional_expression376;
    typedef	CSharpParser_conditional_expression_return RETURN_TYPE_conditional_expression376;


    /* Initialize rule variables
     */
    non_assignment_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(98)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    lambda_expression374.tree = NULL;

    query_expression375.tree = NULL;

    conditional_expression376.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:597:26: ( ( anonymous_function_signature '=>' )=> lambda_expression | ( query_expression )=> query_expression | conditional_expression )

            ANTLR_UINT32 alt107;

            alt107=3;

            switch ( this->LA(1) )
            {
            case 71:
            	{
            		{
            		    int LA107_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred21_CSharp>() )))
            		    {
            		        alt107=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt107=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 107 );
            		        ex->set_state( 1 );


            		        goto rulenon_assignment_expressionEx;

            		    }
            		}
            	}
                break;
            case 134:
            	{
            		{
            		    int LA107_2 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred21_CSharp>() )))
            		    {
            		        alt107=1;
            		    }
            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred22_CSharp>() )))
            		    {
            		        alt107=2;
            		    }
            		    else if ( (true))
            		    {
            		        alt107=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 107 );
            		        ex->set_state( 2 );


            		        goto rulenon_assignment_expressionEx;

            		    }
            		}
            	}
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
            	{
            		{
            		    int LA107_3 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred21_CSharp>() )))
            		    {
            		        alt107=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt107=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 107 );
            		        ex->set_state( 3 );


            		        goto rulenon_assignment_expressionEx;

            		    }
            		}
            	}
                break;
            case Character_literal:
            case FALSE:
            case Hex_number:
            case LT_NULL:
            case MINUS:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            case 64:
            case 69:
            case 72:
            case 74:
            case 75:
            case 78:
            case 105:
            case 106:
            case 109:
            case 111:
            case 112:
            case 116:
            case 117:
            case 118:
            case 121:
            case 131:
            case 140:
            case 148:
            case 152:
            case 153:
            case 171:
            case 175:
            case 176:
            case 179:
            case 182:
            case 186:
            case 187:
            case 188:
            case 189:
            case 191:
            case 204:
            	{
            		alt107=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 107 );
                ex->set_state( 0 );


                goto rulenon_assignment_expressionEx;

            }

            switch (alt107)
            {
        	case 1:
        	    // CSharp.g:599:2: ( anonymous_function_signature '=>' )=> lambda_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_lambda_expression_in_non_assignment_expression3230);
        	        lambda_expression374=lambda_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_assignment_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, lambda_expression374.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:600:4: ( query_expression )=> query_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_query_expression_in_non_assignment_expression3241);
        	        query_expression375=query_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_assignment_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, query_expression375.tree);

        	    }
        	    break;
        	case 3:
        	    // CSharp.g:601:4: conditional_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_conditional_expression_in_non_assignment_expression3247);
        	        conditional_expression376=conditional_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_assignment_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, conditional_expression376.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulenon_assignment_expressionEx; /* Prevent compiler warnings */
    rulenon_assignment_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(98, non_assignment_expression_StartIndex); }

    return retval;
}
/* $ANTLR end non_assignment_expression */

/**
 * $ANTLR start multiplicative_expression
 * CSharp.g:608:1: multiplicative_expression : unary_expression ( ( '*' | '/' | '%' ) unary_expression )* ;
 */
CSharpParser_multiplicative_expression_return
CSharpParser::multiplicative_expression()
{
    CSharpParser_multiplicative_expression_return retval(this);

    ANTLR_MARKER multiplicative_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set378;
    CSharpParser_unary_expression_return unary_expression377;
    typedef	CSharpParser_unary_expression_return RETURN_TYPE_unary_expression377;

    CSharpParser_unary_expression_return unary_expression379;
    typedef	CSharpParser_unary_expression_return RETURN_TYPE_unary_expression379;

    ImplTraits::TreeType* set378_tree;

    /* Initialize rule variables
     */
    multiplicative_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(99)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set378       = NULL;
    unary_expression377.tree = NULL;

    unary_expression379.tree = NULL;
    retval.call_start_placeholder(); 


    set378_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:608:26: ( unary_expression ( ( '*' | '/' | '%' ) unary_expression )* )
        // CSharp.g:609:2: unary_expression ( ( '*' | '/' | '%' ) unary_expression )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_unary_expression_in_multiplicative_expression3261);
            unary_expression377=unary_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultiplicative_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unary_expression377.tree);

            // CSharp.g:609:19: ( ( '*' | '/' | '%' ) unary_expression )*

            for (;;)
            {
                int alt108=2;
                switch ( this->LA(1) )
                {
                case 66:
                case 72:
                case 80:
                	{
                		alt108=1;
                	}
                    break;

                }

                switch (alt108)
                {
            	case 1:
            	    // CSharp.g:609:22: ( '*' | '/' | '%' ) unary_expression
            	    {
            	        set378=(const CommonTokenType*) this->LT(1);

            	        if ( this->LA(1) == 66 || this->LA(1) == 72 || this->LA(1) == 80 )
            	        {
            	            this->consume();
            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
            	            (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set378))
            	            );
            	            this->set_perror_recovery(false);
            	             this->set_failedflag(false); 

            	        }
            	        else
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto rulemultiplicative_expressionEx;
            	        }


            	        this->followPush(FOLLOW_unary_expression_in_multiplicative_expression3276);
            	        unary_expression379=unary_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiplicative_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unary_expression379.tree);

            	    }
            	    break;

            	default:
            	    goto loop108;	/* break out of the loop */
            	    break;
                }
            }
            loop108: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemultiplicative_expressionEx; /* Prevent compiler warnings */
    rulemultiplicative_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(99, multiplicative_expression_StartIndex); }

    return retval;
}
/* $ANTLR end multiplicative_expression */

/**
 * $ANTLR start additive_expression
 * CSharp.g:610:1: additive_expression : multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )* ;
 */
CSharpParser_additive_expression_return
CSharpParser::additive_expression()
{
    CSharpParser_additive_expression_return retval(this);

    ANTLR_MARKER additive_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set381;
    CSharpParser_multiplicative_expression_return multiplicative_expression380;
    typedef	CSharpParser_multiplicative_expression_return RETURN_TYPE_multiplicative_expression380;

    CSharpParser_multiplicative_expression_return multiplicative_expression382;
    typedef	CSharpParser_multiplicative_expression_return RETURN_TYPE_multiplicative_expression382;

    ImplTraits::TreeType* set381_tree;

    /* Initialize rule variables
     */
    additive_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(100)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set381       = NULL;
    multiplicative_expression380.tree = NULL;

    multiplicative_expression382.tree = NULL;
    retval.call_start_placeholder(); 


    set381_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:610:20: ( multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )* )
        // CSharp.g:611:2: multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_multiplicative_expression_in_additive_expression3286);
            multiplicative_expression380=multiplicative_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleadditive_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, multiplicative_expression380.tree);

            // CSharp.g:611:28: ( ( '+' | '-' ) multiplicative_expression )*

            for (;;)
            {
                int alt109=2;
                switch ( this->LA(1) )
                {
                case MINUS:
                case 74:
                	{
                		alt109=1;
                	}
                    break;

                }

                switch (alt109)
                {
            	case 1:
            	    // CSharp.g:611:29: ( '+' | '-' ) multiplicative_expression
            	    {
            	        set381=(const CommonTokenType*) this->LT(1);

            	        if ( this->LA(1) == MINUS || this->LA(1) == 74 )
            	        {
            	            this->consume();
            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
            	            (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set381))
            	            );
            	            this->set_perror_recovery(false);
            	             this->set_failedflag(false); 

            	        }
            	        else
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto ruleadditive_expressionEx;
            	        }


            	        this->followPush(FOLLOW_multiplicative_expression_in_additive_expression3297);
            	        multiplicative_expression382=multiplicative_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleadditive_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, multiplicative_expression382.tree);

            	    }
            	    break;

            	default:
            	    goto loop109;	/* break out of the loop */
            	    break;
                }
            }
            loop109: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleadditive_expressionEx; /* Prevent compiler warnings */
    ruleadditive_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(100, additive_expression_StartIndex); }

    return retval;
}
/* $ANTLR end additive_expression */

/**
 * $ANTLR start shift_expression
 * CSharp.g:613:1: shift_expression : additive_expression ( ( '<<' | '>' '>' ) additive_expression )* ;
 */
CSharpParser_shift_expression_return
CSharpParser::shift_expression()
{
    CSharpParser_shift_expression_return retval(this);

    ANTLR_MARKER shift_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal384;
    const CommonTokenType*    char_literal385;
    const CommonTokenType*    char_literal386;
    CSharpParser_additive_expression_return additive_expression383;
    typedef	CSharpParser_additive_expression_return RETURN_TYPE_additive_expression383;

    CSharpParser_additive_expression_return additive_expression387;
    typedef	CSharpParser_additive_expression_return RETURN_TYPE_additive_expression387;

    ImplTraits::TreeType* string_literal384_tree;
    ImplTraits::TreeType* char_literal385_tree;
    ImplTraits::TreeType* char_literal386_tree;

    /* Initialize rule variables
     */
    shift_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(101)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal384       = NULL;
    char_literal385       = NULL;
    char_literal386       = NULL;
    additive_expression383.tree = NULL;

    additive_expression387.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal384_tree   = NULL;
    char_literal385_tree   = NULL;
    char_literal386_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:613:17: ( additive_expression ( ( '<<' | '>' '>' ) additive_expression )* )
        // CSharp.g:614:2: additive_expression ( ( '<<' | '>' '>' ) additive_expression )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_additive_expression_in_shift_expression3308);
            additive_expression383=additive_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleshift_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, additive_expression383.tree);

            // CSharp.g:614:22: ( ( '<<' | '>' '>' ) additive_expression )*

            for (;;)
            {
                int alt111=2;
                switch ( this->LA(1) )
                {
                case GT:
                	{
                		switch ( this->LA(2) )
                		{
                		case GT:
                			{
                				alt111=1;
                			}
                		    break;

                		}

                	}
                    break;
                case 85:
                	{
                		alt111=1;
                	}
                    break;

                }

                switch (alt111)
                {
            	case 1:
            	    // CSharp.g:614:23: ( '<<' | '>' '>' ) additive_expression
            	    {
            	        // CSharp.g:614:23: ( '<<' | '>' '>' )
            	        {
            	            int alt110=2;
            	            switch ( this->LA(1) )
            	            {
            	            case 85:
            	            	{
            	            		alt110=1;
            	            	}
            	                break;
            	            case GT:
            	            	{
            	            		alt110=2;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 110 );
            	                ex->set_state( 0 );


            	                goto ruleshift_expressionEx;

            	            }

            	            switch (alt110)
            	            {
            	        	case 1:
            	        	    // CSharp.g:614:24: '<<'
            	        	    {
            	        	        string_literal384 =  this->matchToken(85, &FOLLOW_85_in_shift_expression3312);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleshift_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        string_literal384_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal384));
            	        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal384_tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CSharp.g:614:29: '>' '>'
            	        	    {
            	        	        char_literal385 =  this->matchToken(GT, &FOLLOW_GT_in_shift_expression3314);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleshift_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        char_literal385_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal385));
            	        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal385_tree);
            	        	        }

            	        	        char_literal386 =  this->matchToken(GT, &FOLLOW_GT_in_shift_expression3316);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleshift_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        char_literal386_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal386));
            	        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal386_tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_additive_expression_in_shift_expression3319);
            	        additive_expression387=additive_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleshift_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, additive_expression387.tree);

            	    }
            	    break;

            	default:
            	    goto loop111;	/* break out of the loop */
            	    break;
                }
            }
            loop111: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleshift_expressionEx; /* Prevent compiler warnings */
    ruleshift_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(101, shift_expression_StartIndex); }

    return retval;
}
/* $ANTLR end shift_expression */

/**
 * $ANTLR start relational_expression
 * CSharp.g:615:1: relational_expression : shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )* ;
 */
CSharpParser_relational_expression_return
CSharpParser::relational_expression()
{
    CSharpParser_relational_expression_return retval(this);

    ANTLR_MARKER relational_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set389;
    const CommonTokenType*    set391;
    CSharpParser_shift_expression_return shift_expression388;
    typedef	CSharpParser_shift_expression_return RETURN_TYPE_shift_expression388;

    CSharpParser_shift_expression_return shift_expression390;
    typedef	CSharpParser_shift_expression_return RETURN_TYPE_shift_expression390;

    CSharpParser_non_nullable_type_return non_nullable_type392;
    typedef	CSharpParser_non_nullable_type_return RETURN_TYPE_non_nullable_type392;

    ImplTraits::TreeType* set389_tree;
    ImplTraits::TreeType* set391_tree;

    /* Initialize rule variables
     */
    relational_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(102)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set389       = NULL;
    set391       = NULL;
    shift_expression388.tree = NULL;

    shift_expression390.tree = NULL;

    non_nullable_type392.tree = NULL;
    retval.call_start_placeholder(); 


    set389_tree   = NULL;
    set391_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:615:22: ( shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )* )
        // CSharp.g:616:2: shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_shift_expression_in_relational_expression3329);
            shift_expression388=shift_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulerelational_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, shift_expression388.tree);

            // CSharp.g:617:3: ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )*

            for (;;)
            {
                int alt112=3;
                switch ( this->LA(1) )
                {
                case GT:
                case 84:
                case 87:
                case 91:
                	{
                		alt112=1;
                	}
                    break;
                case 102:
                case 144:
                	{
                		alt112=2;
                	}
                    break;

                }

                switch (alt112)
                {
            	case 1:
            	    // CSharp.g:617:5: ( ( '<' | '>' | '>=' | '<=' ) shift_expression )
            	    {
            	        // CSharp.g:617:5: ( ( '<' | '>' | '>=' | '<=' ) shift_expression )
            	        // CSharp.g:617:6: ( '<' | '>' | '>=' | '<=' ) shift_expression
            	        {
            	            set389=(const CommonTokenType*) this->LT(1);

            	            if ( this->LA(1) == GT || this->LA(1) == 84 || this->LA(1) == 87 || this->LA(1) == 91 )
            	            {
            	                this->consume();
            	                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
            	                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set389))
            	                );
            	                this->set_perror_recovery(false);
            	                 this->set_failedflag(false); 

            	            }
            	            else
            	            {
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                this->get_exception()->set_expectingSet(NULL);

            	                goto rulerelational_expressionEx;
            	            }


            	            this->followPush(FOLLOW_shift_expression_in_relational_expression3346);
            	            shift_expression390=shift_expression();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerelational_expressionEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, shift_expression390.tree);

            	        }


            	    }
            	    break;
            	case 2:
            	    // CSharp.g:618:6: ( ( 'is' | 'as' ) non_nullable_type )
            	    {
            	        // CSharp.g:618:6: ( ( 'is' | 'as' ) non_nullable_type )
            	        // CSharp.g:618:7: ( 'is' | 'as' ) non_nullable_type
            	        {
            	            set391=(const CommonTokenType*) this->LT(1);

            	            if ( this->LA(1) == 102 || this->LA(1) == 144 )
            	            {
            	                this->consume();
            	                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
            	                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set391))
            	                );
            	                this->set_perror_recovery(false);
            	                 this->set_failedflag(false); 

            	            }
            	            else
            	            {
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                this->get_exception()->set_expectingSet(NULL);

            	                goto rulerelational_expressionEx;
            	            }


            	            this->followPush(FOLLOW_non_nullable_type_in_relational_expression3363);
            	            non_nullable_type392=non_nullable_type();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerelational_expressionEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, non_nullable_type392.tree);

            	        }


            	    }
            	    break;

            	default:
            	    goto loop112;	/* break out of the loop */
            	    break;
                }
            }
            loop112: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulerelational_expressionEx; /* Prevent compiler warnings */
    rulerelational_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(102, relational_expression_StartIndex); }

    return retval;
}
/* $ANTLR end relational_expression */

/**
 * $ANTLR start equality_expression
 * CSharp.g:620:1: equality_expression : relational_expression ( ( '==' | '!=' ) relational_expression )* ;
 */
CSharpParser_equality_expression_return
CSharpParser::equality_expression()
{
    CSharpParser_equality_expression_return retval(this);

    ANTLR_MARKER equality_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set394;
    CSharpParser_relational_expression_return relational_expression393;
    typedef	CSharpParser_relational_expression_return RETURN_TYPE_relational_expression393;

    CSharpParser_relational_expression_return relational_expression395;
    typedef	CSharpParser_relational_expression_return RETURN_TYPE_relational_expression395;

    ImplTraits::TreeType* set394_tree;

    /* Initialize rule variables
     */
    equality_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(103)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set394       = NULL;
    relational_expression393.tree = NULL;

    relational_expression395.tree = NULL;
    retval.call_start_placeholder(); 


    set394_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:620:20: ( relational_expression ( ( '==' | '!=' ) relational_expression )* )
        // CSharp.g:621:2: relational_expression ( ( '==' | '!=' ) relational_expression )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_relational_expression_in_equality_expression3377);
            relational_expression393=relational_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleequality_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, relational_expression393.tree);

            // CSharp.g:622:5: ( ( '==' | '!=' ) relational_expression )*

            for (;;)
            {
                int alt113=2;
                switch ( this->LA(1) )
                {
                case 65:
                case 89:
                	{
                		alt113=1;
                	}
                    break;

                }

                switch (alt113)
                {
            	case 1:
            	    // CSharp.g:622:6: ( '==' | '!=' ) relational_expression
            	    {
            	        set394=(const CommonTokenType*) this->LT(1);

            	        if ( this->LA(1) == 65 || this->LA(1) == 89 )
            	        {
            	            this->consume();
            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
            	            (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set394))
            	            );
            	            this->set_perror_recovery(false);
            	             this->set_failedflag(false); 

            	        }
            	        else
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto ruleequality_expressionEx;
            	        }


            	        this->followPush(FOLLOW_relational_expression_in_equality_expression3392);
            	        relational_expression395=relational_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleequality_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, relational_expression395.tree);

            	    }
            	    break;

            	default:
            	    goto loop113;	/* break out of the loop */
            	    break;
                }
            }
            loop113: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleequality_expressionEx; /* Prevent compiler warnings */
    ruleequality_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(103, equality_expression_StartIndex); }

    return retval;
}
/* $ANTLR end equality_expression */

/**
 * $ANTLR start and_expression
 * CSharp.g:623:1: and_expression : equality_expression ( '&' equality_expression )* ;
 */
CSharpParser_and_expression_return
CSharpParser::and_expression()
{
    CSharpParser_and_expression_return retval(this);

    ANTLR_MARKER and_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal397;
    CSharpParser_equality_expression_return equality_expression396;
    typedef	CSharpParser_equality_expression_return RETURN_TYPE_equality_expression396;

    CSharpParser_equality_expression_return equality_expression398;
    typedef	CSharpParser_equality_expression_return RETURN_TYPE_equality_expression398;

    ImplTraits::TreeType* char_literal397_tree;

    /* Initialize rule variables
     */
    and_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(104)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal397       = NULL;
    equality_expression396.tree = NULL;

    equality_expression398.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal397_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:623:15: ( equality_expression ( '&' equality_expression )* )
        // CSharp.g:624:2: equality_expression ( '&' equality_expression )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_equality_expression_in_and_expression3402);
            equality_expression396=equality_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleand_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, equality_expression396.tree);

            // CSharp.g:624:22: ( '&' equality_expression )*

            for (;;)
            {
                int alt114=2;
                switch ( this->LA(1) )
                {
                case 69:
                	{
                		alt114=1;
                	}
                    break;

                }

                switch (alt114)
                {
            	case 1:
            	    // CSharp.g:624:23: '&' equality_expression
            	    {
            	        char_literal397 =  this->matchToken(69, &FOLLOW_69_in_and_expression3405);
            	        if  (this->hasException())
            	        {
            	            goto ruleand_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal397_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal397));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal397_tree);
            	        }

            	        this->followPush(FOLLOW_equality_expression_in_and_expression3409);
            	        equality_expression398=equality_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleand_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, equality_expression398.tree);

            	    }
            	    break;

            	default:
            	    goto loop114;	/* break out of the loop */
            	    break;
                }
            }
            loop114: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleand_expressionEx; /* Prevent compiler warnings */
    ruleand_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(104, and_expression_StartIndex); }

    return retval;
}
/* $ANTLR end and_expression */

/**
 * $ANTLR start exclusive_or_expression
 * CSharp.g:625:1: exclusive_or_expression : and_expression ( '^' and_expression )* ;
 */
CSharpParser_exclusive_or_expression_return
CSharpParser::exclusive_or_expression()
{
    CSharpParser_exclusive_or_expression_return retval(this);

    ANTLR_MARKER exclusive_or_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal400;
    CSharpParser_and_expression_return and_expression399;
    typedef	CSharpParser_and_expression_return RETURN_TYPE_and_expression399;

    CSharpParser_and_expression_return and_expression401;
    typedef	CSharpParser_and_expression_return RETURN_TYPE_and_expression401;

    ImplTraits::TreeType* char_literal400_tree;

    /* Initialize rule variables
     */
    exclusive_or_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(105)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal400       = NULL;
    and_expression399.tree = NULL;

    and_expression401.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal400_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:625:24: ( and_expression ( '^' and_expression )* )
        // CSharp.g:626:2: and_expression ( '^' and_expression )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_and_expression_in_exclusive_or_expression3419);
            and_expression399=and_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexclusive_or_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, and_expression399.tree);

            // CSharp.g:626:17: ( '^' and_expression )*

            for (;;)
            {
                int alt115=2;
                switch ( this->LA(1) )
                {
                case 96:
                	{
                		alt115=1;
                	}
                    break;

                }

                switch (alt115)
                {
            	case 1:
            	    // CSharp.g:626:18: '^' and_expression
            	    {
            	        char_literal400 =  this->matchToken(96, &FOLLOW_96_in_exclusive_or_expression3422);
            	        if  (this->hasException())
            	        {
            	            goto ruleexclusive_or_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal400_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal400));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal400_tree);
            	        }

            	        this->followPush(FOLLOW_and_expression_in_exclusive_or_expression3426);
            	        and_expression401=and_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexclusive_or_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, and_expression401.tree);

            	    }
            	    break;

            	default:
            	    goto loop115;	/* break out of the loop */
            	    break;
                }
            }
            loop115: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexclusive_or_expressionEx; /* Prevent compiler warnings */
    ruleexclusive_or_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(105, exclusive_or_expression_StartIndex); }

    return retval;
}
/* $ANTLR end exclusive_or_expression */

/**
 * $ANTLR start inclusive_or_expression
 * CSharp.g:627:1: inclusive_or_expression : exclusive_or_expression ( '|' exclusive_or_expression )* ;
 */
CSharpParser_inclusive_or_expression_return
CSharpParser::inclusive_or_expression()
{
    CSharpParser_inclusive_or_expression_return retval(this);

    ANTLR_MARKER inclusive_or_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal403;
    CSharpParser_exclusive_or_expression_return exclusive_or_expression402;
    typedef	CSharpParser_exclusive_or_expression_return RETURN_TYPE_exclusive_or_expression402;

    CSharpParser_exclusive_or_expression_return exclusive_or_expression404;
    typedef	CSharpParser_exclusive_or_expression_return RETURN_TYPE_exclusive_or_expression404;

    ImplTraits::TreeType* char_literal403_tree;

    /* Initialize rule variables
     */
    inclusive_or_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(106)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal403       = NULL;
    exclusive_or_expression402.tree = NULL;

    exclusive_or_expression404.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal403_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:627:24: ( exclusive_or_expression ( '|' exclusive_or_expression )* )
        // CSharp.g:628:2: exclusive_or_expression ( '|' exclusive_or_expression )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_exclusive_or_expression_in_inclusive_or_expression3436);
            exclusive_or_expression402=exclusive_or_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinclusive_or_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, exclusive_or_expression402.tree);

            // CSharp.g:628:28: ( '|' exclusive_or_expression )*

            for (;;)
            {
                int alt116=2;
                switch ( this->LA(1) )
                {
                case 200:
                	{
                		alt116=1;
                	}
                    break;

                }

                switch (alt116)
                {
            	case 1:
            	    // CSharp.g:628:29: '|' exclusive_or_expression
            	    {
            	        char_literal403 =  this->matchToken(200, &FOLLOW_200_in_inclusive_or_expression3441);
            	        if  (this->hasException())
            	        {
            	            goto ruleinclusive_or_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal403_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal403));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal403_tree);
            	        }

            	        this->followPush(FOLLOW_exclusive_or_expression_in_inclusive_or_expression3445);
            	        exclusive_or_expression404=exclusive_or_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinclusive_or_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, exclusive_or_expression404.tree);

            	    }
            	    break;

            	default:
            	    goto loop116;	/* break out of the loop */
            	    break;
                }
            }
            loop116: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleinclusive_or_expressionEx; /* Prevent compiler warnings */
    ruleinclusive_or_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(106, inclusive_or_expression_StartIndex); }

    return retval;
}
/* $ANTLR end inclusive_or_expression */

/**
 * $ANTLR start conditional_and_expression
 * CSharp.g:629:1: conditional_and_expression : inclusive_or_expression ( '&&' inclusive_or_expression )* ;
 */
CSharpParser_conditional_and_expression_return
CSharpParser::conditional_and_expression()
{
    CSharpParser_conditional_and_expression_return retval(this);

    ANTLR_MARKER conditional_and_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal406;
    CSharpParser_inclusive_or_expression_return inclusive_or_expression405;
    typedef	CSharpParser_inclusive_or_expression_return RETURN_TYPE_inclusive_or_expression405;

    CSharpParser_inclusive_or_expression_return inclusive_or_expression407;
    typedef	CSharpParser_inclusive_or_expression_return RETURN_TYPE_inclusive_or_expression407;

    ImplTraits::TreeType* string_literal406_tree;

    /* Initialize rule variables
     */
    conditional_and_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(107)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal406       = NULL;
    inclusive_or_expression405.tree = NULL;

    inclusive_or_expression407.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal406_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:629:27: ( inclusive_or_expression ( '&&' inclusive_or_expression )* )
        // CSharp.g:630:2: inclusive_or_expression ( '&&' inclusive_or_expression )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_inclusive_or_expression_in_conditional_and_expression3455);
            inclusive_or_expression405=inclusive_or_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconditional_and_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, inclusive_or_expression405.tree);

            // CSharp.g:630:28: ( '&&' inclusive_or_expression )*

            for (;;)
            {
                int alt117=2;
                switch ( this->LA(1) )
                {
                case 68:
                	{
                		alt117=1;
                	}
                    break;

                }

                switch (alt117)
                {
            	case 1:
            	    // CSharp.g:630:29: '&&' inclusive_or_expression
            	    {
            	        string_literal406 =  this->matchToken(68, &FOLLOW_68_in_conditional_and_expression3460);
            	        if  (this->hasException())
            	        {
            	            goto ruleconditional_and_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        string_literal406_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal406));
            	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal406_tree);
            	        }

            	        this->followPush(FOLLOW_inclusive_or_expression_in_conditional_and_expression3464);
            	        inclusive_or_expression407=inclusive_or_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconditional_and_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, inclusive_or_expression407.tree);

            	    }
            	    break;

            	default:
            	    goto loop117;	/* break out of the loop */
            	    break;
                }
            }
            loop117: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleconditional_and_expressionEx; /* Prevent compiler warnings */
    ruleconditional_and_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(107, conditional_and_expression_StartIndex); }

    return retval;
}
/* $ANTLR end conditional_and_expression */

/**
 * $ANTLR start conditional_or_expression
 * CSharp.g:631:1: conditional_or_expression : conditional_and_expression ( '||' conditional_and_expression )* ;
 */
CSharpParser_conditional_or_expression_return
CSharpParser::conditional_or_expression()
{
    CSharpParser_conditional_or_expression_return retval(this);

    ANTLR_MARKER conditional_or_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal409;
    CSharpParser_conditional_and_expression_return conditional_and_expression408;
    typedef	CSharpParser_conditional_and_expression_return RETURN_TYPE_conditional_and_expression408;

    CSharpParser_conditional_and_expression_return conditional_and_expression410;
    typedef	CSharpParser_conditional_and_expression_return RETURN_TYPE_conditional_and_expression410;

    ImplTraits::TreeType* string_literal409_tree;

    /* Initialize rule variables
     */
    conditional_or_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(108)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal409       = NULL;
    conditional_and_expression408.tree = NULL;

    conditional_and_expression410.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal409_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:631:26: ( conditional_and_expression ( '||' conditional_and_expression )* )
        // CSharp.g:632:2: conditional_and_expression ( '||' conditional_and_expression )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_conditional_and_expression_in_conditional_or_expression3474);
            conditional_and_expression408=conditional_and_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconditional_or_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, conditional_and_expression408.tree);

            // CSharp.g:632:30: ( '||' conditional_and_expression )*

            for (;;)
            {
                int alt118=2;
                switch ( this->LA(1) )
                {
                case 202:
                	{
                		alt118=1;
                	}
                    break;

                }

                switch (alt118)
                {
            	case 1:
            	    // CSharp.g:632:31: '||' conditional_and_expression
            	    {
            	        string_literal409 =  this->matchToken(202, &FOLLOW_202_in_conditional_or_expression3478);
            	        if  (this->hasException())
            	        {
            	            goto ruleconditional_or_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        string_literal409_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal409));
            	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal409_tree);
            	        }

            	        this->followPush(FOLLOW_conditional_and_expression_in_conditional_or_expression3482);
            	        conditional_and_expression410=conditional_and_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconditional_or_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, conditional_and_expression410.tree);

            	    }
            	    break;

            	default:
            	    goto loop118;	/* break out of the loop */
            	    break;
                }
            }
            loop118: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleconditional_or_expressionEx; /* Prevent compiler warnings */
    ruleconditional_or_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(108, conditional_or_expression_StartIndex); }

    return retval;
}
/* $ANTLR end conditional_or_expression */

/**
 * $ANTLR start null_coalescing_expression
 * CSharp.g:634:1: null_coalescing_expression : conditional_or_expression ( '??' conditional_or_expression )* ;
 */
CSharpParser_null_coalescing_expression_return
CSharpParser::null_coalescing_expression()
{
    CSharpParser_null_coalescing_expression_return retval(this);

    ANTLR_MARKER null_coalescing_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal412;
    CSharpParser_conditional_or_expression_return conditional_or_expression411;
    typedef	CSharpParser_conditional_or_expression_return RETURN_TYPE_conditional_or_expression411;

    CSharpParser_conditional_or_expression_return conditional_or_expression413;
    typedef	CSharpParser_conditional_or_expression_return RETURN_TYPE_conditional_or_expression413;

    ImplTraits::TreeType* string_literal412_tree;

    /* Initialize rule variables
     */
    null_coalescing_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(109)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal412       = NULL;
    conditional_or_expression411.tree = NULL;

    conditional_or_expression413.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal412_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:634:27: ( conditional_or_expression ( '??' conditional_or_expression )* )
        // CSharp.g:635:2: conditional_or_expression ( '??' conditional_or_expression )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_conditional_or_expression_in_null_coalescing_expression3493);
            conditional_or_expression411=conditional_or_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulenull_coalescing_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, conditional_or_expression411.tree);

            // CSharp.g:635:30: ( '??' conditional_or_expression )*

            for (;;)
            {
                int alt119=2;
                switch ( this->LA(1) )
                {
                case 93:
                	{
                		alt119=1;
                	}
                    break;

                }

                switch (alt119)
                {
            	case 1:
            	    // CSharp.g:635:31: '??' conditional_or_expression
            	    {
            	        string_literal412 =  this->matchToken(93, &FOLLOW_93_in_null_coalescing_expression3498);
            	        if  (this->hasException())
            	        {
            	            goto rulenull_coalescing_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        string_literal412_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal412));
            	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal412_tree);
            	        }

            	        this->followPush(FOLLOW_conditional_or_expression_in_null_coalescing_expression3502);
            	        conditional_or_expression413=conditional_or_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulenull_coalescing_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, conditional_or_expression413.tree);

            	    }
            	    break;

            	default:
            	    goto loop119;	/* break out of the loop */
            	    break;
                }
            }
            loop119: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulenull_coalescing_expressionEx; /* Prevent compiler warnings */
    rulenull_coalescing_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(109, null_coalescing_expression_StartIndex); }

    return retval;
}
/* $ANTLR end null_coalescing_expression */

/**
 * $ANTLR start conditional_expression
 * CSharp.g:636:1: conditional_expression : null_coalescing_expression ( '?' expression ':' expression )? ;
 */
CSharpParser_conditional_expression_return
CSharpParser::conditional_expression()
{
    CSharpParser_conditional_expression_return retval(this);

    ANTLR_MARKER conditional_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal415;
    const CommonTokenType*    char_literal417;
    CSharpParser_null_coalescing_expression_return null_coalescing_expression414;
    typedef	CSharpParser_null_coalescing_expression_return RETURN_TYPE_null_coalescing_expression414;

    CSharpParser_expression_return expression416;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression416;

    CSharpParser_expression_return expression418;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression418;

    ImplTraits::TreeType* char_literal415_tree;
    ImplTraits::TreeType* char_literal417_tree;

    /* Initialize rule variables
     */
    conditional_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(110)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal415       = NULL;
    char_literal417       = NULL;
    null_coalescing_expression414.tree = NULL;

    expression416.tree = NULL;

    expression418.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal415_tree   = NULL;
    char_literal417_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:636:23: ( null_coalescing_expression ( '?' expression ':' expression )? )
        // CSharp.g:637:2: null_coalescing_expression ( '?' expression ':' expression )?
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_null_coalescing_expression_in_conditional_expression3512);
            null_coalescing_expression414=null_coalescing_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconditional_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, null_coalescing_expression414.tree);

            // CSharp.g:637:31: ( '?' expression ':' expression )?
            {
                int alt120=2;
                switch ( this->LA(1) )
                {
                    case 92:
                    	{
                    		alt120=1;
                    	}
                        break;
                }

                switch (alt120)
                {
            	case 1:
            	    // CSharp.g:637:32: '?' expression ':' expression
            	    {
            	        char_literal415 =  this->matchToken(92, &FOLLOW_92_in_conditional_expression3517);
            	        if  (this->hasException())
            	        {
            	            goto ruleconditional_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal415_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal415));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal415_tree);
            	        }

            	        this->followPush(FOLLOW_expression_in_conditional_expression3521);
            	        expression416=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconditional_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression416.tree);

            	        char_literal417 =  this->matchToken(82, &FOLLOW_82_in_conditional_expression3525);
            	        if  (this->hasException())
            	        {
            	            goto ruleconditional_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal417_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal417));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal417_tree);
            	        }

            	        this->followPush(FOLLOW_expression_in_conditional_expression3529);
            	        expression418=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconditional_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression418.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleconditional_expressionEx; /* Prevent compiler warnings */
    ruleconditional_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(110, conditional_expression_StartIndex); }

    return retval;
}
/* $ANTLR end conditional_expression */

/**
 * $ANTLR start lambda_expression
 * CSharp.g:642:1: lambda_expression : anonymous_function_signature '=>' anonymous_function_body ;
 */
CSharpParser_lambda_expression_return
CSharpParser::lambda_expression()
{
    CSharpParser_lambda_expression_return retval(this);

    ANTLR_MARKER lambda_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal420;
    CSharpParser_anonymous_function_signature_return anonymous_function_signature419;
    typedef	CSharpParser_anonymous_function_signature_return RETURN_TYPE_anonymous_function_signature419;

    CSharpParser_anonymous_function_body_return anonymous_function_body421;
    typedef	CSharpParser_anonymous_function_body_return RETURN_TYPE_anonymous_function_body421;

    ImplTraits::TreeType* string_literal420_tree;

    /* Initialize rule variables
     */
    lambda_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(111)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal420       = NULL;
    anonymous_function_signature419.tree = NULL;

    anonymous_function_body421.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal420_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:642:18: ( anonymous_function_signature '=>' anonymous_function_body )
        // CSharp.g:643:2: anonymous_function_signature '=>' anonymous_function_body
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_anonymous_function_signature_in_lambda_expression3549);
            anonymous_function_signature419=anonymous_function_signature();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelambda_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, anonymous_function_signature419.tree);

            string_literal420 =  this->matchToken(90, &FOLLOW_90_in_lambda_expression3553);
            if  (this->hasException())
            {
                goto rulelambda_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal420_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal420));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal420_tree);
            }

            this->followPush(FOLLOW_anonymous_function_body_in_lambda_expression3557);
            anonymous_function_body421=anonymous_function_body();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelambda_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, anonymous_function_body421.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulelambda_expressionEx; /* Prevent compiler warnings */
    rulelambda_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(111, lambda_expression_StartIndex); }

    return retval;
}
/* $ANTLR end lambda_expression */

/**
 * $ANTLR start anonymous_function_signature
 * CSharp.g:644:1: anonymous_function_signature : ( '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')' | implicit_anonymous_function_parameter_list );
 */
CSharpParser_anonymous_function_signature_return
CSharpParser::anonymous_function_signature()
{
    CSharpParser_anonymous_function_signature_return retval(this);

    ANTLR_MARKER anonymous_function_signature_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal422;
    const CommonTokenType*    char_literal425;
    CSharpParser_explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list423;
    typedef	CSharpParser_explicit_anonymous_function_parameter_list_return RETURN_TYPE_explicit_anonymous_function_parameter_list423;

    CSharpParser_implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list424;
    typedef	CSharpParser_implicit_anonymous_function_parameter_list_return RETURN_TYPE_implicit_anonymous_function_parameter_list424;

    CSharpParser_implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list426;
    typedef	CSharpParser_implicit_anonymous_function_parameter_list_return RETURN_TYPE_implicit_anonymous_function_parameter_list426;

    ImplTraits::TreeType* char_literal422_tree;
    ImplTraits::TreeType* char_literal425_tree;

    /* Initialize rule variables
     */
    anonymous_function_signature_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(112)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal422       = NULL;
    char_literal425       = NULL;
    explicit_anonymous_function_parameter_list423.tree = NULL;

    implicit_anonymous_function_parameter_list424.tree = NULL;

    implicit_anonymous_function_parameter_list426.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal422_tree   = NULL;
    char_literal425_tree   = NULL;


    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:644:29: ( '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')' | implicit_anonymous_function_parameter_list )

            ANTLR_UINT32 alt122;

            alt122=2;

            switch ( this->LA(1) )
            {
            case 71:
            	{
            		alt122=1;
            	}
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 134:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
            	{
            		alt122=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 122 );
                ex->set_state( 0 );


                goto ruleanonymous_function_signatureEx;

            }

            switch (alt122)
            {
        	case 1:
        	    // CSharp.g:645:2: '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        char_literal422 =  this->matchToken(71, &FOLLOW_71_in_anonymous_function_signature3564);
        	        if  (this->hasException())
        	        {
        	            goto ruleanonymous_function_signatureEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal422_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal422));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal422_tree);
        	        }

        	        // CSharp.g:645:6: ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )?
        	        {
        	            int alt121=3;
        	            switch ( this->LA(1) )
        	            {
        	                case 106:
        	                case 109:
        	                case 111:
        	                case 116:
        	                case 121:
        	                case 131:
        	                case 140:
        	                case 148:
        	                case 153:
        	                case 157:
        	                case 168:
        	                case 171:
        	                case 175:
        	                case 179:
        	                case 187:
        	                case 188:
        	                case 191:
        	                case 194:
        	                	{
        	                		alt121=1;
        	                	}
        	                    break;
        	                case IDENTIFIER:
        	                case 98:
        	                case 100:
        	                case 101:
        	                case 103:
        	                case 104:
        	                case 108:
        	                case 119:
        	                case 122:
        	                case 124:
        	                case 128:
        	                case 134:
        	                case 137:
        	                case 143:
        	                case 145:
        	                case 146:
        	                case 149:
        	                case 150:
        	                case 154:
        	                case 156:
        	                case 159:
        	                case 162:
        	                case 164:
        	                case 169:
        	                case 173:
        	                case 174:
        	                case 185:
        	                case 192:
        	                case 196:
        	                case 198:
        	                	{
        	                		switch ( this->LA(2) )
        	                		{
        	                		    case DOT:
        	                		    case IDENTIFIER:
        	                		    case 72:
        	                		    case 83:
        	                		    case 84:
        	                		    case 92:
        	                		    case 94:
        	                		    case 98:
        	                		    case 100:
        	                		    case 101:
        	                		    case 103:
        	                		    case 104:
        	                		    case 108:
        	                		    case 119:
        	                		    case 122:
        	                		    case 124:
        	                		    case 128:
        	                		    case 134:
        	                		    case 137:
        	                		    case 143:
        	                		    case 145:
        	                		    case 146:
        	                		    case 149:
        	                		    case 150:
        	                		    case 154:
        	                		    case 156:
        	                		    case 159:
        	                		    case 162:
        	                		    case 164:
        	                		    case 169:
        	                		    case 173:
        	                		    case 174:
        	                		    case 185:
        	                		    case 192:
        	                		    case 196:
        	                		    case 198:
        	                		    	{
        	                		    		alt121=1;
        	                		    	}
        	                		        break;
        	                		    case RPAREN:
        	                		    case 77:
        	                		    	{
        	                		    		alt121=2;
        	                		    	}
        	                		        break;
        	                		}

        	                	}
        	                    break;
        	            }

        	            switch (alt121)
        	            {
        	        	case 1:
        	        	    // CSharp.g:645:7: explicit_anonymous_function_parameter_list
        	        	    {
        	        	        this->followPush(FOLLOW_explicit_anonymous_function_parameter_list_in_anonymous_function_signature3567);
        	        	        explicit_anonymous_function_parameter_list423=explicit_anonymous_function_parameter_list();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleanonymous_function_signatureEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, explicit_anonymous_function_parameter_list423.tree);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // CSharp.g:646:5: implicit_anonymous_function_parameter_list
        	        	    {
        	        	        this->followPush(FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature3573);
        	        	        implicit_anonymous_function_parameter_list424=implicit_anonymous_function_parameter_list();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleanonymous_function_signatureEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, implicit_anonymous_function_parameter_list424.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        char_literal425 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_anonymous_function_signature3577);
        	        if  (this->hasException())
        	        {
        	            goto ruleanonymous_function_signatureEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal425_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal425));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal425_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:647:4: implicit_anonymous_function_parameter_list
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature3582);
        	        implicit_anonymous_function_parameter_list426=implicit_anonymous_function_parameter_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleanonymous_function_signatureEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, implicit_anonymous_function_parameter_list426.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleanonymous_function_signatureEx; /* Prevent compiler warnings */
    ruleanonymous_function_signatureEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(112, anonymous_function_signature_StartIndex); }

    return retval;
}
/* $ANTLR end anonymous_function_signature */

/**
 * $ANTLR start implicit_anonymous_function_parameter_list
 * CSharp.g:649:1: implicit_anonymous_function_parameter_list : implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )* ;
 */
CSharpParser_implicit_anonymous_function_parameter_list_return
CSharpParser::implicit_anonymous_function_parameter_list()
{
    CSharpParser_implicit_anonymous_function_parameter_list_return retval(this);

    ANTLR_MARKER implicit_anonymous_function_parameter_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal428;
    CSharpParser_implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter427;
    typedef	CSharpParser_implicit_anonymous_function_parameter_return RETURN_TYPE_implicit_anonymous_function_parameter427;

    CSharpParser_implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter429;
    typedef	CSharpParser_implicit_anonymous_function_parameter_return RETURN_TYPE_implicit_anonymous_function_parameter429;

    ImplTraits::TreeType* char_literal428_tree;

    /* Initialize rule variables
     */
    implicit_anonymous_function_parameter_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(113)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal428       = NULL;
    implicit_anonymous_function_parameter427.tree = NULL;

    implicit_anonymous_function_parameter429.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal428_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:649:43: ( implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )* )
        // CSharp.g:650:2: implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3591);
            implicit_anonymous_function_parameter427=implicit_anonymous_function_parameter();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleimplicit_anonymous_function_parameter_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, implicit_anonymous_function_parameter427.tree);

            // CSharp.g:650:42: ( ',' implicit_anonymous_function_parameter )*

            for (;;)
            {
                int alt123=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt123=1;
                	}
                    break;

                }

                switch (alt123)
                {
            	case 1:
            	    // CSharp.g:650:43: ',' implicit_anonymous_function_parameter
            	    {
            	        char_literal428 =  this->matchToken(77, &FOLLOW_77_in_implicit_anonymous_function_parameter_list3596);
            	        if  (this->hasException())
            	        {
            	            goto ruleimplicit_anonymous_function_parameter_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal428_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal428));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal428_tree);
            	        }

            	        this->followPush(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3600);
            	        implicit_anonymous_function_parameter429=implicit_anonymous_function_parameter();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleimplicit_anonymous_function_parameter_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, implicit_anonymous_function_parameter429.tree);

            	    }
            	    break;

            	default:
            	    goto loop123;	/* break out of the loop */
            	    break;
                }
            }
            loop123: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleimplicit_anonymous_function_parameter_listEx; /* Prevent compiler warnings */
    ruleimplicit_anonymous_function_parameter_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(113, implicit_anonymous_function_parameter_list_StartIndex); }

    return retval;
}
/* $ANTLR end implicit_anonymous_function_parameter_list */

/**
 * $ANTLR start implicit_anonymous_function_parameter
 * CSharp.g:651:1: implicit_anonymous_function_parameter : identifier ;
 */
CSharpParser_implicit_anonymous_function_parameter_return
CSharpParser::implicit_anonymous_function_parameter()
{
    CSharpParser_implicit_anonymous_function_parameter_return retval(this);

    ANTLR_MARKER implicit_anonymous_function_parameter_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_identifier_return identifier430;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier430;


    /* Initialize rule variables
     */
    implicit_anonymous_function_parameter_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(114)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    identifier430.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:651:38: ( identifier )
        // CSharp.g:652:2: identifier
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_identifier_in_implicit_anonymous_function_parameter3610);
            identifier430=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleimplicit_anonymous_function_parameterEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier430.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleimplicit_anonymous_function_parameterEx; /* Prevent compiler warnings */
    ruleimplicit_anonymous_function_parameterEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(114, implicit_anonymous_function_parameter_StartIndex); }

    return retval;
}
/* $ANTLR end implicit_anonymous_function_parameter */

/**
 * $ANTLR start anonymous_function_body
 * CSharp.g:653:1: anonymous_function_body : ( expression | block );
 */
CSharpParser_anonymous_function_body_return
CSharpParser::anonymous_function_body()
{
    CSharpParser_anonymous_function_body_return retval(this);

    ANTLR_MARKER anonymous_function_body_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_expression_return expression431;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression431;

    CSharpParser_block_return block432;
    typedef	CSharpParser_block_return RETURN_TYPE_block432;


    /* Initialize rule variables
     */
    anonymous_function_body_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(115)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    expression431.tree = NULL;

    block432.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:653:24: ( expression | block )

            ANTLR_UINT32 alt124;

            alt124=2;

            switch ( this->LA(1) )
            {
            case Character_literal:
            case FALSE:
            case Hex_number:
            case IDENTIFIER:
            case LT_NULL:
            case MINUS:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            case 64:
            case 69:
            case 71:
            case 72:
            case 74:
            case 75:
            case 78:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 109:
            case 111:
            case 112:
            case 116:
            case 117:
            case 118:
            case 119:
            case 121:
            case 122:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 152:
            case 153:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 176:
            case 179:
            case 182:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 191:
            case 192:
            case 196:
            case 198:
            case 204:
            	{
            		alt124=1;
            	}
                break;
            case SEMI:
            case 199:
            	{
            		alt124=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 124 );
                ex->set_state( 0 );


                goto ruleanonymous_function_bodyEx;

            }

            switch (alt124)
            {
        	case 1:
        	    // CSharp.g:654:2: expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_expression_in_anonymous_function_body3617);
        	        expression431=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleanonymous_function_bodyEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression431.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:655:4: block
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_block_in_anonymous_function_body3622);
        	        block432=block();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleanonymous_function_bodyEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block432.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleanonymous_function_bodyEx; /* Prevent compiler warnings */
    ruleanonymous_function_bodyEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(115, anonymous_function_body_StartIndex); }

    return retval;
}
/* $ANTLR end anonymous_function_body */

/**
 * $ANTLR start query_expression
 * CSharp.g:660:1: query_expression : from_clause query_body ;
 */
CSharpParser_query_expression_return
CSharpParser::query_expression()
{
    CSharpParser_query_expression_return retval(this);

    ANTLR_MARKER query_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_from_clause_return from_clause433;
    typedef	CSharpParser_from_clause_return RETURN_TYPE_from_clause433;

    CSharpParser_query_body_return query_body434;
    typedef	CSharpParser_query_body_return RETURN_TYPE_query_body434;


    /* Initialize rule variables
     */
    query_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(116)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    from_clause433.tree = NULL;

    query_body434.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:660:17: ( from_clause query_body )
        // CSharp.g:661:2: from_clause query_body
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_from_clause_in_query_expression3634);
            from_clause433=from_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulequery_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, from_clause433.tree);

            this->followPush(FOLLOW_query_body_in_query_expression3638);
            query_body434=query_body();

            this->followPop();
            if  (this->hasException())
            {
                goto rulequery_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, query_body434.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulequery_expressionEx; /* Prevent compiler warnings */
    rulequery_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(116, query_expression_StartIndex); }

    return retval;
}
/* $ANTLR end query_expression */

/**
 * $ANTLR start query_body
 * CSharp.g:662:1: query_body : ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )? ;
 */
CSharpParser_query_body_return
CSharpParser::query_body()
{
    CSharpParser_query_body_return retval(this);

    ANTLR_MARKER query_body_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_query_body_clauses_return query_body_clauses435;
    typedef	CSharpParser_query_body_clauses_return RETURN_TYPE_query_body_clauses435;

    CSharpParser_select_or_group_clause_return select_or_group_clause436;
    typedef	CSharpParser_select_or_group_clause_return RETURN_TYPE_select_or_group_clause436;

    CSharpParser_query_continuation_return query_continuation437;
    typedef	CSharpParser_query_continuation_return RETURN_TYPE_query_continuation437;


    /* Initialize rule variables
     */
    query_body_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(117)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    query_body_clauses435.tree = NULL;

    select_or_group_clause436.tree = NULL;

    query_continuation437.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:662:11: ( ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )? )
        // CSharp.g:664:2: ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )?
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:664:2: ( query_body_clauses )?
            {
                int alt125=2;
                switch ( this->LA(1) )
                {
                    case 134:
                    case 145:
                    case 146:
                    case 156:
                    case 196:
                    	{
                    		alt125=1;
                    	}
                        break;
                }

                switch (alt125)
                {
            	case 1:
            	    // CSharp.g:664:2: query_body_clauses
            	    {
            	        this->followPush(FOLLOW_query_body_clauses_in_query_body3648);
            	        query_body_clauses435=query_body_clauses();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_bodyEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, query_body_clauses435.tree);

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_select_or_group_clause_in_query_body3653);
            select_or_group_clause436=select_or_group_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulequery_bodyEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, select_or_group_clause436.tree);

            // CSharp.g:664:49: ( ( 'into' )=> query_continuation )?
            {
                int alt126=2;
                switch ( this->LA(1) )
                {
                    case 143:
                    	{
                    		{
                    		    int LA126_1 = this->LA(2);
                    		    if ( (this->msynpred( antlr3::ClassForwarder<synpred23_CSharp>() )))
                    		    {
                    		        alt126=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt126)
                {
            	case 1:
            	    // CSharp.g:664:50: ( 'into' )=> query_continuation
            	    {
            	        this->followPush(FOLLOW_query_continuation_in_query_body3664);
            	        query_continuation437=query_continuation();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_bodyEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, query_continuation437.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulequery_bodyEx; /* Prevent compiler warnings */
    rulequery_bodyEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(117, query_body_StartIndex); }

    return retval;
}
/* $ANTLR end query_body */

/**
 * $ANTLR start query_continuation
 * CSharp.g:665:1: query_continuation : 'into' identifier query_body ;
 */
CSharpParser_query_continuation_return
CSharpParser::query_continuation()
{
    CSharpParser_query_continuation_return retval(this);

    ANTLR_MARKER query_continuation_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal438;
    CSharpParser_identifier_return identifier439;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier439;

    CSharpParser_query_body_return query_body440;
    typedef	CSharpParser_query_body_return RETURN_TYPE_query_body440;

    ImplTraits::TreeType* string_literal438_tree;

    /* Initialize rule variables
     */
    query_continuation_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(118)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal438       = NULL;
    identifier439.tree = NULL;

    query_body440.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal438_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:665:19: ( 'into' identifier query_body )
        // CSharp.g:666:2: 'into' identifier query_body
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal438 =  this->matchToken(143, &FOLLOW_143_in_query_continuation3674);
            if  (this->hasException())
            {
                goto rulequery_continuationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal438_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal438));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal438_tree);
            }

            this->followPush(FOLLOW_identifier_in_query_continuation3678);
            identifier439=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto rulequery_continuationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier439.tree);

            this->followPush(FOLLOW_query_body_in_query_continuation3682);
            query_body440=query_body();

            this->followPop();
            if  (this->hasException())
            {
                goto rulequery_continuationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, query_body440.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulequery_continuationEx; /* Prevent compiler warnings */
    rulequery_continuationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(118, query_continuation_StartIndex); }

    return retval;
}
/* $ANTLR end query_continuation */

/**
 * $ANTLR start query_body_clauses
 * CSharp.g:667:1: query_body_clauses : ( query_body_clause )+ ;
 */
CSharpParser_query_body_clauses_return
CSharpParser::query_body_clauses()
{
    CSharpParser_query_body_clauses_return retval(this);

    ANTLR_MARKER query_body_clauses_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_query_body_clause_return query_body_clause441;
    typedef	CSharpParser_query_body_clause_return RETURN_TYPE_query_body_clause441;


    /* Initialize rule variables
     */
    query_body_clauses_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(119)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    query_body_clause441.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:667:19: ( ( query_body_clause )+ )
        // CSharp.g:668:2: ( query_body_clause )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:668:2: ( query_body_clause )+
            {
                int cnt127=0;

                for (;;)
                {
                    int alt127=2;
            	switch ( this->LA(1) )
            	{
            	case 134:
            	case 145:
            	case 146:
            	case 156:
            	case 196:
            		{
            			alt127=1;
            		}
            	    break;

            	}

            	switch (alt127)
            	{
            	    case 1:
            	        // CSharp.g:668:2: query_body_clause
            	        {
            	            this->followPush(FOLLOW_query_body_clause_in_query_body_clauses3689);
            	            query_body_clause441=query_body_clause();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulequery_body_clausesEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, query_body_clause441.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt127 >= 1 )
            		{
            		    goto loop127;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulequery_body_clausesEx;
            	}
            	cnt127++;
                }
                loop127: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulequery_body_clausesEx; /* Prevent compiler warnings */
    rulequery_body_clausesEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(119, query_body_clauses_StartIndex); }

    return retval;
}
/* $ANTLR end query_body_clauses */

/**
 * $ANTLR start query_body_clause
 * CSharp.g:669:1: query_body_clause : ( from_clause | let_clause | where_clause | join_clause | orderby_clause );
 */
CSharpParser_query_body_clause_return
CSharpParser::query_body_clause()
{
    CSharpParser_query_body_clause_return retval(this);

    ANTLR_MARKER query_body_clause_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_from_clause_return from_clause442;
    typedef	CSharpParser_from_clause_return RETURN_TYPE_from_clause442;

    CSharpParser_let_clause_return let_clause443;
    typedef	CSharpParser_let_clause_return RETURN_TYPE_let_clause443;

    CSharpParser_where_clause_return where_clause444;
    typedef	CSharpParser_where_clause_return RETURN_TYPE_where_clause444;

    CSharpParser_join_clause_return join_clause445;
    typedef	CSharpParser_join_clause_return RETURN_TYPE_join_clause445;

    CSharpParser_orderby_clause_return orderby_clause446;
    typedef	CSharpParser_orderby_clause_return RETURN_TYPE_orderby_clause446;


    /* Initialize rule variables
     */
    query_body_clause_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(120)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    from_clause442.tree = NULL;

    let_clause443.tree = NULL;

    where_clause444.tree = NULL;

    join_clause445.tree = NULL;

    orderby_clause446.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:669:18: ( from_clause | let_clause | where_clause | join_clause | orderby_clause )

            ANTLR_UINT32 alt128;

            alt128=5;

            switch ( this->LA(1) )
            {
            case 134:
            	{
            		alt128=1;
            	}
                break;
            case 146:
            	{
            		alt128=2;
            	}
                break;
            case 196:
            	{
            		alt128=3;
            	}
                break;
            case 145:
            	{
            		alt128=4;
            	}
                break;
            case 156:
            	{
            		alt128=5;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 128 );
                ex->set_state( 0 );


                goto rulequery_body_clauseEx;

            }

            switch (alt128)
            {
        	case 1:
        	    // CSharp.g:670:2: from_clause
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_from_clause_in_query_body_clause3698);
        	        from_clause442=from_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulequery_body_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, from_clause442.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:671:4: let_clause
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_let_clause_in_query_body_clause3703);
        	        let_clause443=let_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulequery_body_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, let_clause443.tree);

        	    }
        	    break;
        	case 3:
        	    // CSharp.g:672:4: where_clause
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_where_clause_in_query_body_clause3708);
        	        where_clause444=where_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulequery_body_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, where_clause444.tree);

        	    }
        	    break;
        	case 4:
        	    // CSharp.g:673:4: join_clause
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_join_clause_in_query_body_clause3713);
        	        join_clause445=join_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulequery_body_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, join_clause445.tree);

        	    }
        	    break;
        	case 5:
        	    // CSharp.g:674:4: orderby_clause
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_orderby_clause_in_query_body_clause3718);
        	        orderby_clause446=orderby_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulequery_body_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, orderby_clause446.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulequery_body_clauseEx; /* Prevent compiler warnings */
    rulequery_body_clauseEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(120, query_body_clause_StartIndex); }

    return retval;
}
/* $ANTLR end query_body_clause */

/**
 * $ANTLR start from_clause
 * CSharp.g:675:1: from_clause : 'from' ( type )? identifier 'in' expression ;
 */
CSharpParser_from_clause_return
CSharpParser::from_clause()
{
    CSharpParser_from_clause_return retval(this);

    ANTLR_MARKER from_clause_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal447;
    const CommonTokenType*    string_literal450;
    CSharpParser_type_return type448;
    typedef	CSharpParser_type_return RETURN_TYPE_type448;

    CSharpParser_identifier_return identifier449;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier449;

    CSharpParser_expression_return expression451;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression451;

    ImplTraits::TreeType* string_literal447_tree;
    ImplTraits::TreeType* string_literal450_tree;

    /* Initialize rule variables
     */
    from_clause_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(121)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal447       = NULL;
    string_literal450       = NULL;
    type448.tree = NULL;

    identifier449.tree = NULL;

    expression451.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal447_tree   = NULL;
    string_literal450_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:675:12: ( 'from' ( type )? identifier 'in' expression )
        // CSharp.g:676:2: 'from' ( type )? identifier 'in' expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal447 =  this->matchToken(134, &FOLLOW_134_in_from_clause3725);
            if  (this->hasException())
            {
                goto rulefrom_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal447_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal447));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal447_tree);
            }

            // CSharp.g:676:11: ( type )?
            {
                int alt129=2;
                switch ( this->LA(1) )
                {
                    case 106:
                    case 109:
                    case 111:
                    case 116:
                    case 121:
                    case 131:
                    case 140:
                    case 148:
                    case 153:
                    case 171:
                    case 175:
                    case 179:
                    case 187:
                    case 188:
                    case 191:
                    case 194:
                    	{
                    		alt129=1;
                    	}
                        break;
                    case IDENTIFIER:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 108:
                    case 119:
                    case 122:
                    case 124:
                    case 128:
                    case 134:
                    case 137:
                    case 143:
                    case 145:
                    case 146:
                    case 149:
                    case 150:
                    case 154:
                    case 156:
                    case 159:
                    case 162:
                    case 164:
                    case 169:
                    case 173:
                    case 174:
                    case 185:
                    case 192:
                    case 196:
                    case 198:
                    	{
                    		switch ( this->LA(2) )
                    		{
                    		    case DOT:
                    		    case IDENTIFIER:
                    		    case 72:
                    		    case 83:
                    		    case 84:
                    		    case 92:
                    		    case 94:
                    		    case 98:
                    		    case 100:
                    		    case 101:
                    		    case 103:
                    		    case 104:
                    		    case 108:
                    		    case 119:
                    		    case 122:
                    		    case 124:
                    		    case 128:
                    		    case 134:
                    		    case 137:
                    		    case 143:
                    		    case 145:
                    		    case 146:
                    		    case 149:
                    		    case 150:
                    		    case 154:
                    		    case 156:
                    		    case 159:
                    		    case 162:
                    		    case 164:
                    		    case 169:
                    		    case 173:
                    		    case 174:
                    		    case 185:
                    		    case 192:
                    		    case 196:
                    		    case 198:
                    		    	{
                    		    		alt129=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt129)
                {
            	case 1:
            	    // CSharp.g:676:11: type
            	    {
            	        this->followPush(FOLLOW_type_in_from_clause3729);
            	        type448=type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefrom_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type448.tree);

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_identifier_in_from_clause3734);
            identifier449=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefrom_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier449.tree);

            string_literal450 =  this->matchToken(139, &FOLLOW_139_in_from_clause3738);
            if  (this->hasException())
            {
                goto rulefrom_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal450_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal450));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal450_tree);
            }

            this->followPush(FOLLOW_expression_in_from_clause3742);
            expression451=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefrom_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression451.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulefrom_clauseEx; /* Prevent compiler warnings */
    rulefrom_clauseEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(121, from_clause_StartIndex); }

    return retval;
}
/* $ANTLR end from_clause */

/**
 * $ANTLR start join_clause
 * CSharp.g:677:1: join_clause : 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? ;
 */
CSharpParser_join_clause_return
CSharpParser::join_clause()
{
    CSharpParser_join_clause_return retval(this);

    ANTLR_MARKER join_clause_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal452;
    const CommonTokenType*    string_literal455;
    const CommonTokenType*    string_literal457;
    const CommonTokenType*    string_literal459;
    const CommonTokenType*    string_literal461;
    CSharpParser_type_return type453;
    typedef	CSharpParser_type_return RETURN_TYPE_type453;

    CSharpParser_identifier_return identifier454;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier454;

    CSharpParser_expression_return expression456;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression456;

    CSharpParser_expression_return expression458;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression458;

    CSharpParser_expression_return expression460;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression460;

    CSharpParser_identifier_return identifier462;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier462;

    ImplTraits::TreeType* string_literal452_tree;
    ImplTraits::TreeType* string_literal455_tree;
    ImplTraits::TreeType* string_literal457_tree;
    ImplTraits::TreeType* string_literal459_tree;
    ImplTraits::TreeType* string_literal461_tree;

    /* Initialize rule variables
     */
    join_clause_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(122)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal452       = NULL;
    string_literal455       = NULL;
    string_literal457       = NULL;
    string_literal459       = NULL;
    string_literal461       = NULL;
    type453.tree = NULL;

    identifier454.tree = NULL;

    expression456.tree = NULL;

    expression458.tree = NULL;

    expression460.tree = NULL;

    identifier462.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal452_tree   = NULL;
    string_literal455_tree   = NULL;
    string_literal457_tree   = NULL;
    string_literal459_tree   = NULL;
    string_literal461_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:677:12: ( 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? )
        // CSharp.g:678:2: 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )?
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal452 =  this->matchToken(145, &FOLLOW_145_in_join_clause3750);
            if  (this->hasException())
            {
                goto rulejoin_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal452_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal452));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal452_tree);
            }

            // CSharp.g:678:11: ( type )?
            {
                int alt130=2;
                switch ( this->LA(1) )
                {
                    case 106:
                    case 109:
                    case 111:
                    case 116:
                    case 121:
                    case 131:
                    case 140:
                    case 148:
                    case 153:
                    case 171:
                    case 175:
                    case 179:
                    case 187:
                    case 188:
                    case 191:
                    case 194:
                    	{
                    		alt130=1;
                    	}
                        break;
                    case IDENTIFIER:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 108:
                    case 119:
                    case 122:
                    case 124:
                    case 128:
                    case 134:
                    case 137:
                    case 143:
                    case 145:
                    case 146:
                    case 149:
                    case 150:
                    case 154:
                    case 156:
                    case 159:
                    case 162:
                    case 164:
                    case 169:
                    case 173:
                    case 174:
                    case 185:
                    case 192:
                    case 196:
                    case 198:
                    	{
                    		switch ( this->LA(2) )
                    		{
                    		    case DOT:
                    		    case IDENTIFIER:
                    		    case 72:
                    		    case 83:
                    		    case 84:
                    		    case 92:
                    		    case 94:
                    		    case 98:
                    		    case 100:
                    		    case 101:
                    		    case 103:
                    		    case 104:
                    		    case 108:
                    		    case 119:
                    		    case 122:
                    		    case 124:
                    		    case 128:
                    		    case 134:
                    		    case 137:
                    		    case 143:
                    		    case 145:
                    		    case 146:
                    		    case 149:
                    		    case 150:
                    		    case 154:
                    		    case 156:
                    		    case 159:
                    		    case 162:
                    		    case 164:
                    		    case 169:
                    		    case 173:
                    		    case 174:
                    		    case 185:
                    		    case 192:
                    		    case 196:
                    		    case 198:
                    		    	{
                    		    		alt130=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt130)
                {
            	case 1:
            	    // CSharp.g:678:11: type
            	    {
            	        this->followPush(FOLLOW_type_in_join_clause3754);
            	        type453=type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type453.tree);

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_identifier_in_join_clause3759);
            identifier454=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier454.tree);

            string_literal455 =  this->matchToken(139, &FOLLOW_139_in_join_clause3763);
            if  (this->hasException())
            {
                goto rulejoin_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal455_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal455));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal455_tree);
            }

            this->followPush(FOLLOW_expression_in_join_clause3767);
            expression456=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression456.tree);

            string_literal457 =  this->matchToken(154, &FOLLOW_154_in_join_clause3771);
            if  (this->hasException())
            {
                goto rulejoin_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal457_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal457));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal457_tree);
            }

            this->followPush(FOLLOW_expression_in_join_clause3775);
            expression458=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression458.tree);

            string_literal459 =  this->matchToken(124, &FOLLOW_124_in_join_clause3779);
            if  (this->hasException())
            {
                goto rulejoin_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal459_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal459));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal459_tree);
            }

            this->followPush(FOLLOW_expression_in_join_clause3783);
            expression460=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression460.tree);

            // CSharp.g:678:94: ( 'into' identifier )?
            {
                int alt131=2;
                switch ( this->LA(1) )
                {
                    case 143:
                    	{
                    		alt131=1;
                    	}
                        break;
                }

                switch (alt131)
                {
            	case 1:
            	    // CSharp.g:678:95: 'into' identifier
            	    {
            	        string_literal461 =  this->matchToken(143, &FOLLOW_143_in_join_clause3786);
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        string_literal461_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal461));
            	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal461_tree);
            	        }

            	        this->followPush(FOLLOW_identifier_in_join_clause3788);
            	        identifier462=identifier();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier462.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulejoin_clauseEx; /* Prevent compiler warnings */
    rulejoin_clauseEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(122, join_clause_StartIndex); }

    return retval;
}
/* $ANTLR end join_clause */

/**
 * $ANTLR start let_clause
 * CSharp.g:679:1: let_clause : 'let' identifier '=' expression ;
 */
CSharpParser_let_clause_return
CSharpParser::let_clause()
{
    CSharpParser_let_clause_return retval(this);

    ANTLR_MARKER let_clause_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal463;
    const CommonTokenType*    char_literal465;
    CSharpParser_identifier_return identifier464;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier464;

    CSharpParser_expression_return expression466;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression466;

    ImplTraits::TreeType* string_literal463_tree;
    ImplTraits::TreeType* char_literal465_tree;

    /* Initialize rule variables
     */
    let_clause_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(123)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal463       = NULL;
    char_literal465       = NULL;
    identifier464.tree = NULL;

    expression466.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal463_tree   = NULL;
    char_literal465_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:679:11: ( 'let' identifier '=' expression )
        // CSharp.g:680:2: 'let' identifier '=' expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal463 =  this->matchToken(146, &FOLLOW_146_in_let_clause3798);
            if  (this->hasException())
            {
                goto rulelet_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal463_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal463));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal463_tree);
            }

            this->followPush(FOLLOW_identifier_in_let_clause3802);
            identifier464=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelet_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier464.tree);

            char_literal465 =  this->matchToken(88, &FOLLOW_88_in_let_clause3806);
            if  (this->hasException())
            {
                goto rulelet_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal465_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal465));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal465_tree);
            }

            this->followPush(FOLLOW_expression_in_let_clause3810);
            expression466=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelet_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression466.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulelet_clauseEx; /* Prevent compiler warnings */
    rulelet_clauseEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(123, let_clause_StartIndex); }

    return retval;
}
/* $ANTLR end let_clause */

/**
 * $ANTLR start orderby_clause
 * CSharp.g:681:1: orderby_clause : 'orderby' ordering_list ;
 */
CSharpParser_orderby_clause_return
CSharpParser::orderby_clause()
{
    CSharpParser_orderby_clause_return retval(this);

    ANTLR_MARKER orderby_clause_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal467;
    CSharpParser_ordering_list_return ordering_list468;
    typedef	CSharpParser_ordering_list_return RETURN_TYPE_ordering_list468;

    ImplTraits::TreeType* string_literal467_tree;

    /* Initialize rule variables
     */
    orderby_clause_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(124)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal467       = NULL;
    ordering_list468.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal467_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:681:15: ( 'orderby' ordering_list )
        // CSharp.g:682:2: 'orderby' ordering_list
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal467 =  this->matchToken(156, &FOLLOW_156_in_orderby_clause3817);
            if  (this->hasException())
            {
                goto ruleorderby_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal467_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal467));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal467_tree);
            }

            this->followPush(FOLLOW_ordering_list_in_orderby_clause3821);
            ordering_list468=ordering_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleorderby_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, ordering_list468.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleorderby_clauseEx; /* Prevent compiler warnings */
    ruleorderby_clauseEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(124, orderby_clause_StartIndex); }

    return retval;
}
/* $ANTLR end orderby_clause */

/**
 * $ANTLR start ordering_list
 * CSharp.g:683:1: ordering_list : ordering ( ',' ordering )* ;
 */
CSharpParser_ordering_list_return
CSharpParser::ordering_list()
{
    CSharpParser_ordering_list_return retval(this);

    ANTLR_MARKER ordering_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal470;
    CSharpParser_ordering_return ordering469;
    typedef	CSharpParser_ordering_return RETURN_TYPE_ordering469;

    CSharpParser_ordering_return ordering471;
    typedef	CSharpParser_ordering_return RETURN_TYPE_ordering471;

    ImplTraits::TreeType* char_literal470_tree;

    /* Initialize rule variables
     */
    ordering_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(125)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal470       = NULL;
    ordering469.tree = NULL;

    ordering471.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal470_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:683:14: ( ordering ( ',' ordering )* )
        // CSharp.g:684:2: ordering ( ',' ordering )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_ordering_in_ordering_list3829);
            ordering469=ordering();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleordering_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, ordering469.tree);

            // CSharp.g:684:13: ( ',' ordering )*

            for (;;)
            {
                int alt132=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt132=1;
                	}
                    break;

                }

                switch (alt132)
                {
            	case 1:
            	    // CSharp.g:684:14: ',' ordering
            	    {
            	        char_literal470 =  this->matchToken(77, &FOLLOW_77_in_ordering_list3834);
            	        if  (this->hasException())
            	        {
            	            goto ruleordering_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal470_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal470));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal470_tree);
            	        }

            	        this->followPush(FOLLOW_ordering_in_ordering_list3838);
            	        ordering471=ordering();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleordering_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, ordering471.tree);

            	    }
            	    break;

            	default:
            	    goto loop132;	/* break out of the loop */
            	    break;
                }
            }
            loop132: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleordering_listEx; /* Prevent compiler warnings */
    ruleordering_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(125, ordering_list_StartIndex); }

    return retval;
}
/* $ANTLR end ordering_list */

/**
 * $ANTLR start ordering
 * CSharp.g:685:1: ordering : expression ordering_direction ;
 */
CSharpParser_ordering_return
CSharpParser::ordering()
{
    CSharpParser_ordering_return retval(this);

    ANTLR_MARKER ordering_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_expression_return expression472;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression472;

    CSharpParser_ordering_direction_return ordering_direction473;
    typedef	CSharpParser_ordering_direction_return RETURN_TYPE_ordering_direction473;


    /* Initialize rule variables
     */
    ordering_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(126)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    expression472.tree = NULL;

    ordering_direction473.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:685:9: ( expression ordering_direction )
        // CSharp.g:686:2: expression ordering_direction
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_expression_in_ordering3848);
            expression472=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleorderingEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression472.tree);

            this->followPush(FOLLOW_ordering_direction_in_ordering3853);
            ordering_direction473=ordering_direction();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleorderingEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, ordering_direction473.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleorderingEx; /* Prevent compiler warnings */
    ruleorderingEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(126, ordering_StartIndex); }

    return retval;
}
/* $ANTLR end ordering */

/**
 * $ANTLR start ordering_direction
 * CSharp.g:688:1: ordering_direction : ( 'ascending' | 'descending' );
 */
CSharpParser_ordering_direction_return
CSharpParser::ordering_direction()
{
    CSharpParser_ordering_direction_return retval(this);

    ANTLR_MARKER ordering_direction_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set474;

    ImplTraits::TreeType* set474_tree;

    /* Initialize rule variables
     */
    ordering_direction_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(127)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set474       = NULL;
    retval.call_start_placeholder(); 


    set474_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:688:19: ( 'ascending' | 'descending' )
        // CSharp.g:
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            set474=(const CommonTokenType*) this->LT(1);

            if ( this->LA(1) == 103 || this->LA(1) == 119 )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set474))
                );
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruleordering_directionEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleordering_directionEx; /* Prevent compiler warnings */
    ruleordering_directionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(127, ordering_direction_StartIndex); }

    return retval;
}
/* $ANTLR end ordering_direction */

/**
 * $ANTLR start select_or_group_clause
 * CSharp.g:691:1: select_or_group_clause : ( select_clause | group_clause );
 */
CSharpParser_select_or_group_clause_return
CSharpParser::select_or_group_clause()
{
    CSharpParser_select_or_group_clause_return retval(this);

    ANTLR_MARKER select_or_group_clause_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_select_clause_return select_clause475;
    typedef	CSharpParser_select_clause_return RETURN_TYPE_select_clause475;

    CSharpParser_group_clause_return group_clause476;
    typedef	CSharpParser_group_clause_return RETURN_TYPE_group_clause476;


    /* Initialize rule variables
     */
    select_or_group_clause_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(128)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    select_clause475.tree = NULL;

    group_clause476.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:691:23: ( select_clause | group_clause )

            ANTLR_UINT32 alt133;

            alt133=2;

            switch ( this->LA(1) )
            {
            case 173:
            	{
            		alt133=1;
            	}
                break;
            case 137:
            	{
            		alt133=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 133 );
                ex->set_state( 0 );


                goto ruleselect_or_group_clauseEx;

            }

            switch (alt133)
            {
        	case 1:
        	    // CSharp.g:692:2: select_clause
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_select_clause_in_select_or_group_clause3875);
        	        select_clause475=select_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleselect_or_group_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, select_clause475.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:693:4: group_clause
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_group_clause_in_select_or_group_clause3880);
        	        group_clause476=group_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleselect_or_group_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, group_clause476.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleselect_or_group_clauseEx; /* Prevent compiler warnings */
    ruleselect_or_group_clauseEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(128, select_or_group_clause_StartIndex); }

    return retval;
}
/* $ANTLR end select_or_group_clause */

/**
 * $ANTLR start select_clause
 * CSharp.g:694:1: select_clause : 'select' expression ;
 */
CSharpParser_select_clause_return
CSharpParser::select_clause()
{
    CSharpParser_select_clause_return retval(this);

    ANTLR_MARKER select_clause_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal477;
    CSharpParser_expression_return expression478;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression478;

    ImplTraits::TreeType* string_literal477_tree;

    /* Initialize rule variables
     */
    select_clause_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(129)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal477       = NULL;
    expression478.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal477_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:694:14: ( 'select' expression )
        // CSharp.g:695:2: 'select' expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal477 =  this->matchToken(173, &FOLLOW_173_in_select_clause3888);
            if  (this->hasException())
            {
                goto ruleselect_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal477_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal477));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal477_tree);
            }

            this->followPush(FOLLOW_expression_in_select_clause3892);
            expression478=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleselect_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression478.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleselect_clauseEx; /* Prevent compiler warnings */
    ruleselect_clauseEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(129, select_clause_StartIndex); }

    return retval;
}
/* $ANTLR end select_clause */

/**
 * $ANTLR start group_clause
 * CSharp.g:696:1: group_clause : 'group' expression 'by' expression ;
 */
CSharpParser_group_clause_return
CSharpParser::group_clause()
{
    CSharpParser_group_clause_return retval(this);

    ANTLR_MARKER group_clause_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal479;
    const CommonTokenType*    string_literal481;
    CSharpParser_expression_return expression480;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression480;

    CSharpParser_expression_return expression482;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression482;

    ImplTraits::TreeType* string_literal479_tree;
    ImplTraits::TreeType* string_literal481_tree;

    /* Initialize rule variables
     */
    group_clause_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(130)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal479       = NULL;
    string_literal481       = NULL;
    expression480.tree = NULL;

    expression482.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal479_tree   = NULL;
    string_literal481_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:696:13: ( 'group' expression 'by' expression )
        // CSharp.g:697:2: 'group' expression 'by' expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal479 =  this->matchToken(137, &FOLLOW_137_in_group_clause3900);
            if  (this->hasException())
            {
                goto rulegroup_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal479_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal479));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal479_tree);
            }

            this->followPush(FOLLOW_expression_in_group_clause3904);
            expression480=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegroup_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression480.tree);

            string_literal481 =  this->matchToken(108, &FOLLOW_108_in_group_clause3908);
            if  (this->hasException())
            {
                goto rulegroup_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal481_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal481));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal481_tree);
            }

            this->followPush(FOLLOW_expression_in_group_clause3912);
            expression482=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegroup_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression482.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulegroup_clauseEx; /* Prevent compiler warnings */
    rulegroup_clauseEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(130, group_clause_StartIndex); }

    return retval;
}
/* $ANTLR end group_clause */

/**
 * $ANTLR start where_clause
 * CSharp.g:698:1: where_clause : 'where' boolean_expression ;
 */
CSharpParser_where_clause_return
CSharpParser::where_clause()
{
    CSharpParser_where_clause_return retval(this);

    ANTLR_MARKER where_clause_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal483;
    CSharpParser_boolean_expression_return boolean_expression484;
    typedef	CSharpParser_boolean_expression_return RETURN_TYPE_boolean_expression484;

    ImplTraits::TreeType* string_literal483_tree;

    /* Initialize rule variables
     */
    where_clause_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(131)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal483       = NULL;
    boolean_expression484.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal483_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:698:13: ( 'where' boolean_expression )
        // CSharp.g:699:2: 'where' boolean_expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal483 =  this->matchToken(196, &FOLLOW_196_in_where_clause3920);
            if  (this->hasException())
            {
                goto rulewhere_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal483_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal483));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal483_tree);
            }

            this->followPush(FOLLOW_boolean_expression_in_where_clause3924);
            boolean_expression484=boolean_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhere_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, boolean_expression484.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulewhere_clauseEx; /* Prevent compiler warnings */
    rulewhere_clauseEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(131, where_clause_StartIndex); }

    return retval;
}
/* $ANTLR end where_clause */

/**
 * $ANTLR start boolean_expression
 * CSharp.g:700:1: boolean_expression : expression ;
 */
CSharpParser_boolean_expression_return
CSharpParser::boolean_expression()
{
    CSharpParser_boolean_expression_return retval(this);

    ANTLR_MARKER boolean_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_expression_return expression485;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression485;


    /* Initialize rule variables
     */
    boolean_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(132)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    expression485.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:700:19: ( expression )
        // CSharp.g:701:2: expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_expression_in_boolean_expression3932);
            expression485=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleboolean_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression485.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleboolean_expressionEx; /* Prevent compiler warnings */
    ruleboolean_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(132, boolean_expression_StartIndex); }

    return retval;
}
/* $ANTLR end boolean_expression */

/**
 * $ANTLR start global_attributes
 * CSharp.g:706:1: global_attributes : ( global_attribute )+ ;
 */
CSharpParser_global_attributes_return
CSharpParser::global_attributes()
{
    CSharpParser_global_attributes_return retval(this);

    ANTLR_MARKER global_attributes_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_global_attribute_return global_attribute486;
    typedef	CSharpParser_global_attribute_return RETURN_TYPE_global_attribute486;


    /* Initialize rule variables
     */
    global_attributes_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(133)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    global_attribute486.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:706:18: ( ( global_attribute )+ )
        // CSharp.g:707:2: ( global_attribute )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:707:2: ( global_attribute )+
            {
                int cnt134=0;

                for (;;)
                {
                    int alt134=2;
            	switch ( this->LA(1) )
            	{
            	case 94:
            		{
            			switch ( this->LA(2) )
            			{
            			case 104:
            			case 150:
            				{
            					switch ( this->LA(3) )
            					{
            					case 82:
            						{
            							alt134=1;
            						}
            					    break;

            					}

            				}
            			    break;

            			}

            		}
            	    break;

            	}

            	switch (alt134)
            	{
            	    case 1:
            	        // CSharp.g:707:2: global_attribute
            	        {
            	            this->followPush(FOLLOW_global_attribute_in_global_attributes3944);
            	            global_attribute486=global_attribute();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleglobal_attributesEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, global_attribute486.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt134 >= 1 )
            		{
            		    goto loop134;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleglobal_attributesEx;
            	}
            	cnt134++;
                }
                loop134: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleglobal_attributesEx; /* Prevent compiler warnings */
    ruleglobal_attributesEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(133, global_attributes_StartIndex); }

    return retval;
}
/* $ANTLR end global_attributes */

/**
 * $ANTLR start global_attribute
 * CSharp.g:708:1: global_attribute : '[' global_attribute_target_specifier attribute_list ( ',' )? ']' ;
 */
CSharpParser_global_attribute_return
CSharpParser::global_attribute()
{
    CSharpParser_global_attribute_return retval(this);

    ANTLR_MARKER global_attribute_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal487;
    const CommonTokenType*    char_literal490;
    const CommonTokenType*    char_literal491;
    CSharpParser_global_attribute_target_specifier_return global_attribute_target_specifier488;
    typedef	CSharpParser_global_attribute_target_specifier_return RETURN_TYPE_global_attribute_target_specifier488;

    CSharpParser_attribute_list_return attribute_list489;
    typedef	CSharpParser_attribute_list_return RETURN_TYPE_attribute_list489;

    ImplTraits::TreeType* char_literal487_tree;
    ImplTraits::TreeType* char_literal490_tree;
    ImplTraits::TreeType* char_literal491_tree;

    /* Initialize rule variables
     */
    global_attribute_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(134)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal487       = NULL;
    char_literal490       = NULL;
    char_literal491       = NULL;
    global_attribute_target_specifier488.tree = NULL;

    attribute_list489.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal487_tree   = NULL;
    char_literal490_tree   = NULL;
    char_literal491_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:708:17: ( '[' global_attribute_target_specifier attribute_list ( ',' )? ']' )
        // CSharp.g:709:2: '[' global_attribute_target_specifier attribute_list ( ',' )? ']'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal487 =  this->matchToken(94, &FOLLOW_94_in_global_attribute3954);
            if  (this->hasException())
            {
                goto ruleglobal_attributeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal487_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal487));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal487_tree);
            }

            this->followPush(FOLLOW_global_attribute_target_specifier_in_global_attribute3958);
            global_attribute_target_specifier488=global_attribute_target_specifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleglobal_attributeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, global_attribute_target_specifier488.tree);

            this->followPush(FOLLOW_attribute_list_in_global_attribute3962);
            attribute_list489=attribute_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleglobal_attributeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attribute_list489.tree);

            // CSharp.g:709:61: ( ',' )?
            {
                int alt135=2;
                switch ( this->LA(1) )
                {
                    case 77:
                    	{
                    		alt135=1;
                    	}
                        break;
                }

                switch (alt135)
                {
            	case 1:
            	    // CSharp.g:709:61: ','
            	    {
            	        char_literal490 =  this->matchToken(77, &FOLLOW_77_in_global_attribute3966);
            	        if  (this->hasException())
            	        {
            	            goto ruleglobal_attributeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal490_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal490));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal490_tree);
            	        }

            	    }
            	    break;

                }
            }

            char_literal491 =  this->matchToken(95, &FOLLOW_95_in_global_attribute3971);
            if  (this->hasException())
            {
                goto ruleglobal_attributeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal491_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal491));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal491_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleglobal_attributeEx; /* Prevent compiler warnings */
    ruleglobal_attributeEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(134, global_attribute_StartIndex); }

    return retval;
}
/* $ANTLR end global_attribute */

/**
 * $ANTLR start global_attribute_target_specifier
 * CSharp.g:710:1: global_attribute_target_specifier : global_attribute_target ':' ;
 */
CSharpParser_global_attribute_target_specifier_return
CSharpParser::global_attribute_target_specifier()
{
    CSharpParser_global_attribute_target_specifier_return retval(this);

    ANTLR_MARKER global_attribute_target_specifier_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal493;
    CSharpParser_global_attribute_target_return global_attribute_target492;
    typedef	CSharpParser_global_attribute_target_return RETURN_TYPE_global_attribute_target492;

    ImplTraits::TreeType* char_literal493_tree;

    /* Initialize rule variables
     */
    global_attribute_target_specifier_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(135)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal493       = NULL;
    global_attribute_target492.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal493_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:710:34: ( global_attribute_target ':' )
        // CSharp.g:711:2: global_attribute_target ':'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_global_attribute_target_in_global_attribute_target_specifier3980);
            global_attribute_target492=global_attribute_target();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleglobal_attribute_target_specifierEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, global_attribute_target492.tree);

            char_literal493 =  this->matchToken(82, &FOLLOW_82_in_global_attribute_target_specifier3984);
            if  (this->hasException())
            {
                goto ruleglobal_attribute_target_specifierEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal493_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal493));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal493_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleglobal_attribute_target_specifierEx; /* Prevent compiler warnings */
    ruleglobal_attribute_target_specifierEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(135, global_attribute_target_specifier_StartIndex); }

    return retval;
}
/* $ANTLR end global_attribute_target_specifier */

/**
 * $ANTLR start global_attribute_target
 * CSharp.g:712:1: global_attribute_target : ( 'assembly' | 'module' );
 */
CSharpParser_global_attribute_target_return
CSharpParser::global_attribute_target()
{
    CSharpParser_global_attribute_target_return retval(this);

    ANTLR_MARKER global_attribute_target_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set494;

    ImplTraits::TreeType* set494_tree;

    /* Initialize rule variables
     */
    global_attribute_target_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(136)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set494       = NULL;
    retval.call_start_placeholder(); 


    set494_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:712:24: ( 'assembly' | 'module' )
        // CSharp.g:
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            set494=(const CommonTokenType*) this->LT(1);

            if ( this->LA(1) == 104 || this->LA(1) == 150 )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set494))
                );
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruleglobal_attribute_targetEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleglobal_attribute_targetEx; /* Prevent compiler warnings */
    ruleglobal_attribute_targetEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(136, global_attribute_target_StartIndex); }

    return retval;
}
/* $ANTLR end global_attribute_target */

/**
 * $ANTLR start attributes
 * CSharp.g:714:1: attributes : attribute_sections ;
 */
CSharpParser_attributes_return
CSharpParser::attributes()
{
    CSharpParser_attributes_return retval(this);

    ANTLR_MARKER attributes_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_attribute_sections_return attribute_sections495;
    typedef	CSharpParser_attribute_sections_return RETURN_TYPE_attribute_sections495;


    /* Initialize rule variables
     */
    attributes_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(137)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    attribute_sections495.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:714:11: ( attribute_sections )
        // CSharp.g:715:2: attribute_sections
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_attribute_sections_in_attributes4006);
            attribute_sections495=attribute_sections();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleattributesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attribute_sections495.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleattributesEx; /* Prevent compiler warnings */
    ruleattributesEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(137, attributes_StartIndex); }

    return retval;
}
/* $ANTLR end attributes */

/**
 * $ANTLR start attribute_sections
 * CSharp.g:716:1: attribute_sections : ( attribute_section )+ ;
 */
CSharpParser_attribute_sections_return
CSharpParser::attribute_sections()
{
    CSharpParser_attribute_sections_return retval(this);

    ANTLR_MARKER attribute_sections_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_attribute_section_return attribute_section496;
    typedef	CSharpParser_attribute_section_return RETURN_TYPE_attribute_section496;


    /* Initialize rule variables
     */
    attribute_sections_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(138)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    attribute_section496.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:716:19: ( ( attribute_section )+ )
        // CSharp.g:717:2: ( attribute_section )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:717:2: ( attribute_section )+
            {
                int cnt136=0;

                for (;;)
                {
                    int alt136=2;
            	switch ( this->LA(1) )
            	{
            	case 94:
            		{
            			alt136=1;
            		}
            	    break;

            	}

            	switch (alt136)
            	{
            	    case 1:
            	        // CSharp.g:717:2: attribute_section
            	        {
            	            this->followPush(FOLLOW_attribute_section_in_attribute_sections4015);
            	            attribute_section496=attribute_section();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleattribute_sectionsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attribute_section496.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt136 >= 1 )
            		{
            		    goto loop136;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleattribute_sectionsEx;
            	}
            	cnt136++;
                }
                loop136: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleattribute_sectionsEx; /* Prevent compiler warnings */
    ruleattribute_sectionsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(138, attribute_sections_StartIndex); }

    return retval;
}
/* $ANTLR end attribute_sections */

/**
 * $ANTLR start attribute_section
 * CSharp.g:718:1: attribute_section : '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' ;
 */
CSharpParser_attribute_section_return
CSharpParser::attribute_section()
{
    CSharpParser_attribute_section_return retval(this);

    ANTLR_MARKER attribute_section_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal497;
    const CommonTokenType*    char_literal500;
    const CommonTokenType*    char_literal501;
    CSharpParser_attribute_target_specifier_return attribute_target_specifier498;
    typedef	CSharpParser_attribute_target_specifier_return RETURN_TYPE_attribute_target_specifier498;

    CSharpParser_attribute_list_return attribute_list499;
    typedef	CSharpParser_attribute_list_return RETURN_TYPE_attribute_list499;

    ImplTraits::TreeType* char_literal497_tree;
    ImplTraits::TreeType* char_literal500_tree;
    ImplTraits::TreeType* char_literal501_tree;

    /* Initialize rule variables
     */
    attribute_section_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(139)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal497       = NULL;
    char_literal500       = NULL;
    char_literal501       = NULL;
    attribute_target_specifier498.tree = NULL;

    attribute_list499.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal497_tree   = NULL;
    char_literal500_tree   = NULL;
    char_literal501_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:718:18: ( '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' )
        // CSharp.g:719:2: '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal497 =  this->matchToken(94, &FOLLOW_94_in_attribute_section4025);
            if  (this->hasException())
            {
                goto ruleattribute_sectionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal497_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal497));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal497_tree);
            }

            // CSharp.g:719:8: ( attribute_target_specifier )?
            {
                int alt137=2;
                switch ( this->LA(1) )
                {
                    case 128:
                    case 149:
                    case 159:
                    case 164:
                    case 185:
                    	{
                    		switch ( this->LA(2) )
                    		{
                    		    case 82:
                    		    	{
                    		    		alt137=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case 125:
                    case 170:
                    	{
                    		alt137=1;
                    	}
                        break;
                }

                switch (alt137)
                {
            	case 1:
            	    // CSharp.g:719:8: attribute_target_specifier
            	    {
            	        this->followPush(FOLLOW_attribute_target_specifier_in_attribute_section4029);
            	        attribute_target_specifier498=attribute_target_specifier();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleattribute_sectionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attribute_target_specifier498.tree);

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_attribute_list_in_attribute_section4034);
            attribute_list499=attribute_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleattribute_sectionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attribute_list499.tree);

            // CSharp.g:719:55: ( ',' )?
            {
                int alt138=2;
                switch ( this->LA(1) )
                {
                    case 77:
                    	{
                    		alt138=1;
                    	}
                        break;
                }

                switch (alt138)
                {
            	case 1:
            	    // CSharp.g:719:55: ','
            	    {
            	        char_literal500 =  this->matchToken(77, &FOLLOW_77_in_attribute_section4038);
            	        if  (this->hasException())
            	        {
            	            goto ruleattribute_sectionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal500_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal500));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal500_tree);
            	        }

            	    }
            	    break;

                }
            }

            char_literal501 =  this->matchToken(95, &FOLLOW_95_in_attribute_section4043);
            if  (this->hasException())
            {
                goto ruleattribute_sectionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal501_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal501));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal501_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleattribute_sectionEx; /* Prevent compiler warnings */
    ruleattribute_sectionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(139, attribute_section_StartIndex); }

    return retval;
}
/* $ANTLR end attribute_section */

/**
 * $ANTLR start attribute_target_specifier
 * CSharp.g:720:1: attribute_target_specifier : attribute_target ':' ;
 */
CSharpParser_attribute_target_specifier_return
CSharpParser::attribute_target_specifier()
{
    CSharpParser_attribute_target_specifier_return retval(this);

    ANTLR_MARKER attribute_target_specifier_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal503;
    CSharpParser_attribute_target_return attribute_target502;
    typedef	CSharpParser_attribute_target_return RETURN_TYPE_attribute_target502;

    ImplTraits::TreeType* char_literal503_tree;

    /* Initialize rule variables
     */
    attribute_target_specifier_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(140)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal503       = NULL;
    attribute_target502.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal503_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:720:27: ( attribute_target ':' )
        // CSharp.g:721:2: attribute_target ':'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_attribute_target_in_attribute_target_specifier4052);
            attribute_target502=attribute_target();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleattribute_target_specifierEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attribute_target502.tree);

            char_literal503 =  this->matchToken(82, &FOLLOW_82_in_attribute_target_specifier4056);
            if  (this->hasException())
            {
                goto ruleattribute_target_specifierEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal503_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal503));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal503_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleattribute_target_specifierEx; /* Prevent compiler warnings */
    ruleattribute_target_specifierEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(140, attribute_target_specifier_StartIndex); }

    return retval;
}
/* $ANTLR end attribute_target_specifier */

/**
 * $ANTLR start attribute_target
 * CSharp.g:722:1: attribute_target : ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' );
 */
CSharpParser_attribute_target_return
CSharpParser::attribute_target()
{
    CSharpParser_attribute_target_return retval(this);

    ANTLR_MARKER attribute_target_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set504;

    ImplTraits::TreeType* set504_tree;

    /* Initialize rule variables
     */
    attribute_target_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(141)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set504       = NULL;
    retval.call_start_placeholder(); 


    set504_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:722:17: ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' )
        // CSharp.g:
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            set504=(const CommonTokenType*) this->LT(1);

            if ( this->LA(1) == 125 || this->LA(1) == 128 || this->LA(1) == 149 || this->LA(1) == 159 || this->LA(1) == 164 || this->LA(1) == 170 || this->LA(1) == 185 )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set504))
                );
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruleattribute_targetEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleattribute_targetEx; /* Prevent compiler warnings */
    ruleattribute_targetEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(141, attribute_target_StartIndex); }

    return retval;
}
/* $ANTLR end attribute_target */

/**
 * $ANTLR start attribute_list
 * CSharp.g:724:1: attribute_list : attribute ( ',' attribute )* ;
 */
CSharpParser_attribute_list_return
CSharpParser::attribute_list()
{
    CSharpParser_attribute_list_return retval(this);

    ANTLR_MARKER attribute_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal506;
    CSharpParser_attribute_return attribute505;
    typedef	CSharpParser_attribute_return RETURN_TYPE_attribute505;

    CSharpParser_attribute_return attribute507;
    typedef	CSharpParser_attribute_return RETURN_TYPE_attribute507;

    ImplTraits::TreeType* char_literal506_tree;

    /* Initialize rule variables
     */
    attribute_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(142)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal506       = NULL;
    attribute505.tree = NULL;

    attribute507.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal506_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:724:15: ( attribute ( ',' attribute )* )
        // CSharp.g:725:2: attribute ( ',' attribute )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_attribute_in_attribute_list4098);
            attribute505=attribute();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleattribute_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attribute505.tree);

            // CSharp.g:725:12: ( ',' attribute )*

            for (;;)
            {
                int alt139=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		switch ( this->LA(2) )
                		{
                		case IDENTIFIER:
                		case 98:
                		case 100:
                		case 101:
                		case 103:
                		case 104:
                		case 108:
                		case 119:
                		case 122:
                		case 124:
                		case 128:
                		case 134:
                		case 137:
                		case 143:
                		case 145:
                		case 146:
                		case 149:
                		case 150:
                		case 154:
                		case 156:
                		case 159:
                		case 162:
                		case 164:
                		case 169:
                		case 173:
                		case 174:
                		case 185:
                		case 192:
                		case 196:
                		case 198:
                			{
                				alt139=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt139)
                {
            	case 1:
            	    // CSharp.g:725:13: ',' attribute
            	    {
            	        char_literal506 =  this->matchToken(77, &FOLLOW_77_in_attribute_list4101);
            	        if  (this->hasException())
            	        {
            	            goto ruleattribute_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal506_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal506));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal506_tree);
            	        }

            	        this->followPush(FOLLOW_attribute_in_attribute_list4103);
            	        attribute507=attribute();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleattribute_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attribute507.tree);

            	    }
            	    break;

            	default:
            	    goto loop139;	/* break out of the loop */
            	    break;
                }
            }
            loop139: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleattribute_listEx; /* Prevent compiler warnings */
    ruleattribute_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(142, attribute_list_StartIndex); }

    return retval;
}
/* $ANTLR end attribute_list */

/**
 * $ANTLR start attribute
 * CSharp.g:726:1: attribute : type_name ( attribute_arguments )? ;
 */
CSharpParser_attribute_return
CSharpParser::attribute()
{
    CSharpParser_attribute_return retval(this);

    ANTLR_MARKER attribute_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_type_name_return type_name508;
    typedef	CSharpParser_type_name_return RETURN_TYPE_type_name508;

    CSharpParser_attribute_arguments_return attribute_arguments509;
    typedef	CSharpParser_attribute_arguments_return RETURN_TYPE_attribute_arguments509;


    /* Initialize rule variables
     */
    attribute_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(143)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    type_name508.tree = NULL;

    attribute_arguments509.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:726:10: ( type_name ( attribute_arguments )? )
        // CSharp.g:727:2: type_name ( attribute_arguments )?
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_type_name_in_attribute4115);
            type_name508=type_name();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleattributeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_name508.tree);

            // CSharp.g:727:14: ( attribute_arguments )?
            {
                int alt140=2;
                switch ( this->LA(1) )
                {
                    case 71:
                    	{
                    		alt140=1;
                    	}
                        break;
                }

                switch (alt140)
                {
            	case 1:
            	    // CSharp.g:727:14: attribute_arguments
            	    {
            	        this->followPush(FOLLOW_attribute_arguments_in_attribute4119);
            	        attribute_arguments509=attribute_arguments();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleattributeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attribute_arguments509.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleattributeEx; /* Prevent compiler warnings */
    ruleattributeEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(143, attribute_StartIndex); }

    return retval;
}
/* $ANTLR end attribute */

/**
 * $ANTLR start attribute_arguments
 * CSharp.g:729:1: attribute_arguments : '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' ) ;
 */
CSharpParser_attribute_arguments_return
CSharpParser::attribute_arguments()
{
    CSharpParser_attribute_arguments_return retval(this);

    ANTLR_MARKER attribute_arguments_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal510;
    const CommonTokenType*    char_literal511;
    const CommonTokenType*    char_literal514;
    const CommonTokenType*    char_literal516;
    CSharpParser_positional_argument_return positional_argument512;
    typedef	CSharpParser_positional_argument_return RETURN_TYPE_positional_argument512;

    CSharpParser_named_argument_return named_argument513;
    typedef	CSharpParser_named_argument_return RETURN_TYPE_named_argument513;

    CSharpParser_positional_argument_return positional_argument515;
    typedef	CSharpParser_positional_argument_return RETURN_TYPE_positional_argument515;

    ImplTraits::TreeType* char_literal510_tree;
    ImplTraits::TreeType* char_literal511_tree;
    ImplTraits::TreeType* char_literal514_tree;
    ImplTraits::TreeType* char_literal516_tree;

    /* Initialize rule variables
     */
    attribute_arguments_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(144)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal510       = NULL;
    char_literal511       = NULL;
    char_literal514       = NULL;
    char_literal516       = NULL;
    positional_argument512.tree = NULL;

    named_argument513.tree = NULL;

    positional_argument515.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal510_tree   = NULL;
    char_literal511_tree   = NULL;
    char_literal514_tree   = NULL;
    char_literal516_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:729:20: ( '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' ) )
        // CSharp.g:730:2: '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' )
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal510 =  this->matchToken(71, &FOLLOW_71_in_attribute_arguments4130);
            if  (this->hasException())
            {
                goto ruleattribute_argumentsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal510_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal510));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal510_tree);
            }

            // CSharp.g:730:8: ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' )
            {
                int alt142=2;
                switch ( this->LA(1) )
                {
                case RPAREN:
                	{
                		alt142=1;
                	}
                    break;
                case Character_literal:
                case FALSE:
                case Hex_number:
                case IDENTIFIER:
                case LT_NULL:
                case MINUS:
                case NUMBER:
                case Real_literal:
                case STRINGLITERAL:
                case TRUE:
                case Verbatim_string_literal:
                case 64:
                case 69:
                case 71:
                case 72:
                case 74:
                case 75:
                case 78:
                case 98:
                case 100:
                case 101:
                case 103:
                case 104:
                case 105:
                case 106:
                case 108:
                case 109:
                case 111:
                case 112:
                case 116:
                case 117:
                case 118:
                case 119:
                case 121:
                case 122:
                case 124:
                case 128:
                case 131:
                case 134:
                case 137:
                case 140:
                case 143:
                case 145:
                case 146:
                case 148:
                case 149:
                case 150:
                case 152:
                case 153:
                case 154:
                case 156:
                case 159:
                case 162:
                case 164:
                case 169:
                case 171:
                case 173:
                case 174:
                case 175:
                case 176:
                case 179:
                case 182:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 191:
                case 192:
                case 196:
                case 198:
                case 204:
                	{
                		alt142=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 142 );
                    ex->set_state( 0 );


                    goto ruleattribute_argumentsEx;

                }

                switch (alt142)
                {
            	case 1:
            	    // CSharp.g:730:9: ')'
            	    {
            	        char_literal511 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_attribute_arguments4135);
            	        if  (this->hasException())
            	        {
            	            goto ruleattribute_argumentsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal511_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal511));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal511_tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // CSharp.g:731:8: ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')'
            	    {
            	        // CSharp.g:731:8: ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* )
            	        // CSharp.g:731:9: positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )*
            	        {
            	            this->followPush(FOLLOW_positional_argument_in_attribute_arguments4155);
            	            positional_argument512=positional_argument();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleattribute_argumentsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, positional_argument512.tree);

            	            // CSharp.g:731:31: ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )*

            	            for (;;)
            	            {
            	                int alt141=3;
            	                {
            	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                    */
            	                    int LA141_0 = this->LA(1);
            	                    if ( (this->msynpred( antlr3::ClassForwarder<synpred24_CSharp>() )) && (LA141_0 == IDENTIFIER || LA141_0 == 98 || ((LA141_0 >= 100) && (LA141_0 <= 101)) || ((LA141_0 >= 103) && (LA141_0 <= 104)) || LA141_0 == 108 || LA141_0 == 119 || LA141_0 == 122 || LA141_0 == 124 || LA141_0 == 128 || LA141_0 == 134 || LA141_0 == 137 || LA141_0 == 143 || ((LA141_0 >= 145) && (LA141_0 <= 146)) || ((LA141_0 >= 149) && (LA141_0 <= 150)) || LA141_0 == 154 || LA141_0 == 156 || LA141_0 == 159 || LA141_0 == 162 || LA141_0 == 164 || LA141_0 == 169 || ((LA141_0 >= 173) && (LA141_0 <= 174)) || LA141_0 == 185 || LA141_0 == 192 || LA141_0 == 196 || LA141_0 == 198))
            	                    {
            	                        alt141=1;
            	                    }
            	                    else if ( (LA141_0 == 77))
            	                    {
            	                        alt141=2;
            	                    }

            	                }
            	                switch (alt141)
            	                {
            	            	case 1:
            	            	    // CSharp.g:731:32: ( ',' identifier '=' )=> named_argument
            	            	    {
            	            	        this->followPush(FOLLOW_named_argument_in_attribute_arguments4174);
            	            	        named_argument513=named_argument();

            	            	        this->followPop();
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto ruleattribute_argumentsEx;
            	            	        }
            	            	        if (this->hasFailed())
            	            	        {
            	            	            return retval;
            	            	        }

            	            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, named_argument513.tree);

            	            	    }
            	            	    break;
            	            	case 2:
            	            	    // CSharp.g:732:15: ',' positional_argument
            	            	    {
            	            	        char_literal514 =  this->matchToken(77, &FOLLOW_77_in_attribute_arguments4190);
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto ruleattribute_argumentsEx;
            	            	        }
            	            	        if (this->hasFailed())
            	            	        {
            	            	            return retval;
            	            	        }

            	            	        if ( this->get_backtracking()==0 ) {
            	            	        char_literal514_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal514));
            	            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal514_tree);
            	            	        }

            	            	        this->followPush(FOLLOW_positional_argument_in_attribute_arguments4192);
            	            	        positional_argument515=positional_argument();

            	            	        this->followPop();
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto ruleattribute_argumentsEx;
            	            	        }
            	            	        if (this->hasFailed())
            	            	        {
            	            	            return retval;
            	            	        }

            	            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, positional_argument515.tree);

            	            	    }
            	            	    break;

            	            	default:
            	            	    goto loop141;	/* break out of the loop */
            	            	    break;
            	                }
            	            }
            	            loop141: ; /* Jump out to here if this rule does not match */


            	        }


            	        char_literal516 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_attribute_arguments4203);
            	        if  (this->hasException())
            	        {
            	            goto ruleattribute_argumentsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal516_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal516));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal516_tree);
            	        }

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleattribute_argumentsEx; /* Prevent compiler warnings */
    ruleattribute_argumentsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(144, attribute_arguments_StartIndex); }

    return retval;
}
/* $ANTLR end attribute_arguments */

/**
 * $ANTLR start positional_argument_list
 * CSharp.g:735:1: positional_argument_list : positional_argument ( ',' positional_argument )* ;
 */
CSharpParser_positional_argument_list_return
CSharpParser::positional_argument_list()
{
    CSharpParser_positional_argument_list_return retval(this);

    ANTLR_MARKER positional_argument_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal518;
    CSharpParser_positional_argument_return positional_argument517;
    typedef	CSharpParser_positional_argument_return RETURN_TYPE_positional_argument517;

    CSharpParser_positional_argument_return positional_argument519;
    typedef	CSharpParser_positional_argument_return RETURN_TYPE_positional_argument519;

    ImplTraits::TreeType* char_literal518_tree;

    /* Initialize rule variables
     */
    positional_argument_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(145)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal518       = NULL;
    positional_argument517.tree = NULL;

    positional_argument519.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal518_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:735:25: ( positional_argument ( ',' positional_argument )* )
        // CSharp.g:736:2: positional_argument ( ',' positional_argument )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_positional_argument_in_positional_argument_list4217);
            positional_argument517=positional_argument();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepositional_argument_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, positional_argument517.tree);

            // CSharp.g:736:22: ( ',' positional_argument )*

            for (;;)
            {
                int alt143=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt143=1;
                	}
                    break;

                }

                switch (alt143)
                {
            	case 1:
            	    // CSharp.g:736:23: ',' positional_argument
            	    {
            	        char_literal518 =  this->matchToken(77, &FOLLOW_77_in_positional_argument_list4220);
            	        if  (this->hasException())
            	        {
            	            goto rulepositional_argument_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal518_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal518));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal518_tree);
            	        }

            	        this->followPush(FOLLOW_positional_argument_in_positional_argument_list4222);
            	        positional_argument519=positional_argument();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepositional_argument_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, positional_argument519.tree);

            	    }
            	    break;

            	default:
            	    goto loop143;	/* break out of the loop */
            	    break;
                }
            }
            loop143: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulepositional_argument_listEx; /* Prevent compiler warnings */
    rulepositional_argument_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(145, positional_argument_list_StartIndex); }

    return retval;
}
/* $ANTLR end positional_argument_list */

/**
 * $ANTLR start positional_argument
 * CSharp.g:737:1: positional_argument : attribute_argument_expression ;
 */
CSharpParser_positional_argument_return
CSharpParser::positional_argument()
{
    CSharpParser_positional_argument_return retval(this);

    ANTLR_MARKER positional_argument_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_attribute_argument_expression_return attribute_argument_expression520;
    typedef	CSharpParser_attribute_argument_expression_return RETURN_TYPE_attribute_argument_expression520;


    /* Initialize rule variables
     */
    positional_argument_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(146)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    attribute_argument_expression520.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:737:20: ( attribute_argument_expression )
        // CSharp.g:738:2: attribute_argument_expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_attribute_argument_expression_in_positional_argument4233);
            attribute_argument_expression520=attribute_argument_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepositional_argumentEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attribute_argument_expression520.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulepositional_argumentEx; /* Prevent compiler warnings */
    rulepositional_argumentEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(146, positional_argument_StartIndex); }

    return retval;
}
/* $ANTLR end positional_argument */

/**
 * $ANTLR start named_argument_list
 * CSharp.g:739:1: named_argument_list : named_argument ( ',' named_argument )* ;
 */
CSharpParser_named_argument_list_return
CSharpParser::named_argument_list()
{
    CSharpParser_named_argument_list_return retval(this);

    ANTLR_MARKER named_argument_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal522;
    CSharpParser_named_argument_return named_argument521;
    typedef	CSharpParser_named_argument_return RETURN_TYPE_named_argument521;

    CSharpParser_named_argument_return named_argument523;
    typedef	CSharpParser_named_argument_return RETURN_TYPE_named_argument523;

    ImplTraits::TreeType* char_literal522_tree;

    /* Initialize rule variables
     */
    named_argument_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(147)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal522       = NULL;
    named_argument521.tree = NULL;

    named_argument523.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal522_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:739:20: ( named_argument ( ',' named_argument )* )
        // CSharp.g:740:2: named_argument ( ',' named_argument )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_named_argument_in_named_argument_list4242);
            named_argument521=named_argument();

            this->followPop();
            if  (this->hasException())
            {
                goto rulenamed_argument_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, named_argument521.tree);

            // CSharp.g:740:17: ( ',' named_argument )*

            for (;;)
            {
                int alt144=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt144=1;
                	}
                    break;

                }

                switch (alt144)
                {
            	case 1:
            	    // CSharp.g:740:18: ',' named_argument
            	    {
            	        char_literal522 =  this->matchToken(77, &FOLLOW_77_in_named_argument_list4245);
            	        if  (this->hasException())
            	        {
            	            goto rulenamed_argument_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal522_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal522));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal522_tree);
            	        }

            	        this->followPush(FOLLOW_named_argument_in_named_argument_list4247);
            	        named_argument523=named_argument();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulenamed_argument_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, named_argument523.tree);

            	    }
            	    break;

            	default:
            	    goto loop144;	/* break out of the loop */
            	    break;
                }
            }
            loop144: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulenamed_argument_listEx; /* Prevent compiler warnings */
    rulenamed_argument_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(147, named_argument_list_StartIndex); }

    return retval;
}
/* $ANTLR end named_argument_list */

/**
 * $ANTLR start named_argument
 * CSharp.g:741:1: named_argument : identifier '=' attribute_argument_expression ;
 */
CSharpParser_named_argument_return
CSharpParser::named_argument()
{
    CSharpParser_named_argument_return retval(this);

    ANTLR_MARKER named_argument_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal525;
    CSharpParser_identifier_return identifier524;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier524;

    CSharpParser_attribute_argument_expression_return attribute_argument_expression526;
    typedef	CSharpParser_attribute_argument_expression_return RETURN_TYPE_attribute_argument_expression526;

    ImplTraits::TreeType* char_literal525_tree;

    /* Initialize rule variables
     */
    named_argument_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(148)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal525       = NULL;
    identifier524.tree = NULL;

    attribute_argument_expression526.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal525_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:741:15: ( identifier '=' attribute_argument_expression )
        // CSharp.g:742:2: identifier '=' attribute_argument_expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_identifier_in_named_argument4258);
            identifier524=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto rulenamed_argumentEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier524.tree);

            char_literal525 =  this->matchToken(88, &FOLLOW_88_in_named_argument4262);
            if  (this->hasException())
            {
                goto rulenamed_argumentEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal525_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal525));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal525_tree);
            }

            this->followPush(FOLLOW_attribute_argument_expression_in_named_argument4266);
            attribute_argument_expression526=attribute_argument_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulenamed_argumentEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attribute_argument_expression526.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulenamed_argumentEx; /* Prevent compiler warnings */
    rulenamed_argumentEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(148, named_argument_StartIndex); }

    return retval;
}
/* $ANTLR end named_argument */

/**
 * $ANTLR start attribute_argument_expression
 * CSharp.g:743:1: attribute_argument_expression : expression ;
 */
CSharpParser_attribute_argument_expression_return
CSharpParser::attribute_argument_expression()
{
    CSharpParser_attribute_argument_expression_return retval(this);

    ANTLR_MARKER attribute_argument_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_expression_return expression527;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression527;


    /* Initialize rule variables
     */
    attribute_argument_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(149)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    expression527.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:743:30: ( expression )
        // CSharp.g:744:2: expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_expression_in_attribute_argument_expression4275);
            expression527=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleattribute_argument_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression527.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleattribute_argument_expressionEx; /* Prevent compiler warnings */
    ruleattribute_argument_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(149, attribute_argument_expression_StartIndex); }

    return retval;
}
/* $ANTLR end attribute_argument_expression */

/**
 * $ANTLR start class_declaration
 * CSharp.g:750:1: class_declaration : 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? -> ^( CLASS_DECL type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? ) ;
 */
CSharpParser_class_declaration_return
CSharpParser::class_declaration()
{
    CSharpParser_class_declaration_return retval(this);

    ANTLR_MARKER class_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal528;
    const CommonTokenType*    char_literal533;
    CSharpParser_type_or_generic_return type_or_generic529;
    typedef	CSharpParser_type_or_generic_return RETURN_TYPE_type_or_generic529;

    CSharpParser_class_base_return class_base530;
    typedef	CSharpParser_class_base_return RETURN_TYPE_class_base530;

    CSharpParser_type_parameter_constraints_clauses_return type_parameter_constraints_clauses531;
    typedef	CSharpParser_type_parameter_constraints_clauses_return RETURN_TYPE_type_parameter_constraints_clauses531;

    CSharpParser_class_body_return class_body532;
    typedef	CSharpParser_class_body_return RETURN_TYPE_class_body532;

    ImplTraits::TreeType* string_literal528_tree;
    ImplTraits::TreeType* char_literal533_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_113;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SEMI;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_class_body;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type_or_generic;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type_parameter_constraints_clauses;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_class_base;
    /* Initialize rule variables
     */
    class_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(150)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal528       = NULL;
    char_literal533       = NULL;
    type_or_generic529.tree = NULL;

    class_base530.tree = NULL;

    type_parameter_constraints_clauses531.tree = NULL;

    class_body532.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal528_tree   = NULL;
    char_literal533_tree   = NULL;

    stream_113   = NULL;
    #define CREATE_stream_113  if (stream_113 == NULL) {stream_113 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 113"); } 
    stream_SEMI   = NULL;
    #define CREATE_stream_SEMI  if (stream_SEMI == NULL) {stream_SEMI = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SEMI"); } 
    stream_class_body   = NULL;
    #define CREATE_stream_class_body  if (stream_class_body == NULL) {stream_class_body = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule class_body"); }
    stream_type_or_generic   = NULL;
    #define CREATE_stream_type_or_generic  if (stream_type_or_generic == NULL) {stream_type_or_generic = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type_or_generic"); }
    stream_type_parameter_constraints_clauses   = NULL;
    #define CREATE_stream_type_parameter_constraints_clauses  if (stream_type_parameter_constraints_clauses == NULL) {stream_type_parameter_constraints_clauses = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type_parameter_constraints_clauses"); }
    stream_class_base   = NULL;
    #define CREATE_stream_class_base  if (stream_class_base == NULL) {stream_class_base = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule class_base"); }

    retval.tree  = NULL;


 
    {
        // CSharp.g:751:2: ( 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? -> ^( CLASS_DECL type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? ) )
        // CSharp.g:751:4: 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )?
        {
            string_literal528 =  this->matchToken(113, &FOLLOW_113_in_class_declaration4289);
            if  (this->hasException())
            {
                goto ruleclass_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) { CREATE_stream_113; stream_113->add(stream_113, string_literal528, NULL); }


            this->followPush(FOLLOW_type_or_generic_in_class_declaration4292);
            type_or_generic529=type_or_generic();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleclass_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) { CREATE_stream_type_or_generic; stream_type_or_generic->add(stream_type_or_generic, type_or_generic529.tree, NULL); }

            // CSharp.g:751:31: ( class_base )?
            {
                int alt145=2;
                switch ( this->LA(1) )
                {
                    case 82:
                    	{
                    		alt145=1;
                    	}
                        break;
                }

                switch (alt145)
                {
            	case 1:
            	    // CSharp.g:751:31: class_base
            	    {
            	        this->followPush(FOLLOW_class_base_in_class_declaration4296);
            	        class_base530=class_base();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) { CREATE_stream_class_base; stream_class_base->add(stream_class_base, class_base530.tree, NULL); }

            	    }
            	    break;

                }
            }

            // CSharp.g:751:45: ( type_parameter_constraints_clauses )?
            {
                int alt146=2;
                switch ( this->LA(1) )
                {
                    case 196:
                    	{
                    		alt146=1;
                    	}
                        break;
                }

                switch (alt146)
                {
            	case 1:
            	    // CSharp.g:751:45: type_parameter_constraints_clauses
            	    {
            	        this->followPush(FOLLOW_type_parameter_constraints_clauses_in_class_declaration4301);
            	        type_parameter_constraints_clauses531=type_parameter_constraints_clauses();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) { CREATE_stream_type_parameter_constraints_clauses; stream_type_parameter_constraints_clauses->add(stream_type_parameter_constraints_clauses, type_parameter_constraints_clauses531.tree, NULL); }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_class_body_in_class_declaration4306);
            class_body532=class_body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleclass_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) { CREATE_stream_class_body; stream_class_body->add(stream_class_body, class_body532.tree, NULL); }

            // CSharp.g:751:96: ( ';' )?
            {
                int alt147=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt147=1;
                    	}
                        break;
                }

                switch (alt147)
                {
            	case 1:
            	    // CSharp.g:751:96: ';'
            	    {
            	        char_literal533 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_class_declaration4310);
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) { CREATE_stream_SEMI; stream_SEMI->add(stream_SEMI, char_literal533, NULL); }


            	    }
            	    break;

                }
            }

            /* AST REWRITE
             * elements          : type_or_generic, type_parameter_constraints_clauses, class_base, class_body, SEMI
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( this->get_backtracking()==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 751:101: -> ^( CLASS_DECL type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? )
            	{
            	    // CSharp.g:751:104: ^( CLASS_DECL type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? )
            	    {
            	        ImplTraits::TreeType* root_1 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (ImplTraits::TreeType*)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (ImplTraits::TreeType*)ADAPTOR->createTypeText(ADAPTOR, CLASS_DECL, (pANTLR3_UINT8)"CLASS_DECL")
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_type_or_generic == NULL ? NULL : stream_type_or_generic->nextTree(stream_type_or_generic));

            	        // CSharp.g:751:135: ( class_base )?
            	        {
            	        	if ( (stream_class_base != NULL && stream_class_base->hasNext(stream_class_base))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_class_base == NULL ? NULL : stream_class_base->nextTree(stream_class_base));

            	        	}
            	        	if ( stream_class_base != NULL) stream_class_base->reset(stream_class_base);

            	        }

            	        // CSharp.g:751:149: ( type_parameter_constraints_clauses )?
            	        {
            	        	if ( (stream_type_parameter_constraints_clauses != NULL && stream_type_parameter_constraints_clauses->hasNext(stream_type_parameter_constraints_clauses))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_type_parameter_constraints_clauses == NULL ? NULL : stream_type_parameter_constraints_clauses->nextTree(stream_type_parameter_constraints_clauses));

            	        	}
            	        	if ( stream_type_parameter_constraints_clauses != NULL) stream_type_parameter_constraints_clauses->reset(stream_type_parameter_constraints_clauses);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_class_body == NULL ? NULL : stream_class_body->nextTree(stream_class_body));

            	        // CSharp.g:751:200: ( ';' )?
            	        {
            	        	if ( (stream_SEMI != NULL && stream_SEMI->hasNext(stream_SEMI))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, 
            	        		stream_SEMI == NULL ? NULL : stream_SEMI->nextNode(stream_SEMI)
            	        		);

            	        	}
            	        	if ( stream_SEMI != NULL) stream_SEMI->reset(stream_SEMI);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    // This is where rules clean up and exit
    //
    goto ruleclass_declarationEx; /* Prevent compiler warnings */
    ruleclass_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_113 != NULL) stream_113->free(stream_113);
        if (stream_SEMI != NULL) stream_SEMI->free(stream_SEMI);
        if (stream_class_body != NULL) stream_class_body->free(stream_class_body);
        if (stream_type_or_generic != NULL) stream_type_or_generic->free(stream_type_or_generic);
        if (stream_type_parameter_constraints_clauses != NULL) stream_type_parameter_constraints_clauses->free(stream_type_parameter_constraints_clauses);
        if (stream_class_base != NULL) stream_class_base->free(stream_class_base);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(150, class_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end class_declaration */

/**
 * $ANTLR start class_base
 * CSharp.g:753:1: class_base : ':' interface_type_list ;
 */
CSharpParser_class_base_return
CSharpParser::class_base()
{
    CSharpParser_class_base_return retval(this);

    ANTLR_MARKER class_base_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal534;
    CSharpParser_interface_type_list_return interface_type_list535;
    typedef	CSharpParser_interface_type_list_return RETURN_TYPE_interface_type_list535;

    ImplTraits::TreeType* char_literal534_tree;

    /* Initialize rule variables
     */
    class_base_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(151)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal534       = NULL;
    interface_type_list535.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal534_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:753:11: ( ':' interface_type_list )
        // CSharp.g:756:2: ':' interface_type_list
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal534 =  this->matchToken(82, &FOLLOW_82_in_class_base4351);
            if  (this->hasException())
            {
                goto ruleclass_baseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal534_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal534));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal534_tree);
            }

            this->followPush(FOLLOW_interface_type_list_in_class_base4355);
            interface_type_list535=interface_type_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleclass_baseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_type_list535.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleclass_baseEx; /* Prevent compiler warnings */
    ruleclass_baseEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(151, class_base_StartIndex); }

    return retval;
}
/* $ANTLR end class_base */

/**
 * $ANTLR start interface_type_list
 * CSharp.g:758:1: interface_type_list : type ( ',' type )* ;
 */
CSharpParser_interface_type_list_return
CSharpParser::interface_type_list()
{
    CSharpParser_interface_type_list_return retval(this);

    ANTLR_MARKER interface_type_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal537;
    CSharpParser_type_return type536;
    typedef	CSharpParser_type_return RETURN_TYPE_type536;

    CSharpParser_type_return type538;
    typedef	CSharpParser_type_return RETURN_TYPE_type538;

    ImplTraits::TreeType* char_literal537_tree;

    /* Initialize rule variables
     */
    interface_type_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(152)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal537       = NULL;
    type536.tree = NULL;

    type538.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal537_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:758:20: ( type ( ',' type )* )
        // CSharp.g:759:2: type ( ',' type )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_type_in_interface_type_list4365);
            type536=type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinterface_type_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type536.tree);

            // CSharp.g:759:7: ( ',' type )*

            for (;;)
            {
                int alt148=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt148=1;
                	}
                    break;

                }

                switch (alt148)
                {
            	case 1:
            	    // CSharp.g:759:8: ',' type
            	    {
            	        char_literal537 =  this->matchToken(77, &FOLLOW_77_in_interface_type_list4368);
            	        if  (this->hasException())
            	        {
            	            goto ruleinterface_type_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal537_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal537));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal537_tree);
            	        }

            	        this->followPush(FOLLOW_type_in_interface_type_list4372);
            	        type538=type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinterface_type_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type538.tree);

            	    }
            	    break;

            	default:
            	    goto loop148;	/* break out of the loop */
            	    break;
                }
            }
            loop148: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleinterface_type_listEx; /* Prevent compiler warnings */
    ruleinterface_type_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(152, interface_type_list_StartIndex); }

    return retval;
}
/* $ANTLR end interface_type_list */

/**
 * $ANTLR start class_body
 * CSharp.g:761:1: class_body : '{' ( class_member_declarations )? '}' ;
 */
CSharpParser_class_body_return
CSharpParser::class_body()
{
    CSharpParser_class_body_return retval(this);

    ANTLR_MARKER class_body_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal539;
    const CommonTokenType*    char_literal541;
    CSharpParser_class_member_declarations_return class_member_declarations540;
    typedef	CSharpParser_class_member_declarations_return RETURN_TYPE_class_member_declarations540;

    ImplTraits::TreeType* char_literal539_tree;
    ImplTraits::TreeType* char_literal541_tree;

    /* Initialize rule variables
     */
    class_body_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(153)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal539       = NULL;
    char_literal541       = NULL;
    class_member_declarations540.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal539_tree   = NULL;
    char_literal541_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:761:11: ( '{' ( class_member_declarations )? '}' )
        // CSharp.g:762:2: '{' ( class_member_declarations )? '}'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal539 =  this->matchToken(199, &FOLLOW_199_in_class_body4383);
            if  (this->hasException())
            {
                goto ruleclass_bodyEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal539_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal539));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal539_tree);
            }

            // CSharp.g:762:8: ( class_member_declarations )?
            {
                int alt149=2;
                switch ( this->LA(1) )
                {
                    case ENUM:
                    case IDENTIFIER:
                    case 94:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 106:
                    case 108:
                    case 109:
                    case 111:
                    case 113:
                    case 114:
                    case 116:
                    case 118:
                    case 119:
                    case 121:
                    case 122:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 131:
                    case 134:
                    case 137:
                    case 138:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 145:
                    case 146:
                    case 148:
                    case 149:
                    case 150:
                    case 152:
                    case 153:
                    case 154:
                    case 156:
                    case 158:
                    case 159:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 169:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 178:
                    case 179:
                    case 180:
                    case 185:
                    case 187:
                    case 188:
                    case 190:
                    case 191:
                    case 192:
                    case 193:
                    case 194:
                    case 195:
                    case 196:
                    case 198:
                    case 204:
                    	{
                    		alt149=1;
                    	}
                        break;
                }

                switch (alt149)
                {
            	case 1:
            	    // CSharp.g:762:8: class_member_declarations
            	    {
            	        this->followPush(FOLLOW_class_member_declarations_in_class_body4387);
            	        class_member_declarations540=class_member_declarations();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclass_bodyEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, class_member_declarations540.tree);

            	    }
            	    break;

                }
            }

            char_literal541 =  this->matchToken(203, &FOLLOW_203_in_class_body4392);
            if  (this->hasException())
            {
                goto ruleclass_bodyEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal541_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal541));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal541_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleclass_bodyEx; /* Prevent compiler warnings */
    ruleclass_bodyEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(153, class_body_StartIndex); }

    return retval;
}
/* $ANTLR end class_body */

/**
 * $ANTLR start class_member_declarations
 * CSharp.g:763:1: class_member_declarations : ( class_member_declaration )+ ;
 */
CSharpParser_class_member_declarations_return
CSharpParser::class_member_declarations()
{
    CSharpParser_class_member_declarations_return retval(this);

    ANTLR_MARKER class_member_declarations_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_class_member_declaration_return class_member_declaration542;
    typedef	CSharpParser_class_member_declaration_return RETURN_TYPE_class_member_declaration542;


    /* Initialize rule variables
     */
    class_member_declarations_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(154)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    class_member_declaration542.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:763:26: ( ( class_member_declaration )+ )
        // CSharp.g:764:2: ( class_member_declaration )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:764:2: ( class_member_declaration )+
            {
                int cnt150=0;

                for (;;)
                {
                    int alt150=2;
            	switch ( this->LA(1) )
            	{
            	case ENUM:
            	case IDENTIFIER:
            	case 94:
            	case 98:
            	case 99:
            	case 100:
            	case 101:
            	case 103:
            	case 104:
            	case 106:
            	case 108:
            	case 109:
            	case 111:
            	case 113:
            	case 114:
            	case 116:
            	case 118:
            	case 119:
            	case 121:
            	case 122:
            	case 124:
            	case 125:
            	case 126:
            	case 127:
            	case 128:
            	case 131:
            	case 134:
            	case 137:
            	case 138:
            	case 140:
            	case 141:
            	case 142:
            	case 143:
            	case 145:
            	case 146:
            	case 148:
            	case 149:
            	case 150:
            	case 152:
            	case 153:
            	case 154:
            	case 156:
            	case 158:
            	case 159:
            	case 161:
            	case 162:
            	case 163:
            	case 164:
            	case 165:
            	case 166:
            	case 167:
            	case 169:
            	case 171:
            	case 172:
            	case 173:
            	case 174:
            	case 175:
            	case 178:
            	case 179:
            	case 180:
            	case 185:
            	case 187:
            	case 188:
            	case 190:
            	case 191:
            	case 192:
            	case 193:
            	case 194:
            	case 195:
            	case 196:
            	case 198:
            	case 204:
            		{
            			alt150=1;
            		}
            	    break;

            	}

            	switch (alt150)
            	{
            	    case 1:
            	        // CSharp.g:764:2: class_member_declaration
            	        {
            	            this->followPush(FOLLOW_class_member_declaration_in_class_member_declarations4400);
            	            class_member_declaration542=class_member_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclass_member_declarationsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, class_member_declaration542.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt150 >= 1 )
            		{
            		    goto loop150;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleclass_member_declarationsEx;
            	}
            	cnt150++;
                }
                loop150: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleclass_member_declarationsEx; /* Prevent compiler warnings */
    ruleclass_member_declarationsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(154, class_member_declarations_StartIndex); }

    return retval;
}
/* $ANTLR end class_member_declarations */

/**
 * $ANTLR start constant_declaration
 * CSharp.g:767:1: constant_declaration : 'const' type constant_declarators ';' ;
 */
CSharpParser_constant_declaration_return
CSharpParser::constant_declaration()
{
    CSharpParser_constant_declaration_return retval(this);

    ANTLR_MARKER constant_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal543;
    const CommonTokenType*    char_literal546;
    CSharpParser_type_return type544;
    typedef	CSharpParser_type_return RETURN_TYPE_type544;

    CSharpParser_constant_declarators_return constant_declarators545;
    typedef	CSharpParser_constant_declarators_return RETURN_TYPE_constant_declarators545;

    ImplTraits::TreeType* string_literal543_tree;
    ImplTraits::TreeType* char_literal546_tree;

    /* Initialize rule variables
     */
    constant_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(155)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal543       = NULL;
    char_literal546       = NULL;
    type544.tree = NULL;

    constant_declarators545.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal543_tree   = NULL;
    char_literal546_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:767:21: ( 'const' type constant_declarators ';' )
        // CSharp.g:768:2: 'const' type constant_declarators ';'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal543 =  this->matchToken(114, &FOLLOW_114_in_constant_declaration4411);
            if  (this->hasException())
            {
                goto ruleconstant_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal543_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal543));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal543_tree);
            }

            this->followPush(FOLLOW_type_in_constant_declaration4415);
            type544=type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconstant_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type544.tree);

            this->followPush(FOLLOW_constant_declarators_in_constant_declaration4419);
            constant_declarators545=constant_declarators();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconstant_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constant_declarators545.tree);

            char_literal546 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_constant_declaration4423);
            if  (this->hasException())
            {
                goto ruleconstant_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal546_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal546));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal546_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleconstant_declarationEx; /* Prevent compiler warnings */
    ruleconstant_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(155, constant_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end constant_declaration */

/**
 * $ANTLR start constant_declarators
 * CSharp.g:769:1: constant_declarators : constant_declarator ( ',' constant_declarator )* ;
 */
CSharpParser_constant_declarators_return
CSharpParser::constant_declarators()
{
    CSharpParser_constant_declarators_return retval(this);

    ANTLR_MARKER constant_declarators_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal548;
    CSharpParser_constant_declarator_return constant_declarator547;
    typedef	CSharpParser_constant_declarator_return RETURN_TYPE_constant_declarator547;

    CSharpParser_constant_declarator_return constant_declarator549;
    typedef	CSharpParser_constant_declarator_return RETURN_TYPE_constant_declarator549;

    ImplTraits::TreeType* char_literal548_tree;

    /* Initialize rule variables
     */
    constant_declarators_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(156)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal548       = NULL;
    constant_declarator547.tree = NULL;

    constant_declarator549.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal548_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:769:21: ( constant_declarator ( ',' constant_declarator )* )
        // CSharp.g:770:2: constant_declarator ( ',' constant_declarator )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_constant_declarator_in_constant_declarators4431);
            constant_declarator547=constant_declarator();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconstant_declaratorsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constant_declarator547.tree);

            // CSharp.g:770:22: ( ',' constant_declarator )*

            for (;;)
            {
                int alt151=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt151=1;
                	}
                    break;

                }

                switch (alt151)
                {
            	case 1:
            	    // CSharp.g:770:23: ',' constant_declarator
            	    {
            	        char_literal548 =  this->matchToken(77, &FOLLOW_77_in_constant_declarators4434);
            	        if  (this->hasException())
            	        {
            	            goto ruleconstant_declaratorsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal548_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal548));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal548_tree);
            	        }

            	        this->followPush(FOLLOW_constant_declarator_in_constant_declarators4436);
            	        constant_declarator549=constant_declarator();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconstant_declaratorsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constant_declarator549.tree);

            	    }
            	    break;

            	default:
            	    goto loop151;	/* break out of the loop */
            	    break;
                }
            }
            loop151: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleconstant_declaratorsEx; /* Prevent compiler warnings */
    ruleconstant_declaratorsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(156, constant_declarators_StartIndex); }

    return retval;
}
/* $ANTLR end constant_declarators */

/**
 * $ANTLR start constant_declarator
 * CSharp.g:771:1: constant_declarator : identifier ( '=' constant_expression )? ;
 */
CSharpParser_constant_declarator_return
CSharpParser::constant_declarator()
{
    CSharpParser_constant_declarator_return retval(this);

    ANTLR_MARKER constant_declarator_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal551;
    CSharpParser_identifier_return identifier550;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier550;

    CSharpParser_constant_expression_return constant_expression552;
    typedef	CSharpParser_constant_expression_return RETURN_TYPE_constant_expression552;

    ImplTraits::TreeType* char_literal551_tree;

    /* Initialize rule variables
     */
    constant_declarator_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(157)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal551       = NULL;
    identifier550.tree = NULL;

    constant_expression552.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal551_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:771:20: ( identifier ( '=' constant_expression )? )
        // CSharp.g:772:2: identifier ( '=' constant_expression )?
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_identifier_in_constant_declarator4446);
            identifier550=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconstant_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier550.tree);

            // CSharp.g:772:15: ( '=' constant_expression )?
            {
                int alt152=2;
                switch ( this->LA(1) )
                {
                    case 88:
                    	{
                    		alt152=1;
                    	}
                        break;
                }

                switch (alt152)
                {
            	case 1:
            	    // CSharp.g:772:16: '=' constant_expression
            	    {
            	        char_literal551 =  this->matchToken(88, &FOLLOW_88_in_constant_declarator4451);
            	        if  (this->hasException())
            	        {
            	            goto ruleconstant_declaratorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal551_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal551));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal551_tree);
            	        }

            	        this->followPush(FOLLOW_constant_expression_in_constant_declarator4455);
            	        constant_expression552=constant_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconstant_declaratorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constant_expression552.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleconstant_declaratorEx; /* Prevent compiler warnings */
    ruleconstant_declaratorEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(157, constant_declarator_StartIndex); }

    return retval;
}
/* $ANTLR end constant_declarator */

/**
 * $ANTLR start constant_expression
 * CSharp.g:773:1: constant_expression : expression ;
 */
CSharpParser_constant_expression_return
CSharpParser::constant_expression()
{
    CSharpParser_constant_expression_return retval(this);

    ANTLR_MARKER constant_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_expression_return expression553;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression553;


    /* Initialize rule variables
     */
    constant_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(158)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    expression553.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:773:20: ( expression )
        // CSharp.g:774:2: expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_expression_in_constant_expression4465);
            expression553=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconstant_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression553.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleconstant_expressionEx; /* Prevent compiler warnings */
    ruleconstant_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(158, constant_expression_StartIndex); }

    return retval;
}
/* $ANTLR end constant_expression */

/**
 * $ANTLR start field_declaration
 * CSharp.g:777:1: field_declaration : variable_declarators ';' ;
 */
CSharpParser_field_declaration_return
CSharpParser::field_declaration()
{
    CSharpParser_field_declaration_return retval(this);

    ANTLR_MARKER field_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal555;
    CSharpParser_variable_declarators_return variable_declarators554;
    typedef	CSharpParser_variable_declarators_return RETURN_TYPE_variable_declarators554;

    ImplTraits::TreeType* char_literal555_tree;

    /* Initialize rule variables
     */
    field_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(159)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal555       = NULL;
    variable_declarators554.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal555_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:777:18: ( variable_declarators ';' )
        // CSharp.g:778:2: variable_declarators ';'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_variable_declarators_in_field_declaration4474);
            variable_declarators554=variable_declarators();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefield_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variable_declarators554.tree);

            char_literal555 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_field_declaration4478);
            if  (this->hasException())
            {
                goto rulefield_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal555_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal555));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal555_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulefield_declarationEx; /* Prevent compiler warnings */
    rulefield_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(159, field_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end field_declaration */

/**
 * $ANTLR start variable_declarators
 * CSharp.g:779:1: variable_declarators : variable_declarator ( ',' variable_declarator )* ;
 */
CSharpParser_variable_declarators_return
CSharpParser::variable_declarators()
{
    CSharpParser_variable_declarators_return retval(this);

    ANTLR_MARKER variable_declarators_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal557;
    CSharpParser_variable_declarator_return variable_declarator556;
    typedef	CSharpParser_variable_declarator_return RETURN_TYPE_variable_declarator556;

    CSharpParser_variable_declarator_return variable_declarator558;
    typedef	CSharpParser_variable_declarator_return RETURN_TYPE_variable_declarator558;

    ImplTraits::TreeType* char_literal557_tree;

    /* Initialize rule variables
     */
    variable_declarators_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(160)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal557       = NULL;
    variable_declarator556.tree = NULL;

    variable_declarator558.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal557_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:779:21: ( variable_declarator ( ',' variable_declarator )* )
        // CSharp.g:780:2: variable_declarator ( ',' variable_declarator )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_variable_declarator_in_variable_declarators4486);
            variable_declarator556=variable_declarator();

            this->followPop();
            if  (this->hasException())
            {
                goto rulevariable_declaratorsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variable_declarator556.tree);

            // CSharp.g:780:22: ( ',' variable_declarator )*

            for (;;)
            {
                int alt153=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt153=1;
                	}
                    break;

                }

                switch (alt153)
                {
            	case 1:
            	    // CSharp.g:780:23: ',' variable_declarator
            	    {
            	        char_literal557 =  this->matchToken(77, &FOLLOW_77_in_variable_declarators4489);
            	        if  (this->hasException())
            	        {
            	            goto rulevariable_declaratorsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal557_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal557));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal557_tree);
            	        }

            	        this->followPush(FOLLOW_variable_declarator_in_variable_declarators4493);
            	        variable_declarator558=variable_declarator();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulevariable_declaratorsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variable_declarator558.tree);

            	    }
            	    break;

            	default:
            	    goto loop153;	/* break out of the loop */
            	    break;
                }
            }
            loop153: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulevariable_declaratorsEx; /* Prevent compiler warnings */
    rulevariable_declaratorsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(160, variable_declarators_StartIndex); }

    return retval;
}
/* $ANTLR end variable_declarators */

/**
 * $ANTLR start variable_declarator
 * CSharp.g:781:1: variable_declarator : type_name ( '=' variable_initializer )? ;
 */
CSharpParser_variable_declarator_return
CSharpParser::variable_declarator()
{
    CSharpParser_variable_declarator_return retval(this);

    ANTLR_MARKER variable_declarator_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal560;
    CSharpParser_type_name_return type_name559;
    typedef	CSharpParser_type_name_return RETURN_TYPE_type_name559;

    CSharpParser_variable_initializer_return variable_initializer561;
    typedef	CSharpParser_variable_initializer_return RETURN_TYPE_variable_initializer561;

    ImplTraits::TreeType* char_literal560_tree;

    /* Initialize rule variables
     */
    variable_declarator_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(161)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal560       = NULL;
    type_name559.tree = NULL;

    variable_initializer561.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal560_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:781:20: ( type_name ( '=' variable_initializer )? )
        // CSharp.g:782:2: type_name ( '=' variable_initializer )?
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_type_name_in_variable_declarator4503);
            type_name559=type_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulevariable_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_name559.tree);

            // CSharp.g:782:12: ( '=' variable_initializer )?
            {
                int alt154=2;
                switch ( this->LA(1) )
                {
                    case 88:
                    	{
                    		alt154=1;
                    	}
                        break;
                }

                switch (alt154)
                {
            	case 1:
            	    // CSharp.g:782:13: '=' variable_initializer
            	    {
            	        char_literal560 =  this->matchToken(88, &FOLLOW_88_in_variable_declarator4506);
            	        if  (this->hasException())
            	        {
            	            goto rulevariable_declaratorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal560_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal560));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal560_tree);
            	        }

            	        this->followPush(FOLLOW_variable_initializer_in_variable_declarator4510);
            	        variable_initializer561=variable_initializer();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulevariable_declaratorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variable_initializer561.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulevariable_declaratorEx; /* Prevent compiler warnings */
    rulevariable_declaratorEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(161, variable_declarator_StartIndex); }

    return retval;
}
/* $ANTLR end variable_declarator */

/**
 * $ANTLR start method_declaration
 * CSharp.g:785:1: method_declaration : method_header method_body ;
 */
CSharpParser_method_declaration_return
CSharpParser::method_declaration()
{
    CSharpParser_method_declaration_return retval(this);

    ANTLR_MARKER method_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_method_header_return method_header562;
    typedef	CSharpParser_method_header_return RETURN_TYPE_method_header562;

    CSharpParser_method_body_return method_body563;
    typedef	CSharpParser_method_body_return RETURN_TYPE_method_body563;


    /* Initialize rule variables
     */
    method_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(162)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    method_header562.tree = NULL;

    method_body563.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:785:19: ( method_header method_body )
        // CSharp.g:786:2: method_header method_body
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_method_header_in_method_declaration4524);
            method_header562=method_header();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemethod_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, method_header562.tree);

            this->followPush(FOLLOW_method_body_in_method_declaration4528);
            method_body563=method_body();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemethod_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, method_body563.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulemethod_declarationEx; /* Prevent compiler warnings */
    rulemethod_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(162, method_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end method_declaration */

/**
 * $ANTLR start method_header
 * CSharp.g:787:1: method_header : member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ;
 */
CSharpParser_method_header_return
CSharpParser::method_header()
{
    CSharpParser_method_header_return retval(this);

    ANTLR_MARKER method_header_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal565;
    const CommonTokenType*    char_literal567;
    CSharpParser_member_name_return member_name564;
    typedef	CSharpParser_member_name_return RETURN_TYPE_member_name564;

    CSharpParser_formal_parameter_list_return formal_parameter_list566;
    typedef	CSharpParser_formal_parameter_list_return RETURN_TYPE_formal_parameter_list566;

    CSharpParser_type_parameter_constraints_clauses_return type_parameter_constraints_clauses568;
    typedef	CSharpParser_type_parameter_constraints_clauses_return RETURN_TYPE_type_parameter_constraints_clauses568;

    ImplTraits::TreeType* char_literal565_tree;
    ImplTraits::TreeType* char_literal567_tree;

    /* Initialize rule variables
     */
    method_header_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(163)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal565       = NULL;
    char_literal567       = NULL;
    member_name564.tree = NULL;

    formal_parameter_list566.tree = NULL;

    type_parameter_constraints_clauses568.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal565_tree   = NULL;
    char_literal567_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:787:14: ( member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? )
        // CSharp.g:788:2: member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )?
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_member_name_in_method_header4536);
            member_name564=member_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemethod_headerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, member_name564.tree);

            char_literal565 =  this->matchToken(71, &FOLLOW_71_in_method_header4539);
            if  (this->hasException())
            {
                goto rulemethod_headerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal565_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal565));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal565_tree);
            }

            // CSharp.g:788:21: ( formal_parameter_list )?
            {
                int alt155=2;
                switch ( this->LA(1) )
                {
                    case IDENTIFIER:
                    case 94:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 106:
                    case 108:
                    case 109:
                    case 111:
                    case 116:
                    case 119:
                    case 121:
                    case 122:
                    case 124:
                    case 128:
                    case 131:
                    case 134:
                    case 137:
                    case 140:
                    case 143:
                    case 145:
                    case 146:
                    case 148:
                    case 149:
                    case 150:
                    case 153:
                    case 154:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 162:
                    case 164:
                    case 168:
                    case 169:
                    case 171:
                    case 173:
                    case 174:
                    case 175:
                    case 179:
                    case 182:
                    case 185:
                    case 187:
                    case 188:
                    case 191:
                    case 192:
                    case 194:
                    case 196:
                    case 198:
                    	{
                    		alt155=1;
                    	}
                        break;
                }

                switch (alt155)
                {
            	case 1:
            	    // CSharp.g:788:21: formal_parameter_list
            	    {
            	        this->followPush(FOLLOW_formal_parameter_list_in_method_header4543);
            	        formal_parameter_list566=formal_parameter_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemethod_headerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, formal_parameter_list566.tree);

            	    }
            	    break;

                }
            }

            char_literal567 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_method_header4548);
            if  (this->hasException())
            {
                goto rulemethod_headerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal567_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal567));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal567_tree);
            }

            // CSharp.g:788:52: ( type_parameter_constraints_clauses )?
            {
                int alt156=2;
                switch ( this->LA(1) )
                {
                    case 196:
                    	{
                    		alt156=1;
                    	}
                        break;
                }

                switch (alt156)
                {
            	case 1:
            	    // CSharp.g:788:52: type_parameter_constraints_clauses
            	    {
            	        this->followPush(FOLLOW_type_parameter_constraints_clauses_in_method_header4552);
            	        type_parameter_constraints_clauses568=type_parameter_constraints_clauses();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemethod_headerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_parameter_constraints_clauses568.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulemethod_headerEx; /* Prevent compiler warnings */
    rulemethod_headerEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(163, method_header_StartIndex); }

    return retval;
}
/* $ANTLR end method_header */

/**
 * $ANTLR start method_body
 * CSharp.g:789:1: method_body : block ;
 */
CSharpParser_method_body_return
CSharpParser::method_body()
{
    CSharpParser_method_body_return retval(this);

    ANTLR_MARKER method_body_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_block_return block569;
    typedef	CSharpParser_block_return RETURN_TYPE_block569;


    /* Initialize rule variables
     */
    method_body_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(164)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    block569.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:789:12: ( block )
        // CSharp.g:790:2: block
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_block_in_method_body4561);
            block569=block();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemethod_bodyEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block569.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulemethod_bodyEx; /* Prevent compiler warnings */
    rulemethod_bodyEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(164, method_body_StartIndex); }

    return retval;
}
/* $ANTLR end method_body */

/**
 * $ANTLR start member_name
 * CSharp.g:791:1: member_name : qid ;
 */
CSharpParser_member_name_return
CSharpParser::member_name()
{
    CSharpParser_member_name_return retval(this);

    ANTLR_MARKER member_name_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_qid_return qid570;
    typedef	CSharpParser_qid_return RETURN_TYPE_qid570;


    /* Initialize rule variables
     */
    member_name_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(165)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    qid570.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:791:12: ( qid )
        // CSharp.g:792:2: qid
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_qid_in_member_name4569);
            qid570=qid();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemember_nameEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, qid570.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulemember_nameEx; /* Prevent compiler warnings */
    rulemember_nameEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(165, member_name_StartIndex); }

    return retval;
}
/* $ANTLR end member_name */

/**
 * $ANTLR start property_declaration
 * CSharp.g:795:1: property_declaration : member_name '{' accessor_declarations '}' ;
 */
CSharpParser_property_declaration_return
CSharpParser::property_declaration()
{
    CSharpParser_property_declaration_return retval(this);

    ANTLR_MARKER property_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal572;
    const CommonTokenType*    char_literal574;
    CSharpParser_member_name_return member_name571;
    typedef	CSharpParser_member_name_return RETURN_TYPE_member_name571;

    CSharpParser_accessor_declarations_return accessor_declarations573;
    typedef	CSharpParser_accessor_declarations_return RETURN_TYPE_accessor_declarations573;

    ImplTraits::TreeType* char_literal572_tree;
    ImplTraits::TreeType* char_literal574_tree;

    /* Initialize rule variables
     */
    property_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(166)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal572       = NULL;
    char_literal574       = NULL;
    member_name571.tree = NULL;

    accessor_declarations573.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal572_tree   = NULL;
    char_literal574_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:795:21: ( member_name '{' accessor_declarations '}' )
        // CSharp.g:796:2: member_name '{' accessor_declarations '}'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_member_name_in_property_declaration4581);
            member_name571=member_name();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleproperty_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, member_name571.tree);

            char_literal572 =  this->matchToken(199, &FOLLOW_199_in_property_declaration4585);
            if  (this->hasException())
            {
                goto ruleproperty_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal572_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal572));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal572_tree);
            }

            this->followPush(FOLLOW_accessor_declarations_in_property_declaration4589);
            accessor_declarations573=accessor_declarations();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleproperty_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, accessor_declarations573.tree);

            char_literal574 =  this->matchToken(203, &FOLLOW_203_in_property_declaration4593);
            if  (this->hasException())
            {
                goto ruleproperty_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal574_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal574));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal574_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleproperty_declarationEx; /* Prevent compiler warnings */
    ruleproperty_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(166, property_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end property_declaration */

/**
 * $ANTLR start accessor_declarations
 * CSharp.g:797:1: accessor_declarations : ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? ) ;
 */
CSharpParser_accessor_declarations_return
CSharpParser::accessor_declarations()
{
    CSharpParser_accessor_declarations_return retval(this);

    ANTLR_MARKER accessor_declarations_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_attributes_return attributes575;
    typedef	CSharpParser_attributes_return RETURN_TYPE_attributes575;

    CSharpParser_get_accessor_declaration_return get_accessor_declaration576;
    typedef	CSharpParser_get_accessor_declaration_return RETURN_TYPE_get_accessor_declaration576;

    CSharpParser_attributes_return attributes577;
    typedef	CSharpParser_attributes_return RETURN_TYPE_attributes577;

    CSharpParser_set_accessor_declaration_return set_accessor_declaration578;
    typedef	CSharpParser_set_accessor_declaration_return RETURN_TYPE_set_accessor_declaration578;

    CSharpParser_set_accessor_declaration_return set_accessor_declaration579;
    typedef	CSharpParser_set_accessor_declaration_return RETURN_TYPE_set_accessor_declaration579;

    CSharpParser_attributes_return attributes580;
    typedef	CSharpParser_attributes_return RETURN_TYPE_attributes580;

    CSharpParser_get_accessor_declaration_return get_accessor_declaration581;
    typedef	CSharpParser_get_accessor_declaration_return RETURN_TYPE_get_accessor_declaration581;


    /* Initialize rule variables
     */
    accessor_declarations_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(167)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    attributes575.tree = NULL;

    get_accessor_declaration576.tree = NULL;

    attributes577.tree = NULL;

    set_accessor_declaration578.tree = NULL;

    set_accessor_declaration579.tree = NULL;

    attributes580.tree = NULL;

    get_accessor_declaration581.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:797:22: ( ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? ) )
        // CSharp.g:798:2: ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? )
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:798:2: ( attributes )?
            {
                int alt157=2;
                switch ( this->LA(1) )
                {
                    case 94:
                    	{
                    		alt157=1;
                    	}
                        break;
                }

                switch (alt157)
                {
            	case 1:
            	    // CSharp.g:798:2: attributes
            	    {
            	        this->followPush(FOLLOW_attributes_in_accessor_declarations4601);
            	        attributes575=attributes();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleaccessor_declarationsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attributes575.tree);

            	    }
            	    break;

                }
            }

            // CSharp.g:799:3: ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? )
            {
                int alt162=2;
                switch ( this->LA(1) )
                {
                case 142:
                case 163:
                case 165:
                case 166:
                	{
                		switch ( this->LA(2) )
                		{
                		case 135:
                			{
                				alt162=1;
                			}
                		    break;
                		case 174:
                			{
                				alt162=2;
                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return retval;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 162 );
                		    ex->set_state( 1 );


                		    goto ruleaccessor_declarationsEx;

                		}

                	}
                    break;
                case 135:
                	{
                		alt162=1;
                	}
                    break;
                case 174:
                	{
                		alt162=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 162 );
                    ex->set_state( 0 );


                    goto ruleaccessor_declarationsEx;

                }

                switch (alt162)
                {
            	case 1:
            	    // CSharp.g:799:4: get_accessor_declaration ( attributes )? ( set_accessor_declaration )?
            	    {
            	        this->followPush(FOLLOW_get_accessor_declaration_in_accessor_declarations4607);
            	        get_accessor_declaration576=get_accessor_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleaccessor_declarationsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, get_accessor_declaration576.tree);

            	        // CSharp.g:799:31: ( attributes )?
            	        {
            	            int alt158=2;
            	            switch ( this->LA(1) )
            	            {
            	                case 94:
            	                	{
            	                		alt158=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt158)
            	            {
            	        	case 1:
            	        	    // CSharp.g:799:31: attributes
            	        	    {
            	        	        this->followPush(FOLLOW_attributes_in_accessor_declarations4611);
            	        	        attributes577=attributes();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleaccessor_declarationsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attributes577.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	        // CSharp.g:799:45: ( set_accessor_declaration )?
            	        {
            	            int alt159=2;
            	            switch ( this->LA(1) )
            	            {
            	                case 142:
            	                case 163:
            	                case 165:
            	                case 166:
            	                case 174:
            	                	{
            	                		alt159=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt159)
            	            {
            	        	case 1:
            	        	    // CSharp.g:799:45: set_accessor_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_set_accessor_declaration_in_accessor_declarations4616);
            	        	        set_accessor_declaration578=set_accessor_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleaccessor_declarationsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, set_accessor_declaration578.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // CSharp.g:800:5: set_accessor_declaration ( attributes )? ( get_accessor_declaration )?
            	    {
            	        this->followPush(FOLLOW_set_accessor_declaration_in_accessor_declarations4623);
            	        set_accessor_declaration579=set_accessor_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleaccessor_declarationsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, set_accessor_declaration579.tree);

            	        // CSharp.g:800:32: ( attributes )?
            	        {
            	            int alt160=2;
            	            switch ( this->LA(1) )
            	            {
            	                case 94:
            	                	{
            	                		alt160=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt160)
            	            {
            	        	case 1:
            	        	    // CSharp.g:800:32: attributes
            	        	    {
            	        	        this->followPush(FOLLOW_attributes_in_accessor_declarations4627);
            	        	        attributes580=attributes();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleaccessor_declarationsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attributes580.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	        // CSharp.g:800:46: ( get_accessor_declaration )?
            	        {
            	            int alt161=2;
            	            switch ( this->LA(1) )
            	            {
            	                case 135:
            	                case 142:
            	                case 163:
            	                case 165:
            	                case 166:
            	                	{
            	                		alt161=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt161)
            	            {
            	        	case 1:
            	        	    // CSharp.g:800:46: get_accessor_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_get_accessor_declaration_in_accessor_declarations4632);
            	        	        get_accessor_declaration581=get_accessor_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleaccessor_declarationsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, get_accessor_declaration581.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleaccessor_declarationsEx; /* Prevent compiler warnings */
    ruleaccessor_declarationsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(167, accessor_declarations_StartIndex); }

    return retval;
}
/* $ANTLR end accessor_declarations */

/**
 * $ANTLR start get_accessor_declaration
 * CSharp.g:801:1: get_accessor_declaration : ( accessor_modifier )? 'get' accessor_body ;
 */
CSharpParser_get_accessor_declaration_return
CSharpParser::get_accessor_declaration()
{
    CSharpParser_get_accessor_declaration_return retval(this);

    ANTLR_MARKER get_accessor_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal583;
    CSharpParser_accessor_modifier_return accessor_modifier582;
    typedef	CSharpParser_accessor_modifier_return RETURN_TYPE_accessor_modifier582;

    CSharpParser_accessor_body_return accessor_body584;
    typedef	CSharpParser_accessor_body_return RETURN_TYPE_accessor_body584;

    ImplTraits::TreeType* string_literal583_tree;

    /* Initialize rule variables
     */
    get_accessor_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(168)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal583       = NULL;
    accessor_modifier582.tree = NULL;

    accessor_body584.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal583_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:801:25: ( ( accessor_modifier )? 'get' accessor_body )
        // CSharp.g:802:2: ( accessor_modifier )? 'get' accessor_body
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:802:2: ( accessor_modifier )?
            {
                int alt163=2;
                switch ( this->LA(1) )
                {
                    case 142:
                    case 163:
                    case 165:
                    case 166:
                    	{
                    		alt163=1;
                    	}
                        break;
                }

                switch (alt163)
                {
            	case 1:
            	    // CSharp.g:802:2: accessor_modifier
            	    {
            	        this->followPush(FOLLOW_accessor_modifier_in_get_accessor_declaration4642);
            	        accessor_modifier582=accessor_modifier();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleget_accessor_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, accessor_modifier582.tree);

            	    }
            	    break;

                }
            }

            string_literal583 =  this->matchToken(135, &FOLLOW_135_in_get_accessor_declaration4647);
            if  (this->hasException())
            {
                goto ruleget_accessor_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal583_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal583));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal583_tree);
            }

            this->followPush(FOLLOW_accessor_body_in_get_accessor_declaration4651);
            accessor_body584=accessor_body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleget_accessor_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, accessor_body584.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleget_accessor_declarationEx; /* Prevent compiler warnings */
    ruleget_accessor_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(168, get_accessor_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end get_accessor_declaration */

/**
 * $ANTLR start set_accessor_declaration
 * CSharp.g:803:1: set_accessor_declaration : ( accessor_modifier )? 'set' accessor_body ;
 */
CSharpParser_set_accessor_declaration_return
CSharpParser::set_accessor_declaration()
{
    CSharpParser_set_accessor_declaration_return retval(this);

    ANTLR_MARKER set_accessor_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal586;
    CSharpParser_accessor_modifier_return accessor_modifier585;
    typedef	CSharpParser_accessor_modifier_return RETURN_TYPE_accessor_modifier585;

    CSharpParser_accessor_body_return accessor_body587;
    typedef	CSharpParser_accessor_body_return RETURN_TYPE_accessor_body587;

    ImplTraits::TreeType* string_literal586_tree;

    /* Initialize rule variables
     */
    set_accessor_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(169)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal586       = NULL;
    accessor_modifier585.tree = NULL;

    accessor_body587.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal586_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:803:25: ( ( accessor_modifier )? 'set' accessor_body )
        // CSharp.g:804:2: ( accessor_modifier )? 'set' accessor_body
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:804:2: ( accessor_modifier )?
            {
                int alt164=2;
                switch ( this->LA(1) )
                {
                    case 142:
                    case 163:
                    case 165:
                    case 166:
                    	{
                    		alt164=1;
                    	}
                        break;
                }

                switch (alt164)
                {
            	case 1:
            	    // CSharp.g:804:2: accessor_modifier
            	    {
            	        this->followPush(FOLLOW_accessor_modifier_in_set_accessor_declaration4659);
            	        accessor_modifier585=accessor_modifier();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleset_accessor_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, accessor_modifier585.tree);

            	    }
            	    break;

                }
            }

            string_literal586 =  this->matchToken(174, &FOLLOW_174_in_set_accessor_declaration4664);
            if  (this->hasException())
            {
                goto ruleset_accessor_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal586_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal586));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal586_tree);
            }

            this->followPush(FOLLOW_accessor_body_in_set_accessor_declaration4668);
            accessor_body587=accessor_body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleset_accessor_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, accessor_body587.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleset_accessor_declarationEx; /* Prevent compiler warnings */
    ruleset_accessor_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(169, set_accessor_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end set_accessor_declaration */

/**
 * $ANTLR start accessor_modifier
 * CSharp.g:805:1: accessor_modifier : ( 'public' | 'protected' | 'private' | 'internal' );
 */
CSharpParser_accessor_modifier_return
CSharpParser::accessor_modifier()
{
    CSharpParser_accessor_modifier_return retval(this);

    ANTLR_MARKER accessor_modifier_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set588;

    ImplTraits::TreeType* set588_tree;

    /* Initialize rule variables
     */
    accessor_modifier_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(170)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set588       = NULL;
    retval.call_start_placeholder(); 


    set588_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:805:18: ( 'public' | 'protected' | 'private' | 'internal' )
        // CSharp.g:
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            set588=(const CommonTokenType*) this->LT(1);

            if ( this->LA(1) == 142 || this->LA(1) == 163 || ((this->LA(1) >= 165) && (this->LA(1) <= 166)) )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set588))
                );
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruleaccessor_modifierEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleaccessor_modifierEx; /* Prevent compiler warnings */
    ruleaccessor_modifierEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(170, accessor_modifier_StartIndex); }

    return retval;
}
/* $ANTLR end accessor_modifier */

/**
 * $ANTLR start accessor_body
 * CSharp.g:807:1: accessor_body : block ;
 */
CSharpParser_accessor_body_return
CSharpParser::accessor_body()
{
    CSharpParser_accessor_body_return retval(this);

    ANTLR_MARKER accessor_body_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_block_return block589;
    typedef	CSharpParser_block_return RETURN_TYPE_block589;


    /* Initialize rule variables
     */
    accessor_body_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(171)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    block589.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:807:14: ( block )
        // CSharp.g:808:2: block
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_block_in_accessor_body4696);
            block589=block();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleaccessor_bodyEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block589.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleaccessor_bodyEx; /* Prevent compiler warnings */
    ruleaccessor_bodyEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(171, accessor_body_StartIndex); }

    return retval;
}
/* $ANTLR end accessor_body */

/**
 * $ANTLR start event_declaration
 * CSharp.g:811:1: event_declaration : 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' ) ;
 */
CSharpParser_event_declaration_return
CSharpParser::event_declaration()
{
    CSharpParser_event_declaration_return retval(this);

    ANTLR_MARKER event_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal590;
    const CommonTokenType*    char_literal593;
    const CommonTokenType*    char_literal595;
    const CommonTokenType*    char_literal597;
    CSharpParser_type_return type591;
    typedef	CSharpParser_type_return RETURN_TYPE_type591;

    CSharpParser_member_name_return member_name592;
    typedef	CSharpParser_member_name_return RETURN_TYPE_member_name592;

    CSharpParser_event_accessor_declarations_return event_accessor_declarations594;
    typedef	CSharpParser_event_accessor_declarations_return RETURN_TYPE_event_accessor_declarations594;

    CSharpParser_variable_declarators_return variable_declarators596;
    typedef	CSharpParser_variable_declarators_return RETURN_TYPE_variable_declarators596;

    ImplTraits::TreeType* string_literal590_tree;
    ImplTraits::TreeType* char_literal593_tree;
    ImplTraits::TreeType* char_literal595_tree;
    ImplTraits::TreeType* char_literal597_tree;

    /* Initialize rule variables
     */
    event_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(172)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal590       = NULL;
    char_literal593       = NULL;
    char_literal595       = NULL;
    char_literal597       = NULL;
    type591.tree = NULL;

    member_name592.tree = NULL;

    event_accessor_declarations594.tree = NULL;

    variable_declarators596.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal590_tree   = NULL;
    char_literal593_tree   = NULL;
    char_literal595_tree   = NULL;
    char_literal597_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:811:18: ( 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' ) )
        // CSharp.g:812:2: 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' )
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal590 =  this->matchToken(125, &FOLLOW_125_in_event_declaration4706);
            if  (this->hasException())
            {
                goto ruleevent_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal590_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal590));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal590_tree);
            }

            this->followPush(FOLLOW_type_in_event_declaration4710);
            type591=type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleevent_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type591.tree);

            // CSharp.g:813:3: ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' )
            {
                int alt165=2;
                {
                    int LA165_0 = this->LA(1);
                    if ( (this->msynpred( antlr3::ClassForwarder<synpred25_CSharp>() )) && (LA165_0 == 106 || LA165_0 == 109 || LA165_0 == 111 || LA165_0 == 116 || LA165_0 == 121 || LA165_0 == 131 || LA165_0 == 140 || LA165_0 == 148 || LA165_0 == 153 || LA165_0 == 171 || LA165_0 == 175 || LA165_0 == 179 || ((LA165_0 >= 187) && (LA165_0 <= 188)) || LA165_0 == 191))
                    {
                        alt165=1;
                    }
                    else if ( (LA165_0 == IDENTIFIER || LA165_0 == 98 || ((LA165_0 >= 100) && (LA165_0 <= 101)) || ((LA165_0 >= 103) && (LA165_0 <= 104)) || LA165_0 == 108 || LA165_0 == 119 || LA165_0 == 122 || LA165_0 == 124 || LA165_0 == 128 || LA165_0 == 134 || LA165_0 == 137 || LA165_0 == 143 || ((LA165_0 >= 145) && (LA165_0 <= 146)) || ((LA165_0 >= 149) && (LA165_0 <= 150)) || LA165_0 == 154 || LA165_0 == 156 || LA165_0 == 159 || LA165_0 == 162 || LA165_0 == 164 || LA165_0 == 169 || ((LA165_0 >= 173) && (LA165_0 <= 174)) || LA165_0 == 185 || LA165_0 == 192 || LA165_0 == 196 || LA165_0 == 198))
                    {
                        {
                            int LA165_2 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred25_CSharp>() )))
                            {
                                alt165=1;
                            }
                            else if ( (true))
                            {
                                alt165=2;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 165 );
                                ex->set_state( 2 );


                                goto ruleevent_declarationEx;

                            }
                        }
                    }
                    else if ( (this->msynpred( antlr3::ClassForwarder<synpred25_CSharp>() )) && (LA165_0 == Character_literal || LA165_0 == FALSE || LA165_0 == Hex_number || LA165_0 == LT_NULL || LA165_0 == NUMBER || LA165_0 == Real_literal || LA165_0 == STRINGLITERAL || LA165_0 == TRUE || LA165_0 == Verbatim_string_literal))
                    {
                        alt165=1;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 165 );
                        ex->set_state( 0 );


                        goto ruleevent_declarationEx;

                    }
                }
                switch (alt165)
                {
            	case 1:
            	    // CSharp.g:813:4: ( member_name '{' )=> member_name '{' event_accessor_declarations '}'
            	    {
            	        this->followPush(FOLLOW_member_name_in_event_declaration4725);
            	        member_name592=member_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleevent_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, member_name592.tree);

            	        char_literal593 =  this->matchToken(199, &FOLLOW_199_in_event_declaration4729);
            	        if  (this->hasException())
            	        {
            	            goto ruleevent_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal593_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal593));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal593_tree);
            	        }

            	        this->followPush(FOLLOW_event_accessor_declarations_in_event_declaration4733);
            	        event_accessor_declarations594=event_accessor_declarations();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleevent_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, event_accessor_declarations594.tree);

            	        char_literal595 =  this->matchToken(203, &FOLLOW_203_in_event_declaration4737);
            	        if  (this->hasException())
            	        {
            	            goto ruleevent_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal595_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal595));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal595_tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // CSharp.g:814:5: variable_declarators ';'
            	    {
            	        this->followPush(FOLLOW_variable_declarators_in_event_declaration4743);
            	        variable_declarators596=variable_declarators();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleevent_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variable_declarators596.tree);

            	        char_literal597 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_event_declaration4747);
            	        if  (this->hasException())
            	        {
            	            goto ruleevent_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal597_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal597));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal597_tree);
            	        }

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleevent_declarationEx; /* Prevent compiler warnings */
    ruleevent_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(172, event_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end event_declaration */

/**
 * $ANTLR start event_modifiers
 * CSharp.g:816:1: event_modifiers : ( modifier )+ ;
 */
CSharpParser_event_modifiers_return
CSharpParser::event_modifiers()
{
    CSharpParser_event_modifiers_return retval(this);

    ANTLR_MARKER event_modifiers_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_modifier_return modifier598;
    typedef	CSharpParser_modifier_return RETURN_TYPE_modifier598;


    /* Initialize rule variables
     */
    event_modifiers_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(173)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    modifier598.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:816:16: ( ( modifier )+ )
        // CSharp.g:817:2: ( modifier )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:817:2: ( modifier )+
            {
                int cnt166=0;

                for (;;)
                {
                    int alt166=2;
            	switch ( this->LA(1) )
            	{
            	case 99:
            	case 127:
            	case 142:
            	case 152:
            	case 158:
            	case 163:
            	case 165:
            	case 166:
            	case 167:
            	case 172:
            	case 178:
            	case 190:
            	case 193:
            	case 195:
            		{
            			alt166=1;
            		}
            	    break;

            	}

            	switch (alt166)
            	{
            	    case 1:
            	        // CSharp.g:817:2: modifier
            	        {
            	            this->followPush(FOLLOW_modifier_in_event_modifiers4759);
            	            modifier598=modifier();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleevent_modifiersEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, modifier598.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt166 >= 1 )
            		{
            		    goto loop166;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleevent_modifiersEx;
            	}
            	cnt166++;
                }
                loop166: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleevent_modifiersEx; /* Prevent compiler warnings */
    ruleevent_modifiersEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(173, event_modifiers_StartIndex); }

    return retval;
}
/* $ANTLR end event_modifiers */

/**
 * $ANTLR start event_accessor_declarations
 * CSharp.g:818:1: event_accessor_declarations : ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) ) ;
 */
CSharpParser_event_accessor_declarations_return
CSharpParser::event_accessor_declarations()
{
    CSharpParser_event_accessor_declarations_return retval(this);

    ANTLR_MARKER event_accessor_declarations_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_attributes_return attributes599;
    typedef	CSharpParser_attributes_return RETURN_TYPE_attributes599;

    CSharpParser_add_accessor_declaration_return add_accessor_declaration600;
    typedef	CSharpParser_add_accessor_declaration_return RETURN_TYPE_add_accessor_declaration600;

    CSharpParser_attributes_return attributes601;
    typedef	CSharpParser_attributes_return RETURN_TYPE_attributes601;

    CSharpParser_remove_accessor_declaration_return remove_accessor_declaration602;
    typedef	CSharpParser_remove_accessor_declaration_return RETURN_TYPE_remove_accessor_declaration602;

    CSharpParser_remove_accessor_declaration_return remove_accessor_declaration603;
    typedef	CSharpParser_remove_accessor_declaration_return RETURN_TYPE_remove_accessor_declaration603;

    CSharpParser_attributes_return attributes604;
    typedef	CSharpParser_attributes_return RETURN_TYPE_attributes604;

    CSharpParser_add_accessor_declaration_return add_accessor_declaration605;
    typedef	CSharpParser_add_accessor_declaration_return RETURN_TYPE_add_accessor_declaration605;


    /* Initialize rule variables
     */
    event_accessor_declarations_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(174)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    attributes599.tree = NULL;

    add_accessor_declaration600.tree = NULL;

    attributes601.tree = NULL;

    remove_accessor_declaration602.tree = NULL;

    remove_accessor_declaration603.tree = NULL;

    attributes604.tree = NULL;

    add_accessor_declaration605.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:818:28: ( ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) ) )
        // CSharp.g:819:2: ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) )
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:819:2: ( attributes )?
            {
                int alt167=2;
                switch ( this->LA(1) )
                {
                    case 94:
                    	{
                    		alt167=1;
                    	}
                        break;
                }

                switch (alt167)
                {
            	case 1:
            	    // CSharp.g:819:2: attributes
            	    {
            	        this->followPush(FOLLOW_attributes_in_event_accessor_declarations4768);
            	        attributes599=attributes();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleevent_accessor_declarationsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attributes599.tree);

            	    }
            	    break;

                }
            }

            // CSharp.g:819:16: ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) )
            {
                int alt170=2;
                switch ( this->LA(1) )
                {
                case 100:
                	{
                		alt170=1;
                	}
                    break;
                case 169:
                	{
                		alt170=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 170 );
                    ex->set_state( 0 );


                    goto ruleevent_accessor_declarationsEx;

                }

                switch (alt170)
                {
            	case 1:
            	    // CSharp.g:819:17: ( add_accessor_declaration ( attributes )? remove_accessor_declaration )
            	    {
            	        // CSharp.g:819:17: ( add_accessor_declaration ( attributes )? remove_accessor_declaration )
            	        // CSharp.g:819:18: add_accessor_declaration ( attributes )? remove_accessor_declaration
            	        {
            	            this->followPush(FOLLOW_add_accessor_declaration_in_event_accessor_declarations4775);
            	            add_accessor_declaration600=add_accessor_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleevent_accessor_declarationsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, add_accessor_declaration600.tree);

            	            // CSharp.g:819:45: ( attributes )?
            	            {
            	                int alt168=2;
            	                switch ( this->LA(1) )
            	                {
            	                    case 94:
            	                    	{
            	                    		alt168=1;
            	                    	}
            	                        break;
            	                }

            	                switch (alt168)
            	                {
            	            	case 1:
            	            	    // CSharp.g:819:45: attributes
            	            	    {
            	            	        this->followPush(FOLLOW_attributes_in_event_accessor_declarations4779);
            	            	        attributes601=attributes();

            	            	        this->followPop();
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto ruleevent_accessor_declarationsEx;
            	            	        }
            	            	        if (this->hasFailed())
            	            	        {
            	            	            return retval;
            	            	        }

            	            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attributes601.tree);

            	            	    }
            	            	    break;

            	                }
            	            }

            	            this->followPush(FOLLOW_remove_accessor_declaration_in_event_accessor_declarations4784);
            	            remove_accessor_declaration602=remove_accessor_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleevent_accessor_declarationsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, remove_accessor_declaration602.tree);

            	        }


            	    }
            	    break;
            	case 2:
            	    // CSharp.g:820:18: ( remove_accessor_declaration ( attributes )? add_accessor_declaration )
            	    {
            	        // CSharp.g:820:18: ( remove_accessor_declaration ( attributes )? add_accessor_declaration )
            	        // CSharp.g:820:19: remove_accessor_declaration ( attributes )? add_accessor_declaration
            	        {
            	            this->followPush(FOLLOW_remove_accessor_declaration_in_event_accessor_declarations4805);
            	            remove_accessor_declaration603=remove_accessor_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleevent_accessor_declarationsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, remove_accessor_declaration603.tree);

            	            // CSharp.g:820:49: ( attributes )?
            	            {
            	                int alt169=2;
            	                switch ( this->LA(1) )
            	                {
            	                    case 94:
            	                    	{
            	                    		alt169=1;
            	                    	}
            	                        break;
            	                }

            	                switch (alt169)
            	                {
            	            	case 1:
            	            	    // CSharp.g:820:49: attributes
            	            	    {
            	            	        this->followPush(FOLLOW_attributes_in_event_accessor_declarations4809);
            	            	        attributes604=attributes();

            	            	        this->followPop();
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto ruleevent_accessor_declarationsEx;
            	            	        }
            	            	        if (this->hasFailed())
            	            	        {
            	            	            return retval;
            	            	        }

            	            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attributes604.tree);

            	            	    }
            	            	    break;

            	                }
            	            }

            	            this->followPush(FOLLOW_add_accessor_declaration_in_event_accessor_declarations4814);
            	            add_accessor_declaration605=add_accessor_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleevent_accessor_declarationsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, add_accessor_declaration605.tree);

            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleevent_accessor_declarationsEx; /* Prevent compiler warnings */
    ruleevent_accessor_declarationsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(174, event_accessor_declarations_StartIndex); }

    return retval;
}
/* $ANTLR end event_accessor_declarations */

/**
 * $ANTLR start add_accessor_declaration
 * CSharp.g:821:1: add_accessor_declaration : 'add' block ;
 */
CSharpParser_add_accessor_declaration_return
CSharpParser::add_accessor_declaration()
{
    CSharpParser_add_accessor_declaration_return retval(this);

    ANTLR_MARKER add_accessor_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal606;
    CSharpParser_block_return block607;
    typedef	CSharpParser_block_return RETURN_TYPE_block607;

    ImplTraits::TreeType* string_literal606_tree;

    /* Initialize rule variables
     */
    add_accessor_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(175)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal606       = NULL;
    block607.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal606_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:821:25: ( 'add' block )
        // CSharp.g:822:2: 'add' block
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal606 =  this->matchToken(100, &FOLLOW_100_in_add_accessor_declaration4824);
            if  (this->hasException())
            {
                goto ruleadd_accessor_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal606_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal606));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal606_tree);
            }

            this->followPush(FOLLOW_block_in_add_accessor_declaration4828);
            block607=block();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleadd_accessor_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block607.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleadd_accessor_declarationEx; /* Prevent compiler warnings */
    ruleadd_accessor_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(175, add_accessor_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end add_accessor_declaration */

/**
 * $ANTLR start remove_accessor_declaration
 * CSharp.g:823:1: remove_accessor_declaration : 'remove' block ;
 */
CSharpParser_remove_accessor_declaration_return
CSharpParser::remove_accessor_declaration()
{
    CSharpParser_remove_accessor_declaration_return retval(this);

    ANTLR_MARKER remove_accessor_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal608;
    CSharpParser_block_return block609;
    typedef	CSharpParser_block_return RETURN_TYPE_block609;

    ImplTraits::TreeType* string_literal608_tree;

    /* Initialize rule variables
     */
    remove_accessor_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(176)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal608       = NULL;
    block609.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal608_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:823:28: ( 'remove' block )
        // CSharp.g:824:2: 'remove' block
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal608 =  this->matchToken(169, &FOLLOW_169_in_remove_accessor_declaration4836);
            if  (this->hasException())
            {
                goto ruleremove_accessor_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal608_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal608));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal608_tree);
            }

            this->followPush(FOLLOW_block_in_remove_accessor_declaration4840);
            block609=block();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleremove_accessor_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block609.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleremove_accessor_declarationEx; /* Prevent compiler warnings */
    ruleremove_accessor_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(176, remove_accessor_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end remove_accessor_declaration */

/**
 * $ANTLR start enum_declaration
 * CSharp.g:829:1: enum_declaration : 'enum' identifier ( enum_base )? enum_body ( ';' )? ;
 */
CSharpParser_enum_declaration_return
CSharpParser::enum_declaration()
{
    CSharpParser_enum_declaration_return retval(this);

    ANTLR_MARKER enum_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal610;
    const CommonTokenType*    char_literal614;
    CSharpParser_identifier_return identifier611;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier611;

    CSharpParser_enum_base_return enum_base612;
    typedef	CSharpParser_enum_base_return RETURN_TYPE_enum_base612;

    CSharpParser_enum_body_return enum_body613;
    typedef	CSharpParser_enum_body_return RETURN_TYPE_enum_body613;

    ImplTraits::TreeType* string_literal610_tree;
    ImplTraits::TreeType* char_literal614_tree;

    /* Initialize rule variables
     */
    enum_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(177)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal610       = NULL;
    char_literal614       = NULL;
    identifier611.tree = NULL;

    enum_base612.tree = NULL;

    enum_body613.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal610_tree   = NULL;
    char_literal614_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:829:17: ( 'enum' identifier ( enum_base )? enum_body ( ';' )? )
        // CSharp.g:830:2: 'enum' identifier ( enum_base )? enum_body ( ';' )?
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal610 =  this->matchToken(ENUM, &FOLLOW_ENUM_in_enum_declaration4852);
            if  (this->hasException())
            {
                goto ruleenum_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal610_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal610));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal610_tree);
            }

            this->followPush(FOLLOW_identifier_in_enum_declaration4856);
            identifier611=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleenum_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier611.tree);

            // CSharp.g:830:24: ( enum_base )?
            {
                int alt171=2;
                switch ( this->LA(1) )
                {
                    case 82:
                    	{
                    		alt171=1;
                    	}
                        break;
                }

                switch (alt171)
                {
            	case 1:
            	    // CSharp.g:830:24: enum_base
            	    {
            	        this->followPush(FOLLOW_enum_base_in_enum_declaration4860);
            	        enum_base612=enum_base();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleenum_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, enum_base612.tree);

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_enum_body_in_enum_declaration4865);
            enum_body613=enum_body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleenum_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, enum_body613.tree);

            // CSharp.g:830:49: ( ';' )?
            {
                int alt172=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt172=1;
                    	}
                        break;
                }

                switch (alt172)
                {
            	case 1:
            	    // CSharp.g:830:49: ';'
            	    {
            	        char_literal614 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_enum_declaration4869);
            	        if  (this->hasException())
            	        {
            	            goto ruleenum_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal614_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal614));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal614_tree);
            	        }

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleenum_declarationEx; /* Prevent compiler warnings */
    ruleenum_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(177, enum_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end enum_declaration */

/**
 * $ANTLR start enum_base
 * CSharp.g:831:1: enum_base : ':' integral_type ;
 */
CSharpParser_enum_base_return
CSharpParser::enum_base()
{
    CSharpParser_enum_base_return retval(this);

    ANTLR_MARKER enum_base_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal615;
    CSharpParser_integral_type_return integral_type616;
    typedef	CSharpParser_integral_type_return RETURN_TYPE_integral_type616;

    ImplTraits::TreeType* char_literal615_tree;

    /* Initialize rule variables
     */
    enum_base_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(178)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal615       = NULL;
    integral_type616.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal615_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:831:10: ( ':' integral_type )
        // CSharp.g:832:2: ':' integral_type
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal615 =  this->matchToken(82, &FOLLOW_82_in_enum_base4878);
            if  (this->hasException())
            {
                goto ruleenum_baseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal615_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal615));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal615_tree);
            }

            this->followPush(FOLLOW_integral_type_in_enum_base4882);
            integral_type616=integral_type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleenum_baseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, integral_type616.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleenum_baseEx; /* Prevent compiler warnings */
    ruleenum_baseEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(178, enum_base_StartIndex); }

    return retval;
}
/* $ANTLR end enum_base */

/**
 * $ANTLR start enum_body
 * CSharp.g:833:1: enum_body : '{' ( enum_member_declarations ( ',' )? )? '}' ;
 */
CSharpParser_enum_body_return
CSharpParser::enum_body()
{
    CSharpParser_enum_body_return retval(this);

    ANTLR_MARKER enum_body_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal617;
    const CommonTokenType*    char_literal619;
    const CommonTokenType*    char_literal620;
    CSharpParser_enum_member_declarations_return enum_member_declarations618;
    typedef	CSharpParser_enum_member_declarations_return RETURN_TYPE_enum_member_declarations618;

    ImplTraits::TreeType* char_literal617_tree;
    ImplTraits::TreeType* char_literal619_tree;
    ImplTraits::TreeType* char_literal620_tree;

    /* Initialize rule variables
     */
    enum_body_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(179)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal617       = NULL;
    char_literal619       = NULL;
    char_literal620       = NULL;
    enum_member_declarations618.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal617_tree   = NULL;
    char_literal619_tree   = NULL;
    char_literal620_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:833:10: ( '{' ( enum_member_declarations ( ',' )? )? '}' )
        // CSharp.g:834:2: '{' ( enum_member_declarations ( ',' )? )? '}'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal617 =  this->matchToken(199, &FOLLOW_199_in_enum_body4890);
            if  (this->hasException())
            {
                goto ruleenum_bodyEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal617_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal617));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal617_tree);
            }

            // CSharp.g:834:6: ( enum_member_declarations ( ',' )? )?
            {
                int alt174=2;
                switch ( this->LA(1) )
                {
                    case IDENTIFIER:
                    case 94:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 108:
                    case 119:
                    case 122:
                    case 124:
                    case 128:
                    case 134:
                    case 137:
                    case 143:
                    case 145:
                    case 146:
                    case 149:
                    case 150:
                    case 154:
                    case 156:
                    case 159:
                    case 162:
                    case 164:
                    case 169:
                    case 173:
                    case 174:
                    case 185:
                    case 192:
                    case 196:
                    case 198:
                    	{
                    		alt174=1;
                    	}
                        break;
                }

                switch (alt174)
                {
            	case 1:
            	    // CSharp.g:834:7: enum_member_declarations ( ',' )?
            	    {
            	        this->followPush(FOLLOW_enum_member_declarations_in_enum_body4893);
            	        enum_member_declarations618=enum_member_declarations();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleenum_bodyEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, enum_member_declarations618.tree);

            	        // CSharp.g:834:32: ( ',' )?
            	        {
            	            int alt173=2;
            	            switch ( this->LA(1) )
            	            {
            	                case 77:
            	                	{
            	                		alt173=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt173)
            	            {
            	        	case 1:
            	        	    // CSharp.g:834:32: ','
            	        	    {
            	        	        char_literal619 =  this->matchToken(77, &FOLLOW_77_in_enum_body4895);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleenum_bodyEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        char_literal619_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal619));
            	        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal619_tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            char_literal620 =  this->matchToken(203, &FOLLOW_203_in_enum_body4902);
            if  (this->hasException())
            {
                goto ruleenum_bodyEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal620_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal620));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal620_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleenum_bodyEx; /* Prevent compiler warnings */
    ruleenum_bodyEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(179, enum_body_StartIndex); }

    return retval;
}
/* $ANTLR end enum_body */

/**
 * $ANTLR start enum_member_declarations
 * CSharp.g:835:1: enum_member_declarations : enum_member_declaration ( ',' enum_member_declaration )* ;
 */
CSharpParser_enum_member_declarations_return
CSharpParser::enum_member_declarations()
{
    CSharpParser_enum_member_declarations_return retval(this);

    ANTLR_MARKER enum_member_declarations_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal622;
    CSharpParser_enum_member_declaration_return enum_member_declaration621;
    typedef	CSharpParser_enum_member_declaration_return RETURN_TYPE_enum_member_declaration621;

    CSharpParser_enum_member_declaration_return enum_member_declaration623;
    typedef	CSharpParser_enum_member_declaration_return RETURN_TYPE_enum_member_declaration623;

    ImplTraits::TreeType* char_literal622_tree;

    /* Initialize rule variables
     */
    enum_member_declarations_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(180)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal622       = NULL;
    enum_member_declaration621.tree = NULL;

    enum_member_declaration623.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal622_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:835:25: ( enum_member_declaration ( ',' enum_member_declaration )* )
        // CSharp.g:836:2: enum_member_declaration ( ',' enum_member_declaration )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_enum_member_declaration_in_enum_member_declarations4910);
            enum_member_declaration621=enum_member_declaration();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleenum_member_declarationsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, enum_member_declaration621.tree);

            // CSharp.g:836:26: ( ',' enum_member_declaration )*

            for (;;)
            {
                int alt175=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		switch ( this->LA(2) )
                		{
                		case IDENTIFIER:
                		case 94:
                		case 98:
                		case 100:
                		case 101:
                		case 103:
                		case 104:
                		case 108:
                		case 119:
                		case 122:
                		case 124:
                		case 128:
                		case 134:
                		case 137:
                		case 143:
                		case 145:
                		case 146:
                		case 149:
                		case 150:
                		case 154:
                		case 156:
                		case 159:
                		case 162:
                		case 164:
                		case 169:
                		case 173:
                		case 174:
                		case 185:
                		case 192:
                		case 196:
                		case 198:
                			{
                				alt175=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt175)
                {
            	case 1:
            	    // CSharp.g:836:27: ',' enum_member_declaration
            	    {
            	        char_literal622 =  this->matchToken(77, &FOLLOW_77_in_enum_member_declarations4913);
            	        if  (this->hasException())
            	        {
            	            goto ruleenum_member_declarationsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal622_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal622));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal622_tree);
            	        }

            	        this->followPush(FOLLOW_enum_member_declaration_in_enum_member_declarations4915);
            	        enum_member_declaration623=enum_member_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleenum_member_declarationsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, enum_member_declaration623.tree);

            	    }
            	    break;

            	default:
            	    goto loop175;	/* break out of the loop */
            	    break;
                }
            }
            loop175: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleenum_member_declarationsEx; /* Prevent compiler warnings */
    ruleenum_member_declarationsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(180, enum_member_declarations_StartIndex); }

    return retval;
}
/* $ANTLR end enum_member_declarations */

/**
 * $ANTLR start enum_member_declaration
 * CSharp.g:837:1: enum_member_declaration : ( attributes )? identifier ( '=' expression )? ;
 */
CSharpParser_enum_member_declaration_return
CSharpParser::enum_member_declaration()
{
    CSharpParser_enum_member_declaration_return retval(this);

    ANTLR_MARKER enum_member_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal626;
    CSharpParser_attributes_return attributes624;
    typedef	CSharpParser_attributes_return RETURN_TYPE_attributes624;

    CSharpParser_identifier_return identifier625;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier625;

    CSharpParser_expression_return expression627;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression627;

    ImplTraits::TreeType* char_literal626_tree;

    /* Initialize rule variables
     */
    enum_member_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(181)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal626       = NULL;
    attributes624.tree = NULL;

    identifier625.tree = NULL;

    expression627.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal626_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:837:24: ( ( attributes )? identifier ( '=' expression )? )
        // CSharp.g:838:2: ( attributes )? identifier ( '=' expression )?
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:838:2: ( attributes )?
            {
                int alt176=2;
                switch ( this->LA(1) )
                {
                    case 94:
                    	{
                    		alt176=1;
                    	}
                        break;
                }

                switch (alt176)
                {
            	case 1:
            	    // CSharp.g:838:2: attributes
            	    {
            	        this->followPush(FOLLOW_attributes_in_enum_member_declaration4925);
            	        attributes624=attributes();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleenum_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attributes624.tree);

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_identifier_in_enum_member_declaration4930);
            identifier625=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleenum_member_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier625.tree);

            // CSharp.g:838:29: ( '=' expression )?
            {
                int alt177=2;
                switch ( this->LA(1) )
                {
                    case 88:
                    	{
                    		alt177=1;
                    	}
                        break;
                }

                switch (alt177)
                {
            	case 1:
            	    // CSharp.g:838:30: '=' expression
            	    {
            	        char_literal626 =  this->matchToken(88, &FOLLOW_88_in_enum_member_declaration4935);
            	        if  (this->hasException())
            	        {
            	            goto ruleenum_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal626_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal626));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal626_tree);
            	        }

            	        this->followPush(FOLLOW_expression_in_enum_member_declaration4939);
            	        expression627=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleenum_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression627.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleenum_member_declarationEx; /* Prevent compiler warnings */
    ruleenum_member_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(181, enum_member_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end enum_member_declaration */

/**
 * $ANTLR start integral_type
 * CSharp.g:843:1: integral_type : ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' );
 */
CSharpParser_integral_type_return
CSharpParser::integral_type()
{
    CSharpParser_integral_type_return retval(this);

    ANTLR_MARKER integral_type_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set628;

    ImplTraits::TreeType* set628_tree;

    /* Initialize rule variables
     */
    integral_type_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(182)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set628       = NULL;
    retval.call_start_placeholder(); 


    set628_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:843:14: ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' )
        // CSharp.g:
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            set628=(const CommonTokenType*) this->LT(1);

            if ( this->LA(1) == 109 || this->LA(1) == 111 || this->LA(1) == 140 || this->LA(1) == 148 || this->LA(1) == 171 || this->LA(1) == 175 || ((this->LA(1) >= 187) && (this->LA(1) <= 188)) || this->LA(1) == 191 )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set628))
                );
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruleintegral_typeEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleintegral_typeEx; /* Prevent compiler warnings */
    ruleintegral_typeEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(182, integral_type_StartIndex); }

    return retval;
}
/* $ANTLR end integral_type */

/**
 * $ANTLR start delegate_declaration
 * CSharp.g:847:1: delegate_declaration : 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' ;
 */
CSharpParser_delegate_declaration_return
CSharpParser::delegate_declaration()
{
    CSharpParser_delegate_declaration_return retval(this);

    ANTLR_MARKER delegate_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal629;
    const CommonTokenType*    char_literal633;
    const CommonTokenType*    char_literal635;
    const CommonTokenType*    char_literal637;
    CSharpParser_return_type_return return_type630;
    typedef	CSharpParser_return_type_return RETURN_TYPE_return_type630;

    CSharpParser_identifier_return identifier631;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier631;

    CSharpParser_variant_generic_parameter_list_return variant_generic_parameter_list632;
    typedef	CSharpParser_variant_generic_parameter_list_return RETURN_TYPE_variant_generic_parameter_list632;

    CSharpParser_formal_parameter_list_return formal_parameter_list634;
    typedef	CSharpParser_formal_parameter_list_return RETURN_TYPE_formal_parameter_list634;

    CSharpParser_type_parameter_constraints_clauses_return type_parameter_constraints_clauses636;
    typedef	CSharpParser_type_parameter_constraints_clauses_return RETURN_TYPE_type_parameter_constraints_clauses636;

    ImplTraits::TreeType* string_literal629_tree;
    ImplTraits::TreeType* char_literal633_tree;
    ImplTraits::TreeType* char_literal635_tree;
    ImplTraits::TreeType* char_literal637_tree;

    /* Initialize rule variables
     */
    delegate_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(183)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal629       = NULL;
    char_literal633       = NULL;
    char_literal635       = NULL;
    char_literal637       = NULL;
    return_type630.tree = NULL;

    identifier631.tree = NULL;

    variant_generic_parameter_list632.tree = NULL;

    formal_parameter_list634.tree = NULL;

    type_parameter_constraints_clauses636.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal629_tree   = NULL;
    char_literal633_tree   = NULL;
    char_literal635_tree   = NULL;
    char_literal637_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:847:21: ( 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' )
        // CSharp.g:848:2: 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal629 =  this->matchToken(118, &FOLLOW_118_in_delegate_declaration4996);
            if  (this->hasException())
            {
                goto ruledelegate_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal629_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal629));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal629_tree);
            }

            this->followPush(FOLLOW_return_type_in_delegate_declaration5000);
            return_type630=return_type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledelegate_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, return_type630.tree);

            this->followPush(FOLLOW_identifier_in_delegate_declaration5004);
            identifier631=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledelegate_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier631.tree);

            // CSharp.g:848:41: ( variant_generic_parameter_list )?
            {
                int alt178=2;
                switch ( this->LA(1) )
                {
                    case 84:
                    	{
                    		alt178=1;
                    	}
                        break;
                }

                switch (alt178)
                {
            	case 1:
            	    // CSharp.g:848:41: variant_generic_parameter_list
            	    {
            	        this->followPush(FOLLOW_variant_generic_parameter_list_in_delegate_declaration5007);
            	        variant_generic_parameter_list632=variant_generic_parameter_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledelegate_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variant_generic_parameter_list632.tree);

            	    }
            	    break;

                }
            }

            char_literal633 =  this->matchToken(71, &FOLLOW_71_in_delegate_declaration5015);
            if  (this->hasException())
            {
                goto ruledelegate_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal633_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal633));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal633_tree);
            }

            // CSharp.g:849:9: ( formal_parameter_list )?
            {
                int alt179=2;
                switch ( this->LA(1) )
                {
                    case IDENTIFIER:
                    case 94:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 106:
                    case 108:
                    case 109:
                    case 111:
                    case 116:
                    case 119:
                    case 121:
                    case 122:
                    case 124:
                    case 128:
                    case 131:
                    case 134:
                    case 137:
                    case 140:
                    case 143:
                    case 145:
                    case 146:
                    case 148:
                    case 149:
                    case 150:
                    case 153:
                    case 154:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 162:
                    case 164:
                    case 168:
                    case 169:
                    case 171:
                    case 173:
                    case 174:
                    case 175:
                    case 179:
                    case 182:
                    case 185:
                    case 187:
                    case 188:
                    case 191:
                    case 192:
                    case 194:
                    case 196:
                    case 198:
                    	{
                    		alt179=1;
                    	}
                        break;
                }

                switch (alt179)
                {
            	case 1:
            	    // CSharp.g:849:9: formal_parameter_list
            	    {
            	        this->followPush(FOLLOW_formal_parameter_list_in_delegate_declaration5019);
            	        formal_parameter_list634=formal_parameter_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledelegate_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, formal_parameter_list634.tree);

            	    }
            	    break;

                }
            }

            char_literal635 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_delegate_declaration5024);
            if  (this->hasException())
            {
                goto ruledelegate_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal635_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal635));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal635_tree);
            }

            // CSharp.g:849:40: ( type_parameter_constraints_clauses )?
            {
                int alt180=2;
                switch ( this->LA(1) )
                {
                    case 196:
                    	{
                    		alt180=1;
                    	}
                        break;
                }

                switch (alt180)
                {
            	case 1:
            	    // CSharp.g:849:40: type_parameter_constraints_clauses
            	    {
            	        this->followPush(FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration5028);
            	        type_parameter_constraints_clauses636=type_parameter_constraints_clauses();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledelegate_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_parameter_constraints_clauses636.tree);

            	    }
            	    break;

                }
            }

            char_literal637 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_delegate_declaration5033);
            if  (this->hasException())
            {
                goto ruledelegate_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal637_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal637));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal637_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruledelegate_declarationEx; /* Prevent compiler warnings */
    ruledelegate_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(183, delegate_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end delegate_declaration */

/**
 * $ANTLR start delegate_modifiers
 * CSharp.g:850:1: delegate_modifiers : ( modifier )+ ;
 */
CSharpParser_delegate_modifiers_return
CSharpParser::delegate_modifiers()
{
    CSharpParser_delegate_modifiers_return retval(this);

    ANTLR_MARKER delegate_modifiers_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_modifier_return modifier638;
    typedef	CSharpParser_modifier_return RETURN_TYPE_modifier638;


    /* Initialize rule variables
     */
    delegate_modifiers_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(184)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    modifier638.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:850:19: ( ( modifier )+ )
        // CSharp.g:851:2: ( modifier )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:851:2: ( modifier )+
            {
                int cnt181=0;

                for (;;)
                {
                    int alt181=2;
            	switch ( this->LA(1) )
            	{
            	case 99:
            	case 127:
            	case 142:
            	case 152:
            	case 158:
            	case 163:
            	case 165:
            	case 166:
            	case 167:
            	case 172:
            	case 178:
            	case 190:
            	case 193:
            	case 195:
            		{
            			alt181=1;
            		}
            	    break;

            	}

            	switch (alt181)
            	{
            	    case 1:
            	        // CSharp.g:851:2: modifier
            	        {
            	            this->followPush(FOLLOW_modifier_in_delegate_modifiers5041);
            	            modifier638=modifier();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruledelegate_modifiersEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, modifier638.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt181 >= 1 )
            		{
            		    goto loop181;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruledelegate_modifiersEx;
            	}
            	cnt181++;
                }
                loop181: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruledelegate_modifiersEx; /* Prevent compiler warnings */
    ruledelegate_modifiersEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(184, delegate_modifiers_StartIndex); }

    return retval;
}
/* $ANTLR end delegate_modifiers */

/**
 * $ANTLR start variant_generic_parameter_list
 * CSharp.g:853:1: variant_generic_parameter_list : '<' variant_type_parameters '>' ;
 */
CSharpParser_variant_generic_parameter_list_return
CSharpParser::variant_generic_parameter_list()
{
    CSharpParser_variant_generic_parameter_list_return retval(this);

    ANTLR_MARKER variant_generic_parameter_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal639;
    const CommonTokenType*    char_literal641;
    CSharpParser_variant_type_parameters_return variant_type_parameters640;
    typedef	CSharpParser_variant_type_parameters_return RETURN_TYPE_variant_type_parameters640;

    ImplTraits::TreeType* char_literal639_tree;
    ImplTraits::TreeType* char_literal641_tree;

    /* Initialize rule variables
     */
    variant_generic_parameter_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(185)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal639       = NULL;
    char_literal641       = NULL;
    variant_type_parameters640.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal639_tree   = NULL;
    char_literal641_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:853:31: ( '<' variant_type_parameters '>' )
        // CSharp.g:854:2: '<' variant_type_parameters '>'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal639 =  this->matchToken(84, &FOLLOW_84_in_variant_generic_parameter_list5051);
            if  (this->hasException())
            {
                goto rulevariant_generic_parameter_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal639_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal639));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal639_tree);
            }

            this->followPush(FOLLOW_variant_type_parameters_in_variant_generic_parameter_list5055);
            variant_type_parameters640=variant_type_parameters();

            this->followPop();
            if  (this->hasException())
            {
                goto rulevariant_generic_parameter_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variant_type_parameters640.tree);

            char_literal641 =  this->matchToken(GT, &FOLLOW_GT_in_variant_generic_parameter_list5059);
            if  (this->hasException())
            {
                goto rulevariant_generic_parameter_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal641_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal641));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal641_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulevariant_generic_parameter_listEx; /* Prevent compiler warnings */
    rulevariant_generic_parameter_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(185, variant_generic_parameter_list_StartIndex); }

    return retval;
}
/* $ANTLR end variant_generic_parameter_list */

/**
 * $ANTLR start variant_type_parameters
 * CSharp.g:855:1: variant_type_parameters : variant_type_variable_name ( ',' variant_type_variable_name )* ;
 */
CSharpParser_variant_type_parameters_return
CSharpParser::variant_type_parameters()
{
    CSharpParser_variant_type_parameters_return retval(this);

    ANTLR_MARKER variant_type_parameters_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal643;
    CSharpParser_variant_type_variable_name_return variant_type_variable_name642;
    typedef	CSharpParser_variant_type_variable_name_return RETURN_TYPE_variant_type_variable_name642;

    CSharpParser_variant_type_variable_name_return variant_type_variable_name644;
    typedef	CSharpParser_variant_type_variable_name_return RETURN_TYPE_variant_type_variable_name644;

    ImplTraits::TreeType* char_literal643_tree;

    /* Initialize rule variables
     */
    variant_type_parameters_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(186)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal643       = NULL;
    variant_type_variable_name642.tree = NULL;

    variant_type_variable_name644.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal643_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:855:24: ( variant_type_variable_name ( ',' variant_type_variable_name )* )
        // CSharp.g:856:2: variant_type_variable_name ( ',' variant_type_variable_name )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_variant_type_variable_name_in_variant_type_parameters5067);
            variant_type_variable_name642=variant_type_variable_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulevariant_type_parametersEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variant_type_variable_name642.tree);

            // CSharp.g:856:29: ( ',' variant_type_variable_name )*

            for (;;)
            {
                int alt182=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt182=1;
                	}
                    break;

                }

                switch (alt182)
                {
            	case 1:
            	    // CSharp.g:856:30: ',' variant_type_variable_name
            	    {
            	        char_literal643 =  this->matchToken(77, &FOLLOW_77_in_variant_type_parameters5070);
            	        if  (this->hasException())
            	        {
            	            goto rulevariant_type_parametersEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal643_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal643));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal643_tree);
            	        }

            	        this->followPush(FOLLOW_variant_type_variable_name_in_variant_type_parameters5072);
            	        variant_type_variable_name644=variant_type_variable_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulevariant_type_parametersEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variant_type_variable_name644.tree);

            	    }
            	    break;

            	default:
            	    goto loop182;	/* break out of the loop */
            	    break;
                }
            }
            loop182: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulevariant_type_parametersEx; /* Prevent compiler warnings */
    rulevariant_type_parametersEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(186, variant_type_parameters_StartIndex); }

    return retval;
}
/* $ANTLR end variant_type_parameters */

/**
 * $ANTLR start variant_type_variable_name
 * CSharp.g:857:1: variant_type_variable_name : ( attributes )? ( variance_annotation )? type_variable_name ;
 */
CSharpParser_variant_type_variable_name_return
CSharpParser::variant_type_variable_name()
{
    CSharpParser_variant_type_variable_name_return retval(this);

    ANTLR_MARKER variant_type_variable_name_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_attributes_return attributes645;
    typedef	CSharpParser_attributes_return RETURN_TYPE_attributes645;

    CSharpParser_variance_annotation_return variance_annotation646;
    typedef	CSharpParser_variance_annotation_return RETURN_TYPE_variance_annotation646;

    CSharpParser_type_variable_name_return type_variable_name647;
    typedef	CSharpParser_type_variable_name_return RETURN_TYPE_type_variable_name647;


    /* Initialize rule variables
     */
    variant_type_variable_name_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(187)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    attributes645.tree = NULL;

    variance_annotation646.tree = NULL;

    type_variable_name647.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:857:27: ( ( attributes )? ( variance_annotation )? type_variable_name )
        // CSharp.g:858:2: ( attributes )? ( variance_annotation )? type_variable_name
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:858:2: ( attributes )?
            {
                int alt183=2;
                switch ( this->LA(1) )
                {
                    case 94:
                    	{
                    		alt183=1;
                    	}
                        break;
                }

                switch (alt183)
                {
            	case 1:
            	    // CSharp.g:858:2: attributes
            	    {
            	        this->followPush(FOLLOW_attributes_in_variant_type_variable_name5082);
            	        attributes645=attributes();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulevariant_type_variable_nameEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attributes645.tree);

            	    }
            	    break;

                }
            }

            // CSharp.g:858:16: ( variance_annotation )?
            {
                int alt184=2;
                switch ( this->LA(1) )
                {
                    case 139:
                    case 157:
                    	{
                    		alt184=1;
                    	}
                        break;
                }

                switch (alt184)
                {
            	case 1:
            	    // CSharp.g:858:16: variance_annotation
            	    {
            	        this->followPush(FOLLOW_variance_annotation_in_variant_type_variable_name5087);
            	        variance_annotation646=variance_annotation();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulevariant_type_variable_nameEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variance_annotation646.tree);

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_type_variable_name_in_variant_type_variable_name5092);
            type_variable_name647=type_variable_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulevariant_type_variable_nameEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_variable_name647.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulevariant_type_variable_nameEx; /* Prevent compiler warnings */
    rulevariant_type_variable_nameEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(187, variant_type_variable_name_StartIndex); }

    return retval;
}
/* $ANTLR end variant_type_variable_name */

/**
 * $ANTLR start variance_annotation
 * CSharp.g:859:1: variance_annotation : ( 'in' | 'out' );
 */
CSharpParser_variance_annotation_return
CSharpParser::variance_annotation()
{
    CSharpParser_variance_annotation_return retval(this);

    ANTLR_MARKER variance_annotation_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set648;

    ImplTraits::TreeType* set648_tree;

    /* Initialize rule variables
     */
    variance_annotation_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(188)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set648       = NULL;
    retval.call_start_placeholder(); 


    set648_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:859:20: ( 'in' | 'out' )
        // CSharp.g:
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            set648=(const CommonTokenType*) this->LT(1);

            if ( this->LA(1) == 139 || this->LA(1) == 157 )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set648))
                );
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulevariance_annotationEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulevariance_annotationEx; /* Prevent compiler warnings */
    rulevariance_annotationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(188, variance_annotation_StartIndex); }

    return retval;
}
/* $ANTLR end variance_annotation */

/**
 * $ANTLR start type_parameter_constraints_clauses
 * CSharp.g:862:1: type_parameter_constraints_clauses : type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )* ;
 */
CSharpParser_type_parameter_constraints_clauses_return
CSharpParser::type_parameter_constraints_clauses()
{
    CSharpParser_type_parameter_constraints_clauses_return retval(this);

    ANTLR_MARKER type_parameter_constraints_clauses_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal650;
    CSharpParser_type_parameter_constraints_clause_return type_parameter_constraints_clause649;
    typedef	CSharpParser_type_parameter_constraints_clause_return RETURN_TYPE_type_parameter_constraints_clause649;

    CSharpParser_type_parameter_constraints_clause_return type_parameter_constraints_clause651;
    typedef	CSharpParser_type_parameter_constraints_clause_return RETURN_TYPE_type_parameter_constraints_clause651;

    ImplTraits::TreeType* char_literal650_tree;

    /* Initialize rule variables
     */
    type_parameter_constraints_clauses_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(189)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal650       = NULL;
    type_parameter_constraints_clause649.tree = NULL;

    type_parameter_constraints_clause651.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal650_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:862:35: ( type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )* )
        // CSharp.g:863:2: type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses5113);
            type_parameter_constraints_clause649=type_parameter_constraints_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletype_parameter_constraints_clausesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_parameter_constraints_clause649.tree);

            // CSharp.g:863:38: ( ',' type_parameter_constraints_clause )*

            for (;;)
            {
                int alt185=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt185=1;
                	}
                    break;

                }

                switch (alt185)
                {
            	case 1:
            	    // CSharp.g:863:39: ',' type_parameter_constraints_clause
            	    {
            	        char_literal650 =  this->matchToken(77, &FOLLOW_77_in_type_parameter_constraints_clauses5118);
            	        if  (this->hasException())
            	        {
            	            goto ruletype_parameter_constraints_clausesEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal650_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal650));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal650_tree);
            	        }

            	        this->followPush(FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses5122);
            	        type_parameter_constraints_clause651=type_parameter_constraints_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletype_parameter_constraints_clausesEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_parameter_constraints_clause651.tree);

            	    }
            	    break;

            	default:
            	    goto loop185;	/* break out of the loop */
            	    break;
                }
            }
            loop185: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruletype_parameter_constraints_clausesEx; /* Prevent compiler warnings */
    ruletype_parameter_constraints_clausesEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(189, type_parameter_constraints_clauses_StartIndex); }

    return retval;
}
/* $ANTLR end type_parameter_constraints_clauses */

/**
 * $ANTLR start type_parameter_constraints_clause
 * CSharp.g:864:1: type_parameter_constraints_clause : 'where' type_variable_name ':' type_parameter_constraint_list ;
 */
CSharpParser_type_parameter_constraints_clause_return
CSharpParser::type_parameter_constraints_clause()
{
    CSharpParser_type_parameter_constraints_clause_return retval(this);

    ANTLR_MARKER type_parameter_constraints_clause_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal652;
    const CommonTokenType*    char_literal654;
    CSharpParser_type_variable_name_return type_variable_name653;
    typedef	CSharpParser_type_variable_name_return RETURN_TYPE_type_variable_name653;

    CSharpParser_type_parameter_constraint_list_return type_parameter_constraint_list655;
    typedef	CSharpParser_type_parameter_constraint_list_return RETURN_TYPE_type_parameter_constraint_list655;

    ImplTraits::TreeType* string_literal652_tree;
    ImplTraits::TreeType* char_literal654_tree;

    /* Initialize rule variables
     */
    type_parameter_constraints_clause_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(190)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal652       = NULL;
    char_literal654       = NULL;
    type_variable_name653.tree = NULL;

    type_parameter_constraint_list655.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal652_tree   = NULL;
    char_literal654_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:864:34: ( 'where' type_variable_name ':' type_parameter_constraint_list )
        // CSharp.g:865:2: 'where' type_variable_name ':' type_parameter_constraint_list
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal652 =  this->matchToken(196, &FOLLOW_196_in_type_parameter_constraints_clause5132);
            if  (this->hasException())
            {
                goto ruletype_parameter_constraints_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal652_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal652));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal652_tree);
            }

            this->followPush(FOLLOW_type_variable_name_in_type_parameter_constraints_clause5136);
            type_variable_name653=type_variable_name();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletype_parameter_constraints_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_variable_name653.tree);

            char_literal654 =  this->matchToken(82, &FOLLOW_82_in_type_parameter_constraints_clause5140);
            if  (this->hasException())
            {
                goto ruletype_parameter_constraints_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal654_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal654));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal654_tree);
            }

            this->followPush(FOLLOW_type_parameter_constraint_list_in_type_parameter_constraints_clause5144);
            type_parameter_constraint_list655=type_parameter_constraint_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletype_parameter_constraints_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_parameter_constraint_list655.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruletype_parameter_constraints_clauseEx; /* Prevent compiler warnings */
    ruletype_parameter_constraints_clauseEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(190, type_parameter_constraints_clause_StartIndex); }

    return retval;
}
/* $ANTLR end type_parameter_constraints_clause */

/**
 * $ANTLR start type_parameter_constraint_list
 * CSharp.g:867:1: type_parameter_constraint_list : ( ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )? | secondary_constraint_list ( ',' constructor_constraint )? | constructor_constraint );
 */
CSharpParser_type_parameter_constraint_list_return
CSharpParser::type_parameter_constraint_list()
{
    CSharpParser_type_parameter_constraint_list_return retval(this);

    ANTLR_MARKER type_parameter_constraint_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set656;
    const CommonTokenType*    char_literal657;
    const CommonTokenType*    char_literal659;
    const CommonTokenType*    char_literal662;
    CSharpParser_secondary_constraint_list_return secondary_constraint_list658;
    typedef	CSharpParser_secondary_constraint_list_return RETURN_TYPE_secondary_constraint_list658;

    CSharpParser_constructor_constraint_return constructor_constraint660;
    typedef	CSharpParser_constructor_constraint_return RETURN_TYPE_constructor_constraint660;

    CSharpParser_secondary_constraint_list_return secondary_constraint_list661;
    typedef	CSharpParser_secondary_constraint_list_return RETURN_TYPE_secondary_constraint_list661;

    CSharpParser_constructor_constraint_return constructor_constraint663;
    typedef	CSharpParser_constructor_constraint_return RETURN_TYPE_constructor_constraint663;

    CSharpParser_constructor_constraint_return constructor_constraint664;
    typedef	CSharpParser_constructor_constraint_return RETURN_TYPE_constructor_constraint664;

    ImplTraits::TreeType* set656_tree;
    ImplTraits::TreeType* char_literal657_tree;
    ImplTraits::TreeType* char_literal659_tree;
    ImplTraits::TreeType* char_literal662_tree;

    /* Initialize rule variables
     */
    type_parameter_constraint_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(191)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set656       = NULL;
    char_literal657       = NULL;
    char_literal659       = NULL;
    char_literal662       = NULL;
    secondary_constraint_list658.tree = NULL;

    constructor_constraint660.tree = NULL;

    secondary_constraint_list661.tree = NULL;

    constructor_constraint663.tree = NULL;

    constructor_constraint664.tree = NULL;
    retval.call_start_placeholder(); 


    set656_tree   = NULL;
    char_literal657_tree   = NULL;
    char_literal659_tree   = NULL;
    char_literal662_tree   = NULL;


    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:867:31: ( ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )? | secondary_constraint_list ( ',' constructor_constraint )? | constructor_constraint )

            ANTLR_UINT32 alt189;

            alt189=3;

            switch ( this->LA(1) )
            {
            case 113:
            case 180:
            	{
            		alt189=1;
            	}
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 134:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
            	{
            		alt189=2;
            	}
                break;
            case 152:
            	{
            		alt189=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 189 );
                ex->set_state( 0 );


                goto ruletype_parameter_constraint_listEx;

            }

            switch (alt189)
            {
        	case 1:
        	    // CSharp.g:868:5: ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )?
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        set656=(const CommonTokenType*) this->LT(1);

        	        if ( this->LA(1) == 113 || this->LA(1) == 180 )
        	        {
        	            this->consume();
        	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
        	            (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set656))
        	            );
        	            this->set_perror_recovery(false);
        	             this->set_failedflag(false); 

        	        }
        	        else
        	        {
        	            if (this->get_backtracking()>0)
        	            {
        	                this->set_failedflag( true );
        	                return retval;
        	            }

        	            new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            this->get_exception()->set_expectingSet(NULL);

        	            goto ruletype_parameter_constraint_listEx;
        	        }


        	        // CSharp.g:868:28: ( ',' secondary_constraint_list )?
        	        {
        	            int alt186=2;
        	            switch ( this->LA(1) )
        	            {
        	                case 77:
        	                	{
        	                		switch ( this->LA(2) )
        	                		{
        	                		    case 196:
        	                		    	{
        	                		    		switch ( this->LA(3) )
        	                		    		{
        	                		    		    case DOT:
        	                		    		    case SEMI:
        	                		    		    case 77:
        	                		    		    case 83:
        	                		    		    case 84:
        	                		    		    case 199:
        	                		    		    	{
        	                		    		    		alt186=1;
        	                		    		    	}
        	                		    		        break;
        	                		    		}

        	                		    	}
        	                		        break;
        	                		    case IDENTIFIER:
        	                		    case 98:
        	                		    case 100:
        	                		    case 101:
        	                		    case 103:
        	                		    case 104:
        	                		    case 108:
        	                		    case 119:
        	                		    case 122:
        	                		    case 124:
        	                		    case 128:
        	                		    case 134:
        	                		    case 137:
        	                		    case 143:
        	                		    case 145:
        	                		    case 146:
        	                		    case 149:
        	                		    case 150:
        	                		    case 154:
        	                		    case 156:
        	                		    case 159:
        	                		    case 162:
        	                		    case 164:
        	                		    case 169:
        	                		    case 173:
        	                		    case 174:
        	                		    case 185:
        	                		    case 192:
        	                		    case 198:
        	                		    	{
        	                		    		alt186=1;
        	                		    	}
        	                		        break;
        	                		}

        	                	}
        	                    break;
        	            }

        	            switch (alt186)
        	            {
        	        	case 1:
        	        	    // CSharp.g:868:29: ',' secondary_constraint_list
        	        	    {
        	        	        char_literal657 =  this->matchToken(77, &FOLLOW_77_in_type_parameter_constraint_list5218);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruletype_parameter_constraint_listEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        char_literal657_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal657));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal657_tree);
        	        	        }

        	        	        this->followPush(FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list5222);
        	        	        secondary_constraint_list658=secondary_constraint_list();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruletype_parameter_constraint_listEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, secondary_constraint_list658.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // CSharp.g:868:65: ( ',' constructor_constraint )?
        	        {
        	            int alt187=2;
        	            switch ( this->LA(1) )
        	            {
        	                case 77:
        	                	{
        	                		switch ( this->LA(2) )
        	                		{
        	                		    case 152:
        	                		    	{
        	                		    		alt187=1;
        	                		    	}
        	                		        break;
        	                		}

        	                	}
        	                    break;
        	            }

        	            switch (alt187)
        	            {
        	        	case 1:
        	        	    // CSharp.g:868:66: ',' constructor_constraint
        	        	    {
        	        	        char_literal659 =  this->matchToken(77, &FOLLOW_77_in_type_parameter_constraint_list5229);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruletype_parameter_constraint_listEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        char_literal659_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal659));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal659_tree);
        	        	        }

        	        	        this->followPush(FOLLOW_constructor_constraint_in_type_parameter_constraint_list5233);
        	        	        constructor_constraint660=constructor_constraint();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruletype_parameter_constraint_listEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constructor_constraint660.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:869:4: secondary_constraint_list ( ',' constructor_constraint )?
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list5240);
        	        secondary_constraint_list661=secondary_constraint_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletype_parameter_constraint_listEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, secondary_constraint_list661.tree);

        	        // CSharp.g:869:32: ( ',' constructor_constraint )?
        	        {
        	            int alt188=2;
        	            switch ( this->LA(1) )
        	            {
        	                case 77:
        	                	{
        	                		switch ( this->LA(2) )
        	                		{
        	                		    case 152:
        	                		    	{
        	                		    		alt188=1;
        	                		    	}
        	                		        break;
        	                		}

        	                	}
        	                    break;
        	            }

        	            switch (alt188)
        	            {
        	        	case 1:
        	        	    // CSharp.g:869:33: ',' constructor_constraint
        	        	    {
        	        	        char_literal662 =  this->matchToken(77, &FOLLOW_77_in_type_parameter_constraint_list5245);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruletype_parameter_constraint_listEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        char_literal662_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal662));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal662_tree);
        	        	        }

        	        	        this->followPush(FOLLOW_constructor_constraint_in_type_parameter_constraint_list5249);
        	        	        constructor_constraint663=constructor_constraint();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruletype_parameter_constraint_listEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constructor_constraint663.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 3:
        	    // CSharp.g:870:4: constructor_constraint
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_constructor_constraint_in_type_parameter_constraint_list5256);
        	        constructor_constraint664=constructor_constraint();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletype_parameter_constraint_listEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constructor_constraint664.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruletype_parameter_constraint_listEx; /* Prevent compiler warnings */
    ruletype_parameter_constraint_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(191, type_parameter_constraint_list_StartIndex); }

    return retval;
}
/* $ANTLR end type_parameter_constraint_list */

/**
 * $ANTLR start secondary_constraint_list
 * CSharp.g:875:1: secondary_constraint_list : secondary_constraint ( ',' secondary_constraint )* ;
 */
CSharpParser_secondary_constraint_list_return
CSharpParser::secondary_constraint_list()
{
    CSharpParser_secondary_constraint_list_return retval(this);

    ANTLR_MARKER secondary_constraint_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal666;
    CSharpParser_secondary_constraint_return secondary_constraint665;
    typedef	CSharpParser_secondary_constraint_return RETURN_TYPE_secondary_constraint665;

    CSharpParser_secondary_constraint_return secondary_constraint667;
    typedef	CSharpParser_secondary_constraint_return RETURN_TYPE_secondary_constraint667;

    ImplTraits::TreeType* char_literal666_tree;

    /* Initialize rule variables
     */
    secondary_constraint_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(192)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal666       = NULL;
    secondary_constraint665.tree = NULL;

    secondary_constraint667.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal666_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:875:26: ( secondary_constraint ( ',' secondary_constraint )* )
        // CSharp.g:876:2: secondary_constraint ( ',' secondary_constraint )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_secondary_constraint_in_secondary_constraint_list5268);
            secondary_constraint665=secondary_constraint();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesecondary_constraint_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, secondary_constraint665.tree);

            // CSharp.g:876:23: ( ',' secondary_constraint )*

            for (;;)
            {
                int alt190=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		switch ( this->LA(2) )
                		{
                		case 196:
                			{
                				switch ( this->LA(3) )
                				{
                				case DOT:
                				case SEMI:
                				case 77:
                				case 83:
                				case 84:
                				case 199:
                					{
                						alt190=1;
                					}
                				    break;

                				}

                			}
                		    break;
                		case IDENTIFIER:
                		case 98:
                		case 100:
                		case 101:
                		case 103:
                		case 104:
                		case 108:
                		case 119:
                		case 122:
                		case 124:
                		case 128:
                		case 134:
                		case 137:
                		case 143:
                		case 145:
                		case 146:
                		case 149:
                		case 150:
                		case 154:
                		case 156:
                		case 159:
                		case 162:
                		case 164:
                		case 169:
                		case 173:
                		case 174:
                		case 185:
                		case 192:
                		case 198:
                			{
                				alt190=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt190)
                {
            	case 1:
            	    // CSharp.g:876:24: ',' secondary_constraint
            	    {
            	        char_literal666 =  this->matchToken(77, &FOLLOW_77_in_secondary_constraint_list5271);
            	        if  (this->hasException())
            	        {
            	            goto rulesecondary_constraint_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal666_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal666));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal666_tree);
            	        }

            	        this->followPush(FOLLOW_secondary_constraint_in_secondary_constraint_list5273);
            	        secondary_constraint667=secondary_constraint();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesecondary_constraint_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, secondary_constraint667.tree);

            	    }
            	    break;

            	default:
            	    goto loop190;	/* break out of the loop */
            	    break;
                }
            }
            loop190: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulesecondary_constraint_listEx; /* Prevent compiler warnings */
    rulesecondary_constraint_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(192, secondary_constraint_list_StartIndex); }

    return retval;
}
/* $ANTLR end secondary_constraint_list */

/**
 * $ANTLR start secondary_constraint
 * CSharp.g:877:1: secondary_constraint : type_name ;
 */
CSharpParser_secondary_constraint_return
CSharpParser::secondary_constraint()
{
    CSharpParser_secondary_constraint_return retval(this);

    ANTLR_MARKER secondary_constraint_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_type_name_return type_name668;
    typedef	CSharpParser_type_name_return RETURN_TYPE_type_name668;


    /* Initialize rule variables
     */
    secondary_constraint_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(193)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    type_name668.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:877:21: ( type_name )
        // CSharp.g:878:2: type_name
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_type_name_in_secondary_constraint5283);
            type_name668=type_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesecondary_constraintEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_name668.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulesecondary_constraintEx; /* Prevent compiler warnings */
    rulesecondary_constraintEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(193, secondary_constraint_StartIndex); }

    return retval;
}
/* $ANTLR end secondary_constraint */

/**
 * $ANTLR start type_variable_name
 * CSharp.g:879:1: type_variable_name : identifier ;
 */
CSharpParser_type_variable_name_return
CSharpParser::type_variable_name()
{
    CSharpParser_type_variable_name_return retval(this);

    ANTLR_MARKER type_variable_name_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_identifier_return identifier669;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier669;


    /* Initialize rule variables
     */
    type_variable_name_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(194)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    identifier669.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:879:19: ( identifier )
        // CSharp.g:880:2: identifier
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_identifier_in_type_variable_name5293);
            identifier669=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletype_variable_nameEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier669.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruletype_variable_nameEx; /* Prevent compiler warnings */
    ruletype_variable_nameEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(194, type_variable_name_StartIndex); }

    return retval;
}
/* $ANTLR end type_variable_name */

/**
 * $ANTLR start constructor_constraint
 * CSharp.g:881:1: constructor_constraint : 'new' '(' ')' ;
 */
CSharpParser_constructor_constraint_return
CSharpParser::constructor_constraint()
{
    CSharpParser_constructor_constraint_return retval(this);

    ANTLR_MARKER constructor_constraint_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal670;
    const CommonTokenType*    char_literal671;
    const CommonTokenType*    char_literal672;

    ImplTraits::TreeType* string_literal670_tree;
    ImplTraits::TreeType* char_literal671_tree;
    ImplTraits::TreeType* char_literal672_tree;

    /* Initialize rule variables
     */
    constructor_constraint_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(195)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal670       = NULL;
    char_literal671       = NULL;
    char_literal672       = NULL;
    retval.call_start_placeholder(); 


    string_literal670_tree   = NULL;
    char_literal671_tree   = NULL;
    char_literal672_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:881:23: ( 'new' '(' ')' )
        // CSharp.g:882:2: 'new' '(' ')'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal670 =  this->matchToken(152, &FOLLOW_152_in_constructor_constraint5301);
            if  (this->hasException())
            {
                goto ruleconstructor_constraintEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal670_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal670));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal670_tree);
            }

            char_literal671 =  this->matchToken(71, &FOLLOW_71_in_constructor_constraint5305);
            if  (this->hasException())
            {
                goto ruleconstructor_constraintEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal671_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal671));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal671_tree);
            }

            char_literal672 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_constructor_constraint5309);
            if  (this->hasException())
            {
                goto ruleconstructor_constraintEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal672_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal672));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal672_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleconstructor_constraintEx; /* Prevent compiler warnings */
    ruleconstructor_constraintEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(195, constructor_constraint_StartIndex); }

    return retval;
}
/* $ANTLR end constructor_constraint */

/**
 * $ANTLR start return_type
 * CSharp.g:883:1: return_type : ( type | 'void' );
 */
CSharpParser_return_type_return
CSharpParser::return_type()
{
    CSharpParser_return_type_return retval(this);

    ANTLR_MARKER return_type_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal674;
    CSharpParser_type_return type673;
    typedef	CSharpParser_type_return RETURN_TYPE_type673;

    ImplTraits::TreeType* string_literal674_tree;

    /* Initialize rule variables
     */
    return_type_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(196)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal674       = NULL;
    type673.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal674_tree   = NULL;


    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:883:12: ( type | 'void' )

            ANTLR_UINT32 alt191;

            alt191=2;

            switch ( this->LA(1) )
            {
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 106:
            case 108:
            case 109:
            case 111:
            case 116:
            case 119:
            case 121:
            case 122:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 153:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 179:
            case 185:
            case 187:
            case 188:
            case 191:
            case 192:
            case 196:
            case 198:
            	{
            		alt191=1;
            	}
                break;
            case 194:
            	{
            		switch ( this->LA(2) )
            		{
            		case 72:
            			{
            				alt191=1;
            			}
            		    break;
            		case IDENTIFIER:
            		case 98:
            		case 100:
            		case 101:
            		case 103:
            		case 104:
            		case 108:
            		case 119:
            		case 122:
            		case 124:
            		case 128:
            		case 134:
            		case 137:
            		case 143:
            		case 145:
            		case 146:
            		case 149:
            		case 150:
            		case 154:
            		case 156:
            		case 159:
            		case 162:
            		case 164:
            		case 169:
            		case 173:
            		case 174:
            		case 185:
            		case 192:
            		case 196:
            		case 198:
            			{
            				alt191=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 191 );
            		    ex->set_state( 2 );


            		    goto rulereturn_typeEx;

            		}

            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 191 );
                ex->set_state( 0 );


                goto rulereturn_typeEx;

            }

            switch (alt191)
            {
        	case 1:
        	    // CSharp.g:884:2: type
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_type_in_return_type5317);
        	        type673=type();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulereturn_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type673.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:885:5: 'void'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal674 =  this->matchToken(194, &FOLLOW_194_in_return_type5323);
        	        if  (this->hasException())
        	        {
        	            goto rulereturn_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal674_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal674));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal674_tree);
        	        }

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulereturn_typeEx; /* Prevent compiler warnings */
    rulereturn_typeEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(196, return_type_StartIndex); }

    return retval;
}
/* $ANTLR end return_type */

/**
 * $ANTLR start formal_parameter_list
 * CSharp.g:886:1: formal_parameter_list : formal_parameter ( ',' formal_parameter )* ;
 */
CSharpParser_formal_parameter_list_return
CSharpParser::formal_parameter_list()
{
    CSharpParser_formal_parameter_list_return retval(this);

    ANTLR_MARKER formal_parameter_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal676;
    CSharpParser_formal_parameter_return formal_parameter675;
    typedef	CSharpParser_formal_parameter_return RETURN_TYPE_formal_parameter675;

    CSharpParser_formal_parameter_return formal_parameter677;
    typedef	CSharpParser_formal_parameter_return RETURN_TYPE_formal_parameter677;

    ImplTraits::TreeType* char_literal676_tree;

    /* Initialize rule variables
     */
    formal_parameter_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(197)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal676       = NULL;
    formal_parameter675.tree = NULL;

    formal_parameter677.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal676_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:886:22: ( formal_parameter ( ',' formal_parameter )* )
        // CSharp.g:887:2: formal_parameter ( ',' formal_parameter )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_formal_parameter_in_formal_parameter_list5330);
            formal_parameter675=formal_parameter();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleformal_parameter_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, formal_parameter675.tree);

            // CSharp.g:887:19: ( ',' formal_parameter )*

            for (;;)
            {
                int alt192=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt192=1;
                	}
                    break;

                }

                switch (alt192)
                {
            	case 1:
            	    // CSharp.g:887:20: ',' formal_parameter
            	    {
            	        char_literal676 =  this->matchToken(77, &FOLLOW_77_in_formal_parameter_list5333);
            	        if  (this->hasException())
            	        {
            	            goto ruleformal_parameter_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal676_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal676));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal676_tree);
            	        }

            	        this->followPush(FOLLOW_formal_parameter_in_formal_parameter_list5335);
            	        formal_parameter677=formal_parameter();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleformal_parameter_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, formal_parameter677.tree);

            	    }
            	    break;

            	default:
            	    goto loop192;	/* break out of the loop */
            	    break;
                }
            }
            loop192: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleformal_parameter_listEx; /* Prevent compiler warnings */
    ruleformal_parameter_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(197, formal_parameter_list_StartIndex); }

    return retval;
}
/* $ANTLR end formal_parameter_list */

/**
 * $ANTLR start formal_parameter
 * CSharp.g:888:1: formal_parameter : ( ( attributes )? ( fixed_parameter | parameter_array ) | '__arglist' );
 */
CSharpParser_formal_parameter_return
CSharpParser::formal_parameter()
{
    CSharpParser_formal_parameter_return retval(this);

    ANTLR_MARKER formal_parameter_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal681;
    CSharpParser_attributes_return attributes678;
    typedef	CSharpParser_attributes_return RETURN_TYPE_attributes678;

    CSharpParser_fixed_parameter_return fixed_parameter679;
    typedef	CSharpParser_fixed_parameter_return RETURN_TYPE_fixed_parameter679;

    CSharpParser_parameter_array_return parameter_array680;
    typedef	CSharpParser_parameter_array_return RETURN_TYPE_parameter_array680;

    ImplTraits::TreeType* string_literal681_tree;

    /* Initialize rule variables
     */
    formal_parameter_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(198)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal681       = NULL;
    attributes678.tree = NULL;

    fixed_parameter679.tree = NULL;

    parameter_array680.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal681_tree   = NULL;


    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:888:17: ( ( attributes )? ( fixed_parameter | parameter_array ) | '__arglist' )

            ANTLR_UINT32 alt195;

            alt195=2;

            switch ( this->LA(1) )
            {
            case IDENTIFIER:
            case 94:
            case 100:
            case 101:
            case 103:
            case 104:
            case 106:
            case 108:
            case 109:
            case 111:
            case 116:
            case 119:
            case 121:
            case 122:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 153:
            case 154:
            case 156:
            case 157:
            case 159:
            case 160:
            case 162:
            case 164:
            case 168:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 179:
            case 182:
            case 185:
            case 187:
            case 188:
            case 191:
            case 192:
            case 194:
            case 196:
            case 198:
            	{
            		alt195=1;
            	}
                break;
            case 98:
            	{
            		switch ( this->LA(2) )
            		{
            		case DOT:
            		case IDENTIFIER:
            		case 72:
            		case 83:
            		case 84:
            		case 92:
            		case 94:
            		case 98:
            		case 100:
            		case 101:
            		case 103:
            		case 104:
            		case 108:
            		case 119:
            		case 122:
            		case 124:
            		case 128:
            		case 134:
            		case 137:
            		case 143:
            		case 145:
            		case 146:
            		case 149:
            		case 150:
            		case 154:
            		case 156:
            		case 159:
            		case 162:
            		case 164:
            		case 169:
            		case 173:
            		case 174:
            		case 185:
            		case 192:
            		case 196:
            		case 198:
            			{
            				alt195=1;
            			}
            		    break;
            		case RPAREN:
            		case 77:
            		case 95:
            			{
            				alt195=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 195 );
            		    ex->set_state( 2 );


            		    goto ruleformal_parameterEx;

            		}

            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 195 );
                ex->set_state( 0 );


                goto ruleformal_parameterEx;

            }

            switch (alt195)
            {
        	case 1:
        	    // CSharp.g:889:2: ( attributes )? ( fixed_parameter | parameter_array )
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        // CSharp.g:889:2: ( attributes )?
        	        {
        	            int alt193=2;
        	            switch ( this->LA(1) )
        	            {
        	                case 94:
        	                	{
        	                		alt193=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt193)
        	            {
        	        	case 1:
        	        	    // CSharp.g:889:2: attributes
        	        	    {
        	        	        this->followPush(FOLLOW_attributes_in_formal_parameter5345);
        	        	        attributes678=attributes();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleformal_parameterEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attributes678.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // CSharp.g:889:16: ( fixed_parameter | parameter_array )
        	        {
        	            int alt194=2;
        	            switch ( this->LA(1) )
        	            {
        	            case IDENTIFIER:
        	            case 98:
        	            case 100:
        	            case 101:
        	            case 103:
        	            case 104:
        	            case 106:
        	            case 108:
        	            case 109:
        	            case 111:
        	            case 116:
        	            case 119:
        	            case 121:
        	            case 122:
        	            case 124:
        	            case 128:
        	            case 131:
        	            case 134:
        	            case 137:
        	            case 140:
        	            case 143:
        	            case 145:
        	            case 146:
        	            case 148:
        	            case 149:
        	            case 150:
        	            case 153:
        	            case 154:
        	            case 156:
        	            case 157:
        	            case 159:
        	            case 162:
        	            case 164:
        	            case 168:
        	            case 169:
        	            case 171:
        	            case 173:
        	            case 174:
        	            case 175:
        	            case 179:
        	            case 182:
        	            case 185:
        	            case 187:
        	            case 188:
        	            case 191:
        	            case 192:
        	            case 194:
        	            case 196:
        	            case 198:
        	            	{
        	            		alt194=1;
        	            	}
        	                break;
        	            case 160:
        	            	{
        	            		alt194=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 194 );
        	                ex->set_state( 0 );


        	                goto ruleformal_parameterEx;

        	            }

        	            switch (alt194)
        	            {
        	        	case 1:
        	        	    // CSharp.g:889:17: fixed_parameter
        	        	    {
        	        	        this->followPush(FOLLOW_fixed_parameter_in_formal_parameter5351);
        	        	        fixed_parameter679=fixed_parameter();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleformal_parameterEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, fixed_parameter679.tree);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // CSharp.g:889:35: parameter_array
        	        	    {
        	        	        this->followPush(FOLLOW_parameter_array_in_formal_parameter5355);
        	        	        parameter_array680=parameter_array();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleformal_parameterEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, parameter_array680.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:890:4: '__arglist'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal681 =  this->matchToken(98, &FOLLOW_98_in_formal_parameter5362);
        	        if  (this->hasException())
        	        {
        	            goto ruleformal_parameterEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal681_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal681));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal681_tree);
        	        }

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleformal_parameterEx; /* Prevent compiler warnings */
    ruleformal_parameterEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(198, formal_parameter_StartIndex); }

    return retval;
}
/* $ANTLR end formal_parameter */

/**
 * $ANTLR start fixed_parameters
 * CSharp.g:891:1: fixed_parameters : fixed_parameter ( ',' fixed_parameter )* ;
 */
CSharpParser_fixed_parameters_return
CSharpParser::fixed_parameters()
{
    CSharpParser_fixed_parameters_return retval(this);

    ANTLR_MARKER fixed_parameters_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal683;
    CSharpParser_fixed_parameter_return fixed_parameter682;
    typedef	CSharpParser_fixed_parameter_return RETURN_TYPE_fixed_parameter682;

    CSharpParser_fixed_parameter_return fixed_parameter684;
    typedef	CSharpParser_fixed_parameter_return RETURN_TYPE_fixed_parameter684;

    ImplTraits::TreeType* char_literal683_tree;

    /* Initialize rule variables
     */
    fixed_parameters_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(199)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal683       = NULL;
    fixed_parameter682.tree = NULL;

    fixed_parameter684.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal683_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:891:17: ( fixed_parameter ( ',' fixed_parameter )* )
        // CSharp.g:892:2: fixed_parameter ( ',' fixed_parameter )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_fixed_parameter_in_fixed_parameters5370);
            fixed_parameter682=fixed_parameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefixed_parametersEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, fixed_parameter682.tree);

            // CSharp.g:892:20: ( ',' fixed_parameter )*

            for (;;)
            {
                int alt196=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt196=1;
                	}
                    break;

                }

                switch (alt196)
                {
            	case 1:
            	    // CSharp.g:892:21: ',' fixed_parameter
            	    {
            	        char_literal683 =  this->matchToken(77, &FOLLOW_77_in_fixed_parameters5375);
            	        if  (this->hasException())
            	        {
            	            goto rulefixed_parametersEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal683_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal683));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal683_tree);
            	        }

            	        this->followPush(FOLLOW_fixed_parameter_in_fixed_parameters5379);
            	        fixed_parameter684=fixed_parameter();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefixed_parametersEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, fixed_parameter684.tree);

            	    }
            	    break;

            	default:
            	    goto loop196;	/* break out of the loop */
            	    break;
                }
            }
            loop196: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulefixed_parametersEx; /* Prevent compiler warnings */
    rulefixed_parametersEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(199, fixed_parameters_StartIndex); }

    return retval;
}
/* $ANTLR end fixed_parameters */

/**
 * $ANTLR start fixed_parameter
 * CSharp.g:894:1: fixed_parameter : ( parameter_modifier )? type identifier ( default_argument )? ;
 */
CSharpParser_fixed_parameter_return
CSharpParser::fixed_parameter()
{
    CSharpParser_fixed_parameter_return retval(this);

    ANTLR_MARKER fixed_parameter_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_parameter_modifier_return parameter_modifier685;
    typedef	CSharpParser_parameter_modifier_return RETURN_TYPE_parameter_modifier685;

    CSharpParser_type_return type686;
    typedef	CSharpParser_type_return RETURN_TYPE_type686;

    CSharpParser_identifier_return identifier687;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier687;

    CSharpParser_default_argument_return default_argument688;
    typedef	CSharpParser_default_argument_return RETURN_TYPE_default_argument688;


    /* Initialize rule variables
     */
    fixed_parameter_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(200)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    parameter_modifier685.tree = NULL;

    type686.tree = NULL;

    identifier687.tree = NULL;

    default_argument688.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:894:16: ( ( parameter_modifier )? type identifier ( default_argument )? )
        // CSharp.g:895:2: ( parameter_modifier )? type identifier ( default_argument )?
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:895:2: ( parameter_modifier )?
            {
                int alt197=2;
                switch ( this->LA(1) )
                {
                    case 157:
                    case 168:
                    case 182:
                    	{
                    		alt197=1;
                    	}
                        break;
                }

                switch (alt197)
                {
            	case 1:
            	    // CSharp.g:895:2: parameter_modifier
            	    {
            	        this->followPush(FOLLOW_parameter_modifier_in_fixed_parameter5390);
            	        parameter_modifier685=parameter_modifier();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefixed_parameterEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, parameter_modifier685.tree);

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_type_in_fixed_parameter5395);
            type686=type();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefixed_parameterEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type686.tree);

            this->followPush(FOLLOW_identifier_in_fixed_parameter5399);
            identifier687=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefixed_parameterEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier687.tree);

            // CSharp.g:895:44: ( default_argument )?
            {
                int alt198=2;
                switch ( this->LA(1) )
                {
                    case 88:
                    	{
                    		alt198=1;
                    	}
                        break;
                }

                switch (alt198)
                {
            	case 1:
            	    // CSharp.g:895:44: default_argument
            	    {
            	        this->followPush(FOLLOW_default_argument_in_fixed_parameter5403);
            	        default_argument688=default_argument();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefixed_parameterEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, default_argument688.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulefixed_parameterEx; /* Prevent compiler warnings */
    rulefixed_parameterEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(200, fixed_parameter_StartIndex); }

    return retval;
}
/* $ANTLR end fixed_parameter */

/**
 * $ANTLR start default_argument
 * CSharp.g:897:1: default_argument : '=' expression ;
 */
CSharpParser_default_argument_return
CSharpParser::default_argument()
{
    CSharpParser_default_argument_return retval(this);

    ANTLR_MARKER default_argument_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal689;
    CSharpParser_expression_return expression690;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression690;

    ImplTraits::TreeType* char_literal689_tree;

    /* Initialize rule variables
     */
    default_argument_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(201)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal689       = NULL;
    expression690.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal689_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:897:17: ( '=' expression )
        // CSharp.g:898:2: '=' expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal689 =  this->matchToken(88, &FOLLOW_88_in_default_argument5413);
            if  (this->hasException())
            {
                goto ruledefault_argumentEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal689_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal689));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal689_tree);
            }

            this->followPush(FOLLOW_expression_in_default_argument5415);
            expression690=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledefault_argumentEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression690.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruledefault_argumentEx; /* Prevent compiler warnings */
    ruledefault_argumentEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(201, default_argument_StartIndex); }

    return retval;
}
/* $ANTLR end default_argument */

/**
 * $ANTLR start parameter_modifier
 * CSharp.g:899:1: parameter_modifier : ( 'ref' | 'out' | 'this' );
 */
CSharpParser_parameter_modifier_return
CSharpParser::parameter_modifier()
{
    CSharpParser_parameter_modifier_return retval(this);

    ANTLR_MARKER parameter_modifier_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set691;

    ImplTraits::TreeType* set691_tree;

    /* Initialize rule variables
     */
    parameter_modifier_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(202)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set691       = NULL;
    retval.call_start_placeholder(); 


    set691_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:899:19: ( 'ref' | 'out' | 'this' )
        // CSharp.g:
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            set691=(const CommonTokenType*) this->LT(1);

            if ( this->LA(1) == 157 || this->LA(1) == 168 || this->LA(1) == 182 )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set691))
                );
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruleparameter_modifierEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleparameter_modifierEx; /* Prevent compiler warnings */
    ruleparameter_modifierEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(202, parameter_modifier_StartIndex); }

    return retval;
}
/* $ANTLR end parameter_modifier */

/**
 * $ANTLR start parameter_array
 * CSharp.g:901:1: parameter_array : 'params' type identifier ;
 */
CSharpParser_parameter_array_return
CSharpParser::parameter_array()
{
    CSharpParser_parameter_array_return retval(this);

    ANTLR_MARKER parameter_array_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal692;
    CSharpParser_type_return type693;
    typedef	CSharpParser_type_return RETURN_TYPE_type693;

    CSharpParser_identifier_return identifier694;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier694;

    ImplTraits::TreeType* string_literal692_tree;

    /* Initialize rule variables
     */
    parameter_array_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(203)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal692       = NULL;
    type693.tree = NULL;

    identifier694.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal692_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:901:16: ( 'params' type identifier )
        // CSharp.g:902:2: 'params' type identifier
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal692 =  this->matchToken(160, &FOLLOW_160_in_parameter_array5438);
            if  (this->hasException())
            {
                goto ruleparameter_arrayEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal692_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal692));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal692_tree);
            }

            this->followPush(FOLLOW_type_in_parameter_array5442);
            type693=type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleparameter_arrayEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type693.tree);

            this->followPush(FOLLOW_identifier_in_parameter_array5446);
            identifier694=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleparameter_arrayEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier694.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleparameter_arrayEx; /* Prevent compiler warnings */
    ruleparameter_arrayEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(203, parameter_array_StartIndex); }

    return retval;
}
/* $ANTLR end parameter_array */

/**
 * $ANTLR start interface_declaration
 * CSharp.g:905:1: interface_declaration : 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? ;
 */
CSharpParser_interface_declaration_return
CSharpParser::interface_declaration()
{
    CSharpParser_interface_declaration_return retval(this);

    ANTLR_MARKER interface_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal695;
    const CommonTokenType*    char_literal701;
    CSharpParser_identifier_return identifier696;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier696;

    CSharpParser_variant_generic_parameter_list_return variant_generic_parameter_list697;
    typedef	CSharpParser_variant_generic_parameter_list_return RETURN_TYPE_variant_generic_parameter_list697;

    CSharpParser_interface_base_return interface_base698;
    typedef	CSharpParser_interface_base_return RETURN_TYPE_interface_base698;

    CSharpParser_type_parameter_constraints_clauses_return type_parameter_constraints_clauses699;
    typedef	CSharpParser_type_parameter_constraints_clauses_return RETURN_TYPE_type_parameter_constraints_clauses699;

    CSharpParser_interface_body_return interface_body700;
    typedef	CSharpParser_interface_body_return RETURN_TYPE_interface_body700;

    ImplTraits::TreeType* string_literal695_tree;
    ImplTraits::TreeType* char_literal701_tree;

    /* Initialize rule variables
     */
    interface_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(204)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal695       = NULL;
    char_literal701       = NULL;
    identifier696.tree = NULL;

    variant_generic_parameter_list697.tree = NULL;

    interface_base698.tree = NULL;

    type_parameter_constraints_clauses699.tree = NULL;

    interface_body700.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal695_tree   = NULL;
    char_literal701_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:905:22: ( 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? )
        // CSharp.g:906:2: 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )?
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal695 =  this->matchToken(141, &FOLLOW_141_in_interface_declaration5456);
            if  (this->hasException())
            {
                goto ruleinterface_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal695_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal695));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal695_tree);
            }

            this->followPush(FOLLOW_identifier_in_interface_declaration5460);
            identifier696=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinterface_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier696.tree);

            // CSharp.g:906:29: ( variant_generic_parameter_list )?
            {
                int alt199=2;
                switch ( this->LA(1) )
                {
                    case 84:
                    	{
                    		alt199=1;
                    	}
                        break;
                }

                switch (alt199)
                {
            	case 1:
            	    // CSharp.g:906:29: variant_generic_parameter_list
            	    {
            	        this->followPush(FOLLOW_variant_generic_parameter_list_in_interface_declaration5464);
            	        variant_generic_parameter_list697=variant_generic_parameter_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinterface_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variant_generic_parameter_list697.tree);

            	    }
            	    break;

                }
            }

            // CSharp.g:907:6: ( interface_base )?
            {
                int alt200=2;
                switch ( this->LA(1) )
                {
                    case 82:
                    	{
                    		alt200=1;
                    	}
                        break;
                }

                switch (alt200)
                {
            	case 1:
            	    // CSharp.g:907:6: interface_base
            	    {
            	        this->followPush(FOLLOW_interface_base_in_interface_declaration5473);
            	        interface_base698=interface_base();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinterface_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_base698.tree);

            	    }
            	    break;

                }
            }

            // CSharp.g:907:24: ( type_parameter_constraints_clauses )?
            {
                int alt201=2;
                switch ( this->LA(1) )
                {
                    case 196:
                    	{
                    		alt201=1;
                    	}
                        break;
                }

                switch (alt201)
                {
            	case 1:
            	    // CSharp.g:907:24: type_parameter_constraints_clauses
            	    {
            	        this->followPush(FOLLOW_type_parameter_constraints_clauses_in_interface_declaration5478);
            	        type_parameter_constraints_clauses699=type_parameter_constraints_clauses();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinterface_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_parameter_constraints_clauses699.tree);

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_interface_body_in_interface_declaration5483);
            interface_body700=interface_body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinterface_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_body700.tree);

            // CSharp.g:907:79: ( ';' )?
            {
                int alt202=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt202=1;
                    	}
                        break;
                }

                switch (alt202)
                {
            	case 1:
            	    // CSharp.g:907:79: ';'
            	    {
            	        char_literal701 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_interface_declaration5487);
            	        if  (this->hasException())
            	        {
            	            goto ruleinterface_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal701_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal701));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal701_tree);
            	        }

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleinterface_declarationEx; /* Prevent compiler warnings */
    ruleinterface_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(204, interface_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end interface_declaration */

/**
 * $ANTLR start interface_modifiers
 * CSharp.g:908:1: interface_modifiers : ( modifier )+ ;
 */
CSharpParser_interface_modifiers_return
CSharpParser::interface_modifiers()
{
    CSharpParser_interface_modifiers_return retval(this);

    ANTLR_MARKER interface_modifiers_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_modifier_return modifier702;
    typedef	CSharpParser_modifier_return RETURN_TYPE_modifier702;


    /* Initialize rule variables
     */
    interface_modifiers_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(205)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    modifier702.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:908:20: ( ( modifier )+ )
        // CSharp.g:909:2: ( modifier )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:909:2: ( modifier )+
            {
                int cnt203=0;

                for (;;)
                {
                    int alt203=2;
            	switch ( this->LA(1) )
            	{
            	case 99:
            	case 127:
            	case 142:
            	case 152:
            	case 158:
            	case 163:
            	case 165:
            	case 166:
            	case 167:
            	case 172:
            	case 178:
            	case 190:
            	case 193:
            	case 195:
            		{
            			alt203=1;
            		}
            	    break;

            	}

            	switch (alt203)
            	{
            	    case 1:
            	        // CSharp.g:909:2: modifier
            	        {
            	            this->followPush(FOLLOW_modifier_in_interface_modifiers5497);
            	            modifier702=modifier();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleinterface_modifiersEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, modifier702.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt203 >= 1 )
            		{
            		    goto loop203;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleinterface_modifiersEx;
            	}
            	cnt203++;
                }
                loop203: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleinterface_modifiersEx; /* Prevent compiler warnings */
    ruleinterface_modifiersEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(205, interface_modifiers_StartIndex); }

    return retval;
}
/* $ANTLR end interface_modifiers */

/**
 * $ANTLR start interface_base
 * CSharp.g:910:1: interface_base : ':' interface_type_list ;
 */
CSharpParser_interface_base_return
CSharpParser::interface_base()
{
    CSharpParser_interface_base_return retval(this);

    ANTLR_MARKER interface_base_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal703;
    CSharpParser_interface_type_list_return interface_type_list704;
    typedef	CSharpParser_interface_type_list_return RETURN_TYPE_interface_type_list704;

    ImplTraits::TreeType* char_literal703_tree;

    /* Initialize rule variables
     */
    interface_base_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(206)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal703       = NULL;
    interface_type_list704.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal703_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:910:15: ( ':' interface_type_list )
        // CSharp.g:911:5: ':' interface_type_list
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal703 =  this->matchToken(82, &FOLLOW_82_in_interface_base5510);
            if  (this->hasException())
            {
                goto ruleinterface_baseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal703_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal703));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal703_tree);
            }

            this->followPush(FOLLOW_interface_type_list_in_interface_base5512);
            interface_type_list704=interface_type_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinterface_baseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_type_list704.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleinterface_baseEx; /* Prevent compiler warnings */
    ruleinterface_baseEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(206, interface_base_StartIndex); }

    return retval;
}
/* $ANTLR end interface_base */

/**
 * $ANTLR start interface_body
 * CSharp.g:912:1: interface_body : '{' ( interface_member_declarations )? '}' ;
 */
CSharpParser_interface_body_return
CSharpParser::interface_body()
{
    CSharpParser_interface_body_return retval(this);

    ANTLR_MARKER interface_body_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal705;
    const CommonTokenType*    char_literal707;
    CSharpParser_interface_member_declarations_return interface_member_declarations706;
    typedef	CSharpParser_interface_member_declarations_return RETURN_TYPE_interface_member_declarations706;

    ImplTraits::TreeType* char_literal705_tree;
    ImplTraits::TreeType* char_literal707_tree;

    /* Initialize rule variables
     */
    interface_body_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(207)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal705       = NULL;
    char_literal707       = NULL;
    interface_member_declarations706.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal705_tree   = NULL;
    char_literal707_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:912:15: ( '{' ( interface_member_declarations )? '}' )
        // CSharp.g:913:2: '{' ( interface_member_declarations )? '}'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal705 =  this->matchToken(199, &FOLLOW_199_in_interface_body5520);
            if  (this->hasException())
            {
                goto ruleinterface_bodyEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal705_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal705));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal705_tree);
            }

            // CSharp.g:913:8: ( interface_member_declarations )?
            {
                int alt204=2;
                switch ( this->LA(1) )
                {
                    case IDENTIFIER:
                    case 94:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 106:
                    case 108:
                    case 109:
                    case 111:
                    case 116:
                    case 119:
                    case 121:
                    case 122:
                    case 124:
                    case 125:
                    case 127:
                    case 128:
                    case 131:
                    case 134:
                    case 137:
                    case 140:
                    case 142:
                    case 143:
                    case 145:
                    case 146:
                    case 148:
                    case 149:
                    case 150:
                    case 152:
                    case 153:
                    case 154:
                    case 156:
                    case 158:
                    case 159:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 169:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 178:
                    case 179:
                    case 185:
                    case 187:
                    case 188:
                    case 190:
                    case 191:
                    case 192:
                    case 193:
                    case 194:
                    case 195:
                    case 196:
                    case 198:
                    	{
                    		alt204=1;
                    	}
                        break;
                }

                switch (alt204)
                {
            	case 1:
            	    // CSharp.g:913:8: interface_member_declarations
            	    {
            	        this->followPush(FOLLOW_interface_member_declarations_in_interface_body5524);
            	        interface_member_declarations706=interface_member_declarations();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinterface_bodyEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_member_declarations706.tree);

            	    }
            	    break;

                }
            }

            char_literal707 =  this->matchToken(203, &FOLLOW_203_in_interface_body5529);
            if  (this->hasException())
            {
                goto ruleinterface_bodyEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal707_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal707));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal707_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleinterface_bodyEx; /* Prevent compiler warnings */
    ruleinterface_bodyEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(207, interface_body_StartIndex); }

    return retval;
}
/* $ANTLR end interface_body */

/**
 * $ANTLR start interface_member_declarations
 * CSharp.g:914:1: interface_member_declarations : ( interface_member_declaration )+ ;
 */
CSharpParser_interface_member_declarations_return
CSharpParser::interface_member_declarations()
{
    CSharpParser_interface_member_declarations_return retval(this);

    ANTLR_MARKER interface_member_declarations_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_interface_member_declaration_return interface_member_declaration708;
    typedef	CSharpParser_interface_member_declaration_return RETURN_TYPE_interface_member_declaration708;


    /* Initialize rule variables
     */
    interface_member_declarations_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(208)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    interface_member_declaration708.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:914:30: ( ( interface_member_declaration )+ )
        // CSharp.g:915:2: ( interface_member_declaration )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:915:2: ( interface_member_declaration )+
            {
                int cnt205=0;

                for (;;)
                {
                    int alt205=2;
            	switch ( this->LA(1) )
            	{
            	case IDENTIFIER:
            	case 94:
            	case 98:
            	case 99:
            	case 100:
            	case 101:
            	case 103:
            	case 104:
            	case 106:
            	case 108:
            	case 109:
            	case 111:
            	case 116:
            	case 119:
            	case 121:
            	case 122:
            	case 124:
            	case 125:
            	case 127:
            	case 128:
            	case 131:
            	case 134:
            	case 137:
            	case 140:
            	case 142:
            	case 143:
            	case 145:
            	case 146:
            	case 148:
            	case 149:
            	case 150:
            	case 152:
            	case 153:
            	case 154:
            	case 156:
            	case 158:
            	case 159:
            	case 162:
            	case 163:
            	case 164:
            	case 165:
            	case 166:
            	case 167:
            	case 169:
            	case 171:
            	case 172:
            	case 173:
            	case 174:
            	case 175:
            	case 178:
            	case 179:
            	case 185:
            	case 187:
            	case 188:
            	case 190:
            	case 191:
            	case 192:
            	case 193:
            	case 194:
            	case 195:
            	case 196:
            	case 198:
            		{
            			alt205=1;
            		}
            	    break;

            	}

            	switch (alt205)
            	{
            	    case 1:
            	        // CSharp.g:915:2: interface_member_declaration
            	        {
            	            this->followPush(FOLLOW_interface_member_declaration_in_interface_member_declarations5537);
            	            interface_member_declaration708=interface_member_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleinterface_member_declarationsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_member_declaration708.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt205 >= 1 )
            		{
            		    goto loop205;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleinterface_member_declarationsEx;
            	}
            	cnt205++;
                }
                loop205: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleinterface_member_declarationsEx; /* Prevent compiler warnings */
    ruleinterface_member_declarationsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(208, interface_member_declarations_StartIndex); }

    return retval;
}
/* $ANTLR end interface_member_declarations */

/**
 * $ANTLR start interface_member_declaration
 * CSharp.g:916:1: interface_member_declaration : ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) ) ;
 */
CSharpParser_interface_member_declaration_return
CSharpParser::interface_member_declaration()
{
    CSharpParser_interface_member_declaration_return retval(this);

    ANTLR_MARKER interface_member_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal711;
    CSharpParser_attributes_return attributes709;
    typedef	CSharpParser_attributes_return RETURN_TYPE_attributes709;

    CSharpParser_modifiers_return modifiers710;
    typedef	CSharpParser_modifiers_return RETURN_TYPE_modifiers710;

    CSharpParser_interface_method_declaration_return interface_method_declaration712;
    typedef	CSharpParser_interface_method_declaration_return RETURN_TYPE_interface_method_declaration712;

    CSharpParser_interface_event_declaration_return interface_event_declaration713;
    typedef	CSharpParser_interface_event_declaration_return RETURN_TYPE_interface_event_declaration713;

    CSharpParser_type_return type714;
    typedef	CSharpParser_type_return RETURN_TYPE_type714;

    CSharpParser_interface_method_declaration_return interface_method_declaration715;
    typedef	CSharpParser_interface_method_declaration_return RETURN_TYPE_interface_method_declaration715;

    CSharpParser_interface_property_declaration_return interface_property_declaration716;
    typedef	CSharpParser_interface_property_declaration_return RETURN_TYPE_interface_property_declaration716;

    CSharpParser_interface_indexer_declaration_return interface_indexer_declaration717;
    typedef	CSharpParser_interface_indexer_declaration_return RETURN_TYPE_interface_indexer_declaration717;

    ImplTraits::TreeType* string_literal711_tree;

    /* Initialize rule variables
     */
    interface_member_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(209)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal711       = NULL;
    attributes709.tree = NULL;

    modifiers710.tree = NULL;

    interface_method_declaration712.tree = NULL;

    interface_event_declaration713.tree = NULL;

    type714.tree = NULL;

    interface_method_declaration715.tree = NULL;

    interface_property_declaration716.tree = NULL;

    interface_indexer_declaration717.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal711_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:916:29: ( ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) ) )
        // CSharp.g:917:2: ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) )
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:917:2: ( attributes )?
            {
                int alt206=2;
                switch ( this->LA(1) )
                {
                    case 94:
                    	{
                    		alt206=1;
                    	}
                        break;
                }

                switch (alt206)
                {
            	case 1:
            	    // CSharp.g:917:2: attributes
            	    {
            	        this->followPush(FOLLOW_attributes_in_interface_member_declaration5546);
            	        attributes709=attributes();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinterface_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attributes709.tree);

            	    }
            	    break;

                }
            }

            // CSharp.g:917:17: ( modifiers )?
            {
                int alt207=2;
                switch ( this->LA(1) )
                {
                    case 99:
                    case 127:
                    case 142:
                    case 152:
                    case 158:
                    case 163:
                    case 165:
                    case 166:
                    case 167:
                    case 172:
                    case 178:
                    case 190:
                    case 193:
                    case 195:
                    	{
                    		alt207=1;
                    	}
                        break;
                }

                switch (alt207)
                {
            	case 1:
            	    // CSharp.g:917:17: modifiers
            	    {
            	        this->followPush(FOLLOW_modifiers_in_interface_member_declaration5552);
            	        modifiers710=modifiers();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinterface_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, modifiers710.tree);

            	    }
            	    break;

                }
            }

            // CSharp.g:918:3: ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) )
            {
                int alt209=3;
                switch ( this->LA(1) )
                {
                case 194:
                	{
                		switch ( this->LA(2) )
                		{
                		case IDENTIFIER:
                		case 98:
                		case 100:
                		case 101:
                		case 103:
                		case 104:
                		case 108:
                		case 119:
                		case 122:
                		case 124:
                		case 128:
                		case 134:
                		case 137:
                		case 143:
                		case 145:
                		case 146:
                		case 149:
                		case 150:
                		case 154:
                		case 156:
                		case 159:
                		case 162:
                		case 164:
                		case 169:
                		case 173:
                		case 174:
                		case 185:
                		case 192:
                		case 196:
                		case 198:
                			{
                				alt209=1;
                			}
                		    break;
                		case 72:
                			{
                				alt209=3;
                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return retval;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 209 );
                		    ex->set_state( 1 );


                		    goto ruleinterface_member_declarationEx;

                		}

                	}
                    break;
                case 125:
                	{
                		alt209=2;
                	}
                    break;
                case IDENTIFIER:
                case 98:
                case 100:
                case 101:
                case 103:
                case 104:
                case 106:
                case 108:
                case 109:
                case 111:
                case 116:
                case 119:
                case 121:
                case 122:
                case 124:
                case 128:
                case 131:
                case 134:
                case 137:
                case 140:
                case 143:
                case 145:
                case 146:
                case 148:
                case 149:
                case 150:
                case 153:
                case 154:
                case 156:
                case 159:
                case 162:
                case 164:
                case 169:
                case 171:
                case 173:
                case 174:
                case 175:
                case 179:
                case 185:
                case 187:
                case 188:
                case 191:
                case 192:
                case 196:
                case 198:
                	{
                		alt209=3;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 209 );
                    ex->set_state( 0 );


                    goto ruleinterface_member_declarationEx;

                }

                switch (alt209)
                {
            	case 1:
            	    // CSharp.g:918:4: 'void' interface_method_declaration
            	    {
            	        string_literal711 =  this->matchToken(194, &FOLLOW_194_in_interface_member_declaration5558);
            	        if  (this->hasException())
            	        {
            	            goto ruleinterface_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        string_literal711_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal711));
            	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal711_tree);
            	        }

            	        this->followPush(FOLLOW_interface_method_declaration_in_interface_member_declaration5562);
            	        interface_method_declaration712=interface_method_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinterface_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_method_declaration712.tree);

            	    }
            	    break;
            	case 2:
            	    // CSharp.g:919:5: interface_event_declaration
            	    {
            	        this->followPush(FOLLOW_interface_event_declaration_in_interface_member_declaration5568);
            	        interface_event_declaration713=interface_event_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinterface_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_event_declaration713.tree);

            	    }
            	    break;
            	case 3:
            	    // CSharp.g:920:5: type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration )
            	    {
            	        this->followPush(FOLLOW_type_in_interface_member_declaration5574);
            	        type714=type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinterface_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type714.tree);

            	        // CSharp.g:920:12: ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration )
            	        {
            	            int alt208=3;
            	            switch ( this->LA(1) )
            	            {
            	            case IDENTIFIER:
            	            case 98:
            	            case 100:
            	            case 101:
            	            case 103:
            	            case 104:
            	            case 108:
            	            case 119:
            	            case 122:
            	            case 124:
            	            case 128:
            	            case 134:
            	            case 137:
            	            case 143:
            	            case 145:
            	            case 146:
            	            case 149:
            	            case 150:
            	            case 154:
            	            case 156:
            	            case 159:
            	            case 162:
            	            case 164:
            	            case 169:
            	            case 173:
            	            case 174:
            	            case 185:
            	            case 192:
            	            case 196:
            	            case 198:
            	            	{
            	            		{
            	            		    int LA208_1 = this->LA(2);
            	            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred26_CSharp>() )) && (LA208_1 == 84))
            	            		    {
            	            		        alt208=1;
            	            		    }
            	            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred26_CSharp>() )) && (LA208_1 == 71))
            	            		    {
            	            		        alt208=1;
            	            		    }
            	            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred27_CSharp>() )) && (LA208_1 == 199))
            	            		    {
            	            		        alt208=2;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (this->get_backtracking()>0)
            	            		        {
            	            		            this->set_failedflag( true );
            	            		            return retval;
            	            		        }


            	            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            		        ex->set_decisionNum( 208 );
            	            		        ex->set_state( 1 );


            	            		        goto ruleinterface_member_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 182:
            	            	{
            	            		alt208=3;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 208 );
            	                ex->set_state( 0 );


            	                goto ruleinterface_member_declarationEx;

            	            }

            	            switch (alt208)
            	            {
            	        	case 1:
            	        	    // CSharp.g:920:14: ( member_name '(' )=> interface_method_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_interface_method_declaration_in_interface_member_declaration5590);
            	        	        interface_method_declaration715=interface_method_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleinterface_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_method_declaration715.tree);

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CSharp.g:921:14: ( member_name '{' )=> interface_property_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_interface_property_declaration_in_interface_member_declaration5615);
            	        	        interface_property_declaration716=interface_property_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleinterface_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_property_declaration716.tree);

            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // CSharp.g:922:8: interface_indexer_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_interface_indexer_declaration_in_interface_member_declaration5625);
            	        	        interface_indexer_declaration717=interface_indexer_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleinterface_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_indexer_declaration717.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleinterface_member_declarationEx; /* Prevent compiler warnings */
    ruleinterface_member_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(209, interface_member_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end interface_member_declaration */

/**
 * $ANTLR start interface_property_declaration
 * CSharp.g:925:1: interface_property_declaration : identifier '{' interface_accessor_declarations '}' ;
 */
CSharpParser_interface_property_declaration_return
CSharpParser::interface_property_declaration()
{
    CSharpParser_interface_property_declaration_return retval(this);

    ANTLR_MARKER interface_property_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal719;
    const CommonTokenType*    char_literal721;
    CSharpParser_identifier_return identifier718;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier718;

    CSharpParser_interface_accessor_declarations_return interface_accessor_declarations720;
    typedef	CSharpParser_interface_accessor_declarations_return RETURN_TYPE_interface_accessor_declarations720;

    ImplTraits::TreeType* char_literal719_tree;
    ImplTraits::TreeType* char_literal721_tree;

    /* Initialize rule variables
     */
    interface_property_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(210)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal719       = NULL;
    char_literal721       = NULL;
    identifier718.tree = NULL;

    interface_accessor_declarations720.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal719_tree   = NULL;
    char_literal721_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:925:31: ( identifier '{' interface_accessor_declarations '}' )
        // CSharp.g:926:2: identifier '{' interface_accessor_declarations '}'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_identifier_in_interface_property_declaration5642);
            identifier718=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinterface_property_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier718.tree);

            char_literal719 =  this->matchToken(199, &FOLLOW_199_in_interface_property_declaration5646);
            if  (this->hasException())
            {
                goto ruleinterface_property_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal719_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal719));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal719_tree);
            }

            this->followPush(FOLLOW_interface_accessor_declarations_in_interface_property_declaration5650);
            interface_accessor_declarations720=interface_accessor_declarations();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinterface_property_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_accessor_declarations720.tree);

            char_literal721 =  this->matchToken(203, &FOLLOW_203_in_interface_property_declaration5654);
            if  (this->hasException())
            {
                goto ruleinterface_property_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal721_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal721));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal721_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleinterface_property_declarationEx; /* Prevent compiler warnings */
    ruleinterface_property_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(210, interface_property_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end interface_property_declaration */

/**
 * $ANTLR start interface_method_declaration
 * CSharp.g:927:1: interface_method_declaration : identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' ;
 */
CSharpParser_interface_method_declaration_return
CSharpParser::interface_method_declaration()
{
    CSharpParser_interface_method_declaration_return retval(this);

    ANTLR_MARKER interface_method_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal724;
    const CommonTokenType*    char_literal726;
    const CommonTokenType*    char_literal728;
    CSharpParser_identifier_return identifier722;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier722;

    CSharpParser_generic_argument_list_return generic_argument_list723;
    typedef	CSharpParser_generic_argument_list_return RETURN_TYPE_generic_argument_list723;

    CSharpParser_formal_parameter_list_return formal_parameter_list725;
    typedef	CSharpParser_formal_parameter_list_return RETURN_TYPE_formal_parameter_list725;

    CSharpParser_type_parameter_constraints_clauses_return type_parameter_constraints_clauses727;
    typedef	CSharpParser_type_parameter_constraints_clauses_return RETURN_TYPE_type_parameter_constraints_clauses727;

    ImplTraits::TreeType* char_literal724_tree;
    ImplTraits::TreeType* char_literal726_tree;
    ImplTraits::TreeType* char_literal728_tree;

    /* Initialize rule variables
     */
    interface_method_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(211)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal724       = NULL;
    char_literal726       = NULL;
    char_literal728       = NULL;
    identifier722.tree = NULL;

    generic_argument_list723.tree = NULL;

    formal_parameter_list725.tree = NULL;

    type_parameter_constraints_clauses727.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal724_tree   = NULL;
    char_literal726_tree   = NULL;
    char_literal728_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:927:29: ( identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' )
        // CSharp.g:928:2: identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_identifier_in_interface_method_declaration5662);
            identifier722=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinterface_method_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier722.tree);

            // CSharp.g:928:15: ( generic_argument_list )?
            {
                int alt210=2;
                switch ( this->LA(1) )
                {
                    case 84:
                    	{
                    		alt210=1;
                    	}
                        break;
                }

                switch (alt210)
                {
            	case 1:
            	    // CSharp.g:928:15: generic_argument_list
            	    {
            	        this->followPush(FOLLOW_generic_argument_list_in_interface_method_declaration5666);
            	        generic_argument_list723=generic_argument_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinterface_method_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, generic_argument_list723.tree);

            	    }
            	    break;

                }
            }

            char_literal724 =  this->matchToken(71, &FOLLOW_71_in_interface_method_declaration5674);
            if  (this->hasException())
            {
                goto ruleinterface_method_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal724_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal724));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal724_tree);
            }

            // CSharp.g:929:12: ( formal_parameter_list )?
            {
                int alt211=2;
                switch ( this->LA(1) )
                {
                    case IDENTIFIER:
                    case 94:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 106:
                    case 108:
                    case 109:
                    case 111:
                    case 116:
                    case 119:
                    case 121:
                    case 122:
                    case 124:
                    case 128:
                    case 131:
                    case 134:
                    case 137:
                    case 140:
                    case 143:
                    case 145:
                    case 146:
                    case 148:
                    case 149:
                    case 150:
                    case 153:
                    case 154:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 162:
                    case 164:
                    case 168:
                    case 169:
                    case 171:
                    case 173:
                    case 174:
                    case 175:
                    case 179:
                    case 182:
                    case 185:
                    case 187:
                    case 188:
                    case 191:
                    case 192:
                    case 194:
                    case 196:
                    case 198:
                    	{
                    		alt211=1;
                    	}
                        break;
                }

                switch (alt211)
                {
            	case 1:
            	    // CSharp.g:929:12: formal_parameter_list
            	    {
            	        this->followPush(FOLLOW_formal_parameter_list_in_interface_method_declaration5678);
            	        formal_parameter_list725=formal_parameter_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinterface_method_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, formal_parameter_list725.tree);

            	    }
            	    break;

                }
            }

            char_literal726 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_interface_method_declaration5683);
            if  (this->hasException())
            {
                goto ruleinterface_method_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal726_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal726));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal726_tree);
            }

            // CSharp.g:929:43: ( type_parameter_constraints_clauses )?
            {
                int alt212=2;
                switch ( this->LA(1) )
                {
                    case 196:
                    	{
                    		alt212=1;
                    	}
                        break;
                }

                switch (alt212)
                {
            	case 1:
            	    // CSharp.g:929:43: type_parameter_constraints_clauses
            	    {
            	        this->followPush(FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration5687);
            	        type_parameter_constraints_clauses727=type_parameter_constraints_clauses();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinterface_method_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_parameter_constraints_clauses727.tree);

            	    }
            	    break;

                }
            }

            char_literal728 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_interface_method_declaration5692);
            if  (this->hasException())
            {
                goto ruleinterface_method_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal728_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal728));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal728_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleinterface_method_declarationEx; /* Prevent compiler warnings */
    ruleinterface_method_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(211, interface_method_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end interface_method_declaration */

/**
 * $ANTLR start interface_event_declaration
 * CSharp.g:930:1: interface_event_declaration : 'event' type identifier ';' ;
 */
CSharpParser_interface_event_declaration_return
CSharpParser::interface_event_declaration()
{
    CSharpParser_interface_event_declaration_return retval(this);

    ANTLR_MARKER interface_event_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal729;
    const CommonTokenType*    char_literal732;
    CSharpParser_type_return type730;
    typedef	CSharpParser_type_return RETURN_TYPE_type730;

    CSharpParser_identifier_return identifier731;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier731;

    ImplTraits::TreeType* string_literal729_tree;
    ImplTraits::TreeType* char_literal732_tree;

    /* Initialize rule variables
     */
    interface_event_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(212)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal729       = NULL;
    char_literal732       = NULL;
    type730.tree = NULL;

    identifier731.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal729_tree   = NULL;
    char_literal732_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:930:28: ( 'event' type identifier ';' )
        // CSharp.g:932:2: 'event' type identifier ';'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal729 =  this->matchToken(125, &FOLLOW_125_in_interface_event_declaration5703);
            if  (this->hasException())
            {
                goto ruleinterface_event_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal729_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal729));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal729_tree);
            }

            this->followPush(FOLLOW_type_in_interface_event_declaration5707);
            type730=type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinterface_event_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type730.tree);

            this->followPush(FOLLOW_identifier_in_interface_event_declaration5711);
            identifier731=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinterface_event_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier731.tree);

            char_literal732 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_interface_event_declaration5715);
            if  (this->hasException())
            {
                goto ruleinterface_event_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal732_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal732));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal732_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleinterface_event_declarationEx; /* Prevent compiler warnings */
    ruleinterface_event_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(212, interface_event_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end interface_event_declaration */

/**
 * $ANTLR start interface_indexer_declaration
 * CSharp.g:933:1: interface_indexer_declaration : 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}' ;
 */
CSharpParser_interface_indexer_declaration_return
CSharpParser::interface_indexer_declaration()
{
    CSharpParser_interface_indexer_declaration_return retval(this);

    ANTLR_MARKER interface_indexer_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal733;
    const CommonTokenType*    char_literal734;
    const CommonTokenType*    char_literal736;
    const CommonTokenType*    char_literal737;
    const CommonTokenType*    char_literal739;
    CSharpParser_formal_parameter_list_return formal_parameter_list735;
    typedef	CSharpParser_formal_parameter_list_return RETURN_TYPE_formal_parameter_list735;

    CSharpParser_interface_accessor_declarations_return interface_accessor_declarations738;
    typedef	CSharpParser_interface_accessor_declarations_return RETURN_TYPE_interface_accessor_declarations738;

    ImplTraits::TreeType* string_literal733_tree;
    ImplTraits::TreeType* char_literal734_tree;
    ImplTraits::TreeType* char_literal736_tree;
    ImplTraits::TreeType* char_literal737_tree;
    ImplTraits::TreeType* char_literal739_tree;

    /* Initialize rule variables
     */
    interface_indexer_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(213)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal733       = NULL;
    char_literal734       = NULL;
    char_literal736       = NULL;
    char_literal737       = NULL;
    char_literal739       = NULL;
    formal_parameter_list735.tree = NULL;

    interface_accessor_declarations738.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal733_tree   = NULL;
    char_literal734_tree   = NULL;
    char_literal736_tree   = NULL;
    char_literal737_tree   = NULL;
    char_literal739_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:933:30: ( 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}' )
        // CSharp.g:935:2: 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal733 =  this->matchToken(182, &FOLLOW_182_in_interface_indexer_declaration5727);
            if  (this->hasException())
            {
                goto ruleinterface_indexer_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal733_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal733));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal733_tree);
            }

            char_literal734 =  this->matchToken(94, &FOLLOW_94_in_interface_indexer_declaration5731);
            if  (this->hasException())
            {
                goto ruleinterface_indexer_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal734_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal734));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal734_tree);
            }

            this->followPush(FOLLOW_formal_parameter_list_in_interface_indexer_declaration5735);
            formal_parameter_list735=formal_parameter_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinterface_indexer_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, formal_parameter_list735.tree);

            char_literal736 =  this->matchToken(95, &FOLLOW_95_in_interface_indexer_declaration5739);
            if  (this->hasException())
            {
                goto ruleinterface_indexer_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal736_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal736));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal736_tree);
            }

            char_literal737 =  this->matchToken(199, &FOLLOW_199_in_interface_indexer_declaration5743);
            if  (this->hasException())
            {
                goto ruleinterface_indexer_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal737_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal737));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal737_tree);
            }

            this->followPush(FOLLOW_interface_accessor_declarations_in_interface_indexer_declaration5747);
            interface_accessor_declarations738=interface_accessor_declarations();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinterface_indexer_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_accessor_declarations738.tree);

            char_literal739 =  this->matchToken(203, &FOLLOW_203_in_interface_indexer_declaration5751);
            if  (this->hasException())
            {
                goto ruleinterface_indexer_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal739_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal739));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal739_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleinterface_indexer_declarationEx; /* Prevent compiler warnings */
    ruleinterface_indexer_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(213, interface_indexer_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end interface_indexer_declaration */

/**
 * $ANTLR start interface_accessor_declarations
 * CSharp.g:936:1: interface_accessor_declarations : ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? ) ;
 */
CSharpParser_interface_accessor_declarations_return
CSharpParser::interface_accessor_declarations()
{
    CSharpParser_interface_accessor_declarations_return retval(this);

    ANTLR_MARKER interface_accessor_declarations_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_attributes_return attributes740;
    typedef	CSharpParser_attributes_return RETURN_TYPE_attributes740;

    CSharpParser_interface_get_accessor_declaration_return interface_get_accessor_declaration741;
    typedef	CSharpParser_interface_get_accessor_declaration_return RETURN_TYPE_interface_get_accessor_declaration741;

    CSharpParser_attributes_return attributes742;
    typedef	CSharpParser_attributes_return RETURN_TYPE_attributes742;

    CSharpParser_interface_set_accessor_declaration_return interface_set_accessor_declaration743;
    typedef	CSharpParser_interface_set_accessor_declaration_return RETURN_TYPE_interface_set_accessor_declaration743;

    CSharpParser_interface_set_accessor_declaration_return interface_set_accessor_declaration744;
    typedef	CSharpParser_interface_set_accessor_declaration_return RETURN_TYPE_interface_set_accessor_declaration744;

    CSharpParser_attributes_return attributes745;
    typedef	CSharpParser_attributes_return RETURN_TYPE_attributes745;

    CSharpParser_interface_get_accessor_declaration_return interface_get_accessor_declaration746;
    typedef	CSharpParser_interface_get_accessor_declaration_return RETURN_TYPE_interface_get_accessor_declaration746;


    /* Initialize rule variables
     */
    interface_accessor_declarations_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(214)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    attributes740.tree = NULL;

    interface_get_accessor_declaration741.tree = NULL;

    attributes742.tree = NULL;

    interface_set_accessor_declaration743.tree = NULL;

    interface_set_accessor_declaration744.tree = NULL;

    attributes745.tree = NULL;

    interface_get_accessor_declaration746.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:936:32: ( ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? ) )
        // CSharp.g:937:2: ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? )
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:937:2: ( attributes )?
            {
                int alt213=2;
                switch ( this->LA(1) )
                {
                    case 94:
                    	{
                    		alt213=1;
                    	}
                        break;
                }

                switch (alt213)
                {
            	case 1:
            	    // CSharp.g:937:2: attributes
            	    {
            	        this->followPush(FOLLOW_attributes_in_interface_accessor_declarations5759);
            	        attributes740=attributes();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinterface_accessor_declarationsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attributes740.tree);

            	    }
            	    break;

                }
            }

            // CSharp.g:938:3: ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? )
            {
                int alt218=2;
                switch ( this->LA(1) )
                {
                case 135:
                	{
                		alt218=1;
                	}
                    break;
                case 174:
                	{
                		alt218=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 218 );
                    ex->set_state( 0 );


                    goto ruleinterface_accessor_declarationsEx;

                }

                switch (alt218)
                {
            	case 1:
            	    // CSharp.g:938:4: interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )?
            	    {
            	        this->followPush(FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations5768);
            	        interface_get_accessor_declaration741=interface_get_accessor_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinterface_accessor_declarationsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_get_accessor_declaration741.tree);

            	        // CSharp.g:938:41: ( attributes )?
            	        {
            	            int alt214=2;
            	            switch ( this->LA(1) )
            	            {
            	                case 94:
            	                	{
            	                		alt214=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt214)
            	            {
            	        	case 1:
            	        	    // CSharp.g:938:41: attributes
            	        	    {
            	        	        this->followPush(FOLLOW_attributes_in_interface_accessor_declarations5772);
            	        	        attributes742=attributes();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleinterface_accessor_declarationsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attributes742.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	        // CSharp.g:938:55: ( interface_set_accessor_declaration )?
            	        {
            	            int alt215=2;
            	            switch ( this->LA(1) )
            	            {
            	                case 174:
            	                	{
            	                		alt215=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt215)
            	            {
            	        	case 1:
            	        	    // CSharp.g:938:55: interface_set_accessor_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations5777);
            	        	        interface_set_accessor_declaration743=interface_set_accessor_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleinterface_accessor_declarationsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_set_accessor_declaration743.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // CSharp.g:939:5: interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )?
            	    {
            	        this->followPush(FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations5784);
            	        interface_set_accessor_declaration744=interface_set_accessor_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinterface_accessor_declarationsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_set_accessor_declaration744.tree);

            	        // CSharp.g:939:42: ( attributes )?
            	        {
            	            int alt216=2;
            	            switch ( this->LA(1) )
            	            {
            	                case 94:
            	                	{
            	                		alt216=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt216)
            	            {
            	        	case 1:
            	        	    // CSharp.g:939:42: attributes
            	        	    {
            	        	        this->followPush(FOLLOW_attributes_in_interface_accessor_declarations5788);
            	        	        attributes745=attributes();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleinterface_accessor_declarationsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attributes745.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	        // CSharp.g:939:56: ( interface_get_accessor_declaration )?
            	        {
            	            int alt217=2;
            	            switch ( this->LA(1) )
            	            {
            	                case 135:
            	                	{
            	                		alt217=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt217)
            	            {
            	        	case 1:
            	        	    // CSharp.g:939:56: interface_get_accessor_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations5793);
            	        	        interface_get_accessor_declaration746=interface_get_accessor_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleinterface_accessor_declarationsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_get_accessor_declaration746.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleinterface_accessor_declarationsEx; /* Prevent compiler warnings */
    ruleinterface_accessor_declarationsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(214, interface_accessor_declarations_StartIndex); }

    return retval;
}
/* $ANTLR end interface_accessor_declarations */

/**
 * $ANTLR start interface_get_accessor_declaration
 * CSharp.g:940:1: interface_get_accessor_declaration : 'get' ';' ;
 */
CSharpParser_interface_get_accessor_declaration_return
CSharpParser::interface_get_accessor_declaration()
{
    CSharpParser_interface_get_accessor_declaration_return retval(this);

    ANTLR_MARKER interface_get_accessor_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal747;
    const CommonTokenType*    char_literal748;

    ImplTraits::TreeType* string_literal747_tree;
    ImplTraits::TreeType* char_literal748_tree;

    /* Initialize rule variables
     */
    interface_get_accessor_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(215)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal747       = NULL;
    char_literal748       = NULL;
    retval.call_start_placeholder(); 


    string_literal747_tree   = NULL;
    char_literal748_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:940:35: ( 'get' ';' )
        // CSharp.g:941:2: 'get' ';'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal747 =  this->matchToken(135, &FOLLOW_135_in_interface_get_accessor_declaration5803);
            if  (this->hasException())
            {
                goto ruleinterface_get_accessor_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal747_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal747));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal747_tree);
            }

            char_literal748 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_interface_get_accessor_declaration5807);
            if  (this->hasException())
            {
                goto ruleinterface_get_accessor_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal748_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal748));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal748_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleinterface_get_accessor_declarationEx; /* Prevent compiler warnings */
    ruleinterface_get_accessor_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(215, interface_get_accessor_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end interface_get_accessor_declaration */

/**
 * $ANTLR start interface_set_accessor_declaration
 * CSharp.g:942:1: interface_set_accessor_declaration : 'set' ';' ;
 */
CSharpParser_interface_set_accessor_declaration_return
CSharpParser::interface_set_accessor_declaration()
{
    CSharpParser_interface_set_accessor_declaration_return retval(this);

    ANTLR_MARKER interface_set_accessor_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal749;
    const CommonTokenType*    char_literal750;

    ImplTraits::TreeType* string_literal749_tree;
    ImplTraits::TreeType* char_literal750_tree;

    /* Initialize rule variables
     */
    interface_set_accessor_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(216)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal749       = NULL;
    char_literal750       = NULL;
    retval.call_start_placeholder(); 


    string_literal749_tree   = NULL;
    char_literal750_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:942:35: ( 'set' ';' )
        // CSharp.g:943:2: 'set' ';'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal749 =  this->matchToken(174, &FOLLOW_174_in_interface_set_accessor_declaration5817);
            if  (this->hasException())
            {
                goto ruleinterface_set_accessor_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal749_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal749));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal749_tree);
            }

            char_literal750 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_interface_set_accessor_declaration5821);
            if  (this->hasException())
            {
                goto ruleinterface_set_accessor_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal750_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal750));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal750_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleinterface_set_accessor_declarationEx; /* Prevent compiler warnings */
    ruleinterface_set_accessor_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(216, interface_set_accessor_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end interface_set_accessor_declaration */

/**
 * $ANTLR start method_modifiers
 * CSharp.g:944:1: method_modifiers : ( modifier )+ ;
 */
CSharpParser_method_modifiers_return
CSharpParser::method_modifiers()
{
    CSharpParser_method_modifiers_return retval(this);

    ANTLR_MARKER method_modifiers_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_modifier_return modifier751;
    typedef	CSharpParser_modifier_return RETURN_TYPE_modifier751;


    /* Initialize rule variables
     */
    method_modifiers_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(217)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    modifier751.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:944:17: ( ( modifier )+ )
        // CSharp.g:945:2: ( modifier )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:945:2: ( modifier )+
            {
                int cnt219=0;

                for (;;)
                {
                    int alt219=2;
            	switch ( this->LA(1) )
            	{
            	case 99:
            	case 127:
            	case 142:
            	case 152:
            	case 158:
            	case 163:
            	case 165:
            	case 166:
            	case 167:
            	case 172:
            	case 178:
            	case 190:
            	case 193:
            	case 195:
            		{
            			alt219=1;
            		}
            	    break;

            	}

            	switch (alt219)
            	{
            	    case 1:
            	        // CSharp.g:945:2: modifier
            	        {
            	            this->followPush(FOLLOW_modifier_in_method_modifiers5831);
            	            modifier751=modifier();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemethod_modifiersEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, modifier751.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt219 >= 1 )
            		{
            		    goto loop219;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulemethod_modifiersEx;
            	}
            	cnt219++;
                }
                loop219: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulemethod_modifiersEx; /* Prevent compiler warnings */
    rulemethod_modifiersEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(217, method_modifiers_StartIndex); }

    return retval;
}
/* $ANTLR end method_modifiers */

/**
 * $ANTLR start struct_declaration
 * CSharp.g:948:1: struct_declaration : 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )? ;
 */
CSharpParser_struct_declaration_return
CSharpParser::struct_declaration()
{
    CSharpParser_struct_declaration_return retval(this);

    ANTLR_MARKER struct_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal752;
    const CommonTokenType*    char_literal757;
    CSharpParser_type_or_generic_return type_or_generic753;
    typedef	CSharpParser_type_or_generic_return RETURN_TYPE_type_or_generic753;

    CSharpParser_struct_interfaces_return struct_interfaces754;
    typedef	CSharpParser_struct_interfaces_return RETURN_TYPE_struct_interfaces754;

    CSharpParser_type_parameter_constraints_clauses_return type_parameter_constraints_clauses755;
    typedef	CSharpParser_type_parameter_constraints_clauses_return RETURN_TYPE_type_parameter_constraints_clauses755;

    CSharpParser_struct_body_return struct_body756;
    typedef	CSharpParser_struct_body_return RETURN_TYPE_struct_body756;

    ImplTraits::TreeType* string_literal752_tree;
    ImplTraits::TreeType* char_literal757_tree;

    /* Initialize rule variables
     */
    struct_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(218)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal752       = NULL;
    char_literal757       = NULL;
    type_or_generic753.tree = NULL;

    struct_interfaces754.tree = NULL;

    type_parameter_constraints_clauses755.tree = NULL;

    struct_body756.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal752_tree   = NULL;
    char_literal757_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:948:19: ( 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )? )
        // CSharp.g:949:2: 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )?
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal752 =  this->matchToken(180, &FOLLOW_180_in_struct_declaration5843);
            if  (this->hasException())
            {
                goto rulestruct_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal752_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal752));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal752_tree);
            }

            this->followPush(FOLLOW_type_or_generic_in_struct_declaration5847);
            type_or_generic753=type_or_generic();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestruct_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_or_generic753.tree);

            // CSharp.g:949:31: ( struct_interfaces )?
            {
                int alt220=2;
                switch ( this->LA(1) )
                {
                    case 82:
                    	{
                    		alt220=1;
                    	}
                        break;
                }

                switch (alt220)
                {
            	case 1:
            	    // CSharp.g:949:31: struct_interfaces
            	    {
            	        this->followPush(FOLLOW_struct_interfaces_in_struct_declaration5851);
            	        struct_interfaces754=struct_interfaces();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, struct_interfaces754.tree);

            	    }
            	    break;

                }
            }

            // CSharp.g:949:52: ( type_parameter_constraints_clauses )?
            {
                int alt221=2;
                switch ( this->LA(1) )
                {
                    case 196:
                    	{
                    		alt221=1;
                    	}
                        break;
                }

                switch (alt221)
                {
            	case 1:
            	    // CSharp.g:949:52: type_parameter_constraints_clauses
            	    {
            	        this->followPush(FOLLOW_type_parameter_constraints_clauses_in_struct_declaration5856);
            	        type_parameter_constraints_clauses755=type_parameter_constraints_clauses();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_parameter_constraints_clauses755.tree);

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_struct_body_in_struct_declaration5861);
            struct_body756=struct_body();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestruct_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, struct_body756.tree);

            // CSharp.g:949:104: ( ';' )?
            {
                int alt222=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt222=1;
                    	}
                        break;
                }

                switch (alt222)
                {
            	case 1:
            	    // CSharp.g:949:104: ';'
            	    {
            	        char_literal757 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_struct_declaration5865);
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal757_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal757));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal757_tree);
            	        }

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulestruct_declarationEx; /* Prevent compiler warnings */
    rulestruct_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(218, struct_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end struct_declaration */

/**
 * $ANTLR start struct_modifiers
 * CSharp.g:950:1: struct_modifiers : ( struct_modifier )+ ;
 */
CSharpParser_struct_modifiers_return
CSharpParser::struct_modifiers()
{
    CSharpParser_struct_modifiers_return retval(this);

    ANTLR_MARKER struct_modifiers_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_struct_modifier_return struct_modifier758;
    typedef	CSharpParser_struct_modifier_return RETURN_TYPE_struct_modifier758;


    /* Initialize rule variables
     */
    struct_modifiers_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(219)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    struct_modifier758.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:950:17: ( ( struct_modifier )+ )
        // CSharp.g:951:2: ( struct_modifier )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:951:2: ( struct_modifier )+
            {
                int cnt223=0;

                for (;;)
                {
                    int alt223=2;
            	switch ( this->LA(1) )
            	{
            	case 142:
            	case 152:
            	case 163:
            	case 165:
            	case 166:
            	case 190:
            		{
            			alt223=1;
            		}
            	    break;

            	}

            	switch (alt223)
            	{
            	    case 1:
            	        // CSharp.g:951:2: struct_modifier
            	        {
            	            this->followPush(FOLLOW_struct_modifier_in_struct_modifiers5874);
            	            struct_modifier758=struct_modifier();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestruct_modifiersEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, struct_modifier758.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt223 >= 1 )
            		{
            		    goto loop223;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulestruct_modifiersEx;
            	}
            	cnt223++;
                }
                loop223: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulestruct_modifiersEx; /* Prevent compiler warnings */
    rulestruct_modifiersEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(219, struct_modifiers_StartIndex); }

    return retval;
}
/* $ANTLR end struct_modifiers */

/**
 * $ANTLR start struct_modifier
 * CSharp.g:952:1: struct_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' );
 */
CSharpParser_struct_modifier_return
CSharpParser::struct_modifier()
{
    CSharpParser_struct_modifier_return retval(this);

    ANTLR_MARKER struct_modifier_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set759;

    ImplTraits::TreeType* set759_tree;

    /* Initialize rule variables
     */
    struct_modifier_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(220)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set759       = NULL;
    retval.call_start_placeholder(); 


    set759_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:952:16: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' )
        // CSharp.g:
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            set759=(const CommonTokenType*) this->LT(1);

            if ( this->LA(1) == 142 || this->LA(1) == 152 || this->LA(1) == 163 || ((this->LA(1) >= 165) && (this->LA(1) <= 166)) || this->LA(1) == 190 )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set759))
                );
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulestruct_modifierEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulestruct_modifierEx; /* Prevent compiler warnings */
    rulestruct_modifierEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(220, struct_modifier_StartIndex); }

    return retval;
}
/* $ANTLR end struct_modifier */

/**
 * $ANTLR start struct_interfaces
 * CSharp.g:954:1: struct_interfaces : ':' interface_type_list ;
 */
CSharpParser_struct_interfaces_return
CSharpParser::struct_interfaces()
{
    CSharpParser_struct_interfaces_return retval(this);

    ANTLR_MARKER struct_interfaces_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal760;
    CSharpParser_interface_type_list_return interface_type_list761;
    typedef	CSharpParser_interface_type_list_return RETURN_TYPE_interface_type_list761;

    ImplTraits::TreeType* char_literal760_tree;

    /* Initialize rule variables
     */
    struct_interfaces_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(221)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal760       = NULL;
    interface_type_list761.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal760_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:954:18: ( ':' interface_type_list )
        // CSharp.g:955:2: ':' interface_type_list
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal760 =  this->matchToken(82, &FOLLOW_82_in_struct_interfaces5911);
            if  (this->hasException())
            {
                goto rulestruct_interfacesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal760_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal760));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal760_tree);
            }

            this->followPush(FOLLOW_interface_type_list_in_struct_interfaces5915);
            interface_type_list761=interface_type_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestruct_interfacesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_type_list761.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulestruct_interfacesEx; /* Prevent compiler warnings */
    rulestruct_interfacesEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(221, struct_interfaces_StartIndex); }

    return retval;
}
/* $ANTLR end struct_interfaces */

/**
 * $ANTLR start struct_body
 * CSharp.g:956:1: struct_body : '{' ( struct_member_declarations )? '}' ;
 */
CSharpParser_struct_body_return
CSharpParser::struct_body()
{
    CSharpParser_struct_body_return retval(this);

    ANTLR_MARKER struct_body_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal762;
    const CommonTokenType*    char_literal764;
    CSharpParser_struct_member_declarations_return struct_member_declarations763;
    typedef	CSharpParser_struct_member_declarations_return RETURN_TYPE_struct_member_declarations763;

    ImplTraits::TreeType* char_literal762_tree;
    ImplTraits::TreeType* char_literal764_tree;

    /* Initialize rule variables
     */
    struct_body_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(222)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal762       = NULL;
    char_literal764       = NULL;
    struct_member_declarations763.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal762_tree   = NULL;
    char_literal764_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:956:12: ( '{' ( struct_member_declarations )? '}' )
        // CSharp.g:957:2: '{' ( struct_member_declarations )? '}'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal762 =  this->matchToken(199, &FOLLOW_199_in_struct_body5922);
            if  (this->hasException())
            {
                goto rulestruct_bodyEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal762_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal762));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal762_tree);
            }

            // CSharp.g:957:8: ( struct_member_declarations )?
            {
                int alt224=2;
                switch ( this->LA(1) )
                {
                    case ENUM:
                    case IDENTIFIER:
                    case 94:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 106:
                    case 108:
                    case 109:
                    case 111:
                    case 113:
                    case 114:
                    case 116:
                    case 118:
                    case 119:
                    case 121:
                    case 122:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 131:
                    case 134:
                    case 137:
                    case 138:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 145:
                    case 146:
                    case 148:
                    case 149:
                    case 150:
                    case 152:
                    case 153:
                    case 154:
                    case 156:
                    case 158:
                    case 159:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 169:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 178:
                    case 179:
                    case 180:
                    case 185:
                    case 187:
                    case 188:
                    case 190:
                    case 191:
                    case 192:
                    case 193:
                    case 194:
                    case 195:
                    case 196:
                    case 198:
                    	{
                    		alt224=1;
                    	}
                        break;
                }

                switch (alt224)
                {
            	case 1:
            	    // CSharp.g:957:8: struct_member_declarations
            	    {
            	        this->followPush(FOLLOW_struct_member_declarations_in_struct_body5926);
            	        struct_member_declarations763=struct_member_declarations();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_bodyEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, struct_member_declarations763.tree);

            	    }
            	    break;

                }
            }

            char_literal764 =  this->matchToken(203, &FOLLOW_203_in_struct_body5931);
            if  (this->hasException())
            {
                goto rulestruct_bodyEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal764_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal764));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal764_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulestruct_bodyEx; /* Prevent compiler warnings */
    rulestruct_bodyEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(222, struct_body_StartIndex); }

    return retval;
}
/* $ANTLR end struct_body */

/**
 * $ANTLR start struct_member_declarations
 * CSharp.g:958:1: struct_member_declarations : ( struct_member_declaration )+ ;
 */
CSharpParser_struct_member_declarations_return
CSharpParser::struct_member_declarations()
{
    CSharpParser_struct_member_declarations_return retval(this);

    ANTLR_MARKER struct_member_declarations_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_struct_member_declaration_return struct_member_declaration765;
    typedef	CSharpParser_struct_member_declaration_return RETURN_TYPE_struct_member_declaration765;


    /* Initialize rule variables
     */
    struct_member_declarations_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(223)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    struct_member_declaration765.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:958:27: ( ( struct_member_declaration )+ )
        // CSharp.g:959:2: ( struct_member_declaration )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:959:2: ( struct_member_declaration )+
            {
                int cnt225=0;

                for (;;)
                {
                    int alt225=2;
            	switch ( this->LA(1) )
            	{
            	case ENUM:
            	case IDENTIFIER:
            	case 94:
            	case 98:
            	case 99:
            	case 100:
            	case 101:
            	case 103:
            	case 104:
            	case 106:
            	case 108:
            	case 109:
            	case 111:
            	case 113:
            	case 114:
            	case 116:
            	case 118:
            	case 119:
            	case 121:
            	case 122:
            	case 124:
            	case 125:
            	case 126:
            	case 127:
            	case 128:
            	case 131:
            	case 134:
            	case 137:
            	case 138:
            	case 140:
            	case 141:
            	case 142:
            	case 143:
            	case 145:
            	case 146:
            	case 148:
            	case 149:
            	case 150:
            	case 152:
            	case 153:
            	case 154:
            	case 156:
            	case 158:
            	case 159:
            	case 161:
            	case 162:
            	case 163:
            	case 164:
            	case 165:
            	case 166:
            	case 167:
            	case 169:
            	case 171:
            	case 172:
            	case 173:
            	case 174:
            	case 175:
            	case 178:
            	case 179:
            	case 180:
            	case 185:
            	case 187:
            	case 188:
            	case 190:
            	case 191:
            	case 192:
            	case 193:
            	case 194:
            	case 195:
            	case 196:
            	case 198:
            		{
            			alt225=1;
            		}
            	    break;

            	}

            	switch (alt225)
            	{
            	    case 1:
            	        // CSharp.g:959:2: struct_member_declaration
            	        {
            	            this->followPush(FOLLOW_struct_member_declaration_in_struct_member_declarations5938);
            	            struct_member_declaration765=struct_member_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestruct_member_declarationsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, struct_member_declaration765.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt225 >= 1 )
            		{
            		    goto loop225;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulestruct_member_declarationsEx;
            	}
            	cnt225++;
                }
                loop225: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulestruct_member_declarationsEx; /* Prevent compiler warnings */
    rulestruct_member_declarationsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(223, struct_member_declarations_StartIndex); }

    return retval;
}
/* $ANTLR end struct_member_declarations */

/**
 * $ANTLR start struct_member_declaration
 * CSharp.g:961:1: struct_member_declaration : ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration ) ;
 */
CSharpParser_struct_member_declaration_return
CSharpParser::struct_member_declaration()
{
    CSharpParser_struct_member_declaration_return retval(this);

    ANTLR_MARKER struct_member_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal767;
    const CommonTokenType*    char_literal770;
    const CommonTokenType*    string_literal772;
    const CommonTokenType*    string_literal779;
    const CommonTokenType*    char_literal785;
    CSharpParser_modifiers_return m;
    typedef	CSharpParser_modifiers_return RETURN_TYPE_m;

    CSharpParser_attributes_return attributes766;
    typedef	CSharpParser_attributes_return RETURN_TYPE_attributes766;

    CSharpParser_type_return type768;
    typedef	CSharpParser_type_return RETURN_TYPE_type768;

    CSharpParser_constant_declarators_return constant_declarators769;
    typedef	CSharpParser_constant_declarators_return RETURN_TYPE_constant_declarators769;

    CSharpParser_event_declaration_return event_declaration771;
    typedef	CSharpParser_event_declaration_return RETURN_TYPE_event_declaration771;

    CSharpParser_method_declaration_return method_declaration773;
    typedef	CSharpParser_method_declaration_return RETURN_TYPE_method_declaration773;

    CSharpParser_interface_declaration_return interface_declaration774;
    typedef	CSharpParser_interface_declaration_return RETURN_TYPE_interface_declaration774;

    CSharpParser_class_declaration_return class_declaration775;
    typedef	CSharpParser_class_declaration_return RETURN_TYPE_class_declaration775;

    CSharpParser_struct_declaration_return struct_declaration776;
    typedef	CSharpParser_struct_declaration_return RETURN_TYPE_struct_declaration776;

    CSharpParser_interface_declaration_return interface_declaration777;
    typedef	CSharpParser_interface_declaration_return RETURN_TYPE_interface_declaration777;

    CSharpParser_class_declaration_return class_declaration778;
    typedef	CSharpParser_class_declaration_return RETURN_TYPE_class_declaration778;

    CSharpParser_method_declaration_return method_declaration780;
    typedef	CSharpParser_method_declaration_return RETURN_TYPE_method_declaration780;

    CSharpParser_type_return type781;
    typedef	CSharpParser_type_return RETURN_TYPE_type781;

    CSharpParser_method_declaration_return method_declaration782;
    typedef	CSharpParser_method_declaration_return RETURN_TYPE_method_declaration782;

    CSharpParser_property_declaration_return property_declaration783;
    typedef	CSharpParser_property_declaration_return RETURN_TYPE_property_declaration783;

    CSharpParser_type_name_return type_name784;
    typedef	CSharpParser_type_name_return RETURN_TYPE_type_name784;

    CSharpParser_indexer_declaration_return indexer_declaration786;
    typedef	CSharpParser_indexer_declaration_return RETURN_TYPE_indexer_declaration786;

    CSharpParser_indexer_declaration_return indexer_declaration787;
    typedef	CSharpParser_indexer_declaration_return RETURN_TYPE_indexer_declaration787;

    CSharpParser_field_declaration_return field_declaration788;
    typedef	CSharpParser_field_declaration_return RETURN_TYPE_field_declaration788;

    CSharpParser_operator_declaration_return operator_declaration789;
    typedef	CSharpParser_operator_declaration_return RETURN_TYPE_operator_declaration789;

    CSharpParser_struct_declaration_return struct_declaration790;
    typedef	CSharpParser_struct_declaration_return RETURN_TYPE_struct_declaration790;

    CSharpParser_enum_declaration_return enum_declaration791;
    typedef	CSharpParser_enum_declaration_return RETURN_TYPE_enum_declaration791;

    CSharpParser_delegate_declaration_return delegate_declaration792;
    typedef	CSharpParser_delegate_declaration_return RETURN_TYPE_delegate_declaration792;

    CSharpParser_conversion_operator_declaration_return conversion_operator_declaration793;
    typedef	CSharpParser_conversion_operator_declaration_return RETURN_TYPE_conversion_operator_declaration793;

    CSharpParser_constructor_declaration_return constructor_declaration794;
    typedef	CSharpParser_constructor_declaration_return RETURN_TYPE_constructor_declaration794;

    ImplTraits::TreeType* string_literal767_tree;
    ImplTraits::TreeType* char_literal770_tree;
    ImplTraits::TreeType* string_literal772_tree;
    ImplTraits::TreeType* string_literal779_tree;
    ImplTraits::TreeType* char_literal785_tree;

    /* Initialize rule variables
     */
    struct_member_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(224)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal767       = NULL;
    char_literal770       = NULL;
    string_literal772       = NULL;
    string_literal779       = NULL;
    char_literal785       = NULL;
    m.tree = NULL;

    attributes766.tree = NULL;

    type768.tree = NULL;

    constant_declarators769.tree = NULL;

    event_declaration771.tree = NULL;

    method_declaration773.tree = NULL;

    interface_declaration774.tree = NULL;

    class_declaration775.tree = NULL;

    struct_declaration776.tree = NULL;

    interface_declaration777.tree = NULL;

    class_declaration778.tree = NULL;

    method_declaration780.tree = NULL;

    type781.tree = NULL;

    method_declaration782.tree = NULL;

    property_declaration783.tree = NULL;

    type_name784.tree = NULL;

    indexer_declaration786.tree = NULL;

    indexer_declaration787.tree = NULL;

    field_declaration788.tree = NULL;

    operator_declaration789.tree = NULL;

    struct_declaration790.tree = NULL;

    enum_declaration791.tree = NULL;

    delegate_declaration792.tree = NULL;

    conversion_operator_declaration793.tree = NULL;

    constructor_declaration794.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal767_tree   = NULL;
    char_literal770_tree   = NULL;
    string_literal772_tree   = NULL;
    string_literal779_tree   = NULL;
    char_literal785_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:962:2: ( ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration ) )
        // CSharp.g:962:4: ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration )
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:962:4: ( attributes )?
            {
                int alt226=2;
                switch ( this->LA(1) )
                {
                    case 94:
                    	{
                    		alt226=1;
                    	}
                        break;
                }

                switch (alt226)
                {
            	case 1:
            	    // CSharp.g:962:4: attributes
            	    {
            	        this->followPush(FOLLOW_attributes_in_struct_member_declaration5949);
            	        attributes766=attributes();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attributes766.tree);

            	    }
            	    break;

                }
            }

            // CSharp.g:962:19: (m= modifiers )?
            {
                int alt227=2;
                switch ( this->LA(1) )
                {
                    case 99:
                    case 127:
                    case 142:
                    case 152:
                    case 158:
                    case 163:
                    case 165:
                    case 166:
                    case 167:
                    case 172:
                    case 178:
                    case 190:
                    case 193:
                    case 195:
                    	{
                    		alt227=1;
                    	}
                        break;
                }

                switch (alt227)
                {
            	case 1:
            	    // CSharp.g:962:19: m= modifiers
            	    {
            	        this->followPush(FOLLOW_modifiers_in_struct_member_declaration5956);
            	        m=modifiers();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, m.tree);

            	    }
            	    break;

                }
            }

            // CSharp.g:963:3: ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration )
            {
                int alt230=12;
                switch ( this->LA(1) )
                {
                case 114:
                	{
                		alt230=1;
                	}
                    break;
                case 125:
                	{
                		alt230=2;
                	}
                    break;
                case 161:
                	{
                		alt230=3;
                	}
                    break;
                case 141:
                	{
                		alt230=4;
                	}
                    break;
                case 113:
                	{
                		alt230=5;
                	}
                    break;
                case 194:
                	{
                		switch ( this->LA(2) )
                		{
                		case Character_literal:
                		case FALSE:
                		case Hex_number:
                		case IDENTIFIER:
                		case LT_NULL:
                		case NUMBER:
                		case Real_literal:
                		case STRINGLITERAL:
                		case TRUE:
                		case Verbatim_string_literal:
                		case 98:
                		case 100:
                		case 101:
                		case 103:
                		case 104:
                		case 106:
                		case 108:
                		case 109:
                		case 111:
                		case 116:
                		case 119:
                		case 121:
                		case 122:
                		case 124:
                		case 128:
                		case 131:
                		case 134:
                		case 137:
                		case 140:
                		case 143:
                		case 145:
                		case 146:
                		case 148:
                		case 149:
                		case 150:
                		case 153:
                		case 154:
                		case 156:
                		case 159:
                		case 162:
                		case 164:
                		case 169:
                		case 171:
                		case 173:
                		case 174:
                		case 175:
                		case 179:
                		case 185:
                		case 187:
                		case 188:
                		case 191:
                		case 192:
                		case 196:
                		case 198:
                			{
                				alt230=6;
                			}
                		    break;
                		case 72:
                			{
                				alt230=7;
                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return retval;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 230 );
                		    ex->set_state( 6 );


                		    goto rulestruct_member_declarationEx;

                		}

                	}
                    break;
                case 106:
                case 109:
                case 111:
                case 116:
                case 121:
                case 131:
                case 140:
                case 148:
                case 153:
                case 171:
                case 175:
                case 179:
                case 187:
                case 188:
                case 191:
                	{
                		alt230=7;
                	}
                    break;
                case IDENTIFIER:
                case 98:
                case 100:
                case 101:
                case 103:
                case 104:
                case 108:
                case 119:
                case 122:
                case 124:
                case 128:
                case 134:
                case 137:
                case 143:
                case 145:
                case 146:
                case 149:
                case 150:
                case 154:
                case 156:
                case 159:
                case 162:
                case 164:
                case 169:
                case 173:
                case 174:
                case 185:
                case 192:
                case 196:
                case 198:
                	{
                		switch ( this->LA(2) )
                		{
                		case Character_literal:
                		case DOT:
                		case FALSE:
                		case Hex_number:
                		case IDENTIFIER:
                		case LT_NULL:
                		case NUMBER:
                		case Real_literal:
                		case STRINGLITERAL:
                		case TRUE:
                		case Verbatim_string_literal:
                		case 72:
                		case 83:
                		case 84:
                		case 92:
                		case 94:
                		case 98:
                		case 100:
                		case 101:
                		case 103:
                		case 104:
                		case 106:
                		case 108:
                		case 109:
                		case 111:
                		case 116:
                		case 119:
                		case 121:
                		case 122:
                		case 124:
                		case 128:
                		case 131:
                		case 134:
                		case 137:
                		case 140:
                		case 143:
                		case 145:
                		case 146:
                		case 148:
                		case 149:
                		case 150:
                		case 153:
                		case 154:
                		case 155:
                		case 156:
                		case 159:
                		case 162:
                		case 164:
                		case 169:
                		case 171:
                		case 173:
                		case 174:
                		case 175:
                		case 179:
                		case 182:
                		case 185:
                		case 187:
                		case 188:
                		case 191:
                		case 192:
                		case 196:
                		case 198:
                			{
                				alt230=7;
                			}
                		    break;
                		case 71:
                			{
                				alt230=12;
                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return retval;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 230 );
                		    ex->set_state( 8 );


                		    goto rulestruct_member_declarationEx;

                		}

                	}
                    break;
                case 180:
                	{
                		alt230=8;
                	}
                    break;
                case ENUM:
                	{
                		alt230=9;
                	}
                    break;
                case 118:
                	{
                		alt230=10;
                	}
                    break;
                case 126:
                case 138:
                	{
                		alt230=11;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 230 );
                    ex->set_state( 0 );


                    goto rulestruct_member_declarationEx;

                }

                switch (alt230)
                {
            	case 1:
            	    // CSharp.g:964:4: 'const' type constant_declarators ';'
            	    {
            	        string_literal767 =  this->matchToken(114, &FOLLOW_114_in_struct_member_declaration5966);
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        string_literal767_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal767));
            	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal767_tree);
            	        }

            	        this->followPush(FOLLOW_type_in_struct_member_declaration5970);
            	        type768=type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type768.tree);

            	        this->followPush(FOLLOW_constant_declarators_in_struct_member_declaration5974);
            	        constant_declarators769=constant_declarators();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constant_declarators769.tree);

            	        char_literal770 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_struct_member_declaration5978);
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal770_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal770));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal770_tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // CSharp.g:965:5: event_declaration
            	    {
            	        this->followPush(FOLLOW_event_declaration_in_struct_member_declaration5984);
            	        event_declaration771=event_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, event_declaration771.tree);

            	    }
            	    break;
            	case 3:
            	    // CSharp.g:966:5: 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration )
            	    {
            	        string_literal772 =  this->matchToken(161, &FOLLOW_161_in_struct_member_declaration5992);
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        string_literal772_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal772));
            	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal772_tree);
            	        }

            	        // CSharp.g:967:4: ( method_declaration | interface_declaration | class_declaration | struct_declaration )
            	        {
            	            int alt228=4;
            	            switch ( this->LA(1) )
            	            {
            	            case Character_literal:
            	            case FALSE:
            	            case Hex_number:
            	            case IDENTIFIER:
            	            case LT_NULL:
            	            case NUMBER:
            	            case Real_literal:
            	            case STRINGLITERAL:
            	            case TRUE:
            	            case Verbatim_string_literal:
            	            case 98:
            	            case 100:
            	            case 101:
            	            case 103:
            	            case 104:
            	            case 106:
            	            case 108:
            	            case 109:
            	            case 111:
            	            case 116:
            	            case 119:
            	            case 121:
            	            case 122:
            	            case 124:
            	            case 128:
            	            case 131:
            	            case 134:
            	            case 137:
            	            case 140:
            	            case 143:
            	            case 145:
            	            case 146:
            	            case 148:
            	            case 149:
            	            case 150:
            	            case 153:
            	            case 154:
            	            case 156:
            	            case 159:
            	            case 162:
            	            case 164:
            	            case 169:
            	            case 171:
            	            case 173:
            	            case 174:
            	            case 175:
            	            case 179:
            	            case 185:
            	            case 187:
            	            case 188:
            	            case 191:
            	            case 192:
            	            case 196:
            	            case 198:
            	            	{
            	            		alt228=1;
            	            	}
            	                break;
            	            case 141:
            	            	{
            	            		alt228=2;
            	            	}
            	                break;
            	            case 113:
            	            	{
            	            		alt228=3;
            	            	}
            	                break;
            	            case 180:
            	            	{
            	            		alt228=4;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 228 );
            	                ex->set_state( 0 );


            	                goto rulestruct_member_declarationEx;

            	            }

            	            switch (alt228)
            	            {
            	        	case 1:
            	        	    // CSharp.g:968:5: method_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_method_declaration_in_struct_member_declaration6003);
            	        	        method_declaration773=method_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulestruct_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, method_declaration773.tree);

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CSharp.g:969:6: interface_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_interface_declaration_in_struct_member_declaration6011);
            	        	        interface_declaration774=interface_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulestruct_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_declaration774.tree);

            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // CSharp.g:970:6: class_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_class_declaration_in_struct_member_declaration6019);
            	        	        class_declaration775=class_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulestruct_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, class_declaration775.tree);

            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // CSharp.g:971:6: struct_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_struct_declaration_in_struct_member_declaration6027);
            	        	        struct_declaration776=struct_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulestruct_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, struct_declaration776.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 4:
            	    // CSharp.g:974:5: interface_declaration
            	    {
            	        this->followPush(FOLLOW_interface_declaration_in_struct_member_declaration6039);
            	        interface_declaration777=interface_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, interface_declaration777.tree);

            	    }
            	    break;
            	case 5:
            	    // CSharp.g:975:5: class_declaration
            	    {
            	        this->followPush(FOLLOW_class_declaration_in_struct_member_declaration6046);
            	        class_declaration778=class_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, class_declaration778.tree);

            	    }
            	    break;
            	case 6:
            	    // CSharp.g:976:5: 'void' method_declaration
            	    {
            	        string_literal779 =  this->matchToken(194, &FOLLOW_194_in_struct_member_declaration6054);
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        string_literal779_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal779));
            	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal779_tree);
            	        }

            	        this->followPush(FOLLOW_method_declaration_in_struct_member_declaration6058);
            	        method_declaration780=method_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, method_declaration780.tree);

            	    }
            	    break;
            	case 7:
            	    // CSharp.g:977:5: type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
            	    {
            	        this->followPush(FOLLOW_type_in_struct_member_declaration6064);
            	        type781=type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type781.tree);

            	        // CSharp.g:978:5: ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
            	        {
            	            int alt229=6;
            	            switch ( this->LA(1) )
            	            {
            	            case 106:
            	            case 109:
            	            case 111:
            	            case 116:
            	            case 121:
            	            case 131:
            	            case 140:
            	            case 148:
            	            case 153:
            	            case 171:
            	            case 175:
            	            case 179:
            	            case 187:
            	            case 188:
            	            case 191:
            	            	{
            	            		{
            	            		    int LA229_1 = this->LA(2);
            	            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred28_CSharp>() )))
            	            		    {
            	            		        alt229=1;
            	            		    }
            	            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred29_CSharp>() )))
            	            		    {
            	            		        alt229=2;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (this->get_backtracking()>0)
            	            		        {
            	            		            this->set_failedflag( true );
            	            		            return retval;
            	            		        }


            	            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            		        ex->set_decisionNum( 229 );
            	            		        ex->set_state( 1 );


            	            		        goto rulestruct_member_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case IDENTIFIER:
            	            case 98:
            	            case 100:
            	            case 101:
            	            case 103:
            	            case 104:
            	            case 108:
            	            case 119:
            	            case 122:
            	            case 124:
            	            case 128:
            	            case 134:
            	            case 137:
            	            case 143:
            	            case 145:
            	            case 146:
            	            case 149:
            	            case 150:
            	            case 154:
            	            case 156:
            	            case 159:
            	            case 162:
            	            case 164:
            	            case 169:
            	            case 173:
            	            case 174:
            	            case 185:
            	            case 192:
            	            case 196:
            	            case 198:
            	            	{
            	            		{
            	            		    int LA229_2 = this->LA(2);
            	            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred28_CSharp>() )))
            	            		    {
            	            		        alt229=1;
            	            		    }
            	            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred29_CSharp>() )))
            	            		    {
            	            		        alt229=2;
            	            		    }
            	            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred30_CSharp>() )))
            	            		    {
            	            		        alt229=3;
            	            		    }
            	            		    else if ( (true))
            	            		    {
            	            		        alt229=5;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (this->get_backtracking()>0)
            	            		        {
            	            		            this->set_failedflag( true );
            	            		            return retval;
            	            		        }


            	            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            		        ex->set_decisionNum( 229 );
            	            		        ex->set_state( 2 );


            	            		        goto rulestruct_member_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case Character_literal:
            	            case FALSE:
            	            case Hex_number:
            	            case LT_NULL:
            	            case NUMBER:
            	            case Real_literal:
            	            case STRINGLITERAL:
            	            case TRUE:
            	            case Verbatim_string_literal:
            	            	{
            	            		{
            	            		    int LA229_3 = this->LA(2);
            	            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred28_CSharp>() )))
            	            		    {
            	            		        alt229=1;
            	            		    }
            	            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred29_CSharp>() )))
            	            		    {
            	            		        alt229=2;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (this->get_backtracking()>0)
            	            		        {
            	            		            this->set_failedflag( true );
            	            		            return retval;
            	            		        }


            	            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            		        ex->set_decisionNum( 229 );
            	            		        ex->set_state( 3 );


            	            		        goto rulestruct_member_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 182:
            	            	{
            	            		alt229=4;
            	            	}
            	                break;
            	            case 155:
            	            	{
            	            		alt229=6;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 229 );
            	                ex->set_state( 0 );


            	                goto rulestruct_member_declarationEx;

            	            }

            	            switch (alt229)
            	            {
            	        	case 1:
            	        	    // CSharp.g:979:6: ( member_name '(' )=> method_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_method_declaration_in_struct_member_declaration6087);
            	        	        method_declaration782=method_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulestruct_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, method_declaration782.tree);

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CSharp.g:980:7: ( member_name '{' )=> property_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_property_declaration_in_struct_member_declaration6105);
            	        	        property_declaration783=property_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulestruct_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, property_declaration783.tree);

            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // CSharp.g:981:10: ( member_name '.' 'this' )=> type_name '.' indexer_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_type_name_in_struct_member_declaration6130);
            	        	        type_name784=type_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulestruct_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_name784.tree);

            	        	        char_literal785 =  this->matchToken(DOT, &FOLLOW_DOT_in_struct_member_declaration6132);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulestruct_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        char_literal785_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal785));
            	        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal785_tree);
            	        	        }

            	        	        this->followPush(FOLLOW_indexer_declaration_in_struct_member_declaration6134);
            	        	        indexer_declaration786=indexer_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulestruct_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, indexer_declaration786.tree);

            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // CSharp.g:982:10: indexer_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_indexer_declaration_in_struct_member_declaration6145);
            	        	        indexer_declaration787=indexer_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulestruct_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, indexer_declaration787.tree);

            	        	    }
            	        	    break;
            	        	case 5:
            	        	    // CSharp.g:983:14: field_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_field_declaration_in_struct_member_declaration6161);
            	        	        field_declaration788=field_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulestruct_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, field_declaration788.tree);

            	        	    }
            	        	    break;
            	        	case 6:
            	        	    // CSharp.g:984:14: operator_declaration
            	        	    {
            	        	        this->followPush(FOLLOW_operator_declaration_in_struct_member_declaration6182);
            	        	        operator_declaration789=operator_declaration();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulestruct_member_declarationEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, operator_declaration789.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 8:
            	    // CSharp.g:988:5: struct_declaration
            	    {
            	        this->followPush(FOLLOW_struct_declaration_in_struct_member_declaration6204);
            	        struct_declaration790=struct_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, struct_declaration790.tree);

            	    }
            	    break;
            	case 9:
            	    // CSharp.g:989:5: enum_declaration
            	    {
            	        this->followPush(FOLLOW_enum_declaration_in_struct_member_declaration6211);
            	        enum_declaration791=enum_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, enum_declaration791.tree);

            	    }
            	    break;
            	case 10:
            	    // CSharp.g:990:5: delegate_declaration
            	    {
            	        this->followPush(FOLLOW_delegate_declaration_in_struct_member_declaration6219);
            	        delegate_declaration792=delegate_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, delegate_declaration792.tree);

            	    }
            	    break;
            	case 11:
            	    // CSharp.g:991:5: conversion_operator_declaration
            	    {
            	        this->followPush(FOLLOW_conversion_operator_declaration_in_struct_member_declaration6226);
            	        conversion_operator_declaration793=conversion_operator_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, conversion_operator_declaration793.tree);

            	    }
            	    break;
            	case 12:
            	    // CSharp.g:992:5: constructor_declaration
            	    {
            	        this->followPush(FOLLOW_constructor_declaration_in_struct_member_declaration6232);
            	        constructor_declaration794=constructor_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestruct_member_declarationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constructor_declaration794.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulestruct_member_declarationEx; /* Prevent compiler warnings */
    rulestruct_member_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(224, struct_member_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end struct_member_declaration */

/**
 * $ANTLR start indexer_declaration
 * CSharp.g:997:1: indexer_declaration : indexer_declarator '{' accessor_declarations '}' ;
 */
CSharpParser_indexer_declaration_return
CSharpParser::indexer_declaration()
{
    CSharpParser_indexer_declaration_return retval(this);

    ANTLR_MARKER indexer_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal796;
    const CommonTokenType*    char_literal798;
    CSharpParser_indexer_declarator_return indexer_declarator795;
    typedef	CSharpParser_indexer_declarator_return RETURN_TYPE_indexer_declarator795;

    CSharpParser_accessor_declarations_return accessor_declarations797;
    typedef	CSharpParser_accessor_declarations_return RETURN_TYPE_accessor_declarations797;

    ImplTraits::TreeType* char_literal796_tree;
    ImplTraits::TreeType* char_literal798_tree;

    /* Initialize rule variables
     */
    indexer_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(225)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal796       = NULL;
    char_literal798       = NULL;
    indexer_declarator795.tree = NULL;

    accessor_declarations797.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal796_tree   = NULL;
    char_literal798_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:998:2: ( indexer_declarator '{' accessor_declarations '}' )
        // CSharp.g:998:4: indexer_declarator '{' accessor_declarations '}'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_indexer_declarator_in_indexer_declaration6250);
            indexer_declarator795=indexer_declarator();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleindexer_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, indexer_declarator795.tree);

            char_literal796 =  this->matchToken(199, &FOLLOW_199_in_indexer_declaration6254);
            if  (this->hasException())
            {
                goto ruleindexer_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal796_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal796));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal796_tree);
            }

            this->followPush(FOLLOW_accessor_declarations_in_indexer_declaration6258);
            accessor_declarations797=accessor_declarations();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleindexer_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, accessor_declarations797.tree);

            char_literal798 =  this->matchToken(203, &FOLLOW_203_in_indexer_declaration6262);
            if  (this->hasException())
            {
                goto ruleindexer_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal798_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal798));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal798_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleindexer_declarationEx; /* Prevent compiler warnings */
    ruleindexer_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(225, indexer_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end indexer_declaration */

/**
 * $ANTLR start indexer_declarator
 * CSharp.g:1001:1: indexer_declarator : 'this' '[' formal_parameter_list ']' ;
 */
CSharpParser_indexer_declarator_return
CSharpParser::indexer_declarator()
{
    CSharpParser_indexer_declarator_return retval(this);

    ANTLR_MARKER indexer_declarator_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal799;
    const CommonTokenType*    char_literal800;
    const CommonTokenType*    char_literal802;
    CSharpParser_formal_parameter_list_return formal_parameter_list801;
    typedef	CSharpParser_formal_parameter_list_return RETURN_TYPE_formal_parameter_list801;

    ImplTraits::TreeType* string_literal799_tree;
    ImplTraits::TreeType* char_literal800_tree;
    ImplTraits::TreeType* char_literal802_tree;

    /* Initialize rule variables
     */
    indexer_declarator_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(226)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal799       = NULL;
    char_literal800       = NULL;
    char_literal802       = NULL;
    formal_parameter_list801.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal799_tree   = NULL;
    char_literal800_tree   = NULL;
    char_literal802_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1002:2: ( 'this' '[' formal_parameter_list ']' )
        // CSharp.g:1003:3: 'this' '[' formal_parameter_list ']'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal799 =  this->matchToken(182, &FOLLOW_182_in_indexer_declarator6277);
            if  (this->hasException())
            {
                goto ruleindexer_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal799_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal799));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal799_tree);
            }

            char_literal800 =  this->matchToken(94, &FOLLOW_94_in_indexer_declarator6281);
            if  (this->hasException())
            {
                goto ruleindexer_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal800_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal800));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal800_tree);
            }

            this->followPush(FOLLOW_formal_parameter_list_in_indexer_declarator6285);
            formal_parameter_list801=formal_parameter_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleindexer_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, formal_parameter_list801.tree);

            char_literal802 =  this->matchToken(95, &FOLLOW_95_in_indexer_declarator6289);
            if  (this->hasException())
            {
                goto ruleindexer_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal802_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal802));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal802_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleindexer_declaratorEx; /* Prevent compiler warnings */
    ruleindexer_declaratorEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(226, indexer_declarator_StartIndex); }

    return retval;
}
/* $ANTLR end indexer_declarator */

/**
 * $ANTLR start operator_declaration
 * CSharp.g:1007:1: operator_declaration : operator_declarator operator_body ;
 */
CSharpParser_operator_declaration_return
CSharpParser::operator_declaration()
{
    CSharpParser_operator_declaration_return retval(this);

    ANTLR_MARKER operator_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_operator_declarator_return operator_declarator803;
    typedef	CSharpParser_operator_declarator_return RETURN_TYPE_operator_declarator803;

    CSharpParser_operator_body_return operator_body804;
    typedef	CSharpParser_operator_body_return RETURN_TYPE_operator_body804;


    /* Initialize rule variables
     */
    operator_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(227)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    operator_declarator803.tree = NULL;

    operator_body804.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:1008:2: ( operator_declarator operator_body )
        // CSharp.g:1008:4: operator_declarator operator_body
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_operator_declarator_in_operator_declaration6302);
            operator_declarator803=operator_declarator();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleoperator_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, operator_declarator803.tree);

            this->followPush(FOLLOW_operator_body_in_operator_declaration6304);
            operator_body804=operator_body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleoperator_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, operator_body804.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperator_declarationEx; /* Prevent compiler warnings */
    ruleoperator_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(227, operator_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end operator_declaration */

/**
 * $ANTLR start operator_declarator
 * CSharp.g:1011:1: operator_declarator : 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator ) ;
 */
CSharpParser_operator_declarator_return
CSharpParser::operator_declarator()
{
    CSharpParser_operator_declarator_return retval(this);

    ANTLR_MARKER operator_declarator_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal805;
    const CommonTokenType*    set806;
    const CommonTokenType*    char_literal807;
    CSharpParser_type_return type808;
    typedef	CSharpParser_type_return RETURN_TYPE_type808;

    CSharpParser_identifier_return identifier809;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier809;

    CSharpParser_binary_operator_declarator_return binary_operator_declarator810;
    typedef	CSharpParser_binary_operator_declarator_return RETURN_TYPE_binary_operator_declarator810;

    CSharpParser_unary_operator_declarator_return unary_operator_declarator811;
    typedef	CSharpParser_unary_operator_declarator_return RETURN_TYPE_unary_operator_declarator811;

    CSharpParser_overloadable_unary_operator_return overloadable_unary_operator812;
    typedef	CSharpParser_overloadable_unary_operator_return RETURN_TYPE_overloadable_unary_operator812;

    CSharpParser_unary_operator_declarator_return unary_operator_declarator813;
    typedef	CSharpParser_unary_operator_declarator_return RETURN_TYPE_unary_operator_declarator813;

    CSharpParser_overloadable_binary_operator_return overloadable_binary_operator814;
    typedef	CSharpParser_overloadable_binary_operator_return RETURN_TYPE_overloadable_binary_operator814;

    CSharpParser_binary_operator_declarator_return binary_operator_declarator815;
    typedef	CSharpParser_binary_operator_declarator_return RETURN_TYPE_binary_operator_declarator815;

    ImplTraits::TreeType* string_literal805_tree;
    ImplTraits::TreeType* set806_tree;
    ImplTraits::TreeType* char_literal807_tree;

    /* Initialize rule variables
     */
    operator_declarator_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(228)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal805       = NULL;
    set806       = NULL;
    char_literal807       = NULL;
    type808.tree = NULL;

    identifier809.tree = NULL;

    binary_operator_declarator810.tree = NULL;

    unary_operator_declarator811.tree = NULL;

    overloadable_unary_operator812.tree = NULL;

    unary_operator_declarator813.tree = NULL;

    overloadable_binary_operator814.tree = NULL;

    binary_operator_declarator815.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal805_tree   = NULL;
    set806_tree   = NULL;
    char_literal807_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1012:2: ( 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator ) )
        // CSharp.g:1012:4: 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator )
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal805 =  this->matchToken(155, &FOLLOW_155_in_operator_declarator6315);
            if  (this->hasException())
            {
                goto ruleoperator_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal805_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal805));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal805_tree);
            }

            // CSharp.g:1012:17: ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator )
            {
                int alt232=3;
                switch ( this->LA(1) )
                {
                case MINUS:
                case 74:
                	{
                		alt232=1;
                	}
                    break;
                case FALSE:
                case TRUE:
                case 64:
                case 75:
                case 78:
                case 204:
                	{
                		alt232=2;
                	}
                    break;
                case GT:
                case 65:
                case 66:
                case 69:
                case 72:
                case 80:
                case 84:
                case 85:
                case 87:
                case 89:
                case 91:
                case 96:
                case 200:
                	{
                		alt232=3;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 232 );
                    ex->set_state( 0 );


                    goto ruleoperator_declaratorEx;

                }

                switch (alt232)
                {
            	case 1:
            	    // CSharp.g:1013:5: ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator )
            	    {
            	        set806=(const CommonTokenType*) this->LT(1);

            	        if ( this->LA(1) == MINUS || this->LA(1) == 74 )
            	        {
            	            this->consume();
            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
            	            (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set806))
            	            );
            	            this->set_perror_recovery(false);
            	             this->set_failedflag(false); 

            	        }
            	        else
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto ruleoperator_declaratorEx;
            	        }


            	        char_literal807 =  this->matchToken(71, &FOLLOW_71_in_operator_declarator6335);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperator_declaratorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal807_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal807));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal807_tree);
            	        }

            	        this->followPush(FOLLOW_type_in_operator_declarator6339);
            	        type808=type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperator_declaratorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type808.tree);

            	        this->followPush(FOLLOW_identifier_in_operator_declarator6343);
            	        identifier809=identifier();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperator_declaratorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier809.tree);

            	        // CSharp.g:1013:43: ( binary_operator_declarator | unary_operator_declarator )
            	        {
            	            int alt231=2;
            	            switch ( this->LA(1) )
            	            {
            	            case 77:
            	            	{
            	            		alt231=1;
            	            	}
            	                break;
            	            case RPAREN:
            	            	{
            	            		alt231=2;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 231 );
            	                ex->set_state( 0 );


            	                goto ruleoperator_declaratorEx;

            	            }

            	            switch (alt231)
            	            {
            	        	case 1:
            	        	    // CSharp.g:1013:44: binary_operator_declarator
            	        	    {
            	        	        this->followPush(FOLLOW_binary_operator_declarator_in_operator_declarator6346);
            	        	        binary_operator_declarator810=binary_operator_declarator();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleoperator_declaratorEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, binary_operator_declarator810.tree);

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CSharp.g:1013:73: unary_operator_declarator
            	        	    {
            	        	        this->followPush(FOLLOW_unary_operator_declarator_in_operator_declarator6350);
            	        	        unary_operator_declarator811=unary_operator_declarator();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleoperator_declaratorEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unary_operator_declarator811.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // CSharp.g:1014:7: overloadable_unary_operator unary_operator_declarator
            	    {
            	        this->followPush(FOLLOW_overloadable_unary_operator_in_operator_declarator6359);
            	        overloadable_unary_operator812=overloadable_unary_operator();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperator_declaratorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, overloadable_unary_operator812.tree);

            	        this->followPush(FOLLOW_unary_operator_declarator_in_operator_declarator6363);
            	        unary_operator_declarator813=unary_operator_declarator();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperator_declaratorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unary_operator_declarator813.tree);

            	    }
            	    break;
            	case 3:
            	    // CSharp.g:1015:7: overloadable_binary_operator binary_operator_declarator
            	    {
            	        this->followPush(FOLLOW_overloadable_binary_operator_in_operator_declarator6371);
            	        overloadable_binary_operator814=overloadable_binary_operator();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperator_declaratorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, overloadable_binary_operator814.tree);

            	        this->followPush(FOLLOW_binary_operator_declarator_in_operator_declarator6375);
            	        binary_operator_declarator815=binary_operator_declarator();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperator_declaratorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, binary_operator_declarator815.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperator_declaratorEx; /* Prevent compiler warnings */
    ruleoperator_declaratorEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(228, operator_declarator_StartIndex); }

    return retval;
}
/* $ANTLR end operator_declarator */

/**
 * $ANTLR start unary_operator_declarator
 * CSharp.g:1019:1: unary_operator_declarator : ')' ;
 */
CSharpParser_unary_operator_declarator_return
CSharpParser::unary_operator_declarator()
{
    CSharpParser_unary_operator_declarator_return retval(this);

    ANTLR_MARKER unary_operator_declarator_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal816;

    ImplTraits::TreeType* char_literal816_tree;

    /* Initialize rule variables
     */
    unary_operator_declarator_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(229)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal816       = NULL;
    retval.call_start_placeholder(); 


    char_literal816_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1020:2: ( ')' )
        // CSharp.g:1020:4: ')'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal816 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_unary_operator_declarator6396);
            if  (this->hasException())
            {
                goto ruleunary_operator_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal816_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal816));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal816_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleunary_operator_declaratorEx; /* Prevent compiler warnings */
    ruleunary_operator_declaratorEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(229, unary_operator_declarator_StartIndex); }

    return retval;
}
/* $ANTLR end unary_operator_declarator */

/**
 * $ANTLR start overloadable_unary_operator
 * CSharp.g:1023:1: overloadable_unary_operator : ( '!' | '~' | '++' | '--' | 'true' | 'false' );
 */
CSharpParser_overloadable_unary_operator_return
CSharpParser::overloadable_unary_operator()
{
    CSharpParser_overloadable_unary_operator_return retval(this);

    ANTLR_MARKER overloadable_unary_operator_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set817;

    ImplTraits::TreeType* set817_tree;

    /* Initialize rule variables
     */
    overloadable_unary_operator_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(230)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set817       = NULL;
    retval.call_start_placeholder(); 


    set817_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1024:2: ( '!' | '~' | '++' | '--' | 'true' | 'false' )
        // CSharp.g:
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            set817=(const CommonTokenType*) this->LT(1);

            if ( this->LA(1) == FALSE || this->LA(1) == TRUE || this->LA(1) == 64 || this->LA(1) == 75 || this->LA(1) == 78 || this->LA(1) == 204 )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set817))
                );
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruleoverloadable_unary_operatorEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoverloadable_unary_operatorEx; /* Prevent compiler warnings */
    ruleoverloadable_unary_operatorEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(230, overloadable_unary_operator_StartIndex); }

    return retval;
}
/* $ANTLR end overloadable_unary_operator */

/**
 * $ANTLR start binary_operator_declarator
 * CSharp.g:1032:1: binary_operator_declarator : ',' type identifier ')' ;
 */
CSharpParser_binary_operator_declarator_return
CSharpParser::binary_operator_declarator()
{
    CSharpParser_binary_operator_declarator_return retval(this);

    ANTLR_MARKER binary_operator_declarator_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal818;
    const CommonTokenType*    char_literal821;
    CSharpParser_type_return type819;
    typedef	CSharpParser_type_return RETURN_TYPE_type819;

    CSharpParser_identifier_return identifier820;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier820;

    ImplTraits::TreeType* char_literal818_tree;
    ImplTraits::TreeType* char_literal821_tree;

    /* Initialize rule variables
     */
    binary_operator_declarator_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(231)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal818       = NULL;
    char_literal821       = NULL;
    type819.tree = NULL;

    identifier820.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal818_tree   = NULL;
    char_literal821_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1033:2: ( ',' type identifier ')' )
        // CSharp.g:1033:4: ',' type identifier ')'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal818 =  this->matchToken(77, &FOLLOW_77_in_binary_operator_declarator6445);
            if  (this->hasException())
            {
                goto rulebinary_operator_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal818_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal818));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal818_tree);
            }

            this->followPush(FOLLOW_type_in_binary_operator_declarator6449);
            type819=type();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebinary_operator_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type819.tree);

            this->followPush(FOLLOW_identifier_in_binary_operator_declarator6453);
            identifier820=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebinary_operator_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier820.tree);

            char_literal821 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_binary_operator_declarator6457);
            if  (this->hasException())
            {
                goto rulebinary_operator_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal821_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal821));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal821_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulebinary_operator_declaratorEx; /* Prevent compiler warnings */
    rulebinary_operator_declaratorEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(231, binary_operator_declarator_StartIndex); }

    return retval;
}
/* $ANTLR end binary_operator_declarator */

/**
 * $ANTLR start overloadable_binary_operator
 * CSharp.g:1037:1: overloadable_binary_operator : ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' );
 */
CSharpParser_overloadable_binary_operator_return
CSharpParser::overloadable_binary_operator()
{
    CSharpParser_overloadable_binary_operator_return retval(this);

    ANTLR_MARKER overloadable_binary_operator_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal822;
    const CommonTokenType*    char_literal823;
    const CommonTokenType*    char_literal824;
    const CommonTokenType*    char_literal825;
    const CommonTokenType*    char_literal826;
    const CommonTokenType*    char_literal827;
    const CommonTokenType*    string_literal828;
    const CommonTokenType*    char_literal829;
    const CommonTokenType*    char_literal830;
    const CommonTokenType*    string_literal831;
    const CommonTokenType*    string_literal832;
    const CommonTokenType*    char_literal833;
    const CommonTokenType*    char_literal834;
    const CommonTokenType*    string_literal835;
    const CommonTokenType*    string_literal836;

    ImplTraits::TreeType* char_literal822_tree;
    ImplTraits::TreeType* char_literal823_tree;
    ImplTraits::TreeType* char_literal824_tree;
    ImplTraits::TreeType* char_literal825_tree;
    ImplTraits::TreeType* char_literal826_tree;
    ImplTraits::TreeType* char_literal827_tree;
    ImplTraits::TreeType* string_literal828_tree;
    ImplTraits::TreeType* char_literal829_tree;
    ImplTraits::TreeType* char_literal830_tree;
    ImplTraits::TreeType* string_literal831_tree;
    ImplTraits::TreeType* string_literal832_tree;
    ImplTraits::TreeType* char_literal833_tree;
    ImplTraits::TreeType* char_literal834_tree;
    ImplTraits::TreeType* string_literal835_tree;
    ImplTraits::TreeType* string_literal836_tree;

    /* Initialize rule variables
     */
    overloadable_binary_operator_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(232)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal822       = NULL;
    char_literal823       = NULL;
    char_literal824       = NULL;
    char_literal825       = NULL;
    char_literal826       = NULL;
    char_literal827       = NULL;
    string_literal828       = NULL;
    char_literal829       = NULL;
    char_literal830       = NULL;
    string_literal831       = NULL;
    string_literal832       = NULL;
    char_literal833       = NULL;
    char_literal834       = NULL;
    string_literal835       = NULL;
    string_literal836       = NULL;
    retval.call_start_placeholder(); 


    char_literal822_tree   = NULL;
    char_literal823_tree   = NULL;
    char_literal824_tree   = NULL;
    char_literal825_tree   = NULL;
    char_literal826_tree   = NULL;
    char_literal827_tree   = NULL;
    string_literal828_tree   = NULL;
    char_literal829_tree   = NULL;
    char_literal830_tree   = NULL;
    string_literal831_tree   = NULL;
    string_literal832_tree   = NULL;
    char_literal833_tree   = NULL;
    char_literal834_tree   = NULL;
    string_literal835_tree   = NULL;
    string_literal836_tree   = NULL;


    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:1038:2: ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' )

            ANTLR_UINT32 alt233;

            alt233=14;

            switch ( this->LA(1) )
            {
            case 72:
            	{
            		alt233=1;
            	}
                break;
            case 80:
            	{
            		alt233=2;
            	}
                break;
            case 66:
            	{
            		alt233=3;
            	}
                break;
            case 69:
            	{
            		alt233=4;
            	}
                break;
            case 200:
            	{
            		alt233=5;
            	}
                break;
            case 96:
            	{
            		alt233=6;
            	}
                break;
            case 85:
            	{
            		alt233=7;
            	}
                break;
            case GT:
            	{
            		switch ( this->LA(2) )
            		{
            		case GT:
            			{
            				alt233=8;
            			}
            		    break;
            		case 77:
            			{
            				alt233=11;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 233 );
            		    ex->set_state( 8 );


            		    goto ruleoverloadable_binary_operatorEx;

            		}

            	}
                break;
            case 89:
            	{
            		alt233=9;
            	}
                break;
            case 65:
            	{
            		alt233=10;
            	}
                break;
            case 84:
            	{
            		alt233=12;
            	}
                break;
            case 91:
            	{
            		alt233=13;
            	}
                break;
            case 87:
            	{
            		alt233=14;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 233 );
                ex->set_state( 0 );


                goto ruleoverloadable_binary_operatorEx;

            }

            switch (alt233)
            {
        	case 1:
        	    // CSharp.g:1038:21: '*'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        char_literal822 =  this->matchToken(72, &FOLLOW_72_in_overloadable_binary_operator6471);
        	        if  (this->hasException())
        	        {
        	            goto ruleoverloadable_binary_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal822_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal822));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal822_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:1039:4: '/'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        char_literal823 =  this->matchToken(80, &FOLLOW_80_in_overloadable_binary_operator6476);
        	        if  (this->hasException())
        	        {
        	            goto ruleoverloadable_binary_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal823_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal823));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal823_tree);
        	        }

        	    }
        	    break;
        	case 3:
        	    // CSharp.g:1040:4: '%'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        char_literal824 =  this->matchToken(66, &FOLLOW_66_in_overloadable_binary_operator6481);
        	        if  (this->hasException())
        	        {
        	            goto ruleoverloadable_binary_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal824_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal824));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal824_tree);
        	        }

        	    }
        	    break;
        	case 4:
        	    // CSharp.g:1041:4: '&'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        char_literal825 =  this->matchToken(69, &FOLLOW_69_in_overloadable_binary_operator6486);
        	        if  (this->hasException())
        	        {
        	            goto ruleoverloadable_binary_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal825_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal825));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal825_tree);
        	        }

        	    }
        	    break;
        	case 5:
        	    // CSharp.g:1042:4: '|'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        char_literal826 =  this->matchToken(200, &FOLLOW_200_in_overloadable_binary_operator6491);
        	        if  (this->hasException())
        	        {
        	            goto ruleoverloadable_binary_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal826_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal826));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal826_tree);
        	        }

        	    }
        	    break;
        	case 6:
        	    // CSharp.g:1043:4: '^'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        char_literal827 =  this->matchToken(96, &FOLLOW_96_in_overloadable_binary_operator6496);
        	        if  (this->hasException())
        	        {
        	            goto ruleoverloadable_binary_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal827_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal827));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal827_tree);
        	        }

        	    }
        	    break;
        	case 7:
        	    // CSharp.g:1044:4: '<<'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal828 =  this->matchToken(85, &FOLLOW_85_in_overloadable_binary_operator6501);
        	        if  (this->hasException())
        	        {
        	            goto ruleoverloadable_binary_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal828_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal828));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal828_tree);
        	        }

        	    }
        	    break;
        	case 8:
        	    // CSharp.g:1045:4: '>' '>'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        char_literal829 =  this->matchToken(GT, &FOLLOW_GT_in_overloadable_binary_operator6506);
        	        if  (this->hasException())
        	        {
        	            goto ruleoverloadable_binary_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal829_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal829));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal829_tree);
        	        }

        	        char_literal830 =  this->matchToken(GT, &FOLLOW_GT_in_overloadable_binary_operator6508);
        	        if  (this->hasException())
        	        {
        	            goto ruleoverloadable_binary_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal830_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal830));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal830_tree);
        	        }

        	    }
        	    break;
        	case 9:
        	    // CSharp.g:1046:4: '=='
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal831 =  this->matchToken(89, &FOLLOW_89_in_overloadable_binary_operator6513);
        	        if  (this->hasException())
        	        {
        	            goto ruleoverloadable_binary_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal831_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal831));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal831_tree);
        	        }

        	    }
        	    break;
        	case 10:
        	    // CSharp.g:1047:4: '!='
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal832 =  this->matchToken(65, &FOLLOW_65_in_overloadable_binary_operator6518);
        	        if  (this->hasException())
        	        {
        	            goto ruleoverloadable_binary_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal832_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal832));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal832_tree);
        	        }

        	    }
        	    break;
        	case 11:
        	    // CSharp.g:1048:4: '>'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        char_literal833 =  this->matchToken(GT, &FOLLOW_GT_in_overloadable_binary_operator6523);
        	        if  (this->hasException())
        	        {
        	            goto ruleoverloadable_binary_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal833_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal833));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal833_tree);
        	        }

        	    }
        	    break;
        	case 12:
        	    // CSharp.g:1049:4: '<'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        char_literal834 =  this->matchToken(84, &FOLLOW_84_in_overloadable_binary_operator6528);
        	        if  (this->hasException())
        	        {
        	            goto ruleoverloadable_binary_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        char_literal834_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal834));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal834_tree);
        	        }

        	    }
        	    break;
        	case 13:
        	    // CSharp.g:1050:4: '>='
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal835 =  this->matchToken(91, &FOLLOW_91_in_overloadable_binary_operator6533);
        	        if  (this->hasException())
        	        {
        	            goto ruleoverloadable_binary_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal835_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal835));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal835_tree);
        	        }

        	    }
        	    break;
        	case 14:
        	    // CSharp.g:1051:4: '<='
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal836 =  this->matchToken(87, &FOLLOW_87_in_overloadable_binary_operator6538);
        	        if  (this->hasException())
        	        {
        	            goto ruleoverloadable_binary_operatorEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal836_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal836));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal836_tree);
        	        }

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleoverloadable_binary_operatorEx; /* Prevent compiler warnings */
    ruleoverloadable_binary_operatorEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(232, overloadable_binary_operator_StartIndex); }

    return retval;
}
/* $ANTLR end overloadable_binary_operator */

/**
 * $ANTLR start conversion_operator_declaration
 * CSharp.g:1054:1: conversion_operator_declaration : conversion_operator_declarator operator_body ;
 */
CSharpParser_conversion_operator_declaration_return
CSharpParser::conversion_operator_declaration()
{
    CSharpParser_conversion_operator_declaration_return retval(this);

    ANTLR_MARKER conversion_operator_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_conversion_operator_declarator_return conversion_operator_declarator837;
    typedef	CSharpParser_conversion_operator_declarator_return RETURN_TYPE_conversion_operator_declarator837;

    CSharpParser_operator_body_return operator_body838;
    typedef	CSharpParser_operator_body_return RETURN_TYPE_operator_body838;


    /* Initialize rule variables
     */
    conversion_operator_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(233)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    conversion_operator_declarator837.tree = NULL;

    operator_body838.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:1055:2: ( conversion_operator_declarator operator_body )
        // CSharp.g:1055:4: conversion_operator_declarator operator_body
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_conversion_operator_declarator_in_conversion_operator_declaration6550);
            conversion_operator_declarator837=conversion_operator_declarator();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconversion_operator_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, conversion_operator_declarator837.tree);

            this->followPush(FOLLOW_operator_body_in_conversion_operator_declaration6554);
            operator_body838=operator_body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconversion_operator_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, operator_body838.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleconversion_operator_declarationEx; /* Prevent compiler warnings */
    ruleconversion_operator_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(233, conversion_operator_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end conversion_operator_declaration */

/**
 * $ANTLR start conversion_operator_declarator
 * CSharp.g:1058:1: conversion_operator_declarator : ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' ;
 */
CSharpParser_conversion_operator_declarator_return
CSharpParser::conversion_operator_declarator()
{
    CSharpParser_conversion_operator_declarator_return retval(this);

    ANTLR_MARKER conversion_operator_declarator_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set839;
    const CommonTokenType*    string_literal840;
    const CommonTokenType*    char_literal842;
    const CommonTokenType*    char_literal845;
    CSharpParser_type_return type841;
    typedef	CSharpParser_type_return RETURN_TYPE_type841;

    CSharpParser_type_return type843;
    typedef	CSharpParser_type_return RETURN_TYPE_type843;

    CSharpParser_identifier_return identifier844;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier844;

    ImplTraits::TreeType* set839_tree;
    ImplTraits::TreeType* string_literal840_tree;
    ImplTraits::TreeType* char_literal842_tree;
    ImplTraits::TreeType* char_literal845_tree;

    /* Initialize rule variables
     */
    conversion_operator_declarator_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(234)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set839       = NULL;
    string_literal840       = NULL;
    char_literal842       = NULL;
    char_literal845       = NULL;
    type841.tree = NULL;

    type843.tree = NULL;

    identifier844.tree = NULL;
    retval.call_start_placeholder(); 


    set839_tree   = NULL;
    string_literal840_tree   = NULL;
    char_literal842_tree   = NULL;
    char_literal845_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1059:2: ( ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' )
        // CSharp.g:1059:4: ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            set839=(const CommonTokenType*) this->LT(1);

            if ( this->LA(1) == 126 || this->LA(1) == 138 )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set839))
                );
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruleconversion_operator_declaratorEx;
            }


            string_literal840 =  this->matchToken(155, &FOLLOW_155_in_conversion_operator_declarator6574);
            if  (this->hasException())
            {
                goto ruleconversion_operator_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal840_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal840));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal840_tree);
            }

            this->followPush(FOLLOW_type_in_conversion_operator_declarator6578);
            type841=type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconversion_operator_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type841.tree);

            char_literal842 =  this->matchToken(71, &FOLLOW_71_in_conversion_operator_declarator6582);
            if  (this->hasException())
            {
                goto ruleconversion_operator_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal842_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal842));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal842_tree);
            }

            this->followPush(FOLLOW_type_in_conversion_operator_declarator6586);
            type843=type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconversion_operator_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type843.tree);

            this->followPush(FOLLOW_identifier_in_conversion_operator_declarator6590);
            identifier844=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconversion_operator_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier844.tree);

            char_literal845 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_conversion_operator_declarator6594);
            if  (this->hasException())
            {
                goto ruleconversion_operator_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal845_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal845));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal845_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleconversion_operator_declaratorEx; /* Prevent compiler warnings */
    ruleconversion_operator_declaratorEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(234, conversion_operator_declarator_StartIndex); }

    return retval;
}
/* $ANTLR end conversion_operator_declarator */

/**
 * $ANTLR start operator_body
 * CSharp.g:1062:1: operator_body : block ;
 */
CSharpParser_operator_body_return
CSharpParser::operator_body()
{
    CSharpParser_operator_body_return retval(this);

    ANTLR_MARKER operator_body_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_block_return block846;
    typedef	CSharpParser_block_return RETURN_TYPE_block846;


    /* Initialize rule variables
     */
    operator_body_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(235)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    block846.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:1063:2: ( block )
        // CSharp.g:1063:4: block
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_block_in_operator_body6605);
            block846=block();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleoperator_bodyEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block846.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperator_bodyEx; /* Prevent compiler warnings */
    ruleoperator_bodyEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(235, operator_body_StartIndex); }

    return retval;
}
/* $ANTLR end operator_body */

/**
 * $ANTLR start constructor_declaration
 * CSharp.g:1067:1: constructor_declaration : constructor_declarator constructor_body ;
 */
CSharpParser_constructor_declaration_return
CSharpParser::constructor_declaration()
{
    CSharpParser_constructor_declaration_return retval(this);

    ANTLR_MARKER constructor_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_constructor_declarator_return constructor_declarator847;
    typedef	CSharpParser_constructor_declarator_return RETURN_TYPE_constructor_declarator847;

    CSharpParser_constructor_body_return constructor_body848;
    typedef	CSharpParser_constructor_body_return RETURN_TYPE_constructor_body848;


    /* Initialize rule variables
     */
    constructor_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(236)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    constructor_declarator847.tree = NULL;

    constructor_body848.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:1068:2: ( constructor_declarator constructor_body )
        // CSharp.g:1068:4: constructor_declarator constructor_body
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_constructor_declarator_in_constructor_declaration6617);
            constructor_declarator847=constructor_declarator();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconstructor_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constructor_declarator847.tree);

            this->followPush(FOLLOW_constructor_body_in_constructor_declaration6621);
            constructor_body848=constructor_body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconstructor_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constructor_body848.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleconstructor_declarationEx; /* Prevent compiler warnings */
    ruleconstructor_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(236, constructor_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end constructor_declaration */

/**
 * $ANTLR start constructor_declarator
 * CSharp.g:1071:1: constructor_declarator : identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )? ;
 */
CSharpParser_constructor_declarator_return
CSharpParser::constructor_declarator()
{
    CSharpParser_constructor_declarator_return retval(this);

    ANTLR_MARKER constructor_declarator_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal850;
    const CommonTokenType*    char_literal852;
    CSharpParser_identifier_return identifier849;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier849;

    CSharpParser_formal_parameter_list_return formal_parameter_list851;
    typedef	CSharpParser_formal_parameter_list_return RETURN_TYPE_formal_parameter_list851;

    CSharpParser_constructor_initializer_return constructor_initializer853;
    typedef	CSharpParser_constructor_initializer_return RETURN_TYPE_constructor_initializer853;

    ImplTraits::TreeType* char_literal850_tree;
    ImplTraits::TreeType* char_literal852_tree;

    /* Initialize rule variables
     */
    constructor_declarator_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(237)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal850       = NULL;
    char_literal852       = NULL;
    identifier849.tree = NULL;

    formal_parameter_list851.tree = NULL;

    constructor_initializer853.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal850_tree   = NULL;
    char_literal852_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1072:2: ( identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )? )
        // CSharp.g:1072:4: identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )?
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_identifier_in_constructor_declarator6632);
            identifier849=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconstructor_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier849.tree);

            char_literal850 =  this->matchToken(71, &FOLLOW_71_in_constructor_declarator6636);
            if  (this->hasException())
            {
                goto ruleconstructor_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal850_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal850));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal850_tree);
            }

            // CSharp.g:1072:23: ( formal_parameter_list )?
            {
                int alt234=2;
                switch ( this->LA(1) )
                {
                    case IDENTIFIER:
                    case 94:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 106:
                    case 108:
                    case 109:
                    case 111:
                    case 116:
                    case 119:
                    case 121:
                    case 122:
                    case 124:
                    case 128:
                    case 131:
                    case 134:
                    case 137:
                    case 140:
                    case 143:
                    case 145:
                    case 146:
                    case 148:
                    case 149:
                    case 150:
                    case 153:
                    case 154:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 162:
                    case 164:
                    case 168:
                    case 169:
                    case 171:
                    case 173:
                    case 174:
                    case 175:
                    case 179:
                    case 182:
                    case 185:
                    case 187:
                    case 188:
                    case 191:
                    case 192:
                    case 194:
                    case 196:
                    case 198:
                    	{
                    		alt234=1;
                    	}
                        break;
                }

                switch (alt234)
                {
            	case 1:
            	    // CSharp.g:1072:23: formal_parameter_list
            	    {
            	        this->followPush(FOLLOW_formal_parameter_list_in_constructor_declarator6640);
            	        formal_parameter_list851=formal_parameter_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconstructor_declaratorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, formal_parameter_list851.tree);

            	    }
            	    break;

                }
            }

            char_literal852 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_constructor_declarator6645);
            if  (this->hasException())
            {
                goto ruleconstructor_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal852_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal852));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal852_tree);
            }

            // CSharp.g:1072:54: ( constructor_initializer )?
            {
                int alt235=2;
                switch ( this->LA(1) )
                {
                    case 82:
                    	{
                    		alt235=1;
                    	}
                        break;
                }

                switch (alt235)
                {
            	case 1:
            	    // CSharp.g:1072:54: constructor_initializer
            	    {
            	        this->followPush(FOLLOW_constructor_initializer_in_constructor_declarator6649);
            	        constructor_initializer853=constructor_initializer();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconstructor_declaratorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constructor_initializer853.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleconstructor_declaratorEx; /* Prevent compiler warnings */
    ruleconstructor_declaratorEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(237, constructor_declarator_StartIndex); }

    return retval;
}
/* $ANTLR end constructor_declarator */

/**
 * $ANTLR start constructor_initializer
 * CSharp.g:1075:1: constructor_initializer : ':' ( 'base' | 'this' ) '(' ( argument_list )? ')' ;
 */
CSharpParser_constructor_initializer_return
CSharpParser::constructor_initializer()
{
    CSharpParser_constructor_initializer_return retval(this);

    ANTLR_MARKER constructor_initializer_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal854;
    const CommonTokenType*    set855;
    const CommonTokenType*    char_literal856;
    const CommonTokenType*    char_literal858;
    CSharpParser_argument_list_return argument_list857;
    typedef	CSharpParser_argument_list_return RETURN_TYPE_argument_list857;

    ImplTraits::TreeType* char_literal854_tree;
    ImplTraits::TreeType* set855_tree;
    ImplTraits::TreeType* char_literal856_tree;
    ImplTraits::TreeType* char_literal858_tree;

    /* Initialize rule variables
     */
    constructor_initializer_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(238)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal854       = NULL;
    set855       = NULL;
    char_literal856       = NULL;
    char_literal858       = NULL;
    argument_list857.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal854_tree   = NULL;
    set855_tree   = NULL;
    char_literal856_tree   = NULL;
    char_literal858_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1076:2: ( ':' ( 'base' | 'this' ) '(' ( argument_list )? ')' )
        // CSharp.g:1076:4: ':' ( 'base' | 'this' ) '(' ( argument_list )? ')'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal854 =  this->matchToken(82, &FOLLOW_82_in_constructor_initializer6661);
            if  (this->hasException())
            {
                goto ruleconstructor_initializerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal854_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal854));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal854_tree);
            }

            set855=(const CommonTokenType*) this->LT(1);

            if ( this->LA(1) == 105 || this->LA(1) == 182 )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set855))
                );
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruleconstructor_initializerEx;
            }


            char_literal856 =  this->matchToken(71, &FOLLOW_71_in_constructor_initializer6675);
            if  (this->hasException())
            {
                goto ruleconstructor_initializerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal856_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal856));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal856_tree);
            }

            // CSharp.g:1076:36: ( argument_list )?
            {
                int alt236=2;
                switch ( this->LA(1) )
                {
                    case Character_literal:
                    case FALSE:
                    case Hex_number:
                    case IDENTIFIER:
                    case LT_NULL:
                    case MINUS:
                    case NUMBER:
                    case Real_literal:
                    case STRINGLITERAL:
                    case TRUE:
                    case Verbatim_string_literal:
                    case 64:
                    case 69:
                    case 71:
                    case 72:
                    case 74:
                    case 75:
                    case 78:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 108:
                    case 109:
                    case 111:
                    case 112:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 121:
                    case 122:
                    case 124:
                    case 128:
                    case 131:
                    case 134:
                    case 137:
                    case 140:
                    case 143:
                    case 145:
                    case 146:
                    case 148:
                    case 149:
                    case 150:
                    case 152:
                    case 153:
                    case 154:
                    case 156:
                    case 157:
                    case 159:
                    case 162:
                    case 164:
                    case 168:
                    case 169:
                    case 171:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 179:
                    case 182:
                    case 185:
                    case 186:
                    case 187:
                    case 188:
                    case 189:
                    case 191:
                    case 192:
                    case 196:
                    case 198:
                    case 204:
                    	{
                    		alt236=1;
                    	}
                        break;
                }

                switch (alt236)
                {
            	case 1:
            	    // CSharp.g:1076:36: argument_list
            	    {
            	        this->followPush(FOLLOW_argument_list_in_constructor_initializer6679);
            	        argument_list857=argument_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconstructor_initializerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, argument_list857.tree);

            	    }
            	    break;

                }
            }

            char_literal858 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_constructor_initializer6684);
            if  (this->hasException())
            {
                goto ruleconstructor_initializerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal858_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal858));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal858_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleconstructor_initializerEx; /* Prevent compiler warnings */
    ruleconstructor_initializerEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(238, constructor_initializer_StartIndex); }

    return retval;
}
/* $ANTLR end constructor_initializer */

/**
 * $ANTLR start constructor_body
 * CSharp.g:1079:1: constructor_body : block ;
 */
CSharpParser_constructor_body_return
CSharpParser::constructor_body()
{
    CSharpParser_constructor_body_return retval(this);

    ANTLR_MARKER constructor_body_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_block_return block859;
    typedef	CSharpParser_block_return RETURN_TYPE_block859;


    /* Initialize rule variables
     */
    constructor_body_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(239)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    block859.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:1080:2: ( block )
        // CSharp.g:1080:4: block
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_block_in_constructor_body6695);
            block859=block();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconstructor_bodyEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block859.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleconstructor_bodyEx; /* Prevent compiler warnings */
    ruleconstructor_bodyEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(239, constructor_body_StartIndex); }

    return retval;
}
/* $ANTLR end constructor_body */

/**
 * $ANTLR start destructor_declaration
 * CSharp.g:1090:1: destructor_declaration : '~' identifier '(' ')' destructor_body ;
 */
CSharpParser_destructor_declaration_return
CSharpParser::destructor_declaration()
{
    CSharpParser_destructor_declaration_return retval(this);

    ANTLR_MARKER destructor_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal860;
    const CommonTokenType*    char_literal862;
    const CommonTokenType*    char_literal863;
    CSharpParser_identifier_return identifier861;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier861;

    CSharpParser_destructor_body_return destructor_body864;
    typedef	CSharpParser_destructor_body_return RETURN_TYPE_destructor_body864;

    ImplTraits::TreeType* char_literal860_tree;
    ImplTraits::TreeType* char_literal862_tree;
    ImplTraits::TreeType* char_literal863_tree;

    /* Initialize rule variables
     */
    destructor_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(240)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal860       = NULL;
    char_literal862       = NULL;
    char_literal863       = NULL;
    identifier861.tree = NULL;

    destructor_body864.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal860_tree   = NULL;
    char_literal862_tree   = NULL;
    char_literal863_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1091:2: ( '~' identifier '(' ')' destructor_body )
        // CSharp.g:1091:4: '~' identifier '(' ')' destructor_body
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal860 =  this->matchToken(204, &FOLLOW_204_in_destructor_declaration6713);
            if  (this->hasException())
            {
                goto ruledestructor_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal860_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal860));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal860_tree);
            }

            this->followPush(FOLLOW_identifier_in_destructor_declaration6716);
            identifier861=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledestructor_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier861.tree);

            char_literal862 =  this->matchToken(71, &FOLLOW_71_in_destructor_declaration6720);
            if  (this->hasException())
            {
                goto ruledestructor_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal862_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal862));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal862_tree);
            }

            char_literal863 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_destructor_declaration6724);
            if  (this->hasException())
            {
                goto ruledestructor_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal863_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal863));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal863_tree);
            }

            this->followPush(FOLLOW_destructor_body_in_destructor_declaration6729);
            destructor_body864=destructor_body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledestructor_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, destructor_body864.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruledestructor_declarationEx; /* Prevent compiler warnings */
    ruledestructor_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(240, destructor_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end destructor_declaration */

/**
 * $ANTLR start destructor_body
 * CSharp.g:1094:1: destructor_body : block ;
 */
CSharpParser_destructor_body_return
CSharpParser::destructor_body()
{
    CSharpParser_destructor_body_return retval(this);

    ANTLR_MARKER destructor_body_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_block_return block865;
    typedef	CSharpParser_block_return RETURN_TYPE_block865;


    /* Initialize rule variables
     */
    destructor_body_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(241)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    block865.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:1095:2: ( block )
        // CSharp.g:1095:4: block
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_block_in_destructor_body6740);
            block865=block();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledestructor_bodyEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block865.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruledestructor_bodyEx; /* Prevent compiler warnings */
    ruledestructor_bodyEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(241, destructor_body_StartIndex); }

    return retval;
}
/* $ANTLR end destructor_body */

/**
 * $ANTLR start invocation_expression
 * CSharp.g:1099:1: invocation_expression : invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ;
 */
CSharpParser_invocation_expression_return
CSharpParser::invocation_expression()
{
    CSharpParser_invocation_expression_return retval(this);

    ANTLR_MARKER invocation_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_invocation_start_return invocation_start866;
    typedef	CSharpParser_invocation_start_return RETURN_TYPE_invocation_start866;

    CSharpParser_arguments_return arguments867;
    typedef	CSharpParser_arguments_return RETURN_TYPE_arguments867;

    CSharpParser_invocation_part_return invocation_part868;
    typedef	CSharpParser_invocation_part_return RETURN_TYPE_invocation_part868;

    CSharpParser_invocation_part_return invocation_part869;
    typedef	CSharpParser_invocation_part_return RETURN_TYPE_invocation_part869;

    CSharpParser_arguments_return arguments870;
    typedef	CSharpParser_arguments_return RETURN_TYPE_arguments870;


    /* Initialize rule variables
     */
    invocation_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(242)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    invocation_start866.tree = NULL;

    arguments867.tree = NULL;

    invocation_part868.tree = NULL;

    invocation_part869.tree = NULL;

    arguments870.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:1100:2: ( invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
        // CSharp.g:1100:4: invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_invocation_start_in_invocation_expression6752);
            invocation_start866=invocation_start();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinvocation_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, invocation_start866.tree);

            // CSharp.g:1101:3: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )*

            for (;;)
            {
                int alt237=3;
                switch ( this->LA(1) )
                {
                case 71:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    int LA237_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred31_CSharp>() )))
                		    {
                		        alt237=1;
                		    }

                		}
                	}
                    break;
                case DOT:
                case PTR:
                case 94:
                	{
                		alt237=2;
                	}
                    break;

                }

                switch (alt237)
                {
            	case 1:
            	    // CSharp.g:1102:4: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
            	    {
            	        // CSharp.g:1102:4: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
            	        // CSharp.g:1102:5: ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part
            	        {
            	            this->followPush(FOLLOW_arguments_in_invocation_expression6778);
            	            arguments867=arguments();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleinvocation_expressionEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, arguments867.tree);

            	            this->followPush(FOLLOW_invocation_part_in_invocation_expression6782);
            	            invocation_part868=invocation_part();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleinvocation_expressionEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, invocation_part868.tree);

            	        }


            	    }
            	    break;
            	case 2:
            	    // CSharp.g:1103:5: invocation_part
            	    {
            	        this->followPush(FOLLOW_invocation_part_in_invocation_expression6789);
            	        invocation_part869=invocation_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinvocation_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, invocation_part869.tree);

            	    }
            	    break;

            	default:
            	    goto loop237;	/* break out of the loop */
            	    break;
                }
            }
            loop237: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_arguments_in_invocation_expression6798);
            arguments870=arguments();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinvocation_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, arguments870.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleinvocation_expressionEx; /* Prevent compiler warnings */
    ruleinvocation_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(242, invocation_expression_StartIndex); }

    return retval;
}
/* $ANTLR end invocation_expression */

/**
 * $ANTLR start invocation_start
 * CSharp.g:1107:1: invocation_start : ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | 'this' | 'base' | identifier ( '::' identifier )? | typeof_expression );
 */
CSharpParser_invocation_start_return
CSharpParser::invocation_start()
{
    CSharpParser_invocation_start_return retval(this);

    ANTLR_MARKER invocation_start_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal874;
    const CommonTokenType*    string_literal875;
    const CommonTokenType*    string_literal877;
    CSharpParser_predefined_type_return predefined_type871;
    typedef	CSharpParser_predefined_type_return RETURN_TYPE_predefined_type871;

    CSharpParser_identifier_return identifier872;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier872;

    CSharpParser_generic_argument_list_return generic_argument_list873;
    typedef	CSharpParser_generic_argument_list_return RETURN_TYPE_generic_argument_list873;

    CSharpParser_identifier_return identifier876;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier876;

    CSharpParser_identifier_return identifier878;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier878;

    CSharpParser_typeof_expression_return typeof_expression879;
    typedef	CSharpParser_typeof_expression_return RETURN_TYPE_typeof_expression879;

    ImplTraits::TreeType* string_literal874_tree;
    ImplTraits::TreeType* string_literal875_tree;
    ImplTraits::TreeType* string_literal877_tree;

    /* Initialize rule variables
     */
    invocation_start_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(243)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal874       = NULL;
    string_literal875       = NULL;
    string_literal877       = NULL;
    predefined_type871.tree = NULL;

    identifier872.tree = NULL;

    generic_argument_list873.tree = NULL;

    identifier876.tree = NULL;

    identifier878.tree = NULL;

    typeof_expression879.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal874_tree   = NULL;
    string_literal875_tree   = NULL;
    string_literal877_tree   = NULL;


    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:1107:17: ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | 'this' | 'base' | identifier ( '::' identifier )? | typeof_expression )

            ANTLR_UINT32 alt239;

            alt239=6;

            switch ( this->LA(1) )
            {
            case 106:
            case 109:
            case 111:
            case 116:
            case 121:
            case 131:
            case 140:
            case 148:
            case 153:
            case 171:
            case 175:
            case 179:
            case 187:
            case 188:
            case 191:
            	{
            		alt239=1;
            	}
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 134:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
            	{
            		{
            		    int LA239_2 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred32_CSharp>() )) && (LA239_2 == 84))
            		    {
            		        alt239=2;
            		    }
            		    else if ( (LA239_2 == DOT || LA239_2 == PTR || LA239_2 == 71 || LA239_2 == 83 || LA239_2 == 94))
            		    {
            		        alt239=5;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 239 );
            		        ex->set_state( 2 );


            		        goto ruleinvocation_startEx;

            		    }
            		}
            	}
                break;
            case 182:
            	{
            		alt239=3;
            	}
                break;
            case 105:
            	{
            		alt239=4;
            	}
                break;
            case 186:
            	{
            		alt239=6;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 239 );
                ex->set_state( 0 );


                goto ruleinvocation_startEx;

            }

            switch (alt239)
            {
        	case 1:
        	    // CSharp.g:1108:2: predefined_type
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_predefined_type_in_invocation_start6808);
        	        predefined_type871=predefined_type();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinvocation_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, predefined_type871.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:1109:4: ( identifier '<' )=> identifier generic_argument_list
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_identifier_in_invocation_start6825);
        	        identifier872=identifier();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinvocation_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier872.tree);

        	        this->followPush(FOLLOW_generic_argument_list_in_invocation_start6829);
        	        generic_argument_list873=generic_argument_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinvocation_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, generic_argument_list873.tree);

        	    }
        	    break;
        	case 3:
        	    // CSharp.g:1110:4: 'this'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal874 =  this->matchToken(182, &FOLLOW_182_in_invocation_start6834);
        	        if  (this->hasException())
        	        {
        	            goto ruleinvocation_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal874_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal874));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal874_tree);
        	        }

        	    }
        	    break;
        	case 4:
        	    // CSharp.g:1111:4: 'base'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal875 =  this->matchToken(105, &FOLLOW_105_in_invocation_start6840);
        	        if  (this->hasException())
        	        {
        	            goto ruleinvocation_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal875_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal875));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal875_tree);
        	        }

        	    }
        	    break;
        	case 5:
        	    // CSharp.g:1112:4: identifier ( '::' identifier )?
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_identifier_in_invocation_start6845);
        	        identifier876=identifier();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinvocation_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier876.tree);

        	        // CSharp.g:1112:17: ( '::' identifier )?
        	        {
        	            int alt238=2;
        	            switch ( this->LA(1) )
        	            {
        	                case 83:
        	                	{
        	                		alt238=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt238)
        	            {
        	        	case 1:
        	        	    // CSharp.g:1112:18: '::' identifier
        	        	    {
        	        	        string_literal877 =  this->matchToken(83, &FOLLOW_83_in_invocation_start6850);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinvocation_startEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        string_literal877_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal877));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal877_tree);
        	        	        }

        	        	        this->followPush(FOLLOW_identifier_in_invocation_start6854);
        	        	        identifier878=identifier();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinvocation_startEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier878.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 6:
        	    // CSharp.g:1113:4: typeof_expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_typeof_expression_in_invocation_start6861);
        	        typeof_expression879=typeof_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinvocation_startEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, typeof_expression879.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleinvocation_startEx; /* Prevent compiler warnings */
    ruleinvocation_startEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(243, invocation_start_StartIndex); }

    return retval;
}
/* $ANTLR end invocation_start */

/**
 * $ANTLR start invocation_part
 * CSharp.g:1116:1: invocation_part : ( access_identifier | brackets );
 */
CSharpParser_invocation_part_return
CSharpParser::invocation_part()
{
    CSharpParser_invocation_part_return retval(this);

    ANTLR_MARKER invocation_part_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_access_identifier_return access_identifier880;
    typedef	CSharpParser_access_identifier_return RETURN_TYPE_access_identifier880;

    CSharpParser_brackets_return brackets881;
    typedef	CSharpParser_brackets_return RETURN_TYPE_brackets881;


    /* Initialize rule variables
     */
    invocation_part_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(244)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    access_identifier880.tree = NULL;

    brackets881.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:1116:16: ( access_identifier | brackets )

            ANTLR_UINT32 alt240;

            alt240=2;

            switch ( this->LA(1) )
            {
            case DOT:
            case PTR:
            	{
            		alt240=1;
            	}
                break;
            case 94:
            	{
            		alt240=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 240 );
                ex->set_state( 0 );


                goto ruleinvocation_partEx;

            }

            switch (alt240)
            {
        	case 1:
        	    // CSharp.g:1117:3: access_identifier
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_access_identifier_in_invocation_part6885);
        	        access_identifier880=access_identifier();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinvocation_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, access_identifier880.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:1118:4: brackets
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_brackets_in_invocation_part6890);
        	        brackets881=brackets();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinvocation_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, brackets881.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleinvocation_partEx; /* Prevent compiler warnings */
    ruleinvocation_partEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(244, invocation_part_StartIndex); }

    return retval;
}
/* $ANTLR end invocation_part */

/**
 * $ANTLR start statement
 * CSharp.g:1122:1: statement : ( ( declaration_statement )=> declaration_statement | ( identifier ':' )=> labeled_statement | embedded_statement );
 */
CSharpParser_statement_return
CSharpParser::statement()
{
    CSharpParser_statement_return retval(this);

    ANTLR_MARKER statement_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_declaration_statement_return declaration_statement882;
    typedef	CSharpParser_declaration_statement_return RETURN_TYPE_declaration_statement882;

    CSharpParser_labeled_statement_return labeled_statement883;
    typedef	CSharpParser_labeled_statement_return RETURN_TYPE_labeled_statement883;

    CSharpParser_embedded_statement_return embedded_statement884;
    typedef	CSharpParser_embedded_statement_return RETURN_TYPE_embedded_statement884;


    /* Initialize rule variables
     */
    statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(245)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    declaration_statement882.tree = NULL;

    labeled_statement883.tree = NULL;

    embedded_statement884.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:1122:10: ( ( declaration_statement )=> declaration_statement | ( identifier ':' )=> labeled_statement | embedded_statement )

            ANTLR_UINT32 alt241;

            alt241=3;

            {
                int LA241_0 = this->LA(1);
                if ( (LA241_0 == 192))
                {
                    {
                        int LA241_1 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred33_CSharp>() )))
                        {
                            alt241=1;
                        }
                        else if ( (this->msynpred( antlr3::ClassForwarder<synpred34_CSharp>() )))
                        {
                            alt241=2;
                        }
                        else if ( (true))
                        {
                            alt241=3;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 241 );
                            ex->set_state( 1 );


                            goto rulestatementEx;

                        }
                    }
                }
                else if ( (LA241_0 == 122))
                {
                    {
                        int LA241_2 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred33_CSharp>() )))
                        {
                            alt241=1;
                        }
                        else if ( (this->msynpred( antlr3::ClassForwarder<synpred34_CSharp>() )))
                        {
                            alt241=2;
                        }
                        else if ( (true))
                        {
                            alt241=3;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 241 );
                            ex->set_state( 2 );


                            goto rulestatementEx;

                        }
                    }
                }
                else if ( (LA241_0 == 106 || LA241_0 == 109 || LA241_0 == 111 || LA241_0 == 116 || LA241_0 == 121 || LA241_0 == 131 || LA241_0 == 140 || LA241_0 == 148 || LA241_0 == 153 || LA241_0 == 171 || LA241_0 == 175 || LA241_0 == 179 || ((LA241_0 >= 187) && (LA241_0 <= 188)) || LA241_0 == 191))
                {
                    {
                        int LA241_3 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred33_CSharp>() )))
                        {
                            alt241=1;
                        }
                        else if ( (true))
                        {
                            alt241=3;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 241 );
                            ex->set_state( 3 );


                            goto rulestatementEx;

                        }
                    }
                }
                else if ( (LA241_0 == 198))
                {
                    {
                        int LA241_4 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred33_CSharp>() )))
                        {
                            alt241=1;
                        }
                        else if ( (this->msynpred( antlr3::ClassForwarder<synpred34_CSharp>() )))
                        {
                            alt241=2;
                        }
                        else if ( (true))
                        {
                            alt241=3;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 241 );
                            ex->set_state( 4 );


                            goto rulestatementEx;

                        }
                    }
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred33_CSharp>() )) && (LA241_0 == 194))
                {
                    alt241=1;
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred33_CSharp>() )) && (LA241_0 == 114))
                {
                    alt241=1;
                }
                else if ( (LA241_0 == Character_literal || LA241_0 == FALSE || LA241_0 == Hex_number || LA241_0 == IF || ((LA241_0 >= LT_NULL) && (LA241_0 <= NUMBER)) || LA241_0 == Real_literal || ((LA241_0 >= SEMI) && (LA241_0 <= STRINGLITERAL)) || LA241_0 == TRUE || LA241_0 == USING || LA241_0 == Verbatim_string_literal || LA241_0 == 64 || LA241_0 == 69 || ((LA241_0 >= 71) && (LA241_0 <= 72)) || ((LA241_0 >= 74) && (LA241_0 <= 75)) || LA241_0 == 78 || LA241_0 == 105 || LA241_0 == 107 || LA241_0 == 112 || LA241_0 == 115 || ((LA241_0 >= 117) && (LA241_0 <= 118)) || LA241_0 == 120 || LA241_0 == 130 || ((LA241_0 >= 132) && (LA241_0 <= 133)) || LA241_0 == 136 || LA241_0 == 147 || LA241_0 == 152 || LA241_0 == 170 || LA241_0 == 176 || ((LA241_0 >= 181) && (LA241_0 <= 184)) || LA241_0 == 186 || ((LA241_0 >= 189) && (LA241_0 <= 190)) || LA241_0 == 197 || LA241_0 == 199 || LA241_0 == 204))
                {
                    alt241=3;
                }
                else if ( (LA241_0 == 134))
                {
                    {
                        int LA241_25 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred33_CSharp>() )))
                        {
                            alt241=1;
                        }
                        else if ( (this->msynpred( antlr3::ClassForwarder<synpred34_CSharp>() )))
                        {
                            alt241=2;
                        }
                        else if ( (true))
                        {
                            alt241=3;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 241 );
                            ex->set_state( 25 );


                            goto rulestatementEx;

                        }
                    }
                }
                else if ( (LA241_0 == IDENTIFIER || LA241_0 == 98 || ((LA241_0 >= 100) && (LA241_0 <= 101)) || ((LA241_0 >= 103) && (LA241_0 <= 104)) || LA241_0 == 108 || LA241_0 == 119 || LA241_0 == 124 || LA241_0 == 128 || LA241_0 == 137 || LA241_0 == 143 || ((LA241_0 >= 145) && (LA241_0 <= 146)) || ((LA241_0 >= 149) && (LA241_0 <= 150)) || LA241_0 == 154 || LA241_0 == 156 || LA241_0 == 159 || LA241_0 == 162 || LA241_0 == 164 || LA241_0 == 169 || ((LA241_0 >= 173) && (LA241_0 <= 174)) || LA241_0 == 185 || LA241_0 == 196))
                {
                    {
                        int LA241_45 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred33_CSharp>() )))
                        {
                            alt241=1;
                        }
                        else if ( (this->msynpred( antlr3::ClassForwarder<synpred34_CSharp>() )))
                        {
                            alt241=2;
                        }
                        else if ( (true))
                        {
                            alt241=3;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 241 );
                            ex->set_state( 45 );


                            goto rulestatementEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 241 );
                    ex->set_state( 0 );


                    goto rulestatementEx;

                }
            }
            switch (alt241)
            {
        	case 1:
        	    // CSharp.g:1123:2: ( declaration_statement )=> declaration_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_declaration_statement_in_statement6907);
        	        declaration_statement882=declaration_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, declaration_statement882.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:1124:4: ( identifier ':' )=> labeled_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_labeled_statement_in_statement6922);
        	        labeled_statement883=labeled_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, labeled_statement883.tree);

        	    }
        	    break;
        	case 3:
        	    // CSharp.g:1125:4: embedded_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_embedded_statement_in_statement6927);
        	        embedded_statement884=embedded_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, embedded_statement884.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(245, statement_StartIndex); }

    return retval;
}
/* $ANTLR end statement */

/**
 * $ANTLR start embedded_statement
 * CSharp.g:1127:1: embedded_statement : ( block | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement | expression_statement );
 */
CSharpParser_embedded_statement_return
CSharpParser::embedded_statement()
{
    CSharpParser_embedded_statement_return retval(this);

    ANTLR_MARKER embedded_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_block_return block885;
    typedef	CSharpParser_block_return RETURN_TYPE_block885;

    CSharpParser_selection_statement_return selection_statement886;
    typedef	CSharpParser_selection_statement_return RETURN_TYPE_selection_statement886;

    CSharpParser_iteration_statement_return iteration_statement887;
    typedef	CSharpParser_iteration_statement_return RETURN_TYPE_iteration_statement887;

    CSharpParser_jump_statement_return jump_statement888;
    typedef	CSharpParser_jump_statement_return RETURN_TYPE_jump_statement888;

    CSharpParser_try_statement_return try_statement889;
    typedef	CSharpParser_try_statement_return RETURN_TYPE_try_statement889;

    CSharpParser_checked_statement_return checked_statement890;
    typedef	CSharpParser_checked_statement_return RETURN_TYPE_checked_statement890;

    CSharpParser_unchecked_statement_return unchecked_statement891;
    typedef	CSharpParser_unchecked_statement_return RETURN_TYPE_unchecked_statement891;

    CSharpParser_lock_statement_return lock_statement892;
    typedef	CSharpParser_lock_statement_return RETURN_TYPE_lock_statement892;

    CSharpParser_using_statement_return using_statement893;
    typedef	CSharpParser_using_statement_return RETURN_TYPE_using_statement893;

    CSharpParser_yield_statement_return yield_statement894;
    typedef	CSharpParser_yield_statement_return RETURN_TYPE_yield_statement894;

    CSharpParser_unsafe_statement_return unsafe_statement895;
    typedef	CSharpParser_unsafe_statement_return RETURN_TYPE_unsafe_statement895;

    CSharpParser_fixed_statement_return fixed_statement896;
    typedef	CSharpParser_fixed_statement_return RETURN_TYPE_fixed_statement896;

    CSharpParser_expression_statement_return expression_statement897;
    typedef	CSharpParser_expression_statement_return RETURN_TYPE_expression_statement897;


    /* Initialize rule variables
     */
    embedded_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(246)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    block885.tree = NULL;

    selection_statement886.tree = NULL;

    iteration_statement887.tree = NULL;

    jump_statement888.tree = NULL;

    try_statement889.tree = NULL;

    checked_statement890.tree = NULL;

    unchecked_statement891.tree = NULL;

    lock_statement892.tree = NULL;

    using_statement893.tree = NULL;

    yield_statement894.tree = NULL;

    unsafe_statement895.tree = NULL;

    fixed_statement896.tree = NULL;

    expression_statement897.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:1127:19: ( block | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement | expression_statement )

            ANTLR_UINT32 alt242;

            alt242=13;

            switch ( this->LA(1) )
            {
            case SEMI:
            case 199:
            	{
            		alt242=1;
            	}
                break;
            case IF:
            case 181:
            	{
            		alt242=2;
            	}
                break;
            case 120:
            case 132:
            case 133:
            case 197:
            	{
            		alt242=3;
            	}
                break;
            case 107:
            case 115:
            case 136:
            case 170:
            case 183:
            	{
            		alt242=4;
            	}
                break;
            case 184:
            	{
            		alt242=5;
            	}
                break;
            case 112:
            	{
            		switch ( this->LA(2) )
            		{
            		case 71:
            			{
            				alt242=13;
            			}
            		    break;
            		case SEMI:
            		case 199:
            			{
            				alt242=6;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 242 );
            		    ex->set_state( 6 );


            		    goto ruleembedded_statementEx;

            		}

            	}
                break;
            case 189:
            	{
            		switch ( this->LA(2) )
            		{
            		case 71:
            			{
            				alt242=13;
            			}
            		    break;
            		case SEMI:
            		case 199:
            			{
            				alt242=7;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 242 );
            		    ex->set_state( 7 );


            		    goto ruleembedded_statementEx;

            		}

            	}
                break;
            case 147:
            	{
            		alt242=8;
            	}
                break;
            case USING:
            	{
            		alt242=9;
            	}
                break;
            case 198:
            	{
            		switch ( this->LA(2) )
            		{
            		case 107:
            		case 170:
            			{
            				alt242=10;
            			}
            		    break;
            		case DOT:
            		case GT:
            		case MINUS:
            		case PTR:
            		case SEMI:
            		case 65:
            		case 66:
            		case 67:
            		case 68:
            		case 69:
            		case 70:
            		case 71:
            		case 72:
            		case 73:
            		case 74:
            		case 75:
            		case 76:
            		case 77:
            		case 78:
            		case 79:
            		case 80:
            		case 81:
            		case 83:
            		case 84:
            		case 85:
            		case 86:
            		case 87:
            		case 88:
            		case 89:
            		case 90:
            		case 91:
            		case 92:
            		case 93:
            		case 94:
            		case 96:
            		case 97:
            		case 102:
            		case 144:
            		case 200:
            		case 201:
            		case 202:
            			{
            				alt242=13;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 242 );
            		    ex->set_state( 10 );


            		    goto ruleembedded_statementEx;

            		}

            	}
                break;
            case 190:
            	{
            		alt242=11;
            	}
                break;
            case 130:
            	{
            		alt242=12;
            	}
                break;
            case Character_literal:
            case FALSE:
            case Hex_number:
            case IDENTIFIER:
            case LT_NULL:
            case MINUS:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            case 64:
            case 69:
            case 71:
            case 72:
            case 74:
            case 75:
            case 78:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 109:
            case 111:
            case 116:
            case 117:
            case 118:
            case 119:
            case 121:
            case 122:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 152:
            case 153:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 176:
            case 179:
            case 182:
            case 185:
            case 186:
            case 187:
            case 188:
            case 191:
            case 192:
            case 196:
            case 204:
            	{
            		alt242=13;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 242 );
                ex->set_state( 0 );


                goto ruleembedded_statementEx;

            }

            switch (alt242)
            {
        	case 1:
        	    // CSharp.g:1128:2: block
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_block_in_embedded_statement6937);
        	        block885=block();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleembedded_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block885.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:1129:4: selection_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_selection_statement_in_embedded_statement6942);
        	        selection_statement886=selection_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleembedded_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, selection_statement886.tree);

        	    }
        	    break;
        	case 3:
        	    // CSharp.g:1130:4: iteration_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_iteration_statement_in_embedded_statement6948);
        	        iteration_statement887=iteration_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleembedded_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, iteration_statement887.tree);

        	    }
        	    break;
        	case 4:
        	    // CSharp.g:1131:4: jump_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_jump_statement_in_embedded_statement6954);
        	        jump_statement888=jump_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleembedded_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, jump_statement888.tree);

        	    }
        	    break;
        	case 5:
        	    // CSharp.g:1132:4: try_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_try_statement_in_embedded_statement6961);
        	        try_statement889=try_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleembedded_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, try_statement889.tree);

        	    }
        	    break;
        	case 6:
        	    // CSharp.g:1133:4: checked_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_checked_statement_in_embedded_statement6966);
        	        checked_statement890=checked_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleembedded_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, checked_statement890.tree);

        	    }
        	    break;
        	case 7:
        	    // CSharp.g:1134:4: unchecked_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_unchecked_statement_in_embedded_statement6971);
        	        unchecked_statement891=unchecked_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleembedded_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unchecked_statement891.tree);

        	    }
        	    break;
        	case 8:
        	    // CSharp.g:1135:4: lock_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_lock_statement_in_embedded_statement6976);
        	        lock_statement892=lock_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleembedded_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, lock_statement892.tree);

        	    }
        	    break;
        	case 9:
        	    // CSharp.g:1136:4: using_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_using_statement_in_embedded_statement6981);
        	        using_statement893=using_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleembedded_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, using_statement893.tree);

        	    }
        	    break;
        	case 10:
        	    // CSharp.g:1137:4: yield_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_yield_statement_in_embedded_statement6987);
        	        yield_statement894=yield_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleembedded_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, yield_statement894.tree);

        	    }
        	    break;
        	case 11:
        	    // CSharp.g:1138:4: unsafe_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_unsafe_statement_in_embedded_statement6993);
        	        unsafe_statement895=unsafe_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleembedded_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unsafe_statement895.tree);

        	    }
        	    break;
        	case 12:
        	    // CSharp.g:1139:4: fixed_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_fixed_statement_in_embedded_statement6998);
        	        fixed_statement896=fixed_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleembedded_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, fixed_statement896.tree);

        	    }
        	    break;
        	case 13:
        	    // CSharp.g:1140:4: expression_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_expression_statement_in_embedded_statement7003);
        	        expression_statement897=expression_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleembedded_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression_statement897.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleembedded_statementEx; /* Prevent compiler warnings */
    ruleembedded_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(246, embedded_statement_StartIndex); }

    return retval;
}
/* $ANTLR end embedded_statement */

/**
 * $ANTLR start fixed_statement
 * CSharp.g:1142:1: fixed_statement : 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement ;
 */
CSharpParser_fixed_statement_return
CSharpParser::fixed_statement()
{
    CSharpParser_fixed_statement_return retval(this);

    ANTLR_MARKER fixed_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal898;
    const CommonTokenType*    char_literal899;
    const CommonTokenType*    char_literal902;
    CSharpParser_pointer_type_return pointer_type900;
    typedef	CSharpParser_pointer_type_return RETURN_TYPE_pointer_type900;

    CSharpParser_fixed_pointer_declarators_return fixed_pointer_declarators901;
    typedef	CSharpParser_fixed_pointer_declarators_return RETURN_TYPE_fixed_pointer_declarators901;

    CSharpParser_embedded_statement_return embedded_statement903;
    typedef	CSharpParser_embedded_statement_return RETURN_TYPE_embedded_statement903;

    ImplTraits::TreeType* string_literal898_tree;
    ImplTraits::TreeType* char_literal899_tree;
    ImplTraits::TreeType* char_literal902_tree;

    /* Initialize rule variables
     */
    fixed_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(247)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal898       = NULL;
    char_literal899       = NULL;
    char_literal902       = NULL;
    pointer_type900.tree = NULL;

    fixed_pointer_declarators901.tree = NULL;

    embedded_statement903.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal898_tree   = NULL;
    char_literal899_tree   = NULL;
    char_literal902_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1142:16: ( 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement )
        // CSharp.g:1143:2: 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal898 =  this->matchToken(130, &FOLLOW_130_in_fixed_statement7013);
            if  (this->hasException())
            {
                goto rulefixed_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal898_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal898));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal898_tree);
            }

            char_literal899 =  this->matchToken(71, &FOLLOW_71_in_fixed_statement7017);
            if  (this->hasException())
            {
                goto rulefixed_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal899_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal899));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal899_tree);
            }

            this->followPush(FOLLOW_pointer_type_in_fixed_statement7021);
            pointer_type900=pointer_type();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefixed_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, pointer_type900.tree);

            this->followPush(FOLLOW_fixed_pointer_declarators_in_fixed_statement7023);
            fixed_pointer_declarators901=fixed_pointer_declarators();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefixed_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, fixed_pointer_declarators901.tree);

            char_literal902 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_fixed_statement7027);
            if  (this->hasException())
            {
                goto rulefixed_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal902_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal902));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal902_tree);
            }

            this->followPush(FOLLOW_embedded_statement_in_fixed_statement7031);
            embedded_statement903=embedded_statement();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefixed_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, embedded_statement903.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulefixed_statementEx; /* Prevent compiler warnings */
    rulefixed_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(247, fixed_statement_StartIndex); }

    return retval;
}
/* $ANTLR end fixed_statement */

/**
 * $ANTLR start fixed_pointer_declarators
 * CSharp.g:1144:1: fixed_pointer_declarators : fixed_pointer_declarator ( ',' fixed_pointer_declarator )* ;
 */
CSharpParser_fixed_pointer_declarators_return
CSharpParser::fixed_pointer_declarators()
{
    CSharpParser_fixed_pointer_declarators_return retval(this);

    ANTLR_MARKER fixed_pointer_declarators_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal905;
    CSharpParser_fixed_pointer_declarator_return fixed_pointer_declarator904;
    typedef	CSharpParser_fixed_pointer_declarator_return RETURN_TYPE_fixed_pointer_declarator904;

    CSharpParser_fixed_pointer_declarator_return fixed_pointer_declarator906;
    typedef	CSharpParser_fixed_pointer_declarator_return RETURN_TYPE_fixed_pointer_declarator906;

    ImplTraits::TreeType* char_literal905_tree;

    /* Initialize rule variables
     */
    fixed_pointer_declarators_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(248)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal905       = NULL;
    fixed_pointer_declarator904.tree = NULL;

    fixed_pointer_declarator906.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal905_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1144:26: ( fixed_pointer_declarator ( ',' fixed_pointer_declarator )* )
        // CSharp.g:1145:2: fixed_pointer_declarator ( ',' fixed_pointer_declarator )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators7039);
            fixed_pointer_declarator904=fixed_pointer_declarator();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefixed_pointer_declaratorsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, fixed_pointer_declarator904.tree);

            // CSharp.g:1145:29: ( ',' fixed_pointer_declarator )*

            for (;;)
            {
                int alt243=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt243=1;
                	}
                    break;

                }

                switch (alt243)
                {
            	case 1:
            	    // CSharp.g:1145:30: ',' fixed_pointer_declarator
            	    {
            	        char_literal905 =  this->matchToken(77, &FOLLOW_77_in_fixed_pointer_declarators7044);
            	        if  (this->hasException())
            	        {
            	            goto rulefixed_pointer_declaratorsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal905_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal905));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal905_tree);
            	        }

            	        this->followPush(FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators7048);
            	        fixed_pointer_declarator906=fixed_pointer_declarator();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefixed_pointer_declaratorsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, fixed_pointer_declarator906.tree);

            	    }
            	    break;

            	default:
            	    goto loop243;	/* break out of the loop */
            	    break;
                }
            }
            loop243: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulefixed_pointer_declaratorsEx; /* Prevent compiler warnings */
    rulefixed_pointer_declaratorsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(248, fixed_pointer_declarators_StartIndex); }

    return retval;
}
/* $ANTLR end fixed_pointer_declarators */

/**
 * $ANTLR start fixed_pointer_declarator
 * CSharp.g:1146:1: fixed_pointer_declarator : identifier '=' fixed_pointer_initializer ;
 */
CSharpParser_fixed_pointer_declarator_return
CSharpParser::fixed_pointer_declarator()
{
    CSharpParser_fixed_pointer_declarator_return retval(this);

    ANTLR_MARKER fixed_pointer_declarator_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal908;
    CSharpParser_identifier_return identifier907;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier907;

    CSharpParser_fixed_pointer_initializer_return fixed_pointer_initializer909;
    typedef	CSharpParser_fixed_pointer_initializer_return RETURN_TYPE_fixed_pointer_initializer909;

    ImplTraits::TreeType* char_literal908_tree;

    /* Initialize rule variables
     */
    fixed_pointer_declarator_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(249)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal908       = NULL;
    identifier907.tree = NULL;

    fixed_pointer_initializer909.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal908_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1146:25: ( identifier '=' fixed_pointer_initializer )
        // CSharp.g:1147:2: identifier '=' fixed_pointer_initializer
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_identifier_in_fixed_pointer_declarator7058);
            identifier907=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefixed_pointer_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier907.tree);

            char_literal908 =  this->matchToken(88, &FOLLOW_88_in_fixed_pointer_declarator7062);
            if  (this->hasException())
            {
                goto rulefixed_pointer_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal908_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal908));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal908_tree);
            }

            this->followPush(FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator7066);
            fixed_pointer_initializer909=fixed_pointer_initializer();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefixed_pointer_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, fixed_pointer_initializer909.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulefixed_pointer_declaratorEx; /* Prevent compiler warnings */
    rulefixed_pointer_declaratorEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(249, fixed_pointer_declarator_StartIndex); }

    return retval;
}
/* $ANTLR end fixed_pointer_declarator */

/**
 * $ANTLR start fixed_pointer_initializer
 * CSharp.g:1148:1: fixed_pointer_initializer : expression ;
 */
CSharpParser_fixed_pointer_initializer_return
CSharpParser::fixed_pointer_initializer()
{
    CSharpParser_fixed_pointer_initializer_return retval(this);

    ANTLR_MARKER fixed_pointer_initializer_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_expression_return expression910;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression910;


    /* Initialize rule variables
     */
    fixed_pointer_initializer_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(250)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    expression910.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:1148:26: ( expression )
        // CSharp.g:1150:2: expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_expression_in_fixed_pointer_initializer7076);
            expression910=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefixed_pointer_initializerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression910.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulefixed_pointer_initializerEx; /* Prevent compiler warnings */
    rulefixed_pointer_initializerEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(250, fixed_pointer_initializer_StartIndex); }

    return retval;
}
/* $ANTLR end fixed_pointer_initializer */

/**
 * $ANTLR start unsafe_statement
 * CSharp.g:1151:1: unsafe_statement : 'unsafe' block ;
 */
CSharpParser_unsafe_statement_return
CSharpParser::unsafe_statement()
{
    CSharpParser_unsafe_statement_return retval(this);

    ANTLR_MARKER unsafe_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal911;
    CSharpParser_block_return block912;
    typedef	CSharpParser_block_return RETURN_TYPE_block912;

    ImplTraits::TreeType* string_literal911_tree;

    /* Initialize rule variables
     */
    unsafe_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(251)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal911       = NULL;
    block912.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal911_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1151:17: ( 'unsafe' block )
        // CSharp.g:1152:2: 'unsafe' block
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal911 =  this->matchToken(190, &FOLLOW_190_in_unsafe_statement7083);
            if  (this->hasException())
            {
                goto ruleunsafe_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal911_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal911));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal911_tree);
            }

            this->followPush(FOLLOW_block_in_unsafe_statement7087);
            block912=block();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunsafe_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block912.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleunsafe_statementEx; /* Prevent compiler warnings */
    ruleunsafe_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(251, unsafe_statement_StartIndex); }

    return retval;
}
/* $ANTLR end unsafe_statement */

/**
 * $ANTLR start labeled_statement
 * CSharp.g:1153:1: labeled_statement : identifier ':' statement ;
 */
CSharpParser_labeled_statement_return
CSharpParser::labeled_statement()
{
    CSharpParser_labeled_statement_return retval(this);

    ANTLR_MARKER labeled_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal914;
    CSharpParser_identifier_return identifier913;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier913;

    CSharpParser_statement_return statement915;
    typedef	CSharpParser_statement_return RETURN_TYPE_statement915;

    ImplTraits::TreeType* char_literal914_tree;

    /* Initialize rule variables
     */
    labeled_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(252)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal914       = NULL;
    identifier913.tree = NULL;

    statement915.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal914_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1153:18: ( identifier ':' statement )
        // CSharp.g:1154:2: identifier ':' statement
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_identifier_in_labeled_statement7094);
            identifier913=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelabeled_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier913.tree);

            char_literal914 =  this->matchToken(82, &FOLLOW_82_in_labeled_statement7098);
            if  (this->hasException())
            {
                goto rulelabeled_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal914_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal914));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal914_tree);
            }

            this->followPush(FOLLOW_statement_in_labeled_statement7102);
            statement915=statement();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelabeled_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, statement915.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulelabeled_statementEx; /* Prevent compiler warnings */
    rulelabeled_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(252, labeled_statement_StartIndex); }

    return retval;
}
/* $ANTLR end labeled_statement */

/**
 * $ANTLR start declaration_statement
 * CSharp.g:1156:1: declaration_statement : ( local_variable_declaration | local_constant_declaration ) ';' ;
 */
CSharpParser_declaration_statement_return
CSharpParser::declaration_statement()
{
    CSharpParser_declaration_statement_return retval(this);

    ANTLR_MARKER declaration_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal918;
    CSharpParser_local_variable_declaration_return local_variable_declaration916;
    typedef	CSharpParser_local_variable_declaration_return RETURN_TYPE_local_variable_declaration916;

    CSharpParser_local_constant_declaration_return local_constant_declaration917;
    typedef	CSharpParser_local_constant_declaration_return RETURN_TYPE_local_constant_declaration917;

    ImplTraits::TreeType* char_literal918_tree;

    /* Initialize rule variables
     */
    declaration_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(253)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal918       = NULL;
    local_variable_declaration916.tree = NULL;

    local_constant_declaration917.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal918_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1157:2: ( ( local_variable_declaration | local_constant_declaration ) ';' )
        // CSharp.g:1157:4: ( local_variable_declaration | local_constant_declaration ) ';'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:1157:4: ( local_variable_declaration | local_constant_declaration )
            {
                int alt244=2;
                switch ( this->LA(1) )
                {
                case IDENTIFIER:
                case 98:
                case 100:
                case 101:
                case 103:
                case 104:
                case 106:
                case 108:
                case 109:
                case 111:
                case 116:
                case 119:
                case 121:
                case 122:
                case 124:
                case 128:
                case 131:
                case 134:
                case 137:
                case 140:
                case 143:
                case 145:
                case 146:
                case 148:
                case 149:
                case 150:
                case 153:
                case 154:
                case 156:
                case 159:
                case 162:
                case 164:
                case 169:
                case 171:
                case 173:
                case 174:
                case 175:
                case 179:
                case 185:
                case 187:
                case 188:
                case 191:
                case 192:
                case 194:
                case 196:
                case 198:
                	{
                		alt244=1;
                	}
                    break;
                case 114:
                	{
                		alt244=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 244 );
                    ex->set_state( 0 );


                    goto ruledeclaration_statementEx;

                }

                switch (alt244)
                {
            	case 1:
            	    // CSharp.g:1158:4: local_variable_declaration
            	    {
            	        this->followPush(FOLLOW_local_variable_declaration_in_declaration_statement7117);
            	        local_variable_declaration916=local_variable_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledeclaration_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, local_variable_declaration916.tree);

            	    }
            	    break;
            	case 2:
            	    // CSharp.g:1159:5: local_constant_declaration
            	    {
            	        this->followPush(FOLLOW_local_constant_declaration_in_declaration_statement7124);
            	        local_constant_declaration917=local_constant_declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledeclaration_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, local_constant_declaration917.tree);

            	    }
            	    break;

                }
            }

            char_literal918 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_declaration_statement7130);
            if  (this->hasException())
            {
                goto ruledeclaration_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal918_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal918));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal918_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruledeclaration_statementEx; /* Prevent compiler warnings */
    ruledeclaration_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(253, declaration_statement_StartIndex); }

    return retval;
}
/* $ANTLR end declaration_statement */

/**
 * $ANTLR start local_variable_declaration
 * CSharp.g:1163:1: local_variable_declaration : local_variable_type local_variable_declarators -> ^( VARIABLE_DECL local_variable_type local_variable_declarators ) ;
 */
CSharpParser_local_variable_declaration_return
CSharpParser::local_variable_declaration()
{
    CSharpParser_local_variable_declaration_return retval(this);

    ANTLR_MARKER local_variable_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_local_variable_type_return local_variable_type919;
    typedef	CSharpParser_local_variable_type_return RETURN_TYPE_local_variable_type919;

    CSharpParser_local_variable_declarators_return local_variable_declarators920;
    typedef	CSharpParser_local_variable_declarators_return RETURN_TYPE_local_variable_declarators920;

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_local_variable_type;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_local_variable_declarators;
    /* Initialize rule variables
     */
    local_variable_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(254)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    local_variable_type919.tree = NULL;

    local_variable_declarators920.tree = NULL;
    retval.call_start_placeholder(); 



    stream_local_variable_type   = NULL;
    #define CREATE_stream_local_variable_type  if (stream_local_variable_type == NULL) {stream_local_variable_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule local_variable_type"); }
    stream_local_variable_declarators   = NULL;
    #define CREATE_stream_local_variable_declarators  if (stream_local_variable_declarators == NULL) {stream_local_variable_declarators = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule local_variable_declarators"); }

    retval.tree  = NULL;


 
    {
        // CSharp.g:1164:2: ( local_variable_type local_variable_declarators -> ^( VARIABLE_DECL local_variable_type local_variable_declarators ) )
        // CSharp.g:1164:4: local_variable_type local_variable_declarators
        {
            this->followPush(FOLLOW_local_variable_type_in_local_variable_declaration7142);
            local_variable_type919=local_variable_type();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelocal_variable_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) { CREATE_stream_local_variable_type; stream_local_variable_type->add(stream_local_variable_type, local_variable_type919.tree, NULL); }

            this->followPush(FOLLOW_local_variable_declarators_in_local_variable_declaration7146);
            local_variable_declarators920=local_variable_declarators();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelocal_variable_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) { CREATE_stream_local_variable_declarators; stream_local_variable_declarators->add(stream_local_variable_declarators, local_variable_declarators920.tree, NULL); }

            /* AST REWRITE
             * elements          : local_variable_type, local_variable_declarators
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( this->get_backtracking()==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 1164:53: -> ^( VARIABLE_DECL local_variable_type local_variable_declarators )
            	{
            	    // CSharp.g:1164:56: ^( VARIABLE_DECL local_variable_type local_variable_declarators )
            	    {
            	        ImplTraits::TreeType* root_1 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (ImplTraits::TreeType*)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (ImplTraits::TreeType*)ADAPTOR->createTypeText(ADAPTOR, VARIABLE_DECL, (pANTLR3_UINT8)"VARIABLE_DECL")
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_local_variable_type == NULL ? NULL : stream_local_variable_type->nextTree(stream_local_variable_type));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_local_variable_declarators == NULL ? NULL : stream_local_variable_declarators->nextTree(stream_local_variable_declarators));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    // This is where rules clean up and exit
    //
    goto rulelocal_variable_declarationEx; /* Prevent compiler warnings */
    rulelocal_variable_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_local_variable_type != NULL) stream_local_variable_type->free(stream_local_variable_type);
        if (stream_local_variable_declarators != NULL) stream_local_variable_declarators->free(stream_local_variable_declarators);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(254, local_variable_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end local_variable_declaration */

/**
 * $ANTLR start local_variable_type
 * CSharp.g:1167:1: local_variable_type : ( ( 'var' )=> 'var' | ( 'dynamic' )=> 'dynamic' | type );
 */
CSharpParser_local_variable_type_return
CSharpParser::local_variable_type()
{
    CSharpParser_local_variable_type_return retval(this);

    ANTLR_MARKER local_variable_type_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal921;
    const CommonTokenType*    string_literal922;
    CSharpParser_type_return type923;
    typedef	CSharpParser_type_return RETURN_TYPE_type923;

    ImplTraits::TreeType* string_literal921_tree;
    ImplTraits::TreeType* string_literal922_tree;

    /* Initialize rule variables
     */
    local_variable_type_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(255)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal921       = NULL;
    string_literal922       = NULL;
    type923.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal921_tree   = NULL;
    string_literal922_tree   = NULL;


    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:1167:20: ( ( 'var' )=> 'var' | ( 'dynamic' )=> 'dynamic' | type )

            ANTLR_UINT32 alt245;

            alt245=3;

            switch ( this->LA(1) )
            {
            case 192:
            	{
            		{
            		    int LA245_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred35_CSharp>() )))
            		    {
            		        alt245=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt245=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 245 );
            		        ex->set_state( 1 );


            		        goto rulelocal_variable_typeEx;

            		    }
            		}
            	}
                break;
            case 122:
            	{
            		{
            		    int LA245_2 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred36_CSharp>() )))
            		    {
            		        alt245=2;
            		    }
            		    else if ( (true))
            		    {
            		        alt245=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 245 );
            		        ex->set_state( 2 );


            		        goto rulelocal_variable_typeEx;

            		    }
            		}
            	}
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 106:
            case 108:
            case 109:
            case 111:
            case 116:
            case 119:
            case 121:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 153:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 179:
            case 185:
            case 187:
            case 188:
            case 191:
            case 194:
            case 196:
            case 198:
            	{
            		alt245=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 245 );
                ex->set_state( 0 );


                goto rulelocal_variable_typeEx;

            }

            switch (alt245)
            {
        	case 1:
        	    // CSharp.g:1168:2: ( 'var' )=> 'var'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal921 =  this->matchToken(192, &FOLLOW_192_in_local_variable_type7174);
        	        if  (this->hasException())
        	        {
        	            goto rulelocal_variable_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal921_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal921));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal921_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:1169:4: ( 'dynamic' )=> 'dynamic'
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal922 =  this->matchToken(122, &FOLLOW_122_in_local_variable_type7185);
        	        if  (this->hasException())
        	        {
        	            goto rulelocal_variable_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        string_literal922_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal922));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal922_tree);
        	        }

        	    }
        	    break;
        	case 3:
        	    // CSharp.g:1170:4: type
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_type_in_local_variable_type7190);
        	        type923=type();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelocal_variable_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type923.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulelocal_variable_typeEx; /* Prevent compiler warnings */
    rulelocal_variable_typeEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(255, local_variable_type_StartIndex); }

    return retval;
}
/* $ANTLR end local_variable_type */

/**
 * $ANTLR start local_variable_declarators
 * CSharp.g:1172:1: local_variable_declarators : local_variable_declarator ( ',' local_variable_declarator )* -> ( local_variable_declarator )+ ;
 */
CSharpParser_local_variable_declarators_return
CSharpParser::local_variable_declarators()
{
    CSharpParser_local_variable_declarators_return retval(this);

    ANTLR_MARKER local_variable_declarators_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal925;
    CSharpParser_local_variable_declarator_return local_variable_declarator924;
    typedef	CSharpParser_local_variable_declarator_return RETURN_TYPE_local_variable_declarator924;

    CSharpParser_local_variable_declarator_return local_variable_declarator926;
    typedef	CSharpParser_local_variable_declarator_return RETURN_TYPE_local_variable_declarator926;

    ImplTraits::TreeType* char_literal925_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_77;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_local_variable_declarator;
    /* Initialize rule variables
     */
    local_variable_declarators_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(256)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal925       = NULL;
    local_variable_declarator924.tree = NULL;

    local_variable_declarator926.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal925_tree   = NULL;

    stream_77   = NULL;
    #define CREATE_stream_77  if (stream_77 == NULL) {stream_77 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 77"); } 
    stream_local_variable_declarator   = NULL;
    #define CREATE_stream_local_variable_declarator  if (stream_local_variable_declarator == NULL) {stream_local_variable_declarator = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule local_variable_declarator"); }

    retval.tree  = NULL;


 
    {
        // CSharp.g:1173:2: ( local_variable_declarator ( ',' local_variable_declarator )* -> ( local_variable_declarator )+ )
        // CSharp.g:1173:4: local_variable_declarator ( ',' local_variable_declarator )*
        {
            this->followPush(FOLLOW_local_variable_declarator_in_local_variable_declarators7200);
            local_variable_declarator924=local_variable_declarator();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelocal_variable_declaratorsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) { CREATE_stream_local_variable_declarator; stream_local_variable_declarator->add(stream_local_variable_declarator, local_variable_declarator924.tree, NULL); }

            // CSharp.g:1173:30: ( ',' local_variable_declarator )*

            for (;;)
            {
                int alt246=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt246=1;
                	}
                    break;

                }

                switch (alt246)
                {
            	case 1:
            	    // CSharp.g:1173:31: ',' local_variable_declarator
            	    {
            	        char_literal925 =  this->matchToken(77, &FOLLOW_77_in_local_variable_declarators7203);
            	        if  (this->hasException())
            	        {
            	            goto rulelocal_variable_declaratorsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) { CREATE_stream_77; stream_77->add(stream_77, char_literal925, NULL); }


            	        this->followPush(FOLLOW_local_variable_declarator_in_local_variable_declarators7205);
            	        local_variable_declarator926=local_variable_declarator();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelocal_variable_declaratorsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) { CREATE_stream_local_variable_declarator; stream_local_variable_declarator->add(stream_local_variable_declarator, local_variable_declarator926.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop246;	/* break out of the loop */
            	    break;
                }
            }
            loop246: ; /* Jump out to here if this rule does not match */


            /* AST REWRITE
             * elements          : local_variable_declarator
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( this->get_backtracking()==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 1173:63: -> ( local_variable_declarator )+
            	{
            	    if ((stream_local_variable_declarator == NULL || !stream_local_variable_declarator->hasNext(stream_local_variable_declarator))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_local_variable_declarator->hasNext(stream_local_variable_declarator))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_local_variable_declarator == NULL ? NULL : stream_local_variable_declarator->nextTree(stream_local_variable_declarator));

            	    	}
            	    	stream_local_variable_declarator->reset(stream_local_variable_declarator);

            	    }
            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    // This is where rules clean up and exit
    //
    goto rulelocal_variable_declaratorsEx; /* Prevent compiler warnings */
    rulelocal_variable_declaratorsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_77 != NULL) stream_77->free(stream_77);
        if (stream_local_variable_declarator != NULL) stream_local_variable_declarator->free(stream_local_variable_declarator);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(256, local_variable_declarators_StartIndex); }

    return retval;
}
/* $ANTLR end local_variable_declarators */

/**
 * $ANTLR start local_variable_declarator
 * CSharp.g:1176:1: local_variable_declarator : identifier ( '=' ^ local_variable_initializer )? ;
 */
CSharpParser_local_variable_declarator_return
CSharpParser::local_variable_declarator()
{
    CSharpParser_local_variable_declarator_return retval(this);

    ANTLR_MARKER local_variable_declarator_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal928;
    CSharpParser_identifier_return identifier927;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier927;

    CSharpParser_local_variable_initializer_return local_variable_initializer929;
    typedef	CSharpParser_local_variable_initializer_return RETURN_TYPE_local_variable_initializer929;

    ImplTraits::TreeType* char_literal928_tree;

    /* Initialize rule variables
     */
    local_variable_declarator_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(257)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal928       = NULL;
    identifier927.tree = NULL;

    local_variable_initializer929.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal928_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1177:2: ( identifier ( '=' ^ local_variable_initializer )? )
        // CSharp.g:1177:4: identifier ( '=' ^ local_variable_initializer )?
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_identifier_in_local_variable_declarator7224);
            identifier927=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelocal_variable_declaratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier927.tree);

            // CSharp.g:1177:15: ( '=' ^ local_variable_initializer )?
            {
                int alt247=2;
                switch ( this->LA(1) )
                {
                    case 88:
                    	{
                    		alt247=1;
                    	}
                        break;
                }

                switch (alt247)
                {
            	case 1:
            	    // CSharp.g:1177:16: '=' ^ local_variable_initializer
            	    {
            	        char_literal928 =  this->matchToken(88, &FOLLOW_88_in_local_variable_declarator7227);
            	        if  (this->hasException())
            	        {
            	            goto rulelocal_variable_declaratorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal928_tree = 
            	        (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal928))
            	        ;
            	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->becomeRoot(ADAPTOR, char_literal928_tree, root_0));
            	        }

            	        this->followPush(FOLLOW_local_variable_initializer_in_local_variable_declarator7230);
            	        local_variable_initializer929=local_variable_initializer();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelocal_variable_declaratorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, local_variable_initializer929.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulelocal_variable_declaratorEx; /* Prevent compiler warnings */
    rulelocal_variable_declaratorEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(257, local_variable_declarator_StartIndex); }

    return retval;
}
/* $ANTLR end local_variable_declarator */

/**
 * $ANTLR start local_variable_initializer
 * CSharp.g:1180:1: local_variable_initializer : ( expression | array_initializer | stackalloc_initializer );
 */
CSharpParser_local_variable_initializer_return
CSharpParser::local_variable_initializer()
{
    CSharpParser_local_variable_initializer_return retval(this);

    ANTLR_MARKER local_variable_initializer_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_expression_return expression930;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression930;

    CSharpParser_array_initializer_return array_initializer931;
    typedef	CSharpParser_array_initializer_return RETURN_TYPE_array_initializer931;

    CSharpParser_stackalloc_initializer_return stackalloc_initializer932;
    typedef	CSharpParser_stackalloc_initializer_return RETURN_TYPE_stackalloc_initializer932;


    /* Initialize rule variables
     */
    local_variable_initializer_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(258)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    expression930.tree = NULL;

    array_initializer931.tree = NULL;

    stackalloc_initializer932.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:1181:2: ( expression | array_initializer | stackalloc_initializer )

            ANTLR_UINT32 alt248;

            alt248=3;

            switch ( this->LA(1) )
            {
            case Character_literal:
            case FALSE:
            case Hex_number:
            case IDENTIFIER:
            case LT_NULL:
            case MINUS:
            case NUMBER:
            case Real_literal:
            case STRINGLITERAL:
            case TRUE:
            case Verbatim_string_literal:
            case 64:
            case 69:
            case 71:
            case 72:
            case 74:
            case 75:
            case 78:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 109:
            case 111:
            case 112:
            case 116:
            case 117:
            case 118:
            case 119:
            case 121:
            case 122:
            case 124:
            case 128:
            case 131:
            case 134:
            case 137:
            case 140:
            case 143:
            case 145:
            case 146:
            case 148:
            case 149:
            case 150:
            case 152:
            case 153:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 171:
            case 173:
            case 174:
            case 175:
            case 176:
            case 179:
            case 182:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 191:
            case 192:
            case 196:
            case 198:
            case 204:
            	{
            		alt248=1;
            	}
                break;
            case 199:
            	{
            		alt248=2;
            	}
                break;
            case 177:
            	{
            		alt248=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 248 );
                ex->set_state( 0 );


                goto rulelocal_variable_initializerEx;

            }

            switch (alt248)
            {
        	case 1:
        	    // CSharp.g:1181:4: expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_expression_in_local_variable_initializer7244);
        	        expression930=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelocal_variable_initializerEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression930.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:1182:4: array_initializer
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_array_initializer_in_local_variable_initializer7249);
        	        array_initializer931=array_initializer();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelocal_variable_initializerEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, array_initializer931.tree);

        	    }
        	    break;
        	case 3:
        	    // CSharp.g:1183:4: stackalloc_initializer
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_stackalloc_initializer_in_local_variable_initializer7255);
        	        stackalloc_initializer932=stackalloc_initializer();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelocal_variable_initializerEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, stackalloc_initializer932.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulelocal_variable_initializerEx; /* Prevent compiler warnings */
    rulelocal_variable_initializerEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(258, local_variable_initializer_StartIndex); }

    return retval;
}
/* $ANTLR end local_variable_initializer */

/**
 * $ANTLR start stackalloc_initializer
 * CSharp.g:1186:1: stackalloc_initializer : 'stackalloc' unmanaged_type '[' expression ']' ;
 */
CSharpParser_stackalloc_initializer_return
CSharpParser::stackalloc_initializer()
{
    CSharpParser_stackalloc_initializer_return retval(this);

    ANTLR_MARKER stackalloc_initializer_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal933;
    const CommonTokenType*    char_literal935;
    const CommonTokenType*    char_literal937;
    CSharpParser_unmanaged_type_return unmanaged_type934;
    typedef	CSharpParser_unmanaged_type_return RETURN_TYPE_unmanaged_type934;

    CSharpParser_expression_return expression936;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression936;

    ImplTraits::TreeType* string_literal933_tree;
    ImplTraits::TreeType* char_literal935_tree;
    ImplTraits::TreeType* char_literal937_tree;

    /* Initialize rule variables
     */
    stackalloc_initializer_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(259)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal933       = NULL;
    char_literal935       = NULL;
    char_literal937       = NULL;
    unmanaged_type934.tree = NULL;

    expression936.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal933_tree   = NULL;
    char_literal935_tree   = NULL;
    char_literal937_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1186:23: ( 'stackalloc' unmanaged_type '[' expression ']' )
        // CSharp.g:1187:2: 'stackalloc' unmanaged_type '[' expression ']'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal933 =  this->matchToken(177, &FOLLOW_177_in_stackalloc_initializer7265);
            if  (this->hasException())
            {
                goto rulestackalloc_initializerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal933_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal933));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal933_tree);
            }

            this->followPush(FOLLOW_unmanaged_type_in_stackalloc_initializer7269);
            unmanaged_type934=unmanaged_type();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestackalloc_initializerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unmanaged_type934.tree);

            char_literal935 =  this->matchToken(94, &FOLLOW_94_in_stackalloc_initializer7273);
            if  (this->hasException())
            {
                goto rulestackalloc_initializerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal935_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal935));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal935_tree);
            }

            this->followPush(FOLLOW_expression_in_stackalloc_initializer7277);
            expression936=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestackalloc_initializerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression936.tree);

            char_literal937 =  this->matchToken(95, &FOLLOW_95_in_stackalloc_initializer7281);
            if  (this->hasException())
            {
                goto rulestackalloc_initializerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal937_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal937));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal937_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulestackalloc_initializerEx; /* Prevent compiler warnings */
    rulestackalloc_initializerEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(259, stackalloc_initializer_StartIndex); }

    return retval;
}
/* $ANTLR end stackalloc_initializer */

/**
 * $ANTLR start local_constant_declaration
 * CSharp.g:1188:1: local_constant_declaration : 'const' type constant_declarators ;
 */
CSharpParser_local_constant_declaration_return
CSharpParser::local_constant_declaration()
{
    CSharpParser_local_constant_declaration_return retval(this);

    ANTLR_MARKER local_constant_declaration_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal938;
    CSharpParser_type_return type939;
    typedef	CSharpParser_type_return RETURN_TYPE_type939;

    CSharpParser_constant_declarators_return constant_declarators940;
    typedef	CSharpParser_constant_declarators_return RETURN_TYPE_constant_declarators940;

    ImplTraits::TreeType* string_literal938_tree;

    /* Initialize rule variables
     */
    local_constant_declaration_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(260)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal938       = NULL;
    type939.tree = NULL;

    constant_declarators940.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal938_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1188:27: ( 'const' type constant_declarators )
        // CSharp.g:1189:2: 'const' type constant_declarators
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal938 =  this->matchToken(114, &FOLLOW_114_in_local_constant_declaration7289);
            if  (this->hasException())
            {
                goto rulelocal_constant_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal938_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal938));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal938_tree);
            }

            this->followPush(FOLLOW_type_in_local_constant_declaration7293);
            type939=type();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelocal_constant_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type939.tree);

            this->followPush(FOLLOW_constant_declarators_in_local_constant_declaration7297);
            constant_declarators940=constant_declarators();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelocal_constant_declarationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constant_declarators940.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulelocal_constant_declarationEx; /* Prevent compiler warnings */
    rulelocal_constant_declarationEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(260, local_constant_declaration_StartIndex); }

    return retval;
}
/* $ANTLR end local_constant_declaration */

/**
 * $ANTLR start expression_statement
 * CSharp.g:1190:1: expression_statement : expression ';' ;
 */
CSharpParser_expression_statement_return
CSharpParser::expression_statement()
{
    CSharpParser_expression_statement_return retval(this);

    ANTLR_MARKER expression_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal942;
    CSharpParser_expression_return expression941;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression941;

    ImplTraits::TreeType* char_literal942_tree;

    /* Initialize rule variables
     */
    expression_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(261)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal942       = NULL;
    expression941.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal942_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1190:21: ( expression ';' )
        // CSharp.g:1191:2: expression ';'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_expression_in_expression_statement7305);
            expression941=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpression_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression941.tree);

            char_literal942 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_expression_statement7309);
            if  (this->hasException())
            {
                goto ruleexpression_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal942_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal942));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal942_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexpression_statementEx; /* Prevent compiler warnings */
    ruleexpression_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(261, expression_statement_StartIndex); }

    return retval;
}
/* $ANTLR end expression_statement */

/**
 * $ANTLR start statement_expression
 * CSharp.g:1194:1: statement_expression : expression ;
 */
CSharpParser_statement_expression_return
CSharpParser::statement_expression()
{
    CSharpParser_statement_expression_return retval(this);

    ANTLR_MARKER statement_expression_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_expression_return expression943;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression943;


    /* Initialize rule variables
     */
    statement_expression_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(262)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    expression943.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:1194:21: ( expression )
        // CSharp.g:1195:2: expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_expression_in_statement_expression7319);
            expression943=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestatement_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression943.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulestatement_expressionEx; /* Prevent compiler warnings */
    rulestatement_expressionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(262, statement_expression_StartIndex); }

    return retval;
}
/* $ANTLR end statement_expression */

/**
 * $ANTLR start selection_statement
 * CSharp.g:1197:1: selection_statement : ( if_statement | switch_statement );
 */
CSharpParser_selection_statement_return
CSharpParser::selection_statement()
{
    CSharpParser_selection_statement_return retval(this);

    ANTLR_MARKER selection_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_if_statement_return if_statement944;
    typedef	CSharpParser_if_statement_return RETURN_TYPE_if_statement944;

    CSharpParser_switch_statement_return switch_statement945;
    typedef	CSharpParser_switch_statement_return RETURN_TYPE_switch_statement945;


    /* Initialize rule variables
     */
    selection_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(263)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    if_statement944.tree = NULL;

    switch_statement945.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:1197:20: ( if_statement | switch_statement )

            ANTLR_UINT32 alt249;

            alt249=2;

            switch ( this->LA(1) )
            {
            case IF:
            	{
            		alt249=1;
            	}
                break;
            case 181:
            	{
            		alt249=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 249 );
                ex->set_state( 0 );


                goto ruleselection_statementEx;

            }

            switch (alt249)
            {
        	case 1:
        	    // CSharp.g:1198:2: if_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_if_statement_in_selection_statement7328);
        	        if_statement944=if_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleselection_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, if_statement944.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:1199:4: switch_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_switch_statement_in_selection_statement7333);
        	        switch_statement945=switch_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleselection_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, switch_statement945.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleselection_statementEx; /* Prevent compiler warnings */
    ruleselection_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(263, selection_statement_StartIndex); }

    return retval;
}
/* $ANTLR end selection_statement */

/**
 * $ANTLR start if_statement
 * CSharp.g:1200:1: if_statement : 'if' '(' boolean_expression ')' embedded_statement ( ( 'else' )=> else_statement )? ;
 */
CSharpParser_if_statement_return
CSharpParser::if_statement()
{
    CSharpParser_if_statement_return retval(this);

    ANTLR_MARKER if_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal946;
    const CommonTokenType*    char_literal947;
    const CommonTokenType*    char_literal949;
    CSharpParser_boolean_expression_return boolean_expression948;
    typedef	CSharpParser_boolean_expression_return RETURN_TYPE_boolean_expression948;

    CSharpParser_embedded_statement_return embedded_statement950;
    typedef	CSharpParser_embedded_statement_return RETURN_TYPE_embedded_statement950;

    CSharpParser_else_statement_return else_statement951;
    typedef	CSharpParser_else_statement_return RETURN_TYPE_else_statement951;

    ImplTraits::TreeType* string_literal946_tree;
    ImplTraits::TreeType* char_literal947_tree;
    ImplTraits::TreeType* char_literal949_tree;

    /* Initialize rule variables
     */
    if_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(264)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal946       = NULL;
    char_literal947       = NULL;
    char_literal949       = NULL;
    boolean_expression948.tree = NULL;

    embedded_statement950.tree = NULL;

    else_statement951.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal946_tree   = NULL;
    char_literal947_tree   = NULL;
    char_literal949_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1200:13: ( 'if' '(' boolean_expression ')' embedded_statement ( ( 'else' )=> else_statement )? )
        // CSharp.g:1202:2: 'if' '(' boolean_expression ')' embedded_statement ( ( 'else' )=> else_statement )?
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal946 =  this->matchToken(IF, &FOLLOW_IF_in_if_statement7343);
            if  (this->hasException())
            {
                goto ruleif_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal946_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal946));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal946_tree);
            }

            char_literal947 =  this->matchToken(71, &FOLLOW_71_in_if_statement7347);
            if  (this->hasException())
            {
                goto ruleif_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal947_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal947));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal947_tree);
            }

            this->followPush(FOLLOW_boolean_expression_in_if_statement7351);
            boolean_expression948=boolean_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleif_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, boolean_expression948.tree);

            char_literal949 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_if_statement7355);
            if  (this->hasException())
            {
                goto ruleif_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal949_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal949));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal949_tree);
            }

            this->followPush(FOLLOW_embedded_statement_in_if_statement7359);
            embedded_statement950=embedded_statement();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleif_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, embedded_statement950.tree);

            // CSharp.g:1202:61: ( ( 'else' )=> else_statement )?
            {
                int alt250=2;
                switch ( this->LA(1) )
                {
                    case 123:
                    	{
                    		{
                    		    int LA250_1 = this->LA(2);
                    		    if ( (this->msynpred( antlr3::ClassForwarder<synpred37_CSharp>() )))
                    		    {
                    		        alt250=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt250)
                {
            	case 1:
            	    // CSharp.g:1202:62: ( 'else' )=> else_statement
            	    {
            	        this->followPush(FOLLOW_else_statement_in_if_statement7368);
            	        else_statement951=else_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleif_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, else_statement951.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleif_statementEx; /* Prevent compiler warnings */
    ruleif_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(264, if_statement_StartIndex); }

    return retval;
}
/* $ANTLR end if_statement */

/**
 * $ANTLR start else_statement
 * CSharp.g:1204:1: else_statement : 'else' embedded_statement ;
 */
CSharpParser_else_statement_return
CSharpParser::else_statement()
{
    CSharpParser_else_statement_return retval(this);

    ANTLR_MARKER else_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal952;
    CSharpParser_embedded_statement_return embedded_statement953;
    typedef	CSharpParser_embedded_statement_return RETURN_TYPE_embedded_statement953;

    ImplTraits::TreeType* string_literal952_tree;

    /* Initialize rule variables
     */
    else_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(265)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal952       = NULL;
    embedded_statement953.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal952_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1204:15: ( 'else' embedded_statement )
        // CSharp.g:1205:2: 'else' embedded_statement
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal952 =  this->matchToken(123, &FOLLOW_123_in_else_statement7379);
            if  (this->hasException())
            {
                goto ruleelse_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal952_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal952));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal952_tree);
            }

            this->followPush(FOLLOW_embedded_statement_in_else_statement7383);
            embedded_statement953=embedded_statement();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelse_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, embedded_statement953.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleelse_statementEx; /* Prevent compiler warnings */
    ruleelse_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(265, else_statement_StartIndex); }

    return retval;
}
/* $ANTLR end else_statement */

/**
 * $ANTLR start switch_statement
 * CSharp.g:1206:1: switch_statement : 'switch' '(' expression ')' switch_block ;
 */
CSharpParser_switch_statement_return
CSharpParser::switch_statement()
{
    CSharpParser_switch_statement_return retval(this);

    ANTLR_MARKER switch_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal954;
    const CommonTokenType*    char_literal955;
    const CommonTokenType*    char_literal957;
    CSharpParser_expression_return expression956;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression956;

    CSharpParser_switch_block_return switch_block958;
    typedef	CSharpParser_switch_block_return RETURN_TYPE_switch_block958;

    ImplTraits::TreeType* string_literal954_tree;
    ImplTraits::TreeType* char_literal955_tree;
    ImplTraits::TreeType* char_literal957_tree;

    /* Initialize rule variables
     */
    switch_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(266)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal954       = NULL;
    char_literal955       = NULL;
    char_literal957       = NULL;
    expression956.tree = NULL;

    switch_block958.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal954_tree   = NULL;
    char_literal955_tree   = NULL;
    char_literal957_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1206:17: ( 'switch' '(' expression ')' switch_block )
        // CSharp.g:1207:2: 'switch' '(' expression ')' switch_block
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal954 =  this->matchToken(181, &FOLLOW_181_in_switch_statement7391);
            if  (this->hasException())
            {
                goto ruleswitch_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal954_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal954));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal954_tree);
            }

            char_literal955 =  this->matchToken(71, &FOLLOW_71_in_switch_statement7395);
            if  (this->hasException())
            {
                goto ruleswitch_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal955_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal955));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal955_tree);
            }

            this->followPush(FOLLOW_expression_in_switch_statement7399);
            expression956=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleswitch_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression956.tree);

            char_literal957 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_switch_statement7403);
            if  (this->hasException())
            {
                goto ruleswitch_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal957_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal957));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal957_tree);
            }

            this->followPush(FOLLOW_switch_block_in_switch_statement7407);
            switch_block958=switch_block();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleswitch_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, switch_block958.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleswitch_statementEx; /* Prevent compiler warnings */
    ruleswitch_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(266, switch_statement_StartIndex); }

    return retval;
}
/* $ANTLR end switch_statement */

/**
 * $ANTLR start switch_block
 * CSharp.g:1208:1: switch_block : '{' ( switch_sections )? '}' ;
 */
CSharpParser_switch_block_return
CSharpParser::switch_block()
{
    CSharpParser_switch_block_return retval(this);

    ANTLR_MARKER switch_block_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal959;
    const CommonTokenType*    char_literal961;
    CSharpParser_switch_sections_return switch_sections960;
    typedef	CSharpParser_switch_sections_return RETURN_TYPE_switch_sections960;

    ImplTraits::TreeType* char_literal959_tree;
    ImplTraits::TreeType* char_literal961_tree;

    /* Initialize rule variables
     */
    switch_block_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(267)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal959       = NULL;
    char_literal961       = NULL;
    switch_sections960.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal959_tree   = NULL;
    char_literal961_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1208:13: ( '{' ( switch_sections )? '}' )
        // CSharp.g:1209:2: '{' ( switch_sections )? '}'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal959 =  this->matchToken(199, &FOLLOW_199_in_switch_block7415);
            if  (this->hasException())
            {
                goto ruleswitch_blockEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal959_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal959));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal959_tree);
            }

            // CSharp.g:1209:8: ( switch_sections )?
            {
                int alt251=2;
                switch ( this->LA(1) )
                {
                    case 110:
                    case 117:
                    	{
                    		alt251=1;
                    	}
                        break;
                }

                switch (alt251)
                {
            	case 1:
            	    // CSharp.g:1209:8: switch_sections
            	    {
            	        this->followPush(FOLLOW_switch_sections_in_switch_block7419);
            	        switch_sections960=switch_sections();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleswitch_blockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, switch_sections960.tree);

            	    }
            	    break;

                }
            }

            char_literal961 =  this->matchToken(203, &FOLLOW_203_in_switch_block7424);
            if  (this->hasException())
            {
                goto ruleswitch_blockEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal961_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal961));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal961_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleswitch_blockEx; /* Prevent compiler warnings */
    ruleswitch_blockEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(267, switch_block_StartIndex); }

    return retval;
}
/* $ANTLR end switch_block */

/**
 * $ANTLR start switch_sections
 * CSharp.g:1210:1: switch_sections : ( switch_section )+ ;
 */
CSharpParser_switch_sections_return
CSharpParser::switch_sections()
{
    CSharpParser_switch_sections_return retval(this);

    ANTLR_MARKER switch_sections_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_switch_section_return switch_section962;
    typedef	CSharpParser_switch_section_return RETURN_TYPE_switch_section962;


    /* Initialize rule variables
     */
    switch_sections_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(268)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    switch_section962.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:1210:16: ( ( switch_section )+ )
        // CSharp.g:1211:2: ( switch_section )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:1211:2: ( switch_section )+
            {
                int cnt252=0;

                for (;;)
                {
                    int alt252=2;
            	switch ( this->LA(1) )
            	{
            	case 110:
            	case 117:
            		{
            			alt252=1;
            		}
            	    break;

            	}

            	switch (alt252)
            	{
            	    case 1:
            	        // CSharp.g:1211:2: switch_section
            	        {
            	            this->followPush(FOLLOW_switch_section_in_switch_sections7432);
            	            switch_section962=switch_section();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleswitch_sectionsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, switch_section962.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt252 >= 1 )
            		{
            		    goto loop252;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleswitch_sectionsEx;
            	}
            	cnt252++;
                }
                loop252: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleswitch_sectionsEx; /* Prevent compiler warnings */
    ruleswitch_sectionsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(268, switch_sections_StartIndex); }

    return retval;
}
/* $ANTLR end switch_sections */

/**
 * $ANTLR start switch_section
 * CSharp.g:1212:1: switch_section : switch_labels statement_list ;
 */
CSharpParser_switch_section_return
CSharpParser::switch_section()
{
    CSharpParser_switch_section_return retval(this);

    ANTLR_MARKER switch_section_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_switch_labels_return switch_labels963;
    typedef	CSharpParser_switch_labels_return RETURN_TYPE_switch_labels963;

    CSharpParser_statement_list_return statement_list964;
    typedef	CSharpParser_statement_list_return RETURN_TYPE_statement_list964;


    /* Initialize rule variables
     */
    switch_section_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(269)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    switch_labels963.tree = NULL;

    statement_list964.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:1212:15: ( switch_labels statement_list )
        // CSharp.g:1213:2: switch_labels statement_list
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_switch_labels_in_switch_section7441);
            switch_labels963=switch_labels();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleswitch_sectionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, switch_labels963.tree);

            this->followPush(FOLLOW_statement_list_in_switch_section7445);
            statement_list964=statement_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleswitch_sectionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, statement_list964.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleswitch_sectionEx; /* Prevent compiler warnings */
    ruleswitch_sectionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(269, switch_section_StartIndex); }

    return retval;
}
/* $ANTLR end switch_section */

/**
 * $ANTLR start switch_labels
 * CSharp.g:1214:1: switch_labels : ( switch_label )+ ;
 */
CSharpParser_switch_labels_return
CSharpParser::switch_labels()
{
    CSharpParser_switch_labels_return retval(this);

    ANTLR_MARKER switch_labels_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_switch_label_return switch_label965;
    typedef	CSharpParser_switch_label_return RETURN_TYPE_switch_label965;


    /* Initialize rule variables
     */
    switch_labels_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(270)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    switch_label965.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:1214:14: ( ( switch_label )+ )
        // CSharp.g:1215:2: ( switch_label )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:1215:2: ( switch_label )+
            {
                int cnt253=0;

                for (;;)
                {
                    int alt253=2;
            	switch ( this->LA(1) )
            	{
            	case 117:
            		{
            			switch ( this->LA(2) )
            			{
            			case 82:
            				{
            					alt253=1;
            				}
            			    break;

            			}

            		}
            	    break;
            	case 110:
            		{
            			alt253=1;
            		}
            	    break;

            	}

            	switch (alt253)
            	{
            	    case 1:
            	        // CSharp.g:1215:2: switch_label
            	        {
            	            this->followPush(FOLLOW_switch_label_in_switch_labels7453);
            	            switch_label965=switch_label();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleswitch_labelsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, switch_label965.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt253 >= 1 )
            		{
            		    goto loop253;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleswitch_labelsEx;
            	}
            	cnt253++;
                }
                loop253: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleswitch_labelsEx; /* Prevent compiler warnings */
    ruleswitch_labelsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(270, switch_labels_StartIndex); }

    return retval;
}
/* $ANTLR end switch_labels */

/**
 * $ANTLR start switch_label
 * CSharp.g:1216:1: switch_label : ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) );
 */
CSharpParser_switch_label_return
CSharpParser::switch_label()
{
    CSharpParser_switch_label_return retval(this);

    ANTLR_MARKER switch_label_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal966;
    const CommonTokenType*    char_literal968;
    const CommonTokenType*    string_literal969;
    const CommonTokenType*    char_literal970;
    CSharpParser_constant_expression_return constant_expression967;
    typedef	CSharpParser_constant_expression_return RETURN_TYPE_constant_expression967;

    ImplTraits::TreeType* string_literal966_tree;
    ImplTraits::TreeType* char_literal968_tree;
    ImplTraits::TreeType* string_literal969_tree;
    ImplTraits::TreeType* char_literal970_tree;

    /* Initialize rule variables
     */
    switch_label_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(271)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal966       = NULL;
    char_literal968       = NULL;
    string_literal969       = NULL;
    char_literal970       = NULL;
    constant_expression967.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal966_tree   = NULL;
    char_literal968_tree   = NULL;
    string_literal969_tree   = NULL;
    char_literal970_tree   = NULL;


    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:1216:13: ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) )

            ANTLR_UINT32 alt254;

            alt254=2;

            switch ( this->LA(1) )
            {
            case 110:
            	{
            		alt254=1;
            	}
                break;
            case 117:
            	{
            		alt254=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 254 );
                ex->set_state( 0 );


                goto ruleswitch_labelEx;

            }

            switch (alt254)
            {
        	case 1:
        	    // CSharp.g:1217:2: ( 'case' constant_expression ':' )
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        // CSharp.g:1217:2: ( 'case' constant_expression ':' )
        	        // CSharp.g:1217:3: 'case' constant_expression ':'
        	        {
        	            string_literal966 =  this->matchToken(110, &FOLLOW_110_in_switch_label7463);
        	            if  (this->hasException())
        	            {
        	                goto ruleswitch_labelEx;
        	            }
        	            if (this->hasFailed())
        	            {
        	                return retval;
        	            }

        	            if ( this->get_backtracking()==0 ) {
        	            string_literal966_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal966));
        	            ADAPTOR->addChild(ADAPTOR, root_0, string_literal966_tree);
        	            }

        	            this->followPush(FOLLOW_constant_expression_in_switch_label7467);
        	            constant_expression967=constant_expression();

        	            this->followPop();
        	            if  (this->hasException())
        	            {
        	                goto ruleswitch_labelEx;
        	            }
        	            if (this->hasFailed())
        	            {
        	                return retval;
        	            }

        	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constant_expression967.tree);

        	            char_literal968 =  this->matchToken(82, &FOLLOW_82_in_switch_label7471);
        	            if  (this->hasException())
        	            {
        	                goto ruleswitch_labelEx;
        	            }
        	            if (this->hasFailed())
        	            {
        	                return retval;
        	            }

        	            if ( this->get_backtracking()==0 ) {
        	            char_literal968_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal968));
        	            ADAPTOR->addChild(ADAPTOR, root_0, char_literal968_tree);
        	            }

        	        }


        	    }
        	    break;
        	case 2:
        	    // CSharp.g:1218:4: ( 'default' ':' )
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        // CSharp.g:1218:4: ( 'default' ':' )
        	        // CSharp.g:1218:5: 'default' ':'
        	        {
        	            string_literal969 =  this->matchToken(117, &FOLLOW_117_in_switch_label7478);
        	            if  (this->hasException())
        	            {
        	                goto ruleswitch_labelEx;
        	            }
        	            if (this->hasFailed())
        	            {
        	                return retval;
        	            }

        	            if ( this->get_backtracking()==0 ) {
        	            string_literal969_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal969));
        	            ADAPTOR->addChild(ADAPTOR, root_0, string_literal969_tree);
        	            }

        	            char_literal970 =  this->matchToken(82, &FOLLOW_82_in_switch_label7482);
        	            if  (this->hasException())
        	            {
        	                goto ruleswitch_labelEx;
        	            }
        	            if (this->hasFailed())
        	            {
        	                return retval;
        	            }

        	            if ( this->get_backtracking()==0 ) {
        	            char_literal970_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal970));
        	            ADAPTOR->addChild(ADAPTOR, root_0, char_literal970_tree);
        	            }

        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleswitch_labelEx; /* Prevent compiler warnings */
    ruleswitch_labelEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(271, switch_label_StartIndex); }

    return retval;
}
/* $ANTLR end switch_label */

/**
 * $ANTLR start iteration_statement
 * CSharp.g:1219:1: iteration_statement : ( while_statement | do_statement | for_statement | foreach_statement );
 */
CSharpParser_iteration_statement_return
CSharpParser::iteration_statement()
{
    CSharpParser_iteration_statement_return retval(this);

    ANTLR_MARKER iteration_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_while_statement_return while_statement971;
    typedef	CSharpParser_while_statement_return RETURN_TYPE_while_statement971;

    CSharpParser_do_statement_return do_statement972;
    typedef	CSharpParser_do_statement_return RETURN_TYPE_do_statement972;

    CSharpParser_for_statement_return for_statement973;
    typedef	CSharpParser_for_statement_return RETURN_TYPE_for_statement973;

    CSharpParser_foreach_statement_return foreach_statement974;
    typedef	CSharpParser_foreach_statement_return RETURN_TYPE_foreach_statement974;


    /* Initialize rule variables
     */
    iteration_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(272)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    while_statement971.tree = NULL;

    do_statement972.tree = NULL;

    for_statement973.tree = NULL;

    foreach_statement974.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:1219:20: ( while_statement | do_statement | for_statement | foreach_statement )

            ANTLR_UINT32 alt255;

            alt255=4;

            switch ( this->LA(1) )
            {
            case 197:
            	{
            		alt255=1;
            	}
                break;
            case 120:
            	{
            		alt255=2;
            	}
                break;
            case 132:
            	{
            		alt255=3;
            	}
                break;
            case 133:
            	{
            		alt255=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 255 );
                ex->set_state( 0 );


                goto ruleiteration_statementEx;

            }

            switch (alt255)
            {
        	case 1:
        	    // CSharp.g:1220:2: while_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_while_statement_in_iteration_statement7491);
        	        while_statement971=while_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, while_statement971.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:1221:4: do_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_do_statement_in_iteration_statement7496);
        	        do_statement972=do_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, do_statement972.tree);

        	    }
        	    break;
        	case 3:
        	    // CSharp.g:1222:4: for_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_for_statement_in_iteration_statement7501);
        	        for_statement973=for_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, for_statement973.tree);

        	    }
        	    break;
        	case 4:
        	    // CSharp.g:1223:4: foreach_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_foreach_statement_in_iteration_statement7506);
        	        foreach_statement974=foreach_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, foreach_statement974.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleiteration_statementEx; /* Prevent compiler warnings */
    ruleiteration_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(272, iteration_statement_StartIndex); }

    return retval;
}
/* $ANTLR end iteration_statement */

/**
 * $ANTLR start while_statement
 * CSharp.g:1224:1: while_statement : 'while' '(' boolean_expression ')' embedded_statement ;
 */
CSharpParser_while_statement_return
CSharpParser::while_statement()
{
    CSharpParser_while_statement_return retval(this);

    ANTLR_MARKER while_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal975;
    const CommonTokenType*    char_literal976;
    const CommonTokenType*    char_literal978;
    CSharpParser_boolean_expression_return boolean_expression977;
    typedef	CSharpParser_boolean_expression_return RETURN_TYPE_boolean_expression977;

    CSharpParser_embedded_statement_return embedded_statement979;
    typedef	CSharpParser_embedded_statement_return RETURN_TYPE_embedded_statement979;

    ImplTraits::TreeType* string_literal975_tree;
    ImplTraits::TreeType* char_literal976_tree;
    ImplTraits::TreeType* char_literal978_tree;

    /* Initialize rule variables
     */
    while_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(273)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal975       = NULL;
    char_literal976       = NULL;
    char_literal978       = NULL;
    boolean_expression977.tree = NULL;

    embedded_statement979.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal975_tree   = NULL;
    char_literal976_tree   = NULL;
    char_literal978_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1224:16: ( 'while' '(' boolean_expression ')' embedded_statement )
        // CSharp.g:1225:2: 'while' '(' boolean_expression ')' embedded_statement
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal975 =  this->matchToken(197, &FOLLOW_197_in_while_statement7514);
            if  (this->hasException())
            {
                goto rulewhile_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal975_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal975));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal975_tree);
            }

            char_literal976 =  this->matchToken(71, &FOLLOW_71_in_while_statement7518);
            if  (this->hasException())
            {
                goto rulewhile_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal976_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal976));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal976_tree);
            }

            this->followPush(FOLLOW_boolean_expression_in_while_statement7522);
            boolean_expression977=boolean_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhile_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, boolean_expression977.tree);

            char_literal978 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_while_statement7526);
            if  (this->hasException())
            {
                goto rulewhile_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal978_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal978));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal978_tree);
            }

            this->followPush(FOLLOW_embedded_statement_in_while_statement7530);
            embedded_statement979=embedded_statement();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhile_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, embedded_statement979.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulewhile_statementEx; /* Prevent compiler warnings */
    rulewhile_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(273, while_statement_StartIndex); }

    return retval;
}
/* $ANTLR end while_statement */

/**
 * $ANTLR start do_statement
 * CSharp.g:1226:1: do_statement : 'do' embedded_statement 'while' '(' boolean_expression ')' ';' ;
 */
CSharpParser_do_statement_return
CSharpParser::do_statement()
{
    CSharpParser_do_statement_return retval(this);

    ANTLR_MARKER do_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal980;
    const CommonTokenType*    string_literal982;
    const CommonTokenType*    char_literal983;
    const CommonTokenType*    char_literal985;
    const CommonTokenType*    char_literal986;
    CSharpParser_embedded_statement_return embedded_statement981;
    typedef	CSharpParser_embedded_statement_return RETURN_TYPE_embedded_statement981;

    CSharpParser_boolean_expression_return boolean_expression984;
    typedef	CSharpParser_boolean_expression_return RETURN_TYPE_boolean_expression984;

    ImplTraits::TreeType* string_literal980_tree;
    ImplTraits::TreeType* string_literal982_tree;
    ImplTraits::TreeType* char_literal983_tree;
    ImplTraits::TreeType* char_literal985_tree;
    ImplTraits::TreeType* char_literal986_tree;

    /* Initialize rule variables
     */
    do_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(274)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal980       = NULL;
    string_literal982       = NULL;
    char_literal983       = NULL;
    char_literal985       = NULL;
    char_literal986       = NULL;
    embedded_statement981.tree = NULL;

    boolean_expression984.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal980_tree   = NULL;
    string_literal982_tree   = NULL;
    char_literal983_tree   = NULL;
    char_literal985_tree   = NULL;
    char_literal986_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1226:13: ( 'do' embedded_statement 'while' '(' boolean_expression ')' ';' )
        // CSharp.g:1227:2: 'do' embedded_statement 'while' '(' boolean_expression ')' ';'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal980 =  this->matchToken(120, &FOLLOW_120_in_do_statement7538);
            if  (this->hasException())
            {
                goto ruledo_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal980_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal980));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal980_tree);
            }

            this->followPush(FOLLOW_embedded_statement_in_do_statement7542);
            embedded_statement981=embedded_statement();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledo_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, embedded_statement981.tree);

            string_literal982 =  this->matchToken(197, &FOLLOW_197_in_do_statement7546);
            if  (this->hasException())
            {
                goto ruledo_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal982_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal982));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal982_tree);
            }

            char_literal983 =  this->matchToken(71, &FOLLOW_71_in_do_statement7550);
            if  (this->hasException())
            {
                goto ruledo_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal983_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal983));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal983_tree);
            }

            this->followPush(FOLLOW_boolean_expression_in_do_statement7554);
            boolean_expression984=boolean_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledo_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, boolean_expression984.tree);

            char_literal985 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_do_statement7558);
            if  (this->hasException())
            {
                goto ruledo_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal985_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal985));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal985_tree);
            }

            char_literal986 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_do_statement7562);
            if  (this->hasException())
            {
                goto ruledo_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal986_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal986));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal986_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruledo_statementEx; /* Prevent compiler warnings */
    ruledo_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(274, do_statement_StartIndex); }

    return retval;
}
/* $ANTLR end do_statement */

/**
 * $ANTLR start for_statement
 * CSharp.g:1228:1: for_statement : 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement ;
 */
CSharpParser_for_statement_return
CSharpParser::for_statement()
{
    CSharpParser_for_statement_return retval(this);

    ANTLR_MARKER for_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal987;
    const CommonTokenType*    char_literal988;
    const CommonTokenType*    char_literal990;
    const CommonTokenType*    char_literal992;
    const CommonTokenType*    char_literal994;
    CSharpParser_for_initializer_return for_initializer989;
    typedef	CSharpParser_for_initializer_return RETURN_TYPE_for_initializer989;

    CSharpParser_for_condition_return for_condition991;
    typedef	CSharpParser_for_condition_return RETURN_TYPE_for_condition991;

    CSharpParser_for_iterator_return for_iterator993;
    typedef	CSharpParser_for_iterator_return RETURN_TYPE_for_iterator993;

    CSharpParser_embedded_statement_return embedded_statement995;
    typedef	CSharpParser_embedded_statement_return RETURN_TYPE_embedded_statement995;

    ImplTraits::TreeType* string_literal987_tree;
    ImplTraits::TreeType* char_literal988_tree;
    ImplTraits::TreeType* char_literal990_tree;
    ImplTraits::TreeType* char_literal992_tree;
    ImplTraits::TreeType* char_literal994_tree;

    /* Initialize rule variables
     */
    for_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(275)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal987       = NULL;
    char_literal988       = NULL;
    char_literal990       = NULL;
    char_literal992       = NULL;
    char_literal994       = NULL;
    for_initializer989.tree = NULL;

    for_condition991.tree = NULL;

    for_iterator993.tree = NULL;

    embedded_statement995.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal987_tree   = NULL;
    char_literal988_tree   = NULL;
    char_literal990_tree   = NULL;
    char_literal992_tree   = NULL;
    char_literal994_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1228:14: ( 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement )
        // CSharp.g:1229:2: 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal987 =  this->matchToken(132, &FOLLOW_132_in_for_statement7570);
            if  (this->hasException())
            {
                goto rulefor_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal987_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal987));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal987_tree);
            }

            char_literal988 =  this->matchToken(71, &FOLLOW_71_in_for_statement7574);
            if  (this->hasException())
            {
                goto rulefor_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal988_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal988));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal988_tree);
            }

            // CSharp.g:1229:16: ( for_initializer )?
            {
                int alt256=2;
                switch ( this->LA(1) )
                {
                    case Character_literal:
                    case FALSE:
                    case Hex_number:
                    case IDENTIFIER:
                    case LT_NULL:
                    case MINUS:
                    case NUMBER:
                    case Real_literal:
                    case STRINGLITERAL:
                    case TRUE:
                    case Verbatim_string_literal:
                    case 64:
                    case 69:
                    case 71:
                    case 72:
                    case 74:
                    case 75:
                    case 78:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 108:
                    case 109:
                    case 111:
                    case 112:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 121:
                    case 122:
                    case 124:
                    case 128:
                    case 131:
                    case 134:
                    case 137:
                    case 140:
                    case 143:
                    case 145:
                    case 146:
                    case 148:
                    case 149:
                    case 150:
                    case 152:
                    case 153:
                    case 154:
                    case 156:
                    case 159:
                    case 162:
                    case 164:
                    case 169:
                    case 171:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 179:
                    case 182:
                    case 185:
                    case 186:
                    case 187:
                    case 188:
                    case 189:
                    case 191:
                    case 192:
                    case 194:
                    case 196:
                    case 198:
                    case 204:
                    	{
                    		alt256=1;
                    	}
                        break;
                }

                switch (alt256)
                {
            	case 1:
            	    // CSharp.g:1229:16: for_initializer
            	    {
            	        this->followPush(FOLLOW_for_initializer_in_for_statement7578);
            	        for_initializer989=for_initializer();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefor_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, for_initializer989.tree);

            	    }
            	    break;

                }
            }

            char_literal990 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_for_statement7583);
            if  (this->hasException())
            {
                goto rulefor_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal990_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal990));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal990_tree);
            }

            // CSharp.g:1229:41: ( for_condition )?
            {
                int alt257=2;
                switch ( this->LA(1) )
                {
                    case Character_literal:
                    case FALSE:
                    case Hex_number:
                    case IDENTIFIER:
                    case LT_NULL:
                    case MINUS:
                    case NUMBER:
                    case Real_literal:
                    case STRINGLITERAL:
                    case TRUE:
                    case Verbatim_string_literal:
                    case 64:
                    case 69:
                    case 71:
                    case 72:
                    case 74:
                    case 75:
                    case 78:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 108:
                    case 109:
                    case 111:
                    case 112:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 121:
                    case 122:
                    case 124:
                    case 128:
                    case 131:
                    case 134:
                    case 137:
                    case 140:
                    case 143:
                    case 145:
                    case 146:
                    case 148:
                    case 149:
                    case 150:
                    case 152:
                    case 153:
                    case 154:
                    case 156:
                    case 159:
                    case 162:
                    case 164:
                    case 169:
                    case 171:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 179:
                    case 182:
                    case 185:
                    case 186:
                    case 187:
                    case 188:
                    case 189:
                    case 191:
                    case 192:
                    case 196:
                    case 198:
                    case 204:
                    	{
                    		alt257=1;
                    	}
                        break;
                }

                switch (alt257)
                {
            	case 1:
            	    // CSharp.g:1229:41: for_condition
            	    {
            	        this->followPush(FOLLOW_for_condition_in_for_statement7587);
            	        for_condition991=for_condition();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefor_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, for_condition991.tree);

            	    }
            	    break;

                }
            }

            char_literal992 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_for_statement7592);
            if  (this->hasException())
            {
                goto rulefor_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal992_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal992));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal992_tree);
            }

            // CSharp.g:1229:64: ( for_iterator )?
            {
                int alt258=2;
                switch ( this->LA(1) )
                {
                    case Character_literal:
                    case FALSE:
                    case Hex_number:
                    case IDENTIFIER:
                    case LT_NULL:
                    case MINUS:
                    case NUMBER:
                    case Real_literal:
                    case STRINGLITERAL:
                    case TRUE:
                    case Verbatim_string_literal:
                    case 64:
                    case 69:
                    case 71:
                    case 72:
                    case 74:
                    case 75:
                    case 78:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 108:
                    case 109:
                    case 111:
                    case 112:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 121:
                    case 122:
                    case 124:
                    case 128:
                    case 131:
                    case 134:
                    case 137:
                    case 140:
                    case 143:
                    case 145:
                    case 146:
                    case 148:
                    case 149:
                    case 150:
                    case 152:
                    case 153:
                    case 154:
                    case 156:
                    case 159:
                    case 162:
                    case 164:
                    case 169:
                    case 171:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 179:
                    case 182:
                    case 185:
                    case 186:
                    case 187:
                    case 188:
                    case 189:
                    case 191:
                    case 192:
                    case 196:
                    case 198:
                    case 204:
                    	{
                    		alt258=1;
                    	}
                        break;
                }

                switch (alt258)
                {
            	case 1:
            	    // CSharp.g:1229:64: for_iterator
            	    {
            	        this->followPush(FOLLOW_for_iterator_in_for_statement7596);
            	        for_iterator993=for_iterator();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefor_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, for_iterator993.tree);

            	    }
            	    break;

                }
            }

            char_literal994 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_for_statement7601);
            if  (this->hasException())
            {
                goto rulefor_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal994_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal994));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal994_tree);
            }

            this->followPush(FOLLOW_embedded_statement_in_for_statement7605);
            embedded_statement995=embedded_statement();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, embedded_statement995.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulefor_statementEx; /* Prevent compiler warnings */
    rulefor_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(275, for_statement_StartIndex); }

    return retval;
}
/* $ANTLR end for_statement */

/**
 * $ANTLR start for_initializer
 * CSharp.g:1230:1: for_initializer : ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list );
 */
CSharpParser_for_initializer_return
CSharpParser::for_initializer()
{
    CSharpParser_for_initializer_return retval(this);

    ANTLR_MARKER for_initializer_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_local_variable_declaration_return local_variable_declaration996;
    typedef	CSharpParser_local_variable_declaration_return RETURN_TYPE_local_variable_declaration996;

    CSharpParser_statement_expression_list_return statement_expression_list997;
    typedef	CSharpParser_statement_expression_list_return RETURN_TYPE_statement_expression_list997;


    /* Initialize rule variables
     */
    for_initializer_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(276)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    local_variable_declaration996.tree = NULL;

    statement_expression_list997.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:1230:16: ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list )

            ANTLR_UINT32 alt259;

            alt259=2;

            {
                int LA259_0 = this->LA(1);
                if ( (LA259_0 == 192))
                {
                    {
                        int LA259_1 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred38_CSharp>() )))
                        {
                            alt259=1;
                        }
                        else if ( (true))
                        {
                            alt259=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 259 );
                            ex->set_state( 1 );


                            goto rulefor_initializerEx;

                        }
                    }
                }
                else if ( (LA259_0 == 122))
                {
                    {
                        int LA259_2 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred38_CSharp>() )))
                        {
                            alt259=1;
                        }
                        else if ( (true))
                        {
                            alt259=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 259 );
                            ex->set_state( 2 );


                            goto rulefor_initializerEx;

                        }
                    }
                }
                else if ( (LA259_0 == 106 || LA259_0 == 109 || LA259_0 == 111 || LA259_0 == 116 || LA259_0 == 121 || LA259_0 == 131 || LA259_0 == 140 || LA259_0 == 148 || LA259_0 == 153 || LA259_0 == 171 || LA259_0 == 175 || LA259_0 == 179 || ((LA259_0 >= 187) && (LA259_0 <= 188)) || LA259_0 == 191))
                {
                    {
                        int LA259_3 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred38_CSharp>() )))
                        {
                            alt259=1;
                        }
                        else if ( (true))
                        {
                            alt259=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 259 );
                            ex->set_state( 3 );


                            goto rulefor_initializerEx;

                        }
                    }
                }
                else if ( (LA259_0 == 134))
                {
                    {
                        int LA259_4 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred38_CSharp>() )))
                        {
                            alt259=1;
                        }
                        else if ( (true))
                        {
                            alt259=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 259 );
                            ex->set_state( 4 );


                            goto rulefor_initializerEx;

                        }
                    }
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred38_CSharp>() )) && (LA259_0 == 194))
                {
                    alt259=1;
                }
                else if ( (LA259_0 == Character_literal || LA259_0 == FALSE || LA259_0 == Hex_number || ((LA259_0 >= LT_NULL) && (LA259_0 <= NUMBER)) || LA259_0 == Real_literal || LA259_0 == STRINGLITERAL || LA259_0 == TRUE || LA259_0 == Verbatim_string_literal || LA259_0 == 64 || LA259_0 == 69 || ((LA259_0 >= 71) && (LA259_0 <= 72)) || ((LA259_0 >= 74) && (LA259_0 <= 75)) || LA259_0 == 78 || LA259_0 == 105 || LA259_0 == 112 || ((LA259_0 >= 117) && (LA259_0 <= 118)) || LA259_0 == 152 || LA259_0 == 176 || LA259_0 == 182 || LA259_0 == 186 || LA259_0 == 189 || LA259_0 == 204))
                {
                    alt259=2;
                }
                else if ( (LA259_0 == IDENTIFIER || LA259_0 == 98 || ((LA259_0 >= 100) && (LA259_0 <= 101)) || ((LA259_0 >= 103) && (LA259_0 <= 104)) || LA259_0 == 108 || LA259_0 == 119 || LA259_0 == 124 || LA259_0 == 128 || LA259_0 == 137 || LA259_0 == 143 || ((LA259_0 >= 145) && (LA259_0 <= 146)) || ((LA259_0 >= 149) && (LA259_0 <= 150)) || LA259_0 == 154 || LA259_0 == 156 || LA259_0 == 159 || LA259_0 == 162 || LA259_0 == 164 || LA259_0 == 169 || ((LA259_0 >= 173) && (LA259_0 <= 174)) || LA259_0 == 185 || LA259_0 == 196 || LA259_0 == 198))
                {
                    {
                        int LA259_25 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred38_CSharp>() )))
                        {
                            alt259=1;
                        }
                        else if ( (true))
                        {
                            alt259=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 259 );
                            ex->set_state( 25 );


                            goto rulefor_initializerEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 259 );
                    ex->set_state( 0 );


                    goto rulefor_initializerEx;

                }
            }
            switch (alt259)
            {
        	case 1:
        	    // CSharp.g:1231:2: ( local_variable_declaration )=> local_variable_declaration
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_local_variable_declaration_in_for_initializer7619);
        	        local_variable_declaration996=local_variable_declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_initializerEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, local_variable_declaration996.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:1232:4: statement_expression_list
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_statement_expression_list_in_for_initializer7624);
        	        statement_expression_list997=statement_expression_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_initializerEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, statement_expression_list997.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulefor_initializerEx; /* Prevent compiler warnings */
    rulefor_initializerEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(276, for_initializer_StartIndex); }

    return retval;
}
/* $ANTLR end for_initializer */

/**
 * $ANTLR start for_condition
 * CSharp.g:1235:1: for_condition : boolean_expression ;
 */
CSharpParser_for_condition_return
CSharpParser::for_condition()
{
    CSharpParser_for_condition_return retval(this);

    ANTLR_MARKER for_condition_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_boolean_expression_return boolean_expression998;
    typedef	CSharpParser_boolean_expression_return RETURN_TYPE_boolean_expression998;


    /* Initialize rule variables
     */
    for_condition_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(277)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    boolean_expression998.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:1236:2: ( boolean_expression )
        // CSharp.g:1236:4: boolean_expression
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_boolean_expression_in_for_condition7636);
            boolean_expression998=boolean_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_conditionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, boolean_expression998.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulefor_conditionEx; /* Prevent compiler warnings */
    rulefor_conditionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(277, for_condition_StartIndex); }

    return retval;
}
/* $ANTLR end for_condition */

/**
 * $ANTLR start for_iterator
 * CSharp.g:1239:1: for_iterator : statement_expression_list ;
 */
CSharpParser_for_iterator_return
CSharpParser::for_iterator()
{
    CSharpParser_for_iterator_return retval(this);

    ANTLR_MARKER for_iterator_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_statement_expression_list_return statement_expression_list999;
    typedef	CSharpParser_statement_expression_list_return RETURN_TYPE_statement_expression_list999;


    /* Initialize rule variables
     */
    for_iterator_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(278)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    statement_expression_list999.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:1240:2: ( statement_expression_list )
        // CSharp.g:1240:4: statement_expression_list
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_statement_expression_list_in_for_iterator7648);
            statement_expression_list999=statement_expression_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_iteratorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, statement_expression_list999.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulefor_iteratorEx; /* Prevent compiler warnings */
    rulefor_iteratorEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(278, for_iterator_StartIndex); }

    return retval;
}
/* $ANTLR end for_iterator */

/**
 * $ANTLR start statement_expression_list
 * CSharp.g:1243:1: statement_expression_list : statement_expression ( ',' statement_expression )* ;
 */
CSharpParser_statement_expression_list_return
CSharpParser::statement_expression_list()
{
    CSharpParser_statement_expression_list_return retval(this);

    ANTLR_MARKER statement_expression_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal1001;
    CSharpParser_statement_expression_return statement_expression1000;
    typedef	CSharpParser_statement_expression_return RETURN_TYPE_statement_expression1000;

    CSharpParser_statement_expression_return statement_expression1002;
    typedef	CSharpParser_statement_expression_return RETURN_TYPE_statement_expression1002;

    ImplTraits::TreeType* char_literal1001_tree;

    /* Initialize rule variables
     */
    statement_expression_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(279)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal1001       = NULL;
    statement_expression1000.tree = NULL;

    statement_expression1002.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal1001_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1244:3: ( statement_expression ( ',' statement_expression )* )
        // CSharp.g:1244:5: statement_expression ( ',' statement_expression )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_statement_expression_in_statement_expression_list7661);
            statement_expression1000=statement_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestatement_expression_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, statement_expression1000.tree);

            // CSharp.g:1244:26: ( ',' statement_expression )*

            for (;;)
            {
                int alt260=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt260=1;
                	}
                    break;

                }

                switch (alt260)
                {
            	case 1:
            	    // CSharp.g:1244:27: ',' statement_expression
            	    {
            	        char_literal1001 =  this->matchToken(77, &FOLLOW_77_in_statement_expression_list7664);
            	        if  (this->hasException())
            	        {
            	            goto rulestatement_expression_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal1001_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1001));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal1001_tree);
            	        }

            	        this->followPush(FOLLOW_statement_expression_in_statement_expression_list7666);
            	        statement_expression1002=statement_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestatement_expression_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, statement_expression1002.tree);

            	    }
            	    break;

            	default:
            	    goto loop260;	/* break out of the loop */
            	    break;
                }
            }
            loop260: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulestatement_expression_listEx; /* Prevent compiler warnings */
    rulestatement_expression_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(279, statement_expression_list_StartIndex); }

    return retval;
}
/* $ANTLR end statement_expression_list */

/**
 * $ANTLR start foreach_statement
 * CSharp.g:1247:1: foreach_statement : 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement ;
 */
CSharpParser_foreach_statement_return
CSharpParser::foreach_statement()
{
    CSharpParser_foreach_statement_return retval(this);

    ANTLR_MARKER foreach_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal1003;
    const CommonTokenType*    char_literal1004;
    const CommonTokenType*    string_literal1007;
    const CommonTokenType*    char_literal1009;
    CSharpParser_local_variable_type_return local_variable_type1005;
    typedef	CSharpParser_local_variable_type_return RETURN_TYPE_local_variable_type1005;

    CSharpParser_identifier_return identifier1006;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier1006;

    CSharpParser_expression_return expression1008;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression1008;

    CSharpParser_embedded_statement_return embedded_statement1010;
    typedef	CSharpParser_embedded_statement_return RETURN_TYPE_embedded_statement1010;

    ImplTraits::TreeType* string_literal1003_tree;
    ImplTraits::TreeType* char_literal1004_tree;
    ImplTraits::TreeType* string_literal1007_tree;
    ImplTraits::TreeType* char_literal1009_tree;

    /* Initialize rule variables
     */
    foreach_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(280)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal1003       = NULL;
    char_literal1004       = NULL;
    string_literal1007       = NULL;
    char_literal1009       = NULL;
    local_variable_type1005.tree = NULL;

    identifier1006.tree = NULL;

    expression1008.tree = NULL;

    embedded_statement1010.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal1003_tree   = NULL;
    char_literal1004_tree   = NULL;
    string_literal1007_tree   = NULL;
    char_literal1009_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1248:2: ( 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement )
        // CSharp.g:1248:4: 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal1003 =  this->matchToken(133, &FOLLOW_133_in_foreach_statement7681);
            if  (this->hasException())
            {
                goto ruleforeach_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal1003_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1003));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal1003_tree);
            }

            char_literal1004 =  this->matchToken(71, &FOLLOW_71_in_foreach_statement7685);
            if  (this->hasException())
            {
                goto ruleforeach_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal1004_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1004));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1004_tree);
            }

            this->followPush(FOLLOW_local_variable_type_in_foreach_statement7689);
            local_variable_type1005=local_variable_type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleforeach_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, local_variable_type1005.tree);

            this->followPush(FOLLOW_identifier_in_foreach_statement7693);
            identifier1006=identifier();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleforeach_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier1006.tree);

            string_literal1007 =  this->matchToken(139, &FOLLOW_139_in_foreach_statement7697);
            if  (this->hasException())
            {
                goto ruleforeach_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal1007_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1007));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal1007_tree);
            }

            this->followPush(FOLLOW_expression_in_foreach_statement7701);
            expression1008=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleforeach_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression1008.tree);

            char_literal1009 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_foreach_statement7705);
            if  (this->hasException())
            {
                goto ruleforeach_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal1009_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1009));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1009_tree);
            }

            this->followPush(FOLLOW_embedded_statement_in_foreach_statement7709);
            embedded_statement1010=embedded_statement();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleforeach_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, embedded_statement1010.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleforeach_statementEx; /* Prevent compiler warnings */
    ruleforeach_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(280, foreach_statement_StartIndex); }

    return retval;
}
/* $ANTLR end foreach_statement */

/**
 * $ANTLR start jump_statement
 * CSharp.g:1251:1: jump_statement : ( break_statement | continue_statement | goto_statement | return_statement | throw_statement );
 */
CSharpParser_jump_statement_return
CSharpParser::jump_statement()
{
    CSharpParser_jump_statement_return retval(this);

    ANTLR_MARKER jump_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_break_statement_return break_statement1011;
    typedef	CSharpParser_break_statement_return RETURN_TYPE_break_statement1011;

    CSharpParser_continue_statement_return continue_statement1012;
    typedef	CSharpParser_continue_statement_return RETURN_TYPE_continue_statement1012;

    CSharpParser_goto_statement_return goto_statement1013;
    typedef	CSharpParser_goto_statement_return RETURN_TYPE_goto_statement1013;

    CSharpParser_return_statement_return return_statement1014;
    typedef	CSharpParser_return_statement_return RETURN_TYPE_return_statement1014;

    CSharpParser_throw_statement_return throw_statement1015;
    typedef	CSharpParser_throw_statement_return RETURN_TYPE_throw_statement1015;


    /* Initialize rule variables
     */
    jump_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(281)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    break_statement1011.tree = NULL;

    continue_statement1012.tree = NULL;

    goto_statement1013.tree = NULL;

    return_statement1014.tree = NULL;

    throw_statement1015.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:1252:2: ( break_statement | continue_statement | goto_statement | return_statement | throw_statement )

            ANTLR_UINT32 alt261;

            alt261=5;

            switch ( this->LA(1) )
            {
            case 107:
            	{
            		alt261=1;
            	}
                break;
            case 115:
            	{
            		alt261=2;
            	}
                break;
            case 136:
            	{
            		alt261=3;
            	}
                break;
            case 170:
            	{
            		alt261=4;
            	}
                break;
            case 183:
            	{
            		alt261=5;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 261 );
                ex->set_state( 0 );


                goto rulejump_statementEx;

            }

            switch (alt261)
            {
        	case 1:
        	    // CSharp.g:1252:4: break_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_break_statement_in_jump_statement7721);
        	        break_statement1011=break_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulejump_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, break_statement1011.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:1253:4: continue_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_continue_statement_in_jump_statement7726);
        	        continue_statement1012=continue_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulejump_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, continue_statement1012.tree);

        	    }
        	    break;
        	case 3:
        	    // CSharp.g:1254:4: goto_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_goto_statement_in_jump_statement7731);
        	        goto_statement1013=goto_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulejump_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, goto_statement1013.tree);

        	    }
        	    break;
        	case 4:
        	    // CSharp.g:1255:4: return_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_return_statement_in_jump_statement7736);
        	        return_statement1014=return_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulejump_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, return_statement1014.tree);

        	    }
        	    break;
        	case 5:
        	    // CSharp.g:1256:4: throw_statement
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_throw_statement_in_jump_statement7741);
        	        throw_statement1015=throw_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulejump_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, throw_statement1015.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulejump_statementEx; /* Prevent compiler warnings */
    rulejump_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(281, jump_statement_StartIndex); }

    return retval;
}
/* $ANTLR end jump_statement */

/**
 * $ANTLR start break_statement
 * CSharp.g:1259:1: break_statement : 'break' ';' ;
 */
CSharpParser_break_statement_return
CSharpParser::break_statement()
{
    CSharpParser_break_statement_return retval(this);

    ANTLR_MARKER break_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal1016;
    const CommonTokenType*    char_literal1017;

    ImplTraits::TreeType* string_literal1016_tree;
    ImplTraits::TreeType* char_literal1017_tree;

    /* Initialize rule variables
     */
    break_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(282)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal1016       = NULL;
    char_literal1017       = NULL;
    retval.call_start_placeholder(); 


    string_literal1016_tree   = NULL;
    char_literal1017_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1260:2: ( 'break' ';' )
        // CSharp.g:1260:4: 'break' ';'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal1016 =  this->matchToken(107, &FOLLOW_107_in_break_statement7753);
            if  (this->hasException())
            {
                goto rulebreak_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal1016_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1016));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal1016_tree);
            }

            char_literal1017 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_break_statement7757);
            if  (this->hasException())
            {
                goto rulebreak_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal1017_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1017));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1017_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulebreak_statementEx; /* Prevent compiler warnings */
    rulebreak_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(282, break_statement_StartIndex); }

    return retval;
}
/* $ANTLR end break_statement */

/**
 * $ANTLR start continue_statement
 * CSharp.g:1263:1: continue_statement : 'continue' ';' ;
 */
CSharpParser_continue_statement_return
CSharpParser::continue_statement()
{
    CSharpParser_continue_statement_return retval(this);

    ANTLR_MARKER continue_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal1018;
    const CommonTokenType*    char_literal1019;

    ImplTraits::TreeType* string_literal1018_tree;
    ImplTraits::TreeType* char_literal1019_tree;

    /* Initialize rule variables
     */
    continue_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(283)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal1018       = NULL;
    char_literal1019       = NULL;
    retval.call_start_placeholder(); 


    string_literal1018_tree   = NULL;
    char_literal1019_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1264:2: ( 'continue' ';' )
        // CSharp.g:1264:4: 'continue' ';'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal1018 =  this->matchToken(115, &FOLLOW_115_in_continue_statement7769);
            if  (this->hasException())
            {
                goto rulecontinue_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal1018_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1018));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal1018_tree);
            }

            char_literal1019 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_continue_statement7773);
            if  (this->hasException())
            {
                goto rulecontinue_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal1019_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1019));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1019_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulecontinue_statementEx; /* Prevent compiler warnings */
    rulecontinue_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(283, continue_statement_StartIndex); }

    return retval;
}
/* $ANTLR end continue_statement */

/**
 * $ANTLR start goto_statement
 * CSharp.g:1267:1: goto_statement : 'goto' ( identifier | 'case' constant_expression | 'default' ) ';' ;
 */
CSharpParser_goto_statement_return
CSharpParser::goto_statement()
{
    CSharpParser_goto_statement_return retval(this);

    ANTLR_MARKER goto_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal1020;
    const CommonTokenType*    string_literal1022;
    const CommonTokenType*    string_literal1024;
    const CommonTokenType*    char_literal1025;
    CSharpParser_identifier_return identifier1021;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier1021;

    CSharpParser_constant_expression_return constant_expression1023;
    typedef	CSharpParser_constant_expression_return RETURN_TYPE_constant_expression1023;

    ImplTraits::TreeType* string_literal1020_tree;
    ImplTraits::TreeType* string_literal1022_tree;
    ImplTraits::TreeType* string_literal1024_tree;
    ImplTraits::TreeType* char_literal1025_tree;

    /* Initialize rule variables
     */
    goto_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(284)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal1020       = NULL;
    string_literal1022       = NULL;
    string_literal1024       = NULL;
    char_literal1025       = NULL;
    identifier1021.tree = NULL;

    constant_expression1023.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal1020_tree   = NULL;
    string_literal1022_tree   = NULL;
    string_literal1024_tree   = NULL;
    char_literal1025_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1268:2: ( 'goto' ( identifier | 'case' constant_expression | 'default' ) ';' )
        // CSharp.g:1268:4: 'goto' ( identifier | 'case' constant_expression | 'default' ) ';'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal1020 =  this->matchToken(136, &FOLLOW_136_in_goto_statement7785);
            if  (this->hasException())
            {
                goto rulegoto_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal1020_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1020));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal1020_tree);
            }

            // CSharp.g:1269:3: ( identifier | 'case' constant_expression | 'default' )
            {
                int alt262=3;
                switch ( this->LA(1) )
                {
                case IDENTIFIER:
                case 98:
                case 100:
                case 101:
                case 103:
                case 104:
                case 108:
                case 119:
                case 122:
                case 124:
                case 128:
                case 134:
                case 137:
                case 143:
                case 145:
                case 146:
                case 149:
                case 150:
                case 154:
                case 156:
                case 159:
                case 162:
                case 164:
                case 169:
                case 173:
                case 174:
                case 185:
                case 192:
                case 196:
                case 198:
                	{
                		alt262=1;
                	}
                    break;
                case 110:
                	{
                		alt262=2;
                	}
                    break;
                case 117:
                	{
                		alt262=3;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 262 );
                    ex->set_state( 0 );


                    goto rulegoto_statementEx;

                }

                switch (alt262)
                {
            	case 1:
            	    // CSharp.g:1270:4: identifier
            	    {
            	        this->followPush(FOLLOW_identifier_in_goto_statement7794);
            	        identifier1021=identifier();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulegoto_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier1021.tree);

            	    }
            	    break;
            	case 2:
            	    // CSharp.g:1271:5: 'case' constant_expression
            	    {
            	        string_literal1022 =  this->matchToken(110, &FOLLOW_110_in_goto_statement7800);
            	        if  (this->hasException())
            	        {
            	            goto rulegoto_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        string_literal1022_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1022));
            	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal1022_tree);
            	        }

            	        this->followPush(FOLLOW_constant_expression_in_goto_statement7804);
            	        constant_expression1023=constant_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulegoto_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constant_expression1023.tree);

            	    }
            	    break;
            	case 3:
            	    // CSharp.g:1272:5: 'default'
            	    {
            	        string_literal1024 =  this->matchToken(117, &FOLLOW_117_in_goto_statement7810);
            	        if  (this->hasException())
            	        {
            	            goto rulegoto_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        string_literal1024_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1024));
            	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal1024_tree);
            	        }

            	    }
            	    break;

                }
            }

            char_literal1025 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_goto_statement7819);
            if  (this->hasException())
            {
                goto rulegoto_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal1025_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1025));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1025_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulegoto_statementEx; /* Prevent compiler warnings */
    rulegoto_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(284, goto_statement_StartIndex); }

    return retval;
}
/* $ANTLR end goto_statement */

/**
 * $ANTLR start return_statement
 * CSharp.g:1276:1: return_statement : 'return' ( expression )? ';' ;
 */
CSharpParser_return_statement_return
CSharpParser::return_statement()
{
    CSharpParser_return_statement_return retval(this);

    ANTLR_MARKER return_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal1026;
    const CommonTokenType*    char_literal1028;
    CSharpParser_expression_return expression1027;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression1027;

    ImplTraits::TreeType* string_literal1026_tree;
    ImplTraits::TreeType* char_literal1028_tree;

    /* Initialize rule variables
     */
    return_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(285)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal1026       = NULL;
    char_literal1028       = NULL;
    expression1027.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal1026_tree   = NULL;
    char_literal1028_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1277:2: ( 'return' ( expression )? ';' )
        // CSharp.g:1277:4: 'return' ( expression )? ';'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal1026 =  this->matchToken(170, &FOLLOW_170_in_return_statement7830);
            if  (this->hasException())
            {
                goto rulereturn_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal1026_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1026));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal1026_tree);
            }

            // CSharp.g:1277:15: ( expression )?
            {
                int alt263=2;
                switch ( this->LA(1) )
                {
                    case Character_literal:
                    case FALSE:
                    case Hex_number:
                    case IDENTIFIER:
                    case LT_NULL:
                    case MINUS:
                    case NUMBER:
                    case Real_literal:
                    case STRINGLITERAL:
                    case TRUE:
                    case Verbatim_string_literal:
                    case 64:
                    case 69:
                    case 71:
                    case 72:
                    case 74:
                    case 75:
                    case 78:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 108:
                    case 109:
                    case 111:
                    case 112:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 121:
                    case 122:
                    case 124:
                    case 128:
                    case 131:
                    case 134:
                    case 137:
                    case 140:
                    case 143:
                    case 145:
                    case 146:
                    case 148:
                    case 149:
                    case 150:
                    case 152:
                    case 153:
                    case 154:
                    case 156:
                    case 159:
                    case 162:
                    case 164:
                    case 169:
                    case 171:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 179:
                    case 182:
                    case 185:
                    case 186:
                    case 187:
                    case 188:
                    case 189:
                    case 191:
                    case 192:
                    case 196:
                    case 198:
                    case 204:
                    	{
                    		alt263=1;
                    	}
                        break;
                }

                switch (alt263)
                {
            	case 1:
            	    // CSharp.g:1277:15: expression
            	    {
            	        this->followPush(FOLLOW_expression_in_return_statement7834);
            	        expression1027=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulereturn_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression1027.tree);

            	    }
            	    break;

                }
            }

            char_literal1028 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_return_statement7839);
            if  (this->hasException())
            {
                goto rulereturn_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal1028_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1028));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1028_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulereturn_statementEx; /* Prevent compiler warnings */
    rulereturn_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(285, return_statement_StartIndex); }

    return retval;
}
/* $ANTLR end return_statement */

/**
 * $ANTLR start throw_statement
 * CSharp.g:1280:1: throw_statement : 'throw' ( expression )? ';' ;
 */
CSharpParser_throw_statement_return
CSharpParser::throw_statement()
{
    CSharpParser_throw_statement_return retval(this);

    ANTLR_MARKER throw_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal1029;
    const CommonTokenType*    char_literal1031;
    CSharpParser_expression_return expression1030;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression1030;

    ImplTraits::TreeType* string_literal1029_tree;
    ImplTraits::TreeType* char_literal1031_tree;

    /* Initialize rule variables
     */
    throw_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(286)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal1029       = NULL;
    char_literal1031       = NULL;
    expression1030.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal1029_tree   = NULL;
    char_literal1031_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1280:16: ( 'throw' ( expression )? ';' )
        // CSharp.g:1281:2: 'throw' ( expression )? ';'
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal1029 =  this->matchToken(183, &FOLLOW_183_in_throw_statement7849);
            if  (this->hasException())
            {
                goto rulethrow_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal1029_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1029));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal1029_tree);
            }

            // CSharp.g:1281:12: ( expression )?
            {
                int alt264=2;
                switch ( this->LA(1) )
                {
                    case Character_literal:
                    case FALSE:
                    case Hex_number:
                    case IDENTIFIER:
                    case LT_NULL:
                    case MINUS:
                    case NUMBER:
                    case Real_literal:
                    case STRINGLITERAL:
                    case TRUE:
                    case Verbatim_string_literal:
                    case 64:
                    case 69:
                    case 71:
                    case 72:
                    case 74:
                    case 75:
                    case 78:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 108:
                    case 109:
                    case 111:
                    case 112:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 121:
                    case 122:
                    case 124:
                    case 128:
                    case 131:
                    case 134:
                    case 137:
                    case 140:
                    case 143:
                    case 145:
                    case 146:
                    case 148:
                    case 149:
                    case 150:
                    case 152:
                    case 153:
                    case 154:
                    case 156:
                    case 159:
                    case 162:
                    case 164:
                    case 169:
                    case 171:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 179:
                    case 182:
                    case 185:
                    case 186:
                    case 187:
                    case 188:
                    case 189:
                    case 191:
                    case 192:
                    case 196:
                    case 198:
                    case 204:
                    	{
                    		alt264=1;
                    	}
                        break;
                }

                switch (alt264)
                {
            	case 1:
            	    // CSharp.g:1281:12: expression
            	    {
            	        this->followPush(FOLLOW_expression_in_throw_statement7853);
            	        expression1030=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulethrow_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression1030.tree);

            	    }
            	    break;

                }
            }

            char_literal1031 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_throw_statement7858);
            if  (this->hasException())
            {
                goto rulethrow_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal1031_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1031));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1031_tree);
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulethrow_statementEx; /* Prevent compiler warnings */
    rulethrow_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(286, throw_statement_StartIndex); }

    return retval;
}
/* $ANTLR end throw_statement */

/**
 * $ANTLR start try_statement
 * CSharp.g:1284:1: try_statement : 'try' block ( catch_clauses ( finally_clause )? | finally_clause ) ;
 */
CSharpParser_try_statement_return
CSharpParser::try_statement()
{
    CSharpParser_try_statement_return retval(this);

    ANTLR_MARKER try_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal1032;
    CSharpParser_block_return block1033;
    typedef	CSharpParser_block_return RETURN_TYPE_block1033;

    CSharpParser_catch_clauses_return catch_clauses1034;
    typedef	CSharpParser_catch_clauses_return RETURN_TYPE_catch_clauses1034;

    CSharpParser_finally_clause_return finally_clause1035;
    typedef	CSharpParser_finally_clause_return RETURN_TYPE_finally_clause1035;

    CSharpParser_finally_clause_return finally_clause1036;
    typedef	CSharpParser_finally_clause_return RETURN_TYPE_finally_clause1036;

    ImplTraits::TreeType* string_literal1032_tree;

    /* Initialize rule variables
     */
    try_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(287)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal1032       = NULL;
    block1033.tree = NULL;

    catch_clauses1034.tree = NULL;

    finally_clause1035.tree = NULL;

    finally_clause1036.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal1032_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1285:2: ( 'try' block ( catch_clauses ( finally_clause )? | finally_clause ) )
        // CSharp.g:1285:4: 'try' block ( catch_clauses ( finally_clause )? | finally_clause )
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal1032 =  this->matchToken(184, &FOLLOW_184_in_try_statement7869);
            if  (this->hasException())
            {
                goto ruletry_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal1032_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1032));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal1032_tree);
            }

            this->followPush(FOLLOW_block_in_try_statement7873);
            block1033=block();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletry_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block1033.tree);

            // CSharp.g:1286:3: ( catch_clauses ( finally_clause )? | finally_clause )
            {
                int alt266=2;
                switch ( this->LA(1) )
                {
                case CATCH:
                	{
                		alt266=1;
                	}
                    break;
                case 129:
                	{
                		alt266=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 266 );
                    ex->set_state( 0 );


                    goto ruletry_statementEx;

                }

                switch (alt266)
                {
            	case 1:
            	    // CSharp.g:1287:4: catch_clauses ( finally_clause )?
            	    {
            	        this->followPush(FOLLOW_catch_clauses_in_try_statement7882);
            	        catch_clauses1034=catch_clauses();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletry_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, catch_clauses1034.tree);

            	        // CSharp.g:1287:20: ( finally_clause )?
            	        {
            	            int alt265=2;
            	            switch ( this->LA(1) )
            	            {
            	                case 129:
            	                	{
            	                		alt265=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt265)
            	            {
            	        	case 1:
            	        	    // CSharp.g:1287:20: finally_clause
            	        	    {
            	        	        this->followPush(FOLLOW_finally_clause_in_try_statement7886);
            	        	        finally_clause1035=finally_clause();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruletry_statementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, finally_clause1035.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // CSharp.g:1288:5: finally_clause
            	    {
            	        this->followPush(FOLLOW_finally_clause_in_try_statement7893);
            	        finally_clause1036=finally_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletry_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, finally_clause1036.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruletry_statementEx; /* Prevent compiler warnings */
    ruletry_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(287, try_statement_StartIndex); }

    return retval;
}
/* $ANTLR end try_statement */

/**
 * $ANTLR start catch_clauses
 * CSharp.g:1293:1: catch_clauses : 'catch' ( specific_catch_clauses | general_catch_clause ) ;
 */
CSharpParser_catch_clauses_return
CSharpParser::catch_clauses()
{
    CSharpParser_catch_clauses_return retval(this);

    ANTLR_MARKER catch_clauses_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal1037;
    CSharpParser_specific_catch_clauses_return specific_catch_clauses1038;
    typedef	CSharpParser_specific_catch_clauses_return RETURN_TYPE_specific_catch_clauses1038;

    CSharpParser_general_catch_clause_return general_catch_clause1039;
    typedef	CSharpParser_general_catch_clause_return RETURN_TYPE_general_catch_clause1039;

    ImplTraits::TreeType* string_literal1037_tree;

    /* Initialize rule variables
     */
    catch_clauses_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(288)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal1037       = NULL;
    specific_catch_clauses1038.tree = NULL;

    general_catch_clause1039.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal1037_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1294:2: ( 'catch' ( specific_catch_clauses | general_catch_clause ) )
        // CSharp.g:1294:4: 'catch' ( specific_catch_clauses | general_catch_clause )
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal1037 =  this->matchToken(CATCH, &FOLLOW_CATCH_in_catch_clauses7909);
            if  (this->hasException())
            {
                goto rulecatch_clausesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal1037_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1037));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal1037_tree);
            }

            // CSharp.g:1294:14: ( specific_catch_clauses | general_catch_clause )
            {
                int alt267=2;
                switch ( this->LA(1) )
                {
                case 71:
                	{
                		alt267=1;
                	}
                    break;
                case SEMI:
                case 199:
                	{
                		alt267=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 267 );
                    ex->set_state( 0 );


                    goto rulecatch_clausesEx;

                }

                switch (alt267)
                {
            	case 1:
            	    // CSharp.g:1294:15: specific_catch_clauses
            	    {
            	        this->followPush(FOLLOW_specific_catch_clauses_in_catch_clauses7914);
            	        specific_catch_clauses1038=specific_catch_clauses();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecatch_clausesEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, specific_catch_clauses1038.tree);

            	    }
            	    break;
            	case 2:
            	    // CSharp.g:1294:40: general_catch_clause
            	    {
            	        this->followPush(FOLLOW_general_catch_clause_in_catch_clauses7918);
            	        general_catch_clause1039=general_catch_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecatch_clausesEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, general_catch_clause1039.tree);

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulecatch_clausesEx; /* Prevent compiler warnings */
    rulecatch_clausesEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(288, catch_clauses_StartIndex); }

    return retval;
}
/* $ANTLR end catch_clauses */

/**
 * $ANTLR start specific_catch_clauses
 * CSharp.g:1297:1: specific_catch_clauses : specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )* ;
 */
CSharpParser_specific_catch_clauses_return
CSharpParser::specific_catch_clauses()
{
    CSharpParser_specific_catch_clauses_return retval(this);

    ANTLR_MARKER specific_catch_clauses_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal1041;
    CSharpParser_specific_catch_clause_return specific_catch_clause1040;
    typedef	CSharpParser_specific_catch_clause_return RETURN_TYPE_specific_catch_clause1040;

    CSharpParser_specific_catch_clause_return specific_catch_clause1042;
    typedef	CSharpParser_specific_catch_clause_return RETURN_TYPE_specific_catch_clause1042;

    CSharpParser_general_catch_clause_return general_catch_clause1043;
    typedef	CSharpParser_general_catch_clause_return RETURN_TYPE_general_catch_clause1043;

    ImplTraits::TreeType* string_literal1041_tree;

    /* Initialize rule variables
     */
    specific_catch_clauses_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(289)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal1041       = NULL;
    specific_catch_clause1040.tree = NULL;

    specific_catch_clause1042.tree = NULL;

    general_catch_clause1043.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal1041_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1298:2: ( specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )* )
        // CSharp.g:1298:4: specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )*
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_specific_catch_clause_in_specific_catch_clauses7931);
            specific_catch_clause1040=specific_catch_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulespecific_catch_clausesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, specific_catch_clause1040.tree);

            // CSharp.g:1298:28: ( 'catch' ( specific_catch_clause | general_catch_clause ) )*

            for (;;)
            {
                int alt269=2;
                switch ( this->LA(1) )
                {
                case CATCH:
                	{
                		alt269=1;
                	}
                    break;

                }

                switch (alt269)
                {
            	case 1:
            	    // CSharp.g:1298:29: 'catch' ( specific_catch_clause | general_catch_clause )
            	    {
            	        string_literal1041 =  this->matchToken(CATCH, &FOLLOW_CATCH_in_specific_catch_clauses7936);
            	        if  (this->hasException())
            	        {
            	            goto rulespecific_catch_clausesEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        string_literal1041_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1041));
            	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal1041_tree);
            	        }

            	        // CSharp.g:1298:39: ( specific_catch_clause | general_catch_clause )
            	        {
            	            int alt268=2;
            	            switch ( this->LA(1) )
            	            {
            	            case 71:
            	            	{
            	            		alt268=1;
            	            	}
            	                break;
            	            case SEMI:
            	            case 199:
            	            	{
            	            		alt268=2;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 268 );
            	                ex->set_state( 0 );


            	                goto rulespecific_catch_clausesEx;

            	            }

            	            switch (alt268)
            	            {
            	        	case 1:
            	        	    // CSharp.g:1298:40: specific_catch_clause
            	        	    {
            	        	        this->followPush(FOLLOW_specific_catch_clause_in_specific_catch_clauses7941);
            	        	        specific_catch_clause1042=specific_catch_clause();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulespecific_catch_clausesEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, specific_catch_clause1042.tree);

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CSharp.g:1298:64: general_catch_clause
            	        	    {
            	        	        this->followPush(FOLLOW_general_catch_clause_in_specific_catch_clauses7945);
            	        	        general_catch_clause1043=general_catch_clause();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulespecific_catch_clausesEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, general_catch_clause1043.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop269;	/* break out of the loop */
            	    break;
                }
            }
            loop269: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulespecific_catch_clausesEx; /* Prevent compiler warnings */
    rulespecific_catch_clausesEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(289, specific_catch_clauses_StartIndex); }

    return retval;
}
/* $ANTLR end specific_catch_clauses */

/**
 * $ANTLR start specific_catch_clause
 * CSharp.g:1301:1: specific_catch_clause : '(' class_type ( identifier )? ')' block ;
 */
CSharpParser_specific_catch_clause_return
CSharpParser::specific_catch_clause()
{
    CSharpParser_specific_catch_clause_return retval(this);

    ANTLR_MARKER specific_catch_clause_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal1044;
    const CommonTokenType*    char_literal1047;
    CSharpParser_class_type_return class_type1045;
    typedef	CSharpParser_class_type_return RETURN_TYPE_class_type1045;

    CSharpParser_identifier_return identifier1046;
    typedef	CSharpParser_identifier_return RETURN_TYPE_identifier1046;

    CSharpParser_block_return block1048;
    typedef	CSharpParser_block_return RETURN_TYPE_block1048;

    ImplTraits::TreeType* char_literal1044_tree;
    ImplTraits::TreeType* char_literal1047_tree;

    /* Initialize rule variables
     */
    specific_catch_clause_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(290)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal1044       = NULL;
    char_literal1047       = NULL;
    class_type1045.tree = NULL;

    identifier1046.tree = NULL;

    block1048.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal1044_tree   = NULL;
    char_literal1047_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1302:2: ( '(' class_type ( identifier )? ')' block )
        // CSharp.g:1302:4: '(' class_type ( identifier )? ')' block
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            char_literal1044 =  this->matchToken(71, &FOLLOW_71_in_specific_catch_clause7960);
            if  (this->hasException())
            {
                goto rulespecific_catch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal1044_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1044));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1044_tree);
            }

            this->followPush(FOLLOW_class_type_in_specific_catch_clause7964);
            class_type1045=class_type();

            this->followPop();
            if  (this->hasException())
            {
                goto rulespecific_catch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, class_type1045.tree);

            // CSharp.g:1302:23: ( identifier )?
            {
                int alt270=2;
                switch ( this->LA(1) )
                {
                    case IDENTIFIER:
                    case 98:
                    case 100:
                    case 101:
                    case 103:
                    case 104:
                    case 108:
                    case 119:
                    case 122:
                    case 124:
                    case 128:
                    case 134:
                    case 137:
                    case 143:
                    case 145:
                    case 146:
                    case 149:
                    case 150:
                    case 154:
                    case 156:
                    case 159:
                    case 162:
                    case 164:
                    case 169:
                    case 173:
                    case 174:
                    case 185:
                    case 192:
                    case 196:
                    case 198:
                    	{
                    		alt270=1;
                    	}
                        break;
                }

                switch (alt270)
                {
            	case 1:
            	    // CSharp.g:1302:23: identifier
            	    {
            	        this->followPush(FOLLOW_identifier_in_specific_catch_clause7968);
            	        identifier1046=identifier();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulespecific_catch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, identifier1046.tree);

            	    }
            	    break;

                }
            }

            char_literal1047 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_specific_catch_clause7973);
            if  (this->hasException())
            {
                goto rulespecific_catch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal1047_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1047));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1047_tree);
            }

            this->followPush(FOLLOW_block_in_specific_catch_clause7977);
            block1048=block();

            this->followPop();
            if  (this->hasException())
            {
                goto rulespecific_catch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block1048.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulespecific_catch_clauseEx; /* Prevent compiler warnings */
    rulespecific_catch_clauseEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(290, specific_catch_clause_StartIndex); }

    return retval;
}
/* $ANTLR end specific_catch_clause */

/**
 * $ANTLR start general_catch_clause
 * CSharp.g:1305:1: general_catch_clause : block ;
 */
CSharpParser_general_catch_clause_return
CSharpParser::general_catch_clause()
{
    CSharpParser_general_catch_clause_return retval(this);

    ANTLR_MARKER general_catch_clause_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_block_return block1049;
    typedef	CSharpParser_block_return RETURN_TYPE_block1049;


    /* Initialize rule variables
     */
    general_catch_clause_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(291)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    block1049.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:1306:2: ( block )
        // CSharp.g:1306:4: block
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            this->followPush(FOLLOW_block_in_general_catch_clause7989);
            block1049=block();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegeneral_catch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block1049.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulegeneral_catch_clauseEx; /* Prevent compiler warnings */
    rulegeneral_catch_clauseEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(291, general_catch_clause_StartIndex); }

    return retval;
}
/* $ANTLR end general_catch_clause */

/**
 * $ANTLR start finally_clause
 * CSharp.g:1309:1: finally_clause : 'finally' block ;
 */
CSharpParser_finally_clause_return
CSharpParser::finally_clause()
{
    CSharpParser_finally_clause_return retval(this);

    ANTLR_MARKER finally_clause_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal1050;
    CSharpParser_block_return block1051;
    typedef	CSharpParser_block_return RETURN_TYPE_block1051;

    ImplTraits::TreeType* string_literal1050_tree;

    /* Initialize rule variables
     */
    finally_clause_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(292)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal1050       = NULL;
    block1051.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal1050_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1310:2: ( 'finally' block )
        // CSharp.g:1310:4: 'finally' block
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal1050 =  this->matchToken(129, &FOLLOW_129_in_finally_clause8001);
            if  (this->hasException())
            {
                goto rulefinally_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal1050_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1050));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal1050_tree);
            }

            this->followPush(FOLLOW_block_in_finally_clause8005);
            block1051=block();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefinally_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block1051.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulefinally_clauseEx; /* Prevent compiler warnings */
    rulefinally_clauseEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(292, finally_clause_StartIndex); }

    return retval;
}
/* $ANTLR end finally_clause */

/**
 * $ANTLR start checked_statement
 * CSharp.g:1312:1: checked_statement : 'checked' block ;
 */
CSharpParser_checked_statement_return
CSharpParser::checked_statement()
{
    CSharpParser_checked_statement_return retval(this);

    ANTLR_MARKER checked_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal1052;
    CSharpParser_block_return block1053;
    typedef	CSharpParser_block_return RETURN_TYPE_block1053;

    ImplTraits::TreeType* string_literal1052_tree;

    /* Initialize rule variables
     */
    checked_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(293)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal1052       = NULL;
    block1053.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal1052_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1313:2: ( 'checked' block )
        // CSharp.g:1313:4: 'checked' block
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal1052 =  this->matchToken(112, &FOLLOW_112_in_checked_statement8015);
            if  (this->hasException())
            {
                goto rulechecked_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal1052_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1052));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal1052_tree);
            }

            this->followPush(FOLLOW_block_in_checked_statement8019);
            block1053=block();

            this->followPop();
            if  (this->hasException())
            {
                goto rulechecked_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block1053.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulechecked_statementEx; /* Prevent compiler warnings */
    rulechecked_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(293, checked_statement_StartIndex); }

    return retval;
}
/* $ANTLR end checked_statement */

/**
 * $ANTLR start unchecked_statement
 * CSharp.g:1316:1: unchecked_statement : 'unchecked' block ;
 */
CSharpParser_unchecked_statement_return
CSharpParser::unchecked_statement()
{
    CSharpParser_unchecked_statement_return retval(this);

    ANTLR_MARKER unchecked_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal1054;
    CSharpParser_block_return block1055;
    typedef	CSharpParser_block_return RETURN_TYPE_block1055;

    ImplTraits::TreeType* string_literal1054_tree;

    /* Initialize rule variables
     */
    unchecked_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(294)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal1054       = NULL;
    block1055.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal1054_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1317:2: ( 'unchecked' block )
        // CSharp.g:1317:4: 'unchecked' block
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal1054 =  this->matchToken(189, &FOLLOW_189_in_unchecked_statement8031);
            if  (this->hasException())
            {
                goto ruleunchecked_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal1054_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1054));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal1054_tree);
            }

            this->followPush(FOLLOW_block_in_unchecked_statement8035);
            block1055=block();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunchecked_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block1055.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleunchecked_statementEx; /* Prevent compiler warnings */
    ruleunchecked_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(294, unchecked_statement_StartIndex); }

    return retval;
}
/* $ANTLR end unchecked_statement */

/**
 * $ANTLR start lock_statement
 * CSharp.g:1320:1: lock_statement : 'lock' '(' expression ')' embedded_statement ;
 */
CSharpParser_lock_statement_return
CSharpParser::lock_statement()
{
    CSharpParser_lock_statement_return retval(this);

    ANTLR_MARKER lock_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal1056;
    const CommonTokenType*    char_literal1057;
    const CommonTokenType*    char_literal1059;
    CSharpParser_expression_return expression1058;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression1058;

    CSharpParser_embedded_statement_return embedded_statement1060;
    typedef	CSharpParser_embedded_statement_return RETURN_TYPE_embedded_statement1060;

    ImplTraits::TreeType* string_literal1056_tree;
    ImplTraits::TreeType* char_literal1057_tree;
    ImplTraits::TreeType* char_literal1059_tree;

    /* Initialize rule variables
     */
    lock_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(295)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal1056       = NULL;
    char_literal1057       = NULL;
    char_literal1059       = NULL;
    expression1058.tree = NULL;

    embedded_statement1060.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal1056_tree   = NULL;
    char_literal1057_tree   = NULL;
    char_literal1059_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1321:2: ( 'lock' '(' expression ')' embedded_statement )
        // CSharp.g:1321:4: 'lock' '(' expression ')' embedded_statement
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal1056 =  this->matchToken(147, &FOLLOW_147_in_lock_statement8047);
            if  (this->hasException())
            {
                goto rulelock_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal1056_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1056));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal1056_tree);
            }

            char_literal1057 =  this->matchToken(71, &FOLLOW_71_in_lock_statement8051);
            if  (this->hasException())
            {
                goto rulelock_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal1057_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1057));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1057_tree);
            }

            this->followPush(FOLLOW_expression_in_lock_statement8054);
            expression1058=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression1058.tree);

            char_literal1059 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_lock_statement8058);
            if  (this->hasException())
            {
                goto rulelock_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal1059_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1059));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1059_tree);
            }

            this->followPush(FOLLOW_embedded_statement_in_lock_statement8062);
            embedded_statement1060=embedded_statement();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, embedded_statement1060.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulelock_statementEx; /* Prevent compiler warnings */
    rulelock_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(295, lock_statement_StartIndex); }

    return retval;
}
/* $ANTLR end lock_statement */

/**
 * $ANTLR start using_statement
 * CSharp.g:1324:1: using_statement : 'using' '(' resource_acquisition ')' embedded_statement ;
 */
CSharpParser_using_statement_return
CSharpParser::using_statement()
{
    CSharpParser_using_statement_return retval(this);

    ANTLR_MARKER using_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal1061;
    const CommonTokenType*    char_literal1062;
    const CommonTokenType*    char_literal1064;
    CSharpParser_resource_acquisition_return resource_acquisition1063;
    typedef	CSharpParser_resource_acquisition_return RETURN_TYPE_resource_acquisition1063;

    CSharpParser_embedded_statement_return embedded_statement1065;
    typedef	CSharpParser_embedded_statement_return RETURN_TYPE_embedded_statement1065;

    ImplTraits::TreeType* string_literal1061_tree;
    ImplTraits::TreeType* char_literal1062_tree;
    ImplTraits::TreeType* char_literal1064_tree;

    /* Initialize rule variables
     */
    using_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(296)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal1061       = NULL;
    char_literal1062       = NULL;
    char_literal1064       = NULL;
    resource_acquisition1063.tree = NULL;

    embedded_statement1065.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal1061_tree   = NULL;
    char_literal1062_tree   = NULL;
    char_literal1064_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1325:2: ( 'using' '(' resource_acquisition ')' embedded_statement )
        // CSharp.g:1325:4: 'using' '(' resource_acquisition ')' embedded_statement
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal1061 =  this->matchToken(USING, &FOLLOW_USING_in_using_statement8074);
            if  (this->hasException())
            {
                goto ruleusing_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal1061_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1061));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal1061_tree);
            }

            char_literal1062 =  this->matchToken(71, &FOLLOW_71_in_using_statement8078);
            if  (this->hasException())
            {
                goto ruleusing_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal1062_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1062));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1062_tree);
            }

            this->followPush(FOLLOW_resource_acquisition_in_using_statement8083);
            resource_acquisition1063=resource_acquisition();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleusing_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, resource_acquisition1063.tree);

            char_literal1064 =  this->matchToken(RPAREN, &FOLLOW_RPAREN_in_using_statement8087);
            if  (this->hasException())
            {
                goto ruleusing_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            char_literal1064_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1064));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1064_tree);
            }

            this->followPush(FOLLOW_embedded_statement_in_using_statement8092);
            embedded_statement1065=embedded_statement();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleusing_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, embedded_statement1065.tree);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleusing_statementEx; /* Prevent compiler warnings */
    ruleusing_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(296, using_statement_StartIndex); }

    return retval;
}
/* $ANTLR end using_statement */

/**
 * $ANTLR start resource_acquisition
 * CSharp.g:1328:1: resource_acquisition : ( ( local_variable_declaration )=> local_variable_declaration | expression );
 */
CSharpParser_resource_acquisition_return
CSharpParser::resource_acquisition()
{
    CSharpParser_resource_acquisition_return retval(this);

    ANTLR_MARKER resource_acquisition_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_local_variable_declaration_return local_variable_declaration1066;
    typedef	CSharpParser_local_variable_declaration_return RETURN_TYPE_local_variable_declaration1066;

    CSharpParser_expression_return expression1067;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression1067;


    /* Initialize rule variables
     */
    resource_acquisition_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(297)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    local_variable_declaration1066.tree = NULL;

    expression1067.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        {
            //  CSharp.g:1329:2: ( ( local_variable_declaration )=> local_variable_declaration | expression )

            ANTLR_UINT32 alt271;

            alt271=2;

            {
                int LA271_0 = this->LA(1);
                if ( (LA271_0 == 192))
                {
                    {
                        int LA271_1 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred39_CSharp>() )))
                        {
                            alt271=1;
                        }
                        else if ( (true))
                        {
                            alt271=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 271 );
                            ex->set_state( 1 );


                            goto ruleresource_acquisitionEx;

                        }
                    }
                }
                else if ( (LA271_0 == 122))
                {
                    {
                        int LA271_2 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred39_CSharp>() )))
                        {
                            alt271=1;
                        }
                        else if ( (true))
                        {
                            alt271=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 271 );
                            ex->set_state( 2 );


                            goto ruleresource_acquisitionEx;

                        }
                    }
                }
                else if ( (LA271_0 == 106 || LA271_0 == 109 || LA271_0 == 111 || LA271_0 == 116 || LA271_0 == 121 || LA271_0 == 131 || LA271_0 == 140 || LA271_0 == 148 || LA271_0 == 153 || LA271_0 == 171 || LA271_0 == 175 || LA271_0 == 179 || ((LA271_0 >= 187) && (LA271_0 <= 188)) || LA271_0 == 191))
                {
                    {
                        int LA271_3 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred39_CSharp>() )))
                        {
                            alt271=1;
                        }
                        else if ( (true))
                        {
                            alt271=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 271 );
                            ex->set_state( 3 );


                            goto ruleresource_acquisitionEx;

                        }
                    }
                }
                else if ( (LA271_0 == 134))
                {
                    {
                        int LA271_4 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred39_CSharp>() )))
                        {
                            alt271=1;
                        }
                        else if ( (true))
                        {
                            alt271=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 271 );
                            ex->set_state( 4 );


                            goto ruleresource_acquisitionEx;

                        }
                    }
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred39_CSharp>() )) && (LA271_0 == 194))
                {
                    alt271=1;
                }
                else if ( (LA271_0 == Character_literal || LA271_0 == FALSE || LA271_0 == Hex_number || ((LA271_0 >= LT_NULL) && (LA271_0 <= NUMBER)) || LA271_0 == Real_literal || LA271_0 == STRINGLITERAL || LA271_0 == TRUE || LA271_0 == Verbatim_string_literal || LA271_0 == 64 || LA271_0 == 69 || ((LA271_0 >= 71) && (LA271_0 <= 72)) || ((LA271_0 >= 74) && (LA271_0 <= 75)) || LA271_0 == 78 || LA271_0 == 105 || LA271_0 == 112 || ((LA271_0 >= 117) && (LA271_0 <= 118)) || LA271_0 == 152 || LA271_0 == 176 || LA271_0 == 182 || LA271_0 == 186 || LA271_0 == 189 || LA271_0 == 204))
                {
                    alt271=2;
                }
                else if ( (LA271_0 == IDENTIFIER || LA271_0 == 98 || ((LA271_0 >= 100) && (LA271_0 <= 101)) || ((LA271_0 >= 103) && (LA271_0 <= 104)) || LA271_0 == 108 || LA271_0 == 119 || LA271_0 == 124 || LA271_0 == 128 || LA271_0 == 137 || LA271_0 == 143 || ((LA271_0 >= 145) && (LA271_0 <= 146)) || ((LA271_0 >= 149) && (LA271_0 <= 150)) || LA271_0 == 154 || LA271_0 == 156 || LA271_0 == 159 || LA271_0 == 162 || LA271_0 == 164 || LA271_0 == 169 || ((LA271_0 >= 173) && (LA271_0 <= 174)) || LA271_0 == 185 || LA271_0 == 196 || LA271_0 == 198))
                {
                    {
                        int LA271_25 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred39_CSharp>() )))
                        {
                            alt271=1;
                        }
                        else if ( (true))
                        {
                            alt271=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 271 );
                            ex->set_state( 25 );


                            goto ruleresource_acquisitionEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 271 );
                    ex->set_state( 0 );


                    goto ruleresource_acquisitionEx;

                }
            }
            switch (alt271)
            {
        	case 1:
        	    // CSharp.g:1329:4: ( local_variable_declaration )=> local_variable_declaration
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_local_variable_declaration_in_resource_acquisition8110);
        	        local_variable_declaration1066=local_variable_declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleresource_acquisitionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, local_variable_declaration1066.tree);

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:1330:4: expression
        	    {
        	        root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


        	        this->followPush(FOLLOW_expression_in_resource_acquisition8115);
        	        expression1067=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleresource_acquisitionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression1067.tree);

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleresource_acquisitionEx; /* Prevent compiler warnings */
    ruleresource_acquisitionEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(297, resource_acquisition_StartIndex); }

    return retval;
}
/* $ANTLR end resource_acquisition */

/**
 * $ANTLR start yield_statement
 * CSharp.g:1333:1: yield_statement : 'yield' ( 'return' expression ';' | 'break' ';' ) ;
 */
CSharpParser_yield_statement_return
CSharpParser::yield_statement()
{
    CSharpParser_yield_statement_return retval(this);

    ANTLR_MARKER yield_statement_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal1068;
    const CommonTokenType*    string_literal1069;
    const CommonTokenType*    char_literal1071;
    const CommonTokenType*    string_literal1072;
    const CommonTokenType*    char_literal1073;
    CSharpParser_expression_return expression1070;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression1070;

    ImplTraits::TreeType* string_literal1068_tree;
    ImplTraits::TreeType* string_literal1069_tree;
    ImplTraits::TreeType* char_literal1071_tree;
    ImplTraits::TreeType* string_literal1072_tree;
    ImplTraits::TreeType* char_literal1073_tree;

    /* Initialize rule variables
     */
    yield_statement_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(298)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal1068       = NULL;
    string_literal1069       = NULL;
    char_literal1071       = NULL;
    string_literal1072       = NULL;
    char_literal1073       = NULL;
    expression1070.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal1068_tree   = NULL;
    string_literal1069_tree   = NULL;
    char_literal1071_tree   = NULL;
    string_literal1072_tree   = NULL;
    char_literal1073_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1334:2: ( 'yield' ( 'return' expression ';' | 'break' ';' ) )
        // CSharp.g:1334:4: 'yield' ( 'return' expression ';' | 'break' ';' )
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            string_literal1068 =  this->matchToken(198, &FOLLOW_198_in_yield_statement8126);
            if  (this->hasException())
            {
                goto ruleyield_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            string_literal1068_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1068));
            ADAPTOR->addChild(ADAPTOR, root_0, string_literal1068_tree);
            }

            // CSharp.g:1335:3: ( 'return' expression ';' | 'break' ';' )
            {
                int alt272=2;
                switch ( this->LA(1) )
                {
                case 170:
                	{
                		alt272=1;
                	}
                    break;
                case 107:
                	{
                		alt272=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 272 );
                    ex->set_state( 0 );


                    goto ruleyield_statementEx;

                }

                switch (alt272)
                {
            	case 1:
            	    // CSharp.g:1336:4: 'return' expression ';'
            	    {
            	        string_literal1069 =  this->matchToken(170, &FOLLOW_170_in_yield_statement8135);
            	        if  (this->hasException())
            	        {
            	            goto ruleyield_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        string_literal1069_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1069));
            	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal1069_tree);
            	        }

            	        this->followPush(FOLLOW_expression_in_yield_statement8139);
            	        expression1070=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleyield_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression1070.tree);

            	        char_literal1071 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_yield_statement8143);
            	        if  (this->hasException())
            	        {
            	            goto ruleyield_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal1071_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1071));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal1071_tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // CSharp.g:1337:5: 'break' ';'
            	    {
            	        string_literal1072 =  this->matchToken(107, &FOLLOW_107_in_yield_statement8149);
            	        if  (this->hasException())
            	        {
            	            goto ruleyield_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        string_literal1072_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1072));
            	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal1072_tree);
            	        }

            	        char_literal1073 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_yield_statement8153);
            	        if  (this->hasException())
            	        {
            	            goto ruleyield_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        char_literal1073_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1073));
            	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal1073_tree);
            	        }

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleyield_statementEx; /* Prevent compiler warnings */
    ruleyield_statementEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(298, yield_statement_StartIndex); }

    return retval;
}
/* $ANTLR end yield_statement */

/**
 * $ANTLR start predefined_type
 * CSharp.g:1346:1: predefined_type : ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' );
 */
CSharpParser_predefined_type_return
CSharpParser::predefined_type()
{
    CSharpParser_predefined_type_return retval(this);

    ANTLR_MARKER predefined_type_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set1074;

    ImplTraits::TreeType* set1074_tree;

    /* Initialize rule variables
     */
    predefined_type_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(299)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set1074       = NULL;
    retval.call_start_placeholder(); 


    set1074_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1347:2: ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' )
        // CSharp.g:
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            set1074=(const CommonTokenType*) this->LT(1);

            if ( this->LA(1) == 106 || this->LA(1) == 109 || this->LA(1) == 111 || this->LA(1) == 116 || this->LA(1) == 121 || this->LA(1) == 131 || this->LA(1) == 140 || this->LA(1) == 148 || this->LA(1) == 153 || this->LA(1) == 171 || this->LA(1) == 175 || this->LA(1) == 179 || ((this->LA(1) >= 187) && (this->LA(1) <= 188)) || this->LA(1) == 191 )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set1074))
                );
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulepredefined_typeEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulepredefined_typeEx; /* Prevent compiler warnings */
    rulepredefined_typeEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(299, predefined_type_StartIndex); }

    return retval;
}
/* $ANTLR end predefined_type */

/**
 * $ANTLR start identifier
 * CSharp.g:1364:1: identifier : ( IDENTIFIER | 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' );
 */
CSharpParser_identifier_return
CSharpParser::identifier()
{
    CSharpParser_identifier_return retval(this);

    ANTLR_MARKER identifier_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set1075;

    ImplTraits::TreeType* set1075_tree;

    /* Initialize rule variables
     */
    identifier_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(300)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set1075       = NULL;
    retval.call_start_placeholder(); 


    set1075_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1365:2: ( IDENTIFIER | 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' )
        // CSharp.g:
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            set1075=(const CommonTokenType*) this->LT(1);

            if ( this->LA(1) == IDENTIFIER || this->LA(1) == 98 || ((this->LA(1) >= 100) && (this->LA(1) <= 101)) || ((this->LA(1) >= 103) && (this->LA(1) <= 104)) || this->LA(1) == 108 || this->LA(1) == 119 || this->LA(1) == 122 || this->LA(1) == 124 || this->LA(1) == 128 || this->LA(1) == 134 || this->LA(1) == 137 || this->LA(1) == 143 || ((this->LA(1) >= 145) && (this->LA(1) <= 146)) || ((this->LA(1) >= 149) && (this->LA(1) <= 150)) || this->LA(1) == 154 || this->LA(1) == 156 || this->LA(1) == 159 || this->LA(1) == 162 || this->LA(1) == 164 || this->LA(1) == 169 || ((this->LA(1) >= 173) && (this->LA(1) <= 174)) || this->LA(1) == 185 || this->LA(1) == 192 || this->LA(1) == 196 || this->LA(1) == 198 )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set1075))
                );
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruleidentifierEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleidentifierEx; /* Prevent compiler warnings */
    ruleidentifierEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(300, identifier_StartIndex); }

    return retval;
}
/* $ANTLR end identifier */

/**
 * $ANTLR start keyword
 * CSharp.g:1397:1: keyword : ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' );
 */
CSharpParser_keyword_return
CSharpParser::keyword()
{
    CSharpParser_keyword_return retval(this);

    ANTLR_MARKER keyword_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set1076;

    ImplTraits::TreeType* set1076_tree;

    /* Initialize rule variables
     */
    keyword_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(301)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set1076       = NULL;
    retval.call_start_placeholder(); 


    set1076_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1398:2: ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' )
        // CSharp.g:
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            set1076=(const CommonTokenType*) this->LT(1);

            if ( this->LA(1) == CATCH || this->LA(1) == ENUM || this->LA(1) == FALSE || this->LA(1) == IF || this->LA(1) == LT_NULL || this->LA(1) == TRUE || this->LA(1) == USING || this->LA(1) == 99 || this->LA(1) == 102 || ((this->LA(1) >= 105) && (this->LA(1) <= 107)) || ((this->LA(1) >= 109) && (this->LA(1) <= 118)) || ((this->LA(1) >= 120) && (this->LA(1) <= 121)) || this->LA(1) == 123 || ((this->LA(1) >= 125) && (this->LA(1) <= 127)) || ((this->LA(1) >= 129) && (this->LA(1) <= 133)) || this->LA(1) == 136 || ((this->LA(1) >= 138) && (this->LA(1) <= 142)) || this->LA(1) == 144 || ((this->LA(1) >= 147) && (this->LA(1) <= 148)) || ((this->LA(1) >= 151) && (this->LA(1) <= 153)) || this->LA(1) == 155 || ((this->LA(1) >= 157) && (this->LA(1) <= 158)) || this->LA(1) == 160 || this->LA(1) == 163 || ((this->LA(1) >= 165) && (this->LA(1) <= 168)) || ((this->LA(1) >= 170) && (this->LA(1) <= 172)) || ((this->LA(1) >= 175) && (this->LA(1) <= 184)) || ((this->LA(1) >= 186) && (this->LA(1) <= 191)) || ((this->LA(1) >= 193) && (this->LA(1) <= 195)) )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set1076))
                );
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulekeywordEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulekeywordEx; /* Prevent compiler warnings */
    rulekeywordEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(301, keyword_StartIndex); }

    return retval;
}
/* $ANTLR end keyword */

/**
 * $ANTLR start also_keyword
 * CSharp.g:1476:1: also_keyword : ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'event' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' );
 */
CSharpParser_also_keyword_return
CSharpParser::also_keyword()
{
    CSharpParser_also_keyword_return retval(this);

    ANTLR_MARKER also_keyword_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set1077;

    ImplTraits::TreeType* set1077_tree;

    /* Initialize rule variables
     */
    also_keyword_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(302)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set1077       = NULL;
    retval.call_start_placeholder(); 


    set1077_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1477:2: ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'event' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' )
        // CSharp.g:
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            set1077=(const CommonTokenType*) this->LT(1);

            if ( this->LA(1) == 98 || ((this->LA(1) >= 100) && (this->LA(1) <= 101)) || ((this->LA(1) >= 103) && (this->LA(1) <= 104)) || this->LA(1) == 108 || this->LA(1) == 119 || this->LA(1) == 122 || ((this->LA(1) >= 124) && (this->LA(1) <= 125)) || this->LA(1) == 128 || this->LA(1) == 134 || this->LA(1) == 137 || this->LA(1) == 143 || ((this->LA(1) >= 145) && (this->LA(1) <= 146)) || ((this->LA(1) >= 149) && (this->LA(1) <= 150)) || this->LA(1) == 154 || this->LA(1) == 156 || this->LA(1) == 159 || this->LA(1) == 162 || this->LA(1) == 164 || this->LA(1) == 169 || ((this->LA(1) >= 173) && (this->LA(1) <= 174)) || this->LA(1) == 185 || this->LA(1) == 192 || this->LA(1) == 196 || this->LA(1) == 198 )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set1077))
                );
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulealso_keywordEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulealso_keywordEx; /* Prevent compiler warnings */
    rulealso_keywordEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(302, also_keyword_StartIndex); }

    return retval;
}
/* $ANTLR end also_keyword */

/**
 * $ANTLR start literal
 * CSharp.g:1509:1: literal : ( Real_literal | NUMBER | Hex_number | Character_literal | STRINGLITERAL | Verbatim_string_literal | TRUE | FALSE | LT_NULL );
 */
CSharpParser_literal_return
CSharpParser::literal()
{
    CSharpParser_literal_return retval(this);

    ANTLR_MARKER literal_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    set1078;

    ImplTraits::TreeType* set1078_tree;

    /* Initialize rule variables
     */
    literal_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(303)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    set1078       = NULL;
    retval.call_start_placeholder(); 


    set1078_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1509:8: ( Real_literal | NUMBER | Hex_number | Character_literal | STRINGLITERAL | Verbatim_string_literal | TRUE | FALSE | LT_NULL )
        // CSharp.g:
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            set1078=(const CommonTokenType*) this->LT(1);

            if ( this->LA(1) == Character_literal || this->LA(1) == FALSE || this->LA(1) == Hex_number || this->LA(1) == LT_NULL || this->LA(1) == NUMBER || this->LA(1) == Real_literal || this->LA(1) == STRINGLITERAL || this->LA(1) == TRUE || this->LA(1) == Verbatim_string_literal )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, set1078))
                );
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruleliteralEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(303, literal_StartIndex); }

    return retval;
}
/* $ANTLR end literal */

/**
 * $ANTLR start assignment_list
 * CSharp.g:1783:1: assignment_list : ( assignment ';' )+ ;
 */
CSharpParser_assignment_list_return
CSharpParser::assignment_list()
{
    CSharpParser_assignment_list_return retval(this);

    ANTLR_MARKER assignment_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal1080;
    CSharpParser_assignment_return assignment1079;
    typedef	CSharpParser_assignment_return RETURN_TYPE_assignment1079;

    ImplTraits::TreeType* char_literal1080_tree;

    /* Initialize rule variables
     */
    assignment_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(304)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal1080       = NULL;
    assignment1079.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal1080_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1783:16: ( ( assignment ';' )+ )
        // CSharp.g:1784:2: ( assignment ';' )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:1784:2: ( assignment ';' )+
            {
                int cnt273=0;

                for (;;)
                {
                    int alt273=2;
            	switch ( this->LA(1) )
            	{
            	case Character_literal:
            	case FALSE:
            	case Hex_number:
            	case IDENTIFIER:
            	case LT_NULL:
            	case MINUS:
            	case NUMBER:
            	case Real_literal:
            	case STRINGLITERAL:
            	case TRUE:
            	case Verbatim_string_literal:
            	case 64:
            	case 69:
            	case 71:
            	case 72:
            	case 74:
            	case 75:
            	case 78:
            	case 98:
            	case 100:
            	case 101:
            	case 103:
            	case 104:
            	case 105:
            	case 106:
            	case 108:
            	case 109:
            	case 111:
            	case 112:
            	case 116:
            	case 117:
            	case 118:
            	case 119:
            	case 121:
            	case 122:
            	case 124:
            	case 128:
            	case 131:
            	case 134:
            	case 137:
            	case 140:
            	case 143:
            	case 145:
            	case 146:
            	case 148:
            	case 149:
            	case 150:
            	case 152:
            	case 153:
            	case 154:
            	case 156:
            	case 159:
            	case 162:
            	case 164:
            	case 169:
            	case 171:
            	case 173:
            	case 174:
            	case 175:
            	case 176:
            	case 179:
            	case 182:
            	case 185:
            	case 186:
            	case 187:
            	case 188:
            	case 189:
            	case 191:
            	case 192:
            	case 196:
            	case 198:
            	case 204:
            		{
            			alt273=1;
            		}
            	    break;

            	}

            	switch (alt273)
            	{
            	    case 1:
            	        // CSharp.g:1784:3: assignment ';'
            	        {
            	            this->followPush(FOLLOW_assignment_in_assignment_list11080);
            	            assignment1079=assignment();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleassignment_listEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, assignment1079.tree);

            	            char_literal1080 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_assignment_list11082);
            	            if  (this->hasException())
            	            {
            	                goto ruleassignment_listEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) {
            	            char_literal1080_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1080));
            	            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1080_tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt273 >= 1 )
            		{
            		    goto loop273;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleassignment_listEx;
            	}
            	cnt273++;
                }
                loop273: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleassignment_listEx; /* Prevent compiler warnings */
    ruleassignment_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(304, assignment_list_StartIndex); }

    return retval;
}
/* $ANTLR end assignment_list */

/**
 * $ANTLR start field_declarations
 * CSharp.g:1787:1: field_declarations : ( ( attributes )? ( modifiers )? type field_declaration )+ ;
 */
CSharpParser_field_declarations_return
CSharpParser::field_declarations()
{
    CSharpParser_field_declarations_return retval(this);

    ANTLR_MARKER field_declarations_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_attributes_return attributes1081;
    typedef	CSharpParser_attributes_return RETURN_TYPE_attributes1081;

    CSharpParser_modifiers_return modifiers1082;
    typedef	CSharpParser_modifiers_return RETURN_TYPE_modifiers1082;

    CSharpParser_type_return type1083;
    typedef	CSharpParser_type_return RETURN_TYPE_type1083;

    CSharpParser_field_declaration_return field_declaration1084;
    typedef	CSharpParser_field_declaration_return RETURN_TYPE_field_declaration1084;


    /* Initialize rule variables
     */
    field_declarations_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(305)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    attributes1081.tree = NULL;

    modifiers1082.tree = NULL;

    type1083.tree = NULL;

    field_declaration1084.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:1787:19: ( ( ( attributes )? ( modifiers )? type field_declaration )+ )
        // CSharp.g:1788:2: ( ( attributes )? ( modifiers )? type field_declaration )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:1788:2: ( ( attributes )? ( modifiers )? type field_declaration )+
            {
                int cnt276=0;

                for (;;)
                {
                    int alt276=2;
            	switch ( this->LA(1) )
            	{
            	case IDENTIFIER:
            	case 94:
            	case 98:
            	case 99:
            	case 100:
            	case 101:
            	case 103:
            	case 104:
            	case 106:
            	case 108:
            	case 109:
            	case 111:
            	case 116:
            	case 119:
            	case 121:
            	case 122:
            	case 124:
            	case 127:
            	case 128:
            	case 131:
            	case 134:
            	case 137:
            	case 140:
            	case 142:
            	case 143:
            	case 145:
            	case 146:
            	case 148:
            	case 149:
            	case 150:
            	case 152:
            	case 153:
            	case 154:
            	case 156:
            	case 158:
            	case 159:
            	case 162:
            	case 163:
            	case 164:
            	case 165:
            	case 166:
            	case 167:
            	case 169:
            	case 171:
            	case 172:
            	case 173:
            	case 174:
            	case 175:
            	case 178:
            	case 179:
            	case 185:
            	case 187:
            	case 188:
            	case 190:
            	case 191:
            	case 192:
            	case 193:
            	case 194:
            	case 195:
            	case 196:
            	case 198:
            		{
            			alt276=1;
            		}
            	    break;

            	}

            	switch (alt276)
            	{
            	    case 1:
            	        // CSharp.g:1788:3: ( attributes )? ( modifiers )? type field_declaration
            	        {
            	            // CSharp.g:1788:3: ( attributes )?
            	            {
            	                int alt274=2;
            	                switch ( this->LA(1) )
            	                {
            	                    case 94:
            	                    	{
            	                    		alt274=1;
            	                    	}
            	                        break;
            	                }

            	                switch (alt274)
            	                {
            	            	case 1:
            	            	    // CSharp.g:1788:3: attributes
            	            	    {
            	            	        this->followPush(FOLLOW_attributes_in_field_declarations11096);
            	            	        attributes1081=attributes();

            	            	        this->followPop();
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulefield_declarationsEx;
            	            	        }
            	            	        if (this->hasFailed())
            	            	        {
            	            	            return retval;
            	            	        }

            	            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attributes1081.tree);

            	            	    }
            	            	    break;

            	                }
            	            }

            	            // CSharp.g:1788:17: ( modifiers )?
            	            {
            	                int alt275=2;
            	                switch ( this->LA(1) )
            	                {
            	                    case 99:
            	                    case 127:
            	                    case 142:
            	                    case 152:
            	                    case 158:
            	                    case 163:
            	                    case 165:
            	                    case 166:
            	                    case 167:
            	                    case 172:
            	                    case 178:
            	                    case 190:
            	                    case 193:
            	                    case 195:
            	                    	{
            	                    		alt275=1;
            	                    	}
            	                        break;
            	                }

            	                switch (alt275)
            	                {
            	            	case 1:
            	            	    // CSharp.g:1788:17: modifiers
            	            	    {
            	            	        this->followPush(FOLLOW_modifiers_in_field_declarations11101);
            	            	        modifiers1082=modifiers();

            	            	        this->followPop();
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulefield_declarationsEx;
            	            	        }
            	            	        if (this->hasFailed())
            	            	        {
            	            	            return retval;
            	            	        }

            	            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, modifiers1082.tree);

            	            	    }
            	            	    break;

            	                }
            	            }

            	            this->followPush(FOLLOW_type_in_field_declarations11106);
            	            type1083=type();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulefield_declarationsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type1083.tree);

            	            this->followPush(FOLLOW_field_declaration_in_field_declarations11110);
            	            field_declaration1084=field_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulefield_declarationsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, field_declaration1084.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt276 >= 1 )
            		{
            		    goto loop276;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulefield_declarationsEx;
            	}
            	cnt276++;
                }
                loop276: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulefield_declarationsEx; /* Prevent compiler warnings */
    rulefield_declarationsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(305, field_declarations_StartIndex); }

    return retval;
}
/* $ANTLR end field_declarations */

/**
 * $ANTLR start property_declaration_list
 * CSharp.g:1791:1: property_declaration_list : ( ( attributes )? ( modifiers )? type property_declaration )+ ;
 */
CSharpParser_property_declaration_list_return
CSharpParser::property_declaration_list()
{
    CSharpParser_property_declaration_list_return retval(this);

    ANTLR_MARKER property_declaration_list_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_attributes_return attributes1085;
    typedef	CSharpParser_attributes_return RETURN_TYPE_attributes1085;

    CSharpParser_modifiers_return modifiers1086;
    typedef	CSharpParser_modifiers_return RETURN_TYPE_modifiers1086;

    CSharpParser_type_return type1087;
    typedef	CSharpParser_type_return RETURN_TYPE_type1087;

    CSharpParser_property_declaration_return property_declaration1088;
    typedef	CSharpParser_property_declaration_return RETURN_TYPE_property_declaration1088;


    /* Initialize rule variables
     */
    property_declaration_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(306)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    attributes1085.tree = NULL;

    modifiers1086.tree = NULL;

    type1087.tree = NULL;

    property_declaration1088.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:1791:26: ( ( ( attributes )? ( modifiers )? type property_declaration )+ )
        // CSharp.g:1792:2: ( ( attributes )? ( modifiers )? type property_declaration )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:1792:2: ( ( attributes )? ( modifiers )? type property_declaration )+
            {
                int cnt279=0;

                for (;;)
                {
                    int alt279=2;
            	switch ( this->LA(1) )
            	{
            	case IDENTIFIER:
            	case 94:
            	case 98:
            	case 99:
            	case 100:
            	case 101:
            	case 103:
            	case 104:
            	case 106:
            	case 108:
            	case 109:
            	case 111:
            	case 116:
            	case 119:
            	case 121:
            	case 122:
            	case 124:
            	case 127:
            	case 128:
            	case 131:
            	case 134:
            	case 137:
            	case 140:
            	case 142:
            	case 143:
            	case 145:
            	case 146:
            	case 148:
            	case 149:
            	case 150:
            	case 152:
            	case 153:
            	case 154:
            	case 156:
            	case 158:
            	case 159:
            	case 162:
            	case 163:
            	case 164:
            	case 165:
            	case 166:
            	case 167:
            	case 169:
            	case 171:
            	case 172:
            	case 173:
            	case 174:
            	case 175:
            	case 178:
            	case 179:
            	case 185:
            	case 187:
            	case 188:
            	case 190:
            	case 191:
            	case 192:
            	case 193:
            	case 194:
            	case 195:
            	case 196:
            	case 198:
            		{
            			alt279=1;
            		}
            	    break;

            	}

            	switch (alt279)
            	{
            	    case 1:
            	        // CSharp.g:1792:3: ( attributes )? ( modifiers )? type property_declaration
            	        {
            	            // CSharp.g:1792:3: ( attributes )?
            	            {
            	                int alt277=2;
            	                switch ( this->LA(1) )
            	                {
            	                    case 94:
            	                    	{
            	                    		alt277=1;
            	                    	}
            	                        break;
            	                }

            	                switch (alt277)
            	                {
            	            	case 1:
            	            	    // CSharp.g:1792:3: attributes
            	            	    {
            	            	        this->followPush(FOLLOW_attributes_in_property_declaration_list11124);
            	            	        attributes1085=attributes();

            	            	        this->followPop();
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto ruleproperty_declaration_listEx;
            	            	        }
            	            	        if (this->hasFailed())
            	            	        {
            	            	            return retval;
            	            	        }

            	            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attributes1085.tree);

            	            	    }
            	            	    break;

            	                }
            	            }

            	            // CSharp.g:1792:17: ( modifiers )?
            	            {
            	                int alt278=2;
            	                switch ( this->LA(1) )
            	                {
            	                    case 99:
            	                    case 127:
            	                    case 142:
            	                    case 152:
            	                    case 158:
            	                    case 163:
            	                    case 165:
            	                    case 166:
            	                    case 167:
            	                    case 172:
            	                    case 178:
            	                    case 190:
            	                    case 193:
            	                    case 195:
            	                    	{
            	                    		alt278=1;
            	                    	}
            	                        break;
            	                }

            	                switch (alt278)
            	                {
            	            	case 1:
            	            	    // CSharp.g:1792:17: modifiers
            	            	    {
            	            	        this->followPush(FOLLOW_modifiers_in_property_declaration_list11129);
            	            	        modifiers1086=modifiers();

            	            	        this->followPop();
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto ruleproperty_declaration_listEx;
            	            	        }
            	            	        if (this->hasFailed())
            	            	        {
            	            	            return retval;
            	            	        }

            	            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, modifiers1086.tree);

            	            	    }
            	            	    break;

            	                }
            	            }

            	            this->followPush(FOLLOW_type_in_property_declaration_list11134);
            	            type1087=type();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleproperty_declaration_listEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type1087.tree);

            	            this->followPush(FOLLOW_property_declaration_in_property_declaration_list11138);
            	            property_declaration1088=property_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleproperty_declaration_listEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, property_declaration1088.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt279 >= 1 )
            		{
            		    goto loop279;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleproperty_declaration_listEx;
            	}
            	cnt279++;
                }
                loop279: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleproperty_declaration_listEx; /* Prevent compiler warnings */
    ruleproperty_declaration_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(306, property_declaration_list_StartIndex); }

    return retval;
}
/* $ANTLR end property_declaration_list */

/**
 * $ANTLR start constant_declarations
 * CSharp.g:1795:1: constant_declarations : ( constant_declaration )+ ;
 */
CSharpParser_constant_declarations_return
CSharpParser::constant_declarations()
{
    CSharpParser_constant_declarations_return retval(this);

    ANTLR_MARKER constant_declarations_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_constant_declaration_return constant_declaration1089;
    typedef	CSharpParser_constant_declaration_return RETURN_TYPE_constant_declaration1089;


    /* Initialize rule variables
     */
    constant_declarations_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(307)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    constant_declaration1089.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:1795:22: ( ( constant_declaration )+ )
        // CSharp.g:1796:2: ( constant_declaration )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:1796:2: ( constant_declaration )+
            {
                int cnt280=0;

                for (;;)
                {
                    int alt280=2;
            	switch ( this->LA(1) )
            	{
            	case 114:
            		{
            			alt280=1;
            		}
            	    break;

            	}

            	switch (alt280)
            	{
            	    case 1:
            	        // CSharp.g:1796:2: constant_declaration
            	        {
            	            this->followPush(FOLLOW_constant_declaration_in_constant_declarations11151);
            	            constant_declaration1089=constant_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleconstant_declarationsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constant_declaration1089.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt280 >= 1 )
            		{
            		    goto loop280;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleconstant_declarationsEx;
            	}
            	cnt280++;
                }
                loop280: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleconstant_declarationsEx; /* Prevent compiler warnings */
    ruleconstant_declarationsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(307, constant_declarations_StartIndex); }

    return retval;
}
/* $ANTLR end constant_declarations */

/**
 * $ANTLR start literals
 * CSharp.g:1799:1: literals : ( literal )+ ;
 */
CSharpParser_literals_return
CSharpParser::literals()
{
    CSharpParser_literals_return retval(this);

    ANTLR_MARKER literals_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_literal_return literal1090;
    typedef	CSharpParser_literal_return RETURN_TYPE_literal1090;


    /* Initialize rule variables
     */
    literals_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(308)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    literal1090.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:1799:9: ( ( literal )+ )
        // CSharp.g:1800:2: ( literal )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:1800:2: ( literal )+
            {
                int cnt281=0;

                for (;;)
                {
                    int alt281=2;
            	switch ( this->LA(1) )
            	{
            	case Character_literal:
            	case FALSE:
            	case Hex_number:
            	case LT_NULL:
            	case NUMBER:
            	case Real_literal:
            	case STRINGLITERAL:
            	case TRUE:
            	case Verbatim_string_literal:
            		{
            			alt281=1;
            		}
            	    break;

            	}

            	switch (alt281)
            	{
            	    case 1:
            	        // CSharp.g:1800:2: literal
            	        {
            	            this->followPush(FOLLOW_literal_in_literals11163);
            	            literal1090=literal();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleliteralsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, literal1090.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt281 >= 1 )
            		{
            		    goto loop281;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleliteralsEx;
            	}
            	cnt281++;
                }
                loop281: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleliteralsEx; /* Prevent compiler warnings */
    ruleliteralsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(308, literals_StartIndex); }

    return retval;
}
/* $ANTLR end literals */

/**
 * $ANTLR start delegate_declaration_list
 * CSharp.g:1803:1: delegate_declaration_list : ( ( attributes )? ( modifiers )? delegate_declaration )+ ;
 */
CSharpParser_delegate_declaration_list_return
CSharpParser::delegate_declaration_list()
{
    CSharpParser_delegate_declaration_list_return retval(this);

    ANTLR_MARKER delegate_declaration_list_StartIndex;

    ImplTraits::TreeType* root_0;

    CSharpParser_attributes_return attributes1091;
    typedef	CSharpParser_attributes_return RETURN_TYPE_attributes1091;

    CSharpParser_modifiers_return modifiers1092;
    typedef	CSharpParser_modifiers_return RETURN_TYPE_modifiers1092;

    CSharpParser_delegate_declaration_return delegate_declaration1093;
    typedef	CSharpParser_delegate_declaration_return RETURN_TYPE_delegate_declaration1093;


    /* Initialize rule variables
     */
    delegate_declaration_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(309)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    attributes1091.tree = NULL;

    modifiers1092.tree = NULL;

    delegate_declaration1093.tree = NULL;
    retval.call_start_placeholder(); 




    retval.tree  = NULL;


 
    {
        // CSharp.g:1803:26: ( ( ( attributes )? ( modifiers )? delegate_declaration )+ )
        // CSharp.g:1804:2: ( ( attributes )? ( modifiers )? delegate_declaration )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:1804:2: ( ( attributes )? ( modifiers )? delegate_declaration )+
            {
                int cnt284=0;

                for (;;)
                {
                    int alt284=2;
            	switch ( this->LA(1) )
            	{
            	case 94:
            	case 99:
            	case 118:
            	case 127:
            	case 142:
            	case 152:
            	case 158:
            	case 163:
            	case 165:
            	case 166:
            	case 167:
            	case 172:
            	case 178:
            	case 190:
            	case 193:
            	case 195:
            		{
            			alt284=1;
            		}
            	    break;

            	}

            	switch (alt284)
            	{
            	    case 1:
            	        // CSharp.g:1804:3: ( attributes )? ( modifiers )? delegate_declaration
            	        {
            	            // CSharp.g:1804:3: ( attributes )?
            	            {
            	                int alt282=2;
            	                switch ( this->LA(1) )
            	                {
            	                    case 94:
            	                    	{
            	                    		alt282=1;
            	                    	}
            	                        break;
            	                }

            	                switch (alt282)
            	                {
            	            	case 1:
            	            	    // CSharp.g:1804:3: attributes
            	            	    {
            	            	        this->followPush(FOLLOW_attributes_in_delegate_declaration_list11176);
            	            	        attributes1091=attributes();

            	            	        this->followPop();
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto ruledelegate_declaration_listEx;
            	            	        }
            	            	        if (this->hasFailed())
            	            	        {
            	            	            return retval;
            	            	        }

            	            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attributes1091.tree);

            	            	    }
            	            	    break;

            	                }
            	            }

            	            // CSharp.g:1804:17: ( modifiers )?
            	            {
            	                int alt283=2;
            	                switch ( this->LA(1) )
            	                {
            	                    case 99:
            	                    case 127:
            	                    case 142:
            	                    case 152:
            	                    case 158:
            	                    case 163:
            	                    case 165:
            	                    case 166:
            	                    case 167:
            	                    case 172:
            	                    case 178:
            	                    case 190:
            	                    case 193:
            	                    case 195:
            	                    	{
            	                    		alt283=1;
            	                    	}
            	                        break;
            	                }

            	                switch (alt283)
            	                {
            	            	case 1:
            	            	    // CSharp.g:1804:17: modifiers
            	            	    {
            	            	        this->followPush(FOLLOW_modifiers_in_delegate_declaration_list11181);
            	            	        modifiers1092=modifiers();

            	            	        this->followPop();
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto ruledelegate_declaration_listEx;
            	            	        }
            	            	        if (this->hasFailed())
            	            	        {
            	            	            return retval;
            	            	        }

            	            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, modifiers1092.tree);

            	            	    }
            	            	    break;

            	                }
            	            }

            	            this->followPush(FOLLOW_delegate_declaration_in_delegate_declaration_list11186);
            	            delegate_declaration1093=delegate_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruledelegate_declaration_listEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, delegate_declaration1093.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt284 >= 1 )
            		{
            		    goto loop284;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruledelegate_declaration_listEx;
            	}
            	cnt284++;
                }
                loop284: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruledelegate_declaration_listEx; /* Prevent compiler warnings */
    ruledelegate_declaration_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(309, delegate_declaration_list_StartIndex); }

    return retval;
}
/* $ANTLR end delegate_declaration_list */

/**
 * $ANTLR start local_variable_declaration_list
 * CSharp.g:1807:1: local_variable_declaration_list : ( local_variable_declaration ';' )+ ;
 */
CSharpParser_local_variable_declaration_list_return
CSharpParser::local_variable_declaration_list()
{
    CSharpParser_local_variable_declaration_list_return retval(this);

    ANTLR_MARKER local_variable_declaration_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal1095;
    CSharpParser_local_variable_declaration_return local_variable_declaration1094;
    typedef	CSharpParser_local_variable_declaration_return RETURN_TYPE_local_variable_declaration1094;

    ImplTraits::TreeType* char_literal1095_tree;

    /* Initialize rule variables
     */
    local_variable_declaration_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(310)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal1095       = NULL;
    local_variable_declaration1094.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal1095_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1807:32: ( ( local_variable_declaration ';' )+ )
        // CSharp.g:1808:2: ( local_variable_declaration ';' )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:1808:2: ( local_variable_declaration ';' )+
            {
                int cnt285=0;

                for (;;)
                {
                    int alt285=2;
            	switch ( this->LA(1) )
            	{
            	case IDENTIFIER:
            	case 98:
            	case 100:
            	case 101:
            	case 103:
            	case 104:
            	case 106:
            	case 108:
            	case 109:
            	case 111:
            	case 116:
            	case 119:
            	case 121:
            	case 122:
            	case 124:
            	case 128:
            	case 131:
            	case 134:
            	case 137:
            	case 140:
            	case 143:
            	case 145:
            	case 146:
            	case 148:
            	case 149:
            	case 150:
            	case 153:
            	case 154:
            	case 156:
            	case 159:
            	case 162:
            	case 164:
            	case 169:
            	case 171:
            	case 173:
            	case 174:
            	case 175:
            	case 179:
            	case 185:
            	case 187:
            	case 188:
            	case 191:
            	case 192:
            	case 194:
            	case 196:
            	case 198:
            		{
            			alt285=1;
            		}
            	    break;

            	}

            	switch (alt285)
            	{
            	    case 1:
            	        // CSharp.g:1808:3: local_variable_declaration ';'
            	        {
            	            this->followPush(FOLLOW_local_variable_declaration_in_local_variable_declaration_list11200);
            	            local_variable_declaration1094=local_variable_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulelocal_variable_declaration_listEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, local_variable_declaration1094.tree);

            	            char_literal1095 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_local_variable_declaration_list11202);
            	            if  (this->hasException())
            	            {
            	                goto rulelocal_variable_declaration_listEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) {
            	            char_literal1095_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1095));
            	            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1095_tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt285 >= 1 )
            		{
            		    goto loop285;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulelocal_variable_declaration_listEx;
            	}
            	cnt285++;
                }
                loop285: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulelocal_variable_declaration_listEx; /* Prevent compiler warnings */
    rulelocal_variable_declaration_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(310, local_variable_declaration_list_StartIndex); }

    return retval;
}
/* $ANTLR end local_variable_declaration_list */

/**
 * $ANTLR start local_variable_initializer_list
 * CSharp.g:1811:1: local_variable_initializer_list : ( local_variable_initializer ';' )+ ;
 */
CSharpParser_local_variable_initializer_list_return
CSharpParser::local_variable_initializer_list()
{
    CSharpParser_local_variable_initializer_list_return retval(this);

    ANTLR_MARKER local_variable_initializer_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal1097;
    CSharpParser_local_variable_initializer_return local_variable_initializer1096;
    typedef	CSharpParser_local_variable_initializer_return RETURN_TYPE_local_variable_initializer1096;

    ImplTraits::TreeType* char_literal1097_tree;

    /* Initialize rule variables
     */
    local_variable_initializer_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(311)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal1097       = NULL;
    local_variable_initializer1096.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal1097_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1811:32: ( ( local_variable_initializer ';' )+ )
        // CSharp.g:1812:2: ( local_variable_initializer ';' )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:1812:2: ( local_variable_initializer ';' )+
            {
                int cnt286=0;

                for (;;)
                {
                    int alt286=2;
            	switch ( this->LA(1) )
            	{
            	case Character_literal:
            	case FALSE:
            	case Hex_number:
            	case IDENTIFIER:
            	case LT_NULL:
            	case MINUS:
            	case NUMBER:
            	case Real_literal:
            	case STRINGLITERAL:
            	case TRUE:
            	case Verbatim_string_literal:
            	case 64:
            	case 69:
            	case 71:
            	case 72:
            	case 74:
            	case 75:
            	case 78:
            	case 98:
            	case 100:
            	case 101:
            	case 103:
            	case 104:
            	case 105:
            	case 106:
            	case 108:
            	case 109:
            	case 111:
            	case 112:
            	case 116:
            	case 117:
            	case 118:
            	case 119:
            	case 121:
            	case 122:
            	case 124:
            	case 128:
            	case 131:
            	case 134:
            	case 137:
            	case 140:
            	case 143:
            	case 145:
            	case 146:
            	case 148:
            	case 149:
            	case 150:
            	case 152:
            	case 153:
            	case 154:
            	case 156:
            	case 159:
            	case 162:
            	case 164:
            	case 169:
            	case 171:
            	case 173:
            	case 174:
            	case 175:
            	case 176:
            	case 177:
            	case 179:
            	case 182:
            	case 185:
            	case 186:
            	case 187:
            	case 188:
            	case 189:
            	case 191:
            	case 192:
            	case 196:
            	case 198:
            	case 199:
            	case 204:
            		{
            			alt286=1;
            		}
            	    break;

            	}

            	switch (alt286)
            	{
            	    case 1:
            	        // CSharp.g:1812:3: local_variable_initializer ';'
            	        {
            	            this->followPush(FOLLOW_local_variable_initializer_in_local_variable_initializer_list11216);
            	            local_variable_initializer1096=local_variable_initializer();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulelocal_variable_initializer_listEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, local_variable_initializer1096.tree);

            	            char_literal1097 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_local_variable_initializer_list11218);
            	            if  (this->hasException())
            	            {
            	                goto rulelocal_variable_initializer_listEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) {
            	            char_literal1097_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1097));
            	            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1097_tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt286 >= 1 )
            		{
            		    goto loop286;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulelocal_variable_initializer_listEx;
            	}
            	cnt286++;
                }
                loop286: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulelocal_variable_initializer_listEx; /* Prevent compiler warnings */
    rulelocal_variable_initializer_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(311, local_variable_initializer_list_StartIndex); }

    return retval;
}
/* $ANTLR end local_variable_initializer_list */

/**
 * $ANTLR start expression_list_test
 * CSharp.g:1815:1: expression_list_test : ( expression ';' )+ ;
 */
CSharpParser_expression_list_test_return
CSharpParser::expression_list_test()
{
    CSharpParser_expression_list_test_return retval(this);

    ANTLR_MARKER expression_list_test_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal1099;
    CSharpParser_expression_return expression1098;
    typedef	CSharpParser_expression_return RETURN_TYPE_expression1098;

    ImplTraits::TreeType* char_literal1099_tree;

    /* Initialize rule variables
     */
    expression_list_test_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(312)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal1099       = NULL;
    expression1098.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal1099_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1815:21: ( ( expression ';' )+ )
        // CSharp.g:1816:2: ( expression ';' )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:1816:2: ( expression ';' )+
            {
                int cnt287=0;

                for (;;)
                {
                    int alt287=2;
            	switch ( this->LA(1) )
            	{
            	case Character_literal:
            	case FALSE:
            	case Hex_number:
            	case IDENTIFIER:
            	case LT_NULL:
            	case MINUS:
            	case NUMBER:
            	case Real_literal:
            	case STRINGLITERAL:
            	case TRUE:
            	case Verbatim_string_literal:
            	case 64:
            	case 69:
            	case 71:
            	case 72:
            	case 74:
            	case 75:
            	case 78:
            	case 98:
            	case 100:
            	case 101:
            	case 103:
            	case 104:
            	case 105:
            	case 106:
            	case 108:
            	case 109:
            	case 111:
            	case 112:
            	case 116:
            	case 117:
            	case 118:
            	case 119:
            	case 121:
            	case 122:
            	case 124:
            	case 128:
            	case 131:
            	case 134:
            	case 137:
            	case 140:
            	case 143:
            	case 145:
            	case 146:
            	case 148:
            	case 149:
            	case 150:
            	case 152:
            	case 153:
            	case 154:
            	case 156:
            	case 159:
            	case 162:
            	case 164:
            	case 169:
            	case 171:
            	case 173:
            	case 174:
            	case 175:
            	case 176:
            	case 179:
            	case 182:
            	case 185:
            	case 186:
            	case 187:
            	case 188:
            	case 189:
            	case 191:
            	case 192:
            	case 196:
            	case 198:
            	case 204:
            		{
            			alt287=1;
            		}
            	    break;

            	}

            	switch (alt287)
            	{
            	    case 1:
            	        // CSharp.g:1816:3: expression ';'
            	        {
            	            this->followPush(FOLLOW_expression_in_expression_list_test11233);
            	            expression1098=expression();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleexpression_list_testEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression1098.tree);

            	            char_literal1099 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_expression_list_test11235);
            	            if  (this->hasException())
            	            {
            	                goto ruleexpression_list_testEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) {
            	            char_literal1099_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1099));
            	            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1099_tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt287 >= 1 )
            		{
            		    goto loop287;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleexpression_list_testEx;
            	}
            	cnt287++;
                }
                loop287: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexpression_list_testEx; /* Prevent compiler warnings */
    ruleexpression_list_testEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(312, expression_list_test_StartIndex); }

    return retval;
}
/* $ANTLR end expression_list_test */

/**
 * $ANTLR start unary_expression_list
 * CSharp.g:1819:1: unary_expression_list : ( unary_expression ';' )+ ;
 */
CSharpParser_unary_expression_list_return
CSharpParser::unary_expression_list()
{
    CSharpParser_unary_expression_list_return retval(this);

    ANTLR_MARKER unary_expression_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal1101;
    CSharpParser_unary_expression_return unary_expression1100;
    typedef	CSharpParser_unary_expression_return RETURN_TYPE_unary_expression1100;

    ImplTraits::TreeType* char_literal1101_tree;

    /* Initialize rule variables
     */
    unary_expression_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(313)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal1101       = NULL;
    unary_expression1100.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal1101_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1819:22: ( ( unary_expression ';' )+ )
        // CSharp.g:1820:2: ( unary_expression ';' )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:1820:2: ( unary_expression ';' )+
            {
                int cnt288=0;

                for (;;)
                {
                    int alt288=2;
            	switch ( this->LA(1) )
            	{
            	case Character_literal:
            	case FALSE:
            	case Hex_number:
            	case IDENTIFIER:
            	case LT_NULL:
            	case MINUS:
            	case NUMBER:
            	case Real_literal:
            	case STRINGLITERAL:
            	case TRUE:
            	case Verbatim_string_literal:
            	case 64:
            	case 69:
            	case 71:
            	case 72:
            	case 74:
            	case 75:
            	case 78:
            	case 98:
            	case 100:
            	case 101:
            	case 103:
            	case 104:
            	case 105:
            	case 106:
            	case 108:
            	case 109:
            	case 111:
            	case 112:
            	case 116:
            	case 117:
            	case 118:
            	case 119:
            	case 121:
            	case 122:
            	case 124:
            	case 128:
            	case 131:
            	case 134:
            	case 137:
            	case 140:
            	case 143:
            	case 145:
            	case 146:
            	case 148:
            	case 149:
            	case 150:
            	case 152:
            	case 153:
            	case 154:
            	case 156:
            	case 159:
            	case 162:
            	case 164:
            	case 169:
            	case 171:
            	case 173:
            	case 174:
            	case 175:
            	case 176:
            	case 179:
            	case 182:
            	case 185:
            	case 186:
            	case 187:
            	case 188:
            	case 189:
            	case 191:
            	case 192:
            	case 196:
            	case 198:
            	case 204:
            		{
            			alt288=1;
            		}
            	    break;

            	}

            	switch (alt288)
            	{
            	    case 1:
            	        // CSharp.g:1820:3: unary_expression ';'
            	        {
            	            this->followPush(FOLLOW_unary_expression_in_unary_expression_list11249);
            	            unary_expression1100=unary_expression();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleunary_expression_listEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unary_expression1100.tree);

            	            char_literal1101 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_unary_expression_list11251);
            	            if  (this->hasException())
            	            {
            	                goto ruleunary_expression_listEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) {
            	            char_literal1101_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1101));
            	            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1101_tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt288 >= 1 )
            		{
            		    goto loop288;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleunary_expression_listEx;
            	}
            	cnt288++;
                }
                loop288: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleunary_expression_listEx; /* Prevent compiler warnings */
    ruleunary_expression_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(313, unary_expression_list_StartIndex); }

    return retval;
}
/* $ANTLR end unary_expression_list */

/**
 * $ANTLR start invocation_expression_list
 * CSharp.g:1823:1: invocation_expression_list : ( invocation_expression ';' )+ ;
 */
CSharpParser_invocation_expression_list_return
CSharpParser::invocation_expression_list()
{
    CSharpParser_invocation_expression_list_return retval(this);

    ANTLR_MARKER invocation_expression_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal1103;
    CSharpParser_invocation_expression_return invocation_expression1102;
    typedef	CSharpParser_invocation_expression_return RETURN_TYPE_invocation_expression1102;

    ImplTraits::TreeType* char_literal1103_tree;

    /* Initialize rule variables
     */
    invocation_expression_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(314)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal1103       = NULL;
    invocation_expression1102.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal1103_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1823:27: ( ( invocation_expression ';' )+ )
        // CSharp.g:1824:2: ( invocation_expression ';' )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:1824:2: ( invocation_expression ';' )+
            {
                int cnt289=0;

                for (;;)
                {
                    int alt289=2;
            	switch ( this->LA(1) )
            	{
            	case IDENTIFIER:
            	case 98:
            	case 100:
            	case 101:
            	case 103:
            	case 104:
            	case 105:
            	case 106:
            	case 108:
            	case 109:
            	case 111:
            	case 116:
            	case 119:
            	case 121:
            	case 122:
            	case 124:
            	case 128:
            	case 131:
            	case 134:
            	case 137:
            	case 140:
            	case 143:
            	case 145:
            	case 146:
            	case 148:
            	case 149:
            	case 150:
            	case 153:
            	case 154:
            	case 156:
            	case 159:
            	case 162:
            	case 164:
            	case 169:
            	case 171:
            	case 173:
            	case 174:
            	case 175:
            	case 179:
            	case 182:
            	case 185:
            	case 186:
            	case 187:
            	case 188:
            	case 191:
            	case 192:
            	case 196:
            	case 198:
            		{
            			alt289=1;
            		}
            	    break;

            	}

            	switch (alt289)
            	{
            	    case 1:
            	        // CSharp.g:1824:3: invocation_expression ';'
            	        {
            	            this->followPush(FOLLOW_invocation_expression_in_invocation_expression_list11265);
            	            invocation_expression1102=invocation_expression();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleinvocation_expression_listEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, invocation_expression1102.tree);

            	            char_literal1103 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_invocation_expression_list11267);
            	            if  (this->hasException())
            	            {
            	                goto ruleinvocation_expression_listEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) {
            	            char_literal1103_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1103));
            	            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1103_tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt289 >= 1 )
            		{
            		    goto loop289;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleinvocation_expression_listEx;
            	}
            	cnt289++;
                }
                loop289: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleinvocation_expression_listEx; /* Prevent compiler warnings */
    ruleinvocation_expression_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(314, invocation_expression_list_StartIndex); }

    return retval;
}
/* $ANTLR end invocation_expression_list */

/**
 * $ANTLR start primary_expression_list
 * CSharp.g:1827:1: primary_expression_list : ( primary_expression ';' )+ ;
 */
CSharpParser_primary_expression_list_return
CSharpParser::primary_expression_list()
{
    CSharpParser_primary_expression_list_return retval(this);

    ANTLR_MARKER primary_expression_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal1105;
    CSharpParser_primary_expression_return primary_expression1104;
    typedef	CSharpParser_primary_expression_return RETURN_TYPE_primary_expression1104;

    ImplTraits::TreeType* char_literal1105_tree;

    /* Initialize rule variables
     */
    primary_expression_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(315)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal1105       = NULL;
    primary_expression1104.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal1105_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1827:24: ( ( primary_expression ';' )+ )
        // CSharp.g:1828:2: ( primary_expression ';' )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:1828:2: ( primary_expression ';' )+
            {
                int cnt290=0;

                for (;;)
                {
                    int alt290=2;
            	switch ( this->LA(1) )
            	{
            	case Character_literal:
            	case FALSE:
            	case Hex_number:
            	case IDENTIFIER:
            	case LT_NULL:
            	case NUMBER:
            	case Real_literal:
            	case STRINGLITERAL:
            	case TRUE:
            	case Verbatim_string_literal:
            	case 71:
            	case 98:
            	case 100:
            	case 101:
            	case 103:
            	case 104:
            	case 105:
            	case 106:
            	case 108:
            	case 109:
            	case 111:
            	case 112:
            	case 116:
            	case 117:
            	case 118:
            	case 119:
            	case 121:
            	case 122:
            	case 124:
            	case 128:
            	case 131:
            	case 134:
            	case 137:
            	case 140:
            	case 143:
            	case 145:
            	case 146:
            	case 148:
            	case 149:
            	case 150:
            	case 152:
            	case 153:
            	case 154:
            	case 156:
            	case 159:
            	case 162:
            	case 164:
            	case 169:
            	case 171:
            	case 173:
            	case 174:
            	case 175:
            	case 176:
            	case 179:
            	case 182:
            	case 185:
            	case 186:
            	case 187:
            	case 188:
            	case 189:
            	case 191:
            	case 192:
            	case 196:
            	case 198:
            		{
            			alt290=1;
            		}
            	    break;

            	}

            	switch (alt290)
            	{
            	    case 1:
            	        // CSharp.g:1828:3: primary_expression ';'
            	        {
            	            this->followPush(FOLLOW_primary_expression_in_primary_expression_list11281);
            	            primary_expression1104=primary_expression();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleprimary_expression_listEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, primary_expression1104.tree);

            	            char_literal1105 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_primary_expression_list11283);
            	            if  (this->hasException())
            	            {
            	                goto ruleprimary_expression_listEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) {
            	            char_literal1105_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1105));
            	            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1105_tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt290 >= 1 )
            		{
            		    goto loop290;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleprimary_expression_listEx;
            	}
            	cnt290++;
                }
                loop290: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprimary_expression_listEx; /* Prevent compiler warnings */
    ruleprimary_expression_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(315, primary_expression_list_StartIndex); }

    return retval;
}
/* $ANTLR end primary_expression_list */

/**
 * $ANTLR start non_assignment_expression_list
 * CSharp.g:1831:1: non_assignment_expression_list : ( non_assignment_expression ';' )+ ;
 */
CSharpParser_non_assignment_expression_list_return
CSharpParser::non_assignment_expression_list()
{
    CSharpParser_non_assignment_expression_list_return retval(this);

    ANTLR_MARKER non_assignment_expression_list_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    char_literal1107;
    CSharpParser_non_assignment_expression_return non_assignment_expression1106;
    typedef	CSharpParser_non_assignment_expression_return RETURN_TYPE_non_assignment_expression1106;

    ImplTraits::TreeType* char_literal1107_tree;

    /* Initialize rule variables
     */
    non_assignment_expression_list_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(316)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    char_literal1107       = NULL;
    non_assignment_expression1106.tree = NULL;
    retval.call_start_placeholder(); 


    char_literal1107_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1831:31: ( ( non_assignment_expression ';' )+ )
        // CSharp.g:1832:2: ( non_assignment_expression ';' )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:1832:2: ( non_assignment_expression ';' )+
            {
                int cnt291=0;

                for (;;)
                {
                    int alt291=2;
            	switch ( this->LA(1) )
            	{
            	case Character_literal:
            	case FALSE:
            	case Hex_number:
            	case IDENTIFIER:
            	case LT_NULL:
            	case MINUS:
            	case NUMBER:
            	case Real_literal:
            	case STRINGLITERAL:
            	case TRUE:
            	case Verbatim_string_literal:
            	case 64:
            	case 69:
            	case 71:
            	case 72:
            	case 74:
            	case 75:
            	case 78:
            	case 98:
            	case 100:
            	case 101:
            	case 103:
            	case 104:
            	case 105:
            	case 106:
            	case 108:
            	case 109:
            	case 111:
            	case 112:
            	case 116:
            	case 117:
            	case 118:
            	case 119:
            	case 121:
            	case 122:
            	case 124:
            	case 128:
            	case 131:
            	case 134:
            	case 137:
            	case 140:
            	case 143:
            	case 145:
            	case 146:
            	case 148:
            	case 149:
            	case 150:
            	case 152:
            	case 153:
            	case 154:
            	case 156:
            	case 159:
            	case 162:
            	case 164:
            	case 169:
            	case 171:
            	case 173:
            	case 174:
            	case 175:
            	case 176:
            	case 179:
            	case 182:
            	case 185:
            	case 186:
            	case 187:
            	case 188:
            	case 189:
            	case 191:
            	case 192:
            	case 196:
            	case 198:
            	case 204:
            		{
            			alt291=1;
            		}
            	    break;

            	}

            	switch (alt291)
            	{
            	    case 1:
            	        // CSharp.g:1832:3: non_assignment_expression ';'
            	        {
            	            this->followPush(FOLLOW_non_assignment_expression_in_non_assignment_expression_list11297);
            	            non_assignment_expression1106=non_assignment_expression();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulenon_assignment_expression_listEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, non_assignment_expression1106.tree);

            	            char_literal1107 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_non_assignment_expression_list11299);
            	            if  (this->hasException())
            	            {
            	                goto rulenon_assignment_expression_listEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) {
            	            char_literal1107_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, char_literal1107));
            	            ADAPTOR->addChild(ADAPTOR, root_0, char_literal1107_tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt291 >= 1 )
            		{
            		    goto loop291;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulenon_assignment_expression_listEx;
            	}
            	cnt291++;
                }
                loop291: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulenon_assignment_expression_listEx; /* Prevent compiler warnings */
    rulenon_assignment_expression_listEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(316, non_assignment_expression_list_StartIndex); }

    return retval;
}
/* $ANTLR end non_assignment_expression_list */

/**
 * $ANTLR start method_declarations
 * CSharp.g:1835:1: method_declarations : ( ( modifiers )? ( 'void' | type ) method_declaration )+ ;
 */
CSharpParser_method_declarations_return
CSharpParser::method_declarations()
{
    CSharpParser_method_declarations_return retval(this);

    ANTLR_MARKER method_declarations_StartIndex;

    ImplTraits::TreeType* root_0;

    const CommonTokenType*    string_literal1109;
    CSharpParser_modifiers_return modifiers1108;
    typedef	CSharpParser_modifiers_return RETURN_TYPE_modifiers1108;

    CSharpParser_type_return type1110;
    typedef	CSharpParser_type_return RETURN_TYPE_type1110;

    CSharpParser_method_declaration_return method_declaration1111;
    typedef	CSharpParser_method_declaration_return RETURN_TYPE_method_declaration1111;

    ImplTraits::TreeType* string_literal1109_tree;

    /* Initialize rule variables
     */
    method_declarations_StartIndex = this->index();


    root_0 = NULL;

    if ( (this->get_backtracking()>0) && (this->haveParsedRule(317)) )
    {
    	retval.start = 0;

        {
        }



        return retval;
    }

    string_literal1109       = NULL;
    modifiers1108.tree = NULL;

    type1110.tree = NULL;

    method_declaration1111.tree = NULL;
    retval.call_start_placeholder(); 


    string_literal1109_tree   = NULL;


    retval.tree  = NULL;


 
    {
        // CSharp.g:1835:20: ( ( ( modifiers )? ( 'void' | type ) method_declaration )+ )
        // CSharp.g:1836:2: ( ( modifiers )? ( 'void' | type ) method_declaration )+
        {
            root_0 = (ImplTraits::TreeType*)(ADAPTOR->nilNode(ADAPTOR));


            // CSharp.g:1836:2: ( ( modifiers )? ( 'void' | type ) method_declaration )+
            {
                int cnt294=0;

                for (;;)
                {
                    int alt294=2;
            	switch ( this->LA(1) )
            	{
            	case IDENTIFIER:
            	case 98:
            	case 99:
            	case 100:
            	case 101:
            	case 103:
            	case 104:
            	case 106:
            	case 108:
            	case 109:
            	case 111:
            	case 116:
            	case 119:
            	case 121:
            	case 122:
            	case 124:
            	case 127:
            	case 128:
            	case 131:
            	case 134:
            	case 137:
            	case 140:
            	case 142:
            	case 143:
            	case 145:
            	case 146:
            	case 148:
            	case 149:
            	case 150:
            	case 152:
            	case 153:
            	case 154:
            	case 156:
            	case 158:
            	case 159:
            	case 162:
            	case 163:
            	case 164:
            	case 165:
            	case 166:
            	case 167:
            	case 169:
            	case 171:
            	case 172:
            	case 173:
            	case 174:
            	case 175:
            	case 178:
            	case 179:
            	case 185:
            	case 187:
            	case 188:
            	case 190:
            	case 191:
            	case 192:
            	case 193:
            	case 194:
            	case 195:
            	case 196:
            	case 198:
            		{
            			alt294=1;
            		}
            	    break;

            	}

            	switch (alt294)
            	{
            	    case 1:
            	        // CSharp.g:1836:3: ( modifiers )? ( 'void' | type ) method_declaration
            	        {
            	            // CSharp.g:1836:3: ( modifiers )?
            	            {
            	                int alt292=2;
            	                switch ( this->LA(1) )
            	                {
            	                    case 99:
            	                    case 127:
            	                    case 142:
            	                    case 152:
            	                    case 158:
            	                    case 163:
            	                    case 165:
            	                    case 166:
            	                    case 167:
            	                    case 172:
            	                    case 178:
            	                    case 190:
            	                    case 193:
            	                    case 195:
            	                    	{
            	                    		alt292=1;
            	                    	}
            	                        break;
            	                }

            	                switch (alt292)
            	                {
            	            	case 1:
            	            	    // CSharp.g:1836:3: modifiers
            	            	    {
            	            	        this->followPush(FOLLOW_modifiers_in_method_declarations11313);
            	            	        modifiers1108=modifiers();

            	            	        this->followPop();
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulemethod_declarationsEx;
            	            	        }
            	            	        if (this->hasFailed())
            	            	        {
            	            	            return retval;
            	            	        }

            	            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, modifiers1108.tree);

            	            	    }
            	            	    break;

            	                }
            	            }

            	            // CSharp.g:1836:14: ( 'void' | type )
            	            {
            	                int alt293=2;
            	                switch ( this->LA(1) )
            	                {
            	                case 194:
            	                	{
            	                		switch ( this->LA(2) )
            	                		{
            	                		case Character_literal:
            	                		case FALSE:
            	                		case Hex_number:
            	                		case IDENTIFIER:
            	                		case LT_NULL:
            	                		case NUMBER:
            	                		case Real_literal:
            	                		case STRINGLITERAL:
            	                		case TRUE:
            	                		case Verbatim_string_literal:
            	                		case 98:
            	                		case 100:
            	                		case 101:
            	                		case 103:
            	                		case 104:
            	                		case 106:
            	                		case 108:
            	                		case 109:
            	                		case 111:
            	                		case 116:
            	                		case 119:
            	                		case 121:
            	                		case 122:
            	                		case 124:
            	                		case 128:
            	                		case 131:
            	                		case 134:
            	                		case 137:
            	                		case 140:
            	                		case 143:
            	                		case 145:
            	                		case 146:
            	                		case 148:
            	                		case 149:
            	                		case 150:
            	                		case 153:
            	                		case 154:
            	                		case 156:
            	                		case 159:
            	                		case 162:
            	                		case 164:
            	                		case 169:
            	                		case 171:
            	                		case 173:
            	                		case 174:
            	                		case 175:
            	                		case 179:
            	                		case 185:
            	                		case 187:
            	                		case 188:
            	                		case 191:
            	                		case 192:
            	                		case 196:
            	                		case 198:
            	                			{
            	                				alt293=1;
            	                			}
            	                		    break;
            	                		case 72:
            	                			{
            	                				alt293=2;
            	                			}
            	                		    break;

            	                		default:
            	                		    if (this->get_backtracking()>0)
            	                		    {
            	                		        this->set_failedflag( true );
            	                		        return retval;
            	                		    }

            	                		    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                		    ex->set_decisionNum( 293 );
            	                		    ex->set_state( 1 );


            	                		    goto rulemethod_declarationsEx;

            	                		}

            	                	}
            	                    break;
            	                case IDENTIFIER:
            	                case 98:
            	                case 100:
            	                case 101:
            	                case 103:
            	                case 104:
            	                case 106:
            	                case 108:
            	                case 109:
            	                case 111:
            	                case 116:
            	                case 119:
            	                case 121:
            	                case 122:
            	                case 124:
            	                case 128:
            	                case 131:
            	                case 134:
            	                case 137:
            	                case 140:
            	                case 143:
            	                case 145:
            	                case 146:
            	                case 148:
            	                case 149:
            	                case 150:
            	                case 153:
            	                case 154:
            	                case 156:
            	                case 159:
            	                case 162:
            	                case 164:
            	                case 169:
            	                case 171:
            	                case 173:
            	                case 174:
            	                case 175:
            	                case 179:
            	                case 185:
            	                case 187:
            	                case 188:
            	                case 191:
            	                case 192:
            	                case 196:
            	                case 198:
            	                	{
            	                		alt293=2;
            	                	}
            	                    break;

            	                default:
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return retval;
            	                    }

            	                    ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 293 );
            	                    ex->set_state( 0 );


            	                    goto rulemethod_declarationsEx;

            	                }

            	                switch (alt293)
            	                {
            	            	case 1:
            	            	    // CSharp.g:1836:15: 'void'
            	            	    {
            	            	        string_literal1109 =  this->matchToken(194, &FOLLOW_194_in_method_declarations11317);
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulemethod_declarationsEx;
            	            	        }
            	            	        if (this->hasFailed())
            	            	        {
            	            	            return retval;
            	            	        }

            	            	        if ( this->get_backtracking()==0 ) {
            	            	        string_literal1109_tree = (ImplTraits::TreeType*)(ADAPTOR->create(ADAPTOR, string_literal1109));
            	            	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal1109_tree);
            	            	        }

            	            	    }
            	            	    break;
            	            	case 2:
            	            	    // CSharp.g:1836:24: type
            	            	    {
            	            	        this->followPush(FOLLOW_type_in_method_declarations11321);
            	            	        type1110=type();

            	            	        this->followPop();
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulemethod_declarationsEx;
            	            	        }
            	            	        if (this->hasFailed())
            	            	        {
            	            	            return retval;
            	            	        }

            	            	        if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type1110.tree);

            	            	    }
            	            	    break;

            	                }
            	            }

            	            this->followPush(FOLLOW_method_declaration_in_method_declarations11324);
            	            method_declaration1111=method_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemethod_declarationsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) ADAPTOR->addChild(ADAPTOR, root_0, method_declaration1111.tree);

            	        }
            	        break;

            	    default:

            		if ( cnt294 >= 1 )
            		{
            		    goto loop294;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulemethod_declarationsEx;
            	}
            	cnt294++;
                }
                loop294: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulemethod_declarationsEx; /* Prevent compiler warnings */
    rulemethod_declarationsEx: ;
    retval.call_stop_placeholder();


    if ( this->get_backtracking()==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (ImplTraits::TreeType*)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            retval.tree = (ImplTraits::TreeType*)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
        }
    if ( this->get_backtracking() > 0 ) { this->memoize(317, method_declarations_StartIndex); }

    return retval;
}
/* $ANTLR end method_declarations */

// $ANTLR start synpred1_CSharp
void CSharpParser::msynpred1_CSharp_fragment(  )
{
    // CSharp.g:126:4: ( 'partial' )
    // CSharp.g:126:5: 'partial'
    {
         this->matchToken(161, &FOLLOW_161_in_synpred1_CSharp373);
        if  (this->hasException())
        {
            goto rulesynpred1_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred1_CSharpEx; /* Prevent compiler warnings */
rulesynpred1_CSharpEx: ;

}
// $ANTLR end synpred1_CSharp

// $ANTLR start synpred2_CSharp
void CSharpParser::msynpred2_CSharp_fragment(  )
{
    // CSharp.g:184:6: ( member_name '(' )
    // CSharp.g:184:7: member_name '('
    {
        this->followPush(FOLLOW_member_name_in_synpred2_CSharp687);
        member_name();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred2_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(71, &FOLLOW_71_in_synpred2_CSharp691);
        if  (this->hasException())
        {
            goto rulesynpred2_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred2_CSharpEx; /* Prevent compiler warnings */
rulesynpred2_CSharpEx: ;

}
// $ANTLR end synpred2_CSharp

// $ANTLR start synpred3_CSharp
void CSharpParser::msynpred3_CSharp_fragment(  )
{
    // CSharp.g:185:11: ( member_name '{' )
    // CSharp.g:185:12: member_name '{'
    {
        this->followPush(FOLLOW_member_name_in_synpred3_CSharp709);
        member_name();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred3_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(199, &FOLLOW_199_in_synpred3_CSharp713);
        if  (this->hasException())
        {
            goto rulesynpred3_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred3_CSharpEx; /* Prevent compiler warnings */
rulesynpred3_CSharpEx: ;

}
// $ANTLR end synpred3_CSharp

// $ANTLR start synpred4_CSharp
void CSharpParser::msynpred4_CSharp_fragment(  )
{
    // CSharp.g:186:7: ( member_name '.' 'this' )
    // CSharp.g:186:8: member_name '.' 'this'
    {
        this->followPush(FOLLOW_member_name_in_synpred4_CSharp727);
        member_name();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred4_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(DOT, &FOLLOW_DOT_in_synpred4_CSharp731);
        if  (this->hasException())
        {
            goto rulesynpred4_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(182, &FOLLOW_182_in_synpred4_CSharp735);
        if  (this->hasException())
        {
            goto rulesynpred4_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred4_CSharpEx; /* Prevent compiler warnings */
rulesynpred4_CSharpEx: ;

}
// $ANTLR end synpred4_CSharp

// $ANTLR start synpred5_CSharp
void CSharpParser::msynpred5_CSharp_fragment(  )
{
    // CSharp.g:204:4: ( 'this' brackets )
    // CSharp.g:204:5: 'this' brackets
    {
         this->matchToken(182, &FOLLOW_182_in_synpred5_CSharp853);
        if  (this->hasException())
        {
            goto rulesynpred5_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        this->followPush(FOLLOW_brackets_in_synpred5_CSharp855);
        brackets();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred5_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred5_CSharpEx; /* Prevent compiler warnings */
rulesynpred5_CSharpEx: ;

}
// $ANTLR end synpred5_CSharp

// $ANTLR start synpred6_CSharp
void CSharpParser::msynpred6_CSharp_fragment(  )
{
    // CSharp.g:205:4: ( 'base' brackets )
    // CSharp.g:205:5: 'base' brackets
    {
         this->matchToken(105, &FOLLOW_105_in_synpred6_CSharp875);
        if  (this->hasException())
        {
            goto rulesynpred6_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        this->followPush(FOLLOW_brackets_in_synpred6_CSharp877);
        brackets();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred6_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred6_CSharpEx; /* Prevent compiler warnings */
rulesynpred6_CSharpEx: ;

}
// $ANTLR end synpred6_CSharp

// $ANTLR start synpred7_CSharp
void CSharpParser::msynpred7_CSharp_fragment(  )
{
    // CSharp.g:209:5: ( object_creation_expression ( '.' | '->' | '[' ) )
    // CSharp.g:209:6: object_creation_expression ( '.' | '->' | '[' )
    {
        this->followPush(FOLLOW_object_creation_expression_in_synpred7_CSharp916);
        object_creation_expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred7_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        if ( this->LA(1) == DOT || this->LA(1) == PTR || this->LA(1) == 94 )
        {
            this->consume();
            this->set_perror_recovery(false);
             this->set_failedflag(false); 

        }
        else
        {
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            this->get_exception()->set_expectingSet(NULL);

            goto rulesynpred7_CSharpEx;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred7_CSharpEx; /* Prevent compiler warnings */
rulesynpred7_CSharpEx: ;

}
// $ANTLR end synpred7_CSharp

// $ANTLR start synpred8_CSharp
void CSharpParser::msynpred8_CSharp_fragment(  )
{
    // CSharp.g:212:6: ( delegate_creation_expression )
    // CSharp.g:212:7: delegate_creation_expression
    {
        this->followPush(FOLLOW_delegate_creation_expression_in_synpred8_CSharp955);
        delegate_creation_expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred8_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred8_CSharpEx; /* Prevent compiler warnings */
rulesynpred8_CSharpEx: ;

}
// $ANTLR end synpred8_CSharp

// $ANTLR start synpred9_CSharp
void CSharpParser::msynpred9_CSharp_fragment(  )
{
    // CSharp.g:225:4: ( identifier '<' )
    // CSharp.g:225:5: identifier '<'
    {
        this->followPush(FOLLOW_identifier_in_synpred9_CSharp1083);
        identifier();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred9_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(84, &FOLLOW_84_in_synpred9_CSharp1088);
        if  (this->hasException())
        {
            goto rulesynpred9_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred9_CSharpEx; /* Prevent compiler warnings */
rulesynpred9_CSharpEx: ;

}
// $ANTLR end synpred9_CSharp

// $ANTLR start synpred10_CSharp
void CSharpParser::msynpred10_CSharp_fragment(  )
{
    // CSharp.g:287:4: ( '(' type ')' )
    // CSharp.g:287:5: '(' type ')'
    {
         this->matchToken(71, &FOLLOW_71_in_synpred10_CSharp1375);
        if  (this->hasException())
        {
            goto rulesynpred10_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        this->followPush(FOLLOW_type_in_synpred10_CSharp1379);
        type();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred10_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_synpred10_CSharp1383);
        if  (this->hasException())
        {
            goto rulesynpred10_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred10_CSharpEx; /* Prevent compiler warnings */
rulesynpred10_CSharpEx: ;

}
// $ANTLR end synpred10_CSharp

// $ANTLR start synpred11_CSharp
void CSharpParser::msynpred11_CSharp_fragment(  )
{
    // CSharp.g:335:4: ( array_creation_expression )
    // CSharp.g:335:5: array_creation_expression
    {
        this->followPush(FOLLOW_array_creation_expression_in_synpred11_CSharp1644);
        array_creation_expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred11_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred11_CSharpEx; /* Prevent compiler warnings */
rulesynpred11_CSharpEx: ;

}
// $ANTLR end synpred11_CSharp

// $ANTLR start synpred12_CSharp
void CSharpParser::msynpred12_CSharp_fragment(  )
{
    // CSharp.g:350:10: ( arguments ( '[' | '.' | '->' ) )
    // CSharp.g:350:11: arguments ( '[' | '.' | '->' )
    {
        this->followPush(FOLLOW_arguments_in_synpred12_CSharp1754);
        arguments();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred12_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        if ( this->LA(1) == DOT || this->LA(1) == PTR || this->LA(1) == 94 )
        {
            this->consume();
            this->set_perror_recovery(false);
             this->set_failedflag(false); 

        }
        else
        {
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            this->get_exception()->set_expectingSet(NULL);

            goto rulesynpred12_CSharpEx;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred12_CSharpEx; /* Prevent compiler warnings */
rulesynpred12_CSharpEx: ;

}
// $ANTLR end synpred12_CSharp

// $ANTLR start synpred13_CSharp
void CSharpParser::msynpred13_CSharp_fragment(  )
{
    // CSharp.g:467:20: ( unbound_type_name )
    // CSharp.g:467:21: unbound_type_name
    {
        this->followPush(FOLLOW_unbound_type_name_in_synpred13_CSharp2364);
        unbound_type_name();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred13_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred13_CSharpEx; /* Prevent compiler warnings */
rulesynpred13_CSharpEx: ;

}
// $ANTLR end synpred13_CSharp

// $ANTLR start synpred14_CSharp
void CSharpParser::msynpred14_CSharp_fragment(  )
{
    // CSharp.g:477:5: ( generic_dimension_specifier '.' )
    // CSharp.g:477:6: generic_dimension_specifier '.'
    {
        this->followPush(FOLLOW_generic_dimension_specifier_in_synpred14_CSharp2422);
        generic_dimension_specifier();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred14_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(DOT, &FOLLOW_DOT_in_synpred14_CSharp2426);
        if  (this->hasException())
        {
            goto rulesynpred14_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred14_CSharpEx; /* Prevent compiler warnings */
rulesynpred14_CSharpEx: ;

}
// $ANTLR end synpred14_CSharp

// $ANTLR start synpred15_CSharp
void CSharpParser::msynpred15_CSharp_fragment(  )
{
    // CSharp.g:500:2: ( identifier '<' )
    // CSharp.g:500:3: identifier '<'
    {
        this->followPush(FOLLOW_identifier_in_synpred15_CSharp2558);
        identifier();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred15_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(84, &FOLLOW_84_in_synpred15_CSharp2562);
        if  (this->hasException())
        {
            goto rulesynpred15_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred15_CSharpEx; /* Prevent compiler warnings */
rulesynpred15_CSharpEx: ;

}
// $ANTLR end synpred15_CSharp

// $ANTLR start synpred16_CSharp
void CSharpParser::msynpred16_CSharp_fragment(  )
{
    // CSharp.g:508:4: ( identifier '<' )
    // CSharp.g:508:5: identifier '<'
    {
        this->followPush(FOLLOW_identifier_in_synpred16_CSharp2607);
        identifier();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred16_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(84, &FOLLOW_84_in_synpred16_CSharp2612);
        if  (this->hasException())
        {
            goto rulesynpred16_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred16_CSharpEx; /* Prevent compiler warnings */
rulesynpred16_CSharpEx: ;

}
// $ANTLR end synpred16_CSharp

// $ANTLR start synpred17_CSharp
void CSharpParser::msynpred17_CSharp_fragment(  )
{
    // CSharp.g:525:4: ( ( predefined_type | type_name ) rank_specifiers )
    // CSharp.g:525:5: ( predefined_type | type_name ) rank_specifiers
    {
        // CSharp.g:525:5: ( predefined_type | type_name )
        {
            int alt295=2;
            switch ( this->LA(1) )
            {
            case 106:
            case 109:
            case 111:
            case 116:
            case 121:
            case 131:
            case 140:
            case 148:
            case 153:
            case 171:
            case 175:
            case 179:
            case 187:
            case 188:
            case 191:
            	{
            		alt295=1;
            	}
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 134:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
            	{
            		alt295=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 295 );
                ex->set_state( 0 );


                goto rulesynpred17_CSharpEx;

            }

            switch (alt295)
            {
        	case 1:
        	    // CSharp.g:525:6: predefined_type
        	    {
        	        this->followPush(FOLLOW_predefined_type_in_synpred17_CSharp2705);
        	        predefined_type();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred17_CSharpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // CSharp.g:525:24: type_name
        	    {
        	        this->followPush(FOLLOW_type_name_in_synpred17_CSharp2709);
        	        type_name();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred17_CSharpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

        this->followPush(FOLLOW_rank_specifiers_in_synpred17_CSharp2713);
        rank_specifiers();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred17_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred17_CSharpEx; /* Prevent compiler warnings */
rulesynpred17_CSharpEx: ;

}
// $ANTLR end synpred17_CSharp

// $ANTLR start synpred18_CSharp
void CSharpParser::msynpred18_CSharp_fragment(  )
{
    // CSharp.g:526:4: ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )
    // CSharp.g:526:5: ( predefined_type | type_name ) ( ( '*' )+ | '?' )
    {
        // CSharp.g:526:5: ( predefined_type | type_name )
        {
            int alt296=2;
            switch ( this->LA(1) )
            {
            case 106:
            case 109:
            case 111:
            case 116:
            case 121:
            case 131:
            case 140:
            case 148:
            case 153:
            case 171:
            case 175:
            case 179:
            case 187:
            case 188:
            case 191:
            	{
            		alt296=1;
            	}
                break;
            case IDENTIFIER:
            case 98:
            case 100:
            case 101:
            case 103:
            case 104:
            case 108:
            case 119:
            case 122:
            case 124:
            case 128:
            case 134:
            case 137:
            case 143:
            case 145:
            case 146:
            case 149:
            case 150:
            case 154:
            case 156:
            case 159:
            case 162:
            case 164:
            case 169:
            case 173:
            case 174:
            case 185:
            case 192:
            case 196:
            case 198:
            	{
            		alt296=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 296 );
                ex->set_state( 0 );


                goto rulesynpred18_CSharpEx;

            }

            switch (alt296)
            {
        	case 1:
        	    // CSharp.g:526:6: predefined_type
        	    {
        	        this->followPush(FOLLOW_predefined_type_in_synpred18_CSharp2740);
        	        predefined_type();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred18_CSharpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // CSharp.g:526:24: type_name
        	    {
        	        this->followPush(FOLLOW_type_name_in_synpred18_CSharp2744);
        	        type_name();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred18_CSharpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

        // CSharp.g:526:36: ( ( '*' )+ | '?' )
        {
            int alt298=2;
            switch ( this->LA(1) )
            {
            case 72:
            	{
            		alt298=1;
            	}
                break;
            case 92:
            	{
            		alt298=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< CSharpParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 298 );
                ex->set_state( 0 );


                goto rulesynpred18_CSharpEx;

            }

            switch (alt298)
            {
        	case 1:
        	    // CSharp.g:526:37: ( '*' )+
        	    {
        	        // CSharp.g:526:37: ( '*' )+
        	        {
        	            int cnt297=0;

        	            for (;;)
        	            {
        	                int alt297=2;
        	        	switch ( this->LA(1) )
        	        	{
        	        	case 72:
        	        		{
        	        			alt297=1;
        	        		}
        	        	    break;

        	        	}

        	        	switch (alt297)
        	        	{
        	        	    case 1:
        	        	        // CSharp.g:526:37: '*'
        	        	        {
        	        	             this->matchToken(72, &FOLLOW_72_in_synpred18_CSharp2749);
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulesynpred18_CSharpEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return ;
        	        	            }


        	        	        }
        	        	        break;

        	        	    default:

        	        		if ( cnt297 >= 1 )
        	        		{
        	        		    goto loop297;
        	        		}
        	        		if (this->get_backtracking()>0)
        	        		{
        	        		    this->set_failedflag( true );
        	        		    return ;
        	        		}

        	        		/* mismatchedSetEx()
        	        		 */
        	        		new ANTLR_Exception< CSharpParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        	        		goto rulesynpred18_CSharpEx;
        	        	}
        	        	cnt297++;
        	            }
        	            loop297: ;	/* Jump to here if this rule does not match */
        	        }

        	    }
        	    break;
        	case 2:
        	    // CSharp.g:526:44: '?'
        	    {
        	         this->matchToken(92, &FOLLOW_92_in_synpred18_CSharp2754);
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred18_CSharpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred18_CSharpEx; /* Prevent compiler warnings */
rulesynpred18_CSharpEx: ;

}
// $ANTLR end synpred18_CSharp

// $ANTLR start synpred19_CSharp
void CSharpParser::msynpred19_CSharp_fragment(  )
{
    // CSharp.g:562:2: ( unary_expression assignment_operator )
    // CSharp.g:562:3: unary_expression assignment_operator
    {
        this->followPush(FOLLOW_unary_expression_in_synpred19_CSharp2936);
        unary_expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred19_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        this->followPush(FOLLOW_assignment_operator_in_synpred19_CSharp2940);
        assignment_operator();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred19_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred19_CSharpEx; /* Prevent compiler warnings */
rulesynpred19_CSharpEx: ;

}
// $ANTLR end synpred19_CSharp

// $ANTLR start synpred20_CSharp
void CSharpParser::msynpred20_CSharp_fragment(  )
{
    // CSharp.g:573:2: ( cast_expression )
    // CSharp.g:573:3: cast_expression
    {
        this->followPush(FOLLOW_cast_expression_in_synpred20_CSharp3005);
        cast_expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred20_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred20_CSharpEx; /* Prevent compiler warnings */
rulesynpred20_CSharpEx: ;

}
// $ANTLR end synpred20_CSharp

// $ANTLR start synpred21_CSharp
void CSharpParser::msynpred21_CSharp_fragment(  )
{
    // CSharp.g:599:2: ( anonymous_function_signature '=>' )
    // CSharp.g:599:3: anonymous_function_signature '=>'
    {
        this->followPush(FOLLOW_anonymous_function_signature_in_synpred21_CSharp3221);
        anonymous_function_signature();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred21_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(90, &FOLLOW_90_in_synpred21_CSharp3225);
        if  (this->hasException())
        {
            goto rulesynpred21_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred21_CSharpEx; /* Prevent compiler warnings */
rulesynpred21_CSharpEx: ;

}
// $ANTLR end synpred21_CSharp

// $ANTLR start synpred22_CSharp
void CSharpParser::msynpred22_CSharp_fragment(  )
{
    // CSharp.g:600:4: ( query_expression )
    // CSharp.g:600:5: query_expression
    {
        this->followPush(FOLLOW_query_expression_in_synpred22_CSharp3236);
        query_expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred22_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred22_CSharpEx; /* Prevent compiler warnings */
rulesynpred22_CSharpEx: ;

}
// $ANTLR end synpred22_CSharp

// $ANTLR start synpred23_CSharp
void CSharpParser::msynpred23_CSharp_fragment(  )
{
    // CSharp.g:664:50: ( 'into' )
    // CSharp.g:664:51: 'into'
    {
         this->matchToken(143, &FOLLOW_143_in_synpred23_CSharp3659);
        if  (this->hasException())
        {
            goto rulesynpred23_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred23_CSharpEx; /* Prevent compiler warnings */
rulesynpred23_CSharpEx: ;

}
// $ANTLR end synpred23_CSharp

// $ANTLR start synpred24_CSharp
void CSharpParser::msynpred24_CSharp_fragment(  )
{
    // CSharp.g:731:32: ( ',' identifier '=' )
    // CSharp.g:731:33: ',' identifier '='
    {
         this->matchToken(77, &FOLLOW_77_in_synpred24_CSharp4161);
        if  (this->hasException())
        {
            goto rulesynpred24_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        this->followPush(FOLLOW_identifier_in_synpred24_CSharp4165);
        identifier();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred24_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(88, &FOLLOW_88_in_synpred24_CSharp4169);
        if  (this->hasException())
        {
            goto rulesynpred24_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred24_CSharpEx; /* Prevent compiler warnings */
rulesynpred24_CSharpEx: ;

}
// $ANTLR end synpred24_CSharp

// $ANTLR start synpred25_CSharp
void CSharpParser::msynpred25_CSharp_fragment(  )
{
    // CSharp.g:813:4: ( member_name '{' )
    // CSharp.g:813:5: member_name '{'
    {
        this->followPush(FOLLOW_member_name_in_synpred25_CSharp4716);
        member_name();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred25_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(199, &FOLLOW_199_in_synpred25_CSharp4720);
        if  (this->hasException())
        {
            goto rulesynpred25_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred25_CSharpEx; /* Prevent compiler warnings */
rulesynpred25_CSharpEx: ;

}
// $ANTLR end synpred25_CSharp

// $ANTLR start synpred26_CSharp
void CSharpParser::msynpred26_CSharp_fragment(  )
{
    // CSharp.g:920:14: ( member_name '(' )
    // CSharp.g:920:15: member_name '('
    {
        this->followPush(FOLLOW_member_name_in_synpred26_CSharp5581);
        member_name();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred26_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(71, &FOLLOW_71_in_synpred26_CSharp5585);
        if  (this->hasException())
        {
            goto rulesynpred26_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred26_CSharpEx; /* Prevent compiler warnings */
rulesynpred26_CSharpEx: ;

}
// $ANTLR end synpred26_CSharp

// $ANTLR start synpred27_CSharp
void CSharpParser::msynpred27_CSharp_fragment(  )
{
    // CSharp.g:921:14: ( member_name '{' )
    // CSharp.g:921:15: member_name '{'
    {
        this->followPush(FOLLOW_member_name_in_synpred27_CSharp5606);
        member_name();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred27_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(199, &FOLLOW_199_in_synpred27_CSharp5610);
        if  (this->hasException())
        {
            goto rulesynpred27_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred27_CSharpEx; /* Prevent compiler warnings */
rulesynpred27_CSharpEx: ;

}
// $ANTLR end synpred27_CSharp

// $ANTLR start synpred28_CSharp
void CSharpParser::msynpred28_CSharp_fragment(  )
{
    // CSharp.g:979:6: ( member_name '(' )
    // CSharp.g:979:7: member_name '('
    {
        this->followPush(FOLLOW_member_name_in_synpred28_CSharp6078);
        member_name();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred28_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(71, &FOLLOW_71_in_synpred28_CSharp6082);
        if  (this->hasException())
        {
            goto rulesynpred28_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred28_CSharpEx; /* Prevent compiler warnings */
rulesynpred28_CSharpEx: ;

}
// $ANTLR end synpred28_CSharp

// $ANTLR start synpred29_CSharp
void CSharpParser::msynpred29_CSharp_fragment(  )
{
    // CSharp.g:980:7: ( member_name '{' )
    // CSharp.g:980:8: member_name '{'
    {
        this->followPush(FOLLOW_member_name_in_synpred29_CSharp6096);
        member_name();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred29_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(199, &FOLLOW_199_in_synpred29_CSharp6100);
        if  (this->hasException())
        {
            goto rulesynpred29_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred29_CSharpEx; /* Prevent compiler warnings */
rulesynpred29_CSharpEx: ;

}
// $ANTLR end synpred29_CSharp

// $ANTLR start synpred30_CSharp
void CSharpParser::msynpred30_CSharp_fragment(  )
{
    // CSharp.g:981:10: ( member_name '.' 'this' )
    // CSharp.g:981:11: member_name '.' 'this'
    {
        this->followPush(FOLLOW_member_name_in_synpred30_CSharp6117);
        member_name();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred30_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(DOT, &FOLLOW_DOT_in_synpred30_CSharp6121);
        if  (this->hasException())
        {
            goto rulesynpred30_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(182, &FOLLOW_182_in_synpred30_CSharp6125);
        if  (this->hasException())
        {
            goto rulesynpred30_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred30_CSharpEx; /* Prevent compiler warnings */
rulesynpred30_CSharpEx: ;

}
// $ANTLR end synpred30_CSharp

// $ANTLR start synpred31_CSharp
void CSharpParser::msynpred31_CSharp_fragment(  )
{
    // CSharp.g:1102:5: ( arguments ( '[' | '.' | '->' ) )
    // CSharp.g:1102:6: arguments ( '[' | '.' | '->' )
    {
        this->followPush(FOLLOW_arguments_in_synpred31_CSharp6763);
        arguments();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred31_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        if ( this->LA(1) == DOT || this->LA(1) == PTR || this->LA(1) == 94 )
        {
            this->consume();
            this->set_perror_recovery(false);
             this->set_failedflag(false); 

        }
        else
        {
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            new ANTLR_Exception< CSharpParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            this->get_exception()->set_expectingSet(NULL);

            goto rulesynpred31_CSharpEx;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred31_CSharpEx; /* Prevent compiler warnings */
rulesynpred31_CSharpEx: ;

}
// $ANTLR end synpred31_CSharp

// $ANTLR start synpred32_CSharp
void CSharpParser::msynpred32_CSharp_fragment(  )
{
    // CSharp.g:1109:4: ( identifier '<' )
    // CSharp.g:1109:5: identifier '<'
    {
        this->followPush(FOLLOW_identifier_in_synpred32_CSharp6815);
        identifier();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred32_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(84, &FOLLOW_84_in_synpred32_CSharp6820);
        if  (this->hasException())
        {
            goto rulesynpred32_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred32_CSharpEx; /* Prevent compiler warnings */
rulesynpred32_CSharpEx: ;

}
// $ANTLR end synpred32_CSharp

// $ANTLR start synpred33_CSharp
void CSharpParser::msynpred33_CSharp_fragment(  )
{
    // CSharp.g:1123:2: ( declaration_statement )
    // CSharp.g:1123:3: declaration_statement
    {
        this->followPush(FOLLOW_declaration_statement_in_synpred33_CSharp6902);
        declaration_statement();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred33_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred33_CSharpEx; /* Prevent compiler warnings */
rulesynpred33_CSharpEx: ;

}
// $ANTLR end synpred33_CSharp

// $ANTLR start synpred34_CSharp
void CSharpParser::msynpred34_CSharp_fragment(  )
{
    // CSharp.g:1124:4: ( identifier ':' )
    // CSharp.g:1124:5: identifier ':'
    {
        this->followPush(FOLLOW_identifier_in_synpred34_CSharp6913);
        identifier();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred34_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(82, &FOLLOW_82_in_synpred34_CSharp6917);
        if  (this->hasException())
        {
            goto rulesynpred34_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred34_CSharpEx; /* Prevent compiler warnings */
rulesynpred34_CSharpEx: ;

}
// $ANTLR end synpred34_CSharp

// $ANTLR start synpred35_CSharp
void CSharpParser::msynpred35_CSharp_fragment(  )
{
    // CSharp.g:1168:2: ( 'var' )
    // CSharp.g:1168:3: 'var'
    {
         this->matchToken(192, &FOLLOW_192_in_synpred35_CSharp7169);
        if  (this->hasException())
        {
            goto rulesynpred35_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred35_CSharpEx; /* Prevent compiler warnings */
rulesynpred35_CSharpEx: ;

}
// $ANTLR end synpred35_CSharp

// $ANTLR start synpred36_CSharp
void CSharpParser::msynpred36_CSharp_fragment(  )
{
    // CSharp.g:1169:4: ( 'dynamic' )
    // CSharp.g:1169:5: 'dynamic'
    {
         this->matchToken(122, &FOLLOW_122_in_synpred36_CSharp7180);
        if  (this->hasException())
        {
            goto rulesynpred36_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred36_CSharpEx; /* Prevent compiler warnings */
rulesynpred36_CSharpEx: ;

}
// $ANTLR end synpred36_CSharp

// $ANTLR start synpred37_CSharp
void CSharpParser::msynpred37_CSharp_fragment(  )
{
    // CSharp.g:1202:62: ( 'else' )
    // CSharp.g:1202:63: 'else'
    {
         this->matchToken(123, &FOLLOW_123_in_synpred37_CSharp7363);
        if  (this->hasException())
        {
            goto rulesynpred37_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred37_CSharpEx; /* Prevent compiler warnings */
rulesynpred37_CSharpEx: ;

}
// $ANTLR end synpred37_CSharp

// $ANTLR start synpred38_CSharp
void CSharpParser::msynpred38_CSharp_fragment(  )
{
    // CSharp.g:1231:2: ( local_variable_declaration )
    // CSharp.g:1231:3: local_variable_declaration
    {
        this->followPush(FOLLOW_local_variable_declaration_in_synpred38_CSharp7614);
        local_variable_declaration();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred38_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred38_CSharpEx; /* Prevent compiler warnings */
rulesynpred38_CSharpEx: ;

}
// $ANTLR end synpred38_CSharp

// $ANTLR start synpred39_CSharp
void CSharpParser::msynpred39_CSharp_fragment(  )
{
    // CSharp.g:1329:4: ( local_variable_declaration )
    // CSharp.g:1329:5: local_variable_declaration
    {
        this->followPush(FOLLOW_local_variable_declaration_in_synpred39_CSharp8105);
        local_variable_declaration();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred39_CSharpEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred39_CSharpEx; /* Prevent compiler warnings */
rulesynpred39_CSharpEx: ;

}
// $ANTLR end synpred39_CSharp
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred21_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred21_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred39_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred39_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred34_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred34_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred6_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred6_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred15_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred15_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred36_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred36_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred18_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred18_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred1_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred1_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred28_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred28_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred9_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred9_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred17_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred17_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred27_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred27_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred32_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred32_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred3_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred3_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred7_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred7_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred29_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred29_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred4_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred4_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred37_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred37_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred23_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred23_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred22_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred22_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred2_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred2_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred10_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred10_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred5_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred5_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred31_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred31_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred16_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred16_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred38_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred38_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred20_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred20_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred24_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred24_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred35_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred35_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred26_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred26_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred8_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred8_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred11_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred11_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred19_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred19_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred13_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred13_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred33_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred33_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred12_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred12_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred25_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred25_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred14_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred14_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool CSharpParser::msynpred( antlr3::ClassForwarder< synpred30_CSharp >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred30_CSharp_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

	}


/* End of code
 * =============================================================================
 */
