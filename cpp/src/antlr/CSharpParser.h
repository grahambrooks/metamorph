/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : src/antlr/CSharp.g
 *     -                            On : 2012-09-05 18:33:14
 *     -                for the parser : CSharpParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
CSharpParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pCSharpParser, which is returned from a call to CSharpParserNew().
 *
 * The methods in pCSharpParser are  as follows:
 *
 *  - 
 CSharpParser_compilation_unit_return
      pCSharpParser->compilation_unit(pCSharpParser)
 *  - 
 CSharpParser_namespace_declaration_return
      pCSharpParser->namespace_declaration(pCSharpParser)
 *  - 
 CSharpParser_namespace_block_return
      pCSharpParser->namespace_block(pCSharpParser)
 *  - 
 CSharpParser_namespace_body_return
      pCSharpParser->namespace_body(pCSharpParser)
 *  - 
 CSharpParser_extern_alias_directives_return
      pCSharpParser->extern_alias_directives(pCSharpParser)
 *  - 
 CSharpParser_extern_alias_directive_return
      pCSharpParser->extern_alias_directive(pCSharpParser)
 *  - 
 CSharpParser_using_directives_return
      pCSharpParser->using_directives(pCSharpParser)
 *  - 
 CSharpParser_using_directive_return
      pCSharpParser->using_directive(pCSharpParser)
 *  - 
 CSharpParser_using_alias_directive_return
      pCSharpParser->using_alias_directive(pCSharpParser)
 *  - 
 CSharpParser_using_namespace_directive_return
      pCSharpParser->using_namespace_directive(pCSharpParser)
 *  - 
 CSharpParser_namespace_member_declarations_return
      pCSharpParser->namespace_member_declarations(pCSharpParser)
 *  - 
 CSharpParser_namespace_member_declaration_return
      pCSharpParser->namespace_member_declaration(pCSharpParser)
 *  - 
 CSharpParser_type_declaration_return
      pCSharpParser->type_declaration(pCSharpParser)
 *  - 
 CSharpParser_qualified_identifier_return
      pCSharpParser->qualified_identifier(pCSharpParser)
 *  - 
 CSharpParser_namespace_name_return
      pCSharpParser->namespace_name(pCSharpParser)
 *  - 
 CSharpParser_modifiers_return
      pCSharpParser->modifiers(pCSharpParser)
 *  - 
 CSharpParser_modifier_return
      pCSharpParser->modifier(pCSharpParser)
 *  - 
 CSharpParser_class_member_declaration_return
      pCSharpParser->class_member_declaration(pCSharpParser)
 *  - 
 CSharpParser_primary_expression_return
      pCSharpParser->primary_expression(pCSharpParser)
 *  - 
 CSharpParser_primary_expression_start_return
      pCSharpParser->primary_expression_start(pCSharpParser)
 *  - 
 CSharpParser_primary_expression_part_return
      pCSharpParser->primary_expression_part(pCSharpParser)
 *  - 
 CSharpParser_access_identifier_return
      pCSharpParser->access_identifier(pCSharpParser)
 *  - 
 CSharpParser_access_operator_return
      pCSharpParser->access_operator(pCSharpParser)
 *  - 
 CSharpParser_brackets_or_arguments_return
      pCSharpParser->brackets_or_arguments(pCSharpParser)
 *  - 
 CSharpParser_brackets_return
      pCSharpParser->brackets(pCSharpParser)
 *  - 
 CSharpParser_paren_expression_return
      pCSharpParser->paren_expression(pCSharpParser)
 *  - 
 CSharpParser_arguments_return
      pCSharpParser->arguments(pCSharpParser)
 *  - 
 CSharpParser_argument_list_return
      pCSharpParser->argument_list(pCSharpParser)
 *  - 
 CSharpParser_argument_return
      pCSharpParser->argument(pCSharpParser)
 *  - 
 CSharpParser_argument_name_return
      pCSharpParser->argument_name(pCSharpParser)
 *  - 
 CSharpParser_argument_value_return
      pCSharpParser->argument_value(pCSharpParser)
 *  - 
 CSharpParser_ref_variable_reference_return
      pCSharpParser->ref_variable_reference(pCSharpParser)
 *  - 
 CSharpParser_variable_reference_return
      pCSharpParser->variable_reference(pCSharpParser)
 *  - 
 CSharpParser_rank_specifiers_return
      pCSharpParser->rank_specifiers(pCSharpParser)
 *  - 
 CSharpParser_rank_specifier_return
      pCSharpParser->rank_specifier(pCSharpParser)
 *  - 
 CSharpParser_dim_separators_return
      pCSharpParser->dim_separators(pCSharpParser)
 *  - 
 CSharpParser_delegate_creation_expression_return
      pCSharpParser->delegate_creation_expression(pCSharpParser)
 *  - 
 CSharpParser_anonymous_object_creation_expression_return
      pCSharpParser->anonymous_object_creation_expression(pCSharpParser)
 *  - 
 CSharpParser_anonymous_object_initializer_return
      pCSharpParser->anonymous_object_initializer(pCSharpParser)
 *  - 
 CSharpParser_member_declarator_list_return
      pCSharpParser->member_declarator_list(pCSharpParser)
 *  - 
 CSharpParser_member_declarator_return
      pCSharpParser->member_declarator(pCSharpParser)
 *  - 
 CSharpParser_primary_or_array_creation_expression_return
      pCSharpParser->primary_or_array_creation_expression(pCSharpParser)
 *  - 
 CSharpParser_array_creation_expression_return
      pCSharpParser->array_creation_expression(pCSharpParser)
 *  - 
 CSharpParser_array_initializer_return
      pCSharpParser->array_initializer(pCSharpParser)
 *  - 
 CSharpParser_variable_initializer_list_return
      pCSharpParser->variable_initializer_list(pCSharpParser)
 *  - 
 CSharpParser_variable_initializer_return
      pCSharpParser->variable_initializer(pCSharpParser)
 *  - 
 CSharpParser_sizeof_expression_return
      pCSharpParser->sizeof_expression(pCSharpParser)
 *  - 
 CSharpParser_checked_expression_return
      pCSharpParser->checked_expression(pCSharpParser)
 *  - 
 CSharpParser_unchecked_expression_return
      pCSharpParser->unchecked_expression(pCSharpParser)
 *  - 
 CSharpParser_default_value_expression_return
      pCSharpParser->default_value_expression(pCSharpParser)
 *  - 
 CSharpParser_anonymous_method_expression_return
      pCSharpParser->anonymous_method_expression(pCSharpParser)
 *  - 
 CSharpParser_explicit_anonymous_function_signature_return
      pCSharpParser->explicit_anonymous_function_signature(pCSharpParser)
 *  - 
 CSharpParser_explicit_anonymous_function_parameter_list_return
      pCSharpParser->explicit_anonymous_function_parameter_list(pCSharpParser)
 *  - 
 CSharpParser_explicit_anonymous_function_parameter_return
      pCSharpParser->explicit_anonymous_function_parameter(pCSharpParser)
 *  - 
 CSharpParser_anonymous_function_parameter_modifier_return
      pCSharpParser->anonymous_function_parameter_modifier(pCSharpParser)
 *  - 
 CSharpParser_object_creation_expression_return
      pCSharpParser->object_creation_expression(pCSharpParser)
 *  - 
 CSharpParser_object_or_collection_initializer_return
      pCSharpParser->object_or_collection_initializer(pCSharpParser)
 *  - 
 CSharpParser_collection_initializer_return
      pCSharpParser->collection_initializer(pCSharpParser)
 *  - 
 CSharpParser_element_initializer_list_return
      pCSharpParser->element_initializer_list(pCSharpParser)
 *  - 
 CSharpParser_element_initializer_return
      pCSharpParser->element_initializer(pCSharpParser)
 *  - 
 CSharpParser_object_initializer_return
      pCSharpParser->object_initializer(pCSharpParser)
 *  - 
 CSharpParser_member_initializer_list_return
      pCSharpParser->member_initializer_list(pCSharpParser)
 *  - 
 CSharpParser_member_initializer_return
      pCSharpParser->member_initializer(pCSharpParser)
 *  - 
 CSharpParser_initializer_value_return
      pCSharpParser->initializer_value(pCSharpParser)
 *  - 
 CSharpParser_typeof_expression_return
      pCSharpParser->typeof_expression(pCSharpParser)
 *  - 
 CSharpParser_unbound_type_name_return
      pCSharpParser->unbound_type_name(pCSharpParser)
 *  - 
 CSharpParser_unbound_type_name_start_return
      pCSharpParser->unbound_type_name_start(pCSharpParser)
 *  - 
 CSharpParser_unbound_type_name_part_return
      pCSharpParser->unbound_type_name_part(pCSharpParser)
 *  - 
 CSharpParser_generic_dimension_specifier_return
      pCSharpParser->generic_dimension_specifier(pCSharpParser)
 *  - 
 CSharpParser_commas_return
      pCSharpParser->commas(pCSharpParser)
 *  - 
 CSharpParser_type_name_return
      pCSharpParser->type_name(pCSharpParser)
 *  - 
 CSharpParser_namespace_or_type_name_return
      pCSharpParser->namespace_or_type_name(pCSharpParser)
 *  - 
 CSharpParser_type_or_generic_return
      pCSharpParser->type_or_generic(pCSharpParser)
 *  - 
 CSharpParser_qid_return
      pCSharpParser->qid(pCSharpParser)
 *  - 
 CSharpParser_qid_start_return
      pCSharpParser->qid_start(pCSharpParser)
 *  - 
 CSharpParser_qid_part_return
      pCSharpParser->qid_part(pCSharpParser)
 *  - 
 CSharpParser_generic_argument_list_return
      pCSharpParser->generic_argument_list(pCSharpParser)
 *  - 
 CSharpParser_type_arguments_return
      pCSharpParser->type_arguments(pCSharpParser)
 *  - 
 CSharpParser_type_return
      pCSharpParser->type(pCSharpParser)
 *  - 
 CSharpParser_non_nullable_type_return
      pCSharpParser->non_nullable_type(pCSharpParser)
 *  - 
 CSharpParser_non_array_type_return
      pCSharpParser->non_array_type(pCSharpParser)
 *  - 
 CSharpParser_array_type_return
      pCSharpParser->array_type(pCSharpParser)
 *  - 
 CSharpParser_unmanaged_type_return
      pCSharpParser->unmanaged_type(pCSharpParser)
 *  - 
 CSharpParser_class_type_return
      pCSharpParser->class_type(pCSharpParser)
 *  - 
 CSharpParser_pointer_type_return
      pCSharpParser->pointer_type(pCSharpParser)
 *  - 
 CSharpParser_block_return
      pCSharpParser->block(pCSharpParser)
 *  - 
 CSharpParser_statement_list_return
      pCSharpParser->statement_list(pCSharpParser)
 *  - 
 CSharpParser_expression_return
      pCSharpParser->expression(pCSharpParser)
 *  - 
 CSharpParser_expression_list_return
      pCSharpParser->expression_list(pCSharpParser)
 *  - 
 CSharpParser_assignment_return
      pCSharpParser->assignment(pCSharpParser)
 *  - 
 CSharpParser_unary_expression_return
      pCSharpParser->unary_expression(pCSharpParser)
 *  - 
 CSharpParser_cast_expression_return
      pCSharpParser->cast_expression(pCSharpParser)
 *  - 
 CSharpParser_assignment_operator_return
      pCSharpParser->assignment_operator(pCSharpParser)
 *  - 
 CSharpParser_pre_increment_expression_return
      pCSharpParser->pre_increment_expression(pCSharpParser)
 *  - 
 CSharpParser_pre_decrement_expression_return
      pCSharpParser->pre_decrement_expression(pCSharpParser)
 *  - 
 CSharpParser_pointer_indirection_expression_return
      pCSharpParser->pointer_indirection_expression(pCSharpParser)
 *  - 
 CSharpParser_addressof_expression_return
      pCSharpParser->addressof_expression(pCSharpParser)
 *  - 
 CSharpParser_non_assignment_expression_return
      pCSharpParser->non_assignment_expression(pCSharpParser)
 *  - 
 CSharpParser_multiplicative_expression_return
      pCSharpParser->multiplicative_expression(pCSharpParser)
 *  - 
 CSharpParser_additive_expression_return
      pCSharpParser->additive_expression(pCSharpParser)
 *  - 
 CSharpParser_shift_expression_return
      pCSharpParser->shift_expression(pCSharpParser)
 *  - 
 CSharpParser_relational_expression_return
      pCSharpParser->relational_expression(pCSharpParser)
 *  - 
 CSharpParser_equality_expression_return
      pCSharpParser->equality_expression(pCSharpParser)
 *  - 
 CSharpParser_and_expression_return
      pCSharpParser->and_expression(pCSharpParser)
 *  - 
 CSharpParser_exclusive_or_expression_return
      pCSharpParser->exclusive_or_expression(pCSharpParser)
 *  - 
 CSharpParser_inclusive_or_expression_return
      pCSharpParser->inclusive_or_expression(pCSharpParser)
 *  - 
 CSharpParser_conditional_and_expression_return
      pCSharpParser->conditional_and_expression(pCSharpParser)
 *  - 
 CSharpParser_conditional_or_expression_return
      pCSharpParser->conditional_or_expression(pCSharpParser)
 *  - 
 CSharpParser_null_coalescing_expression_return
      pCSharpParser->null_coalescing_expression(pCSharpParser)
 *  - 
 CSharpParser_conditional_expression_return
      pCSharpParser->conditional_expression(pCSharpParser)
 *  - 
 CSharpParser_lambda_expression_return
      pCSharpParser->lambda_expression(pCSharpParser)
 *  - 
 CSharpParser_anonymous_function_signature_return
      pCSharpParser->anonymous_function_signature(pCSharpParser)
 *  - 
 CSharpParser_implicit_anonymous_function_parameter_list_return
      pCSharpParser->implicit_anonymous_function_parameter_list(pCSharpParser)
 *  - 
 CSharpParser_implicit_anonymous_function_parameter_return
      pCSharpParser->implicit_anonymous_function_parameter(pCSharpParser)
 *  - 
 CSharpParser_anonymous_function_body_return
      pCSharpParser->anonymous_function_body(pCSharpParser)
 *  - 
 CSharpParser_query_expression_return
      pCSharpParser->query_expression(pCSharpParser)
 *  - 
 CSharpParser_query_body_return
      pCSharpParser->query_body(pCSharpParser)
 *  - 
 CSharpParser_query_continuation_return
      pCSharpParser->query_continuation(pCSharpParser)
 *  - 
 CSharpParser_query_body_clauses_return
      pCSharpParser->query_body_clauses(pCSharpParser)
 *  - 
 CSharpParser_query_body_clause_return
      pCSharpParser->query_body_clause(pCSharpParser)
 *  - 
 CSharpParser_from_clause_return
      pCSharpParser->from_clause(pCSharpParser)
 *  - 
 CSharpParser_join_clause_return
      pCSharpParser->join_clause(pCSharpParser)
 *  - 
 CSharpParser_let_clause_return
      pCSharpParser->let_clause(pCSharpParser)
 *  - 
 CSharpParser_orderby_clause_return
      pCSharpParser->orderby_clause(pCSharpParser)
 *  - 
 CSharpParser_ordering_list_return
      pCSharpParser->ordering_list(pCSharpParser)
 *  - 
 CSharpParser_ordering_return
      pCSharpParser->ordering(pCSharpParser)
 *  - 
 CSharpParser_ordering_direction_return
      pCSharpParser->ordering_direction(pCSharpParser)
 *  - 
 CSharpParser_select_or_group_clause_return
      pCSharpParser->select_or_group_clause(pCSharpParser)
 *  - 
 CSharpParser_select_clause_return
      pCSharpParser->select_clause(pCSharpParser)
 *  - 
 CSharpParser_group_clause_return
      pCSharpParser->group_clause(pCSharpParser)
 *  - 
 CSharpParser_where_clause_return
      pCSharpParser->where_clause(pCSharpParser)
 *  - 
 CSharpParser_boolean_expression_return
      pCSharpParser->boolean_expression(pCSharpParser)
 *  - 
 CSharpParser_global_attributes_return
      pCSharpParser->global_attributes(pCSharpParser)
 *  - 
 CSharpParser_global_attribute_return
      pCSharpParser->global_attribute(pCSharpParser)
 *  - 
 CSharpParser_global_attribute_target_specifier_return
      pCSharpParser->global_attribute_target_specifier(pCSharpParser)
 *  - 
 CSharpParser_global_attribute_target_return
      pCSharpParser->global_attribute_target(pCSharpParser)
 *  - 
 CSharpParser_attributes_return
      pCSharpParser->attributes(pCSharpParser)
 *  - 
 CSharpParser_attribute_sections_return
      pCSharpParser->attribute_sections(pCSharpParser)
 *  - 
 CSharpParser_attribute_section_return
      pCSharpParser->attribute_section(pCSharpParser)
 *  - 
 CSharpParser_attribute_target_specifier_return
      pCSharpParser->attribute_target_specifier(pCSharpParser)
 *  - 
 CSharpParser_attribute_target_return
      pCSharpParser->attribute_target(pCSharpParser)
 *  - 
 CSharpParser_attribute_list_return
      pCSharpParser->attribute_list(pCSharpParser)
 *  - 
 CSharpParser_attribute_return
      pCSharpParser->attribute(pCSharpParser)
 *  - 
 CSharpParser_attribute_arguments_return
      pCSharpParser->attribute_arguments(pCSharpParser)
 *  - 
 CSharpParser_positional_argument_list_return
      pCSharpParser->positional_argument_list(pCSharpParser)
 *  - 
 CSharpParser_positional_argument_return
      pCSharpParser->positional_argument(pCSharpParser)
 *  - 
 CSharpParser_named_argument_list_return
      pCSharpParser->named_argument_list(pCSharpParser)
 *  - 
 CSharpParser_named_argument_return
      pCSharpParser->named_argument(pCSharpParser)
 *  - 
 CSharpParser_attribute_argument_expression_return
      pCSharpParser->attribute_argument_expression(pCSharpParser)
 *  - 
 CSharpParser_class_declaration_return
      pCSharpParser->class_declaration(pCSharpParser)
 *  - 
 CSharpParser_class_base_return
      pCSharpParser->class_base(pCSharpParser)
 *  - 
 CSharpParser_interface_type_list_return
      pCSharpParser->interface_type_list(pCSharpParser)
 *  - 
 CSharpParser_class_body_return
      pCSharpParser->class_body(pCSharpParser)
 *  - 
 CSharpParser_class_member_declarations_return
      pCSharpParser->class_member_declarations(pCSharpParser)
 *  - 
 CSharpParser_constant_declaration_return
      pCSharpParser->constant_declaration(pCSharpParser)
 *  - 
 CSharpParser_constant_declarators_return
      pCSharpParser->constant_declarators(pCSharpParser)
 *  - 
 CSharpParser_constant_declarator_return
      pCSharpParser->constant_declarator(pCSharpParser)
 *  - 
 CSharpParser_constant_expression_return
      pCSharpParser->constant_expression(pCSharpParser)
 *  - 
 CSharpParser_field_declaration_return
      pCSharpParser->field_declaration(pCSharpParser)
 *  - 
 CSharpParser_variable_declarators_return
      pCSharpParser->variable_declarators(pCSharpParser)
 *  - 
 CSharpParser_variable_declarator_return
      pCSharpParser->variable_declarator(pCSharpParser)
 *  - 
 CSharpParser_method_declaration_return
      pCSharpParser->method_declaration(pCSharpParser)
 *  - 
 CSharpParser_method_header_return
      pCSharpParser->method_header(pCSharpParser)
 *  - 
 CSharpParser_method_body_return
      pCSharpParser->method_body(pCSharpParser)
 *  - 
 CSharpParser_member_name_return
      pCSharpParser->member_name(pCSharpParser)
 *  - 
 CSharpParser_property_declaration_return
      pCSharpParser->property_declaration(pCSharpParser)
 *  - 
 CSharpParser_accessor_declarations_return
      pCSharpParser->accessor_declarations(pCSharpParser)
 *  - 
 CSharpParser_get_accessor_declaration_return
      pCSharpParser->get_accessor_declaration(pCSharpParser)
 *  - 
 CSharpParser_set_accessor_declaration_return
      pCSharpParser->set_accessor_declaration(pCSharpParser)
 *  - 
 CSharpParser_accessor_modifier_return
      pCSharpParser->accessor_modifier(pCSharpParser)
 *  - 
 CSharpParser_accessor_body_return
      pCSharpParser->accessor_body(pCSharpParser)
 *  - 
 CSharpParser_event_declaration_return
      pCSharpParser->event_declaration(pCSharpParser)
 *  - 
 CSharpParser_event_modifiers_return
      pCSharpParser->event_modifiers(pCSharpParser)
 *  - 
 CSharpParser_event_accessor_declarations_return
      pCSharpParser->event_accessor_declarations(pCSharpParser)
 *  - 
 CSharpParser_add_accessor_declaration_return
      pCSharpParser->add_accessor_declaration(pCSharpParser)
 *  - 
 CSharpParser_remove_accessor_declaration_return
      pCSharpParser->remove_accessor_declaration(pCSharpParser)
 *  - 
 CSharpParser_enum_declaration_return
      pCSharpParser->enum_declaration(pCSharpParser)
 *  - 
 CSharpParser_enum_base_return
      pCSharpParser->enum_base(pCSharpParser)
 *  - 
 CSharpParser_enum_body_return
      pCSharpParser->enum_body(pCSharpParser)
 *  - 
 CSharpParser_enum_member_declarations_return
      pCSharpParser->enum_member_declarations(pCSharpParser)
 *  - 
 CSharpParser_enum_member_declaration_return
      pCSharpParser->enum_member_declaration(pCSharpParser)
 *  - 
 CSharpParser_integral_type_return
      pCSharpParser->integral_type(pCSharpParser)
 *  - 
 CSharpParser_delegate_declaration_return
      pCSharpParser->delegate_declaration(pCSharpParser)
 *  - 
 CSharpParser_delegate_modifiers_return
      pCSharpParser->delegate_modifiers(pCSharpParser)
 *  - 
 CSharpParser_variant_generic_parameter_list_return
      pCSharpParser->variant_generic_parameter_list(pCSharpParser)
 *  - 
 CSharpParser_variant_type_parameters_return
      pCSharpParser->variant_type_parameters(pCSharpParser)
 *  - 
 CSharpParser_variant_type_variable_name_return
      pCSharpParser->variant_type_variable_name(pCSharpParser)
 *  - 
 CSharpParser_variance_annotation_return
      pCSharpParser->variance_annotation(pCSharpParser)
 *  - 
 CSharpParser_type_parameter_constraints_clauses_return
      pCSharpParser->type_parameter_constraints_clauses(pCSharpParser)
 *  - 
 CSharpParser_type_parameter_constraints_clause_return
      pCSharpParser->type_parameter_constraints_clause(pCSharpParser)
 *  - 
 CSharpParser_type_parameter_constraint_list_return
      pCSharpParser->type_parameter_constraint_list(pCSharpParser)
 *  - 
 CSharpParser_secondary_constraint_list_return
      pCSharpParser->secondary_constraint_list(pCSharpParser)
 *  - 
 CSharpParser_secondary_constraint_return
      pCSharpParser->secondary_constraint(pCSharpParser)
 *  - 
 CSharpParser_type_variable_name_return
      pCSharpParser->type_variable_name(pCSharpParser)
 *  - 
 CSharpParser_constructor_constraint_return
      pCSharpParser->constructor_constraint(pCSharpParser)
 *  - 
 CSharpParser_return_type_return
      pCSharpParser->return_type(pCSharpParser)
 *  - 
 CSharpParser_formal_parameter_list_return
      pCSharpParser->formal_parameter_list(pCSharpParser)
 *  - 
 CSharpParser_formal_parameter_return
      pCSharpParser->formal_parameter(pCSharpParser)
 *  - 
 CSharpParser_fixed_parameters_return
      pCSharpParser->fixed_parameters(pCSharpParser)
 *  - 
 CSharpParser_fixed_parameter_return
      pCSharpParser->fixed_parameter(pCSharpParser)
 *  - 
 CSharpParser_default_argument_return
      pCSharpParser->default_argument(pCSharpParser)
 *  - 
 CSharpParser_parameter_modifier_return
      pCSharpParser->parameter_modifier(pCSharpParser)
 *  - 
 CSharpParser_parameter_array_return
      pCSharpParser->parameter_array(pCSharpParser)
 *  - 
 CSharpParser_interface_declaration_return
      pCSharpParser->interface_declaration(pCSharpParser)
 *  - 
 CSharpParser_interface_modifiers_return
      pCSharpParser->interface_modifiers(pCSharpParser)
 *  - 
 CSharpParser_interface_base_return
      pCSharpParser->interface_base(pCSharpParser)
 *  - 
 CSharpParser_interface_body_return
      pCSharpParser->interface_body(pCSharpParser)
 *  - 
 CSharpParser_interface_member_declarations_return
      pCSharpParser->interface_member_declarations(pCSharpParser)
 *  - 
 CSharpParser_interface_member_declaration_return
      pCSharpParser->interface_member_declaration(pCSharpParser)
 *  - 
 CSharpParser_interface_property_declaration_return
      pCSharpParser->interface_property_declaration(pCSharpParser)
 *  - 
 CSharpParser_interface_method_declaration_return
      pCSharpParser->interface_method_declaration(pCSharpParser)
 *  - 
 CSharpParser_interface_event_declaration_return
      pCSharpParser->interface_event_declaration(pCSharpParser)
 *  - 
 CSharpParser_interface_indexer_declaration_return
      pCSharpParser->interface_indexer_declaration(pCSharpParser)
 *  - 
 CSharpParser_interface_accessor_declarations_return
      pCSharpParser->interface_accessor_declarations(pCSharpParser)
 *  - 
 CSharpParser_interface_get_accessor_declaration_return
      pCSharpParser->interface_get_accessor_declaration(pCSharpParser)
 *  - 
 CSharpParser_interface_set_accessor_declaration_return
      pCSharpParser->interface_set_accessor_declaration(pCSharpParser)
 *  - 
 CSharpParser_method_modifiers_return
      pCSharpParser->method_modifiers(pCSharpParser)
 *  - 
 CSharpParser_struct_declaration_return
      pCSharpParser->struct_declaration(pCSharpParser)
 *  - 
 CSharpParser_struct_modifiers_return
      pCSharpParser->struct_modifiers(pCSharpParser)
 *  - 
 CSharpParser_struct_modifier_return
      pCSharpParser->struct_modifier(pCSharpParser)
 *  - 
 CSharpParser_struct_interfaces_return
      pCSharpParser->struct_interfaces(pCSharpParser)
 *  - 
 CSharpParser_struct_body_return
      pCSharpParser->struct_body(pCSharpParser)
 *  - 
 CSharpParser_struct_member_declarations_return
      pCSharpParser->struct_member_declarations(pCSharpParser)
 *  - 
 CSharpParser_struct_member_declaration_return
      pCSharpParser->struct_member_declaration(pCSharpParser)
 *  - 
 CSharpParser_indexer_declaration_return
      pCSharpParser->indexer_declaration(pCSharpParser)
 *  - 
 CSharpParser_indexer_declarator_return
      pCSharpParser->indexer_declarator(pCSharpParser)
 *  - 
 CSharpParser_operator_declaration_return
      pCSharpParser->operator_declaration(pCSharpParser)
 *  - 
 CSharpParser_operator_declarator_return
      pCSharpParser->operator_declarator(pCSharpParser)
 *  - 
 CSharpParser_unary_operator_declarator_return
      pCSharpParser->unary_operator_declarator(pCSharpParser)
 *  - 
 CSharpParser_overloadable_unary_operator_return
      pCSharpParser->overloadable_unary_operator(pCSharpParser)
 *  - 
 CSharpParser_binary_operator_declarator_return
      pCSharpParser->binary_operator_declarator(pCSharpParser)
 *  - 
 CSharpParser_overloadable_binary_operator_return
      pCSharpParser->overloadable_binary_operator(pCSharpParser)
 *  - 
 CSharpParser_conversion_operator_declaration_return
      pCSharpParser->conversion_operator_declaration(pCSharpParser)
 *  - 
 CSharpParser_conversion_operator_declarator_return
      pCSharpParser->conversion_operator_declarator(pCSharpParser)
 *  - 
 CSharpParser_operator_body_return
      pCSharpParser->operator_body(pCSharpParser)
 *  - 
 CSharpParser_constructor_declaration_return
      pCSharpParser->constructor_declaration(pCSharpParser)
 *  - 
 CSharpParser_constructor_declarator_return
      pCSharpParser->constructor_declarator(pCSharpParser)
 *  - 
 CSharpParser_constructor_initializer_return
      pCSharpParser->constructor_initializer(pCSharpParser)
 *  - 
 CSharpParser_constructor_body_return
      pCSharpParser->constructor_body(pCSharpParser)
 *  - 
 CSharpParser_destructor_declaration_return
      pCSharpParser->destructor_declaration(pCSharpParser)
 *  - 
 CSharpParser_destructor_body_return
      pCSharpParser->destructor_body(pCSharpParser)
 *  - 
 CSharpParser_invocation_expression_return
      pCSharpParser->invocation_expression(pCSharpParser)
 *  - 
 CSharpParser_invocation_start_return
      pCSharpParser->invocation_start(pCSharpParser)
 *  - 
 CSharpParser_invocation_part_return
      pCSharpParser->invocation_part(pCSharpParser)
 *  - 
 CSharpParser_statement_return
      pCSharpParser->statement(pCSharpParser)
 *  - 
 CSharpParser_embedded_statement_return
      pCSharpParser->embedded_statement(pCSharpParser)
 *  - 
 CSharpParser_fixed_statement_return
      pCSharpParser->fixed_statement(pCSharpParser)
 *  - 
 CSharpParser_fixed_pointer_declarators_return
      pCSharpParser->fixed_pointer_declarators(pCSharpParser)
 *  - 
 CSharpParser_fixed_pointer_declarator_return
      pCSharpParser->fixed_pointer_declarator(pCSharpParser)
 *  - 
 CSharpParser_fixed_pointer_initializer_return
      pCSharpParser->fixed_pointer_initializer(pCSharpParser)
 *  - 
 CSharpParser_unsafe_statement_return
      pCSharpParser->unsafe_statement(pCSharpParser)
 *  - 
 CSharpParser_labeled_statement_return
      pCSharpParser->labeled_statement(pCSharpParser)
 *  - 
 CSharpParser_declaration_statement_return
      pCSharpParser->declaration_statement(pCSharpParser)
 *  - 
 CSharpParser_local_variable_declaration_return
      pCSharpParser->local_variable_declaration(pCSharpParser)
 *  - 
 CSharpParser_local_variable_type_return
      pCSharpParser->local_variable_type(pCSharpParser)
 *  - 
 CSharpParser_local_variable_declarators_return
      pCSharpParser->local_variable_declarators(pCSharpParser)
 *  - 
 CSharpParser_local_variable_declarator_return
      pCSharpParser->local_variable_declarator(pCSharpParser)
 *  - 
 CSharpParser_local_variable_initializer_return
      pCSharpParser->local_variable_initializer(pCSharpParser)
 *  - 
 CSharpParser_stackalloc_initializer_return
      pCSharpParser->stackalloc_initializer(pCSharpParser)
 *  - 
 CSharpParser_local_constant_declaration_return
      pCSharpParser->local_constant_declaration(pCSharpParser)
 *  - 
 CSharpParser_expression_statement_return
      pCSharpParser->expression_statement(pCSharpParser)
 *  - 
 CSharpParser_statement_expression_return
      pCSharpParser->statement_expression(pCSharpParser)
 *  - 
 CSharpParser_selection_statement_return
      pCSharpParser->selection_statement(pCSharpParser)
 *  - 
 CSharpParser_if_statement_return
      pCSharpParser->if_statement(pCSharpParser)
 *  - 
 CSharpParser_else_statement_return
      pCSharpParser->else_statement(pCSharpParser)
 *  - 
 CSharpParser_switch_statement_return
      pCSharpParser->switch_statement(pCSharpParser)
 *  - 
 CSharpParser_switch_block_return
      pCSharpParser->switch_block(pCSharpParser)
 *  - 
 CSharpParser_switch_sections_return
      pCSharpParser->switch_sections(pCSharpParser)
 *  - 
 CSharpParser_switch_section_return
      pCSharpParser->switch_section(pCSharpParser)
 *  - 
 CSharpParser_switch_labels_return
      pCSharpParser->switch_labels(pCSharpParser)
 *  - 
 CSharpParser_switch_label_return
      pCSharpParser->switch_label(pCSharpParser)
 *  - 
 CSharpParser_iteration_statement_return
      pCSharpParser->iteration_statement(pCSharpParser)
 *  - 
 CSharpParser_while_statement_return
      pCSharpParser->while_statement(pCSharpParser)
 *  - 
 CSharpParser_do_statement_return
      pCSharpParser->do_statement(pCSharpParser)
 *  - 
 CSharpParser_for_statement_return
      pCSharpParser->for_statement(pCSharpParser)
 *  - 
 CSharpParser_for_initializer_return
      pCSharpParser->for_initializer(pCSharpParser)
 *  - 
 CSharpParser_for_condition_return
      pCSharpParser->for_condition(pCSharpParser)
 *  - 
 CSharpParser_for_iterator_return
      pCSharpParser->for_iterator(pCSharpParser)
 *  - 
 CSharpParser_statement_expression_list_return
      pCSharpParser->statement_expression_list(pCSharpParser)
 *  - 
 CSharpParser_foreach_statement_return
      pCSharpParser->foreach_statement(pCSharpParser)
 *  - 
 CSharpParser_jump_statement_return
      pCSharpParser->jump_statement(pCSharpParser)
 *  - 
 CSharpParser_break_statement_return
      pCSharpParser->break_statement(pCSharpParser)
 *  - 
 CSharpParser_continue_statement_return
      pCSharpParser->continue_statement(pCSharpParser)
 *  - 
 CSharpParser_goto_statement_return
      pCSharpParser->goto_statement(pCSharpParser)
 *  - 
 CSharpParser_return_statement_return
      pCSharpParser->return_statement(pCSharpParser)
 *  - 
 CSharpParser_throw_statement_return
      pCSharpParser->throw_statement(pCSharpParser)
 *  - 
 CSharpParser_try_statement_return
      pCSharpParser->try_statement(pCSharpParser)
 *  - 
 CSharpParser_catch_clauses_return
      pCSharpParser->catch_clauses(pCSharpParser)
 *  - 
 CSharpParser_specific_catch_clauses_return
      pCSharpParser->specific_catch_clauses(pCSharpParser)
 *  - 
 CSharpParser_specific_catch_clause_return
      pCSharpParser->specific_catch_clause(pCSharpParser)
 *  - 
 CSharpParser_general_catch_clause_return
      pCSharpParser->general_catch_clause(pCSharpParser)
 *  - 
 CSharpParser_finally_clause_return
      pCSharpParser->finally_clause(pCSharpParser)
 *  - 
 CSharpParser_checked_statement_return
      pCSharpParser->checked_statement(pCSharpParser)
 *  - 
 CSharpParser_unchecked_statement_return
      pCSharpParser->unchecked_statement(pCSharpParser)
 *  - 
 CSharpParser_lock_statement_return
      pCSharpParser->lock_statement(pCSharpParser)
 *  - 
 CSharpParser_using_statement_return
      pCSharpParser->using_statement(pCSharpParser)
 *  - 
 CSharpParser_resource_acquisition_return
      pCSharpParser->resource_acquisition(pCSharpParser)
 *  - 
 CSharpParser_yield_statement_return
      pCSharpParser->yield_statement(pCSharpParser)
 *  - 
 CSharpParser_predefined_type_return
      pCSharpParser->predefined_type(pCSharpParser)
 *  - 
 CSharpParser_identifier_return
      pCSharpParser->identifier(pCSharpParser)
 *  - 
 CSharpParser_keyword_return
      pCSharpParser->keyword(pCSharpParser)
 *  - 
 CSharpParser_also_keyword_return
      pCSharpParser->also_keyword(pCSharpParser)
 *  - 
 CSharpParser_literal_return
      pCSharpParser->literal(pCSharpParser)
 *  - 
 CSharpParser_assignment_list_return
      pCSharpParser->assignment_list(pCSharpParser)
 *  - 
 CSharpParser_field_declarations_return
      pCSharpParser->field_declarations(pCSharpParser)
 *  - 
 CSharpParser_property_declaration_list_return
      pCSharpParser->property_declaration_list(pCSharpParser)
 *  - 
 CSharpParser_constant_declarations_return
      pCSharpParser->constant_declarations(pCSharpParser)
 *  - 
 CSharpParser_literals_return
      pCSharpParser->literals(pCSharpParser)
 *  - 
 CSharpParser_delegate_declaration_list_return
      pCSharpParser->delegate_declaration_list(pCSharpParser)
 *  - 
 CSharpParser_local_variable_declaration_list_return
      pCSharpParser->local_variable_declaration_list(pCSharpParser)
 *  - 
 CSharpParser_local_variable_initializer_list_return
      pCSharpParser->local_variable_initializer_list(pCSharpParser)
 *  - 
 CSharpParser_expression_list_test_return
      pCSharpParser->expression_list_test(pCSharpParser)
 *  - 
 CSharpParser_unary_expression_list_return
      pCSharpParser->unary_expression_list(pCSharpParser)
 *  - 
 CSharpParser_invocation_expression_list_return
      pCSharpParser->invocation_expression_list(pCSharpParser)
 *  - 
 CSharpParser_primary_expression_list_return
      pCSharpParser->primary_expression_list(pCSharpParser)
 *  - 
 CSharpParser_non_assignment_expression_list_return
      pCSharpParser->non_assignment_expression_list(pCSharpParser)
 *  - 
 CSharpParser_method_declarations_return
      pCSharpParser->method_declarations(pCSharpParser)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_CSharpParser_H
#define _CSharpParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

            #include "CSharpLexer.hpp"
        

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct CSharpParser_Ctx_struct CSharpParser, * pCSharpParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct CSharpParser_compilation_unit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_compilation_unit_return;



typedef struct CSharpParser_namespace_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_namespace_declaration_return;



typedef struct CSharpParser_namespace_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_namespace_block_return;



typedef struct CSharpParser_namespace_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_namespace_body_return;



typedef struct CSharpParser_extern_alias_directives_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_extern_alias_directives_return;



typedef struct CSharpParser_extern_alias_directive_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_extern_alias_directive_return;



typedef struct CSharpParser_using_directives_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_using_directives_return;



typedef struct CSharpParser_using_directive_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_using_directive_return;



typedef struct CSharpParser_using_alias_directive_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_using_alias_directive_return;



typedef struct CSharpParser_using_namespace_directive_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_using_namespace_directive_return;



typedef struct CSharpParser_namespace_member_declarations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_namespace_member_declarations_return;



typedef struct CSharpParser_namespace_member_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_namespace_member_declaration_return;



typedef struct CSharpParser_type_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_type_declaration_return;



typedef struct CSharpParser_qualified_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_qualified_identifier_return;



typedef struct CSharpParser_namespace_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_namespace_name_return;



typedef struct CSharpParser_modifiers_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_modifiers_return;



typedef struct CSharpParser_modifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_modifier_return;



typedef struct CSharpParser_class_member_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_class_member_declaration_return;



typedef struct CSharpParser_primary_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_primary_expression_return;



typedef struct CSharpParser_primary_expression_start_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_primary_expression_start_return;



typedef struct CSharpParser_primary_expression_part_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_primary_expression_part_return;



typedef struct CSharpParser_access_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_access_identifier_return;



typedef struct CSharpParser_access_operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_access_operator_return;



typedef struct CSharpParser_brackets_or_arguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_brackets_or_arguments_return;



typedef struct CSharpParser_brackets_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_brackets_return;



typedef struct CSharpParser_paren_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_paren_expression_return;



typedef struct CSharpParser_arguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_arguments_return;



typedef struct CSharpParser_argument_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_argument_list_return;



typedef struct CSharpParser_argument_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_argument_return;



typedef struct CSharpParser_argument_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_argument_name_return;



typedef struct CSharpParser_argument_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_argument_value_return;



typedef struct CSharpParser_ref_variable_reference_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_ref_variable_reference_return;



typedef struct CSharpParser_variable_reference_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_variable_reference_return;



typedef struct CSharpParser_rank_specifiers_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_rank_specifiers_return;



typedef struct CSharpParser_rank_specifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_rank_specifier_return;



typedef struct CSharpParser_dim_separators_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_dim_separators_return;



typedef struct CSharpParser_delegate_creation_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_delegate_creation_expression_return;



typedef struct CSharpParser_anonymous_object_creation_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_anonymous_object_creation_expression_return;



typedef struct CSharpParser_anonymous_object_initializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_anonymous_object_initializer_return;



typedef struct CSharpParser_member_declarator_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_member_declarator_list_return;



typedef struct CSharpParser_member_declarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_member_declarator_return;



typedef struct CSharpParser_primary_or_array_creation_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_primary_or_array_creation_expression_return;



typedef struct CSharpParser_array_creation_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_array_creation_expression_return;



typedef struct CSharpParser_array_initializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_array_initializer_return;



typedef struct CSharpParser_variable_initializer_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_variable_initializer_list_return;



typedef struct CSharpParser_variable_initializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_variable_initializer_return;



typedef struct CSharpParser_sizeof_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_sizeof_expression_return;



typedef struct CSharpParser_checked_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_checked_expression_return;



typedef struct CSharpParser_unchecked_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_unchecked_expression_return;



typedef struct CSharpParser_default_value_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_default_value_expression_return;



typedef struct CSharpParser_anonymous_method_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_anonymous_method_expression_return;



typedef struct CSharpParser_explicit_anonymous_function_signature_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_explicit_anonymous_function_signature_return;



typedef struct CSharpParser_explicit_anonymous_function_parameter_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_explicit_anonymous_function_parameter_list_return;



typedef struct CSharpParser_explicit_anonymous_function_parameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_explicit_anonymous_function_parameter_return;



typedef struct CSharpParser_anonymous_function_parameter_modifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_anonymous_function_parameter_modifier_return;



typedef struct CSharpParser_object_creation_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_object_creation_expression_return;



typedef struct CSharpParser_object_or_collection_initializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_object_or_collection_initializer_return;



typedef struct CSharpParser_collection_initializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_collection_initializer_return;



typedef struct CSharpParser_element_initializer_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_element_initializer_list_return;



typedef struct CSharpParser_element_initializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_element_initializer_return;



typedef struct CSharpParser_object_initializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_object_initializer_return;



typedef struct CSharpParser_member_initializer_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_member_initializer_list_return;



typedef struct CSharpParser_member_initializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_member_initializer_return;



typedef struct CSharpParser_initializer_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_initializer_value_return;



typedef struct CSharpParser_typeof_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_typeof_expression_return;



typedef struct CSharpParser_unbound_type_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_unbound_type_name_return;



typedef struct CSharpParser_unbound_type_name_start_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_unbound_type_name_start_return;



typedef struct CSharpParser_unbound_type_name_part_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_unbound_type_name_part_return;



typedef struct CSharpParser_generic_dimension_specifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_generic_dimension_specifier_return;



typedef struct CSharpParser_commas_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_commas_return;



typedef struct CSharpParser_type_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_type_name_return;



typedef struct CSharpParser_namespace_or_type_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_namespace_or_type_name_return;



typedef struct CSharpParser_type_or_generic_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_type_or_generic_return;



typedef struct CSharpParser_qid_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_qid_return;



typedef struct CSharpParser_qid_start_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_qid_start_return;



typedef struct CSharpParser_qid_part_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_qid_part_return;



typedef struct CSharpParser_generic_argument_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_generic_argument_list_return;



typedef struct CSharpParser_type_arguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_type_arguments_return;



typedef struct CSharpParser_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_type_return;



typedef struct CSharpParser_non_nullable_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_non_nullable_type_return;



typedef struct CSharpParser_non_array_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_non_array_type_return;



typedef struct CSharpParser_array_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_array_type_return;



typedef struct CSharpParser_unmanaged_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_unmanaged_type_return;



typedef struct CSharpParser_class_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_class_type_return;



typedef struct CSharpParser_pointer_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_pointer_type_return;



typedef struct CSharpParser_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_block_return;



typedef struct CSharpParser_statement_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_statement_list_return;



typedef struct CSharpParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_expression_return;



typedef struct CSharpParser_expression_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_expression_list_return;



typedef struct CSharpParser_assignment_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_assignment_return;



typedef struct CSharpParser_unary_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_unary_expression_return;



typedef struct CSharpParser_cast_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_cast_expression_return;



typedef struct CSharpParser_assignment_operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_assignment_operator_return;



typedef struct CSharpParser_pre_increment_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_pre_increment_expression_return;



typedef struct CSharpParser_pre_decrement_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_pre_decrement_expression_return;



typedef struct CSharpParser_pointer_indirection_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_pointer_indirection_expression_return;



typedef struct CSharpParser_addressof_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_addressof_expression_return;



typedef struct CSharpParser_non_assignment_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_non_assignment_expression_return;



typedef struct CSharpParser_multiplicative_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_multiplicative_expression_return;



typedef struct CSharpParser_additive_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_additive_expression_return;



typedef struct CSharpParser_shift_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_shift_expression_return;



typedef struct CSharpParser_relational_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_relational_expression_return;



typedef struct CSharpParser_equality_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_equality_expression_return;



typedef struct CSharpParser_and_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_and_expression_return;



typedef struct CSharpParser_exclusive_or_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_exclusive_or_expression_return;



typedef struct CSharpParser_inclusive_or_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_inclusive_or_expression_return;



typedef struct CSharpParser_conditional_and_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_conditional_and_expression_return;



typedef struct CSharpParser_conditional_or_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_conditional_or_expression_return;



typedef struct CSharpParser_null_coalescing_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_null_coalescing_expression_return;



typedef struct CSharpParser_conditional_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_conditional_expression_return;



typedef struct CSharpParser_lambda_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_lambda_expression_return;



typedef struct CSharpParser_anonymous_function_signature_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_anonymous_function_signature_return;



typedef struct CSharpParser_implicit_anonymous_function_parameter_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_implicit_anonymous_function_parameter_list_return;



typedef struct CSharpParser_implicit_anonymous_function_parameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_implicit_anonymous_function_parameter_return;



typedef struct CSharpParser_anonymous_function_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_anonymous_function_body_return;



typedef struct CSharpParser_query_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_query_expression_return;



typedef struct CSharpParser_query_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_query_body_return;



typedef struct CSharpParser_query_continuation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_query_continuation_return;



typedef struct CSharpParser_query_body_clauses_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_query_body_clauses_return;



typedef struct CSharpParser_query_body_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_query_body_clause_return;



typedef struct CSharpParser_from_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_from_clause_return;



typedef struct CSharpParser_join_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_join_clause_return;



typedef struct CSharpParser_let_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_let_clause_return;



typedef struct CSharpParser_orderby_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_orderby_clause_return;



typedef struct CSharpParser_ordering_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_ordering_list_return;



typedef struct CSharpParser_ordering_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_ordering_return;



typedef struct CSharpParser_ordering_direction_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_ordering_direction_return;



typedef struct CSharpParser_select_or_group_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_select_or_group_clause_return;



typedef struct CSharpParser_select_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_select_clause_return;



typedef struct CSharpParser_group_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_group_clause_return;



typedef struct CSharpParser_where_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_where_clause_return;



typedef struct CSharpParser_boolean_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_boolean_expression_return;



typedef struct CSharpParser_global_attributes_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_global_attributes_return;



typedef struct CSharpParser_global_attribute_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_global_attribute_return;



typedef struct CSharpParser_global_attribute_target_specifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_global_attribute_target_specifier_return;



typedef struct CSharpParser_global_attribute_target_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_global_attribute_target_return;



typedef struct CSharpParser_attributes_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_attributes_return;



typedef struct CSharpParser_attribute_sections_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_attribute_sections_return;



typedef struct CSharpParser_attribute_section_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_attribute_section_return;



typedef struct CSharpParser_attribute_target_specifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_attribute_target_specifier_return;



typedef struct CSharpParser_attribute_target_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_attribute_target_return;



typedef struct CSharpParser_attribute_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_attribute_list_return;



typedef struct CSharpParser_attribute_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_attribute_return;



typedef struct CSharpParser_attribute_arguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_attribute_arguments_return;



typedef struct CSharpParser_positional_argument_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_positional_argument_list_return;



typedef struct CSharpParser_positional_argument_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_positional_argument_return;



typedef struct CSharpParser_named_argument_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_named_argument_list_return;



typedef struct CSharpParser_named_argument_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_named_argument_return;



typedef struct CSharpParser_attribute_argument_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_attribute_argument_expression_return;



typedef struct CSharpParser_class_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_class_declaration_return;



typedef struct CSharpParser_class_base_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_class_base_return;



typedef struct CSharpParser_interface_type_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_interface_type_list_return;



typedef struct CSharpParser_class_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_class_body_return;



typedef struct CSharpParser_class_member_declarations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_class_member_declarations_return;



typedef struct CSharpParser_constant_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_constant_declaration_return;



typedef struct CSharpParser_constant_declarators_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_constant_declarators_return;



typedef struct CSharpParser_constant_declarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_constant_declarator_return;



typedef struct CSharpParser_constant_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_constant_expression_return;



typedef struct CSharpParser_field_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_field_declaration_return;



typedef struct CSharpParser_variable_declarators_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_variable_declarators_return;



typedef struct CSharpParser_variable_declarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_variable_declarator_return;



typedef struct CSharpParser_method_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_method_declaration_return;



typedef struct CSharpParser_method_header_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_method_header_return;



typedef struct CSharpParser_method_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_method_body_return;



typedef struct CSharpParser_member_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_member_name_return;



typedef struct CSharpParser_property_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_property_declaration_return;



typedef struct CSharpParser_accessor_declarations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_accessor_declarations_return;



typedef struct CSharpParser_get_accessor_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_get_accessor_declaration_return;



typedef struct CSharpParser_set_accessor_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_set_accessor_declaration_return;



typedef struct CSharpParser_accessor_modifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_accessor_modifier_return;



typedef struct CSharpParser_accessor_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_accessor_body_return;



typedef struct CSharpParser_event_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_event_declaration_return;



typedef struct CSharpParser_event_modifiers_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_event_modifiers_return;



typedef struct CSharpParser_event_accessor_declarations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_event_accessor_declarations_return;



typedef struct CSharpParser_add_accessor_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_add_accessor_declaration_return;



typedef struct CSharpParser_remove_accessor_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_remove_accessor_declaration_return;



typedef struct CSharpParser_enum_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_enum_declaration_return;



typedef struct CSharpParser_enum_base_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_enum_base_return;



typedef struct CSharpParser_enum_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_enum_body_return;



typedef struct CSharpParser_enum_member_declarations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_enum_member_declarations_return;



typedef struct CSharpParser_enum_member_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_enum_member_declaration_return;



typedef struct CSharpParser_integral_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_integral_type_return;



typedef struct CSharpParser_delegate_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_delegate_declaration_return;



typedef struct CSharpParser_delegate_modifiers_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_delegate_modifiers_return;



typedef struct CSharpParser_variant_generic_parameter_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_variant_generic_parameter_list_return;



typedef struct CSharpParser_variant_type_parameters_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_variant_type_parameters_return;



typedef struct CSharpParser_variant_type_variable_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_variant_type_variable_name_return;



typedef struct CSharpParser_variance_annotation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_variance_annotation_return;



typedef struct CSharpParser_type_parameter_constraints_clauses_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_type_parameter_constraints_clauses_return;



typedef struct CSharpParser_type_parameter_constraints_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_type_parameter_constraints_clause_return;



typedef struct CSharpParser_type_parameter_constraint_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_type_parameter_constraint_list_return;



typedef struct CSharpParser_secondary_constraint_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_secondary_constraint_list_return;



typedef struct CSharpParser_secondary_constraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_secondary_constraint_return;



typedef struct CSharpParser_type_variable_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_type_variable_name_return;



typedef struct CSharpParser_constructor_constraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_constructor_constraint_return;



typedef struct CSharpParser_return_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_return_type_return;



typedef struct CSharpParser_formal_parameter_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_formal_parameter_list_return;



typedef struct CSharpParser_formal_parameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_formal_parameter_return;



typedef struct CSharpParser_fixed_parameters_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_fixed_parameters_return;



typedef struct CSharpParser_fixed_parameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_fixed_parameter_return;



typedef struct CSharpParser_default_argument_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_default_argument_return;



typedef struct CSharpParser_parameter_modifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_parameter_modifier_return;



typedef struct CSharpParser_parameter_array_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_parameter_array_return;



typedef struct CSharpParser_interface_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_interface_declaration_return;



typedef struct CSharpParser_interface_modifiers_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_interface_modifiers_return;



typedef struct CSharpParser_interface_base_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_interface_base_return;



typedef struct CSharpParser_interface_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_interface_body_return;



typedef struct CSharpParser_interface_member_declarations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_interface_member_declarations_return;



typedef struct CSharpParser_interface_member_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_interface_member_declaration_return;



typedef struct CSharpParser_interface_property_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_interface_property_declaration_return;



typedef struct CSharpParser_interface_method_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_interface_method_declaration_return;



typedef struct CSharpParser_interface_event_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_interface_event_declaration_return;



typedef struct CSharpParser_interface_indexer_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_interface_indexer_declaration_return;



typedef struct CSharpParser_interface_accessor_declarations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_interface_accessor_declarations_return;



typedef struct CSharpParser_interface_get_accessor_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_interface_get_accessor_declaration_return;



typedef struct CSharpParser_interface_set_accessor_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_interface_set_accessor_declaration_return;



typedef struct CSharpParser_method_modifiers_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_method_modifiers_return;



typedef struct CSharpParser_struct_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_struct_declaration_return;



typedef struct CSharpParser_struct_modifiers_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_struct_modifiers_return;



typedef struct CSharpParser_struct_modifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_struct_modifier_return;



typedef struct CSharpParser_struct_interfaces_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_struct_interfaces_return;



typedef struct CSharpParser_struct_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_struct_body_return;



typedef struct CSharpParser_struct_member_declarations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_struct_member_declarations_return;



typedef struct CSharpParser_struct_member_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_struct_member_declaration_return;



typedef struct CSharpParser_indexer_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_indexer_declaration_return;



typedef struct CSharpParser_indexer_declarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_indexer_declarator_return;



typedef struct CSharpParser_operator_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_operator_declaration_return;



typedef struct CSharpParser_operator_declarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_operator_declarator_return;



typedef struct CSharpParser_unary_operator_declarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_unary_operator_declarator_return;



typedef struct CSharpParser_overloadable_unary_operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_overloadable_unary_operator_return;



typedef struct CSharpParser_binary_operator_declarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_binary_operator_declarator_return;



typedef struct CSharpParser_overloadable_binary_operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_overloadable_binary_operator_return;



typedef struct CSharpParser_conversion_operator_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_conversion_operator_declaration_return;



typedef struct CSharpParser_conversion_operator_declarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_conversion_operator_declarator_return;



typedef struct CSharpParser_operator_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_operator_body_return;



typedef struct CSharpParser_constructor_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_constructor_declaration_return;



typedef struct CSharpParser_constructor_declarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_constructor_declarator_return;



typedef struct CSharpParser_constructor_initializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_constructor_initializer_return;



typedef struct CSharpParser_constructor_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_constructor_body_return;



typedef struct CSharpParser_destructor_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_destructor_declaration_return;



typedef struct CSharpParser_destructor_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_destructor_body_return;



typedef struct CSharpParser_invocation_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_invocation_expression_return;



typedef struct CSharpParser_invocation_start_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_invocation_start_return;



typedef struct CSharpParser_invocation_part_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_invocation_part_return;



typedef struct CSharpParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_statement_return;



typedef struct CSharpParser_embedded_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_embedded_statement_return;



typedef struct CSharpParser_fixed_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_fixed_statement_return;



typedef struct CSharpParser_fixed_pointer_declarators_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_fixed_pointer_declarators_return;



typedef struct CSharpParser_fixed_pointer_declarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_fixed_pointer_declarator_return;



typedef struct CSharpParser_fixed_pointer_initializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_fixed_pointer_initializer_return;



typedef struct CSharpParser_unsafe_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_unsafe_statement_return;



typedef struct CSharpParser_labeled_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_labeled_statement_return;



typedef struct CSharpParser_declaration_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_declaration_statement_return;



typedef struct CSharpParser_local_variable_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_local_variable_declaration_return;



typedef struct CSharpParser_local_variable_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_local_variable_type_return;



typedef struct CSharpParser_local_variable_declarators_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_local_variable_declarators_return;



typedef struct CSharpParser_local_variable_declarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_local_variable_declarator_return;



typedef struct CSharpParser_local_variable_initializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_local_variable_initializer_return;



typedef struct CSharpParser_stackalloc_initializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_stackalloc_initializer_return;



typedef struct CSharpParser_local_constant_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_local_constant_declaration_return;



typedef struct CSharpParser_expression_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_expression_statement_return;



typedef struct CSharpParser_statement_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_statement_expression_return;



typedef struct CSharpParser_selection_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_selection_statement_return;



typedef struct CSharpParser_if_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_if_statement_return;



typedef struct CSharpParser_else_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_else_statement_return;



typedef struct CSharpParser_switch_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_switch_statement_return;



typedef struct CSharpParser_switch_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_switch_block_return;



typedef struct CSharpParser_switch_sections_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_switch_sections_return;



typedef struct CSharpParser_switch_section_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_switch_section_return;



typedef struct CSharpParser_switch_labels_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_switch_labels_return;



typedef struct CSharpParser_switch_label_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_switch_label_return;



typedef struct CSharpParser_iteration_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_iteration_statement_return;



typedef struct CSharpParser_while_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_while_statement_return;



typedef struct CSharpParser_do_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_do_statement_return;



typedef struct CSharpParser_for_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_for_statement_return;



typedef struct CSharpParser_for_initializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_for_initializer_return;



typedef struct CSharpParser_for_condition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_for_condition_return;



typedef struct CSharpParser_for_iterator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_for_iterator_return;



typedef struct CSharpParser_statement_expression_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_statement_expression_list_return;



typedef struct CSharpParser_foreach_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_foreach_statement_return;



typedef struct CSharpParser_jump_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_jump_statement_return;



typedef struct CSharpParser_break_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_break_statement_return;



typedef struct CSharpParser_continue_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_continue_statement_return;



typedef struct CSharpParser_goto_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_goto_statement_return;



typedef struct CSharpParser_return_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_return_statement_return;



typedef struct CSharpParser_throw_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_throw_statement_return;



typedef struct CSharpParser_try_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_try_statement_return;



typedef struct CSharpParser_catch_clauses_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_catch_clauses_return;



typedef struct CSharpParser_specific_catch_clauses_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_specific_catch_clauses_return;



typedef struct CSharpParser_specific_catch_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_specific_catch_clause_return;



typedef struct CSharpParser_general_catch_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_general_catch_clause_return;



typedef struct CSharpParser_finally_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_finally_clause_return;



typedef struct CSharpParser_checked_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_checked_statement_return;



typedef struct CSharpParser_unchecked_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_unchecked_statement_return;



typedef struct CSharpParser_lock_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_lock_statement_return;



typedef struct CSharpParser_using_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_using_statement_return;



typedef struct CSharpParser_resource_acquisition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_resource_acquisition_return;



typedef struct CSharpParser_yield_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_yield_statement_return;



typedef struct CSharpParser_predefined_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_predefined_type_return;



typedef struct CSharpParser_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_identifier_return;



typedef struct CSharpParser_keyword_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_keyword_return;



typedef struct CSharpParser_also_keyword_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_also_keyword_return;



typedef struct CSharpParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_literal_return;



typedef struct CSharpParser_assignment_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_assignment_list_return;



typedef struct CSharpParser_field_declarations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_field_declarations_return;



typedef struct CSharpParser_property_declaration_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_property_declaration_list_return;



typedef struct CSharpParser_constant_declarations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_constant_declarations_return;



typedef struct CSharpParser_literals_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_literals_return;



typedef struct CSharpParser_delegate_declaration_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_delegate_declaration_list_return;



typedef struct CSharpParser_local_variable_declaration_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_local_variable_declaration_list_return;



typedef struct CSharpParser_local_variable_initializer_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_local_variable_initializer_list_return;



typedef struct CSharpParser_expression_list_test_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_expression_list_test_return;



typedef struct CSharpParser_unary_expression_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_unary_expression_list_return;



typedef struct CSharpParser_invocation_expression_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_invocation_expression_list_return;



typedef struct CSharpParser_primary_expression_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_primary_expression_list_return;



typedef struct CSharpParser_non_assignment_expression_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_non_assignment_expression_list_return;



typedef struct CSharpParser_method_declarations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CSharpParser_method_declarations_return;




/** Context tracking structure for 
CSharpParser

 */
struct CSharpParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     CSharpParser_compilation_unit_return
     (*compilation_unit)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_namespace_declaration_return
     (*namespace_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_namespace_block_return
     (*namespace_block)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_namespace_body_return
     (*namespace_body)	(struct CSharpParser_Ctx_struct * ctx, bool bGlobal);

     CSharpParser_extern_alias_directives_return
     (*extern_alias_directives)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_extern_alias_directive_return
     (*extern_alias_directive)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_using_directives_return
     (*using_directives)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_using_directive_return
     (*using_directive)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_using_alias_directive_return
     (*using_alias_directive)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_using_namespace_directive_return
     (*using_namespace_directive)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_namespace_member_declarations_return
     (*namespace_member_declarations)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_namespace_member_declaration_return
     (*namespace_member_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_type_declaration_return
     (*type_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_qualified_identifier_return
     (*qualified_identifier)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_namespace_name_return
     (*namespace_name)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_modifiers_return
     (*modifiers)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_modifier_return
     (*modifier)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_class_member_declaration_return
     (*class_member_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_primary_expression_return
     (*primary_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_primary_expression_start_return
     (*primary_expression_start)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_primary_expression_part_return
     (*primary_expression_part)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_access_identifier_return
     (*access_identifier)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_access_operator_return
     (*access_operator)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_brackets_or_arguments_return
     (*brackets_or_arguments)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_brackets_return
     (*brackets)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_paren_expression_return
     (*paren_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_arguments_return
     (*arguments)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_argument_list_return
     (*argument_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_argument_return
     (*argument)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_argument_name_return
     (*argument_name)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_argument_value_return
     (*argument_value)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_ref_variable_reference_return
     (*ref_variable_reference)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_variable_reference_return
     (*variable_reference)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_rank_specifiers_return
     (*rank_specifiers)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_rank_specifier_return
     (*rank_specifier)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_dim_separators_return
     (*dim_separators)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_delegate_creation_expression_return
     (*delegate_creation_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_anonymous_object_creation_expression_return
     (*anonymous_object_creation_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_anonymous_object_initializer_return
     (*anonymous_object_initializer)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_member_declarator_list_return
     (*member_declarator_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_member_declarator_return
     (*member_declarator)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_primary_or_array_creation_expression_return
     (*primary_or_array_creation_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_array_creation_expression_return
     (*array_creation_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_array_initializer_return
     (*array_initializer)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_variable_initializer_list_return
     (*variable_initializer_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_variable_initializer_return
     (*variable_initializer)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_sizeof_expression_return
     (*sizeof_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_checked_expression_return
     (*checked_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_unchecked_expression_return
     (*unchecked_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_default_value_expression_return
     (*default_value_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_anonymous_method_expression_return
     (*anonymous_method_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_explicit_anonymous_function_signature_return
     (*explicit_anonymous_function_signature)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_explicit_anonymous_function_parameter_list_return
     (*explicit_anonymous_function_parameter_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_explicit_anonymous_function_parameter_return
     (*explicit_anonymous_function_parameter)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_anonymous_function_parameter_modifier_return
     (*anonymous_function_parameter_modifier)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_object_creation_expression_return
     (*object_creation_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_object_or_collection_initializer_return
     (*object_or_collection_initializer)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_collection_initializer_return
     (*collection_initializer)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_element_initializer_list_return
     (*element_initializer_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_element_initializer_return
     (*element_initializer)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_object_initializer_return
     (*object_initializer)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_member_initializer_list_return
     (*member_initializer_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_member_initializer_return
     (*member_initializer)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_initializer_value_return
     (*initializer_value)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_typeof_expression_return
     (*typeof_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_unbound_type_name_return
     (*unbound_type_name)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_unbound_type_name_start_return
     (*unbound_type_name_start)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_unbound_type_name_part_return
     (*unbound_type_name_part)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_generic_dimension_specifier_return
     (*generic_dimension_specifier)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_commas_return
     (*commas)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_type_name_return
     (*type_name)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_namespace_or_type_name_return
     (*namespace_or_type_name)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_type_or_generic_return
     (*type_or_generic)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_qid_return
     (*qid)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_qid_start_return
     (*qid_start)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_qid_part_return
     (*qid_part)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_generic_argument_list_return
     (*generic_argument_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_type_arguments_return
     (*type_arguments)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_type_return
     (*type)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_non_nullable_type_return
     (*non_nullable_type)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_non_array_type_return
     (*non_array_type)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_array_type_return
     (*array_type)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_unmanaged_type_return
     (*unmanaged_type)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_class_type_return
     (*class_type)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_pointer_type_return
     (*pointer_type)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_block_return
     (*block)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_statement_list_return
     (*statement_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_expression_return
     (*expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_expression_list_return
     (*expression_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_assignment_return
     (*assignment)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_unary_expression_return
     (*unary_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_cast_expression_return
     (*cast_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_assignment_operator_return
     (*assignment_operator)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_pre_increment_expression_return
     (*pre_increment_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_pre_decrement_expression_return
     (*pre_decrement_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_pointer_indirection_expression_return
     (*pointer_indirection_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_addressof_expression_return
     (*addressof_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_non_assignment_expression_return
     (*non_assignment_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_multiplicative_expression_return
     (*multiplicative_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_additive_expression_return
     (*additive_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_shift_expression_return
     (*shift_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_relational_expression_return
     (*relational_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_equality_expression_return
     (*equality_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_and_expression_return
     (*and_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_exclusive_or_expression_return
     (*exclusive_or_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_inclusive_or_expression_return
     (*inclusive_or_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_conditional_and_expression_return
     (*conditional_and_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_conditional_or_expression_return
     (*conditional_or_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_null_coalescing_expression_return
     (*null_coalescing_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_conditional_expression_return
     (*conditional_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_lambda_expression_return
     (*lambda_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_anonymous_function_signature_return
     (*anonymous_function_signature)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_implicit_anonymous_function_parameter_list_return
     (*implicit_anonymous_function_parameter_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_implicit_anonymous_function_parameter_return
     (*implicit_anonymous_function_parameter)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_anonymous_function_body_return
     (*anonymous_function_body)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_query_expression_return
     (*query_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_query_body_return
     (*query_body)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_query_continuation_return
     (*query_continuation)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_query_body_clauses_return
     (*query_body_clauses)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_query_body_clause_return
     (*query_body_clause)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_from_clause_return
     (*from_clause)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_join_clause_return
     (*join_clause)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_let_clause_return
     (*let_clause)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_orderby_clause_return
     (*orderby_clause)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_ordering_list_return
     (*ordering_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_ordering_return
     (*ordering)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_ordering_direction_return
     (*ordering_direction)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_select_or_group_clause_return
     (*select_or_group_clause)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_select_clause_return
     (*select_clause)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_group_clause_return
     (*group_clause)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_where_clause_return
     (*where_clause)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_boolean_expression_return
     (*boolean_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_global_attributes_return
     (*global_attributes)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_global_attribute_return
     (*global_attribute)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_global_attribute_target_specifier_return
     (*global_attribute_target_specifier)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_global_attribute_target_return
     (*global_attribute_target)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_attributes_return
     (*attributes)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_attribute_sections_return
     (*attribute_sections)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_attribute_section_return
     (*attribute_section)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_attribute_target_specifier_return
     (*attribute_target_specifier)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_attribute_target_return
     (*attribute_target)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_attribute_list_return
     (*attribute_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_attribute_return
     (*attribute)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_attribute_arguments_return
     (*attribute_arguments)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_positional_argument_list_return
     (*positional_argument_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_positional_argument_return
     (*positional_argument)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_named_argument_list_return
     (*named_argument_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_named_argument_return
     (*named_argument)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_attribute_argument_expression_return
     (*attribute_argument_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_class_declaration_return
     (*class_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_class_base_return
     (*class_base)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_interface_type_list_return
     (*interface_type_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_class_body_return
     (*class_body)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_class_member_declarations_return
     (*class_member_declarations)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_constant_declaration_return
     (*constant_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_constant_declarators_return
     (*constant_declarators)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_constant_declarator_return
     (*constant_declarator)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_constant_expression_return
     (*constant_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_field_declaration_return
     (*field_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_variable_declarators_return
     (*variable_declarators)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_variable_declarator_return
     (*variable_declarator)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_method_declaration_return
     (*method_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_method_header_return
     (*method_header)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_method_body_return
     (*method_body)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_member_name_return
     (*member_name)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_property_declaration_return
     (*property_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_accessor_declarations_return
     (*accessor_declarations)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_get_accessor_declaration_return
     (*get_accessor_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_set_accessor_declaration_return
     (*set_accessor_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_accessor_modifier_return
     (*accessor_modifier)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_accessor_body_return
     (*accessor_body)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_event_declaration_return
     (*event_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_event_modifiers_return
     (*event_modifiers)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_event_accessor_declarations_return
     (*event_accessor_declarations)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_add_accessor_declaration_return
     (*add_accessor_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_remove_accessor_declaration_return
     (*remove_accessor_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_enum_declaration_return
     (*enum_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_enum_base_return
     (*enum_base)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_enum_body_return
     (*enum_body)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_enum_member_declarations_return
     (*enum_member_declarations)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_enum_member_declaration_return
     (*enum_member_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_integral_type_return
     (*integral_type)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_delegate_declaration_return
     (*delegate_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_delegate_modifiers_return
     (*delegate_modifiers)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_variant_generic_parameter_list_return
     (*variant_generic_parameter_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_variant_type_parameters_return
     (*variant_type_parameters)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_variant_type_variable_name_return
     (*variant_type_variable_name)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_variance_annotation_return
     (*variance_annotation)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_type_parameter_constraints_clauses_return
     (*type_parameter_constraints_clauses)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_type_parameter_constraints_clause_return
     (*type_parameter_constraints_clause)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_type_parameter_constraint_list_return
     (*type_parameter_constraint_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_secondary_constraint_list_return
     (*secondary_constraint_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_secondary_constraint_return
     (*secondary_constraint)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_type_variable_name_return
     (*type_variable_name)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_constructor_constraint_return
     (*constructor_constraint)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_return_type_return
     (*return_type)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_formal_parameter_list_return
     (*formal_parameter_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_formal_parameter_return
     (*formal_parameter)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_fixed_parameters_return
     (*fixed_parameters)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_fixed_parameter_return
     (*fixed_parameter)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_default_argument_return
     (*default_argument)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_parameter_modifier_return
     (*parameter_modifier)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_parameter_array_return
     (*parameter_array)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_interface_declaration_return
     (*interface_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_interface_modifiers_return
     (*interface_modifiers)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_interface_base_return
     (*interface_base)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_interface_body_return
     (*interface_body)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_interface_member_declarations_return
     (*interface_member_declarations)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_interface_member_declaration_return
     (*interface_member_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_interface_property_declaration_return
     (*interface_property_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_interface_method_declaration_return
     (*interface_method_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_interface_event_declaration_return
     (*interface_event_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_interface_indexer_declaration_return
     (*interface_indexer_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_interface_accessor_declarations_return
     (*interface_accessor_declarations)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_interface_get_accessor_declaration_return
     (*interface_get_accessor_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_interface_set_accessor_declaration_return
     (*interface_set_accessor_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_method_modifiers_return
     (*method_modifiers)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_struct_declaration_return
     (*struct_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_struct_modifiers_return
     (*struct_modifiers)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_struct_modifier_return
     (*struct_modifier)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_struct_interfaces_return
     (*struct_interfaces)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_struct_body_return
     (*struct_body)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_struct_member_declarations_return
     (*struct_member_declarations)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_struct_member_declaration_return
     (*struct_member_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_indexer_declaration_return
     (*indexer_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_indexer_declarator_return
     (*indexer_declarator)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_operator_declaration_return
     (*operator_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_operator_declarator_return
     (*operator_declarator)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_unary_operator_declarator_return
     (*unary_operator_declarator)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_overloadable_unary_operator_return
     (*overloadable_unary_operator)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_binary_operator_declarator_return
     (*binary_operator_declarator)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_overloadable_binary_operator_return
     (*overloadable_binary_operator)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_conversion_operator_declaration_return
     (*conversion_operator_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_conversion_operator_declarator_return
     (*conversion_operator_declarator)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_operator_body_return
     (*operator_body)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_constructor_declaration_return
     (*constructor_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_constructor_declarator_return
     (*constructor_declarator)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_constructor_initializer_return
     (*constructor_initializer)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_constructor_body_return
     (*constructor_body)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_destructor_declaration_return
     (*destructor_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_destructor_body_return
     (*destructor_body)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_invocation_expression_return
     (*invocation_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_invocation_start_return
     (*invocation_start)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_invocation_part_return
     (*invocation_part)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_statement_return
     (*statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_embedded_statement_return
     (*embedded_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_fixed_statement_return
     (*fixed_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_fixed_pointer_declarators_return
     (*fixed_pointer_declarators)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_fixed_pointer_declarator_return
     (*fixed_pointer_declarator)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_fixed_pointer_initializer_return
     (*fixed_pointer_initializer)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_unsafe_statement_return
     (*unsafe_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_labeled_statement_return
     (*labeled_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_declaration_statement_return
     (*declaration_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_local_variable_declaration_return
     (*local_variable_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_local_variable_type_return
     (*local_variable_type)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_local_variable_declarators_return
     (*local_variable_declarators)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_local_variable_declarator_return
     (*local_variable_declarator)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_local_variable_initializer_return
     (*local_variable_initializer)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_stackalloc_initializer_return
     (*stackalloc_initializer)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_local_constant_declaration_return
     (*local_constant_declaration)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_expression_statement_return
     (*expression_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_statement_expression_return
     (*statement_expression)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_selection_statement_return
     (*selection_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_if_statement_return
     (*if_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_else_statement_return
     (*else_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_switch_statement_return
     (*switch_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_switch_block_return
     (*switch_block)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_switch_sections_return
     (*switch_sections)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_switch_section_return
     (*switch_section)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_switch_labels_return
     (*switch_labels)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_switch_label_return
     (*switch_label)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_iteration_statement_return
     (*iteration_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_while_statement_return
     (*while_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_do_statement_return
     (*do_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_for_statement_return
     (*for_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_for_initializer_return
     (*for_initializer)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_for_condition_return
     (*for_condition)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_for_iterator_return
     (*for_iterator)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_statement_expression_list_return
     (*statement_expression_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_foreach_statement_return
     (*foreach_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_jump_statement_return
     (*jump_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_break_statement_return
     (*break_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_continue_statement_return
     (*continue_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_goto_statement_return
     (*goto_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_return_statement_return
     (*return_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_throw_statement_return
     (*throw_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_try_statement_return
     (*try_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_catch_clauses_return
     (*catch_clauses)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_specific_catch_clauses_return
     (*specific_catch_clauses)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_specific_catch_clause_return
     (*specific_catch_clause)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_general_catch_clause_return
     (*general_catch_clause)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_finally_clause_return
     (*finally_clause)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_checked_statement_return
     (*checked_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_unchecked_statement_return
     (*unchecked_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_lock_statement_return
     (*lock_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_using_statement_return
     (*using_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_resource_acquisition_return
     (*resource_acquisition)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_yield_statement_return
     (*yield_statement)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_predefined_type_return
     (*predefined_type)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_identifier_return
     (*identifier)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_keyword_return
     (*keyword)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_also_keyword_return
     (*also_keyword)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_literal_return
     (*literal)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_assignment_list_return
     (*assignment_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_field_declarations_return
     (*field_declarations)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_property_declaration_list_return
     (*property_declaration_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_constant_declarations_return
     (*constant_declarations)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_literals_return
     (*literals)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_delegate_declaration_list_return
     (*delegate_declaration_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_local_variable_declaration_list_return
     (*local_variable_declaration_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_local_variable_initializer_list_return
     (*local_variable_initializer_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_expression_list_test_return
     (*expression_list_test)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_unary_expression_list_return
     (*unary_expression_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_invocation_expression_list_return
     (*invocation_expression_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_primary_expression_list_return
     (*primary_expression_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_non_assignment_expression_list_return
     (*non_assignment_expression_list)	(struct CSharpParser_Ctx_struct * ctx);

     CSharpParser_method_declarations_return
     (*method_declarations)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred1_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred2_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred3_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred4_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred5_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred6_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred7_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred8_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred9_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred10_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred11_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred12_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred13_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred14_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred15_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred16_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred17_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred18_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred19_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred20_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred21_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred22_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred23_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred24_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred25_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred26_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred27_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred28_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred29_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred30_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred31_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred32_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred33_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred34_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred35_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred36_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred37_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred38_CSharp)	(struct CSharpParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred39_CSharp)	(struct CSharpParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct CSharpParser_Ctx_struct * ctx);
    void	    (*free)   (struct CSharpParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pCSharpParser CSharpParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pCSharpParser CSharpParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__64      64
#define T__65      65
#define T__66      66
#define T__67      67
#define T__68      68
#define T__69      69
#define T__70      70
#define T__71      71
#define T__72      72
#define T__73      73
#define T__74      74
#define T__75      75
#define T__76      76
#define T__77      77
#define T__78      78
#define T__79      79
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define T__84      84
#define T__85      85
#define T__86      86
#define T__87      87
#define T__88      88
#define T__89      89
#define T__90      90
#define T__91      91
#define T__92      92
#define T__93      93
#define T__94      94
#define T__95      95
#define T__96      96
#define T__97      97
#define T__98      98
#define T__99      99
#define T__100      100
#define T__101      101
#define T__102      102
#define T__103      103
#define T__104      104
#define T__105      105
#define T__106      106
#define T__107      107
#define T__108      108
#define T__109      109
#define T__110      110
#define T__111      111
#define T__112      112
#define T__113      113
#define T__114      114
#define T__115      115
#define T__116      116
#define T__117      117
#define T__118      118
#define T__119      119
#define T__120      120
#define T__121      121
#define T__122      122
#define T__123      123
#define T__124      124
#define T__125      125
#define T__126      126
#define T__127      127
#define T__128      128
#define T__129      129
#define T__130      130
#define T__131      131
#define T__132      132
#define T__133      133
#define T__134      134
#define T__135      135
#define T__136      136
#define T__137      137
#define T__138      138
#define T__139      139
#define T__140      140
#define T__141      141
#define T__142      142
#define T__143      143
#define T__144      144
#define T__145      145
#define T__146      146
#define T__147      147
#define T__148      148
#define T__149      149
#define T__150      150
#define T__151      151
#define T__152      152
#define T__153      153
#define T__154      154
#define T__155      155
#define T__156      156
#define T__157      157
#define T__158      158
#define T__159      159
#define T__160      160
#define T__161      161
#define T__162      162
#define T__163      163
#define T__164      164
#define T__165      165
#define T__166      166
#define T__167      167
#define T__168      168
#define T__169      169
#define T__170      170
#define T__171      171
#define T__172      172
#define T__173      173
#define T__174      174
#define T__175      175
#define T__176      176
#define T__177      177
#define T__178      178
#define T__179      179
#define T__180      180
#define T__181      181
#define T__182      182
#define T__183      183
#define T__184      184
#define T__185      185
#define T__186      186
#define T__187      187
#define T__188      188
#define T__189      189
#define T__190      190
#define T__191      191
#define T__192      192
#define T__193      193
#define T__194      194
#define T__195      195
#define T__196      196
#define T__197      197
#define T__198      198
#define T__199      199
#define T__200      200
#define T__201      201
#define T__202      202
#define T__203      203
#define T__204      204
#define CATCH      4
#define CLASS_DECL      5
#define COMMENT      6
#define Character_literal      7
#define DECIMAL_DIGIT      8
#define DEFINE      9
#define DEFINE_TOKEN      10
#define DOC_LINE_COMMENT      11
#define DOT      12
#define Decimal_digits      13
#define Decimal_integer_literal      14
#define ELIF      15
#define ELSE_TOKEN      16
#define ENDIF      17
#define ENDIF_TOKEN      18
#define ENUM      19
#define EscapeSequence      20
#define Exponent_part      21
#define FALSE      22
#define GT      23
#define GooBall      24
#define GooBallIdentifier      25
#define HEX_DIGIT      26
#define HEX_DIGITS      27
#define Hex_number      28
#define IDENTIFIER      29
#define IF      30
#define IF_TOKEN      31
#define INTEGER_TYPE_SUFFIX      32
#define IdentifierPart      33
#define IdentifierStart      34
#define LINE_COMMENT      35
#define LT_NULL      36
#define MINUS      37
#define NUMBER      38
#define PP_AND_EXPRESSION      39
#define PP_CONDITIONAL      40
#define PP_EQUALITY_EXPRESSION      41
#define PP_EXPRESSION      42
#define PP_OR_EXPRESSION      43
#define PP_PRIMARY_EXPRESSION      44
#define PP_UNARY_EXPRESSION      45
#define PREPROCESSOR_DIRECTIVE      46
#define PTR      47
#define Pragma      48
#define RPAREN      49
#define Real_literal      50
#define Real_type_suffix      51
#define SEMI      52
#define STRINGLITERAL      53
#define Sign      54
#define TRUE      55
#define TS      56
#define UNDEF      57
#define UNDEF_TOKEN      58
#define USING      59
#define VARIABLE_DECL      60
#define Verbatim_string_literal      61
#define Verbatim_string_literal_character      62
#define WS      63
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for CSharpParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
