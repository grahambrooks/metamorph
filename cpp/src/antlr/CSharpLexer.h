/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : src/antlr/CSharp.g
 *     -                            On : 2012-09-05 18:33:16
 *     -                 for the lexer : CSharpLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
CSharpLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pCSharpLexer, which is returned from a call to CSharpLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pCSharpLexer are  as follows:
 *
 *  - 
 void
      pCSharpLexer->CATCH(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__64(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__65(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__66(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__67(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__68(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__69(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__70(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__71(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__72(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__73(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__74(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__75(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__76(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__77(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__78(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__79(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__80(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__81(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__82(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__83(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__84(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__85(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__86(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__87(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__88(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__89(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__90(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__91(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__92(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__93(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__94(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__95(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__96(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__97(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__98(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__99(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__100(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__101(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__102(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__103(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__104(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__105(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__106(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__107(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__108(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__109(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__110(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__111(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__112(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__113(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__114(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__115(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__116(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__117(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__118(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__119(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__120(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__121(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__122(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__123(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__124(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__125(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__126(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__127(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__128(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__129(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__130(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__131(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__132(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__133(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__134(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__135(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__136(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__137(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__138(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__139(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__140(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__141(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__142(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__143(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__144(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__145(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__146(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__147(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__148(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__149(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__150(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__151(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__152(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__153(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__154(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__155(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__156(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__157(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__158(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__159(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__160(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__161(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__162(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__163(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__164(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__165(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__166(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__167(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__168(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__169(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__170(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__171(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__172(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__173(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__174(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__175(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__176(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__177(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__178(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__179(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__180(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__181(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__182(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__183(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__184(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__185(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__186(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__187(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__188(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__189(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__190(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__191(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__192(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__193(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__194(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__195(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__196(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__197(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__198(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__199(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__200(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__201(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__202(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__203(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->T__204(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->TRUE(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->FALSE(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->LT_NULL(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->DOT(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->PTR(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->MINUS(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->GT(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->USING(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->ENUM(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->IF(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->ELIF(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->ENDIF(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->DEFINE(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->UNDEF(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->SEMI(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->RPAREN(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->WS(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->TS(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->DOC_LINE_COMMENT(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->LINE_COMMENT(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->COMMENT(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->STRINGLITERAL(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->Verbatim_string_literal(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->Verbatim_string_literal_character(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->NUMBER(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->GooBall(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->GooBallIdentifier(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->Real_literal(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->Character_literal(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->IDENTIFIER(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->Pragma(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->PREPROCESSOR_DIRECTIVE(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->PP_CONDITIONAL(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->IF_TOKEN(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->DEFINE_TOKEN(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->UNDEF_TOKEN(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->ELSE_TOKEN(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->ENDIF_TOKEN(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->PP_EXPRESSION(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->PP_OR_EXPRESSION(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->PP_AND_EXPRESSION(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->PP_EQUALITY_EXPRESSION(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->PP_UNARY_EXPRESSION(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->PP_PRIMARY_EXPRESSION(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->IdentifierStart(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->IdentifierPart(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->EscapeSequence(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->Decimal_integer_literal(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->Hex_number(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->Decimal_digits(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->DECIMAL_DIGIT(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->INTEGER_TYPE_SUFFIX(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->HEX_DIGITS(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->HEX_DIGIT(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->Exponent_part(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->Sign(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->Real_type_suffix(pCSharpLexer)
 *  - 
 void
      pCSharpLexer->Tokens(pCSharpLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_CSharpLexer_H
#define _CSharpLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct CSharpLexer_Ctx_struct CSharpLexer, * pCSharpLexer;



//#include <string>
//#include <map>
//#include <stack>
//using namespace::std;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
CSharpLexer

 */
struct CSharpLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mCATCH)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__64)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__65)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__66)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__67)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__68)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__69)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__70)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__71)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__72)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__73)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__74)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__75)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__76)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__77)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__78)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__79)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__80)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__81)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__82)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__83)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__84)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__85)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__86)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__87)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__88)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__89)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__90)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__91)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__92)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__93)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__94)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__95)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__96)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__97)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__98)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__99)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__100)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__101)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__102)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__103)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__104)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__105)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__106)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__107)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__108)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__109)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__110)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__111)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__112)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__113)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__114)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__115)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__116)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__117)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__118)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__119)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__120)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__121)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__122)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__123)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__124)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__125)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__126)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__127)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__128)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__129)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__130)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__131)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__132)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__133)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__134)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__135)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__136)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__137)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__138)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__139)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__140)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__141)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__142)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__143)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__144)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__145)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__146)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__147)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__148)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__149)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__150)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__151)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__152)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__153)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__154)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__155)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__156)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__157)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__158)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__159)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__160)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__161)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__162)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__163)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__164)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__165)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__166)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__167)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__168)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__169)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__170)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__171)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__172)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__173)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__174)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__175)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__176)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__177)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__178)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__179)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__180)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__181)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__182)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__183)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__184)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__185)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__186)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__187)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__188)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__189)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__190)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__191)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__192)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__193)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__194)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__195)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__196)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__197)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__198)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__199)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__200)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__201)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__202)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__203)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mT__204)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mTRUE)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mFALSE)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mLT_NULL)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mDOT)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mPTR)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mMINUS)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mGT)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mUSING)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mENUM)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mIF)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mELIF)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mENDIF)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mDEFINE)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mUNDEF)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mSEMI)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mRPAREN)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mTS)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mDOC_LINE_COMMENT)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mLINE_COMMENT)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mCOMMENT)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mSTRINGLITERAL)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mVerbatim_string_literal)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mVerbatim_string_literal_character)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mNUMBER)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mGooBall)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mGooBallIdentifier)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mReal_literal)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mCharacter_literal)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mIDENTIFIER)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mPragma)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mPREPROCESSOR_DIRECTIVE)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mPP_CONDITIONAL)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mIF_TOKEN)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mDEFINE_TOKEN)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mUNDEF_TOKEN)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mELSE_TOKEN)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mENDIF_TOKEN)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mPP_EXPRESSION)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mPP_OR_EXPRESSION)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mPP_AND_EXPRESSION)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mPP_EQUALITY_EXPRESSION)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mPP_UNARY_EXPRESSION)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mPP_PRIMARY_EXPRESSION)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mIdentifierStart)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mIdentifierPart)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mEscapeSequence)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mDecimal_integer_literal)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mHex_number)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mDecimal_digits)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mDECIMAL_DIGIT)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mINTEGER_TYPE_SUFFIX)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mHEX_DIGITS)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mHEX_DIGIT)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mExponent_part)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mSign)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mReal_type_suffix)	(struct CSharpLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct CSharpLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct CSharpLexer_Ctx_struct * ctx);
    void	    (*free)   (struct CSharpLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pCSharpLexer CSharpLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pCSharpLexer CSharpLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__64      64
#define T__65      65
#define T__66      66
#define T__67      67
#define T__68      68
#define T__69      69
#define T__70      70
#define T__71      71
#define T__72      72
#define T__73      73
#define T__74      74
#define T__75      75
#define T__76      76
#define T__77      77
#define T__78      78
#define T__79      79
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define T__84      84
#define T__85      85
#define T__86      86
#define T__87      87
#define T__88      88
#define T__89      89
#define T__90      90
#define T__91      91
#define T__92      92
#define T__93      93
#define T__94      94
#define T__95      95
#define T__96      96
#define T__97      97
#define T__98      98
#define T__99      99
#define T__100      100
#define T__101      101
#define T__102      102
#define T__103      103
#define T__104      104
#define T__105      105
#define T__106      106
#define T__107      107
#define T__108      108
#define T__109      109
#define T__110      110
#define T__111      111
#define T__112      112
#define T__113      113
#define T__114      114
#define T__115      115
#define T__116      116
#define T__117      117
#define T__118      118
#define T__119      119
#define T__120      120
#define T__121      121
#define T__122      122
#define T__123      123
#define T__124      124
#define T__125      125
#define T__126      126
#define T__127      127
#define T__128      128
#define T__129      129
#define T__130      130
#define T__131      131
#define T__132      132
#define T__133      133
#define T__134      134
#define T__135      135
#define T__136      136
#define T__137      137
#define T__138      138
#define T__139      139
#define T__140      140
#define T__141      141
#define T__142      142
#define T__143      143
#define T__144      144
#define T__145      145
#define T__146      146
#define T__147      147
#define T__148      148
#define T__149      149
#define T__150      150
#define T__151      151
#define T__152      152
#define T__153      153
#define T__154      154
#define T__155      155
#define T__156      156
#define T__157      157
#define T__158      158
#define T__159      159
#define T__160      160
#define T__161      161
#define T__162      162
#define T__163      163
#define T__164      164
#define T__165      165
#define T__166      166
#define T__167      167
#define T__168      168
#define T__169      169
#define T__170      170
#define T__171      171
#define T__172      172
#define T__173      173
#define T__174      174
#define T__175      175
#define T__176      176
#define T__177      177
#define T__178      178
#define T__179      179
#define T__180      180
#define T__181      181
#define T__182      182
#define T__183      183
#define T__184      184
#define T__185      185
#define T__186      186
#define T__187      187
#define T__188      188
#define T__189      189
#define T__190      190
#define T__191      191
#define T__192      192
#define T__193      193
#define T__194      194
#define T__195      195
#define T__196      196
#define T__197      197
#define T__198      198
#define T__199      199
#define T__200      200
#define T__201      201
#define T__202      202
#define T__203      203
#define T__204      204
#define CATCH      4
#define CLASS_DECL      5
#define COMMENT      6
#define Character_literal      7
#define DECIMAL_DIGIT      8
#define DEFINE      9
#define DEFINE_TOKEN      10
#define DOC_LINE_COMMENT      11
#define DOT      12
#define Decimal_digits      13
#define Decimal_integer_literal      14
#define ELIF      15
#define ELSE_TOKEN      16
#define ENDIF      17
#define ENDIF_TOKEN      18
#define ENUM      19
#define EscapeSequence      20
#define Exponent_part      21
#define FALSE      22
#define GT      23
#define GooBall      24
#define GooBallIdentifier      25
#define HEX_DIGIT      26
#define HEX_DIGITS      27
#define Hex_number      28
#define IDENTIFIER      29
#define IF      30
#define IF_TOKEN      31
#define INTEGER_TYPE_SUFFIX      32
#define IdentifierPart      33
#define IdentifierStart      34
#define LINE_COMMENT      35
#define LT_NULL      36
#define MINUS      37
#define NUMBER      38
#define PP_AND_EXPRESSION      39
#define PP_CONDITIONAL      40
#define PP_EQUALITY_EXPRESSION      41
#define PP_EXPRESSION      42
#define PP_OR_EXPRESSION      43
#define PP_PRIMARY_EXPRESSION      44
#define PP_UNARY_EXPRESSION      45
#define PREPROCESSOR_DIRECTIVE      46
#define PTR      47
#define Pragma      48
#define RPAREN      49
#define Real_literal      50
#define Real_type_suffix      51
#define SEMI      52
#define STRINGLITERAL      53
#define Sign      54
#define TRUE      55
#define TS      56
#define UNDEF      57
#define UNDEF_TOKEN      58
#define USING      59
#define VARIABLE_DECL      60
#define Verbatim_string_literal      61
#define Verbatim_string_literal_character      62
#define WS      63
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for CSharpLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
